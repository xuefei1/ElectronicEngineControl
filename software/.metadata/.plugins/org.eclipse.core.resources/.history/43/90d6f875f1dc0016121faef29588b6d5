/*************************************************************************
* Copyright (c) 2004 Altera Corporation, San Jose, California, USA.      *
* All rights reserved. All use of this software and documentation is     *
* subject to the License Agreement located at the end of this file below.*
**************************************************************************
* Description:                                                           *
* The following is a simple hello world program running MicroC/OS-II.The * 
* purpose of the design is to be a very simple application that just     *
* demonstrates MicroC/OS-II running on NIOS II.The design doesn't account*
* for issues such as checking system call return codes. etc.             *
*                                                                        *
* Requirements:                                                          *
*   -Supported Example Hardware Platforms                                *
*     Standard                                                           *
*     Full Featured                                                      *
*     Low Cost                                                           *
*   -Supported Development Boards                                        *
*     Nios II Development Board, Stratix II Edition                      *
*     Nios Development Board, Stratix Professional Edition               *
*     Nios Development Board, Stratix Edition                            *
*     Nios Development Board, Cyclone Edition                            *
*   -System Library Settings                                             *
*     RTOS Type - MicroC/OS-II                                           *
*     Periodic System Timer                                              *
*   -Know Issues                                                         *
*     If this design is run on the ISS, terminal output will take several*
*     minutes per iteration.                                             *
**************************************************************************/


#include <stdio.h>
#include "includes.h"
#include "altera_up_avalon_character_lcd.h"

/* Definition of Task Stacks */
#define   TASK_STACKSIZE       2048
#define   Q_SIZE_BYTES         2048
OS_STK    switch_stk[TASK_STACKSIZE];
OS_STK    lcd_stk[TASK_STACKSIZE];
OS_STK    led_stk[TASK_STACKSIZE];
OS_EVENT  *msg_q;
char      buf[Q_SIZE_BYTES];
alt_up_character_lcd_dev *lcd;

/*            Constants          */

#define OS_TIME_DELAY_HOURS       0
#define OS_TIME_DELAY_MINUTES     0
#define OS_TIME_DELAY_SECONDS     1
#define OS_TIME_DELAY_MILLISEC    0

#define LCD_CURSOR_START_ROW_1_X  0
#define LCD_CURSOR_START_ROW_1_Y  0
#define LCD_CURSOR_START_ROW_2_X  0
#define LCD_CURSOR_START_ROW_2_Y  1

#define OS_Q_PEND_WAIT_FOREVER    0

#define SWITCH_STATE_UP           1
#define SWITCH_STATE_DOWN         0
#define SWTICH_STATE_INVALID      2

const char * LCD_DEV_PATH = "/dev/character_lcd_0";
const char * STR = "Hello World";

/* Definition of Task Priorities */

#define SWITCH_TASK_PRIORITY      1
#define LCD_TASK_PRIORITY         2
#define LED_TASK_PRIORITY         3

/* poll swtich state and post the current state into q */
void switch_task(void* pdata)
{
  static INT16U state = SWTICH_STATE_INVALID;
  while (1)
  { 
	INT16U* curr_state = (INT16U*)SWITCH_BASE;
	printf("%d\n", *curr_state);
	if(*curr_state != state) {
		printf("posting into q %d\n", *curr_state);
		OSQPost(msg_q, (void *)curr_state);
		state = *curr_state;
	}
    printf("Hello from task1\n");
    OSTimeDlyHMSM(OS_TIME_DELAY_HOURS, OS_TIME_DELAY_MINUTES, OS_TIME_DELAY_SECONDS, OS_TIME_DELAY_MILLISEC);

  }
}
/* Prints "Hello World" when the switch changes state */
void lcd_task(void* pdata)
{
  INT8U err;
  while (1)
  {
	INT16U data = *(INT16U *)OSQPend(msg_q, OS_Q_PEND_WAIT_FOREVER, &err);
	if(data == SWITCH_STATE_UP){
		alt_up_character_lcd_init(lcd);
		alt_up_character_lcd_set_cursor_pos(lcd, LCD_CURSOR_START_ROW_1_X, LCD_CURSOR_START_ROW_1_Y);
		alt_up_character_lcd_string(lcd, STR);

	}else if(data == SWITCH_STATE_DOWN){
		alt_up_character_lcd_init(lcd);
		alt_up_character_lcd_set_cursor_pos(lcd, LCD_CURSOR_START_ROW_2_X, LCD_CURSOR_START_ROW_2_Y);
		alt_up_character_lcd_string(lcd, STR);
	}else{
		printf("Invalid data recevied by lcd: %d\n", data);
	}
    printf("Hello from task2\n");
    OSTimeDlyHMSM(OS_TIME_DELAY_HOURS, OS_TIME_DELAY_MINUTES, OS_TIME_DELAY_SECONDS, OS_TIME_DELAY_MILLISEC);
  }
}

/* Prints "Hello World" and sleeps for three seconds */
void led_task(void* pdata)
{
  while (1)
  { 
    printf("Hello from task3\n");
    OSTimeDlyHMSM(OS_TIME_DELAY_HOURS, OS_TIME_DELAY_MINUTES, OS_TIME_DELAY_SECONDS, OS_TIME_DELAY_MILLISEC);
  }
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
  msg_q = OSQCreate((void*)buf, Q_SIZE_BYTES / sizeof(char));
  if(msg_q == NULL) {
	  printf("failed to init q\n");
	  return 1;
  }
  lcd = alt_up_character_lcd_open_dev(LCD_DEV_PATH);

  alt_up_character_lcd_init(lcd);

  OSTaskCreateExt(switch_task,
                  NULL,
                  (void *)&switch_stk[TASK_STACKSIZE-1],
                  SWITCH_TASK_PRIORITY,
                  SWITCH_TASK_PRIORITY,
                  switch_stk,
                  TASK_STACKSIZE,
                  NULL,
                  OS_TASK_OPT_NONE);
              
               
  OSTaskCreateExt(lcd_task,
                  NULL,
                  (void *)&lcd_stk[TASK_STACKSIZE-1],
                  LCD_TASK_PRIORITY,
                  LCD_TASK_PRIORITY,
                  lcd_stk,
                  TASK_STACKSIZE,
                  NULL,
                  OS_TASK_OPT_NONE);

  OSTaskCreateExt(led_task,
                  NULL,
                  (void *)&led_stk[TASK_STACKSIZE-1],
                  LED_TASK_PRIORITY,
                  LED_TASK_PRIORITY,
                  led_stk,
                  TASK_STACKSIZE,
                  NULL,
                  OS_TASK_OPT_NONE);
  OSStart();
  return 0;
}

