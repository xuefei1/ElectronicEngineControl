
electronic_engine_control.elf:     file format elf32-littlenios2
electronic_engine_control.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800000

Program Header:
    LOAD off    0x00001000 vaddr 0x00800000 paddr 0x00800000 align 2**12
         filesz 0x0001a5ac memsz 0x0001fb24 flags rwx
    LOAD off    0x0001c000 vaddr 0x01400000 paddr 0x01400000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x
    LOAD off    0x0001c020 vaddr 0x01904020 paddr 0x01904020 align 2**12
         filesz 0x0000019c memsz 0x0000019c flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01400000  01400000  0001c000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  01904020  01904020  0001c020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000183fc  00800000  00800000  00001000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000674  008183fc  008183fc  000193fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b3c  00818a70  00818a70  00019a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00005578  0081a5ac  0081a5ac  0001b5ac  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001c1bc  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000fd0  00000000  00000000  0001c1e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000026a4  00000000  00000000  0001d1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00036966  00000000  00000000  0001f85c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000a5ae  00000000  00000000  000561c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001ea30  00000000  00000000  00060770  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002c7c  00000000  00000000  0007f1a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000029aa  00000000  00000000  00081e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000f059  00000000  00000000  000847c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00093820  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a28  00000000  00000000  00093830  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000993b1  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  000993b7  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000993be  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000993bf  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000993c0  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000993c4  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000993c8  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000993cc  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000993d7  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000993e2  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  000993ed  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000043  00000000  00000000  000993fa  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0006f584  00000000  00000000  0009943d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01400000 l    d  .entry	00000000 .entry
01904020 l    d  .exceptions	00000000 .exceptions
00800000 l    d  .text	00000000 .text
008183fc l    d  .rodata	00000000 .rodata
00818a70 l    d  .rwdata	00000000 .rwdata
0081a5ac l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00800034 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 apps_motor_proc.c
0081a5ac l     O .bss	00000002 last_apps_2_reading.2196
0081a5ae l     O .bss	00000002 last_apps_1_reading.2195
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 CuTest.c
00800704 l     F .text	0000009c CuFailInternal
008184a0 l     O .rodata	0000000b __func__.3471
00000000 l    df *ABS*	00000000 testbench.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 dp-bit.c
0080126c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
008017f8 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 impure.c
00818a70 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080332c l     F .text	00000058 __sprint_r
00818646 l     O .rodata	00000010 blanks.3452
00818636 l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
008053c0 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00806de8 l     F .text	00000058 std
00806ef4 l     F .text	00000008 __fp_lock
00806efc l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0081a504 l     O .rwdata	00000004 charset
00818678 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mprec.c
008187c0 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0080940c l     F .text	00000058 __sprint_r
008187dc l     O .rodata	00000010 blanks.3391
008187cc l     O .rodata	00000010 zeroes.3392
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0080c588 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080c5e8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0080c614 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0080c758 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0080c89c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0080ca3c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0080cb90 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0080cddc l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0081a520 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0080d094 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0081a524 l     O .rwdata	00000004 lockid
0081a5dc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0081a528 l     O .rwdata	00000004 lockid
0081a5e4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0080eacc l     F .text	00000044 OS_InitMisc
0080eb10 l     F .text	0000006c OS_InitRdyList
0080ec74 l     F .text	000000e0 OS_InitTCBList
0080e9f0 l     F .text	000000dc OS_InitEventList
0080eb7c l     F .text	0000007c OS_InitTaskIdle
0080ebf8 l     F .text	0000007c OS_InitTaskStat
0080eee8 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
00810e08 l     F .text	00000110 OS_FlagTaskRdy
00810b60 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0081942c l     O .rwdata	0000106c jtag_uart_0
0081a498 l     O .rwdata	0000002c character_lcd_0
0081a4c4 l     O .rwdata	0000002c de0_nano_adc_0
00815774 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00815a2c l     F .text	000002c4 altera_avalon_jtag_uart_irq
00815cf0 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00816508 l     F .text	00000070 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_de0_nano_adc.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00816ec0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00817348 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00817498 l     F .text	000000f8 alt_file_locked
0081771c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00818244 l     F .text	00000004 register_fini
00802fb0 g     F .text	00000000 longjmp
00808280 g     F .text	00000094 _mprec_log10
0081a576 g     O .rwdata	00000002 OSTaskNameSize
0080836c g     F .text	00000088 __any_on
0080a890 g     F .text	00000070 _isatty_r
00818798 g     O .rodata	00000028 __mprec_tinytens
0080cbf0 g     F .text	000000c8 alt_main
00803210 g     F .text	0000008c strcpy
0081f894 g     O .bss	00000100 alt_irq
0080a900 g     F .text	00000078 _lseek_r
008116fc g     F .text	000000d4 OS_MemInit
0080030c g     F .text	00000054 CuStringResize
00802f78 g     F .text	00000000 setjmp
0081565c g     F .text	00000064 OSTimeSet
00816684 g     F .text	00000034 alt_up_character_lcd_send_cmd
0080bcd8 g     F .text	00000088 __eqdf2
00800cec g     F .text	0000007c CuSuiteAddSuite
0080d648 g     F .text	000006b4 OSEventPendMulti
0081fb24 g       *ABS*	00000000 __alt_heap_start
00817d24 g     F .text	00000020 OSTaskCreateHook
0080924c g     F .text	00000074 _kill_r
0081a54e g     O .rwdata	00000002 OSMboxEn
0080dd50 g     F .text	0000007c OSIntEnter
0080918c g     F .text	000000a0 _signal_r
008092c8 g     F .text	00000068 __sseek
00806e50 g     F .text	000000a4 __sinit
0081a55e g     O .rwdata	00000002 OSQEn
00807b5c g     F .text	00000084 _setlocale_r
00800b88 g     F .text	0000003c CuSuiteNew
00806f50 g     F .text	0000009c __sfmoreglue
0080d304 g     F .text	000000d0 __malloc_unlock
008001f0 g     F .text	00000064 CuStringInit
00817d80 g     F .text	0000001c OSTaskStatHook
0081a5ec g     O .bss	00000001 OSLockNesting
0081a59c g     O .rwdata	00000002 OSDataSize
0081a5ed g     O .bss	00000001 OSRunning
0080277c g     F .text	000000e0 memmove
00817db8 g     F .text	0000001c OSInitHookBegin
0081a594 g     O .rwdata	00000002 OSTmrSize
00806f40 g     F .text	00000010 _cleanup
008083f4 g     F .text	000000bc _Balloc
0081a5f0 g     O .bss	00000004 OSIdleCtr
0081a670 g     O .bss	00002000 apps_motor_task_stk
0080bde8 g     F .text	00000088 __gtdf2
008179f0 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
00816608 g     F .text	0000007c get_DDRAM_addr
0080f21c g     F .text	000002e0 OS_TCBInit
00800608 g     F .text	0000004c CuTestNew
01400000 g     F .entry	00000000 __reset
00816b78 g     F .text	00000140 alt_up_de0_nano_adc_read
0081a59a g     O .rwdata	00000002 OSTmrWheelTblSize
0081a53a g     O .rwdata	00000002 OSEventSize
0081a5f4 g     O .bss	00000001 OSPrioHighRdy
0080a81c g     F .text	00000074 _fstat_r
00817d44 g     F .text	00000020 OSTaskDelHook
0081a5bc g     O .bss	00000004 errno
00800880 g     F .text	00000108 CuAssertStrEquals_LineMsg
008179d0 g       .text	00000000 OSStartHighRdy
00813e14 g     F .text	00000200 OSTaskCreateExt
00800b38 g     F .text	00000050 CuSuiteInit
0081067c g     F .text	00000068 OSFlagPendGetFlagsRdy
0081a57a g     O .rwdata	00000002 OSTaskStatStkSize
0080f688 g     F .text	00000334 OSFlagAccept
00811e38 g     F .text	000000c8 OSQFlush
008117d0 g     F .text	00000154 OSQAccept
0081a5d4 g     O .bss	00000004 alt_argv
008224f0 g       *ABS*	00000000 _gp
00813c40 g     F .text	000001d4 OSTaskCreate
008136cc g     F .text	00000574 OSTaskChangePrio
0081a5e8 g     O .bss	00000004 alt_heapsem
0080c7b8 g     F .text	00000020 getpid
0080f4fc g     F .text	0000018c OSDebugInit
00814014 g     F .text	0000040c OSTaskDel
008192ac g     O .rwdata	00000180 alt_fd_list
0081c670 g     O .bss	00000370 OSFlagTbl
0080e7cc g     F .text	000000b8 OS_EventTaskRemove
00816fe8 g     F .text	00000094 alt_find_dev
008026dc g     F .text	000000a0 memcpy
0081a564 g     O .rwdata	00000002 OSRdyTblSize
0081681c g     F .text	0000004c alt_up_character_lcd_write_fd
008009fc g     F .text	000000c8 CuAssertDblEquals_LineMsg
00800ac4 g     F .text	00000074 CuAssertPtrEquals_LineMsg
00806f34 g     F .text	0000000c _cleanup_r
0080bf80 g     F .text	000000f8 __floatsidf
00817420 g     F .text	00000078 alt_io_redirect
0080bef8 g     F .text	00000088 __ltdf2
008183fc g       *ABS*	00000000 __DTOR_END__
0080d3d4 g     F .text	00000130 OSEventNameGet
0081a548 g     O .rwdata	00000002 OSFlagMax
008081d0 g     F .text	000000b0 __ratio
0080ddcc g     F .text	00000100 OSIntExit
0080a524 g     F .text	00000024 __vfiprintf_internal
0081a582 g     O .rwdata	00000002 OSTCBSize
0081a5f5 g     O .bss	00000001 OSPrioCur
00815f6c g     F .text	000002c0 altera_avalon_jtag_uart_read
00801f88 g     F .text	00000014 malloc
01904000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00801934 g     F .text	00000008 __udivsi3
0080c7d8 g     F .text	000000c4 isatty
00808f70 g     F .text	000000cc _raise_r
0081a568 g     O .rwdata	00000002 OSStkWidth
00801e90 g     F .text	00000064 __assert_func
008186a8 g     O .rodata	000000c8 __mprec_tens
0081a55c g     O .rwdata	00000002 OSPtrSize
00807b38 g     F .text	00000008 __locale_charset
0081a53c g     O .rwdata	00000002 OSEventTblSize
00817944 g       .text	00000000 OSCtxSw
0081a5b0 g     O .bss	00000004 __malloc_top_pad
0081a5f8 g     O .bss	00000004 OSTCBList
00809248 g     F .text	00000004 _getpid_r
0081a5cc g     O .bss	00000004 alt_fd_list_lock
0081a500 g     O .rwdata	00000004 __mb_cur_max
00807b40 g     F .text	0000000c _localeconv_r
00808b58 g     F .text	0000003c __i2b
0080751c g     F .text	0000049c __sfvwrite_r
008090c4 g     F .text	000000b4 __sigtramp_r
0081c9e0 g     O .bss	00000c30 OSMemTbl
0081a5fc g     O .bss	00000001 OSTickStepState
00802f04 g     F .text	00000070 _sbrk_r
00800598 g     F .text	00000070 CuTestInit
0081a560 g     O .rwdata	00000002 OSQMax
00800eb8 g     F .text	000001cc CuSuiteDetails
0081d610 g     O .bss	00000800 OSTaskStatStk
008112e4 g     F .text	0000010c OSMemNameGet
0081a540 g     O .rwdata	00000002 OSFlagEn
0080a978 g     F .text	00000078 _read_r
0081a586 g     O .rwdata	00000002 OSTimeTickHookEn
0081239c g     F .text	00000180 OSQPost
00810f18 g     F .text	000000ac OS_FlagUnlink
00819278 g     O .rwdata	0000000c __lc_ctype
0081a518 g     O .rwdata	00000004 alt_max_fd
0080eda8 g     F .text	0000006c OS_MemCopy
0080ee14 g     F .text	000000d4 OS_Sched
00801c90 g     F .text	00000138 __unpack_d
0080a6f8 g     F .text	00000110 _fclose_r
008111e0 g     F .text	00000104 OSMemGet
00814748 g     F .text	000001c4 OSTaskNameSet
00806db4 g     F .text	00000034 fflush
0081a5b4 g     O .bss	00000004 __malloc_max_sbrked_mem
008002c4 g     F .text	00000048 CuStringDelete
0081a600 g     O .bss	00000004 OSCtxSwCtr
00817d9c g     F .text	0000001c OSTimeTickHook
0081a54a g     O .rwdata	00000002 OSFlagNameSize
0080e884 g     F .text	00000104 OS_EventTaskRemoveMulti
008016fc g     F .text	00000074 __adddf3
0080e678 g     F .text	00000154 OS_EventTaskWaitMulti
008080b0 g     F .text	00000120 __b2d
0081a562 g     O .rwdata	00000002 OSQSize
0080b05c g     F .text	00000660 __umoddi3
0080ca9c g     F .text	000000f4 lseek
00812f78 g     F .text	0000027c OSSemPend
00800458 g     F .text	0000002c CuStringAppendFormat
0081a4f4 g     O .rwdata	00000004 _global_impure_ptr
00802910 g     F .text	000005f4 _realloc_r
0081a54c g     O .rwdata	00000002 OSLowestPrio
0081fb24 g       *ABS*	00000000 __bss_end
00817250 g     F .text	000000f8 alt_iic_isr_register
00817e0c g     F .text	00000020 OSTCBInitHook
0081a592 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
00817814 g     F .text	00000110 alt_tick
0080a9f0 g     F .text	0000066c __udivdi3
0081a534 g     O .rwdata	00000002 OSEventEn
00818770 g     O .rodata	00000028 __mprec_bigtens
00808de0 g     F .text	00000120 __s2b
0081a58e g     O .rwdata	00000002 OSTmrCfgNameSize
008053a8 g     F .text	00000018 abort
0080c150 g     F .text	00000194 __floatunsidf
00807fd0 g     F .text	00000060 __mcmp
00801128 g     F .text	00000144 int16U_differ_by_percent
00806f1c g     F .text	00000018 __fp_lock_all
00800360 g     F .text	000000b4 CuStringAppend
00817208 g     F .text	00000048 alt_ic_irq_enabled
00810d24 g     F .text	000000e4 OS_FlagInit
0081777c g     F .text	00000098 alt_alarm_stop
00800c58 g     F .text	00000094 CuSuiteAdd
0081a570 g     O .rwdata	00000002 OSTaskIdleStkSize
0081a63c g     O .bss	00000004 alt_irq_active
00800d68 g     F .text	00000098 CuSuiteRun
00812b04 g     F .text	000000c0 OSSemAccept
00811510 g     F .text	000000f0 OSMemPut
00810fc4 g     F .text	0000021c OSMemCreate
0081a604 g     O .bss	00000004 OSIdleCtrMax
019040ec g     F .exceptions	000000d0 alt_irq_handler
00819284 g     O .rwdata	00000028 alt_dev_null
0081a584 g     O .rwdata	00000002 OSTicksPerSec
00816b04 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
00817944 g       .text	00000000 OSIntCtxSw
0080069c g     F .text	00000068 CuTestRun
00807e9c g     F .text	00000070 __hi0bits
0080c078 g     F .text	000000d8 __fixdfsi
0081a608 g     O .bss	00000004 OSTCBFreeList
008131f4 g     F .text	0000017c OSSemPendAbort
00800e00 g     F .text	000000b8 CuSuiteSummary
0081a510 g     O .rwdata	00000008 alt_dev_list
0080cf70 g     F .text	00000124 write
0081a588 g     O .rwdata	00000002 OSVersionNbr
0080c680 g     F .text	000000d8 fstat
0080c8fc g     F .text	00000140 kill
00800bc4 g     F .text	00000094 CuSuiteDelete
00801770 g     F .text	00000088 __ledf2
008030c4 g     F .text	00000090 strcat
0081a530 g     O .rwdata	00000004 OSEndiannessTest
00808cc0 g     F .text	00000120 __pow5mult
0081a5c0 g     O .bss	00000004 __nlocale_changed
00809464 g     F .text	000010c0 ___vfiprintf_internal_r
0080193c g     F .text	00000008 __umodsi3
0081a542 g     O .rwdata	00000002 OSFlagGrpSize
0081fb24 g       *ABS*	00000000 end
00800038 g     F .text	000000bc apps_motor_task
008158f4 g     F .text	00000138 altera_avalon_jtag_uart_init
0080f08c g     F .text	000000c8 OS_TaskStat
00800254 g     F .text	00000070 CuStringNew
008183f8 g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
00816578 g     F .text	00000090 alt_avalon_timer_sc_init
0080c408 g     F .text	00000080 __clzsi2
0081622c g     F .text	000002dc altera_avalon_jtag_uart_write
00800654 g     F .text	00000048 CuTestDelete
00806e40 g     F .text	00000004 __sfp_lock_acquire
00807d90 g     F .text	000000e4 memchr
0080ed54 g     F .text	00000054 OS_MemClr
0081672c g     F .text	00000078 alt_up_character_lcd_write
00803384 g     F .text	00001ec4 ___vfprintf_internal_r
00817a14 g     F .text	00000310 OSTaskStkInit
00803064 g     F .text	00000060 _sprintf_r
00807208 g     F .text	00000314 _free_r
0080e3d4 g     F .text	00000194 OS_EventTaskRdy
00818248 g     F .text	000001b0 __call_exitprocs
0081a60c g     O .bss	00000001 OSCPUUsage
0080019c g     F .text	00000054 CuStrCopy
0081a5c4 g     O .bss	00000004 __mlocale_changed
0081a4fc g     O .rwdata	00000004 __malloc_sbrk_base
00800000 g     F .text	00000038 _start
0081a640 g     O .bss	00000004 _alt_tick_rate
00811f00 g     F .text	00000320 OSQPend
0081510c g     F .text	0000014c OSTimeDly
008087b8 g     F .text	0000014c __lshift
0081a644 g     O .bss	00000004 _alt_nticks
0080922c g     F .text	0000001c signal
0080ccb8 g     F .text	00000124 read
008156f4 g     F .text	00000080 alt_sys_init
00816990 g     F .text	000000b0 alt_up_character_lcd_shift_display
00818110 g     F .text	00000134 __register_exitproc
0081a60d g     O .bss	00000001 OSTaskCtr
00815258 g     F .text	00000190 OSTimeDlyHMSM
00808904 g     F .text	00000254 __multiply
00816a40 g     F .text	00000090 alt_up_character_lcd_erase_pos
00815e04 g     F .text	00000074 altera_avalon_jtag_uart_close
00801944 g     F .text	00000038 __mulsi3
0081a648 g     O .bss	00000028 __malloc_current_mallinfo
0081a536 g     O .rwdata	00000002 OSEventMax
008084b0 g     F .text	0000017c __d2b
00813370 g     F .text	00000128 OSSemPost
0080df58 g     F .text	000000e4 OSSchedUnlock
008028f4 g     F .text	0000001c realloc
008157ac g     F .text	00000058 altera_avalon_jtag_uart_read_fd
00817f4c g     F .text	00000104 alt_get_fd
0081a610 g     O .bss	00000004 OSMemFreeList
0080e0ac g     F .text	000000ac OSStatInit
00810a8c g     F .text	000000d4 OSFlagQuery
00801dc8 g     F .text	000000c8 __fpcmp_parts_d
0081a56c g     O .rwdata	00000002 OSTaskCreateExtEn
0080a688 g     F .text	00000070 _close_r
0081809c g     F .text	00000074 memcmp
0080e3b8 g     F .text	0000001c OS_Dummy
0081585c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0081fb24 g       *ABS*	00000000 __alt_stack_base
008158a4 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0080526c g     F .text	0000013c __swsetup_r
0081de10 g     O .bss	000001e0 OSQTbl
0080ba80 g     F .text	00000258 __divdf3
00806fec g     F .text	000000f0 __sfp
00808314 g     F .text	00000058 __copybits
00818e70 g     O .rwdata	00000408 __malloc_av_
00806e4c g     F .text	00000004 __sinit_lock_release
00800164 g     F .text	00000038 CuStrAlloc
0081a614 g     O .bss	00000004 OSTCBHighRdy
0080b6bc g     F .text	000003c4 __muldf3
008093ac g     F .text	00000060 __sread
0081a618 g     O .bss	00000004 OSQFreeList
00817e2c g     F .text	00000120 alt_find_file
00816e0c g     F .text	000000b4 alt_dev_llist_insert
0080d1fc g     F .text	00000108 __malloc_lock
0080ceb4 g     F .text	000000bc sbrk
0080d504 g     F .text	00000144 OSEventNameSet
00806bb8 g     F .text	000001fc _fflush_r
0080a5c0 g     F .text	000000c8 _calloc_r
0081a61c g     O .bss	00000001 OSRdyGrp
008007a0 g     F .text	00000084 CuFail_Line
00800414 g     F .text	00000044 CuStringAppendChar
0081a5ac g       *ABS*	00000000 __bss_start
0080285c g     F .text	00000098 memset
008000f4 g     F .text	00000070 main
0081a5d8 g     O .bss	00000004 alt_envp
0081a5b8 g     O .bss	00000004 __malloc_max_total_mem
00815804 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0081890c g     O .rodata	00000100 OSUnMapTbl
0081a566 g     O .rwdata	00000002 OSSemEn
008168e0 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
008106e4 g     F .text	000003a8 OSFlagPost
008092c0 g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
0080a808 g     F .text	00000014 fclose
0080e568 g     F .text	00000110 OS_EventTaskWait
0080f154 g     F .text	000000c8 OS_TaskStatStkChk
0081f994 g     O .bss	00000190 _atexit0
00814420 g     F .text	00000170 OSTaskDelReq
00805604 g     F .text	000015b4 _dtoa_r
00801f9c g     F .text	00000740 _malloc_r
0081a51c g     O .rwdata	00000004 alt_errno
0080e03c g     F .text	00000070 OSStart
00801f4c g     F .text	00000028 _fiprintf_r
008090b4 g     F .text	00000010 _init_signal
0080d1a0 g     F .text	0000005c __env_unlock
00807a80 g     F .text	000000b8 _fwalk
0081490c g     F .text	00000218 OSTaskResume
00811600 g     F .text	000000fc OSMemQuery
0081a578 g     O .rwdata	00000002 OSTaskStatEn
0081a552 g     O .rwdata	00000002 OSMemMax
0081251c g     F .text	00000188 OSQPostFront
00801874 g     F .text	00000060 __divsi3
0081a61d g     O .bss	00000003 OSRdyTbl
0081a52c g     O .rwdata	00000002 OSDebugEn
00818580 g     O .rodata	00000014 __thenan_df
008166ec g     F .text	00000040 alt_up_character_lcd_open_dev
008070dc g     F .text	0000012c _malloc_trim_r
008183fc g       *ABS*	00000000 __CTOR_END__
0081a544 g     O .rwdata	00000002 OSFlagNodeSize
0081a58c g     O .rwdata	00000002 OSTmrCfgMax
00800988 g     F .text	00000074 CuAssertIntEquals_LineMsg
008166b8 g     F .text	00000034 alt_up_character_lcd_init
00803154 g     F .text	000000bc strcmp
00811924 g     F .text	00000214 OSQCreate
00814590 g     F .text	000001b8 OSTaskNameGet
008126a4 g     F .text	00000234 OSQPostOpt
0080e158 g     F .text	00000240 OSTimeTick
0081a574 g     O .rwdata	00000002 OSTaskMax
008183fc g       *ABS*	00000000 __DTOR_LIST__
00812bc4 g     F .text	00000114 OSSemCreate
0081a598 g     O .rwdata	00000002 OSTmrWheelSize
0080bd60 g     F .text	00000088 __nedf2
0081a56e g     O .rwdata	00000002 OSTaskDelEn
01880000 g       *ABS*	00000000 __alt_mem_sram_0
00813498 g     F .text	00000130 OSSemQuery
00811b38 g     F .text	00000300 OSQDel
00812220 g     F .text	0000017c OSQPendAbort
008156c0 g     F .text	00000034 alt_irq_init
0080ce3c g     F .text	00000078 alt_release_fd
00802ff0 g     F .text	00000074 sprintf
00816ad0 g     F .text	00000034 alt_up_character_lcd_cursor_off
008187ec g     O .rodata	00000100 __clz_tab
0081a5c8 g     O .bss	00000004 _PathLocale
01400000 g       *ABS*	00000000 __alt_mem_generic_tristate_controller_0
00818050 g     F .text	00000014 atexit
0080a548 g     F .text	00000078 _write_r
0080decc g     F .text	0000008c OSSchedLock
00807be0 g     F .text	0000001c setlocale
0080f9bc g     F .text	0000013c OSFlagCreate
0081a4f0 g     O .rwdata	00000004 _impure_ptr
0081a5d0 g     O .bss	00000004 alt_argc
00816f84 g     F .text	00000064 _do_dtors
0081a53e g     O .rwdata	00000002 OSEventMultiEn
008010a0 g     F .text	00000088 int16U_changed_by_threshold
0080faf8 g     F .text	000002a8 OSFlagDel
00800000 g       *ABS*	00000000 __alt_mem_sdram_0
0081a620 g     O .bss	00000004 OSEventFreeList
01904020 g       .exceptions	00000000 alt_irq_entry
00808030 g     F .text	00000080 __ulp
00808f00 g     F .text	00000040 __isinfd
00810038 g     F .text	00000644 OSFlagPend
0081a58a g     O .rwdata	00000002 OSTmrEn
00806f04 g     F .text	00000018 __fp_unlock_all
0081a508 g     O .rwdata	00000008 alt_fs_list
0080ef58 g     F .text	00000080 OS_StrCopy
00801084 g     F .text	0000001c run_all_tests
0081a554 g     O .rwdata	00000002 OSMemNameSize
00817dd4 g     F .text	0000001c OSInitHookEnd
0081a580 g     O .rwdata	00000002 OSTCBPrioTblMax
00807b4c g     F .text	00000010 localeconv
0081a57c g     O .rwdata	00000002 OSTaskStatStkChkEn
0081707c g     F .text	00000050 alt_ic_isr_register
0081a550 g     O .rwdata	00000002 OSMemEn
0081a55a g     O .rwdata	00000002 OSMutexEn
0081a5ac g       *ABS*	00000000 _edata
0081fb24 g       *ABS*	00000000 _end
0081a624 g     O .bss	00000001 OSIntNesting
00815e78 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
008153e8 g     F .text	00000210 OSTimeDlyResume
0080fee4 g     F .text	00000154 OSFlagNameSet
00800484 g     F .text	00000114 CuStringInsert
00814b24 g     F .text	000001fc OSTaskStkChk
00817168 g     F .text	000000a0 alt_ic_irq_disable
0081a556 g     O .rwdata	00000002 OSMemSize
00809330 g     F .text	0000007c __swrite
0081a4f8 g     O .rwdata	00000004 __malloc_trim_threshold
00817924 g     F .text	00000020 altera_nios2_qsys_irq_init
0081a628 g     O .bss	00000004 OSTCBCur
00818064 g     F .text	00000038 exit
00801f08 g     F .text	00000044 fiprintf
00803310 g     F .text	0000001c _vfiprintf_r
0081a558 g     O .rwdata	00000002 OSMemTblSize
008079b8 g     F .text	000000c8 _fwalk_reent
0080862c g     F .text	0000018c __mdiff
008018d4 g     F .text	00000060 __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
01904020 g     F .exceptions	00000000 alt_exception
00806e44 g     F .text	00000004 __sfp_lock_release
0080dcfc g     F .text	00000054 OSInit
00814f4c g     F .text	00000144 OSTaskQuery
008167a4 g     F .text	00000078 alt_up_character_lcd_string
00812a58 g     F .text	000000ac OS_QInit
0080efd8 g     F .text	00000058 OS_StrLen
008113f0 g     F .text	00000120 OSMemNameSet
00816b38 g     F .text	00000040 alt_up_de0_nano_adc_open_dev
0081a572 g     O .rwdata	00000002 OSTaskProfileEn
0081a62c g     O .bss	00000004 OSTime
0081dff0 g     O .bss	00000800 OSTaskIdleStk
0080c654 g     F .text	0000002c _exit
00808f40 g     F .text	00000030 __isnand
00816cb8 g     F .text	00000154 alt_alarm_start
0080fda0 g     F .text	00000144 OSFlagNameGet
008155f8 g     F .text	00000064 OSTimeGet
0080c2e4 g     F .text	00000124 __muldi3
00807bfc g     F .text	00000194 __smakebuf_r
0080329c g     F .text	00000074 strlen
00809050 g     F .text	00000064 _init_signal_r
00817d64 g     F .text	0000001c OSTaskSwHook
00817590 g     F .text	0000018c open
0081e7f0 g     O .bss	00000b40 OSEventTbl
00800824 g     F .text	0000005c CuAssert_Line
0080be70 g     F .text	00000088 __gedf2
0081f330 g     O .bss	00000510 OSTCBTbl
008135c8 g     F .text	00000104 OSSemSet
00801ef4 g     F .text	00000014 __assert
00816868 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0081a5a0 g     O .rwdata	00000004 alt_priority_mask
00812cd8 g     F .text	000002a0 OSSemDel
0081a630 g     O .bss	00000004 OSFlagFreeList
008170cc g     F .text	0000009c alt_ic_irq_enable
0081a538 g     O .rwdata	00000002 OSEventNameSize
00805248 g     F .text	00000024 __vfprintf_internal
0081a634 g     O .bss	00000001 OSStatRdy
0081f840 g     O .bss	00000054 OSTCBPrioTbl
0080d0f4 g     F .text	000000ac __env_lock
0081a57e g     O .rwdata	00000002 OSTaskSwHookEn
0080167c g     F .text	00000080 __subdf3
00807f0c g     F .text	000000c4 __lo0bits
0081a5a4 g     O .rwdata	00000008 alt_alarm_list
0081a546 g     O .rwdata	00000002 OSFlagWidth
00816f20 g     F .text	00000064 _do_ctors
00809178 g     F .text	00000014 __sigtramp
0080c488 g     F .text	00000100 close
0081a5e0 g     O .bss	00000004 alt_envsem
0081a638 g     O .bss	00000004 OSIdleCtrRun
0080e398 g     F .text	00000020 OSVersion
0081a590 g     O .rwdata	00000002 OSTmrCfgWheelSize
00815090 g     F .text	0000007c OS_TaskStkClr
0080197c g     F .text	00000314 __pack_d
0081a56a g     O .rwdata	00000002 OSTaskCreateEn
0080e988 g     F .text	00000068 OS_EventWaitListInit
0080903c g     F .text	00000014 raise
00817df0 g     F .text	0000001c OSTaskIdleHook
00801f74 g     F .text	00000014 free
00806e48 g     F .text	00000004 __sinit_lock_acquire
00808b94 g     F .text	0000012c __multadd
00814d20 g     F .text	0000022c OSTaskSuspend
00807e74 g     F .text	00000028 _Bfree
0080f030 g     F .text	0000005c OS_TaskIdle
0081a596 g     O .rwdata	00000002 OSTmrTblSize
008128d8 g     F .text	00000180 OSQQuery



Disassembly of section .exceptions:

01904020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1904020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1904024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1904028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 190402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1904030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1904034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1904038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 190403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1904040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1904044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1904048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 190404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1904050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1904054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1904058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 190405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1904060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1904064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1904068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 190406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1904070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1904074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1904078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 190407c:	10000326 	beq	r2,zero,190408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1904080:	20000226 	beq	r4,zero,190408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1904084:	19040ec0 	call	19040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1904088:	00000306 	br	1904098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 190408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1904090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1904094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1904098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 190409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 19040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 19040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 19040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 19040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 19040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 19040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 19040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 19040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 19040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 19040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 19040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 19040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 19040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 19040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 19040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 19040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 19040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 19040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 19040e8:	ef80083a 	eret

019040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 19040ec:	defff904 	addi	sp,sp,-28
 19040f0:	dfc00615 	stw	ra,24(sp)
 19040f4:	df000515 	stw	fp,20(sp)
 19040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 19040fc:	080dd500 	call	80dd50 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1904100:	0005313a 	rdctl	r2,ipending
 1904104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1904108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 190410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 1904110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1904114:	00800044 	movi	r2,1
 1904118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 190411c:	e0ffff17 	ldw	r3,-4(fp)
 1904120:	e0bffe17 	ldw	r2,-8(fp)
 1904124:	1884703a 	and	r2,r3,r2
 1904128:	1005003a 	cmpeq	r2,r2,zero
 190412c:	1000161e 	bne	r2,zero,1904188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 1904130:	e0bffd17 	ldw	r2,-12(fp)
 1904134:	00c020b4 	movhi	r3,130
 1904138:	18fe2504 	addi	r3,r3,-1900
 190413c:	100490fa 	slli	r2,r2,3
 1904140:	10c5883a 	add	r2,r2,r3
 1904144:	11400017 	ldw	r5,0(r2)
 1904148:	e0bffd17 	ldw	r2,-12(fp)
 190414c:	00c020b4 	movhi	r3,130
 1904150:	18fe2504 	addi	r3,r3,-1900
 1904154:	100490fa 	slli	r2,r2,3
 1904158:	10c5883a 	add	r2,r2,r3
 190415c:	10800104 	addi	r2,r2,4
 1904160:	11000017 	ldw	r4,0(r2)
 1904164:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1904168:	0005313a 	rdctl	r2,ipending
 190416c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1904170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1904174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1904178:	e0bfff17 	ldw	r2,-4(fp)
 190417c:	1004c03a 	cmpne	r2,r2,zero
 1904180:	103fe31e 	bne	r2,zero,1904110 <alt_irq_handler+0x24>
 1904184:	00000706 	br	19041a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1904188:	e0bffe17 	ldw	r2,-8(fp)
 190418c:	1085883a 	add	r2,r2,r2
 1904190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1904194:	e0bffd17 	ldw	r2,-12(fp)
 1904198:	10800044 	addi	r2,r2,1
 190419c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 19041a0:	003fde06 	br	190411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 19041a4:	080ddcc0 	call	80ddcc <OSIntExit>
}
 19041a8:	e037883a 	mov	sp,fp
 19041ac:	dfc00117 	ldw	ra,4(sp)
 19041b0:	df000017 	ldw	fp,0(sp)
 19041b4:	dec00204 	addi	sp,sp,8
 19041b8:	f800283a 	ret

Disassembly of section .text:

00800000 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800000:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800004:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
  800008:	068020b4 	movhi	gp,130
    ori gp, gp, %lo(_gp)
  80000c:	d6893c14 	ori	gp,gp,9456
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800010:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800014:	10a96b14 	ori	r2,r2,42412

    movhi r3, %hi(__bss_end)
  800018:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  80001c:	18fec914 	ori	r3,r3,64292

    beq r2, r3, 1f
  800020:	10c00326 	beq	r2,r3,800030 <_start+0x30>

0:
    stw zero, (r2)
  800024:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  800028:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  80002c:	10fffd36 	bltu	r2,r3,800024 <_start+0x24>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800030:	080cbf00 	call	80cbf0 <alt_main>

00800034 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800034:	003fff06 	br	800034 <alt_after_alt_main>

00800038 <apps_motor_task>:

#include "apps_motor_proc.h"
#include "altera_up_avalon_de0_nano_adc.h"

/*  Task routine for pedal position sensor and motor */
void apps_motor_task(void* pdata) {
  800038:	defffb04 	addi	sp,sp,-20
  80003c:	dfc00415 	stw	ra,16(sp)
  800040:	df000315 	stw	fp,12(sp)
  800044:	df000304 	addi	fp,sp,12
  800048:	e13fff15 	stw	r4,-4(fp)

	alt_up_de0_nano_adc_dev* adc = alt_up_de0_nano_adc_open_dev(
			DE0_NANO_ADC_0_NAME);
  80004c:	010020b4 	movhi	r4,130
  800050:	2120ff04 	addi	r4,r4,-31748
  800054:	0816b380 	call	816b38 <alt_up_de0_nano_adc_open_dev>
  800058:	e0bffe15 	stw	r2,-8(fp)

	static INT16U last_apps_1_reading = 0;
	static INT16U last_apps_2_reading = 0;
	while (1) {
		alt_up_de0_nano_adc_update(adc);
  80005c:	e0bffe17 	ldw	r2,-8(fp)
  800060:	10800a17 	ldw	r2,40(r2)
  800064:	10000035 	stwio	zero,0(r2)

		INT16U apps_1_reading = alt_up_de0_nano_adc_read(adc,
				APPS_1_ADC_CHANNEL);
  800068:	e13ffe17 	ldw	r4,-8(fp)
  80006c:	000b883a 	mov	r5,zero
  800070:	0816b780 	call	816b78 <alt_up_de0_nano_adc_read>
  800074:	e0bffd8d 	sth	r2,-10(fp)
		INT16U apps_2_reading = alt_up_de0_nano_adc_read(adc,
				APPS_2_ADC_CHANNEL);
  800078:	e13ffe17 	ldw	r4,-8(fp)
  80007c:	01400044 	movi	r5,1
  800080:	0816b780 	call	816b78 <alt_up_de0_nano_adc_read>
  800084:	e0bffd0d 	sth	r2,-12(fp)

		if (APPS_VALUE_CHANGED(apps_1_reading,
  800088:	e13ffd8b 	ldhu	r4,-10(fp)
  80008c:	d0a02f8b 	ldhu	r2,-32578(gp)
  800090:	117fffcc 	andi	r5,r2,65535
  800094:	01801904 	movi	r6,100
  800098:	08010a00 	call	8010a0 <int16U_changed_by_threshold>
  80009c:	10803fcc 	andi	r2,r2,255
  8000a0:	1004c03a 	cmpne	r2,r2,zero
  8000a4:	1000081e 	bne	r2,zero,8000c8 <apps_motor_task+0x90>
  8000a8:	e13ffd0b 	ldhu	r4,-12(fp)
  8000ac:	d0a02f0b 	ldhu	r2,-32580(gp)
  8000b0:	117fffcc 	andi	r5,r2,65535
  8000b4:	01801904 	movi	r6,100
  8000b8:	08010a00 	call	8010a0 <int16U_changed_by_threshold>
  8000bc:	10803fcc 	andi	r2,r2,255
  8000c0:	1005003a 	cmpeq	r2,r2,zero
  8000c4:	1000051e 	bne	r2,zero,8000dc <apps_motor_task+0xa4>
				last_apps_1_reading) || APPS_VALUE_CHANGED(apps_2_reading, last_apps_2_reading)) {
				if(APPS_VALUE_MISMATCH(apps_1_reading, apps_2_reading)){
  8000c8:	e13ffd8b 	ldhu	r4,-10(fp)
  8000cc:	e17ffd0b 	ldhu	r5,-12(fp)
  8000d0:	01800284 	movi	r6,10
  8000d4:	01d09004 	movi	r7,16960
  8000d8:	08011280 	call	801128 <int16U_differ_by_percent>
				}else{
					//determine new motor position

				}
		}
		OSTimeDlyHMSM(APPS_MOTOR_TASK_DELAY_HOURS,
  8000dc:	0009883a 	mov	r4,zero
  8000e0:	000b883a 	mov	r5,zero
  8000e4:	000d883a 	mov	r6,zero
  8000e8:	01c01904 	movi	r7,100
  8000ec:	08152580 	call	815258 <OSTimeDlyHMSM>
		APPS_MOTOR_TASK_DELAY_MINUTES, APPS_MOTOR_TASK_DELAY_SECONDS,
		APPS_MOTOR_TASK_DELAY_MILLISEC);
	}
  8000f0:	003fda06 	br	80005c <apps_motor_task+0x24>

008000f4 <main>:

/* Definition of Task Stacks */
OS_STK apps_motor_task_stk[TASK_STACKSIZE];

/* The main function */
int main(void) {
  8000f4:	defff904 	addi	sp,sp,-28
  8000f8:	dfc00615 	stw	ra,24(sp)
  8000fc:	df000515 	stw	fp,20(sp)
  800100:	df000504 	addi	fp,sp,20

#if defined(RUN_ALL_TESTS)
	run_all_tests();
  800104:	08010840 	call	801084 <run_all_tests>
#endif

	OSTaskCreateExt(apps_motor_task, NULL,
  800108:	018020b4 	movhi	r6,130
  80010c:	31b19b04 	addi	r6,r6,-14740
  800110:	00800044 	movi	r2,1
  800114:	d8800015 	stw	r2,0(sp)
  800118:	008020b4 	movhi	r2,130
  80011c:	10a99c04 	addi	r2,r2,-22928
  800120:	d8800115 	stw	r2,4(sp)
  800124:	00820004 	movi	r2,2048
  800128:	d8800215 	stw	r2,8(sp)
  80012c:	d8000315 	stw	zero,12(sp)
  800130:	d8000415 	stw	zero,16(sp)
  800134:	01002034 	movhi	r4,128
  800138:	21000e04 	addi	r4,r4,56
  80013c:	000b883a 	mov	r5,zero
  800140:	01c00044 	movi	r7,1
  800144:	0813e140 	call	813e14 <OSTaskCreateExt>
			(void *) &apps_motor_task_stk[TASK_STACKSIZE - 1],
			APPS_MOTOR_TASK_PRIORITY, APPS_MOTOR_TASK_PRIORITY,
			apps_motor_task_stk, TASK_STACKSIZE, NULL, 0);
	OSStart();
  800148:	080e03c0 	call	80e03c <OSStart>

	return 0;
  80014c:	0005883a 	mov	r2,zero
}
  800150:	e037883a 	mov	sp,fp
  800154:	dfc00117 	ldw	ra,4(sp)
  800158:	df000017 	ldw	fp,0(sp)
  80015c:	dec00204 	addi	sp,sp,8
  800160:	f800283a 	ret

00800164 <CuStrAlloc>:
/*-------------------------------------------------------------------------*
 * CuStr
 *-------------------------------------------------------------------------*/

char* CuStrAlloc(int size)
{
  800164:	defffc04 	addi	sp,sp,-16
  800168:	dfc00315 	stw	ra,12(sp)
  80016c:	df000215 	stw	fp,8(sp)
  800170:	df000204 	addi	fp,sp,8
  800174:	e13fff15 	stw	r4,-4(fp)
	char* newStr = (char*) malloc( sizeof(char) * (size) );
  800178:	e13fff17 	ldw	r4,-4(fp)
  80017c:	0801f880 	call	801f88 <malloc>
  800180:	e0bffe15 	stw	r2,-8(fp)
	return newStr;
  800184:	e0bffe17 	ldw	r2,-8(fp)
}
  800188:	e037883a 	mov	sp,fp
  80018c:	dfc00117 	ldw	ra,4(sp)
  800190:	df000017 	ldw	fp,0(sp)
  800194:	dec00204 	addi	sp,sp,8
  800198:	f800283a 	ret

0080019c <CuStrCopy>:

char* CuStrCopy(const char* old)
{
  80019c:	defffb04 	addi	sp,sp,-20
  8001a0:	dfc00415 	stw	ra,16(sp)
  8001a4:	df000315 	stw	fp,12(sp)
  8001a8:	df000304 	addi	fp,sp,12
  8001ac:	e13fff15 	stw	r4,-4(fp)
	int len = strlen(old);
  8001b0:	e13fff17 	ldw	r4,-4(fp)
  8001b4:	080329c0 	call	80329c <strlen>
  8001b8:	e0bffe15 	stw	r2,-8(fp)
	char* newStr = CuStrAlloc(len + 1);
  8001bc:	e0bffe17 	ldw	r2,-8(fp)
  8001c0:	11000044 	addi	r4,r2,1
  8001c4:	08001640 	call	800164 <CuStrAlloc>
  8001c8:	e0bffd15 	stw	r2,-12(fp)
	strcpy(newStr, old);
  8001cc:	e13ffd17 	ldw	r4,-12(fp)
  8001d0:	e17fff17 	ldw	r5,-4(fp)
  8001d4:	08032100 	call	803210 <strcpy>
	return newStr;
  8001d8:	e0bffd17 	ldw	r2,-12(fp)
}
  8001dc:	e037883a 	mov	sp,fp
  8001e0:	dfc00117 	ldw	ra,4(sp)
  8001e4:	df000017 	ldw	fp,0(sp)
  8001e8:	dec00204 	addi	sp,sp,8
  8001ec:	f800283a 	ret

008001f0 <CuStringInit>:
/*-------------------------------------------------------------------------*
 * CuString
 *-------------------------------------------------------------------------*/

void CuStringInit(CuString* str)
{
  8001f0:	defffd04 	addi	sp,sp,-12
  8001f4:	dfc00215 	stw	ra,8(sp)
  8001f8:	df000115 	stw	fp,4(sp)
  8001fc:	df000104 	addi	fp,sp,4
  800200:	e13fff15 	stw	r4,-4(fp)
	str->length = 0;
  800204:	e0bfff17 	ldw	r2,-4(fp)
  800208:	10000015 	stw	zero,0(r2)
	str->size = STRING_MAX;
  80020c:	e0ffff17 	ldw	r3,-4(fp)
  800210:	00804004 	movi	r2,256
  800214:	18800115 	stw	r2,4(r3)
	str->buffer = (char*) malloc(sizeof(char) * str->size);
  800218:	e0bfff17 	ldw	r2,-4(fp)
  80021c:	10800117 	ldw	r2,4(r2)
  800220:	1009883a 	mov	r4,r2
  800224:	0801f880 	call	801f88 <malloc>
  800228:	1007883a 	mov	r3,r2
  80022c:	e0bfff17 	ldw	r2,-4(fp)
  800230:	10c00215 	stw	r3,8(r2)
	str->buffer[0] = '\0';
  800234:	e0bfff17 	ldw	r2,-4(fp)
  800238:	10800217 	ldw	r2,8(r2)
  80023c:	10000005 	stb	zero,0(r2)
}
  800240:	e037883a 	mov	sp,fp
  800244:	dfc00117 	ldw	ra,4(sp)
  800248:	df000017 	ldw	fp,0(sp)
  80024c:	dec00204 	addi	sp,sp,8
  800250:	f800283a 	ret

00800254 <CuStringNew>:

CuString* CuStringNew(void)
{
  800254:	defffd04 	addi	sp,sp,-12
  800258:	dfc00215 	stw	ra,8(sp)
  80025c:	df000115 	stw	fp,4(sp)
  800260:	df000104 	addi	fp,sp,4
	CuString* str = (CuString*) malloc(sizeof(CuString));
  800264:	01000304 	movi	r4,12
  800268:	0801f880 	call	801f88 <malloc>
  80026c:	e0bfff15 	stw	r2,-4(fp)
	str->length = 0;
  800270:	e0bfff17 	ldw	r2,-4(fp)
  800274:	10000015 	stw	zero,0(r2)
	str->size = STRING_MAX;
  800278:	e0ffff17 	ldw	r3,-4(fp)
  80027c:	00804004 	movi	r2,256
  800280:	18800115 	stw	r2,4(r3)
	str->buffer = (char*) malloc(sizeof(char) * str->size);
  800284:	e0bfff17 	ldw	r2,-4(fp)
  800288:	10800117 	ldw	r2,4(r2)
  80028c:	1009883a 	mov	r4,r2
  800290:	0801f880 	call	801f88 <malloc>
  800294:	1007883a 	mov	r3,r2
  800298:	e0bfff17 	ldw	r2,-4(fp)
  80029c:	10c00215 	stw	r3,8(r2)
	str->buffer[0] = '\0';
  8002a0:	e0bfff17 	ldw	r2,-4(fp)
  8002a4:	10800217 	ldw	r2,8(r2)
  8002a8:	10000005 	stb	zero,0(r2)
	return str;
  8002ac:	e0bfff17 	ldw	r2,-4(fp)
}
  8002b0:	e037883a 	mov	sp,fp
  8002b4:	dfc00117 	ldw	ra,4(sp)
  8002b8:	df000017 	ldw	fp,0(sp)
  8002bc:	dec00204 	addi	sp,sp,8
  8002c0:	f800283a 	ret

008002c4 <CuStringDelete>:

void CuStringDelete(CuString *str)
{
  8002c4:	defffd04 	addi	sp,sp,-12
  8002c8:	dfc00215 	stw	ra,8(sp)
  8002cc:	df000115 	stw	fp,4(sp)
  8002d0:	df000104 	addi	fp,sp,4
  8002d4:	e13fff15 	stw	r4,-4(fp)
        if (!str) return;
  8002d8:	e0bfff17 	ldw	r2,-4(fp)
  8002dc:	1005003a 	cmpeq	r2,r2,zero
  8002e0:	1000051e 	bne	r2,zero,8002f8 <CuStringDelete+0x34>
        free(str->buffer);
  8002e4:	e0bfff17 	ldw	r2,-4(fp)
  8002e8:	11000217 	ldw	r4,8(r2)
  8002ec:	0801f740 	call	801f74 <free>
        free(str);
  8002f0:	e13fff17 	ldw	r4,-4(fp)
  8002f4:	0801f740 	call	801f74 <free>
}
  8002f8:	e037883a 	mov	sp,fp
  8002fc:	dfc00117 	ldw	ra,4(sp)
  800300:	df000017 	ldw	fp,0(sp)
  800304:	dec00204 	addi	sp,sp,8
  800308:	f800283a 	ret

0080030c <CuStringResize>:

void CuStringResize(CuString* str, int newSize)
{
  80030c:	defffc04 	addi	sp,sp,-16
  800310:	dfc00315 	stw	ra,12(sp)
  800314:	df000215 	stw	fp,8(sp)
  800318:	df000204 	addi	fp,sp,8
  80031c:	e13ffe15 	stw	r4,-8(fp)
  800320:	e17fff15 	stw	r5,-4(fp)
	str->buffer = (char*) realloc(str->buffer, sizeof(char) * newSize);
  800324:	e0bffe17 	ldw	r2,-8(fp)
  800328:	11000217 	ldw	r4,8(r2)
  80032c:	e17fff17 	ldw	r5,-4(fp)
  800330:	08028f40 	call	8028f4 <realloc>
  800334:	1007883a 	mov	r3,r2
  800338:	e0bffe17 	ldw	r2,-8(fp)
  80033c:	10c00215 	stw	r3,8(r2)
	str->size = newSize;
  800340:	e0fffe17 	ldw	r3,-8(fp)
  800344:	e0bfff17 	ldw	r2,-4(fp)
  800348:	18800115 	stw	r2,4(r3)
}
  80034c:	e037883a 	mov	sp,fp
  800350:	dfc00117 	ldw	ra,4(sp)
  800354:	df000017 	ldw	fp,0(sp)
  800358:	dec00204 	addi	sp,sp,8
  80035c:	f800283a 	ret

00800360 <CuStringAppend>:

void CuStringAppend(CuString* str, const char* text)
{
  800360:	defffb04 	addi	sp,sp,-20
  800364:	dfc00415 	stw	ra,16(sp)
  800368:	df000315 	stw	fp,12(sp)
  80036c:	df000304 	addi	fp,sp,12
  800370:	e13ffe15 	stw	r4,-8(fp)
  800374:	e17fff15 	stw	r5,-4(fp)
	int length;

	if (text == NULL) {
  800378:	e0bfff17 	ldw	r2,-4(fp)
  80037c:	1004c03a 	cmpne	r2,r2,zero
  800380:	1000031e 	bne	r2,zero,800390 <CuStringAppend+0x30>
		text = "NULL";
  800384:	008020b4 	movhi	r2,130
  800388:	10a10404 	addi	r2,r2,-31728
  80038c:	e0bfff15 	stw	r2,-4(fp)
	}

	length = strlen(text);
  800390:	e13fff17 	ldw	r4,-4(fp)
  800394:	080329c0 	call	80329c <strlen>
  800398:	e0bffd15 	stw	r2,-12(fp)
	if (str->length + length + 1 >= str->size)
  80039c:	e0bffe17 	ldw	r2,-8(fp)
  8003a0:	10c00017 	ldw	r3,0(r2)
  8003a4:	e0bffd17 	ldw	r2,-12(fp)
  8003a8:	1885883a 	add	r2,r3,r2
  8003ac:	10c00044 	addi	r3,r2,1
  8003b0:	e0bffe17 	ldw	r2,-8(fp)
  8003b4:	10800117 	ldw	r2,4(r2)
  8003b8:	18800716 	blt	r3,r2,8003d8 <CuStringAppend+0x78>
		CuStringResize(str, str->length + length + 1 + STRING_INC);
  8003bc:	e0bffe17 	ldw	r2,-8(fp)
  8003c0:	10c00017 	ldw	r3,0(r2)
  8003c4:	e0bffd17 	ldw	r2,-12(fp)
  8003c8:	1885883a 	add	r2,r3,r2
  8003cc:	11404044 	addi	r5,r2,257
  8003d0:	e13ffe17 	ldw	r4,-8(fp)
  8003d4:	080030c0 	call	80030c <CuStringResize>
	str->length += length;
  8003d8:	e0bffe17 	ldw	r2,-8(fp)
  8003dc:	10c00017 	ldw	r3,0(r2)
  8003e0:	e0bffd17 	ldw	r2,-12(fp)
  8003e4:	1887883a 	add	r3,r3,r2
  8003e8:	e0bffe17 	ldw	r2,-8(fp)
  8003ec:	10c00015 	stw	r3,0(r2)
	strcat(str->buffer, text);
  8003f0:	e0bffe17 	ldw	r2,-8(fp)
  8003f4:	11000217 	ldw	r4,8(r2)
  8003f8:	e17fff17 	ldw	r5,-4(fp)
  8003fc:	08030c40 	call	8030c4 <strcat>
}
  800400:	e037883a 	mov	sp,fp
  800404:	dfc00117 	ldw	ra,4(sp)
  800408:	df000017 	ldw	fp,0(sp)
  80040c:	dec00204 	addi	sp,sp,8
  800410:	f800283a 	ret

00800414 <CuStringAppendChar>:

void CuStringAppendChar(CuString* str, char ch)
{
  800414:	defffb04 	addi	sp,sp,-20
  800418:	dfc00415 	stw	ra,16(sp)
  80041c:	df000315 	stw	fp,12(sp)
  800420:	df000304 	addi	fp,sp,12
  800424:	e13ffe15 	stw	r4,-8(fp)
  800428:	e17fff05 	stb	r5,-4(fp)
	char text[2];
	text[0] = ch;
  80042c:	e0bfff03 	ldbu	r2,-4(fp)
  800430:	e0bffd05 	stb	r2,-12(fp)
	text[1] = '\0';
  800434:	e03ffd45 	stb	zero,-11(fp)
	CuStringAppend(str, text);
  800438:	e13ffe17 	ldw	r4,-8(fp)
  80043c:	e17ffd04 	addi	r5,fp,-12
  800440:	08003600 	call	800360 <CuStringAppend>
}
  800444:	e037883a 	mov	sp,fp
  800448:	dfc00117 	ldw	ra,4(sp)
  80044c:	df000017 	ldw	fp,0(sp)
  800450:	dec00204 	addi	sp,sp,8
  800454:	f800283a 	ret

00800458 <CuStringAppendFormat>:

void CuStringAppendFormat(CuString* str, const char* format, ...)
{
  800458:	defffb04 	addi	sp,sp,-20
  80045c:	df000215 	stw	fp,8(sp)
  800460:	df000204 	addi	fp,sp,8
  800464:	e13ffe15 	stw	r4,-8(fp)
  800468:	e1800115 	stw	r6,4(fp)
  80046c:	e1c00215 	stw	r7,8(fp)
  800470:	e17fff15 	stw	r5,-4(fp)
//	char buf[HUGE_STRING_LEN];
//	va_start(argp, format);
//	vsprintf(buf, format, argp);
//	va_end(argp);
//	CuStringAppend(str, buf);
}
  800474:	e037883a 	mov	sp,fp
  800478:	df000017 	ldw	fp,0(sp)
  80047c:	dec00304 	addi	sp,sp,12
  800480:	f800283a 	ret

00800484 <CuStringInsert>:

void CuStringInsert(CuString* str, const char* text, int pos)
{
  800484:	defffa04 	addi	sp,sp,-24
  800488:	dfc00515 	stw	ra,20(sp)
  80048c:	df000415 	stw	fp,16(sp)
  800490:	df000404 	addi	fp,sp,16
  800494:	e13ffd15 	stw	r4,-12(fp)
  800498:	e17ffe15 	stw	r5,-8(fp)
  80049c:	e1bfff15 	stw	r6,-4(fp)
	int length = strlen(text);
  8004a0:	e13ffe17 	ldw	r4,-8(fp)
  8004a4:	080329c0 	call	80329c <strlen>
  8004a8:	e0bffc15 	stw	r2,-16(fp)
	if (pos > str->length)
  8004ac:	e0bffd17 	ldw	r2,-12(fp)
  8004b0:	10c00017 	ldw	r3,0(r2)
  8004b4:	e0bfff17 	ldw	r2,-4(fp)
  8004b8:	1880030e 	bge	r3,r2,8004c8 <CuStringInsert+0x44>
		pos = str->length;
  8004bc:	e0bffd17 	ldw	r2,-12(fp)
  8004c0:	10800017 	ldw	r2,0(r2)
  8004c4:	e0bfff15 	stw	r2,-4(fp)
	if (str->length + length + 1 >= str->size)
  8004c8:	e0bffd17 	ldw	r2,-12(fp)
  8004cc:	10c00017 	ldw	r3,0(r2)
  8004d0:	e0bffc17 	ldw	r2,-16(fp)
  8004d4:	1885883a 	add	r2,r3,r2
  8004d8:	10c00044 	addi	r3,r2,1
  8004dc:	e0bffd17 	ldw	r2,-12(fp)
  8004e0:	10800117 	ldw	r2,4(r2)
  8004e4:	18800716 	blt	r3,r2,800504 <CuStringInsert+0x80>
		CuStringResize(str, str->length + length + 1 + STRING_INC);
  8004e8:	e0bffd17 	ldw	r2,-12(fp)
  8004ec:	10c00017 	ldw	r3,0(r2)
  8004f0:	e0bffc17 	ldw	r2,-16(fp)
  8004f4:	1885883a 	add	r2,r3,r2
  8004f8:	11404044 	addi	r5,r2,257
  8004fc:	e13ffd17 	ldw	r4,-12(fp)
  800500:	080030c0 	call	80030c <CuStringResize>
	memmove(str->buffer + pos + length, str->buffer + pos, (str->length - pos) + 1);
  800504:	e0bffd17 	ldw	r2,-12(fp)
  800508:	10c00217 	ldw	r3,8(r2)
  80050c:	e0bfff17 	ldw	r2,-4(fp)
  800510:	1887883a 	add	r3,r3,r2
  800514:	e0bffc17 	ldw	r2,-16(fp)
  800518:	1889883a 	add	r4,r3,r2
  80051c:	e0bffd17 	ldw	r2,-12(fp)
  800520:	10c00217 	ldw	r3,8(r2)
  800524:	e0bfff17 	ldw	r2,-4(fp)
  800528:	188b883a 	add	r5,r3,r2
  80052c:	e0bffd17 	ldw	r2,-12(fp)
  800530:	10c00017 	ldw	r3,0(r2)
  800534:	e0bfff17 	ldw	r2,-4(fp)
  800538:	1885c83a 	sub	r2,r3,r2
  80053c:	10800044 	addi	r2,r2,1
  800540:	100d883a 	mov	r6,r2
  800544:	080277c0 	call	80277c <memmove>
	str->length += length;
  800548:	e0bffd17 	ldw	r2,-12(fp)
  80054c:	10c00017 	ldw	r3,0(r2)
  800550:	e0bffc17 	ldw	r2,-16(fp)
  800554:	1887883a 	add	r3,r3,r2
  800558:	e0bffd17 	ldw	r2,-12(fp)
  80055c:	10c00015 	stw	r3,0(r2)
	memcpy(str->buffer + pos, text, length);
  800560:	e0bffd17 	ldw	r2,-12(fp)
  800564:	10c00217 	ldw	r3,8(r2)
  800568:	e0bfff17 	ldw	r2,-4(fp)
  80056c:	1887883a 	add	r3,r3,r2
  800570:	e1bffc17 	ldw	r6,-16(fp)
  800574:	e0bffe17 	ldw	r2,-8(fp)
  800578:	1809883a 	mov	r4,r3
  80057c:	100b883a 	mov	r5,r2
  800580:	08026dc0 	call	8026dc <memcpy>
}
  800584:	e037883a 	mov	sp,fp
  800588:	dfc00117 	ldw	ra,4(sp)
  80058c:	df000017 	ldw	fp,0(sp)
  800590:	dec00204 	addi	sp,sp,8
  800594:	f800283a 	ret

00800598 <CuTestInit>:
/*-------------------------------------------------------------------------*
 * CuTest
 *-------------------------------------------------------------------------*/

void CuTestInit(CuTest* t, const char* name, TestFunction function)
{
  800598:	defffb04 	addi	sp,sp,-20
  80059c:	dfc00415 	stw	ra,16(sp)
  8005a0:	df000315 	stw	fp,12(sp)
  8005a4:	df000304 	addi	fp,sp,12
  8005a8:	e13ffd15 	stw	r4,-12(fp)
  8005ac:	e17ffe15 	stw	r5,-8(fp)
  8005b0:	e1bfff15 	stw	r6,-4(fp)
	t->name = CuStrCopy(name);
  8005b4:	e13ffe17 	ldw	r4,-8(fp)
  8005b8:	080019c0 	call	80019c <CuStrCopy>
  8005bc:	1007883a 	mov	r3,r2
  8005c0:	e0bffd17 	ldw	r2,-12(fp)
  8005c4:	10c00015 	stw	r3,0(r2)
	t->failed = 0;
  8005c8:	e0bffd17 	ldw	r2,-12(fp)
  8005cc:	10000215 	stw	zero,8(r2)
	t->ran = 0;
  8005d0:	e0bffd17 	ldw	r2,-12(fp)
  8005d4:	10000315 	stw	zero,12(r2)
	t->message = NULL;
  8005d8:	e0bffd17 	ldw	r2,-12(fp)
  8005dc:	10000415 	stw	zero,16(r2)
	t->function = function;
  8005e0:	e0fffd17 	ldw	r3,-12(fp)
  8005e4:	e0bfff17 	ldw	r2,-4(fp)
  8005e8:	18800115 	stw	r2,4(r3)
	t->jumpBuf = NULL;
  8005ec:	e0bffd17 	ldw	r2,-12(fp)
  8005f0:	10000515 	stw	zero,20(r2)
}
  8005f4:	e037883a 	mov	sp,fp
  8005f8:	dfc00117 	ldw	ra,4(sp)
  8005fc:	df000017 	ldw	fp,0(sp)
  800600:	dec00204 	addi	sp,sp,8
  800604:	f800283a 	ret

00800608 <CuTestNew>:

CuTest* CuTestNew(const char* name, TestFunction function)
{
  800608:	defffb04 	addi	sp,sp,-20
  80060c:	dfc00415 	stw	ra,16(sp)
  800610:	df000315 	stw	fp,12(sp)
  800614:	df000304 	addi	fp,sp,12
  800618:	e13ffe15 	stw	r4,-8(fp)
  80061c:	e17fff15 	stw	r5,-4(fp)
	CuTest* tc = CU_ALLOC(CuTest);
  800620:	01000604 	movi	r4,24
  800624:	0801f880 	call	801f88 <malloc>
  800628:	e0bffd15 	stw	r2,-12(fp)
	CuTestInit(tc, name, function);
  80062c:	e13ffd17 	ldw	r4,-12(fp)
  800630:	e17ffe17 	ldw	r5,-8(fp)
  800634:	e1bfff17 	ldw	r6,-4(fp)
  800638:	08005980 	call	800598 <CuTestInit>
	return tc;
  80063c:	e0bffd17 	ldw	r2,-12(fp)
}
  800640:	e037883a 	mov	sp,fp
  800644:	dfc00117 	ldw	ra,4(sp)
  800648:	df000017 	ldw	fp,0(sp)
  80064c:	dec00204 	addi	sp,sp,8
  800650:	f800283a 	ret

00800654 <CuTestDelete>:

void CuTestDelete(CuTest *t)
{
  800654:	defffd04 	addi	sp,sp,-12
  800658:	dfc00215 	stw	ra,8(sp)
  80065c:	df000115 	stw	fp,4(sp)
  800660:	df000104 	addi	fp,sp,4
  800664:	e13fff15 	stw	r4,-4(fp)
        if (!t) return;
  800668:	e0bfff17 	ldw	r2,-4(fp)
  80066c:	1005003a 	cmpeq	r2,r2,zero
  800670:	1000051e 	bne	r2,zero,800688 <CuTestDelete+0x34>
        free(t->name);
  800674:	e0bfff17 	ldw	r2,-4(fp)
  800678:	11000017 	ldw	r4,0(r2)
  80067c:	0801f740 	call	801f74 <free>
        free(t);
  800680:	e13fff17 	ldw	r4,-4(fp)
  800684:	0801f740 	call	801f74 <free>
}
  800688:	e037883a 	mov	sp,fp
  80068c:	dfc00117 	ldw	ra,4(sp)
  800690:	df000017 	ldw	fp,0(sp)
  800694:	dec00204 	addi	sp,sp,8
  800698:	f800283a 	ret

0080069c <CuTestRun>:

void CuTestRun(CuTest* tc)
{
  80069c:	deffd504 	addi	sp,sp,-172
  8006a0:	dfc02a15 	stw	ra,168(sp)
  8006a4:	df002915 	stw	fp,164(sp)
  8006a8:	df002904 	addi	fp,sp,164
  8006ac:	e13fff15 	stw	r4,-4(fp)
	jmp_buf buf;
	tc->jumpBuf = &buf;
  8006b0:	e0bfff17 	ldw	r2,-4(fp)
  8006b4:	e0ffd704 	addi	r3,fp,-164
  8006b8:	10c00515 	stw	r3,20(r2)
	if (setjmp(buf) == 0)
  8006bc:	e13fd704 	addi	r4,fp,-164
  8006c0:	0802f780 	call	802f78 <setjmp>
  8006c4:	1004c03a 	cmpne	r2,r2,zero
  8006c8:	1000071e 	bne	r2,zero,8006e8 <CuTestRun+0x4c>
	{
		tc->ran = 1;
  8006cc:	e0ffff17 	ldw	r3,-4(fp)
  8006d0:	00800044 	movi	r2,1
  8006d4:	18800315 	stw	r2,12(r3)
		(tc->function)(tc);
  8006d8:	e0bfff17 	ldw	r2,-4(fp)
  8006dc:	10800117 	ldw	r2,4(r2)
  8006e0:	e13fff17 	ldw	r4,-4(fp)
  8006e4:	103ee83a 	callr	r2
	}
	tc->jumpBuf = 0;
  8006e8:	e0bfff17 	ldw	r2,-4(fp)
  8006ec:	10000515 	stw	zero,20(r2)
}
  8006f0:	e037883a 	mov	sp,fp
  8006f4:	dfc00117 	ldw	ra,4(sp)
  8006f8:	df000017 	ldw	fp,0(sp)
  8006fc:	dec00204 	addi	sp,sp,8
  800700:	f800283a 	ret

00800704 <CuFailInternal>:

static void CuFailInternal(CuTest* tc, const char* file, int line, CuString* string)
{
  800704:	def7fa04 	addi	sp,sp,-8216
  800708:	dfc80515 	stw	ra,8212(sp)
  80070c:	df080415 	stw	fp,8208(sp)
  800710:	df080404 	addi	fp,sp,8208
  800714:	e13ffc15 	stw	r4,-16(fp)
  800718:	e17ffd15 	stw	r5,-12(fp)
  80071c:	e1bffe15 	stw	r6,-8(fp)
  800720:	e1ffff15 	stw	r7,-4(fp)
	char buf[HUGE_STRING_LEN];

	sprintf(buf, "%s:%d: ", file, line);
  800724:	e137fc04 	addi	r4,fp,-8208
  800728:	014020b4 	movhi	r5,130
  80072c:	29610604 	addi	r5,r5,-31720
  800730:	e1bffd17 	ldw	r6,-12(fp)
  800734:	e1fffe17 	ldw	r7,-8(fp)
  800738:	0802ff00 	call	802ff0 <sprintf>
	CuStringInsert(string, buf, 0);
  80073c:	e13fff17 	ldw	r4,-4(fp)
  800740:	e177fc04 	addi	r5,fp,-8208
  800744:	000d883a 	mov	r6,zero
  800748:	08004840 	call	800484 <CuStringInsert>

	tc->failed = 1;
  80074c:	e0fffc17 	ldw	r3,-16(fp)
  800750:	00800044 	movi	r2,1
  800754:	18800215 	stw	r2,8(r3)
	tc->message = string->buffer;
  800758:	e0bfff17 	ldw	r2,-4(fp)
  80075c:	10c00217 	ldw	r3,8(r2)
  800760:	e0bffc17 	ldw	r2,-16(fp)
  800764:	10c00415 	stw	r3,16(r2)
	if (tc->jumpBuf != 0) longjmp(*(tc->jumpBuf), 0);
  800768:	e0bffc17 	ldw	r2,-16(fp)
  80076c:	10800517 	ldw	r2,20(r2)
  800770:	1005003a 	cmpeq	r2,r2,zero
  800774:	1000051e 	bne	r2,zero,80078c <CuFailInternal+0x88>
  800778:	e0bffc17 	ldw	r2,-16(fp)
  80077c:	10800517 	ldw	r2,20(r2)
  800780:	1009883a 	mov	r4,r2
  800784:	000b883a 	mov	r5,zero
  800788:	0802fb00 	call	802fb0 <longjmp>
}
  80078c:	e037883a 	mov	sp,fp
  800790:	dfc00117 	ldw	ra,4(sp)
  800794:	df000017 	ldw	fp,0(sp)
  800798:	dec00204 	addi	sp,sp,8
  80079c:	f800283a 	ret

008007a0 <CuFail_Line>:

void CuFail_Line(CuTest* tc, const char* file, int line, const char* message2, const char* message)
{
  8007a0:	defff704 	addi	sp,sp,-36
  8007a4:	dfc00815 	stw	ra,32(sp)
  8007a8:	df000715 	stw	fp,28(sp)
  8007ac:	df000704 	addi	fp,sp,28
  8007b0:	e13ffc15 	stw	r4,-16(fp)
  8007b4:	e17ffd15 	stw	r5,-12(fp)
  8007b8:	e1bffe15 	stw	r6,-8(fp)
  8007bc:	e1ffff15 	stw	r7,-4(fp)
	CuString string;

	CuStringInit(&string);
  8007c0:	e13ff904 	addi	r4,fp,-28
  8007c4:	08001f00 	call	8001f0 <CuStringInit>
	if (message2 != NULL) 
  8007c8:	e0bfff17 	ldw	r2,-4(fp)
  8007cc:	1005003a 	cmpeq	r2,r2,zero
  8007d0:	1000071e 	bne	r2,zero,8007f0 <CuFail_Line+0x50>
	{
		CuStringAppend(&string, message2);
  8007d4:	e13ff904 	addi	r4,fp,-28
  8007d8:	e17fff17 	ldw	r5,-4(fp)
  8007dc:	08003600 	call	800360 <CuStringAppend>
		CuStringAppend(&string, ": ");
  8007e0:	e13ff904 	addi	r4,fp,-28
  8007e4:	014020b4 	movhi	r5,130
  8007e8:	29610804 	addi	r5,r5,-31712
  8007ec:	08003600 	call	800360 <CuStringAppend>
	}
	CuStringAppend(&string, message);
  8007f0:	e13ff904 	addi	r4,fp,-28
  8007f4:	e1400217 	ldw	r5,8(fp)
  8007f8:	08003600 	call	800360 <CuStringAppend>
	CuFailInternal(tc, file, line, &string);
  8007fc:	e13ffc17 	ldw	r4,-16(fp)
  800800:	e17ffd17 	ldw	r5,-12(fp)
  800804:	e1bffe17 	ldw	r6,-8(fp)
  800808:	e1fff904 	addi	r7,fp,-28
  80080c:	08007040 	call	800704 <CuFailInternal>
}
  800810:	e037883a 	mov	sp,fp
  800814:	dfc00117 	ldw	ra,4(sp)
  800818:	df000017 	ldw	fp,0(sp)
  80081c:	dec00204 	addi	sp,sp,8
  800820:	f800283a 	ret

00800824 <CuAssert_Line>:

void CuAssert_Line(CuTest* tc, const char* file, int line, const char* message, int condition)
{
  800824:	defff904 	addi	sp,sp,-28
  800828:	dfc00615 	stw	ra,24(sp)
  80082c:	df000515 	stw	fp,20(sp)
  800830:	df000504 	addi	fp,sp,20
  800834:	e13ffc15 	stw	r4,-16(fp)
  800838:	e17ffd15 	stw	r5,-12(fp)
  80083c:	e1bffe15 	stw	r6,-8(fp)
  800840:	e1ffff15 	stw	r7,-4(fp)
	if (condition) return;
  800844:	e0800217 	ldw	r2,8(fp)
  800848:	1004c03a 	cmpne	r2,r2,zero
  80084c:	1000071e 	bne	r2,zero,80086c <CuAssert_Line+0x48>
	CuFail_Line(tc, file, line, NULL, message);
  800850:	e0bfff17 	ldw	r2,-4(fp)
  800854:	d8800015 	stw	r2,0(sp)
  800858:	e13ffc17 	ldw	r4,-16(fp)
  80085c:	e17ffd17 	ldw	r5,-12(fp)
  800860:	e1bffe17 	ldw	r6,-8(fp)
  800864:	000f883a 	mov	r7,zero
  800868:	08007a00 	call	8007a0 <CuFail_Line>
}
  80086c:	e037883a 	mov	sp,fp
  800870:	dfc00117 	ldw	ra,4(sp)
  800874:	df000017 	ldw	fp,0(sp)
  800878:	dec00204 	addi	sp,sp,8
  80087c:	f800283a 	ret

00800880 <CuAssertStrEquals_LineMsg>:

void CuAssertStrEquals_LineMsg(CuTest* tc, const char* file, int line, const char* message, 
	const char* expected, const char* actual)
{
  800880:	defff704 	addi	sp,sp,-36
  800884:	dfc00815 	stw	ra,32(sp)
  800888:	df000715 	stw	fp,28(sp)
  80088c:	df000704 	addi	fp,sp,28
  800890:	e13ffc15 	stw	r4,-16(fp)
  800894:	e17ffd15 	stw	r5,-12(fp)
  800898:	e1bffe15 	stw	r6,-8(fp)
  80089c:	e1ffff15 	stw	r7,-4(fp)
	CuString string;
	if ((expected == NULL && actual == NULL) ||
  8008a0:	e0800217 	ldw	r2,8(fp)
  8008a4:	1004c03a 	cmpne	r2,r2,zero
  8008a8:	1000031e 	bne	r2,zero,8008b8 <CuAssertStrEquals_LineMsg+0x38>
  8008ac:	e0800317 	ldw	r2,12(fp)
  8008b0:	1005003a 	cmpeq	r2,r2,zero
  8008b4:	10002f1e 	bne	r2,zero,800974 <CuAssertStrEquals_LineMsg+0xf4>
  8008b8:	e0800217 	ldw	r2,8(fp)
  8008bc:	1005003a 	cmpeq	r2,r2,zero
  8008c0:	1000091e 	bne	r2,zero,8008e8 <CuAssertStrEquals_LineMsg+0x68>
  8008c4:	e0800317 	ldw	r2,12(fp)
  8008c8:	1005003a 	cmpeq	r2,r2,zero
  8008cc:	1000061e 	bne	r2,zero,8008e8 <CuAssertStrEquals_LineMsg+0x68>
  8008d0:	e1000217 	ldw	r4,8(fp)
  8008d4:	e1400317 	ldw	r5,12(fp)
  8008d8:	08031540 	call	803154 <strcmp>
  8008dc:	1004c03a 	cmpne	r2,r2,zero
  8008e0:	1000011e 	bne	r2,zero,8008e8 <CuAssertStrEquals_LineMsg+0x68>
	    (expected != NULL && actual != NULL &&
	     strcmp(expected, actual) == 0))
	{
		return;
  8008e4:	00002306 	br	800974 <CuAssertStrEquals_LineMsg+0xf4>
	}

	CuStringInit(&string);
  8008e8:	e13ff904 	addi	r4,fp,-28
  8008ec:	08001f00 	call	8001f0 <CuStringInit>
	if (message != NULL) 
  8008f0:	e0bfff17 	ldw	r2,-4(fp)
  8008f4:	1005003a 	cmpeq	r2,r2,zero
  8008f8:	1000071e 	bne	r2,zero,800918 <CuAssertStrEquals_LineMsg+0x98>
	{
		CuStringAppend(&string, message);
  8008fc:	e13ff904 	addi	r4,fp,-28
  800900:	e17fff17 	ldw	r5,-4(fp)
  800904:	08003600 	call	800360 <CuStringAppend>
		CuStringAppend(&string, ": ");
  800908:	e13ff904 	addi	r4,fp,-28
  80090c:	014020b4 	movhi	r5,130
  800910:	29610804 	addi	r5,r5,-31712
  800914:	08003600 	call	800360 <CuStringAppend>
	}
	CuStringAppend(&string, "expected <");
  800918:	e13ff904 	addi	r4,fp,-28
  80091c:	014020b4 	movhi	r5,130
  800920:	29610904 	addi	r5,r5,-31708
  800924:	08003600 	call	800360 <CuStringAppend>
	CuStringAppend(&string, expected);
  800928:	e13ff904 	addi	r4,fp,-28
  80092c:	e1400217 	ldw	r5,8(fp)
  800930:	08003600 	call	800360 <CuStringAppend>
	CuStringAppend(&string, "> but was <");
  800934:	e13ff904 	addi	r4,fp,-28
  800938:	014020b4 	movhi	r5,130
  80093c:	29610c04 	addi	r5,r5,-31696
  800940:	08003600 	call	800360 <CuStringAppend>
	CuStringAppend(&string, actual);
  800944:	e13ff904 	addi	r4,fp,-28
  800948:	e1400317 	ldw	r5,12(fp)
  80094c:	08003600 	call	800360 <CuStringAppend>
	CuStringAppend(&string, ">");
  800950:	e13ff904 	addi	r4,fp,-28
  800954:	014020b4 	movhi	r5,130
  800958:	29610f04 	addi	r5,r5,-31684
  80095c:	08003600 	call	800360 <CuStringAppend>
	CuFailInternal(tc, file, line, &string);
  800960:	e13ffc17 	ldw	r4,-16(fp)
  800964:	e17ffd17 	ldw	r5,-12(fp)
  800968:	e1bffe17 	ldw	r6,-8(fp)
  80096c:	e1fff904 	addi	r7,fp,-28
  800970:	08007040 	call	800704 <CuFailInternal>
}
  800974:	e037883a 	mov	sp,fp
  800978:	dfc00117 	ldw	ra,4(sp)
  80097c:	df000017 	ldw	fp,0(sp)
  800980:	dec00204 	addi	sp,sp,8
  800984:	f800283a 	ret

00800988 <CuAssertIntEquals_LineMsg>:

void CuAssertIntEquals_LineMsg(CuTest* tc, const char* file, int line, const char* message, 
	int expected, int actual)
{
  800988:	deffb904 	addi	sp,sp,-284
  80098c:	dfc04615 	stw	ra,280(sp)
  800990:	df004515 	stw	fp,276(sp)
  800994:	df004504 	addi	fp,sp,276
  800998:	e13ffc15 	stw	r4,-16(fp)
  80099c:	e17ffd15 	stw	r5,-12(fp)
  8009a0:	e1bffe15 	stw	r6,-8(fp)
  8009a4:	e1ffff15 	stw	r7,-4(fp)
	char buf[STRING_MAX];
	if (expected == actual) return;
  8009a8:	e0c00217 	ldw	r3,8(fp)
  8009ac:	e0800317 	ldw	r2,12(fp)
  8009b0:	18800d26 	beq	r3,r2,8009e8 <CuAssertIntEquals_LineMsg+0x60>
	sprintf(buf, "expected <%d> but was <%d>", expected, actual);
  8009b4:	e13fbc04 	addi	r4,fp,-272
  8009b8:	014020b4 	movhi	r5,130
  8009bc:	29611004 	addi	r5,r5,-31680
  8009c0:	e1800217 	ldw	r6,8(fp)
  8009c4:	e1c00317 	ldw	r7,12(fp)
  8009c8:	0802ff00 	call	802ff0 <sprintf>
	CuFail_Line(tc, file, line, message, buf);
  8009cc:	e0bfbc04 	addi	r2,fp,-272
  8009d0:	d8800015 	stw	r2,0(sp)
  8009d4:	e13ffc17 	ldw	r4,-16(fp)
  8009d8:	e17ffd17 	ldw	r5,-12(fp)
  8009dc:	e1bffe17 	ldw	r6,-8(fp)
  8009e0:	e1ffff17 	ldw	r7,-4(fp)
  8009e4:	08007a00 	call	8007a0 <CuFail_Line>
}
  8009e8:	e037883a 	mov	sp,fp
  8009ec:	dfc00117 	ldw	ra,4(sp)
  8009f0:	df000017 	ldw	fp,0(sp)
  8009f4:	dec00204 	addi	sp,sp,8
  8009f8:	f800283a 	ret

008009fc <CuAssertDblEquals_LineMsg>:

void CuAssertDblEquals_LineMsg(CuTest* tc, const char* file, int line, const char* message, 
	double expected, double actual, double delta)
{
  8009fc:	deffb804 	addi	sp,sp,-288
  800a00:	dfc04715 	stw	ra,284(sp)
  800a04:	df004615 	stw	fp,280(sp)
  800a08:	df004604 	addi	fp,sp,280
  800a0c:	e13ffc15 	stw	r4,-16(fp)
  800a10:	e17ffd15 	stw	r5,-12(fp)
  800a14:	e1bffe15 	stw	r6,-8(fp)
  800a18:	e1ffff15 	stw	r7,-4(fp)
	char buf[STRING_MAX];
	if (fabs(expected - actual) <= delta) return;
  800a1c:	e1000217 	ldw	r4,8(fp)
  800a20:	e1400317 	ldw	r5,12(fp)
  800a24:	e1800417 	ldw	r6,16(fp)
  800a28:	e1c00517 	ldw	r7,20(fp)
  800a2c:	080167c0 	call	80167c <__subdf3>
  800a30:	1009883a 	mov	r4,r2
  800a34:	180b883a 	mov	r5,r3
  800a38:	200d883a 	mov	r6,r4
  800a3c:	280f883a 	mov	r7,r5
  800a40:	01200034 	movhi	r4,32768
  800a44:	213fffc4 	addi	r4,r4,-1
  800a48:	3005883a 	mov	r2,r6
  800a4c:	3906703a 	and	r3,r7,r4
  800a50:	1009883a 	mov	r4,r2
  800a54:	180b883a 	mov	r5,r3
  800a58:	e1800617 	ldw	r6,24(fp)
  800a5c:	e1c00717 	ldw	r7,28(fp)
  800a60:	08017700 	call	801770 <__ledf2>
  800a64:	10800050 	cmplti	r2,r2,1
  800a68:	1000111e 	bne	r2,zero,800ab0 <CuAssertDblEquals_LineMsg+0xb4>
	sprintf(buf, "expected <%f> but was <%f>", expected, actual); 
  800a6c:	e0800417 	ldw	r2,16(fp)
  800a70:	d8800015 	stw	r2,0(sp)
  800a74:	e0800517 	ldw	r2,20(fp)
  800a78:	d8800115 	stw	r2,4(sp)
  800a7c:	e13fbc04 	addi	r4,fp,-272
  800a80:	014020b4 	movhi	r5,130
  800a84:	29611704 	addi	r5,r5,-31652
  800a88:	e1800217 	ldw	r6,8(fp)
  800a8c:	e1c00317 	ldw	r7,12(fp)
  800a90:	0802ff00 	call	802ff0 <sprintf>

	CuFail_Line(tc, file, line, message, buf);
  800a94:	e0bfbc04 	addi	r2,fp,-272
  800a98:	d8800015 	stw	r2,0(sp)
  800a9c:	e13ffc17 	ldw	r4,-16(fp)
  800aa0:	e17ffd17 	ldw	r5,-12(fp)
  800aa4:	e1bffe17 	ldw	r6,-8(fp)
  800aa8:	e1ffff17 	ldw	r7,-4(fp)
  800aac:	08007a00 	call	8007a0 <CuFail_Line>
}
  800ab0:	e037883a 	mov	sp,fp
  800ab4:	dfc00117 	ldw	ra,4(sp)
  800ab8:	df000017 	ldw	fp,0(sp)
  800abc:	dec00204 	addi	sp,sp,8
  800ac0:	f800283a 	ret

00800ac4 <CuAssertPtrEquals_LineMsg>:

void CuAssertPtrEquals_LineMsg(CuTest* tc, const char* file, int line, const char* message, 
	void* expected, void* actual)
{
  800ac4:	deffb904 	addi	sp,sp,-284
  800ac8:	dfc04615 	stw	ra,280(sp)
  800acc:	df004515 	stw	fp,276(sp)
  800ad0:	df004504 	addi	fp,sp,276
  800ad4:	e13ffc15 	stw	r4,-16(fp)
  800ad8:	e17ffd15 	stw	r5,-12(fp)
  800adc:	e1bffe15 	stw	r6,-8(fp)
  800ae0:	e1ffff15 	stw	r7,-4(fp)
	char buf[STRING_MAX];
	if (expected == actual) return;
  800ae4:	e0c00217 	ldw	r3,8(fp)
  800ae8:	e0800317 	ldw	r2,12(fp)
  800aec:	18800d26 	beq	r3,r2,800b24 <CuAssertPtrEquals_LineMsg+0x60>
	sprintf(buf, "expected pointer <0x%p> but was <0x%p>", expected, actual);
  800af0:	e13fbc04 	addi	r4,fp,-272
  800af4:	014020b4 	movhi	r5,130
  800af8:	29611e04 	addi	r5,r5,-31624
  800afc:	e1800217 	ldw	r6,8(fp)
  800b00:	e1c00317 	ldw	r7,12(fp)
  800b04:	0802ff00 	call	802ff0 <sprintf>
	CuFail_Line(tc, file, line, message, buf);
  800b08:	e0bfbc04 	addi	r2,fp,-272
  800b0c:	d8800015 	stw	r2,0(sp)
  800b10:	e13ffc17 	ldw	r4,-16(fp)
  800b14:	e17ffd17 	ldw	r5,-12(fp)
  800b18:	e1bffe17 	ldw	r6,-8(fp)
  800b1c:	e1ffff17 	ldw	r7,-4(fp)
  800b20:	08007a00 	call	8007a0 <CuFail_Line>
}
  800b24:	e037883a 	mov	sp,fp
  800b28:	dfc00117 	ldw	ra,4(sp)
  800b2c:	df000017 	ldw	fp,0(sp)
  800b30:	dec00204 	addi	sp,sp,8
  800b34:	f800283a 	ret

00800b38 <CuSuiteInit>:
/*-------------------------------------------------------------------------*
 * CuSuite
 *-------------------------------------------------------------------------*/

void CuSuiteInit(CuSuite* testSuite)
{
  800b38:	defffd04 	addi	sp,sp,-12
  800b3c:	dfc00215 	stw	ra,8(sp)
  800b40:	df000115 	stw	fp,4(sp)
  800b44:	df000104 	addi	fp,sp,4
  800b48:	e13fff15 	stw	r4,-4(fp)
	testSuite->count = 0;
  800b4c:	e0bfff17 	ldw	r2,-4(fp)
  800b50:	10000015 	stw	zero,0(r2)
	testSuite->failCount = 0;
  800b54:	e0bfff17 	ldw	r2,-4(fp)
  800b58:	10040115 	stw	zero,4100(r2)
        memset(testSuite->list, 0, sizeof(testSuite->list));
  800b5c:	e0bfff17 	ldw	r2,-4(fp)
  800b60:	10800104 	addi	r2,r2,4
  800b64:	1009883a 	mov	r4,r2
  800b68:	01840004 	movi	r6,4096
  800b6c:	000b883a 	mov	r5,zero
  800b70:	080285c0 	call	80285c <memset>
}
  800b74:	e037883a 	mov	sp,fp
  800b78:	dfc00117 	ldw	ra,4(sp)
  800b7c:	df000017 	ldw	fp,0(sp)
  800b80:	dec00204 	addi	sp,sp,8
  800b84:	f800283a 	ret

00800b88 <CuSuiteNew>:

CuSuite* CuSuiteNew(void)
{
  800b88:	defffd04 	addi	sp,sp,-12
  800b8c:	dfc00215 	stw	ra,8(sp)
  800b90:	df000115 	stw	fp,4(sp)
  800b94:	df000104 	addi	fp,sp,4
	CuSuite* testSuite = CU_ALLOC(CuSuite);
  800b98:	01040204 	movi	r4,4104
  800b9c:	0801f880 	call	801f88 <malloc>
  800ba0:	e0bfff15 	stw	r2,-4(fp)
	CuSuiteInit(testSuite);
  800ba4:	e13fff17 	ldw	r4,-4(fp)
  800ba8:	0800b380 	call	800b38 <CuSuiteInit>
	return testSuite;
  800bac:	e0bfff17 	ldw	r2,-4(fp)
}
  800bb0:	e037883a 	mov	sp,fp
  800bb4:	dfc00117 	ldw	ra,4(sp)
  800bb8:	df000017 	ldw	fp,0(sp)
  800bbc:	dec00204 	addi	sp,sp,8
  800bc0:	f800283a 	ret

00800bc4 <CuSuiteDelete>:

void CuSuiteDelete(CuSuite *testSuite)
{
  800bc4:	defffc04 	addi	sp,sp,-16
  800bc8:	dfc00315 	stw	ra,12(sp)
  800bcc:	df000215 	stw	fp,8(sp)
  800bd0:	df000204 	addi	fp,sp,8
  800bd4:	e13fff15 	stw	r4,-4(fp)
        unsigned int n;
        for (n=0; n < MAX_TEST_CASES; n++)
  800bd8:	e03ffe15 	stw	zero,-8(fp)
  800bdc:	00001406 	br	800c30 <CuSuiteDelete+0x6c>
        {
                if (testSuite->list[n])
  800be0:	e0bffe17 	ldw	r2,-8(fp)
  800be4:	e0ffff17 	ldw	r3,-4(fp)
  800be8:	1085883a 	add	r2,r2,r2
  800bec:	1085883a 	add	r2,r2,r2
  800bf0:	10c5883a 	add	r2,r2,r3
  800bf4:	10800104 	addi	r2,r2,4
  800bf8:	10800017 	ldw	r2,0(r2)
  800bfc:	1005003a 	cmpeq	r2,r2,zero
  800c00:	1000081e 	bne	r2,zero,800c24 <CuSuiteDelete+0x60>
                {
                        CuTestDelete(testSuite->list[n]);
  800c04:	e0bffe17 	ldw	r2,-8(fp)
  800c08:	e0ffff17 	ldw	r3,-4(fp)
  800c0c:	1085883a 	add	r2,r2,r2
  800c10:	1085883a 	add	r2,r2,r2
  800c14:	10c5883a 	add	r2,r2,r3
  800c18:	10800104 	addi	r2,r2,4
  800c1c:	11000017 	ldw	r4,0(r2)
  800c20:	08006540 	call	800654 <CuTestDelete>
}

void CuSuiteDelete(CuSuite *testSuite)
{
        unsigned int n;
        for (n=0; n < MAX_TEST_CASES; n++)
  800c24:	e0bffe17 	ldw	r2,-8(fp)
  800c28:	10800044 	addi	r2,r2,1
  800c2c:	e0bffe15 	stw	r2,-8(fp)
  800c30:	e0bffe17 	ldw	r2,-8(fp)
  800c34:	10810030 	cmpltui	r2,r2,1024
  800c38:	103fe91e 	bne	r2,zero,800be0 <CuSuiteDelete+0x1c>
                if (testSuite->list[n])
                {
                        CuTestDelete(testSuite->list[n]);
                }
        }
        free(testSuite);
  800c3c:	e13fff17 	ldw	r4,-4(fp)
  800c40:	0801f740 	call	801f74 <free>

}
  800c44:	e037883a 	mov	sp,fp
  800c48:	dfc00117 	ldw	ra,4(sp)
  800c4c:	df000017 	ldw	fp,0(sp)
  800c50:	dec00204 	addi	sp,sp,8
  800c54:	f800283a 	ret

00800c58 <CuSuiteAdd>:

void CuSuiteAdd(CuSuite* testSuite, CuTest *testCase)
{
  800c58:	defffc04 	addi	sp,sp,-16
  800c5c:	dfc00315 	stw	ra,12(sp)
  800c60:	df000215 	stw	fp,8(sp)
  800c64:	df000204 	addi	fp,sp,8
  800c68:	e13ffe15 	stw	r4,-8(fp)
  800c6c:	e17fff15 	stw	r5,-4(fp)
	assert(testSuite->count < MAX_TEST_CASES);
  800c70:	e0bffe17 	ldw	r2,-8(fp)
  800c74:	10800017 	ldw	r2,0(r2)
  800c78:	10810010 	cmplti	r2,r2,1024
  800c7c:	1000081e 	bne	r2,zero,800ca0 <CuSuiteAdd+0x48>
  800c80:	010020b4 	movhi	r4,130
  800c84:	21212b04 	addi	r4,r4,-31572
  800c88:	014043c4 	movi	r5,271
  800c8c:	018020b4 	movhi	r6,130
  800c90:	31a12804 	addi	r6,r6,-31584
  800c94:	01c020b4 	movhi	r7,130
  800c98:	39e12f04 	addi	r7,r7,-31556
  800c9c:	0801e900 	call	801e90 <__assert_func>
	testSuite->list[testSuite->count] = testCase;
  800ca0:	e0bffe17 	ldw	r2,-8(fp)
  800ca4:	10800017 	ldw	r2,0(r2)
  800ca8:	e0fffe17 	ldw	r3,-8(fp)
  800cac:	1085883a 	add	r2,r2,r2
  800cb0:	1085883a 	add	r2,r2,r2
  800cb4:	10c5883a 	add	r2,r2,r3
  800cb8:	10c00104 	addi	r3,r2,4
  800cbc:	e0bfff17 	ldw	r2,-4(fp)
  800cc0:	18800015 	stw	r2,0(r3)
	testSuite->count++;
  800cc4:	e0bffe17 	ldw	r2,-8(fp)
  800cc8:	10800017 	ldw	r2,0(r2)
  800ccc:	10c00044 	addi	r3,r2,1
  800cd0:	e0bffe17 	ldw	r2,-8(fp)
  800cd4:	10c00015 	stw	r3,0(r2)
}
  800cd8:	e037883a 	mov	sp,fp
  800cdc:	dfc00117 	ldw	ra,4(sp)
  800ce0:	df000017 	ldw	fp,0(sp)
  800ce4:	dec00204 	addi	sp,sp,8
  800ce8:	f800283a 	ret

00800cec <CuSuiteAddSuite>:

void CuSuiteAddSuite(CuSuite* testSuite, CuSuite* testSuite2)
{
  800cec:	defffa04 	addi	sp,sp,-24
  800cf0:	dfc00515 	stw	ra,20(sp)
  800cf4:	df000415 	stw	fp,16(sp)
  800cf8:	df000404 	addi	fp,sp,16
  800cfc:	e13ffe15 	stw	r4,-8(fp)
  800d00:	e17fff15 	stw	r5,-4(fp)
	int i;
	for (i = 0 ; i < testSuite2->count ; ++i)
  800d04:	e03ffd15 	stw	zero,-12(fp)
  800d08:	00000e06 	br	800d44 <CuSuiteAddSuite+0x58>
	{
		CuTest* testCase = testSuite2->list[i];
  800d0c:	e0bffd17 	ldw	r2,-12(fp)
  800d10:	e0ffff17 	ldw	r3,-4(fp)
  800d14:	1085883a 	add	r2,r2,r2
  800d18:	1085883a 	add	r2,r2,r2
  800d1c:	10c5883a 	add	r2,r2,r3
  800d20:	10800104 	addi	r2,r2,4
  800d24:	10800017 	ldw	r2,0(r2)
  800d28:	e0bffc15 	stw	r2,-16(fp)
		CuSuiteAdd(testSuite, testCase);
  800d2c:	e13ffe17 	ldw	r4,-8(fp)
  800d30:	e17ffc17 	ldw	r5,-16(fp)
  800d34:	0800c580 	call	800c58 <CuSuiteAdd>
}

void CuSuiteAddSuite(CuSuite* testSuite, CuSuite* testSuite2)
{
	int i;
	for (i = 0 ; i < testSuite2->count ; ++i)
  800d38:	e0bffd17 	ldw	r2,-12(fp)
  800d3c:	10800044 	addi	r2,r2,1
  800d40:	e0bffd15 	stw	r2,-12(fp)
  800d44:	e0bfff17 	ldw	r2,-4(fp)
  800d48:	10c00017 	ldw	r3,0(r2)
  800d4c:	e0bffd17 	ldw	r2,-12(fp)
  800d50:	10ffee16 	blt	r2,r3,800d0c <CuSuiteAddSuite+0x20>
	{
		CuTest* testCase = testSuite2->list[i];
		CuSuiteAdd(testSuite, testCase);
	}
}
  800d54:	e037883a 	mov	sp,fp
  800d58:	dfc00117 	ldw	ra,4(sp)
  800d5c:	df000017 	ldw	fp,0(sp)
  800d60:	dec00204 	addi	sp,sp,8
  800d64:	f800283a 	ret

00800d68 <CuSuiteRun>:

void CuSuiteRun(CuSuite* testSuite)
{
  800d68:	defffb04 	addi	sp,sp,-20
  800d6c:	dfc00415 	stw	ra,16(sp)
  800d70:	df000315 	stw	fp,12(sp)
  800d74:	df000304 	addi	fp,sp,12
  800d78:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = 0 ; i < testSuite->count ; ++i)
  800d7c:	e03ffe15 	stw	zero,-8(fp)
  800d80:	00001606 	br	800ddc <CuSuiteRun+0x74>
	{
		CuTest* testCase = testSuite->list[i];
  800d84:	e0bffe17 	ldw	r2,-8(fp)
  800d88:	e0ffff17 	ldw	r3,-4(fp)
  800d8c:	1085883a 	add	r2,r2,r2
  800d90:	1085883a 	add	r2,r2,r2
  800d94:	10c5883a 	add	r2,r2,r3
  800d98:	10800104 	addi	r2,r2,4
  800d9c:	10800017 	ldw	r2,0(r2)
  800da0:	e0bffd15 	stw	r2,-12(fp)
		CuTestRun(testCase);
  800da4:	e13ffd17 	ldw	r4,-12(fp)
  800da8:	080069c0 	call	80069c <CuTestRun>
		if (testCase->failed) { testSuite->failCount += 1; }
  800dac:	e0bffd17 	ldw	r2,-12(fp)
  800db0:	10800217 	ldw	r2,8(r2)
  800db4:	1005003a 	cmpeq	r2,r2,zero
  800db8:	1000051e 	bne	r2,zero,800dd0 <CuSuiteRun+0x68>
  800dbc:	e0bfff17 	ldw	r2,-4(fp)
  800dc0:	10840117 	ldw	r2,4100(r2)
  800dc4:	10c00044 	addi	r3,r2,1
  800dc8:	e0bfff17 	ldw	r2,-4(fp)
  800dcc:	10c40115 	stw	r3,4100(r2)
}

void CuSuiteRun(CuSuite* testSuite)
{
	int i;
	for (i = 0 ; i < testSuite->count ; ++i)
  800dd0:	e0bffe17 	ldw	r2,-8(fp)
  800dd4:	10800044 	addi	r2,r2,1
  800dd8:	e0bffe15 	stw	r2,-8(fp)
  800ddc:	e0bfff17 	ldw	r2,-4(fp)
  800de0:	10c00017 	ldw	r3,0(r2)
  800de4:	e0bffe17 	ldw	r2,-8(fp)
  800de8:	10ffe616 	blt	r2,r3,800d84 <CuSuiteRun+0x1c>
	{
		CuTest* testCase = testSuite->list[i];
		CuTestRun(testCase);
		if (testCase->failed) { testSuite->failCount += 1; }
	}
}
  800dec:	e037883a 	mov	sp,fp
  800df0:	dfc00117 	ldw	ra,4(sp)
  800df4:	df000017 	ldw	fp,0(sp)
  800df8:	dec00204 	addi	sp,sp,8
  800dfc:	f800283a 	ret

00800e00 <CuSuiteSummary>:

void CuSuiteSummary(CuSuite* testSuite, CuString* summary)
{
  800e00:	defff904 	addi	sp,sp,-28
  800e04:	dfc00615 	stw	ra,24(sp)
  800e08:	df000515 	stw	fp,20(sp)
  800e0c:	df000504 	addi	fp,sp,20
  800e10:	e13ffd15 	stw	r4,-12(fp)
  800e14:	e17ffe15 	stw	r5,-8(fp)
	int i;
	for (i = 0 ; i < testSuite->count ; ++i)
  800e18:	e03ffc15 	stw	zero,-16(fp)
  800e1c:	00001906 	br	800e84 <CuSuiteSummary+0x84>
	{
		CuTest* testCase = testSuite->list[i];
  800e20:	e0bffc17 	ldw	r2,-16(fp)
  800e24:	e0fffd17 	ldw	r3,-12(fp)
  800e28:	1085883a 	add	r2,r2,r2
  800e2c:	1085883a 	add	r2,r2,r2
  800e30:	10c5883a 	add	r2,r2,r3
  800e34:	10800104 	addi	r2,r2,4
  800e38:	10800017 	ldw	r2,0(r2)
  800e3c:	e0bffb15 	stw	r2,-20(fp)
		CuStringAppend(summary, testCase->failed ? "F" : ".");
  800e40:	e0bffb17 	ldw	r2,-20(fp)
  800e44:	10800217 	ldw	r2,8(r2)
  800e48:	1005003a 	cmpeq	r2,r2,zero
  800e4c:	1000041e 	bne	r2,zero,800e60 <CuSuiteSummary+0x60>
  800e50:	008020b4 	movhi	r2,130
  800e54:	10a13804 	addi	r2,r2,-31520
  800e58:	e0bfff15 	stw	r2,-4(fp)
  800e5c:	00000306 	br	800e6c <CuSuiteSummary+0x6c>
  800e60:	008020b4 	movhi	r2,130
  800e64:	10a13904 	addi	r2,r2,-31516
  800e68:	e0bfff15 	stw	r2,-4(fp)
  800e6c:	e13ffe17 	ldw	r4,-8(fp)
  800e70:	e17fff17 	ldw	r5,-4(fp)
  800e74:	08003600 	call	800360 <CuStringAppend>
}

void CuSuiteSummary(CuSuite* testSuite, CuString* summary)
{
	int i;
	for (i = 0 ; i < testSuite->count ; ++i)
  800e78:	e0bffc17 	ldw	r2,-16(fp)
  800e7c:	10800044 	addi	r2,r2,1
  800e80:	e0bffc15 	stw	r2,-16(fp)
  800e84:	e0bffd17 	ldw	r2,-12(fp)
  800e88:	10c00017 	ldw	r3,0(r2)
  800e8c:	e0bffc17 	ldw	r2,-16(fp)
  800e90:	10ffe316 	blt	r2,r3,800e20 <CuSuiteSummary+0x20>
	{
		CuTest* testCase = testSuite->list[i];
		CuStringAppend(summary, testCase->failed ? "F" : ".");
	}
	CuStringAppend(summary, "\n\n");
  800e94:	e13ffe17 	ldw	r4,-8(fp)
  800e98:	014020b4 	movhi	r5,130
  800e9c:	29613a04 	addi	r5,r5,-31512
  800ea0:	08003600 	call	800360 <CuStringAppend>
}
  800ea4:	e037883a 	mov	sp,fp
  800ea8:	dfc00117 	ldw	ra,4(sp)
  800eac:	df000017 	ldw	fp,0(sp)
  800eb0:	dec00204 	addi	sp,sp,8
  800eb4:	f800283a 	ret

00800eb8 <CuSuiteDetails>:

void CuSuiteDetails(CuSuite* testSuite, CuString* details)
{
  800eb8:	defff504 	addi	sp,sp,-44
  800ebc:	dfc00a15 	stw	ra,40(sp)
  800ec0:	df000915 	stw	fp,36(sp)
  800ec4:	df000904 	addi	fp,sp,36
  800ec8:	e13ffd15 	stw	r4,-12(fp)
  800ecc:	e17ffe15 	stw	r5,-8(fp)
	int i;
	int failCount = 0;
  800ed0:	e03ffb15 	stw	zero,-20(fp)

	if (testSuite->failCount == 0)
  800ed4:	e0bffd17 	ldw	r2,-12(fp)
  800ed8:	10840117 	ldw	r2,4100(r2)
  800edc:	1004c03a 	cmpne	r2,r2,zero
  800ee0:	1000191e 	bne	r2,zero,800f48 <CuSuiteDetails+0x90>
	{
		int passCount = testSuite->count - testSuite->failCount;
  800ee4:	e0bffd17 	ldw	r2,-12(fp)
  800ee8:	10c00017 	ldw	r3,0(r2)
  800eec:	e0bffd17 	ldw	r2,-12(fp)
  800ef0:	10840117 	ldw	r2,4100(r2)
  800ef4:	1885c83a 	sub	r2,r3,r2
  800ef8:	e0bffa15 	stw	r2,-24(fp)
		const char* testWord = passCount == 1 ? "test" : "tests";
  800efc:	e0bffa17 	ldw	r2,-24(fp)
  800f00:	10800058 	cmpnei	r2,r2,1
  800f04:	1000041e 	bne	r2,zero,800f18 <CuSuiteDetails+0x60>
  800f08:	008020b4 	movhi	r2,130
  800f0c:	10a13b04 	addi	r2,r2,-31508
  800f10:	e0bfff15 	stw	r2,-4(fp)
  800f14:	00000306 	br	800f24 <CuSuiteDetails+0x6c>
  800f18:	008020b4 	movhi	r2,130
  800f1c:	10a13d04 	addi	r2,r2,-31500
  800f20:	e0bfff15 	stw	r2,-4(fp)
  800f24:	e0bfff17 	ldw	r2,-4(fp)
  800f28:	e0bff915 	stw	r2,-28(fp)
		CuStringAppendFormat(details, "OK (%d %s)\n", passCount, testWord);
  800f2c:	e13ffe17 	ldw	r4,-8(fp)
  800f30:	014020b4 	movhi	r5,130
  800f34:	29613f04 	addi	r5,r5,-31492
  800f38:	e1bffa17 	ldw	r6,-24(fp)
  800f3c:	e1fff917 	ldw	r7,-28(fp)
  800f40:	08004580 	call	800458 <CuStringAppendFormat>
  800f44:	00004a06 	br	801070 <CuSuiteDetails+0x1b8>
	}
	else
	{
		if (testSuite->failCount == 1)
  800f48:	e0bffd17 	ldw	r2,-12(fp)
  800f4c:	10840117 	ldw	r2,4100(r2)
  800f50:	10800058 	cmpnei	r2,r2,1
  800f54:	1000051e 	bne	r2,zero,800f6c <CuSuiteDetails+0xb4>
			CuStringAppend(details, "There was 1 failure:\n");
  800f58:	e13ffe17 	ldw	r4,-8(fp)
  800f5c:	014020b4 	movhi	r5,130
  800f60:	29614204 	addi	r5,r5,-31480
  800f64:	08003600 	call	800360 <CuStringAppend>
  800f68:	00000606 	br	800f84 <CuSuiteDetails+0xcc>
		else
			CuStringAppendFormat(details, "There were %d failures:\n", testSuite->failCount);
  800f6c:	e0bffd17 	ldw	r2,-12(fp)
  800f70:	11840117 	ldw	r6,4100(r2)
  800f74:	e13ffe17 	ldw	r4,-8(fp)
  800f78:	014020b4 	movhi	r5,130
  800f7c:	29614804 	addi	r5,r5,-31456
  800f80:	08004580 	call	800458 <CuStringAppendFormat>

		for (i = 0 ; i < testSuite->count ; ++i)
  800f84:	e03ffc15 	stw	zero,-16(fp)
  800f88:	00001c06 	br	800ffc <CuSuiteDetails+0x144>
		{
			CuTest* testCase = testSuite->list[i];
  800f8c:	e0bffc17 	ldw	r2,-16(fp)
  800f90:	e0fffd17 	ldw	r3,-12(fp)
  800f94:	1085883a 	add	r2,r2,r2
  800f98:	1085883a 	add	r2,r2,r2
  800f9c:	10c5883a 	add	r2,r2,r3
  800fa0:	10800104 	addi	r2,r2,4
  800fa4:	10800017 	ldw	r2,0(r2)
  800fa8:	e0bff815 	stw	r2,-32(fp)
			if (testCase->failed)
  800fac:	e0bff817 	ldw	r2,-32(fp)
  800fb0:	10800217 	ldw	r2,8(r2)
  800fb4:	1005003a 	cmpeq	r2,r2,zero
  800fb8:	10000d1e 	bne	r2,zero,800ff0 <CuSuiteDetails+0x138>
			{
				failCount++;
  800fbc:	e0bffb17 	ldw	r2,-20(fp)
  800fc0:	10800044 	addi	r2,r2,1
  800fc4:	e0bffb15 	stw	r2,-20(fp)
				CuStringAppendFormat(details, "%d) %s: %s\n",
  800fc8:	e0bff817 	ldw	r2,-32(fp)
  800fcc:	11c00017 	ldw	r7,0(r2)
  800fd0:	e0bff817 	ldw	r2,-32(fp)
  800fd4:	10800417 	ldw	r2,16(r2)
  800fd8:	d8800015 	stw	r2,0(sp)
  800fdc:	e13ffe17 	ldw	r4,-8(fp)
  800fe0:	014020b4 	movhi	r5,130
  800fe4:	29614f04 	addi	r5,r5,-31428
  800fe8:	e1bffb17 	ldw	r6,-20(fp)
  800fec:	08004580 	call	800458 <CuStringAppendFormat>
		if (testSuite->failCount == 1)
			CuStringAppend(details, "There was 1 failure:\n");
		else
			CuStringAppendFormat(details, "There were %d failures:\n", testSuite->failCount);

		for (i = 0 ; i < testSuite->count ; ++i)
  800ff0:	e0bffc17 	ldw	r2,-16(fp)
  800ff4:	10800044 	addi	r2,r2,1
  800ff8:	e0bffc15 	stw	r2,-16(fp)
  800ffc:	e0bffd17 	ldw	r2,-12(fp)
  801000:	10c00017 	ldw	r3,0(r2)
  801004:	e0bffc17 	ldw	r2,-16(fp)
  801008:	10ffe016 	blt	r2,r3,800f8c <CuSuiteDetails+0xd4>
				failCount++;
				CuStringAppendFormat(details, "%d) %s: %s\n",
					failCount, testCase->name, testCase->message);
			}
		}
		CuStringAppend(details, "\n!!!FAILURES!!!\n");
  80100c:	e13ffe17 	ldw	r4,-8(fp)
  801010:	014020b4 	movhi	r5,130
  801014:	29615204 	addi	r5,r5,-31416
  801018:	08003600 	call	800360 <CuStringAppend>

		CuStringAppendFormat(details, "Runs: %d ",   testSuite->count);
  80101c:	e0bffd17 	ldw	r2,-12(fp)
  801020:	11800017 	ldw	r6,0(r2)
  801024:	e13ffe17 	ldw	r4,-8(fp)
  801028:	014020b4 	movhi	r5,130
  80102c:	29615704 	addi	r5,r5,-31396
  801030:	08004580 	call	800458 <CuStringAppendFormat>
		CuStringAppendFormat(details, "Passes: %d ", testSuite->count - testSuite->failCount);
  801034:	e0bffd17 	ldw	r2,-12(fp)
  801038:	10c00017 	ldw	r3,0(r2)
  80103c:	e0bffd17 	ldw	r2,-12(fp)
  801040:	10840117 	ldw	r2,4100(r2)
  801044:	188dc83a 	sub	r6,r3,r2
  801048:	e13ffe17 	ldw	r4,-8(fp)
  80104c:	014020b4 	movhi	r5,130
  801050:	29615a04 	addi	r5,r5,-31384
  801054:	08004580 	call	800458 <CuStringAppendFormat>
		CuStringAppendFormat(details, "Fails: %d\n",  testSuite->failCount);
  801058:	e0bffd17 	ldw	r2,-12(fp)
  80105c:	11840117 	ldw	r6,4100(r2)
  801060:	e13ffe17 	ldw	r4,-8(fp)
  801064:	014020b4 	movhi	r5,130
  801068:	29615d04 	addi	r5,r5,-31372
  80106c:	08004580 	call	800458 <CuStringAppendFormat>
	}
}
  801070:	e037883a 	mov	sp,fp
  801074:	dfc00117 	ldw	ra,4(sp)
  801078:	df000017 	ldw	fp,0(sp)
  80107c:	dec00204 	addi	sp,sp,8
  801080:	f800283a 	ret

00801084 <run_all_tests>:
 */

#include "../test_config.h"

/* Runs all unit tests */
void run_all_tests(){
  801084:	deffff04 	addi	sp,sp,-4
  801088:	df000015 	stw	fp,0(sp)
  80108c:	d839883a 	mov	fp,sp
	//put your test function calls here

}
  801090:	e037883a 	mov	sp,fp
  801094:	df000017 	ldw	fp,0(sp)
  801098:	dec00104 	addi	sp,sp,4
  80109c:	f800283a 	ret

008010a0 <int16U_changed_by_threshold>:

#include "util.h"

/* Simple function to check if input is changed from last_value by at least threshold amount*/
BOOL int16U_changed_by_threshold(INT16U input, INT16U last_value,
		INT16U threshold) {
  8010a0:	defffb04 	addi	sp,sp,-20
  8010a4:	df000415 	stw	fp,16(sp)
  8010a8:	df000404 	addi	fp,sp,16
  8010ac:	e13ffc0d 	sth	r4,-16(fp)
  8010b0:	e17ffd0d 	sth	r5,-12(fp)
  8010b4:	e1bffe0d 	sth	r6,-8(fp)

	if (input > last_value && input - last_value > threshold)
  8010b8:	e0fffc0b 	ldhu	r3,-16(fp)
  8010bc:	e0bffd0b 	ldhu	r2,-12(fp)
  8010c0:	10c0082e 	bgeu	r2,r3,8010e4 <int16U_changed_by_threshold+0x44>
  8010c4:	e0fffc0b 	ldhu	r3,-16(fp)
  8010c8:	e0bffd0b 	ldhu	r2,-12(fp)
  8010cc:	1887c83a 	sub	r3,r3,r2
  8010d0:	e0bffe0b 	ldhu	r2,-8(fp)
  8010d4:	10c0030e 	bge	r2,r3,8010e4 <int16U_changed_by_threshold+0x44>
		return TRUE;
  8010d8:	00800044 	movi	r2,1
  8010dc:	e0bfff15 	stw	r2,-4(fp)
  8010e0:	00000c06 	br	801114 <int16U_changed_by_threshold+0x74>

	if (last_value > input && last_value - input > threshold)
  8010e4:	e0fffd0b 	ldhu	r3,-12(fp)
  8010e8:	e0bffc0b 	ldhu	r2,-16(fp)
  8010ec:	10c0082e 	bgeu	r2,r3,801110 <int16U_changed_by_threshold+0x70>
  8010f0:	e0fffd0b 	ldhu	r3,-12(fp)
  8010f4:	e0bffc0b 	ldhu	r2,-16(fp)
  8010f8:	1887c83a 	sub	r3,r3,r2
  8010fc:	e0bffe0b 	ldhu	r2,-8(fp)
  801100:	10c0030e 	bge	r2,r3,801110 <int16U_changed_by_threshold+0x70>
		return TRUE;
  801104:	00800044 	movi	r2,1
  801108:	e0bfff15 	stw	r2,-4(fp)
  80110c:	00000106 	br	801114 <int16U_changed_by_threshold+0x74>

	return FALSE;
  801110:	e03fff15 	stw	zero,-4(fp)
  801114:	e0bfff17 	ldw	r2,-4(fp)
}
  801118:	e037883a 	mov	sp,fp
  80111c:	df000017 	ldw	fp,0(sp)
  801120:	dec00104 	addi	sp,sp,4
  801124:	f800283a 	ret

00801128 <int16U_differ_by_percent>:
/* Simple function to check if two inputs differ by a certain percent
 * percent is input as an integer and it's accurate to
 * for example, to check 10 percent, input number 10
 * the actual accuracy is defined by PERCENT_DIFF_ACCURACY
 */
BOOL int16U_differ_by_percent(INT16U src1, INT16U src2, INT8U percent, INT16U accuracy){
  801128:	defff404 	addi	sp,sp,-48
  80112c:	dfc00b15 	stw	ra,44(sp)
  801130:	df000a15 	stw	fp,40(sp)
  801134:	df000a04 	addi	fp,sp,40
  801138:	e13ffb0d 	sth	r4,-20(fp)
  80113c:	e17ffc0d 	sth	r5,-16(fp)
  801140:	e1bffd05 	stb	r6,-12(fp)
  801144:	e1fffe0d 	sth	r7,-8(fp)
	INT16U larger;
	INT16U smaller;
	if(src1 > src2){
  801148:	e0fffb0b 	ldhu	r3,-20(fp)
  80114c:	e0bffc0b 	ldhu	r2,-16(fp)
  801150:	10c0052e 	bgeu	r2,r3,801168 <int16U_differ_by_percent+0x40>
		larger = src1;
  801154:	e0bffb0b 	ldhu	r2,-20(fp)
  801158:	e0bffa8d 	sth	r2,-22(fp)
		smaller = src2;
  80115c:	e0bffc0b 	ldhu	r2,-16(fp)
  801160:	e0bffa0d 	sth	r2,-24(fp)
  801164:	00000406 	br	801178 <int16U_differ_by_percent+0x50>
	}else{
		larger = src2;
  801168:	e0bffc0b 	ldhu	r2,-16(fp)
  80116c:	e0bffa8d 	sth	r2,-22(fp)
		smaller = src1;
  801170:	e0bffb0b 	ldhu	r2,-20(fp)
  801174:	e0bffa0d 	sth	r2,-24(fp)
	}
	if(larger == 0) return TRUE;
  801178:	e0bffa8b 	ldhu	r2,-22(fp)
  80117c:	1004c03a 	cmpne	r2,r2,zero
  801180:	1000031e 	bne	r2,zero,801190 <int16U_differ_by_percent+0x68>
  801184:	00800044 	movi	r2,1
  801188:	e0bfff15 	stw	r2,-4(fp)
  80118c:	00003106 	br	801254 <int16U_differ_by_percent+0x12c>
	if(smaller == 0){
  801190:	e0bffa0b 	ldhu	r2,-24(fp)
  801194:	1004c03a 	cmpne	r2,r2,zero
  801198:	1000091e 	bne	r2,zero,8011c0 <int16U_differ_by_percent+0x98>
		if(larger <= percent) return TRUE;
  80119c:	e0bffd03 	ldbu	r2,-12(fp)
  8011a0:	10ffffcc 	andi	r3,r2,65535
  8011a4:	e0bffa8b 	ldhu	r2,-22(fp)
  8011a8:	18800336 	bltu	r3,r2,8011b8 <int16U_differ_by_percent+0x90>
  8011ac:	00800044 	movi	r2,1
  8011b0:	e0bfff15 	stw	r2,-4(fp)
  8011b4:	00002706 	br	801254 <int16U_differ_by_percent+0x12c>
		else return FALSE;
  8011b8:	e03fff15 	stw	zero,-4(fp)
  8011bc:	00002506 	br	801254 <int16U_differ_by_percent+0x12c>
	}
	if(larger / smaller > 1) return FALSE;
  8011c0:	e13ffa8b 	ldhu	r4,-22(fp)
  8011c4:	e17ffa0b 	ldhu	r5,-24(fp)
  8011c8:	08019340 	call	801934 <__udivsi3>
  8011cc:	10bfffcc 	andi	r2,r2,65535
  8011d0:	108000b0 	cmpltui	r2,r2,2
  8011d4:	1000021e 	bne	r2,zero,8011e0 <int16U_differ_by_percent+0xb8>
  8011d8:	e03fff15 	stw	zero,-4(fp)
  8011dc:	00001d06 	br	801254 <int16U_differ_by_percent+0x12c>
	INT32U diff = larger - smaller;
  8011e0:	e0fffa8b 	ldhu	r3,-22(fp)
  8011e4:	e0bffa0b 	ldhu	r2,-24(fp)
  8011e8:	1885c83a 	sub	r2,r3,r2
  8011ec:	e0bff915 	stw	r2,-28(fp)
	INT32U avg = (larger + smaller) / 2;
  8011f0:	e0fffa8b 	ldhu	r3,-22(fp)
  8011f4:	e0bffa0b 	ldhu	r2,-24(fp)
  8011f8:	1887883a 	add	r3,r3,r2
  8011fc:	1804d7fa 	srli	r2,r3,31
  801200:	10c5883a 	add	r2,r2,r3
  801204:	1005d07a 	srai	r2,r2,1
  801208:	e0bff815 	stw	r2,-32(fp)
	INT32U result = (diff * accuracy) / avg;
  80120c:	e13ffe0b 	ldhu	r4,-8(fp)
  801210:	e17ff917 	ldw	r5,-28(fp)
  801214:	08019440 	call	801944 <__mulsi3>
  801218:	1009883a 	mov	r4,r2
  80121c:	e17ff817 	ldw	r5,-32(fp)
  801220:	08019340 	call	801934 <__udivsi3>
  801224:	e0bff715 	stw	r2,-36(fp)
	INT32U threshold = percent * accuracy;
  801228:	e13ffd03 	ldbu	r4,-12(fp)
  80122c:	e17ffe0b 	ldhu	r5,-8(fp)
  801230:	08019440 	call	801944 <__mulsi3>
  801234:	e0bff615 	stw	r2,-40(fp)
	if(result <= threshold)
  801238:	e0fff717 	ldw	r3,-36(fp)
  80123c:	e0bff617 	ldw	r2,-40(fp)
  801240:	10c00236 	bltu	r2,r3,80124c <int16U_differ_by_percent+0x124>
		return FALSE;
  801244:	e03fff15 	stw	zero,-4(fp)
  801248:	00000206 	br	801254 <int16U_differ_by_percent+0x12c>
	else
		return TRUE;
  80124c:	00800044 	movi	r2,1
  801250:	e0bfff15 	stw	r2,-4(fp)
  801254:	e0bfff17 	ldw	r2,-4(fp)
}
  801258:	e037883a 	mov	sp,fp
  80125c:	dfc00117 	ldw	ra,4(sp)
  801260:	df000017 	ldw	fp,0(sp)
  801264:	dec00204 	addi	sp,sp,8
  801268:	f800283a 	ret

0080126c <_fpadd_parts>:
  80126c:	defff804 	addi	sp,sp,-32
  801270:	dcc00315 	stw	r19,12(sp)
  801274:	2027883a 	mov	r19,r4
  801278:	21000017 	ldw	r4,0(r4)
  80127c:	00c00044 	movi	r3,1
  801280:	dd400515 	stw	r21,20(sp)
  801284:	dd000415 	stw	r20,16(sp)
  801288:	ddc00715 	stw	r23,28(sp)
  80128c:	dd800615 	stw	r22,24(sp)
  801290:	dc800215 	stw	r18,8(sp)
  801294:	dc400115 	stw	r17,4(sp)
  801298:	dc000015 	stw	r16,0(sp)
  80129c:	282b883a 	mov	r21,r5
  8012a0:	3029883a 	mov	r20,r6
  8012a4:	1900632e 	bgeu	r3,r4,801434 <_fpadd_parts+0x1c8>
  8012a8:	28800017 	ldw	r2,0(r5)
  8012ac:	1880812e 	bgeu	r3,r2,8014b4 <_fpadd_parts+0x248>
  8012b0:	00c00104 	movi	r3,4
  8012b4:	20c0dc26 	beq	r4,r3,801628 <_fpadd_parts+0x3bc>
  8012b8:	10c07e26 	beq	r2,r3,8014b4 <_fpadd_parts+0x248>
  8012bc:	00c00084 	movi	r3,2
  8012c0:	10c06726 	beq	r2,r3,801460 <_fpadd_parts+0x1f4>
  8012c4:	20c07b26 	beq	r4,r3,8014b4 <_fpadd_parts+0x248>
  8012c8:	9dc00217 	ldw	r23,8(r19)
  8012cc:	28c00217 	ldw	r3,8(r5)
  8012d0:	9c400317 	ldw	r17,12(r19)
  8012d4:	2bc00317 	ldw	r15,12(r5)
  8012d8:	b8cdc83a 	sub	r6,r23,r3
  8012dc:	9c800417 	ldw	r18,16(r19)
  8012e0:	2c000417 	ldw	r16,16(r5)
  8012e4:	3009883a 	mov	r4,r6
  8012e8:	30009716 	blt	r6,zero,801548 <_fpadd_parts+0x2dc>
  8012ec:	00800fc4 	movi	r2,63
  8012f0:	11806b16 	blt	r2,r6,8014a0 <_fpadd_parts+0x234>
  8012f4:	0100a40e 	bge	zero,r4,801588 <_fpadd_parts+0x31c>
  8012f8:	35bff804 	addi	r22,r6,-32
  8012fc:	b000bc16 	blt	r22,zero,8015f0 <_fpadd_parts+0x384>
  801300:	8596d83a 	srl	r11,r16,r22
  801304:	0019883a 	mov	r12,zero
  801308:	0013883a 	mov	r9,zero
  80130c:	01000044 	movi	r4,1
  801310:	0015883a 	mov	r10,zero
  801314:	b000be16 	blt	r22,zero,801610 <_fpadd_parts+0x3a4>
  801318:	2590983a 	sll	r8,r4,r22
  80131c:	000f883a 	mov	r7,zero
  801320:	00bfffc4 	movi	r2,-1
  801324:	3889883a 	add	r4,r7,r2
  801328:	408b883a 	add	r5,r8,r2
  80132c:	21cd803a 	cmpltu	r6,r4,r7
  801330:	314b883a 	add	r5,r6,r5
  801334:	7904703a 	and	r2,r15,r4
  801338:	8146703a 	and	r3,r16,r5
  80133c:	10c4b03a 	or	r2,r2,r3
  801340:	10000226 	beq	r2,zero,80134c <_fpadd_parts+0xe0>
  801344:	02400044 	movi	r9,1
  801348:	0015883a 	mov	r10,zero
  80134c:	5a5eb03a 	or	r15,r11,r9
  801350:	62a0b03a 	or	r16,r12,r10
  801354:	99400117 	ldw	r5,4(r19)
  801358:	a8800117 	ldw	r2,4(r21)
  80135c:	28806e26 	beq	r5,r2,801518 <_fpadd_parts+0x2ac>
  801360:	28006626 	beq	r5,zero,8014fc <_fpadd_parts+0x290>
  801364:	7c45c83a 	sub	r2,r15,r17
  801368:	7889803a 	cmpltu	r4,r15,r2
  80136c:	8487c83a 	sub	r3,r16,r18
  801370:	1909c83a 	sub	r4,r3,r4
  801374:	100d883a 	mov	r6,r2
  801378:	200f883a 	mov	r7,r4
  80137c:	38007716 	blt	r7,zero,80155c <_fpadd_parts+0x2f0>
  801380:	a5c00215 	stw	r23,8(r20)
  801384:	a1c00415 	stw	r7,16(r20)
  801388:	a0000115 	stw	zero,4(r20)
  80138c:	a1800315 	stw	r6,12(r20)
  801390:	a2000317 	ldw	r8,12(r20)
  801394:	a2400417 	ldw	r9,16(r20)
  801398:	00bfffc4 	movi	r2,-1
  80139c:	408b883a 	add	r5,r8,r2
  8013a0:	2a09803a 	cmpltu	r4,r5,r8
  8013a4:	488d883a 	add	r6,r9,r2
  8013a8:	01c40034 	movhi	r7,4096
  8013ac:	39ffffc4 	addi	r7,r7,-1
  8013b0:	218d883a 	add	r6,r4,r6
  8013b4:	39801736 	bltu	r7,r6,801414 <_fpadd_parts+0x1a8>
  8013b8:	31c06526 	beq	r6,r7,801550 <_fpadd_parts+0x2e4>
  8013bc:	a3000217 	ldw	r12,8(r20)
  8013c0:	4209883a 	add	r4,r8,r8
  8013c4:	00bfffc4 	movi	r2,-1
  8013c8:	220f803a 	cmpltu	r7,r4,r8
  8013cc:	4a4b883a 	add	r5,r9,r9
  8013d0:	394f883a 	add	r7,r7,r5
  8013d4:	2095883a 	add	r10,r4,r2
  8013d8:	3897883a 	add	r11,r7,r2
  8013dc:	510d803a 	cmpltu	r6,r10,r4
  8013e0:	6099883a 	add	r12,r12,r2
  8013e4:	32d7883a 	add	r11,r6,r11
  8013e8:	00840034 	movhi	r2,4096
  8013ec:	10bfffc4 	addi	r2,r2,-1
  8013f0:	2011883a 	mov	r8,r4
  8013f4:	3813883a 	mov	r9,r7
  8013f8:	a1000315 	stw	r4,12(r20)
  8013fc:	a1c00415 	stw	r7,16(r20)
  801400:	a3000215 	stw	r12,8(r20)
  801404:	12c00336 	bltu	r2,r11,801414 <_fpadd_parts+0x1a8>
  801408:	58bfed1e 	bne	r11,r2,8013c0 <_fpadd_parts+0x154>
  80140c:	00bfff84 	movi	r2,-2
  801410:	12bfeb2e 	bgeu	r2,r10,8013c0 <_fpadd_parts+0x154>
  801414:	a2800417 	ldw	r10,16(r20)
  801418:	008000c4 	movi	r2,3
  80141c:	00c80034 	movhi	r3,8192
  801420:	18ffffc4 	addi	r3,r3,-1
  801424:	a2400317 	ldw	r9,12(r20)
  801428:	a0800015 	stw	r2,0(r20)
  80142c:	1a802336 	bltu	r3,r10,8014bc <_fpadd_parts+0x250>
  801430:	a027883a 	mov	r19,r20
  801434:	9805883a 	mov	r2,r19
  801438:	ddc00717 	ldw	r23,28(sp)
  80143c:	dd800617 	ldw	r22,24(sp)
  801440:	dd400517 	ldw	r21,20(sp)
  801444:	dd000417 	ldw	r20,16(sp)
  801448:	dcc00317 	ldw	r19,12(sp)
  80144c:	dc800217 	ldw	r18,8(sp)
  801450:	dc400117 	ldw	r17,4(sp)
  801454:	dc000017 	ldw	r16,0(sp)
  801458:	dec00804 	addi	sp,sp,32
  80145c:	f800283a 	ret
  801460:	20fff41e 	bne	r4,r3,801434 <_fpadd_parts+0x1c8>
  801464:	31000015 	stw	r4,0(r6)
  801468:	98800117 	ldw	r2,4(r19)
  80146c:	30800115 	stw	r2,4(r6)
  801470:	98c00217 	ldw	r3,8(r19)
  801474:	30c00215 	stw	r3,8(r6)
  801478:	98800317 	ldw	r2,12(r19)
  80147c:	30800315 	stw	r2,12(r6)
  801480:	98c00417 	ldw	r3,16(r19)
  801484:	30c00415 	stw	r3,16(r6)
  801488:	98800117 	ldw	r2,4(r19)
  80148c:	28c00117 	ldw	r3,4(r5)
  801490:	3027883a 	mov	r19,r6
  801494:	10c4703a 	and	r2,r2,r3
  801498:	30800115 	stw	r2,4(r6)
  80149c:	003fe506 	br	801434 <_fpadd_parts+0x1c8>
  8014a0:	1dc02616 	blt	r3,r23,80153c <_fpadd_parts+0x2d0>
  8014a4:	0023883a 	mov	r17,zero
  8014a8:	182f883a 	mov	r23,r3
  8014ac:	0025883a 	mov	r18,zero
  8014b0:	003fa806 	br	801354 <_fpadd_parts+0xe8>
  8014b4:	a827883a 	mov	r19,r21
  8014b8:	003fde06 	br	801434 <_fpadd_parts+0x1c8>
  8014bc:	01800044 	movi	r6,1
  8014c0:	500497fa 	slli	r2,r10,31
  8014c4:	4808d07a 	srli	r4,r9,1
  8014c8:	518ad83a 	srl	r5,r10,r6
  8014cc:	a2000217 	ldw	r8,8(r20)
  8014d0:	1108b03a 	or	r4,r2,r4
  8014d4:	0007883a 	mov	r3,zero
  8014d8:	4984703a 	and	r2,r9,r6
  8014dc:	208cb03a 	or	r6,r4,r2
  8014e0:	28ceb03a 	or	r7,r5,r3
  8014e4:	42000044 	addi	r8,r8,1
  8014e8:	a027883a 	mov	r19,r20
  8014ec:	a1c00415 	stw	r7,16(r20)
  8014f0:	a2000215 	stw	r8,8(r20)
  8014f4:	a1800315 	stw	r6,12(r20)
  8014f8:	003fce06 	br	801434 <_fpadd_parts+0x1c8>
  8014fc:	8bc5c83a 	sub	r2,r17,r15
  801500:	8889803a 	cmpltu	r4,r17,r2
  801504:	9407c83a 	sub	r3,r18,r16
  801508:	1909c83a 	sub	r4,r3,r4
  80150c:	100d883a 	mov	r6,r2
  801510:	200f883a 	mov	r7,r4
  801514:	003f9906 	br	80137c <_fpadd_parts+0x110>
  801518:	7c45883a 	add	r2,r15,r17
  80151c:	13c9803a 	cmpltu	r4,r2,r15
  801520:	8487883a 	add	r3,r16,r18
  801524:	20c9883a 	add	r4,r4,r3
  801528:	a1400115 	stw	r5,4(r20)
  80152c:	a5c00215 	stw	r23,8(r20)
  801530:	a0800315 	stw	r2,12(r20)
  801534:	a1000415 	stw	r4,16(r20)
  801538:	003fb606 	br	801414 <_fpadd_parts+0x1a8>
  80153c:	001f883a 	mov	r15,zero
  801540:	0021883a 	mov	r16,zero
  801544:	003f8306 	br	801354 <_fpadd_parts+0xe8>
  801548:	018dc83a 	sub	r6,zero,r6
  80154c:	003f6706 	br	8012ec <_fpadd_parts+0x80>
  801550:	00bfff84 	movi	r2,-2
  801554:	117faf36 	bltu	r2,r5,801414 <_fpadd_parts+0x1a8>
  801558:	003f9806 	br	8013bc <_fpadd_parts+0x150>
  80155c:	0005883a 	mov	r2,zero
  801560:	1189c83a 	sub	r4,r2,r6
  801564:	1105803a 	cmpltu	r2,r2,r4
  801568:	01cbc83a 	sub	r5,zero,r7
  80156c:	2885c83a 	sub	r2,r5,r2
  801570:	01800044 	movi	r6,1
  801574:	a1800115 	stw	r6,4(r20)
  801578:	a5c00215 	stw	r23,8(r20)
  80157c:	a1000315 	stw	r4,12(r20)
  801580:	a0800415 	stw	r2,16(r20)
  801584:	003f8206 	br	801390 <_fpadd_parts+0x124>
  801588:	203f7226 	beq	r4,zero,801354 <_fpadd_parts+0xe8>
  80158c:	35bff804 	addi	r22,r6,-32
  801590:	b9af883a 	add	r23,r23,r6
  801594:	b0003116 	blt	r22,zero,80165c <_fpadd_parts+0x3f0>
  801598:	959ad83a 	srl	r13,r18,r22
  80159c:	001d883a 	mov	r14,zero
  8015a0:	000f883a 	mov	r7,zero
  8015a4:	01000044 	movi	r4,1
  8015a8:	0011883a 	mov	r8,zero
  8015ac:	b0002516 	blt	r22,zero,801644 <_fpadd_parts+0x3d8>
  8015b0:	2594983a 	sll	r10,r4,r22
  8015b4:	0013883a 	mov	r9,zero
  8015b8:	00bfffc4 	movi	r2,-1
  8015bc:	4889883a 	add	r4,r9,r2
  8015c0:	508b883a 	add	r5,r10,r2
  8015c4:	224d803a 	cmpltu	r6,r4,r9
  8015c8:	314b883a 	add	r5,r6,r5
  8015cc:	8904703a 	and	r2,r17,r4
  8015d0:	9146703a 	and	r3,r18,r5
  8015d4:	10c4b03a 	or	r2,r2,r3
  8015d8:	10000226 	beq	r2,zero,8015e4 <_fpadd_parts+0x378>
  8015dc:	01c00044 	movi	r7,1
  8015e0:	0011883a 	mov	r8,zero
  8015e4:	69e2b03a 	or	r17,r13,r7
  8015e8:	7224b03a 	or	r18,r14,r8
  8015ec:	003f5906 	br	801354 <_fpadd_parts+0xe8>
  8015f0:	8407883a 	add	r3,r16,r16
  8015f4:	008007c4 	movi	r2,31
  8015f8:	1185c83a 	sub	r2,r2,r6
  8015fc:	1886983a 	sll	r3,r3,r2
  801600:	7996d83a 	srl	r11,r15,r6
  801604:	8198d83a 	srl	r12,r16,r6
  801608:	1ad6b03a 	or	r11,r3,r11
  80160c:	003f3e06 	br	801308 <_fpadd_parts+0x9c>
  801610:	2006d07a 	srli	r3,r4,1
  801614:	008007c4 	movi	r2,31
  801618:	1185c83a 	sub	r2,r2,r6
  80161c:	1890d83a 	srl	r8,r3,r2
  801620:	218e983a 	sll	r7,r4,r6
  801624:	003f3e06 	br	801320 <_fpadd_parts+0xb4>
  801628:	113f821e 	bne	r2,r4,801434 <_fpadd_parts+0x1c8>
  80162c:	28c00117 	ldw	r3,4(r5)
  801630:	98800117 	ldw	r2,4(r19)
  801634:	10ff7f26 	beq	r2,r3,801434 <_fpadd_parts+0x1c8>
  801638:	04c020b4 	movhi	r19,130
  80163c:	9ce16004 	addi	r19,r19,-31360
  801640:	003f7c06 	br	801434 <_fpadd_parts+0x1c8>
  801644:	2006d07a 	srli	r3,r4,1
  801648:	008007c4 	movi	r2,31
  80164c:	1185c83a 	sub	r2,r2,r6
  801650:	1894d83a 	srl	r10,r3,r2
  801654:	2192983a 	sll	r9,r4,r6
  801658:	003fd706 	br	8015b8 <_fpadd_parts+0x34c>
  80165c:	9487883a 	add	r3,r18,r18
  801660:	008007c4 	movi	r2,31
  801664:	1185c83a 	sub	r2,r2,r6
  801668:	1886983a 	sll	r3,r3,r2
  80166c:	899ad83a 	srl	r13,r17,r6
  801670:	919cd83a 	srl	r14,r18,r6
  801674:	1b5ab03a 	or	r13,r3,r13
  801678:	003fc906 	br	8015a0 <_fpadd_parts+0x334>

0080167c <__subdf3>:
  80167c:	deffea04 	addi	sp,sp,-88
  801680:	dcc01415 	stw	r19,80(sp)
  801684:	dcc00404 	addi	r19,sp,16
  801688:	2011883a 	mov	r8,r4
  80168c:	2813883a 	mov	r9,r5
  801690:	dc401315 	stw	r17,76(sp)
  801694:	d809883a 	mov	r4,sp
  801698:	980b883a 	mov	r5,r19
  80169c:	dc400904 	addi	r17,sp,36
  8016a0:	dfc01515 	stw	ra,84(sp)
  8016a4:	da400115 	stw	r9,4(sp)
  8016a8:	d9c00315 	stw	r7,12(sp)
  8016ac:	da000015 	stw	r8,0(sp)
  8016b0:	d9800215 	stw	r6,8(sp)
  8016b4:	0801c900 	call	801c90 <__unpack_d>
  8016b8:	d9000204 	addi	r4,sp,8
  8016bc:	880b883a 	mov	r5,r17
  8016c0:	0801c900 	call	801c90 <__unpack_d>
  8016c4:	d8800a17 	ldw	r2,40(sp)
  8016c8:	880b883a 	mov	r5,r17
  8016cc:	9809883a 	mov	r4,r19
  8016d0:	d9800e04 	addi	r6,sp,56
  8016d4:	1080005c 	xori	r2,r2,1
  8016d8:	d8800a15 	stw	r2,40(sp)
  8016dc:	080126c0 	call	80126c <_fpadd_parts>
  8016e0:	1009883a 	mov	r4,r2
  8016e4:	080197c0 	call	80197c <__pack_d>
  8016e8:	dfc01517 	ldw	ra,84(sp)
  8016ec:	dcc01417 	ldw	r19,80(sp)
  8016f0:	dc401317 	ldw	r17,76(sp)
  8016f4:	dec01604 	addi	sp,sp,88
  8016f8:	f800283a 	ret

008016fc <__adddf3>:
  8016fc:	deffea04 	addi	sp,sp,-88
  801700:	dcc01415 	stw	r19,80(sp)
  801704:	dcc00404 	addi	r19,sp,16
  801708:	2011883a 	mov	r8,r4
  80170c:	2813883a 	mov	r9,r5
  801710:	dc401315 	stw	r17,76(sp)
  801714:	d809883a 	mov	r4,sp
  801718:	980b883a 	mov	r5,r19
  80171c:	dc400904 	addi	r17,sp,36
  801720:	dfc01515 	stw	ra,84(sp)
  801724:	da400115 	stw	r9,4(sp)
  801728:	d9c00315 	stw	r7,12(sp)
  80172c:	da000015 	stw	r8,0(sp)
  801730:	d9800215 	stw	r6,8(sp)
  801734:	0801c900 	call	801c90 <__unpack_d>
  801738:	d9000204 	addi	r4,sp,8
  80173c:	880b883a 	mov	r5,r17
  801740:	0801c900 	call	801c90 <__unpack_d>
  801744:	d9800e04 	addi	r6,sp,56
  801748:	9809883a 	mov	r4,r19
  80174c:	880b883a 	mov	r5,r17
  801750:	080126c0 	call	80126c <_fpadd_parts>
  801754:	1009883a 	mov	r4,r2
  801758:	080197c0 	call	80197c <__pack_d>
  80175c:	dfc01517 	ldw	ra,84(sp)
  801760:	dcc01417 	ldw	r19,80(sp)
  801764:	dc401317 	ldw	r17,76(sp)
  801768:	dec01604 	addi	sp,sp,88
  80176c:	f800283a 	ret

00801770 <__ledf2>:
  801770:	deffef04 	addi	sp,sp,-68
  801774:	dc400f15 	stw	r17,60(sp)
  801778:	dc400404 	addi	r17,sp,16
  80177c:	2005883a 	mov	r2,r4
  801780:	2807883a 	mov	r3,r5
  801784:	dc000e15 	stw	r16,56(sp)
  801788:	d809883a 	mov	r4,sp
  80178c:	880b883a 	mov	r5,r17
  801790:	dc000904 	addi	r16,sp,36
  801794:	d8c00115 	stw	r3,4(sp)
  801798:	d8800015 	stw	r2,0(sp)
  80179c:	d9800215 	stw	r6,8(sp)
  8017a0:	dfc01015 	stw	ra,64(sp)
  8017a4:	d9c00315 	stw	r7,12(sp)
  8017a8:	0801c900 	call	801c90 <__unpack_d>
  8017ac:	d9000204 	addi	r4,sp,8
  8017b0:	800b883a 	mov	r5,r16
  8017b4:	0801c900 	call	801c90 <__unpack_d>
  8017b8:	d8800417 	ldw	r2,16(sp)
  8017bc:	00c00044 	movi	r3,1
  8017c0:	180d883a 	mov	r6,r3
  8017c4:	1880062e 	bgeu	r3,r2,8017e0 <__ledf2+0x70>
  8017c8:	d8800917 	ldw	r2,36(sp)
  8017cc:	8809883a 	mov	r4,r17
  8017d0:	800b883a 	mov	r5,r16
  8017d4:	1880022e 	bgeu	r3,r2,8017e0 <__ledf2+0x70>
  8017d8:	0801dc80 	call	801dc8 <__fpcmp_parts_d>
  8017dc:	100d883a 	mov	r6,r2
  8017e0:	3005883a 	mov	r2,r6
  8017e4:	dfc01017 	ldw	ra,64(sp)
  8017e8:	dc400f17 	ldw	r17,60(sp)
  8017ec:	dc000e17 	ldw	r16,56(sp)
  8017f0:	dec01104 	addi	sp,sp,68
  8017f4:	f800283a 	ret

008017f8 <udivmodsi4>:
  8017f8:	29001b2e 	bgeu	r5,r4,801868 <udivmodsi4+0x70>
  8017fc:	28001a16 	blt	r5,zero,801868 <udivmodsi4+0x70>
  801800:	00800044 	movi	r2,1
  801804:	0007883a 	mov	r3,zero
  801808:	01c007c4 	movi	r7,31
  80180c:	00000306 	br	80181c <udivmodsi4+0x24>
  801810:	19c01326 	beq	r3,r7,801860 <udivmodsi4+0x68>
  801814:	18c00044 	addi	r3,r3,1
  801818:	28000416 	blt	r5,zero,80182c <udivmodsi4+0x34>
  80181c:	294b883a 	add	r5,r5,r5
  801820:	1085883a 	add	r2,r2,r2
  801824:	293ffa36 	bltu	r5,r4,801810 <udivmodsi4+0x18>
  801828:	10000d26 	beq	r2,zero,801860 <udivmodsi4+0x68>
  80182c:	0007883a 	mov	r3,zero
  801830:	21400236 	bltu	r4,r5,80183c <udivmodsi4+0x44>
  801834:	2149c83a 	sub	r4,r4,r5
  801838:	1886b03a 	or	r3,r3,r2
  80183c:	1004d07a 	srli	r2,r2,1
  801840:	280ad07a 	srli	r5,r5,1
  801844:	103ffa1e 	bne	r2,zero,801830 <udivmodsi4+0x38>
  801848:	30000226 	beq	r6,zero,801854 <udivmodsi4+0x5c>
  80184c:	2005883a 	mov	r2,r4
  801850:	f800283a 	ret
  801854:	1809883a 	mov	r4,r3
  801858:	2005883a 	mov	r2,r4
  80185c:	f800283a 	ret
  801860:	0007883a 	mov	r3,zero
  801864:	003ff806 	br	801848 <udivmodsi4+0x50>
  801868:	00800044 	movi	r2,1
  80186c:	0007883a 	mov	r3,zero
  801870:	003fef06 	br	801830 <udivmodsi4+0x38>

00801874 <__divsi3>:
  801874:	defffe04 	addi	sp,sp,-8
  801878:	dc000015 	stw	r16,0(sp)
  80187c:	dfc00115 	stw	ra,4(sp)
  801880:	0021883a 	mov	r16,zero
  801884:	20000c16 	blt	r4,zero,8018b8 <__divsi3+0x44>
  801888:	000d883a 	mov	r6,zero
  80188c:	28000e16 	blt	r5,zero,8018c8 <__divsi3+0x54>
  801890:	08017f80 	call	8017f8 <udivmodsi4>
  801894:	1007883a 	mov	r3,r2
  801898:	8005003a 	cmpeq	r2,r16,zero
  80189c:	1000011e 	bne	r2,zero,8018a4 <__divsi3+0x30>
  8018a0:	00c7c83a 	sub	r3,zero,r3
  8018a4:	1805883a 	mov	r2,r3
  8018a8:	dfc00117 	ldw	ra,4(sp)
  8018ac:	dc000017 	ldw	r16,0(sp)
  8018b0:	dec00204 	addi	sp,sp,8
  8018b4:	f800283a 	ret
  8018b8:	0109c83a 	sub	r4,zero,r4
  8018bc:	04000044 	movi	r16,1
  8018c0:	000d883a 	mov	r6,zero
  8018c4:	283ff20e 	bge	r5,zero,801890 <__divsi3+0x1c>
  8018c8:	014bc83a 	sub	r5,zero,r5
  8018cc:	8021003a 	cmpeq	r16,r16,zero
  8018d0:	003fef06 	br	801890 <__divsi3+0x1c>

008018d4 <__modsi3>:
  8018d4:	deffff04 	addi	sp,sp,-4
  8018d8:	dfc00015 	stw	ra,0(sp)
  8018dc:	01800044 	movi	r6,1
  8018e0:	2807883a 	mov	r3,r5
  8018e4:	20000416 	blt	r4,zero,8018f8 <__modsi3+0x24>
  8018e8:	28000c16 	blt	r5,zero,80191c <__modsi3+0x48>
  8018ec:	dfc00017 	ldw	ra,0(sp)
  8018f0:	dec00104 	addi	sp,sp,4
  8018f4:	08017f81 	jmpi	8017f8 <udivmodsi4>
  8018f8:	0109c83a 	sub	r4,zero,r4
  8018fc:	28000b16 	blt	r5,zero,80192c <__modsi3+0x58>
  801900:	180b883a 	mov	r5,r3
  801904:	01800044 	movi	r6,1
  801908:	08017f80 	call	8017f8 <udivmodsi4>
  80190c:	0085c83a 	sub	r2,zero,r2
  801910:	dfc00017 	ldw	ra,0(sp)
  801914:	dec00104 	addi	sp,sp,4
  801918:	f800283a 	ret
  80191c:	014bc83a 	sub	r5,zero,r5
  801920:	dfc00017 	ldw	ra,0(sp)
  801924:	dec00104 	addi	sp,sp,4
  801928:	08017f81 	jmpi	8017f8 <udivmodsi4>
  80192c:	0147c83a 	sub	r3,zero,r5
  801930:	003ff306 	br	801900 <__modsi3+0x2c>

00801934 <__udivsi3>:
  801934:	000d883a 	mov	r6,zero
  801938:	08017f81 	jmpi	8017f8 <udivmodsi4>

0080193c <__umodsi3>:
  80193c:	01800044 	movi	r6,1
  801940:	08017f81 	jmpi	8017f8 <udivmodsi4>

00801944 <__mulsi3>:
  801944:	20000a26 	beq	r4,zero,801970 <__mulsi3+0x2c>
  801948:	0007883a 	mov	r3,zero
  80194c:	2080004c 	andi	r2,r4,1
  801950:	1005003a 	cmpeq	r2,r2,zero
  801954:	2008d07a 	srli	r4,r4,1
  801958:	1000011e 	bne	r2,zero,801960 <__mulsi3+0x1c>
  80195c:	1947883a 	add	r3,r3,r5
  801960:	294b883a 	add	r5,r5,r5
  801964:	203ff91e 	bne	r4,zero,80194c <__mulsi3+0x8>
  801968:	1805883a 	mov	r2,r3
  80196c:	f800283a 	ret
  801970:	0007883a 	mov	r3,zero
  801974:	1805883a 	mov	r2,r3
  801978:	f800283a 	ret

0080197c <__pack_d>:
  80197c:	20c00017 	ldw	r3,0(r4)
  801980:	defffd04 	addi	sp,sp,-12
  801984:	dc000015 	stw	r16,0(sp)
  801988:	dc800215 	stw	r18,8(sp)
  80198c:	dc400115 	stw	r17,4(sp)
  801990:	00800044 	movi	r2,1
  801994:	22000317 	ldw	r8,12(r4)
  801998:	001f883a 	mov	r15,zero
  80199c:	22400417 	ldw	r9,16(r4)
  8019a0:	24000117 	ldw	r16,4(r4)
  8019a4:	10c0552e 	bgeu	r2,r3,801afc <__pack_d+0x180>
  8019a8:	00800104 	movi	r2,4
  8019ac:	18804f26 	beq	r3,r2,801aec <__pack_d+0x170>
  8019b0:	00800084 	movi	r2,2
  8019b4:	18800226 	beq	r3,r2,8019c0 <__pack_d+0x44>
  8019b8:	4244b03a 	or	r2,r8,r9
  8019bc:	10001a1e 	bne	r2,zero,801a28 <__pack_d+0xac>
  8019c0:	000d883a 	mov	r6,zero
  8019c4:	000f883a 	mov	r7,zero
  8019c8:	0011883a 	mov	r8,zero
  8019cc:	00800434 	movhi	r2,16
  8019d0:	10bfffc4 	addi	r2,r2,-1
  8019d4:	301d883a 	mov	r14,r6
  8019d8:	3884703a 	and	r2,r7,r2
  8019dc:	400a953a 	slli	r5,r8,20
  8019e0:	79bffc2c 	andhi	r6,r15,65520
  8019e4:	308cb03a 	or	r6,r6,r2
  8019e8:	00e00434 	movhi	r3,32784
  8019ec:	18ffffc4 	addi	r3,r3,-1
  8019f0:	800497fa 	slli	r2,r16,31
  8019f4:	30c6703a 	and	r3,r6,r3
  8019f8:	1946b03a 	or	r3,r3,r5
  8019fc:	01600034 	movhi	r5,32768
  801a00:	297fffc4 	addi	r5,r5,-1
  801a04:	194a703a 	and	r5,r3,r5
  801a08:	288ab03a 	or	r5,r5,r2
  801a0c:	2807883a 	mov	r3,r5
  801a10:	7005883a 	mov	r2,r14
  801a14:	dc800217 	ldw	r18,8(sp)
  801a18:	dc400117 	ldw	r17,4(sp)
  801a1c:	dc000017 	ldw	r16,0(sp)
  801a20:	dec00304 	addi	sp,sp,12
  801a24:	f800283a 	ret
  801a28:	21000217 	ldw	r4,8(r4)
  801a2c:	00bf0084 	movi	r2,-1022
  801a30:	20803f16 	blt	r4,r2,801b30 <__pack_d+0x1b4>
  801a34:	0080ffc4 	movi	r2,1023
  801a38:	11002c16 	blt	r2,r4,801aec <__pack_d+0x170>
  801a3c:	00803fc4 	movi	r2,255
  801a40:	408c703a 	and	r6,r8,r2
  801a44:	00802004 	movi	r2,128
  801a48:	0007883a 	mov	r3,zero
  801a4c:	000f883a 	mov	r7,zero
  801a50:	2280ffc4 	addi	r10,r4,1023
  801a54:	30801e26 	beq	r6,r2,801ad0 <__pack_d+0x154>
  801a58:	00801fc4 	movi	r2,127
  801a5c:	4089883a 	add	r4,r8,r2
  801a60:	220d803a 	cmpltu	r6,r4,r8
  801a64:	324d883a 	add	r6,r6,r9
  801a68:	2011883a 	mov	r8,r4
  801a6c:	3013883a 	mov	r9,r6
  801a70:	00880034 	movhi	r2,8192
  801a74:	10bfffc4 	addi	r2,r2,-1
  801a78:	12400d36 	bltu	r2,r9,801ab0 <__pack_d+0x134>
  801a7c:	4804963a 	slli	r2,r9,24
  801a80:	400cd23a 	srli	r6,r8,8
  801a84:	480ed23a 	srli	r7,r9,8
  801a88:	013fffc4 	movi	r4,-1
  801a8c:	118cb03a 	or	r6,r2,r6
  801a90:	01400434 	movhi	r5,16
  801a94:	297fffc4 	addi	r5,r5,-1
  801a98:	3104703a 	and	r2,r6,r4
  801a9c:	3946703a 	and	r3,r7,r5
  801aa0:	5201ffcc 	andi	r8,r10,2047
  801aa4:	100d883a 	mov	r6,r2
  801aa8:	180f883a 	mov	r7,r3
  801aac:	003fc706 	br	8019cc <__pack_d+0x50>
  801ab0:	480897fa 	slli	r4,r9,31
  801ab4:	4004d07a 	srli	r2,r8,1
  801ab8:	4806d07a 	srli	r3,r9,1
  801abc:	52800044 	addi	r10,r10,1
  801ac0:	2084b03a 	or	r2,r4,r2
  801ac4:	1011883a 	mov	r8,r2
  801ac8:	1813883a 	mov	r9,r3
  801acc:	003feb06 	br	801a7c <__pack_d+0x100>
  801ad0:	383fe11e 	bne	r7,zero,801a58 <__pack_d+0xdc>
  801ad4:	01004004 	movi	r4,256
  801ad8:	4104703a 	and	r2,r8,r4
  801adc:	10c4b03a 	or	r2,r2,r3
  801ae0:	103fe326 	beq	r2,zero,801a70 <__pack_d+0xf4>
  801ae4:	3005883a 	mov	r2,r6
  801ae8:	003fdc06 	br	801a5c <__pack_d+0xe0>
  801aec:	000d883a 	mov	r6,zero
  801af0:	000f883a 	mov	r7,zero
  801af4:	0201ffc4 	movi	r8,2047
  801af8:	003fb406 	br	8019cc <__pack_d+0x50>
  801afc:	0005883a 	mov	r2,zero
  801b00:	00c00234 	movhi	r3,8
  801b04:	408cb03a 	or	r6,r8,r2
  801b08:	48ceb03a 	or	r7,r9,r3
  801b0c:	013fffc4 	movi	r4,-1
  801b10:	01400434 	movhi	r5,16
  801b14:	297fffc4 	addi	r5,r5,-1
  801b18:	3104703a 	and	r2,r6,r4
  801b1c:	3946703a 	and	r3,r7,r5
  801b20:	100d883a 	mov	r6,r2
  801b24:	180f883a 	mov	r7,r3
  801b28:	0201ffc4 	movi	r8,2047
  801b2c:	003fa706 	br	8019cc <__pack_d+0x50>
  801b30:	1109c83a 	sub	r4,r2,r4
  801b34:	00800e04 	movi	r2,56
  801b38:	11004316 	blt	r2,r4,801c48 <__pack_d+0x2cc>
  801b3c:	21fff804 	addi	r7,r4,-32
  801b40:	38004516 	blt	r7,zero,801c58 <__pack_d+0x2dc>
  801b44:	49d8d83a 	srl	r12,r9,r7
  801b48:	001b883a 	mov	r13,zero
  801b4c:	0023883a 	mov	r17,zero
  801b50:	01400044 	movi	r5,1
  801b54:	0025883a 	mov	r18,zero
  801b58:	38004716 	blt	r7,zero,801c78 <__pack_d+0x2fc>
  801b5c:	29d6983a 	sll	r11,r5,r7
  801b60:	0015883a 	mov	r10,zero
  801b64:	00bfffc4 	movi	r2,-1
  801b68:	5089883a 	add	r4,r10,r2
  801b6c:	588b883a 	add	r5,r11,r2
  801b70:	228d803a 	cmpltu	r6,r4,r10
  801b74:	314b883a 	add	r5,r6,r5
  801b78:	4104703a 	and	r2,r8,r4
  801b7c:	4946703a 	and	r3,r9,r5
  801b80:	10c4b03a 	or	r2,r2,r3
  801b84:	10000226 	beq	r2,zero,801b90 <__pack_d+0x214>
  801b88:	04400044 	movi	r17,1
  801b8c:	0025883a 	mov	r18,zero
  801b90:	00803fc4 	movi	r2,255
  801b94:	644eb03a 	or	r7,r12,r17
  801b98:	3892703a 	and	r9,r7,r2
  801b9c:	00802004 	movi	r2,128
  801ba0:	6c90b03a 	or	r8,r13,r18
  801ba4:	0015883a 	mov	r10,zero
  801ba8:	48801626 	beq	r9,r2,801c04 <__pack_d+0x288>
  801bac:	01001fc4 	movi	r4,127
  801bb0:	3905883a 	add	r2,r7,r4
  801bb4:	11cd803a 	cmpltu	r6,r2,r7
  801bb8:	320d883a 	add	r6,r6,r8
  801bbc:	100f883a 	mov	r7,r2
  801bc0:	00840034 	movhi	r2,4096
  801bc4:	10bfffc4 	addi	r2,r2,-1
  801bc8:	3011883a 	mov	r8,r6
  801bcc:	0007883a 	mov	r3,zero
  801bd0:	11801b36 	bltu	r2,r6,801c40 <__pack_d+0x2c4>
  801bd4:	4004963a 	slli	r2,r8,24
  801bd8:	3808d23a 	srli	r4,r7,8
  801bdc:	400ad23a 	srli	r5,r8,8
  801be0:	1813883a 	mov	r9,r3
  801be4:	1108b03a 	or	r4,r2,r4
  801be8:	00bfffc4 	movi	r2,-1
  801bec:	00c00434 	movhi	r3,16
  801bf0:	18ffffc4 	addi	r3,r3,-1
  801bf4:	208c703a 	and	r6,r4,r2
  801bf8:	28ce703a 	and	r7,r5,r3
  801bfc:	4a01ffcc 	andi	r8,r9,2047
  801c00:	003f7206 	br	8019cc <__pack_d+0x50>
  801c04:	503fe91e 	bne	r10,zero,801bac <__pack_d+0x230>
  801c08:	01004004 	movi	r4,256
  801c0c:	3904703a 	and	r2,r7,r4
  801c10:	0007883a 	mov	r3,zero
  801c14:	10c4b03a 	or	r2,r2,r3
  801c18:	10000626 	beq	r2,zero,801c34 <__pack_d+0x2b8>
  801c1c:	3a45883a 	add	r2,r7,r9
  801c20:	11cd803a 	cmpltu	r6,r2,r7
  801c24:	320d883a 	add	r6,r6,r8
  801c28:	100f883a 	mov	r7,r2
  801c2c:	3011883a 	mov	r8,r6
  801c30:	0007883a 	mov	r3,zero
  801c34:	00840034 	movhi	r2,4096
  801c38:	10bfffc4 	addi	r2,r2,-1
  801c3c:	123fe52e 	bgeu	r2,r8,801bd4 <__pack_d+0x258>
  801c40:	00c00044 	movi	r3,1
  801c44:	003fe306 	br	801bd4 <__pack_d+0x258>
  801c48:	0009883a 	mov	r4,zero
  801c4c:	0013883a 	mov	r9,zero
  801c50:	000b883a 	mov	r5,zero
  801c54:	003fe406 	br	801be8 <__pack_d+0x26c>
  801c58:	4a47883a 	add	r3,r9,r9
  801c5c:	008007c4 	movi	r2,31
  801c60:	1105c83a 	sub	r2,r2,r4
  801c64:	1886983a 	sll	r3,r3,r2
  801c68:	4118d83a 	srl	r12,r8,r4
  801c6c:	491ad83a 	srl	r13,r9,r4
  801c70:	1b18b03a 	or	r12,r3,r12
  801c74:	003fb506 	br	801b4c <__pack_d+0x1d0>
  801c78:	2806d07a 	srli	r3,r5,1
  801c7c:	008007c4 	movi	r2,31
  801c80:	1105c83a 	sub	r2,r2,r4
  801c84:	1896d83a 	srl	r11,r3,r2
  801c88:	2914983a 	sll	r10,r5,r4
  801c8c:	003fb506 	br	801b64 <__pack_d+0x1e8>

00801c90 <__unpack_d>:
  801c90:	20c00117 	ldw	r3,4(r4)
  801c94:	22400017 	ldw	r9,0(r4)
  801c98:	00800434 	movhi	r2,16
  801c9c:	10bfffc4 	addi	r2,r2,-1
  801ca0:	1808d53a 	srli	r4,r3,20
  801ca4:	180cd7fa 	srli	r6,r3,31
  801ca8:	1894703a 	and	r10,r3,r2
  801cac:	2201ffcc 	andi	r8,r4,2047
  801cb0:	281b883a 	mov	r13,r5
  801cb4:	4817883a 	mov	r11,r9
  801cb8:	29800115 	stw	r6,4(r5)
  801cbc:	5019883a 	mov	r12,r10
  801cc0:	40001e1e 	bne	r8,zero,801d3c <__unpack_d+0xac>
  801cc4:	4a84b03a 	or	r2,r9,r10
  801cc8:	10001926 	beq	r2,zero,801d30 <__unpack_d+0xa0>
  801ccc:	4804d63a 	srli	r2,r9,24
  801cd0:	500c923a 	slli	r6,r10,8
  801cd4:	013f0084 	movi	r4,-1022
  801cd8:	00c40034 	movhi	r3,4096
  801cdc:	18ffffc4 	addi	r3,r3,-1
  801ce0:	118cb03a 	or	r6,r2,r6
  801ce4:	008000c4 	movi	r2,3
  801ce8:	480a923a 	slli	r5,r9,8
  801cec:	68800015 	stw	r2,0(r13)
  801cf0:	69000215 	stw	r4,8(r13)
  801cf4:	19800b36 	bltu	r3,r6,801d24 <__unpack_d+0x94>
  801cf8:	200f883a 	mov	r7,r4
  801cfc:	1811883a 	mov	r8,r3
  801d00:	2945883a 	add	r2,r5,r5
  801d04:	1149803a 	cmpltu	r4,r2,r5
  801d08:	3187883a 	add	r3,r6,r6
  801d0c:	20c9883a 	add	r4,r4,r3
  801d10:	100b883a 	mov	r5,r2
  801d14:	200d883a 	mov	r6,r4
  801d18:	39ffffc4 	addi	r7,r7,-1
  801d1c:	413ff82e 	bgeu	r8,r4,801d00 <__unpack_d+0x70>
  801d20:	69c00215 	stw	r7,8(r13)
  801d24:	69800415 	stw	r6,16(r13)
  801d28:	69400315 	stw	r5,12(r13)
  801d2c:	f800283a 	ret
  801d30:	00800084 	movi	r2,2
  801d34:	28800015 	stw	r2,0(r5)
  801d38:	f800283a 	ret
  801d3c:	0081ffc4 	movi	r2,2047
  801d40:	40800f26 	beq	r8,r2,801d80 <__unpack_d+0xf0>
  801d44:	480cd63a 	srli	r6,r9,24
  801d48:	5006923a 	slli	r3,r10,8
  801d4c:	4804923a 	slli	r2,r9,8
  801d50:	0009883a 	mov	r4,zero
  801d54:	30c6b03a 	or	r3,r6,r3
  801d58:	01440034 	movhi	r5,4096
  801d5c:	110cb03a 	or	r6,r2,r4
  801d60:	423f0044 	addi	r8,r8,-1023
  801d64:	194eb03a 	or	r7,r3,r5
  801d68:	008000c4 	movi	r2,3
  801d6c:	69c00415 	stw	r7,16(r13)
  801d70:	6a000215 	stw	r8,8(r13)
  801d74:	68800015 	stw	r2,0(r13)
  801d78:	69800315 	stw	r6,12(r13)
  801d7c:	f800283a 	ret
  801d80:	4a84b03a 	or	r2,r9,r10
  801d84:	1000031e 	bne	r2,zero,801d94 <__unpack_d+0x104>
  801d88:	00800104 	movi	r2,4
  801d8c:	28800015 	stw	r2,0(r5)
  801d90:	f800283a 	ret
  801d94:	0009883a 	mov	r4,zero
  801d98:	01400234 	movhi	r5,8
  801d9c:	4904703a 	and	r2,r9,r4
  801da0:	5146703a 	and	r3,r10,r5
  801da4:	10c4b03a 	or	r2,r2,r3
  801da8:	10000526 	beq	r2,zero,801dc0 <__unpack_d+0x130>
  801dac:	00800044 	movi	r2,1
  801db0:	68800015 	stw	r2,0(r13)
  801db4:	6b000415 	stw	r12,16(r13)
  801db8:	6ac00315 	stw	r11,12(r13)
  801dbc:	f800283a 	ret
  801dc0:	68000015 	stw	zero,0(r13)
  801dc4:	003ffb06 	br	801db4 <__unpack_d+0x124>

00801dc8 <__fpcmp_parts_d>:
  801dc8:	21800017 	ldw	r6,0(r4)
  801dcc:	00c00044 	movi	r3,1
  801dd0:	19800a2e 	bgeu	r3,r6,801dfc <__fpcmp_parts_d+0x34>
  801dd4:	28800017 	ldw	r2,0(r5)
  801dd8:	1880082e 	bgeu	r3,r2,801dfc <__fpcmp_parts_d+0x34>
  801ddc:	00c00104 	movi	r3,4
  801de0:	30c02626 	beq	r6,r3,801e7c <__fpcmp_parts_d+0xb4>
  801de4:	10c02226 	beq	r2,r3,801e70 <__fpcmp_parts_d+0xa8>
  801de8:	00c00084 	movi	r3,2
  801dec:	30c00526 	beq	r6,r3,801e04 <__fpcmp_parts_d+0x3c>
  801df0:	10c0071e 	bne	r2,r3,801e10 <__fpcmp_parts_d+0x48>
  801df4:	20800117 	ldw	r2,4(r4)
  801df8:	1000091e 	bne	r2,zero,801e20 <__fpcmp_parts_d+0x58>
  801dfc:	00800044 	movi	r2,1
  801e00:	f800283a 	ret
  801e04:	10c01a1e 	bne	r2,r3,801e70 <__fpcmp_parts_d+0xa8>
  801e08:	0005883a 	mov	r2,zero
  801e0c:	f800283a 	ret
  801e10:	22000117 	ldw	r8,4(r4)
  801e14:	28800117 	ldw	r2,4(r5)
  801e18:	40800326 	beq	r8,r2,801e28 <__fpcmp_parts_d+0x60>
  801e1c:	403ff726 	beq	r8,zero,801dfc <__fpcmp_parts_d+0x34>
  801e20:	00bfffc4 	movi	r2,-1
  801e24:	f800283a 	ret
  801e28:	20c00217 	ldw	r3,8(r4)
  801e2c:	28800217 	ldw	r2,8(r5)
  801e30:	10fffa16 	blt	r2,r3,801e1c <__fpcmp_parts_d+0x54>
  801e34:	18800916 	blt	r3,r2,801e5c <__fpcmp_parts_d+0x94>
  801e38:	21c00417 	ldw	r7,16(r4)
  801e3c:	28c00417 	ldw	r3,16(r5)
  801e40:	21800317 	ldw	r6,12(r4)
  801e44:	28800317 	ldw	r2,12(r5)
  801e48:	19fff436 	bltu	r3,r7,801e1c <__fpcmp_parts_d+0x54>
  801e4c:	38c00526 	beq	r7,r3,801e64 <__fpcmp_parts_d+0x9c>
  801e50:	38c00236 	bltu	r7,r3,801e5c <__fpcmp_parts_d+0x94>
  801e54:	19ffec1e 	bne	r3,r7,801e08 <__fpcmp_parts_d+0x40>
  801e58:	30bfeb2e 	bgeu	r6,r2,801e08 <__fpcmp_parts_d+0x40>
  801e5c:	403fe71e 	bne	r8,zero,801dfc <__fpcmp_parts_d+0x34>
  801e60:	003fef06 	br	801e20 <__fpcmp_parts_d+0x58>
  801e64:	11bffa2e 	bgeu	r2,r6,801e50 <__fpcmp_parts_d+0x88>
  801e68:	403fe426 	beq	r8,zero,801dfc <__fpcmp_parts_d+0x34>
  801e6c:	003fec06 	br	801e20 <__fpcmp_parts_d+0x58>
  801e70:	28800117 	ldw	r2,4(r5)
  801e74:	103fe11e 	bne	r2,zero,801dfc <__fpcmp_parts_d+0x34>
  801e78:	003fe906 	br	801e20 <__fpcmp_parts_d+0x58>
  801e7c:	11bfdd1e 	bne	r2,r6,801df4 <__fpcmp_parts_d+0x2c>
  801e80:	28c00117 	ldw	r3,4(r5)
  801e84:	20800117 	ldw	r2,4(r4)
  801e88:	1885c83a 	sub	r2,r3,r2
  801e8c:	f800283a 	ret

00801e90 <__assert_func>:
  801e90:	008020b4 	movhi	r2,130
  801e94:	10a93c04 	addi	r2,r2,-23312
  801e98:	10c00017 	ldw	r3,0(r2)
  801e9c:	defffc04 	addi	sp,sp,-16
  801ea0:	2011883a 	mov	r8,r4
  801ea4:	dfc00315 	stw	ra,12(sp)
  801ea8:	3005883a 	mov	r2,r6
  801eac:	2813883a 	mov	r9,r5
  801eb0:	19000317 	ldw	r4,12(r3)
  801eb4:	30000b26 	beq	r6,zero,801ee4 <__assert_func+0x54>
  801eb8:	00c020b4 	movhi	r3,130
  801ebc:	18e17104 	addi	r3,r3,-31292
  801ec0:	380d883a 	mov	r6,r7
  801ec4:	014020b4 	movhi	r5,130
  801ec8:	29616504 	addi	r5,r5,-31340
  801ecc:	400f883a 	mov	r7,r8
  801ed0:	da400015 	stw	r9,0(sp)
  801ed4:	d8c00115 	stw	r3,4(sp)
  801ed8:	d8800215 	stw	r2,8(sp)
  801edc:	0801f080 	call	801f08 <fiprintf>
  801ee0:	08053a80 	call	8053a8 <abort>
  801ee4:	008020b4 	movhi	r2,130
  801ee8:	10a17404 	addi	r2,r2,-31280
  801eec:	1007883a 	mov	r3,r2
  801ef0:	003ff306 	br	801ec0 <__assert_func+0x30>

00801ef4 <__assert>:
  801ef4:	deffff04 	addi	sp,sp,-4
  801ef8:	300f883a 	mov	r7,r6
  801efc:	000d883a 	mov	r6,zero
  801f00:	dfc00015 	stw	ra,0(sp)
  801f04:	0801e900 	call	801e90 <__assert_func>

00801f08 <fiprintf>:
  801f08:	defffc04 	addi	sp,sp,-16
  801f0c:	2007883a 	mov	r3,r4
  801f10:	dfc00115 	stw	ra,4(sp)
  801f14:	d9800215 	stw	r6,8(sp)
  801f18:	d9c00315 	stw	r7,12(sp)
  801f1c:	018020b4 	movhi	r6,130
  801f20:	31a93c04 	addi	r6,r6,-23312
  801f24:	31000017 	ldw	r4,0(r6)
  801f28:	d8800204 	addi	r2,sp,8
  801f2c:	280d883a 	mov	r6,r5
  801f30:	100f883a 	mov	r7,r2
  801f34:	180b883a 	mov	r5,r3
  801f38:	d8800015 	stw	r2,0(sp)
  801f3c:	08033100 	call	803310 <_vfiprintf_r>
  801f40:	dfc00117 	ldw	ra,4(sp)
  801f44:	dec00404 	addi	sp,sp,16
  801f48:	f800283a 	ret

00801f4c <_fiprintf_r>:
  801f4c:	defffd04 	addi	sp,sp,-12
  801f50:	dfc00115 	stw	ra,4(sp)
  801f54:	d9c00215 	stw	r7,8(sp)
  801f58:	d8800204 	addi	r2,sp,8
  801f5c:	100f883a 	mov	r7,r2
  801f60:	d8800015 	stw	r2,0(sp)
  801f64:	08033100 	call	803310 <_vfiprintf_r>
  801f68:	dfc00117 	ldw	ra,4(sp)
  801f6c:	dec00304 	addi	sp,sp,12
  801f70:	f800283a 	ret

00801f74 <free>:
  801f74:	008020b4 	movhi	r2,130
  801f78:	10a93c04 	addi	r2,r2,-23312
  801f7c:	200b883a 	mov	r5,r4
  801f80:	11000017 	ldw	r4,0(r2)
  801f84:	08072081 	jmpi	807208 <_free_r>

00801f88 <malloc>:
  801f88:	008020b4 	movhi	r2,130
  801f8c:	10a93c04 	addi	r2,r2,-23312
  801f90:	200b883a 	mov	r5,r4
  801f94:	11000017 	ldw	r4,0(r2)
  801f98:	0801f9c1 	jmpi	801f9c <_malloc_r>

00801f9c <_malloc_r>:
  801f9c:	defff604 	addi	sp,sp,-40
  801fa0:	28c002c4 	addi	r3,r5,11
  801fa4:	00800584 	movi	r2,22
  801fa8:	dc800215 	stw	r18,8(sp)
  801fac:	dfc00915 	stw	ra,36(sp)
  801fb0:	df000815 	stw	fp,32(sp)
  801fb4:	ddc00715 	stw	r23,28(sp)
  801fb8:	dd800615 	stw	r22,24(sp)
  801fbc:	dd400515 	stw	r21,20(sp)
  801fc0:	dd000415 	stw	r20,16(sp)
  801fc4:	dcc00315 	stw	r19,12(sp)
  801fc8:	dc400115 	stw	r17,4(sp)
  801fcc:	dc000015 	stw	r16,0(sp)
  801fd0:	2025883a 	mov	r18,r4
  801fd4:	10c01236 	bltu	r2,r3,802020 <_malloc_r+0x84>
  801fd8:	04400404 	movi	r17,16
  801fdc:	8940142e 	bgeu	r17,r5,802030 <_malloc_r+0x94>
  801fe0:	00800304 	movi	r2,12
  801fe4:	0007883a 	mov	r3,zero
  801fe8:	90800015 	stw	r2,0(r18)
  801fec:	1805883a 	mov	r2,r3
  801ff0:	dfc00917 	ldw	ra,36(sp)
  801ff4:	df000817 	ldw	fp,32(sp)
  801ff8:	ddc00717 	ldw	r23,28(sp)
  801ffc:	dd800617 	ldw	r22,24(sp)
  802000:	dd400517 	ldw	r21,20(sp)
  802004:	dd000417 	ldw	r20,16(sp)
  802008:	dcc00317 	ldw	r19,12(sp)
  80200c:	dc800217 	ldw	r18,8(sp)
  802010:	dc400117 	ldw	r17,4(sp)
  802014:	dc000017 	ldw	r16,0(sp)
  802018:	dec00a04 	addi	sp,sp,40
  80201c:	f800283a 	ret
  802020:	00bffe04 	movi	r2,-8
  802024:	18a2703a 	and	r17,r3,r2
  802028:	883fed16 	blt	r17,zero,801fe0 <_malloc_r+0x44>
  80202c:	897fec36 	bltu	r17,r5,801fe0 <_malloc_r+0x44>
  802030:	9009883a 	mov	r4,r18
  802034:	080d1fc0 	call	80d1fc <__malloc_lock>
  802038:	00807dc4 	movi	r2,503
  80203c:	14402b2e 	bgeu	r2,r17,8020ec <_malloc_r+0x150>
  802040:	8806d27a 	srli	r3,r17,9
  802044:	18003f1e 	bne	r3,zero,802144 <_malloc_r+0x1a8>
  802048:	880cd0fa 	srli	r6,r17,3
  80204c:	300490fa 	slli	r2,r6,3
  802050:	02c020b4 	movhi	r11,130
  802054:	5ae39c04 	addi	r11,r11,-29072
  802058:	12cb883a 	add	r5,r2,r11
  80205c:	2c000317 	ldw	r16,12(r5)
  802060:	580f883a 	mov	r7,r11
  802064:	2c00041e 	bne	r5,r16,802078 <_malloc_r+0xdc>
  802068:	00000a06 	br	802094 <_malloc_r+0xf8>
  80206c:	1800860e 	bge	r3,zero,802288 <_malloc_r+0x2ec>
  802070:	84000317 	ldw	r16,12(r16)
  802074:	2c000726 	beq	r5,r16,802094 <_malloc_r+0xf8>
  802078:	80800117 	ldw	r2,4(r16)
  80207c:	00ffff04 	movi	r3,-4
  802080:	10c8703a 	and	r4,r2,r3
  802084:	2447c83a 	sub	r3,r4,r17
  802088:	008003c4 	movi	r2,15
  80208c:	10fff70e 	bge	r2,r3,80206c <_malloc_r+0xd0>
  802090:	31bfffc4 	addi	r6,r6,-1
  802094:	32400044 	addi	r9,r6,1
  802098:	028020b4 	movhi	r10,130
  80209c:	52a39e04 	addi	r10,r10,-29064
  8020a0:	54000217 	ldw	r16,8(r10)
  8020a4:	8280a026 	beq	r16,r10,802328 <_malloc_r+0x38c>
  8020a8:	80800117 	ldw	r2,4(r16)
  8020ac:	00ffff04 	movi	r3,-4
  8020b0:	10ca703a 	and	r5,r2,r3
  8020b4:	2c4dc83a 	sub	r6,r5,r17
  8020b8:	008003c4 	movi	r2,15
  8020bc:	11808316 	blt	r2,r6,8022cc <_malloc_r+0x330>
  8020c0:	52800315 	stw	r10,12(r10)
  8020c4:	52800215 	stw	r10,8(r10)
  8020c8:	30002916 	blt	r6,zero,802170 <_malloc_r+0x1d4>
  8020cc:	8147883a 	add	r3,r16,r5
  8020d0:	18800117 	ldw	r2,4(r3)
  8020d4:	9009883a 	mov	r4,r18
  8020d8:	10800054 	ori	r2,r2,1
  8020dc:	18800115 	stw	r2,4(r3)
  8020e0:	080d3040 	call	80d304 <__malloc_unlock>
  8020e4:	80c00204 	addi	r3,r16,8
  8020e8:	003fc006 	br	801fec <_malloc_r+0x50>
  8020ec:	02c020b4 	movhi	r11,130
  8020f0:	5ae39c04 	addi	r11,r11,-29072
  8020f4:	8ac5883a 	add	r2,r17,r11
  8020f8:	14000317 	ldw	r16,12(r2)
  8020fc:	580f883a 	mov	r7,r11
  802100:	8806d0fa 	srli	r3,r17,3
  802104:	14006c26 	beq	r2,r16,8022b8 <_malloc_r+0x31c>
  802108:	80c00117 	ldw	r3,4(r16)
  80210c:	00bfff04 	movi	r2,-4
  802110:	81800317 	ldw	r6,12(r16)
  802114:	1886703a 	and	r3,r3,r2
  802118:	80c7883a 	add	r3,r16,r3
  80211c:	18800117 	ldw	r2,4(r3)
  802120:	81400217 	ldw	r5,8(r16)
  802124:	9009883a 	mov	r4,r18
  802128:	10800054 	ori	r2,r2,1
  80212c:	18800115 	stw	r2,4(r3)
  802130:	31400215 	stw	r5,8(r6)
  802134:	29800315 	stw	r6,12(r5)
  802138:	080d3040 	call	80d304 <__malloc_unlock>
  80213c:	80c00204 	addi	r3,r16,8
  802140:	003faa06 	br	801fec <_malloc_r+0x50>
  802144:	00800104 	movi	r2,4
  802148:	10c0052e 	bgeu	r2,r3,802160 <_malloc_r+0x1c4>
  80214c:	00800504 	movi	r2,20
  802150:	10c07836 	bltu	r2,r3,802334 <_malloc_r+0x398>
  802154:	198016c4 	addi	r6,r3,91
  802158:	300490fa 	slli	r2,r6,3
  80215c:	003fbc06 	br	802050 <_malloc_r+0xb4>
  802160:	8804d1ba 	srli	r2,r17,6
  802164:	11800e04 	addi	r6,r2,56
  802168:	300490fa 	slli	r2,r6,3
  80216c:	003fb806 	br	802050 <_malloc_r+0xb4>
  802170:	00807fc4 	movi	r2,511
  802174:	1140bb36 	bltu	r2,r5,802464 <_malloc_r+0x4c8>
  802178:	2806d0fa 	srli	r3,r5,3
  80217c:	573ffe04 	addi	fp,r10,-8
  802180:	00800044 	movi	r2,1
  802184:	180890fa 	slli	r4,r3,3
  802188:	1807d0ba 	srai	r3,r3,2
  80218c:	e1c00117 	ldw	r7,4(fp)
  802190:	5909883a 	add	r4,r11,r4
  802194:	21400217 	ldw	r5,8(r4)
  802198:	10c4983a 	sll	r2,r2,r3
  80219c:	81000315 	stw	r4,12(r16)
  8021a0:	81400215 	stw	r5,8(r16)
  8021a4:	388eb03a 	or	r7,r7,r2
  8021a8:	2c000315 	stw	r16,12(r5)
  8021ac:	24000215 	stw	r16,8(r4)
  8021b0:	e1c00115 	stw	r7,4(fp)
  8021b4:	4807883a 	mov	r3,r9
  8021b8:	4800cd16 	blt	r9,zero,8024f0 <_malloc_r+0x554>
  8021bc:	1807d0ba 	srai	r3,r3,2
  8021c0:	00800044 	movi	r2,1
  8021c4:	10c8983a 	sll	r4,r2,r3
  8021c8:	39004436 	bltu	r7,r4,8022dc <_malloc_r+0x340>
  8021cc:	21c4703a 	and	r2,r4,r7
  8021d0:	10000a1e 	bne	r2,zero,8021fc <_malloc_r+0x260>
  8021d4:	2109883a 	add	r4,r4,r4
  8021d8:	00bfff04 	movi	r2,-4
  8021dc:	4884703a 	and	r2,r9,r2
  8021e0:	3906703a 	and	r3,r7,r4
  8021e4:	12400104 	addi	r9,r2,4
  8021e8:	1800041e 	bne	r3,zero,8021fc <_malloc_r+0x260>
  8021ec:	2109883a 	add	r4,r4,r4
  8021f0:	3904703a 	and	r2,r7,r4
  8021f4:	4a400104 	addi	r9,r9,4
  8021f8:	103ffc26 	beq	r2,zero,8021ec <_malloc_r+0x250>
  8021fc:	480490fa 	slli	r2,r9,3
  802200:	4819883a 	mov	r12,r9
  802204:	023fff04 	movi	r8,-4
  802208:	589b883a 	add	r13,r11,r2
  80220c:	6807883a 	mov	r3,r13
  802210:	014003c4 	movi	r5,15
  802214:	1c000317 	ldw	r16,12(r3)
  802218:	1c00041e 	bne	r3,r16,80222c <_malloc_r+0x290>
  80221c:	0000a706 	br	8024bc <_malloc_r+0x520>
  802220:	3000ab0e 	bge	r6,zero,8024d0 <_malloc_r+0x534>
  802224:	84000317 	ldw	r16,12(r16)
  802228:	1c00a426 	beq	r3,r16,8024bc <_malloc_r+0x520>
  80222c:	80800117 	ldw	r2,4(r16)
  802230:	1204703a 	and	r2,r2,r8
  802234:	144dc83a 	sub	r6,r2,r17
  802238:	29bff90e 	bge	r5,r6,802220 <_malloc_r+0x284>
  80223c:	81000317 	ldw	r4,12(r16)
  802240:	80c00217 	ldw	r3,8(r16)
  802244:	89400054 	ori	r5,r17,1
  802248:	8445883a 	add	r2,r16,r17
  80224c:	20c00215 	stw	r3,8(r4)
  802250:	19000315 	stw	r4,12(r3)
  802254:	81400115 	stw	r5,4(r16)
  802258:	1187883a 	add	r3,r2,r6
  80225c:	31000054 	ori	r4,r6,1
  802260:	50800315 	stw	r2,12(r10)
  802264:	50800215 	stw	r2,8(r10)
  802268:	19800015 	stw	r6,0(r3)
  80226c:	11000115 	stw	r4,4(r2)
  802270:	12800215 	stw	r10,8(r2)
  802274:	12800315 	stw	r10,12(r2)
  802278:	9009883a 	mov	r4,r18
  80227c:	080d3040 	call	80d304 <__malloc_unlock>
  802280:	80c00204 	addi	r3,r16,8
  802284:	003f5906 	br	801fec <_malloc_r+0x50>
  802288:	8109883a 	add	r4,r16,r4
  80228c:	20800117 	ldw	r2,4(r4)
  802290:	80c00217 	ldw	r3,8(r16)
  802294:	81400317 	ldw	r5,12(r16)
  802298:	10800054 	ori	r2,r2,1
  80229c:	20800115 	stw	r2,4(r4)
  8022a0:	28c00215 	stw	r3,8(r5)
  8022a4:	19400315 	stw	r5,12(r3)
  8022a8:	9009883a 	mov	r4,r18
  8022ac:	080d3040 	call	80d304 <__malloc_unlock>
  8022b0:	80c00204 	addi	r3,r16,8
  8022b4:	003f4d06 	br	801fec <_malloc_r+0x50>
  8022b8:	80800204 	addi	r2,r16,8
  8022bc:	14000317 	ldw	r16,12(r2)
  8022c0:	143f911e 	bne	r2,r16,802108 <_malloc_r+0x16c>
  8022c4:	1a400084 	addi	r9,r3,2
  8022c8:	003f7306 	br	802098 <_malloc_r+0xfc>
  8022cc:	88c00054 	ori	r3,r17,1
  8022d0:	8445883a 	add	r2,r16,r17
  8022d4:	80c00115 	stw	r3,4(r16)
  8022d8:	003fdf06 	br	802258 <_malloc_r+0x2bc>
  8022dc:	e4000217 	ldw	r16,8(fp)
  8022e0:	00bfff04 	movi	r2,-4
  8022e4:	80c00117 	ldw	r3,4(r16)
  8022e8:	802d883a 	mov	r22,r16
  8022ec:	18aa703a 	and	r21,r3,r2
  8022f0:	ac401636 	bltu	r21,r17,80234c <_malloc_r+0x3b0>
  8022f4:	ac49c83a 	sub	r4,r21,r17
  8022f8:	008003c4 	movi	r2,15
  8022fc:	1100130e 	bge	r2,r4,80234c <_malloc_r+0x3b0>
  802300:	88800054 	ori	r2,r17,1
  802304:	8447883a 	add	r3,r16,r17
  802308:	80800115 	stw	r2,4(r16)
  80230c:	20800054 	ori	r2,r4,1
  802310:	18800115 	stw	r2,4(r3)
  802314:	e0c00215 	stw	r3,8(fp)
  802318:	9009883a 	mov	r4,r18
  80231c:	080d3040 	call	80d304 <__malloc_unlock>
  802320:	80c00204 	addi	r3,r16,8
  802324:	003f3106 	br	801fec <_malloc_r+0x50>
  802328:	39c00117 	ldw	r7,4(r7)
  80232c:	573ffe04 	addi	fp,r10,-8
  802330:	003fa006 	br	8021b4 <_malloc_r+0x218>
  802334:	00801504 	movi	r2,84
  802338:	10c06736 	bltu	r2,r3,8024d8 <_malloc_r+0x53c>
  80233c:	8804d33a 	srli	r2,r17,12
  802340:	11801b84 	addi	r6,r2,110
  802344:	300490fa 	slli	r2,r6,3
  802348:	003f4106 	br	802050 <_malloc_r+0xb4>
  80234c:	d0a03017 	ldw	r2,-32576(gp)
  802350:	d0e00317 	ldw	r3,-32756(gp)
  802354:	053fffc4 	movi	r20,-1
  802358:	10800404 	addi	r2,r2,16
  80235c:	88a7883a 	add	r19,r17,r2
  802360:	1d000326 	beq	r3,r20,802370 <_malloc_r+0x3d4>
  802364:	98c3ffc4 	addi	r3,r19,4095
  802368:	00bc0004 	movi	r2,-4096
  80236c:	18a6703a 	and	r19,r3,r2
  802370:	9009883a 	mov	r4,r18
  802374:	980b883a 	mov	r5,r19
  802378:	0802f040 	call	802f04 <_sbrk_r>
  80237c:	1009883a 	mov	r4,r2
  802380:	15000426 	beq	r2,r20,802394 <_malloc_r+0x3f8>
  802384:	854b883a 	add	r5,r16,r21
  802388:	1029883a 	mov	r20,r2
  80238c:	11405a2e 	bgeu	r2,r5,8024f8 <_malloc_r+0x55c>
  802390:	87000c26 	beq	r16,fp,8023c4 <_malloc_r+0x428>
  802394:	e4000217 	ldw	r16,8(fp)
  802398:	80c00117 	ldw	r3,4(r16)
  80239c:	00bfff04 	movi	r2,-4
  8023a0:	1884703a 	and	r2,r3,r2
  8023a4:	14400336 	bltu	r2,r17,8023b4 <_malloc_r+0x418>
  8023a8:	1449c83a 	sub	r4,r2,r17
  8023ac:	008003c4 	movi	r2,15
  8023b0:	113fd316 	blt	r2,r4,802300 <_malloc_r+0x364>
  8023b4:	9009883a 	mov	r4,r18
  8023b8:	080d3040 	call	80d304 <__malloc_unlock>
  8023bc:	0007883a 	mov	r3,zero
  8023c0:	003f0a06 	br	801fec <_malloc_r+0x50>
  8023c4:	05c020b4 	movhi	r23,130
  8023c8:	bde99204 	addi	r23,r23,-22968
  8023cc:	b8800017 	ldw	r2,0(r23)
  8023d0:	988d883a 	add	r6,r19,r2
  8023d4:	b9800015 	stw	r6,0(r23)
  8023d8:	d0e00317 	ldw	r3,-32756(gp)
  8023dc:	00bfffc4 	movi	r2,-1
  8023e0:	18808e26 	beq	r3,r2,80261c <_malloc_r+0x680>
  8023e4:	2145c83a 	sub	r2,r4,r5
  8023e8:	3085883a 	add	r2,r6,r2
  8023ec:	b8800015 	stw	r2,0(r23)
  8023f0:	20c001cc 	andi	r3,r4,7
  8023f4:	18005f1e 	bne	r3,zero,802574 <_malloc_r+0x5d8>
  8023f8:	000b883a 	mov	r5,zero
  8023fc:	a4c5883a 	add	r2,r20,r19
  802400:	1083ffcc 	andi	r2,r2,4095
  802404:	00c40004 	movi	r3,4096
  802408:	1887c83a 	sub	r3,r3,r2
  80240c:	28e7883a 	add	r19,r5,r3
  802410:	9009883a 	mov	r4,r18
  802414:	980b883a 	mov	r5,r19
  802418:	0802f040 	call	802f04 <_sbrk_r>
  80241c:	1007883a 	mov	r3,r2
  802420:	00bfffc4 	movi	r2,-1
  802424:	18807a26 	beq	r3,r2,802610 <_malloc_r+0x674>
  802428:	1d05c83a 	sub	r2,r3,r20
  80242c:	9885883a 	add	r2,r19,r2
  802430:	10c00054 	ori	r3,r2,1
  802434:	b8800017 	ldw	r2,0(r23)
  802438:	a021883a 	mov	r16,r20
  80243c:	a0c00115 	stw	r3,4(r20)
  802440:	9885883a 	add	r2,r19,r2
  802444:	b8800015 	stw	r2,0(r23)
  802448:	e5000215 	stw	r20,8(fp)
  80244c:	b7003626 	beq	r22,fp,802528 <_malloc_r+0x58c>
  802450:	018003c4 	movi	r6,15
  802454:	35404b36 	bltu	r6,r21,802584 <_malloc_r+0x5e8>
  802458:	00800044 	movi	r2,1
  80245c:	a0800115 	stw	r2,4(r20)
  802460:	003fcd06 	br	802398 <_malloc_r+0x3fc>
  802464:	2808d27a 	srli	r4,r5,9
  802468:	2000371e 	bne	r4,zero,802548 <_malloc_r+0x5ac>
  80246c:	2808d0fa 	srli	r4,r5,3
  802470:	200690fa 	slli	r3,r4,3
  802474:	1ad1883a 	add	r8,r3,r11
  802478:	41800217 	ldw	r6,8(r8)
  80247c:	41805b26 	beq	r8,r6,8025ec <_malloc_r+0x650>
  802480:	30800117 	ldw	r2,4(r6)
  802484:	00ffff04 	movi	r3,-4
  802488:	10c4703a 	and	r2,r2,r3
  80248c:	2880022e 	bgeu	r5,r2,802498 <_malloc_r+0x4fc>
  802490:	31800217 	ldw	r6,8(r6)
  802494:	41bffa1e 	bne	r8,r6,802480 <_malloc_r+0x4e4>
  802498:	32000317 	ldw	r8,12(r6)
  80249c:	39c00117 	ldw	r7,4(r7)
  8024a0:	82000315 	stw	r8,12(r16)
  8024a4:	81800215 	stw	r6,8(r16)
  8024a8:	070020b4 	movhi	fp,130
  8024ac:	e7239c04 	addi	fp,fp,-29072
  8024b0:	34000315 	stw	r16,12(r6)
  8024b4:	44000215 	stw	r16,8(r8)
  8024b8:	003f3e06 	br	8021b4 <_malloc_r+0x218>
  8024bc:	63000044 	addi	r12,r12,1
  8024c0:	608000cc 	andi	r2,r12,3
  8024c4:	10005d26 	beq	r2,zero,80263c <_malloc_r+0x6a0>
  8024c8:	18c00204 	addi	r3,r3,8
  8024cc:	003f5106 	br	802214 <_malloc_r+0x278>
  8024d0:	8089883a 	add	r4,r16,r2
  8024d4:	003f6d06 	br	80228c <_malloc_r+0x2f0>
  8024d8:	00805504 	movi	r2,340
  8024dc:	10c02036 	bltu	r2,r3,802560 <_malloc_r+0x5c4>
  8024e0:	8804d3fa 	srli	r2,r17,15
  8024e4:	11801dc4 	addi	r6,r2,119
  8024e8:	300490fa 	slli	r2,r6,3
  8024ec:	003ed806 	br	802050 <_malloc_r+0xb4>
  8024f0:	48c000c4 	addi	r3,r9,3
  8024f4:	003f3106 	br	8021bc <_malloc_r+0x220>
  8024f8:	05c020b4 	movhi	r23,130
  8024fc:	bde99204 	addi	r23,r23,-22968
  802500:	b8800017 	ldw	r2,0(r23)
  802504:	988d883a 	add	r6,r19,r2
  802508:	b9800015 	stw	r6,0(r23)
  80250c:	293fb21e 	bne	r5,r4,8023d8 <_malloc_r+0x43c>
  802510:	2083ffcc 	andi	r2,r4,4095
  802514:	103fb01e 	bne	r2,zero,8023d8 <_malloc_r+0x43c>
  802518:	e4000217 	ldw	r16,8(fp)
  80251c:	9d45883a 	add	r2,r19,r21
  802520:	10800054 	ori	r2,r2,1
  802524:	80800115 	stw	r2,4(r16)
  802528:	b8c00017 	ldw	r3,0(r23)
  80252c:	d0a03117 	ldw	r2,-32572(gp)
  802530:	10c0012e 	bgeu	r2,r3,802538 <_malloc_r+0x59c>
  802534:	d0e03115 	stw	r3,-32572(gp)
  802538:	d0a03217 	ldw	r2,-32568(gp)
  80253c:	10ff962e 	bgeu	r2,r3,802398 <_malloc_r+0x3fc>
  802540:	d0e03215 	stw	r3,-32568(gp)
  802544:	003f9406 	br	802398 <_malloc_r+0x3fc>
  802548:	00800104 	movi	r2,4
  80254c:	11001e36 	bltu	r2,r4,8025c8 <_malloc_r+0x62c>
  802550:	2804d1ba 	srli	r2,r5,6
  802554:	11000e04 	addi	r4,r2,56
  802558:	200690fa 	slli	r3,r4,3
  80255c:	003fc506 	br	802474 <_malloc_r+0x4d8>
  802560:	00815504 	movi	r2,1364
  802564:	10c01d2e 	bgeu	r2,r3,8025dc <_malloc_r+0x640>
  802568:	01801f84 	movi	r6,126
  80256c:	0080fc04 	movi	r2,1008
  802570:	003eb706 	br	802050 <_malloc_r+0xb4>
  802574:	00800204 	movi	r2,8
  802578:	10cbc83a 	sub	r5,r2,r3
  80257c:	2169883a 	add	r20,r4,r5
  802580:	003f9e06 	br	8023fc <_malloc_r+0x460>
  802584:	00bffe04 	movi	r2,-8
  802588:	a93ffd04 	addi	r4,r21,-12
  80258c:	2088703a 	and	r4,r4,r2
  802590:	b10b883a 	add	r5,r22,r4
  802594:	00c00144 	movi	r3,5
  802598:	28c00215 	stw	r3,8(r5)
  80259c:	28c00115 	stw	r3,4(r5)
  8025a0:	b0800117 	ldw	r2,4(r22)
  8025a4:	1080004c 	andi	r2,r2,1
  8025a8:	2084b03a 	or	r2,r4,r2
  8025ac:	b0800115 	stw	r2,4(r22)
  8025b0:	313fdd2e 	bgeu	r6,r4,802528 <_malloc_r+0x58c>
  8025b4:	b1400204 	addi	r5,r22,8
  8025b8:	9009883a 	mov	r4,r18
  8025bc:	08072080 	call	807208 <_free_r>
  8025c0:	e4000217 	ldw	r16,8(fp)
  8025c4:	003fd806 	br	802528 <_malloc_r+0x58c>
  8025c8:	00800504 	movi	r2,20
  8025cc:	11001536 	bltu	r2,r4,802624 <_malloc_r+0x688>
  8025d0:	210016c4 	addi	r4,r4,91
  8025d4:	200690fa 	slli	r3,r4,3
  8025d8:	003fa606 	br	802474 <_malloc_r+0x4d8>
  8025dc:	8804d4ba 	srli	r2,r17,18
  8025e0:	11801f04 	addi	r6,r2,124
  8025e4:	300490fa 	slli	r2,r6,3
  8025e8:	003e9906 	br	802050 <_malloc_r+0xb4>
  8025ec:	2009d0ba 	srai	r4,r4,2
  8025f0:	014020b4 	movhi	r5,130
  8025f4:	29639c04 	addi	r5,r5,-29072
  8025f8:	00c00044 	movi	r3,1
  8025fc:	28800117 	ldw	r2,4(r5)
  802600:	1906983a 	sll	r3,r3,r4
  802604:	10c4b03a 	or	r2,r2,r3
  802608:	28800115 	stw	r2,4(r5)
  80260c:	003fa306 	br	80249c <_malloc_r+0x500>
  802610:	0027883a 	mov	r19,zero
  802614:	00c00044 	movi	r3,1
  802618:	003f8606 	br	802434 <_malloc_r+0x498>
  80261c:	d1200315 	stw	r4,-32756(gp)
  802620:	003f7306 	br	8023f0 <_malloc_r+0x454>
  802624:	00801504 	movi	r2,84
  802628:	11001936 	bltu	r2,r4,802690 <_malloc_r+0x6f4>
  80262c:	2804d33a 	srli	r2,r5,12
  802630:	11001b84 	addi	r4,r2,110
  802634:	200690fa 	slli	r3,r4,3
  802638:	003f8e06 	br	802474 <_malloc_r+0x4d8>
  80263c:	480b883a 	mov	r5,r9
  802640:	6807883a 	mov	r3,r13
  802644:	288000cc 	andi	r2,r5,3
  802648:	18fffe04 	addi	r3,r3,-8
  80264c:	297fffc4 	addi	r5,r5,-1
  802650:	10001526 	beq	r2,zero,8026a8 <_malloc_r+0x70c>
  802654:	18800217 	ldw	r2,8(r3)
  802658:	10fffa26 	beq	r2,r3,802644 <_malloc_r+0x6a8>
  80265c:	2109883a 	add	r4,r4,r4
  802660:	393f1e36 	bltu	r7,r4,8022dc <_malloc_r+0x340>
  802664:	203f1d26 	beq	r4,zero,8022dc <_malloc_r+0x340>
  802668:	21c4703a 	and	r2,r4,r7
  80266c:	10000226 	beq	r2,zero,802678 <_malloc_r+0x6dc>
  802670:	6013883a 	mov	r9,r12
  802674:	003ee106 	br	8021fc <_malloc_r+0x260>
  802678:	2109883a 	add	r4,r4,r4
  80267c:	3904703a 	and	r2,r7,r4
  802680:	63000104 	addi	r12,r12,4
  802684:	103ffc26 	beq	r2,zero,802678 <_malloc_r+0x6dc>
  802688:	6013883a 	mov	r9,r12
  80268c:	003edb06 	br	8021fc <_malloc_r+0x260>
  802690:	00805504 	movi	r2,340
  802694:	11000836 	bltu	r2,r4,8026b8 <_malloc_r+0x71c>
  802698:	2804d3fa 	srli	r2,r5,15
  80269c:	11001dc4 	addi	r4,r2,119
  8026a0:	200690fa 	slli	r3,r4,3
  8026a4:	003f7306 	br	802474 <_malloc_r+0x4d8>
  8026a8:	0104303a 	nor	r2,zero,r4
  8026ac:	388e703a 	and	r7,r7,r2
  8026b0:	e1c00115 	stw	r7,4(fp)
  8026b4:	003fe906 	br	80265c <_malloc_r+0x6c0>
  8026b8:	00815504 	movi	r2,1364
  8026bc:	1100032e 	bgeu	r2,r4,8026cc <_malloc_r+0x730>
  8026c0:	01001f84 	movi	r4,126
  8026c4:	00c0fc04 	movi	r3,1008
  8026c8:	003f6a06 	br	802474 <_malloc_r+0x4d8>
  8026cc:	2804d4ba 	srli	r2,r5,18
  8026d0:	11001f04 	addi	r4,r2,124
  8026d4:	200690fa 	slli	r3,r4,3
  8026d8:	003f6606 	br	802474 <_malloc_r+0x4d8>

008026dc <memcpy>:
  8026dc:	01c003c4 	movi	r7,15
  8026e0:	2007883a 	mov	r3,r4
  8026e4:	3980032e 	bgeu	r7,r6,8026f4 <memcpy+0x18>
  8026e8:	2904b03a 	or	r2,r5,r4
  8026ec:	108000cc 	andi	r2,r2,3
  8026f0:	10000926 	beq	r2,zero,802718 <memcpy+0x3c>
  8026f4:	30000626 	beq	r6,zero,802710 <memcpy+0x34>
  8026f8:	30cd883a 	add	r6,r6,r3
  8026fc:	28800003 	ldbu	r2,0(r5)
  802700:	29400044 	addi	r5,r5,1
  802704:	18800005 	stb	r2,0(r3)
  802708:	18c00044 	addi	r3,r3,1
  80270c:	30fffb1e 	bne	r6,r3,8026fc <memcpy+0x20>
  802710:	2005883a 	mov	r2,r4
  802714:	f800283a 	ret
  802718:	3811883a 	mov	r8,r7
  80271c:	200f883a 	mov	r7,r4
  802720:	28c00017 	ldw	r3,0(r5)
  802724:	31bffc04 	addi	r6,r6,-16
  802728:	38c00015 	stw	r3,0(r7)
  80272c:	28800117 	ldw	r2,4(r5)
  802730:	38800115 	stw	r2,4(r7)
  802734:	28c00217 	ldw	r3,8(r5)
  802738:	38c00215 	stw	r3,8(r7)
  80273c:	28800317 	ldw	r2,12(r5)
  802740:	29400404 	addi	r5,r5,16
  802744:	38800315 	stw	r2,12(r7)
  802748:	39c00404 	addi	r7,r7,16
  80274c:	41bff436 	bltu	r8,r6,802720 <memcpy+0x44>
  802750:	008000c4 	movi	r2,3
  802754:	1180072e 	bgeu	r2,r6,802774 <memcpy+0x98>
  802758:	1007883a 	mov	r3,r2
  80275c:	28800017 	ldw	r2,0(r5)
  802760:	31bfff04 	addi	r6,r6,-4
  802764:	29400104 	addi	r5,r5,4
  802768:	38800015 	stw	r2,0(r7)
  80276c:	39c00104 	addi	r7,r7,4
  802770:	19bffa36 	bltu	r3,r6,80275c <memcpy+0x80>
  802774:	3807883a 	mov	r3,r7
  802778:	003fde06 	br	8026f4 <memcpy+0x18>

0080277c <memmove>:
  80277c:	2807883a 	mov	r3,r5
  802780:	2011883a 	mov	r8,r4
  802784:	29000c2e 	bgeu	r5,r4,8027b8 <memmove+0x3c>
  802788:	298f883a 	add	r7,r5,r6
  80278c:	21c00a2e 	bgeu	r4,r7,8027b8 <memmove+0x3c>
  802790:	30000726 	beq	r6,zero,8027b0 <memmove+0x34>
  802794:	2187883a 	add	r3,r4,r6
  802798:	198dc83a 	sub	r6,r3,r6
  80279c:	39ffffc4 	addi	r7,r7,-1
  8027a0:	38800003 	ldbu	r2,0(r7)
  8027a4:	18ffffc4 	addi	r3,r3,-1
  8027a8:	18800005 	stb	r2,0(r3)
  8027ac:	19bffb1e 	bne	r3,r6,80279c <memmove+0x20>
  8027b0:	2005883a 	mov	r2,r4
  8027b4:	f800283a 	ret
  8027b8:	01c003c4 	movi	r7,15
  8027bc:	39800a36 	bltu	r7,r6,8027e8 <memmove+0x6c>
  8027c0:	303ffb26 	beq	r6,zero,8027b0 <memmove+0x34>
  8027c4:	400f883a 	mov	r7,r8
  8027c8:	320d883a 	add	r6,r6,r8
  8027cc:	28800003 	ldbu	r2,0(r5)
  8027d0:	29400044 	addi	r5,r5,1
  8027d4:	38800005 	stb	r2,0(r7)
  8027d8:	39c00044 	addi	r7,r7,1
  8027dc:	39bffb1e 	bne	r7,r6,8027cc <memmove+0x50>
  8027e0:	2005883a 	mov	r2,r4
  8027e4:	f800283a 	ret
  8027e8:	1904b03a 	or	r2,r3,r4
  8027ec:	108000cc 	andi	r2,r2,3
  8027f0:	103ff31e 	bne	r2,zero,8027c0 <memmove+0x44>
  8027f4:	3811883a 	mov	r8,r7
  8027f8:	180b883a 	mov	r5,r3
  8027fc:	200f883a 	mov	r7,r4
  802800:	28c00017 	ldw	r3,0(r5)
  802804:	31bffc04 	addi	r6,r6,-16
  802808:	38c00015 	stw	r3,0(r7)
  80280c:	28800117 	ldw	r2,4(r5)
  802810:	38800115 	stw	r2,4(r7)
  802814:	28c00217 	ldw	r3,8(r5)
  802818:	38c00215 	stw	r3,8(r7)
  80281c:	28800317 	ldw	r2,12(r5)
  802820:	29400404 	addi	r5,r5,16
  802824:	38800315 	stw	r2,12(r7)
  802828:	39c00404 	addi	r7,r7,16
  80282c:	41bff436 	bltu	r8,r6,802800 <memmove+0x84>
  802830:	008000c4 	movi	r2,3
  802834:	1180072e 	bgeu	r2,r6,802854 <memmove+0xd8>
  802838:	1007883a 	mov	r3,r2
  80283c:	28800017 	ldw	r2,0(r5)
  802840:	31bfff04 	addi	r6,r6,-4
  802844:	29400104 	addi	r5,r5,4
  802848:	38800015 	stw	r2,0(r7)
  80284c:	39c00104 	addi	r7,r7,4
  802850:	19bffa36 	bltu	r3,r6,80283c <memmove+0xc0>
  802854:	3811883a 	mov	r8,r7
  802858:	003fd906 	br	8027c0 <memmove+0x44>

0080285c <memset>:
  80285c:	008000c4 	movi	r2,3
  802860:	29403fcc 	andi	r5,r5,255
  802864:	2007883a 	mov	r3,r4
  802868:	1180022e 	bgeu	r2,r6,802874 <memset+0x18>
  80286c:	2084703a 	and	r2,r4,r2
  802870:	10000826 	beq	r2,zero,802894 <memset+0x38>
  802874:	30000526 	beq	r6,zero,80288c <memset+0x30>
  802878:	2805883a 	mov	r2,r5
  80287c:	30cd883a 	add	r6,r6,r3
  802880:	18800005 	stb	r2,0(r3)
  802884:	18c00044 	addi	r3,r3,1
  802888:	19bffd1e 	bne	r3,r6,802880 <memset+0x24>
  80288c:	2005883a 	mov	r2,r4
  802890:	f800283a 	ret
  802894:	2804923a 	slli	r2,r5,8
  802898:	020003c4 	movi	r8,15
  80289c:	200f883a 	mov	r7,r4
  8028a0:	2884b03a 	or	r2,r5,r2
  8028a4:	1006943a 	slli	r3,r2,16
  8028a8:	10c6b03a 	or	r3,r2,r3
  8028ac:	41800a2e 	bgeu	r8,r6,8028d8 <memset+0x7c>
  8028b0:	4005883a 	mov	r2,r8
  8028b4:	31bffc04 	addi	r6,r6,-16
  8028b8:	38c00015 	stw	r3,0(r7)
  8028bc:	38c00115 	stw	r3,4(r7)
  8028c0:	38c00215 	stw	r3,8(r7)
  8028c4:	38c00315 	stw	r3,12(r7)
  8028c8:	39c00404 	addi	r7,r7,16
  8028cc:	11bff936 	bltu	r2,r6,8028b4 <memset+0x58>
  8028d0:	008000c4 	movi	r2,3
  8028d4:	1180052e 	bgeu	r2,r6,8028ec <memset+0x90>
  8028d8:	31bfff04 	addi	r6,r6,-4
  8028dc:	008000c4 	movi	r2,3
  8028e0:	38c00015 	stw	r3,0(r7)
  8028e4:	39c00104 	addi	r7,r7,4
  8028e8:	11bffb36 	bltu	r2,r6,8028d8 <memset+0x7c>
  8028ec:	3807883a 	mov	r3,r7
  8028f0:	003fe006 	br	802874 <memset+0x18>

008028f4 <realloc>:
  8028f4:	018020b4 	movhi	r6,130
  8028f8:	31a93c04 	addi	r6,r6,-23312
  8028fc:	2007883a 	mov	r3,r4
  802900:	31000017 	ldw	r4,0(r6)
  802904:	280d883a 	mov	r6,r5
  802908:	180b883a 	mov	r5,r3
  80290c:	08029101 	jmpi	802910 <_realloc_r>

00802910 <_realloc_r>:
  802910:	defff404 	addi	sp,sp,-48
  802914:	dd800815 	stw	r22,32(sp)
  802918:	dc800415 	stw	r18,16(sp)
  80291c:	dc400315 	stw	r17,12(sp)
  802920:	dfc00b15 	stw	ra,44(sp)
  802924:	df000a15 	stw	fp,40(sp)
  802928:	ddc00915 	stw	r23,36(sp)
  80292c:	dd400715 	stw	r21,28(sp)
  802930:	dd000615 	stw	r20,24(sp)
  802934:	dcc00515 	stw	r19,20(sp)
  802938:	dc000215 	stw	r16,8(sp)
  80293c:	2825883a 	mov	r18,r5
  802940:	3023883a 	mov	r17,r6
  802944:	202d883a 	mov	r22,r4
  802948:	2800c926 	beq	r5,zero,802c70 <_realloc_r+0x360>
  80294c:	080d1fc0 	call	80d1fc <__malloc_lock>
  802950:	943ffe04 	addi	r16,r18,-8
  802954:	88c002c4 	addi	r3,r17,11
  802958:	00800584 	movi	r2,22
  80295c:	82000117 	ldw	r8,4(r16)
  802960:	10c01b2e 	bgeu	r2,r3,8029d0 <_realloc_r+0xc0>
  802964:	00bffe04 	movi	r2,-8
  802968:	188e703a 	and	r7,r3,r2
  80296c:	3839883a 	mov	fp,r7
  802970:	38001a16 	blt	r7,zero,8029dc <_realloc_r+0xcc>
  802974:	e4401936 	bltu	fp,r17,8029dc <_realloc_r+0xcc>
  802978:	013fff04 	movi	r4,-4
  80297c:	4126703a 	and	r19,r8,r4
  802980:	99c02616 	blt	r19,r7,802a1c <_realloc_r+0x10c>
  802984:	802b883a 	mov	r21,r16
  802988:	9829883a 	mov	r20,r19
  80298c:	84000204 	addi	r16,r16,8
  802990:	a80f883a 	mov	r7,r21
  802994:	a70dc83a 	sub	r6,r20,fp
  802998:	008003c4 	movi	r2,15
  80299c:	1180c136 	bltu	r2,r6,802ca4 <_realloc_r+0x394>
  8029a0:	38800117 	ldw	r2,4(r7)
  8029a4:	a549883a 	add	r4,r20,r21
  8029a8:	1080004c 	andi	r2,r2,1
  8029ac:	a084b03a 	or	r2,r20,r2
  8029b0:	38800115 	stw	r2,4(r7)
  8029b4:	20c00117 	ldw	r3,4(r4)
  8029b8:	18c00054 	ori	r3,r3,1
  8029bc:	20c00115 	stw	r3,4(r4)
  8029c0:	b009883a 	mov	r4,r22
  8029c4:	080d3040 	call	80d304 <__malloc_unlock>
  8029c8:	8023883a 	mov	r17,r16
  8029cc:	00000606 	br	8029e8 <_realloc_r+0xd8>
  8029d0:	01c00404 	movi	r7,16
  8029d4:	3839883a 	mov	fp,r7
  8029d8:	e47fe72e 	bgeu	fp,r17,802978 <_realloc_r+0x68>
  8029dc:	00800304 	movi	r2,12
  8029e0:	0023883a 	mov	r17,zero
  8029e4:	b0800015 	stw	r2,0(r22)
  8029e8:	8805883a 	mov	r2,r17
  8029ec:	dfc00b17 	ldw	ra,44(sp)
  8029f0:	df000a17 	ldw	fp,40(sp)
  8029f4:	ddc00917 	ldw	r23,36(sp)
  8029f8:	dd800817 	ldw	r22,32(sp)
  8029fc:	dd400717 	ldw	r21,28(sp)
  802a00:	dd000617 	ldw	r20,24(sp)
  802a04:	dcc00517 	ldw	r19,20(sp)
  802a08:	dc800417 	ldw	r18,16(sp)
  802a0c:	dc400317 	ldw	r17,12(sp)
  802a10:	dc000217 	ldw	r16,8(sp)
  802a14:	dec00c04 	addi	sp,sp,48
  802a18:	f800283a 	ret
  802a1c:	008020b4 	movhi	r2,130
  802a20:	10a39c04 	addi	r2,r2,-29072
  802a24:	12400217 	ldw	r9,8(r2)
  802a28:	84cd883a 	add	r6,r16,r19
  802a2c:	802b883a 	mov	r21,r16
  802a30:	3240b926 	beq	r6,r9,802d18 <_realloc_r+0x408>
  802a34:	31400117 	ldw	r5,4(r6)
  802a38:	00bfff84 	movi	r2,-2
  802a3c:	2884703a 	and	r2,r5,r2
  802a40:	1185883a 	add	r2,r2,r6
  802a44:	10c00117 	ldw	r3,4(r2)
  802a48:	18c0004c 	andi	r3,r3,1
  802a4c:	1807003a 	cmpeq	r3,r3,zero
  802a50:	1800a326 	beq	r3,zero,802ce0 <_realloc_r+0x3d0>
  802a54:	2908703a 	and	r4,r5,r4
  802a58:	9929883a 	add	r20,r19,r4
  802a5c:	a1c0a30e 	bge	r20,r7,802cec <_realloc_r+0x3dc>
  802a60:	4080004c 	andi	r2,r8,1
  802a64:	1000551e 	bne	r2,zero,802bbc <_realloc_r+0x2ac>
  802a68:	80800017 	ldw	r2,0(r16)
  802a6c:	80afc83a 	sub	r23,r16,r2
  802a70:	b8c00117 	ldw	r3,4(r23)
  802a74:	00bfff04 	movi	r2,-4
  802a78:	1884703a 	and	r2,r3,r2
  802a7c:	30002e26 	beq	r6,zero,802b38 <_realloc_r+0x228>
  802a80:	3240b926 	beq	r6,r9,802d68 <_realloc_r+0x458>
  802a84:	98a9883a 	add	r20,r19,r2
  802a88:	2509883a 	add	r4,r4,r20
  802a8c:	d9000015 	stw	r4,0(sp)
  802a90:	21c02a16 	blt	r4,r7,802b3c <_realloc_r+0x22c>
  802a94:	30800317 	ldw	r2,12(r6)
  802a98:	30c00217 	ldw	r3,8(r6)
  802a9c:	01400904 	movi	r5,36
  802aa0:	99bfff04 	addi	r6,r19,-4
  802aa4:	18800315 	stw	r2,12(r3)
  802aa8:	10c00215 	stw	r3,8(r2)
  802aac:	b9000317 	ldw	r4,12(r23)
  802ab0:	b8800217 	ldw	r2,8(r23)
  802ab4:	b82b883a 	mov	r21,r23
  802ab8:	bc000204 	addi	r16,r23,8
  802abc:	20800215 	stw	r2,8(r4)
  802ac0:	11000315 	stw	r4,12(r2)
  802ac4:	2980e436 	bltu	r5,r6,802e58 <_realloc_r+0x548>
  802ac8:	008004c4 	movi	r2,19
  802acc:	9009883a 	mov	r4,r18
  802ad0:	8011883a 	mov	r8,r16
  802ad4:	11800f2e 	bgeu	r2,r6,802b14 <_realloc_r+0x204>
  802ad8:	90800017 	ldw	r2,0(r18)
  802adc:	ba000404 	addi	r8,r23,16
  802ae0:	91000204 	addi	r4,r18,8
  802ae4:	b8800215 	stw	r2,8(r23)
  802ae8:	90c00117 	ldw	r3,4(r18)
  802aec:	008006c4 	movi	r2,27
  802af0:	b8c00315 	stw	r3,12(r23)
  802af4:	1180072e 	bgeu	r2,r6,802b14 <_realloc_r+0x204>
  802af8:	90c00217 	ldw	r3,8(r18)
  802afc:	ba000604 	addi	r8,r23,24
  802b00:	91000404 	addi	r4,r18,16
  802b04:	b8c00415 	stw	r3,16(r23)
  802b08:	90800317 	ldw	r2,12(r18)
  802b0c:	b8800515 	stw	r2,20(r23)
  802b10:	3140e726 	beq	r6,r5,802eb0 <_realloc_r+0x5a0>
  802b14:	20800017 	ldw	r2,0(r4)
  802b18:	dd000017 	ldw	r20,0(sp)
  802b1c:	b80f883a 	mov	r7,r23
  802b20:	40800015 	stw	r2,0(r8)
  802b24:	20c00117 	ldw	r3,4(r4)
  802b28:	40c00115 	stw	r3,4(r8)
  802b2c:	20800217 	ldw	r2,8(r4)
  802b30:	40800215 	stw	r2,8(r8)
  802b34:	003f9706 	br	802994 <_realloc_r+0x84>
  802b38:	98a9883a 	add	r20,r19,r2
  802b3c:	a1c01f16 	blt	r20,r7,802bbc <_realloc_r+0x2ac>
  802b40:	b8c00317 	ldw	r3,12(r23)
  802b44:	b8800217 	ldw	r2,8(r23)
  802b48:	99bfff04 	addi	r6,r19,-4
  802b4c:	01400904 	movi	r5,36
  802b50:	b82b883a 	mov	r21,r23
  802b54:	18800215 	stw	r2,8(r3)
  802b58:	10c00315 	stw	r3,12(r2)
  802b5c:	bc000204 	addi	r16,r23,8
  802b60:	2980c336 	bltu	r5,r6,802e70 <_realloc_r+0x560>
  802b64:	008004c4 	movi	r2,19
  802b68:	9009883a 	mov	r4,r18
  802b6c:	8011883a 	mov	r8,r16
  802b70:	11800f2e 	bgeu	r2,r6,802bb0 <_realloc_r+0x2a0>
  802b74:	90800017 	ldw	r2,0(r18)
  802b78:	ba000404 	addi	r8,r23,16
  802b7c:	91000204 	addi	r4,r18,8
  802b80:	b8800215 	stw	r2,8(r23)
  802b84:	90c00117 	ldw	r3,4(r18)
  802b88:	008006c4 	movi	r2,27
  802b8c:	b8c00315 	stw	r3,12(r23)
  802b90:	1180072e 	bgeu	r2,r6,802bb0 <_realloc_r+0x2a0>
  802b94:	90c00217 	ldw	r3,8(r18)
  802b98:	ba000604 	addi	r8,r23,24
  802b9c:	91000404 	addi	r4,r18,16
  802ba0:	b8c00415 	stw	r3,16(r23)
  802ba4:	90800317 	ldw	r2,12(r18)
  802ba8:	b8800515 	stw	r2,20(r23)
  802bac:	3140c726 	beq	r6,r5,802ecc <_realloc_r+0x5bc>
  802bb0:	20800017 	ldw	r2,0(r4)
  802bb4:	b80f883a 	mov	r7,r23
  802bb8:	003fd906 	br	802b20 <_realloc_r+0x210>
  802bbc:	880b883a 	mov	r5,r17
  802bc0:	b009883a 	mov	r4,r22
  802bc4:	0801f9c0 	call	801f9c <_malloc_r>
  802bc8:	1023883a 	mov	r17,r2
  802bcc:	10002526 	beq	r2,zero,802c64 <_realloc_r+0x354>
  802bd0:	80800117 	ldw	r2,4(r16)
  802bd4:	00ffff84 	movi	r3,-2
  802bd8:	893ffe04 	addi	r4,r17,-8
  802bdc:	10c4703a 	and	r2,r2,r3
  802be0:	8085883a 	add	r2,r16,r2
  802be4:	20809526 	beq	r4,r2,802e3c <_realloc_r+0x52c>
  802be8:	99bfff04 	addi	r6,r19,-4
  802bec:	01c00904 	movi	r7,36
  802bf0:	39804536 	bltu	r7,r6,802d08 <_realloc_r+0x3f8>
  802bf4:	008004c4 	movi	r2,19
  802bf8:	9009883a 	mov	r4,r18
  802bfc:	880b883a 	mov	r5,r17
  802c00:	11800f2e 	bgeu	r2,r6,802c40 <_realloc_r+0x330>
  802c04:	90800017 	ldw	r2,0(r18)
  802c08:	89400204 	addi	r5,r17,8
  802c0c:	91000204 	addi	r4,r18,8
  802c10:	88800015 	stw	r2,0(r17)
  802c14:	90c00117 	ldw	r3,4(r18)
  802c18:	008006c4 	movi	r2,27
  802c1c:	88c00115 	stw	r3,4(r17)
  802c20:	1180072e 	bgeu	r2,r6,802c40 <_realloc_r+0x330>
  802c24:	90c00217 	ldw	r3,8(r18)
  802c28:	89400404 	addi	r5,r17,16
  802c2c:	91000404 	addi	r4,r18,16
  802c30:	88c00215 	stw	r3,8(r17)
  802c34:	90800317 	ldw	r2,12(r18)
  802c38:	88800315 	stw	r2,12(r17)
  802c3c:	31c09126 	beq	r6,r7,802e84 <_realloc_r+0x574>
  802c40:	20800017 	ldw	r2,0(r4)
  802c44:	28800015 	stw	r2,0(r5)
  802c48:	20c00117 	ldw	r3,4(r4)
  802c4c:	28c00115 	stw	r3,4(r5)
  802c50:	20800217 	ldw	r2,8(r4)
  802c54:	28800215 	stw	r2,8(r5)
  802c58:	900b883a 	mov	r5,r18
  802c5c:	b009883a 	mov	r4,r22
  802c60:	08072080 	call	807208 <_free_r>
  802c64:	b009883a 	mov	r4,r22
  802c68:	080d3040 	call	80d304 <__malloc_unlock>
  802c6c:	003f5e06 	br	8029e8 <_realloc_r+0xd8>
  802c70:	300b883a 	mov	r5,r6
  802c74:	dfc00b17 	ldw	ra,44(sp)
  802c78:	df000a17 	ldw	fp,40(sp)
  802c7c:	ddc00917 	ldw	r23,36(sp)
  802c80:	dd800817 	ldw	r22,32(sp)
  802c84:	dd400717 	ldw	r21,28(sp)
  802c88:	dd000617 	ldw	r20,24(sp)
  802c8c:	dcc00517 	ldw	r19,20(sp)
  802c90:	dc800417 	ldw	r18,16(sp)
  802c94:	dc400317 	ldw	r17,12(sp)
  802c98:	dc000217 	ldw	r16,8(sp)
  802c9c:	dec00c04 	addi	sp,sp,48
  802ca0:	0801f9c1 	jmpi	801f9c <_malloc_r>
  802ca4:	38800117 	ldw	r2,4(r7)
  802ca8:	e54b883a 	add	r5,fp,r21
  802cac:	31000054 	ori	r4,r6,1
  802cb0:	1080004c 	andi	r2,r2,1
  802cb4:	1704b03a 	or	r2,r2,fp
  802cb8:	38800115 	stw	r2,4(r7)
  802cbc:	29000115 	stw	r4,4(r5)
  802cc0:	2987883a 	add	r3,r5,r6
  802cc4:	18800117 	ldw	r2,4(r3)
  802cc8:	29400204 	addi	r5,r5,8
  802ccc:	b009883a 	mov	r4,r22
  802cd0:	10800054 	ori	r2,r2,1
  802cd4:	18800115 	stw	r2,4(r3)
  802cd8:	08072080 	call	807208 <_free_r>
  802cdc:	003f3806 	br	8029c0 <_realloc_r+0xb0>
  802ce0:	000d883a 	mov	r6,zero
  802ce4:	0009883a 	mov	r4,zero
  802ce8:	003f5d06 	br	802a60 <_realloc_r+0x150>
  802cec:	30c00217 	ldw	r3,8(r6)
  802cf0:	30800317 	ldw	r2,12(r6)
  802cf4:	800f883a 	mov	r7,r16
  802cf8:	84000204 	addi	r16,r16,8
  802cfc:	10c00215 	stw	r3,8(r2)
  802d00:	18800315 	stw	r2,12(r3)
  802d04:	003f2306 	br	802994 <_realloc_r+0x84>
  802d08:	8809883a 	mov	r4,r17
  802d0c:	900b883a 	mov	r5,r18
  802d10:	080277c0 	call	80277c <memmove>
  802d14:	003fd006 	br	802c58 <_realloc_r+0x348>
  802d18:	30800117 	ldw	r2,4(r6)
  802d1c:	e0c00404 	addi	r3,fp,16
  802d20:	1108703a 	and	r4,r2,r4
  802d24:	9905883a 	add	r2,r19,r4
  802d28:	10ff4d16 	blt	r2,r3,802a60 <_realloc_r+0x150>
  802d2c:	1705c83a 	sub	r2,r2,fp
  802d30:	870b883a 	add	r5,r16,fp
  802d34:	10800054 	ori	r2,r2,1
  802d38:	28800115 	stw	r2,4(r5)
  802d3c:	80c00117 	ldw	r3,4(r16)
  802d40:	008020b4 	movhi	r2,130
  802d44:	10a39c04 	addi	r2,r2,-29072
  802d48:	b009883a 	mov	r4,r22
  802d4c:	18c0004c 	andi	r3,r3,1
  802d50:	e0c6b03a 	or	r3,fp,r3
  802d54:	11400215 	stw	r5,8(r2)
  802d58:	80c00115 	stw	r3,4(r16)
  802d5c:	080d3040 	call	80d304 <__malloc_unlock>
  802d60:	84400204 	addi	r17,r16,8
  802d64:	003f2006 	br	8029e8 <_realloc_r+0xd8>
  802d68:	98a9883a 	add	r20,r19,r2
  802d6c:	2509883a 	add	r4,r4,r20
  802d70:	e0800404 	addi	r2,fp,16
  802d74:	d9000115 	stw	r4,4(sp)
  802d78:	20bf7016 	blt	r4,r2,802b3c <_realloc_r+0x22c>
  802d7c:	b8c00317 	ldw	r3,12(r23)
  802d80:	b8800217 	ldw	r2,8(r23)
  802d84:	99bfff04 	addi	r6,r19,-4
  802d88:	01400904 	movi	r5,36
  802d8c:	18800215 	stw	r2,8(r3)
  802d90:	10c00315 	stw	r3,12(r2)
  802d94:	bc400204 	addi	r17,r23,8
  802d98:	29804136 	bltu	r5,r6,802ea0 <_realloc_r+0x590>
  802d9c:	008004c4 	movi	r2,19
  802da0:	9009883a 	mov	r4,r18
  802da4:	880f883a 	mov	r7,r17
  802da8:	11800f2e 	bgeu	r2,r6,802de8 <_realloc_r+0x4d8>
  802dac:	90800017 	ldw	r2,0(r18)
  802db0:	b9c00404 	addi	r7,r23,16
  802db4:	91000204 	addi	r4,r18,8
  802db8:	b8800215 	stw	r2,8(r23)
  802dbc:	90c00117 	ldw	r3,4(r18)
  802dc0:	008006c4 	movi	r2,27
  802dc4:	b8c00315 	stw	r3,12(r23)
  802dc8:	1180072e 	bgeu	r2,r6,802de8 <_realloc_r+0x4d8>
  802dcc:	90c00217 	ldw	r3,8(r18)
  802dd0:	b9c00604 	addi	r7,r23,24
  802dd4:	91000404 	addi	r4,r18,16
  802dd8:	b8c00415 	stw	r3,16(r23)
  802ddc:	90800317 	ldw	r2,12(r18)
  802de0:	b8800515 	stw	r2,20(r23)
  802de4:	31404026 	beq	r6,r5,802ee8 <_realloc_r+0x5d8>
  802de8:	20800017 	ldw	r2,0(r4)
  802dec:	38800015 	stw	r2,0(r7)
  802df0:	20c00117 	ldw	r3,4(r4)
  802df4:	38c00115 	stw	r3,4(r7)
  802df8:	20800217 	ldw	r2,8(r4)
  802dfc:	38800215 	stw	r2,8(r7)
  802e00:	d8c00117 	ldw	r3,4(sp)
  802e04:	bf0b883a 	add	r5,r23,fp
  802e08:	b009883a 	mov	r4,r22
  802e0c:	1f05c83a 	sub	r2,r3,fp
  802e10:	10800054 	ori	r2,r2,1
  802e14:	28800115 	stw	r2,4(r5)
  802e18:	b8c00117 	ldw	r3,4(r23)
  802e1c:	008020b4 	movhi	r2,130
  802e20:	10a39c04 	addi	r2,r2,-29072
  802e24:	11400215 	stw	r5,8(r2)
  802e28:	18c0004c 	andi	r3,r3,1
  802e2c:	e0c6b03a 	or	r3,fp,r3
  802e30:	b8c00115 	stw	r3,4(r23)
  802e34:	080d3040 	call	80d304 <__malloc_unlock>
  802e38:	003eeb06 	br	8029e8 <_realloc_r+0xd8>
  802e3c:	20800117 	ldw	r2,4(r4)
  802e40:	00ffff04 	movi	r3,-4
  802e44:	800f883a 	mov	r7,r16
  802e48:	10c4703a 	and	r2,r2,r3
  802e4c:	98a9883a 	add	r20,r19,r2
  802e50:	84000204 	addi	r16,r16,8
  802e54:	003ecf06 	br	802994 <_realloc_r+0x84>
  802e58:	900b883a 	mov	r5,r18
  802e5c:	8009883a 	mov	r4,r16
  802e60:	080277c0 	call	80277c <memmove>
  802e64:	dd000017 	ldw	r20,0(sp)
  802e68:	b80f883a 	mov	r7,r23
  802e6c:	003ec906 	br	802994 <_realloc_r+0x84>
  802e70:	900b883a 	mov	r5,r18
  802e74:	8009883a 	mov	r4,r16
  802e78:	080277c0 	call	80277c <memmove>
  802e7c:	b80f883a 	mov	r7,r23
  802e80:	003ec406 	br	802994 <_realloc_r+0x84>
  802e84:	90c00417 	ldw	r3,16(r18)
  802e88:	89400604 	addi	r5,r17,24
  802e8c:	91000604 	addi	r4,r18,24
  802e90:	88c00415 	stw	r3,16(r17)
  802e94:	90800517 	ldw	r2,20(r18)
  802e98:	88800515 	stw	r2,20(r17)
  802e9c:	003f6806 	br	802c40 <_realloc_r+0x330>
  802ea0:	900b883a 	mov	r5,r18
  802ea4:	8809883a 	mov	r4,r17
  802ea8:	080277c0 	call	80277c <memmove>
  802eac:	003fd406 	br	802e00 <_realloc_r+0x4f0>
  802eb0:	90c00417 	ldw	r3,16(r18)
  802eb4:	91000604 	addi	r4,r18,24
  802eb8:	ba000804 	addi	r8,r23,32
  802ebc:	b8c00615 	stw	r3,24(r23)
  802ec0:	90800517 	ldw	r2,20(r18)
  802ec4:	b8800715 	stw	r2,28(r23)
  802ec8:	003f1206 	br	802b14 <_realloc_r+0x204>
  802ecc:	90c00417 	ldw	r3,16(r18)
  802ed0:	91000604 	addi	r4,r18,24
  802ed4:	ba000804 	addi	r8,r23,32
  802ed8:	b8c00615 	stw	r3,24(r23)
  802edc:	90800517 	ldw	r2,20(r18)
  802ee0:	b8800715 	stw	r2,28(r23)
  802ee4:	003f3206 	br	802bb0 <_realloc_r+0x2a0>
  802ee8:	90c00417 	ldw	r3,16(r18)
  802eec:	91000604 	addi	r4,r18,24
  802ef0:	b9c00804 	addi	r7,r23,32
  802ef4:	b8c00615 	stw	r3,24(r23)
  802ef8:	90800517 	ldw	r2,20(r18)
  802efc:	b8800715 	stw	r2,28(r23)
  802f00:	003fb906 	br	802de8 <_realloc_r+0x4d8>

00802f04 <_sbrk_r>:
  802f04:	defffd04 	addi	sp,sp,-12
  802f08:	dc000015 	stw	r16,0(sp)
  802f0c:	040020b4 	movhi	r16,130
  802f10:	84296f04 	addi	r16,r16,-23108
  802f14:	dc400115 	stw	r17,4(sp)
  802f18:	80000015 	stw	zero,0(r16)
  802f1c:	2023883a 	mov	r17,r4
  802f20:	2809883a 	mov	r4,r5
  802f24:	dfc00215 	stw	ra,8(sp)
  802f28:	080ceb40 	call	80ceb4 <sbrk>
  802f2c:	1007883a 	mov	r3,r2
  802f30:	00bfffc4 	movi	r2,-1
  802f34:	18800626 	beq	r3,r2,802f50 <_sbrk_r+0x4c>
  802f38:	1805883a 	mov	r2,r3
  802f3c:	dfc00217 	ldw	ra,8(sp)
  802f40:	dc400117 	ldw	r17,4(sp)
  802f44:	dc000017 	ldw	r16,0(sp)
  802f48:	dec00304 	addi	sp,sp,12
  802f4c:	f800283a 	ret
  802f50:	80800017 	ldw	r2,0(r16)
  802f54:	103ff826 	beq	r2,zero,802f38 <_sbrk_r+0x34>
  802f58:	88800015 	stw	r2,0(r17)
  802f5c:	1805883a 	mov	r2,r3
  802f60:	dfc00217 	ldw	ra,8(sp)
  802f64:	dc400117 	ldw	r17,4(sp)
  802f68:	dc000017 	ldw	r16,0(sp)
  802f6c:	dec00304 	addi	sp,sp,12
  802f70:	f800283a 	ret
  802f74:	0001883a 	nop

00802f78 <setjmp>:
  802f78:	24000015 	stw	r16,0(r4)
  802f7c:	24400115 	stw	r17,4(r4)
  802f80:	24800215 	stw	r18,8(r4)
  802f84:	24c00315 	stw	r19,12(r4)
  802f88:	25000415 	stw	r20,16(r4)
  802f8c:	25400515 	stw	r21,20(r4)
  802f90:	25800615 	stw	r22,24(r4)
  802f94:	25c00715 	stw	r23,28(r4)
  802f98:	26800815 	stw	gp,32(r4)
  802f9c:	26c00915 	stw	sp,36(r4)
  802fa0:	27000a15 	stw	fp,40(r4)
  802fa4:	27c00b15 	stw	ra,44(r4)
  802fa8:	0005883a 	mov	r2,zero
  802fac:	f800283a 	ret

00802fb0 <longjmp>:
  802fb0:	24000017 	ldw	r16,0(r4)
  802fb4:	24400117 	ldw	r17,4(r4)
  802fb8:	24800217 	ldw	r18,8(r4)
  802fbc:	24c00317 	ldw	r19,12(r4)
  802fc0:	25000417 	ldw	r20,16(r4)
  802fc4:	25400517 	ldw	r21,20(r4)
  802fc8:	25800617 	ldw	r22,24(r4)
  802fcc:	25c00717 	ldw	r23,28(r4)
  802fd0:	26800817 	ldw	gp,32(r4)
  802fd4:	26c00917 	ldw	sp,36(r4)
  802fd8:	27000a17 	ldw	fp,40(r4)
  802fdc:	27c00b17 	ldw	ra,44(r4)
  802fe0:	2805883a 	mov	r2,r5
  802fe4:	1000011e 	bne	r2,zero,802fec <longjmp+0x3c>
  802fe8:	00800044 	movi	r2,1
  802fec:	f800283a 	ret

00802ff0 <sprintf>:
  802ff0:	deffe504 	addi	sp,sp,-108
  802ff4:	2013883a 	mov	r9,r4
  802ff8:	dfc01815 	stw	ra,96(sp)
  802ffc:	d9801915 	stw	r6,100(sp)
  803000:	d9c01a15 	stw	r7,104(sp)
  803004:	d8801904 	addi	r2,sp,100
  803008:	d8800015 	stw	r2,0(sp)
  80300c:	008020b4 	movhi	r2,130
  803010:	10a93c04 	addi	r2,r2,-23312
  803014:	11000017 	ldw	r4,0(r2)
  803018:	d9c00017 	ldw	r7,0(sp)
  80301c:	00808204 	movi	r2,520
  803020:	00e00034 	movhi	r3,32768
  803024:	18ffffc4 	addi	r3,r3,-1
  803028:	280d883a 	mov	r6,r5
  80302c:	d880040d 	sth	r2,16(sp)
  803030:	d9400104 	addi	r5,sp,4
  803034:	00bfffc4 	movi	r2,-1
  803038:	d8c00615 	stw	r3,24(sp)
  80303c:	d8c00315 	stw	r3,12(sp)
  803040:	da400515 	stw	r9,20(sp)
  803044:	d880048d 	sth	r2,18(sp)
  803048:	da400115 	stw	r9,4(sp)
  80304c:	08033840 	call	803384 <___vfprintf_internal_r>
  803050:	d8c00117 	ldw	r3,4(sp)
  803054:	18000005 	stb	zero,0(r3)
  803058:	dfc01817 	ldw	ra,96(sp)
  80305c:	dec01b04 	addi	sp,sp,108
  803060:	f800283a 	ret

00803064 <_sprintf_r>:
  803064:	deffe604 	addi	sp,sp,-104
  803068:	2813883a 	mov	r9,r5
  80306c:	dfc01815 	stw	ra,96(sp)
  803070:	d9c01915 	stw	r7,100(sp)
  803074:	d8801904 	addi	r2,sp,100
  803078:	d8800015 	stw	r2,0(sp)
  80307c:	100f883a 	mov	r7,r2
  803080:	00808204 	movi	r2,520
  803084:	00e00034 	movhi	r3,32768
  803088:	18ffffc4 	addi	r3,r3,-1
  80308c:	d880040d 	sth	r2,16(sp)
  803090:	d9400104 	addi	r5,sp,4
  803094:	00bfffc4 	movi	r2,-1
  803098:	d8c00615 	stw	r3,24(sp)
  80309c:	d8c00315 	stw	r3,12(sp)
  8030a0:	da400515 	stw	r9,20(sp)
  8030a4:	d880048d 	sth	r2,18(sp)
  8030a8:	da400115 	stw	r9,4(sp)
  8030ac:	08033840 	call	803384 <___vfprintf_internal_r>
  8030b0:	d8c00117 	ldw	r3,4(sp)
  8030b4:	18000005 	stb	zero,0(r3)
  8030b8:	dfc01817 	ldw	ra,96(sp)
  8030bc:	dec01a04 	addi	sp,sp,104
  8030c0:	f800283a 	ret

008030c4 <strcat>:
  8030c4:	defffe04 	addi	sp,sp,-8
  8030c8:	208000cc 	andi	r2,r4,3
  8030cc:	dc000015 	stw	r16,0(sp)
  8030d0:	dfc00115 	stw	ra,4(sp)
  8030d4:	2021883a 	mov	r16,r4
  8030d8:	1000161e 	bne	r2,zero,803134 <strcat+0x70>
  8030dc:	20c00017 	ldw	r3,0(r4)
  8030e0:	01bfbff4 	movhi	r6,65279
  8030e4:	31bfbfc4 	addi	r6,r6,-257
  8030e8:	02202074 	movhi	r8,32897
  8030ec:	42202004 	addi	r8,r8,-32640
  8030f0:	1985883a 	add	r2,r3,r6
  8030f4:	1204703a 	and	r2,r2,r8
  8030f8:	00c6303a 	nor	r3,zero,r3
  8030fc:	1886703a 	and	r3,r3,r2
  803100:	18000c1e 	bne	r3,zero,803134 <strcat+0x70>
  803104:	300f883a 	mov	r7,r6
  803108:	400d883a 	mov	r6,r8
  80310c:	21000104 	addi	r4,r4,4
  803110:	20800017 	ldw	r2,0(r4)
  803114:	11c7883a 	add	r3,r2,r7
  803118:	1986703a 	and	r3,r3,r6
  80311c:	0084303a 	nor	r2,zero,r2
  803120:	10c4703a 	and	r2,r2,r3
  803124:	103ff926 	beq	r2,zero,80310c <strcat+0x48>
  803128:	20800007 	ldb	r2,0(r4)
  80312c:	10000326 	beq	r2,zero,80313c <strcat+0x78>
  803130:	21000044 	addi	r4,r4,1
  803134:	20800007 	ldb	r2,0(r4)
  803138:	103ffd1e 	bne	r2,zero,803130 <strcat+0x6c>
  80313c:	08032100 	call	803210 <strcpy>
  803140:	8005883a 	mov	r2,r16
  803144:	dfc00117 	ldw	ra,4(sp)
  803148:	dc000017 	ldw	r16,0(sp)
  80314c:	dec00204 	addi	sp,sp,8
  803150:	f800283a 	ret

00803154 <strcmp>:
  803154:	2144b03a 	or	r2,r4,r5
  803158:	108000cc 	andi	r2,r2,3
  80315c:	10001d1e 	bne	r2,zero,8031d4 <strcmp+0x80>
  803160:	200f883a 	mov	r7,r4
  803164:	28800017 	ldw	r2,0(r5)
  803168:	21000017 	ldw	r4,0(r4)
  80316c:	280d883a 	mov	r6,r5
  803170:	2080161e 	bne	r4,r2,8031cc <strcmp+0x78>
  803174:	023fbff4 	movhi	r8,65279
  803178:	423fbfc4 	addi	r8,r8,-257
  80317c:	2207883a 	add	r3,r4,r8
  803180:	01602074 	movhi	r5,32897
  803184:	29602004 	addi	r5,r5,-32640
  803188:	1946703a 	and	r3,r3,r5
  80318c:	0104303a 	nor	r2,zero,r4
  803190:	10c4703a 	and	r2,r2,r3
  803194:	10001c1e 	bne	r2,zero,803208 <strcmp+0xb4>
  803198:	4013883a 	mov	r9,r8
  80319c:	2811883a 	mov	r8,r5
  8031a0:	00000106 	br	8031a8 <strcmp+0x54>
  8031a4:	1800181e 	bne	r3,zero,803208 <strcmp+0xb4>
  8031a8:	39c00104 	addi	r7,r7,4
  8031ac:	39000017 	ldw	r4,0(r7)
  8031b0:	31800104 	addi	r6,r6,4
  8031b4:	31400017 	ldw	r5,0(r6)
  8031b8:	2245883a 	add	r2,r4,r9
  8031bc:	1204703a 	and	r2,r2,r8
  8031c0:	0106303a 	nor	r3,zero,r4
  8031c4:	1886703a 	and	r3,r3,r2
  8031c8:	217ff626 	beq	r4,r5,8031a4 <strcmp+0x50>
  8031cc:	3809883a 	mov	r4,r7
  8031d0:	300b883a 	mov	r5,r6
  8031d4:	20c00007 	ldb	r3,0(r4)
  8031d8:	1800051e 	bne	r3,zero,8031f0 <strcmp+0x9c>
  8031dc:	00000606 	br	8031f8 <strcmp+0xa4>
  8031e0:	21000044 	addi	r4,r4,1
  8031e4:	20c00007 	ldb	r3,0(r4)
  8031e8:	29400044 	addi	r5,r5,1
  8031ec:	18000226 	beq	r3,zero,8031f8 <strcmp+0xa4>
  8031f0:	28800007 	ldb	r2,0(r5)
  8031f4:	18bffa26 	beq	r3,r2,8031e0 <strcmp+0x8c>
  8031f8:	20c00003 	ldbu	r3,0(r4)
  8031fc:	28800003 	ldbu	r2,0(r5)
  803200:	1885c83a 	sub	r2,r3,r2
  803204:	f800283a 	ret
  803208:	0005883a 	mov	r2,zero
  80320c:	f800283a 	ret

00803210 <strcpy>:
  803210:	2904b03a 	or	r2,r5,r4
  803214:	108000cc 	andi	r2,r2,3
  803218:	10000826 	beq	r2,zero,80323c <strcpy+0x2c>
  80321c:	2007883a 	mov	r3,r4
  803220:	28800003 	ldbu	r2,0(r5)
  803224:	29400044 	addi	r5,r5,1
  803228:	18800005 	stb	r2,0(r3)
  80322c:	18c00044 	addi	r3,r3,1
  803230:	103ffb1e 	bne	r2,zero,803220 <strcpy+0x10>
  803234:	2005883a 	mov	r2,r4
  803238:	f800283a 	ret
  80323c:	29800017 	ldw	r6,0(r5)
  803240:	023fbff4 	movhi	r8,65279
  803244:	423fbfc4 	addi	r8,r8,-257
  803248:	02a02074 	movhi	r10,32897
  80324c:	52a02004 	addi	r10,r10,-32640
  803250:	3205883a 	add	r2,r6,r8
  803254:	0186303a 	nor	r3,zero,r6
  803258:	10c4703a 	and	r2,r2,r3
  80325c:	1284703a 	and	r2,r2,r10
  803260:	200f883a 	mov	r7,r4
  803264:	10000b1e 	bne	r2,zero,803294 <strcpy+0x84>
  803268:	4013883a 	mov	r9,r8
  80326c:	5011883a 	mov	r8,r10
  803270:	39800015 	stw	r6,0(r7)
  803274:	29400104 	addi	r5,r5,4
  803278:	29800017 	ldw	r6,0(r5)
  80327c:	39c00104 	addi	r7,r7,4
  803280:	3245883a 	add	r2,r6,r9
  803284:	0186303a 	nor	r3,zero,r6
  803288:	10c4703a 	and	r2,r2,r3
  80328c:	1204703a 	and	r2,r2,r8
  803290:	103ff726 	beq	r2,zero,803270 <strcpy+0x60>
  803294:	3807883a 	mov	r3,r7
  803298:	003fe106 	br	803220 <strcpy+0x10>

0080329c <strlen>:
  80329c:	208000cc 	andi	r2,r4,3
  8032a0:	2011883a 	mov	r8,r4
  8032a4:	1000161e 	bne	r2,zero,803300 <strlen+0x64>
  8032a8:	20c00017 	ldw	r3,0(r4)
  8032ac:	017fbff4 	movhi	r5,65279
  8032b0:	297fbfc4 	addi	r5,r5,-257
  8032b4:	01e02074 	movhi	r7,32897
  8032b8:	39e02004 	addi	r7,r7,-32640
  8032bc:	1945883a 	add	r2,r3,r5
  8032c0:	11c4703a 	and	r2,r2,r7
  8032c4:	00c6303a 	nor	r3,zero,r3
  8032c8:	1886703a 	and	r3,r3,r2
  8032cc:	18000c1e 	bne	r3,zero,803300 <strlen+0x64>
  8032d0:	280d883a 	mov	r6,r5
  8032d4:	380b883a 	mov	r5,r7
  8032d8:	21000104 	addi	r4,r4,4
  8032dc:	20800017 	ldw	r2,0(r4)
  8032e0:	1187883a 	add	r3,r2,r6
  8032e4:	1946703a 	and	r3,r3,r5
  8032e8:	0084303a 	nor	r2,zero,r2
  8032ec:	10c4703a 	and	r2,r2,r3
  8032f0:	103ff926 	beq	r2,zero,8032d8 <strlen+0x3c>
  8032f4:	20800007 	ldb	r2,0(r4)
  8032f8:	10000326 	beq	r2,zero,803308 <strlen+0x6c>
  8032fc:	21000044 	addi	r4,r4,1
  803300:	20800007 	ldb	r2,0(r4)
  803304:	103ffd1e 	bne	r2,zero,8032fc <strlen+0x60>
  803308:	2205c83a 	sub	r2,r4,r8
  80330c:	f800283a 	ret

00803310 <_vfiprintf_r>:
  803310:	defffe04 	addi	sp,sp,-8
  803314:	dfc00115 	stw	ra,4(sp)
  803318:	d9c00015 	stw	r7,0(sp)
  80331c:	08094640 	call	809464 <___vfiprintf_internal_r>
  803320:	dfc00117 	ldw	ra,4(sp)
  803324:	dec00204 	addi	sp,sp,8
  803328:	f800283a 	ret

0080332c <__sprint_r>:
  80332c:	30800217 	ldw	r2,8(r6)
  803330:	defffe04 	addi	sp,sp,-8
  803334:	dc000015 	stw	r16,0(sp)
  803338:	dfc00115 	stw	ra,4(sp)
  80333c:	3021883a 	mov	r16,r6
  803340:	0007883a 	mov	r3,zero
  803344:	1000061e 	bne	r2,zero,803360 <__sprint_r+0x34>
  803348:	1805883a 	mov	r2,r3
  80334c:	30000115 	stw	zero,4(r6)
  803350:	dfc00117 	ldw	ra,4(sp)
  803354:	dc000017 	ldw	r16,0(sp)
  803358:	dec00204 	addi	sp,sp,8
  80335c:	f800283a 	ret
  803360:	080751c0 	call	80751c <__sfvwrite_r>
  803364:	1007883a 	mov	r3,r2
  803368:	1805883a 	mov	r2,r3
  80336c:	80000115 	stw	zero,4(r16)
  803370:	80000215 	stw	zero,8(r16)
  803374:	dfc00117 	ldw	ra,4(sp)
  803378:	dc000017 	ldw	r16,0(sp)
  80337c:	dec00204 	addi	sp,sp,8
  803380:	f800283a 	ret

00803384 <___vfprintf_internal_r>:
  803384:	defea404 	addi	sp,sp,-1392
  803388:	dd815815 	stw	r22,1376(sp)
  80338c:	dc015215 	stw	r16,1352(sp)
  803390:	d9c15115 	stw	r7,1348(sp)
  803394:	dfc15b15 	stw	ra,1388(sp)
  803398:	df015a15 	stw	fp,1384(sp)
  80339c:	ddc15915 	stw	r23,1380(sp)
  8033a0:	dd415715 	stw	r21,1372(sp)
  8033a4:	dd015615 	stw	r20,1368(sp)
  8033a8:	dcc15515 	stw	r19,1364(sp)
  8033ac:	dc815415 	stw	r18,1360(sp)
  8033b0:	dc415315 	stw	r17,1356(sp)
  8033b4:	282d883a 	mov	r22,r5
  8033b8:	3021883a 	mov	r16,r6
  8033bc:	d9014f15 	stw	r4,1340(sp)
  8033c0:	0807b400 	call	807b40 <_localeconv_r>
  8033c4:	10800017 	ldw	r2,0(r2)
  8033c8:	d9c15117 	ldw	r7,1348(sp)
  8033cc:	d8814915 	stw	r2,1316(sp)
  8033d0:	d8814f17 	ldw	r2,1340(sp)
  8033d4:	10000226 	beq	r2,zero,8033e0 <___vfprintf_internal_r+0x5c>
  8033d8:	10800e17 	ldw	r2,56(r2)
  8033dc:	10020d26 	beq	r2,zero,803c14 <___vfprintf_internal_r+0x890>
  8033e0:	b080030b 	ldhu	r2,12(r22)
  8033e4:	1080020c 	andi	r2,r2,8
  8033e8:	10020e26 	beq	r2,zero,803c24 <___vfprintf_internal_r+0x8a0>
  8033ec:	b0800417 	ldw	r2,16(r22)
  8033f0:	10020c26 	beq	r2,zero,803c24 <___vfprintf_internal_r+0x8a0>
  8033f4:	b200030b 	ldhu	r8,12(r22)
  8033f8:	00800284 	movi	r2,10
  8033fc:	40c0068c 	andi	r3,r8,26
  803400:	18802f1e 	bne	r3,r2,8034c0 <___vfprintf_internal_r+0x13c>
  803404:	b080038f 	ldh	r2,14(r22)
  803408:	10002d16 	blt	r2,zero,8034c0 <___vfprintf_internal_r+0x13c>
  80340c:	b240038b 	ldhu	r9,14(r22)
  803410:	b2800717 	ldw	r10,28(r22)
  803414:	b2c00917 	ldw	r11,36(r22)
  803418:	d9014f17 	ldw	r4,1340(sp)
  80341c:	dc402904 	addi	r17,sp,164
  803420:	d8804004 	addi	r2,sp,256
  803424:	00c10004 	movi	r3,1024
  803428:	423fff4c 	andi	r8,r8,65533
  80342c:	800d883a 	mov	r6,r16
  803430:	880b883a 	mov	r5,r17
  803434:	da002c0d 	sth	r8,176(sp)
  803438:	da402c8d 	sth	r9,178(sp)
  80343c:	da803015 	stw	r10,192(sp)
  803440:	dac03215 	stw	r11,200(sp)
  803444:	d8802d15 	stw	r2,180(sp)
  803448:	d8c02e15 	stw	r3,184(sp)
  80344c:	d8802915 	stw	r2,164(sp)
  803450:	d8c02b15 	stw	r3,172(sp)
  803454:	d8002f15 	stw	zero,188(sp)
  803458:	08033840 	call	803384 <___vfprintf_internal_r>
  80345c:	d8814b15 	stw	r2,1324(sp)
  803460:	10000416 	blt	r2,zero,803474 <___vfprintf_internal_r+0xf0>
  803464:	d9014f17 	ldw	r4,1340(sp)
  803468:	880b883a 	mov	r5,r17
  80346c:	0806bb80 	call	806bb8 <_fflush_r>
  803470:	1002321e 	bne	r2,zero,803d3c <___vfprintf_internal_r+0x9b8>
  803474:	d8802c0b 	ldhu	r2,176(sp)
  803478:	1080100c 	andi	r2,r2,64
  80347c:	10000326 	beq	r2,zero,80348c <___vfprintf_internal_r+0x108>
  803480:	b080030b 	ldhu	r2,12(r22)
  803484:	10801014 	ori	r2,r2,64
  803488:	b080030d 	sth	r2,12(r22)
  80348c:	d8814b17 	ldw	r2,1324(sp)
  803490:	dfc15b17 	ldw	ra,1388(sp)
  803494:	df015a17 	ldw	fp,1384(sp)
  803498:	ddc15917 	ldw	r23,1380(sp)
  80349c:	dd815817 	ldw	r22,1376(sp)
  8034a0:	dd415717 	ldw	r21,1372(sp)
  8034a4:	dd015617 	ldw	r20,1368(sp)
  8034a8:	dcc15517 	ldw	r19,1364(sp)
  8034ac:	dc815417 	ldw	r18,1360(sp)
  8034b0:	dc415317 	ldw	r17,1356(sp)
  8034b4:	dc015217 	ldw	r16,1352(sp)
  8034b8:	dec15c04 	addi	sp,sp,1392
  8034bc:	f800283a 	ret
  8034c0:	0005883a 	mov	r2,zero
  8034c4:	0007883a 	mov	r3,zero
  8034c8:	dd401904 	addi	r21,sp,100
  8034cc:	d8814215 	stw	r2,1288(sp)
  8034d0:	802f883a 	mov	r23,r16
  8034d4:	d8c14315 	stw	r3,1292(sp)
  8034d8:	d8014b15 	stw	zero,1324(sp)
  8034dc:	d8014815 	stw	zero,1312(sp)
  8034e0:	d8014415 	stw	zero,1296(sp)
  8034e4:	d8014715 	stw	zero,1308(sp)
  8034e8:	dd400c15 	stw	r21,48(sp)
  8034ec:	d8000e15 	stw	zero,56(sp)
  8034f0:	d8000d15 	stw	zero,52(sp)
  8034f4:	b8800007 	ldb	r2,0(r23)
  8034f8:	10001926 	beq	r2,zero,803560 <___vfprintf_internal_r+0x1dc>
  8034fc:	00c00944 	movi	r3,37
  803500:	10c01726 	beq	r2,r3,803560 <___vfprintf_internal_r+0x1dc>
  803504:	b821883a 	mov	r16,r23
  803508:	00000106 	br	803510 <___vfprintf_internal_r+0x18c>
  80350c:	10c00326 	beq	r2,r3,80351c <___vfprintf_internal_r+0x198>
  803510:	84000044 	addi	r16,r16,1
  803514:	80800007 	ldb	r2,0(r16)
  803518:	103ffc1e 	bne	r2,zero,80350c <___vfprintf_internal_r+0x188>
  80351c:	85e7c83a 	sub	r19,r16,r23
  803520:	98000e26 	beq	r19,zero,80355c <___vfprintf_internal_r+0x1d8>
  803524:	dc800e17 	ldw	r18,56(sp)
  803528:	dc400d17 	ldw	r17,52(sp)
  80352c:	008001c4 	movi	r2,7
  803530:	94e5883a 	add	r18,r18,r19
  803534:	8c400044 	addi	r17,r17,1
  803538:	adc00015 	stw	r23,0(r21)
  80353c:	dc800e15 	stw	r18,56(sp)
  803540:	acc00115 	stw	r19,4(r21)
  803544:	dc400d15 	stw	r17,52(sp)
  803548:	14428b16 	blt	r2,r17,803f78 <___vfprintf_internal_r+0xbf4>
  80354c:	ad400204 	addi	r21,r21,8
  803550:	d9014b17 	ldw	r4,1324(sp)
  803554:	24c9883a 	add	r4,r4,r19
  803558:	d9014b15 	stw	r4,1324(sp)
  80355c:	802f883a 	mov	r23,r16
  803560:	b8800007 	ldb	r2,0(r23)
  803564:	10013c26 	beq	r2,zero,803a58 <___vfprintf_internal_r+0x6d4>
  803568:	bdc00044 	addi	r23,r23,1
  80356c:	d8000405 	stb	zero,16(sp)
  803570:	b8c00007 	ldb	r3,0(r23)
  803574:	04ffffc4 	movi	r19,-1
  803578:	d8014c15 	stw	zero,1328(sp)
  80357c:	d8014a15 	stw	zero,1320(sp)
  803580:	d8c14d15 	stw	r3,1332(sp)
  803584:	bdc00044 	addi	r23,r23,1
  803588:	d9414d17 	ldw	r5,1332(sp)
  80358c:	00801604 	movi	r2,88
  803590:	28fff804 	addi	r3,r5,-32
  803594:	10c06036 	bltu	r2,r3,803718 <___vfprintf_internal_r+0x394>
  803598:	18c5883a 	add	r2,r3,r3
  80359c:	1085883a 	add	r2,r2,r2
  8035a0:	00c02034 	movhi	r3,128
  8035a4:	18cd6d04 	addi	r3,r3,13748
  8035a8:	10c5883a 	add	r2,r2,r3
  8035ac:	11000017 	ldw	r4,0(r2)
  8035b0:	2000683a 	jmp	r4
  8035b4:	00804528 	cmpgeui	r2,zero,276
  8035b8:	00803718 	cmpnei	r2,zero,220
  8035bc:	00803718 	cmpnei	r2,zero,220
  8035c0:	00804514 	movui	r2,276
  8035c4:	00803718 	cmpnei	r2,zero,220
  8035c8:	00803718 	cmpnei	r2,zero,220
  8035cc:	00803718 	cmpnei	r2,zero,220
  8035d0:	00803718 	cmpnei	r2,zero,220
  8035d4:	00803718 	cmpnei	r2,zero,220
  8035d8:	00803718 	cmpnei	r2,zero,220
  8035dc:	008042f4 	movhi	r2,267
  8035e0:	00804504 	movi	r2,276
  8035e4:	00803718 	cmpnei	r2,zero,220
  8035e8:	0080430c 	andi	r2,zero,268
  8035ec:	008045ac 	andhi	r2,zero,278
  8035f0:	00803718 	cmpnei	r2,zero,220
  8035f4:	00804598 	cmpnei	r2,zero,278
  8035f8:	00804554 	movui	r2,277
  8035fc:	00804554 	movui	r2,277
  803600:	00804554 	movui	r2,277
  803604:	00804554 	movui	r2,277
  803608:	00804554 	movui	r2,277
  80360c:	00804554 	movui	r2,277
  803610:	00804554 	movui	r2,277
  803614:	00804554 	movui	r2,277
  803618:	00804554 	movui	r2,277
  80361c:	00803718 	cmpnei	r2,zero,220
  803620:	00803718 	cmpnei	r2,zero,220
  803624:	00803718 	cmpnei	r2,zero,220
  803628:	00803718 	cmpnei	r2,zero,220
  80362c:	00803718 	cmpnei	r2,zero,220
  803630:	00803718 	cmpnei	r2,zero,220
  803634:	00803718 	cmpnei	r2,zero,220
  803638:	00803718 	cmpnei	r2,zero,220
  80363c:	00803718 	cmpnei	r2,zero,220
  803640:	00803718 	cmpnei	r2,zero,220
  803644:	00803d70 	cmpltui	r2,zero,245
  803648:	008043dc 	xori	r2,zero,271
  80364c:	00803718 	cmpnei	r2,zero,220
  803650:	008043dc 	xori	r2,zero,271
  803654:	00803718 	cmpnei	r2,zero,220
  803658:	00803718 	cmpnei	r2,zero,220
  80365c:	00803718 	cmpnei	r2,zero,220
  803660:	00803718 	cmpnei	r2,zero,220
  803664:	00804540 	call	80454 <OSCtxSw_SWITCH_PC+0x80414>
  803668:	00803718 	cmpnei	r2,zero,220
  80366c:	00803718 	cmpnei	r2,zero,220
  803670:	00803e24 	muli	r2,zero,248
  803674:	00803718 	cmpnei	r2,zero,220
  803678:	00803718 	cmpnei	r2,zero,220
  80367c:	00803718 	cmpnei	r2,zero,220
  803680:	00803718 	cmpnei	r2,zero,220
  803684:	00803718 	cmpnei	r2,zero,220
  803688:	00803e70 	cmpltui	r2,zero,249
  80368c:	00803718 	cmpnei	r2,zero,220
  803690:	00803718 	cmpnei	r2,zero,220
  803694:	00804490 	cmplti	r2,zero,274
  803698:	00803718 	cmpnei	r2,zero,220
  80369c:	00803718 	cmpnei	r2,zero,220
  8036a0:	00803718 	cmpnei	r2,zero,220
  8036a4:	00803718 	cmpnei	r2,zero,220
  8036a8:	00803718 	cmpnei	r2,zero,220
  8036ac:	00803718 	cmpnei	r2,zero,220
  8036b0:	00803718 	cmpnei	r2,zero,220
  8036b4:	00803718 	cmpnei	r2,zero,220
  8036b8:	00803718 	cmpnei	r2,zero,220
  8036bc:	00803718 	cmpnei	r2,zero,220
  8036c0:	00804464 	muli	r2,zero,273
  8036c4:	00803d7c 	xorhi	r2,zero,245
  8036c8:	008043dc 	xori	r2,zero,271
  8036cc:	008043dc 	xori	r2,zero,271
  8036d0:	008043dc 	xori	r2,zero,271
  8036d4:	008043c8 	cmpgei	r2,zero,271
  8036d8:	00803d7c 	xorhi	r2,zero,245
  8036dc:	00803718 	cmpnei	r2,zero,220
  8036e0:	00803718 	cmpnei	r2,zero,220
  8036e4:	00804350 	cmplti	r2,zero,269
  8036e8:	00803718 	cmpnei	r2,zero,220
  8036ec:	00804320 	cmpeqi	r2,zero,268
  8036f0:	00803e30 	cmpltui	r2,zero,248
  8036f4:	00804380 	call	80438 <OSCtxSw_SWITCH_PC+0x803f8>
  8036f8:	0080436c 	andhi	r2,zero,269
  8036fc:	00803718 	cmpnei	r2,zero,220
  803700:	00804614 	movui	r2,280
  803704:	00803718 	cmpnei	r2,zero,220
  803708:	00803e7c 	xorhi	r2,zero,249
  80370c:	00803718 	cmpnei	r2,zero,220
  803710:	00803718 	cmpnei	r2,zero,220
  803714:	008044f4 	movhi	r2,275
  803718:	d9014d17 	ldw	r4,1332(sp)
  80371c:	2000ce26 	beq	r4,zero,803a58 <___vfprintf_internal_r+0x6d4>
  803720:	01400044 	movi	r5,1
  803724:	d9800f04 	addi	r6,sp,60
  803728:	d9c14015 	stw	r7,1280(sp)
  80372c:	d9414515 	stw	r5,1300(sp)
  803730:	d9814115 	stw	r6,1284(sp)
  803734:	280f883a 	mov	r7,r5
  803738:	d9000f05 	stb	r4,60(sp)
  80373c:	d8000405 	stb	zero,16(sp)
  803740:	d8014615 	stw	zero,1304(sp)
  803744:	d8c14c17 	ldw	r3,1328(sp)
  803748:	1880008c 	andi	r2,r3,2
  80374c:	1005003a 	cmpeq	r2,r2,zero
  803750:	d8815015 	stw	r2,1344(sp)
  803754:	1000031e 	bne	r2,zero,803764 <___vfprintf_internal_r+0x3e0>
  803758:	d9014517 	ldw	r4,1300(sp)
  80375c:	21000084 	addi	r4,r4,2
  803760:	d9014515 	stw	r4,1300(sp)
  803764:	d9414c17 	ldw	r5,1328(sp)
  803768:	2940210c 	andi	r5,r5,132
  80376c:	d9414e15 	stw	r5,1336(sp)
  803770:	28002d1e 	bne	r5,zero,803828 <___vfprintf_internal_r+0x4a4>
  803774:	d9814a17 	ldw	r6,1320(sp)
  803778:	d8814517 	ldw	r2,1300(sp)
  80377c:	30a1c83a 	sub	r16,r6,r2
  803780:	0400290e 	bge	zero,r16,803828 <___vfprintf_internal_r+0x4a4>
  803784:	00800404 	movi	r2,16
  803788:	14045e0e 	bge	r2,r16,804904 <___vfprintf_internal_r+0x1580>
  80378c:	dc800e17 	ldw	r18,56(sp)
  803790:	dc400d17 	ldw	r17,52(sp)
  803794:	1027883a 	mov	r19,r2
  803798:	070020b4 	movhi	fp,130
  80379c:	e7219184 	addi	fp,fp,-31162
  8037a0:	050001c4 	movi	r20,7
  8037a4:	00000306 	br	8037b4 <___vfprintf_internal_r+0x430>
  8037a8:	843ffc04 	addi	r16,r16,-16
  8037ac:	ad400204 	addi	r21,r21,8
  8037b0:	9c00130e 	bge	r19,r16,803800 <___vfprintf_internal_r+0x47c>
  8037b4:	94800404 	addi	r18,r18,16
  8037b8:	8c400044 	addi	r17,r17,1
  8037bc:	af000015 	stw	fp,0(r21)
  8037c0:	acc00115 	stw	r19,4(r21)
  8037c4:	dc800e15 	stw	r18,56(sp)
  8037c8:	dc400d15 	stw	r17,52(sp)
  8037cc:	a47ff60e 	bge	r20,r17,8037a8 <___vfprintf_internal_r+0x424>
  8037d0:	d9014f17 	ldw	r4,1340(sp)
  8037d4:	b00b883a 	mov	r5,r22
  8037d8:	d9800c04 	addi	r6,sp,48
  8037dc:	d9c15115 	stw	r7,1348(sp)
  8037e0:	080332c0 	call	80332c <__sprint_r>
  8037e4:	d9c15117 	ldw	r7,1348(sp)
  8037e8:	10009e1e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  8037ec:	843ffc04 	addi	r16,r16,-16
  8037f0:	dc800e17 	ldw	r18,56(sp)
  8037f4:	dc400d17 	ldw	r17,52(sp)
  8037f8:	dd401904 	addi	r21,sp,100
  8037fc:	9c3fed16 	blt	r19,r16,8037b4 <___vfprintf_internal_r+0x430>
  803800:	9425883a 	add	r18,r18,r16
  803804:	8c400044 	addi	r17,r17,1
  803808:	008001c4 	movi	r2,7
  80380c:	af000015 	stw	fp,0(r21)
  803810:	ac000115 	stw	r16,4(r21)
  803814:	dc800e15 	stw	r18,56(sp)
  803818:	dc400d15 	stw	r17,52(sp)
  80381c:	1441f516 	blt	r2,r17,803ff4 <___vfprintf_internal_r+0xc70>
  803820:	ad400204 	addi	r21,r21,8
  803824:	00000206 	br	803830 <___vfprintf_internal_r+0x4ac>
  803828:	dc800e17 	ldw	r18,56(sp)
  80382c:	dc400d17 	ldw	r17,52(sp)
  803830:	d8800407 	ldb	r2,16(sp)
  803834:	10000b26 	beq	r2,zero,803864 <___vfprintf_internal_r+0x4e0>
  803838:	00800044 	movi	r2,1
  80383c:	94800044 	addi	r18,r18,1
  803840:	8c400044 	addi	r17,r17,1
  803844:	a8800115 	stw	r2,4(r21)
  803848:	d8c00404 	addi	r3,sp,16
  80384c:	008001c4 	movi	r2,7
  803850:	a8c00015 	stw	r3,0(r21)
  803854:	dc800e15 	stw	r18,56(sp)
  803858:	dc400d15 	stw	r17,52(sp)
  80385c:	1441da16 	blt	r2,r17,803fc8 <___vfprintf_internal_r+0xc44>
  803860:	ad400204 	addi	r21,r21,8
  803864:	d9015017 	ldw	r4,1344(sp)
  803868:	20000b1e 	bne	r4,zero,803898 <___vfprintf_internal_r+0x514>
  80386c:	d8800444 	addi	r2,sp,17
  803870:	94800084 	addi	r18,r18,2
  803874:	8c400044 	addi	r17,r17,1
  803878:	a8800015 	stw	r2,0(r21)
  80387c:	00c00084 	movi	r3,2
  803880:	008001c4 	movi	r2,7
  803884:	a8c00115 	stw	r3,4(r21)
  803888:	dc800e15 	stw	r18,56(sp)
  80388c:	dc400d15 	stw	r17,52(sp)
  803890:	1441c216 	blt	r2,r17,803f9c <___vfprintf_internal_r+0xc18>
  803894:	ad400204 	addi	r21,r21,8
  803898:	d9414e17 	ldw	r5,1336(sp)
  80389c:	00802004 	movi	r2,128
  8038a0:	2880b126 	beq	r5,r2,803b68 <___vfprintf_internal_r+0x7e4>
  8038a4:	d8c14617 	ldw	r3,1304(sp)
  8038a8:	19e1c83a 	sub	r16,r3,r7
  8038ac:	0400260e 	bge	zero,r16,803948 <___vfprintf_internal_r+0x5c4>
  8038b0:	00800404 	movi	r2,16
  8038b4:	1403cf0e 	bge	r2,r16,8047f4 <___vfprintf_internal_r+0x1470>
  8038b8:	1027883a 	mov	r19,r2
  8038bc:	070020b4 	movhi	fp,130
  8038c0:	e7218d84 	addi	fp,fp,-31178
  8038c4:	050001c4 	movi	r20,7
  8038c8:	00000306 	br	8038d8 <___vfprintf_internal_r+0x554>
  8038cc:	843ffc04 	addi	r16,r16,-16
  8038d0:	ad400204 	addi	r21,r21,8
  8038d4:	9c00130e 	bge	r19,r16,803924 <___vfprintf_internal_r+0x5a0>
  8038d8:	94800404 	addi	r18,r18,16
  8038dc:	8c400044 	addi	r17,r17,1
  8038e0:	af000015 	stw	fp,0(r21)
  8038e4:	acc00115 	stw	r19,4(r21)
  8038e8:	dc800e15 	stw	r18,56(sp)
  8038ec:	dc400d15 	stw	r17,52(sp)
  8038f0:	a47ff60e 	bge	r20,r17,8038cc <___vfprintf_internal_r+0x548>
  8038f4:	d9014f17 	ldw	r4,1340(sp)
  8038f8:	b00b883a 	mov	r5,r22
  8038fc:	d9800c04 	addi	r6,sp,48
  803900:	d9c15115 	stw	r7,1348(sp)
  803904:	080332c0 	call	80332c <__sprint_r>
  803908:	d9c15117 	ldw	r7,1348(sp)
  80390c:	1000551e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  803910:	843ffc04 	addi	r16,r16,-16
  803914:	dc800e17 	ldw	r18,56(sp)
  803918:	dc400d17 	ldw	r17,52(sp)
  80391c:	dd401904 	addi	r21,sp,100
  803920:	9c3fed16 	blt	r19,r16,8038d8 <___vfprintf_internal_r+0x554>
  803924:	9425883a 	add	r18,r18,r16
  803928:	8c400044 	addi	r17,r17,1
  80392c:	008001c4 	movi	r2,7
  803930:	af000015 	stw	fp,0(r21)
  803934:	ac000115 	stw	r16,4(r21)
  803938:	dc800e15 	stw	r18,56(sp)
  80393c:	dc400d15 	stw	r17,52(sp)
  803940:	14418216 	blt	r2,r17,803f4c <___vfprintf_internal_r+0xbc8>
  803944:	ad400204 	addi	r21,r21,8
  803948:	d9014c17 	ldw	r4,1328(sp)
  80394c:	2080400c 	andi	r2,r4,256
  803950:	10004a1e 	bne	r2,zero,803a7c <___vfprintf_internal_r+0x6f8>
  803954:	d9414117 	ldw	r5,1284(sp)
  803958:	91e5883a 	add	r18,r18,r7
  80395c:	8c400044 	addi	r17,r17,1
  803960:	008001c4 	movi	r2,7
  803964:	a9400015 	stw	r5,0(r21)
  803968:	a9c00115 	stw	r7,4(r21)
  80396c:	dc800e15 	stw	r18,56(sp)
  803970:	dc400d15 	stw	r17,52(sp)
  803974:	14416716 	blt	r2,r17,803f14 <___vfprintf_internal_r+0xb90>
  803978:	a8c00204 	addi	r3,r21,8
  80397c:	d9814c17 	ldw	r6,1328(sp)
  803980:	3080010c 	andi	r2,r6,4
  803984:	10002826 	beq	r2,zero,803a28 <___vfprintf_internal_r+0x6a4>
  803988:	d8814a17 	ldw	r2,1320(sp)
  80398c:	d9014517 	ldw	r4,1300(sp)
  803990:	1121c83a 	sub	r16,r2,r4
  803994:	0400240e 	bge	zero,r16,803a28 <___vfprintf_internal_r+0x6a4>
  803998:	00800404 	movi	r2,16
  80399c:	1404550e 	bge	r2,r16,804af4 <___vfprintf_internal_r+0x1770>
  8039a0:	dc400d17 	ldw	r17,52(sp)
  8039a4:	1027883a 	mov	r19,r2
  8039a8:	070020b4 	movhi	fp,130
  8039ac:	e7219184 	addi	fp,fp,-31162
  8039b0:	050001c4 	movi	r20,7
  8039b4:	00000306 	br	8039c4 <___vfprintf_internal_r+0x640>
  8039b8:	843ffc04 	addi	r16,r16,-16
  8039bc:	18c00204 	addi	r3,r3,8
  8039c0:	9c00110e 	bge	r19,r16,803a08 <___vfprintf_internal_r+0x684>
  8039c4:	94800404 	addi	r18,r18,16
  8039c8:	8c400044 	addi	r17,r17,1
  8039cc:	1f000015 	stw	fp,0(r3)
  8039d0:	1cc00115 	stw	r19,4(r3)
  8039d4:	dc800e15 	stw	r18,56(sp)
  8039d8:	dc400d15 	stw	r17,52(sp)
  8039dc:	a47ff60e 	bge	r20,r17,8039b8 <___vfprintf_internal_r+0x634>
  8039e0:	d9014f17 	ldw	r4,1340(sp)
  8039e4:	b00b883a 	mov	r5,r22
  8039e8:	d9800c04 	addi	r6,sp,48
  8039ec:	080332c0 	call	80332c <__sprint_r>
  8039f0:	10001c1e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  8039f4:	843ffc04 	addi	r16,r16,-16
  8039f8:	dc800e17 	ldw	r18,56(sp)
  8039fc:	dc400d17 	ldw	r17,52(sp)
  803a00:	d8c01904 	addi	r3,sp,100
  803a04:	9c3fef16 	blt	r19,r16,8039c4 <___vfprintf_internal_r+0x640>
  803a08:	9425883a 	add	r18,r18,r16
  803a0c:	8c400044 	addi	r17,r17,1
  803a10:	008001c4 	movi	r2,7
  803a14:	1f000015 	stw	fp,0(r3)
  803a18:	1c000115 	stw	r16,4(r3)
  803a1c:	dc800e15 	stw	r18,56(sp)
  803a20:	dc400d15 	stw	r17,52(sp)
  803a24:	1440cb16 	blt	r2,r17,803d54 <___vfprintf_internal_r+0x9d0>
  803a28:	d8814a17 	ldw	r2,1320(sp)
  803a2c:	d9414517 	ldw	r5,1300(sp)
  803a30:	1140010e 	bge	r2,r5,803a38 <___vfprintf_internal_r+0x6b4>
  803a34:	2805883a 	mov	r2,r5
  803a38:	d9814b17 	ldw	r6,1324(sp)
  803a3c:	308d883a 	add	r6,r6,r2
  803a40:	d9814b15 	stw	r6,1324(sp)
  803a44:	90013b1e 	bne	r18,zero,803f34 <___vfprintf_internal_r+0xbb0>
  803a48:	d9c14017 	ldw	r7,1280(sp)
  803a4c:	dd401904 	addi	r21,sp,100
  803a50:	d8000d15 	stw	zero,52(sp)
  803a54:	003ea706 	br	8034f4 <___vfprintf_internal_r+0x170>
  803a58:	d8800e17 	ldw	r2,56(sp)
  803a5c:	1005451e 	bne	r2,zero,804f74 <___vfprintf_internal_r+0x1bf0>
  803a60:	d8000d15 	stw	zero,52(sp)
  803a64:	b080030b 	ldhu	r2,12(r22)
  803a68:	1080100c 	andi	r2,r2,64
  803a6c:	103e8726 	beq	r2,zero,80348c <___vfprintf_internal_r+0x108>
  803a70:	00bfffc4 	movi	r2,-1
  803a74:	d8814b15 	stw	r2,1324(sp)
  803a78:	003e8406 	br	80348c <___vfprintf_internal_r+0x108>
  803a7c:	d9814d17 	ldw	r6,1332(sp)
  803a80:	00801944 	movi	r2,101
  803a84:	11806e16 	blt	r2,r6,803c40 <___vfprintf_internal_r+0x8bc>
  803a88:	d9414717 	ldw	r5,1308(sp)
  803a8c:	00c00044 	movi	r3,1
  803a90:	1943490e 	bge	r3,r5,8047b8 <___vfprintf_internal_r+0x1434>
  803a94:	d8814117 	ldw	r2,1284(sp)
  803a98:	94800044 	addi	r18,r18,1
  803a9c:	8c400044 	addi	r17,r17,1
  803aa0:	a8800015 	stw	r2,0(r21)
  803aa4:	008001c4 	movi	r2,7
  803aa8:	a8c00115 	stw	r3,4(r21)
  803aac:	dc800e15 	stw	r18,56(sp)
  803ab0:	dc400d15 	stw	r17,52(sp)
  803ab4:	1441ca16 	blt	r2,r17,8041e0 <___vfprintf_internal_r+0xe5c>
  803ab8:	a8c00204 	addi	r3,r21,8
  803abc:	d9014917 	ldw	r4,1316(sp)
  803ac0:	00800044 	movi	r2,1
  803ac4:	94800044 	addi	r18,r18,1
  803ac8:	8c400044 	addi	r17,r17,1
  803acc:	18800115 	stw	r2,4(r3)
  803ad0:	008001c4 	movi	r2,7
  803ad4:	19000015 	stw	r4,0(r3)
  803ad8:	dc800e15 	stw	r18,56(sp)
  803adc:	dc400d15 	stw	r17,52(sp)
  803ae0:	1441b616 	blt	r2,r17,8041bc <___vfprintf_internal_r+0xe38>
  803ae4:	1cc00204 	addi	r19,r3,8
  803ae8:	d9014217 	ldw	r4,1288(sp)
  803aec:	d9414317 	ldw	r5,1292(sp)
  803af0:	000d883a 	mov	r6,zero
  803af4:	000f883a 	mov	r7,zero
  803af8:	080bd600 	call	80bd60 <__nedf2>
  803afc:	10017426 	beq	r2,zero,8040d0 <___vfprintf_internal_r+0xd4c>
  803b00:	d9414717 	ldw	r5,1308(sp)
  803b04:	d9814117 	ldw	r6,1284(sp)
  803b08:	8c400044 	addi	r17,r17,1
  803b0c:	2c85883a 	add	r2,r5,r18
  803b10:	14bfffc4 	addi	r18,r2,-1
  803b14:	28bfffc4 	addi	r2,r5,-1
  803b18:	30c00044 	addi	r3,r6,1
  803b1c:	98800115 	stw	r2,4(r19)
  803b20:	008001c4 	movi	r2,7
  803b24:	98c00015 	stw	r3,0(r19)
  803b28:	dc800e15 	stw	r18,56(sp)
  803b2c:	dc400d15 	stw	r17,52(sp)
  803b30:	14418e16 	blt	r2,r17,80416c <___vfprintf_internal_r+0xde8>
  803b34:	9cc00204 	addi	r19,r19,8
  803b38:	d9414817 	ldw	r5,1312(sp)
  803b3c:	d8800804 	addi	r2,sp,32
  803b40:	8c400044 	addi	r17,r17,1
  803b44:	9165883a 	add	r18,r18,r5
  803b48:	98800015 	stw	r2,0(r19)
  803b4c:	008001c4 	movi	r2,7
  803b50:	99400115 	stw	r5,4(r19)
  803b54:	dc800e15 	stw	r18,56(sp)
  803b58:	dc400d15 	stw	r17,52(sp)
  803b5c:	1440ed16 	blt	r2,r17,803f14 <___vfprintf_internal_r+0xb90>
  803b60:	98c00204 	addi	r3,r19,8
  803b64:	003f8506 	br	80397c <___vfprintf_internal_r+0x5f8>
  803b68:	d9814a17 	ldw	r6,1320(sp)
  803b6c:	d8814517 	ldw	r2,1300(sp)
  803b70:	30a1c83a 	sub	r16,r6,r2
  803b74:	043f4b0e 	bge	zero,r16,8038a4 <___vfprintf_internal_r+0x520>
  803b78:	00800404 	movi	r2,16
  803b7c:	14043a0e 	bge	r2,r16,804c68 <___vfprintf_internal_r+0x18e4>
  803b80:	1027883a 	mov	r19,r2
  803b84:	070020b4 	movhi	fp,130
  803b88:	e7218d84 	addi	fp,fp,-31178
  803b8c:	050001c4 	movi	r20,7
  803b90:	00000306 	br	803ba0 <___vfprintf_internal_r+0x81c>
  803b94:	843ffc04 	addi	r16,r16,-16
  803b98:	ad400204 	addi	r21,r21,8
  803b9c:	9c00130e 	bge	r19,r16,803bec <___vfprintf_internal_r+0x868>
  803ba0:	94800404 	addi	r18,r18,16
  803ba4:	8c400044 	addi	r17,r17,1
  803ba8:	af000015 	stw	fp,0(r21)
  803bac:	acc00115 	stw	r19,4(r21)
  803bb0:	dc800e15 	stw	r18,56(sp)
  803bb4:	dc400d15 	stw	r17,52(sp)
  803bb8:	a47ff60e 	bge	r20,r17,803b94 <___vfprintf_internal_r+0x810>
  803bbc:	d9014f17 	ldw	r4,1340(sp)
  803bc0:	b00b883a 	mov	r5,r22
  803bc4:	d9800c04 	addi	r6,sp,48
  803bc8:	d9c15115 	stw	r7,1348(sp)
  803bcc:	080332c0 	call	80332c <__sprint_r>
  803bd0:	d9c15117 	ldw	r7,1348(sp)
  803bd4:	103fa31e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  803bd8:	843ffc04 	addi	r16,r16,-16
  803bdc:	dc800e17 	ldw	r18,56(sp)
  803be0:	dc400d17 	ldw	r17,52(sp)
  803be4:	dd401904 	addi	r21,sp,100
  803be8:	9c3fed16 	blt	r19,r16,803ba0 <___vfprintf_internal_r+0x81c>
  803bec:	9425883a 	add	r18,r18,r16
  803bf0:	8c400044 	addi	r17,r17,1
  803bf4:	008001c4 	movi	r2,7
  803bf8:	af000015 	stw	fp,0(r21)
  803bfc:	ac000115 	stw	r16,4(r21)
  803c00:	dc800e15 	stw	r18,56(sp)
  803c04:	dc400d15 	stw	r17,52(sp)
  803c08:	14416116 	blt	r2,r17,804190 <___vfprintf_internal_r+0xe0c>
  803c0c:	ad400204 	addi	r21,r21,8
  803c10:	003f2406 	br	8038a4 <___vfprintf_internal_r+0x520>
  803c14:	d9014f17 	ldw	r4,1340(sp)
  803c18:	0806e500 	call	806e50 <__sinit>
  803c1c:	d9c15117 	ldw	r7,1348(sp)
  803c20:	003def06 	br	8033e0 <___vfprintf_internal_r+0x5c>
  803c24:	d9014f17 	ldw	r4,1340(sp)
  803c28:	b00b883a 	mov	r5,r22
  803c2c:	d9c15115 	stw	r7,1348(sp)
  803c30:	080526c0 	call	80526c <__swsetup_r>
  803c34:	d9c15117 	ldw	r7,1348(sp)
  803c38:	103dee26 	beq	r2,zero,8033f4 <___vfprintf_internal_r+0x70>
  803c3c:	003f8c06 	br	803a70 <___vfprintf_internal_r+0x6ec>
  803c40:	d9014217 	ldw	r4,1288(sp)
  803c44:	d9414317 	ldw	r5,1292(sp)
  803c48:	000d883a 	mov	r6,zero
  803c4c:	000f883a 	mov	r7,zero
  803c50:	080bcd80 	call	80bcd8 <__eqdf2>
  803c54:	1000f21e 	bne	r2,zero,804020 <___vfprintf_internal_r+0xc9c>
  803c58:	008020b4 	movhi	r2,130
  803c5c:	10a18d04 	addi	r2,r2,-31180
  803c60:	94800044 	addi	r18,r18,1
  803c64:	8c400044 	addi	r17,r17,1
  803c68:	a8800015 	stw	r2,0(r21)
  803c6c:	00c00044 	movi	r3,1
  803c70:	008001c4 	movi	r2,7
  803c74:	a8c00115 	stw	r3,4(r21)
  803c78:	dc800e15 	stw	r18,56(sp)
  803c7c:	dc400d15 	stw	r17,52(sp)
  803c80:	14430016 	blt	r2,r17,804884 <___vfprintf_internal_r+0x1500>
  803c84:	a8c00204 	addi	r3,r21,8
  803c88:	d8800517 	ldw	r2,20(sp)
  803c8c:	d9014717 	ldw	r4,1308(sp)
  803c90:	11015c0e 	bge	r2,r4,804204 <___vfprintf_internal_r+0xe80>
  803c94:	dc400d17 	ldw	r17,52(sp)
  803c98:	d9814917 	ldw	r6,1316(sp)
  803c9c:	00800044 	movi	r2,1
  803ca0:	94800044 	addi	r18,r18,1
  803ca4:	8c400044 	addi	r17,r17,1
  803ca8:	18800115 	stw	r2,4(r3)
  803cac:	008001c4 	movi	r2,7
  803cb0:	19800015 	stw	r6,0(r3)
  803cb4:	dc800e15 	stw	r18,56(sp)
  803cb8:	dc400d15 	stw	r17,52(sp)
  803cbc:	14431616 	blt	r2,r17,804918 <___vfprintf_internal_r+0x1594>
  803cc0:	18c00204 	addi	r3,r3,8
  803cc4:	d8814717 	ldw	r2,1308(sp)
  803cc8:	143fffc4 	addi	r16,r2,-1
  803ccc:	043f2b0e 	bge	zero,r16,80397c <___vfprintf_internal_r+0x5f8>
  803cd0:	00800404 	movi	r2,16
  803cd4:	1402a80e 	bge	r2,r16,804778 <___vfprintf_internal_r+0x13f4>
  803cd8:	dc400d17 	ldw	r17,52(sp)
  803cdc:	1027883a 	mov	r19,r2
  803ce0:	070020b4 	movhi	fp,130
  803ce4:	e7218d84 	addi	fp,fp,-31178
  803ce8:	050001c4 	movi	r20,7
  803cec:	00000306 	br	803cfc <___vfprintf_internal_r+0x978>
  803cf0:	18c00204 	addi	r3,r3,8
  803cf4:	843ffc04 	addi	r16,r16,-16
  803cf8:	9c02a20e 	bge	r19,r16,804784 <___vfprintf_internal_r+0x1400>
  803cfc:	94800404 	addi	r18,r18,16
  803d00:	8c400044 	addi	r17,r17,1
  803d04:	1f000015 	stw	fp,0(r3)
  803d08:	1cc00115 	stw	r19,4(r3)
  803d0c:	dc800e15 	stw	r18,56(sp)
  803d10:	dc400d15 	stw	r17,52(sp)
  803d14:	a47ff60e 	bge	r20,r17,803cf0 <___vfprintf_internal_r+0x96c>
  803d18:	d9014f17 	ldw	r4,1340(sp)
  803d1c:	b00b883a 	mov	r5,r22
  803d20:	d9800c04 	addi	r6,sp,48
  803d24:	080332c0 	call	80332c <__sprint_r>
  803d28:	103f4e1e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  803d2c:	dc800e17 	ldw	r18,56(sp)
  803d30:	dc400d17 	ldw	r17,52(sp)
  803d34:	d8c01904 	addi	r3,sp,100
  803d38:	003fee06 	br	803cf4 <___vfprintf_internal_r+0x970>
  803d3c:	d8802c0b 	ldhu	r2,176(sp)
  803d40:	00ffffc4 	movi	r3,-1
  803d44:	d8c14b15 	stw	r3,1324(sp)
  803d48:	1080100c 	andi	r2,r2,64
  803d4c:	103dcc1e 	bne	r2,zero,803480 <___vfprintf_internal_r+0xfc>
  803d50:	003dce06 	br	80348c <___vfprintf_internal_r+0x108>
  803d54:	d9014f17 	ldw	r4,1340(sp)
  803d58:	b00b883a 	mov	r5,r22
  803d5c:	d9800c04 	addi	r6,sp,48
  803d60:	080332c0 	call	80332c <__sprint_r>
  803d64:	103f3f1e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  803d68:	dc800e17 	ldw	r18,56(sp)
  803d6c:	003f2e06 	br	803a28 <___vfprintf_internal_r+0x6a4>
  803d70:	d9414c17 	ldw	r5,1328(sp)
  803d74:	29400414 	ori	r5,r5,16
  803d78:	d9414c15 	stw	r5,1328(sp)
  803d7c:	d9814c17 	ldw	r6,1328(sp)
  803d80:	3080080c 	andi	r2,r6,32
  803d84:	10014f1e 	bne	r2,zero,8042c4 <___vfprintf_internal_r+0xf40>
  803d88:	d8c14c17 	ldw	r3,1328(sp)
  803d8c:	1880040c 	andi	r2,r3,16
  803d90:	1002f01e 	bne	r2,zero,804954 <___vfprintf_internal_r+0x15d0>
  803d94:	d9014c17 	ldw	r4,1328(sp)
  803d98:	2080100c 	andi	r2,r4,64
  803d9c:	1002ed26 	beq	r2,zero,804954 <___vfprintf_internal_r+0x15d0>
  803da0:	3880000f 	ldh	r2,0(r7)
  803da4:	39c00104 	addi	r7,r7,4
  803da8:	d9c14015 	stw	r7,1280(sp)
  803dac:	1023d7fa 	srai	r17,r2,31
  803db0:	1021883a 	mov	r16,r2
  803db4:	88037816 	blt	r17,zero,804b98 <___vfprintf_internal_r+0x1814>
  803db8:	01000044 	movi	r4,1
  803dbc:	98000416 	blt	r19,zero,803dd0 <___vfprintf_internal_r+0xa4c>
  803dc0:	d8c14c17 	ldw	r3,1328(sp)
  803dc4:	00bfdfc4 	movi	r2,-129
  803dc8:	1886703a 	and	r3,r3,r2
  803dcc:	d8c14c15 	stw	r3,1328(sp)
  803dd0:	8444b03a 	or	r2,r16,r17
  803dd4:	10022c1e 	bne	r2,zero,804688 <___vfprintf_internal_r+0x1304>
  803dd8:	98022b1e 	bne	r19,zero,804688 <___vfprintf_internal_r+0x1304>
  803ddc:	20803fcc 	andi	r2,r4,255
  803de0:	1002a126 	beq	r2,zero,804868 <___vfprintf_internal_r+0x14e4>
  803de4:	d8c01904 	addi	r3,sp,100
  803de8:	dd000f04 	addi	r20,sp,60
  803dec:	d8c14115 	stw	r3,1284(sp)
  803df0:	d8c14117 	ldw	r3,1284(sp)
  803df4:	dcc14515 	stw	r19,1300(sp)
  803df8:	a0c5c83a 	sub	r2,r20,r3
  803dfc:	11c00a04 	addi	r7,r2,40
  803e00:	99c0010e 	bge	r19,r7,803e08 <___vfprintf_internal_r+0xa84>
  803e04:	d9c14515 	stw	r7,1300(sp)
  803e08:	dcc14615 	stw	r19,1304(sp)
  803e0c:	d8800407 	ldb	r2,16(sp)
  803e10:	103e4c26 	beq	r2,zero,803744 <___vfprintf_internal_r+0x3c0>
  803e14:	d8814517 	ldw	r2,1300(sp)
  803e18:	10800044 	addi	r2,r2,1
  803e1c:	d8814515 	stw	r2,1300(sp)
  803e20:	003e4806 	br	803744 <___vfprintf_internal_r+0x3c0>
  803e24:	d9814c17 	ldw	r6,1328(sp)
  803e28:	31800414 	ori	r6,r6,16
  803e2c:	d9814c15 	stw	r6,1328(sp)
  803e30:	d8c14c17 	ldw	r3,1328(sp)
  803e34:	1880080c 	andi	r2,r3,32
  803e38:	1001271e 	bne	r2,zero,8042d8 <___vfprintf_internal_r+0xf54>
  803e3c:	d9414c17 	ldw	r5,1328(sp)
  803e40:	2880040c 	andi	r2,r5,16
  803e44:	1002bc1e 	bne	r2,zero,804938 <___vfprintf_internal_r+0x15b4>
  803e48:	d9814c17 	ldw	r6,1328(sp)
  803e4c:	3080100c 	andi	r2,r6,64
  803e50:	1002b926 	beq	r2,zero,804938 <___vfprintf_internal_r+0x15b4>
  803e54:	3c00000b 	ldhu	r16,0(r7)
  803e58:	0009883a 	mov	r4,zero
  803e5c:	39c00104 	addi	r7,r7,4
  803e60:	0023883a 	mov	r17,zero
  803e64:	d9c14015 	stw	r7,1280(sp)
  803e68:	d8000405 	stb	zero,16(sp)
  803e6c:	003fd306 	br	803dbc <___vfprintf_internal_r+0xa38>
  803e70:	d9014c17 	ldw	r4,1328(sp)
  803e74:	21000414 	ori	r4,r4,16
  803e78:	d9014c15 	stw	r4,1328(sp)
  803e7c:	d9414c17 	ldw	r5,1328(sp)
  803e80:	2880080c 	andi	r2,r5,32
  803e84:	1001081e 	bne	r2,zero,8042a8 <___vfprintf_internal_r+0xf24>
  803e88:	d8c14c17 	ldw	r3,1328(sp)
  803e8c:	1880040c 	andi	r2,r3,16
  803e90:	1002b61e 	bne	r2,zero,80496c <___vfprintf_internal_r+0x15e8>
  803e94:	d9014c17 	ldw	r4,1328(sp)
  803e98:	2080100c 	andi	r2,r4,64
  803e9c:	1002b326 	beq	r2,zero,80496c <___vfprintf_internal_r+0x15e8>
  803ea0:	3c00000b 	ldhu	r16,0(r7)
  803ea4:	01000044 	movi	r4,1
  803ea8:	39c00104 	addi	r7,r7,4
  803eac:	0023883a 	mov	r17,zero
  803eb0:	d9c14015 	stw	r7,1280(sp)
  803eb4:	d8000405 	stb	zero,16(sp)
  803eb8:	003fc006 	br	803dbc <___vfprintf_internal_r+0xa38>
  803ebc:	d9014f17 	ldw	r4,1340(sp)
  803ec0:	b00b883a 	mov	r5,r22
  803ec4:	d9800c04 	addi	r6,sp,48
  803ec8:	080332c0 	call	80332c <__sprint_r>
  803ecc:	103ee51e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  803ed0:	dc800e17 	ldw	r18,56(sp)
  803ed4:	d8c01904 	addi	r3,sp,100
  803ed8:	d9814c17 	ldw	r6,1328(sp)
  803edc:	3080004c 	andi	r2,r6,1
  803ee0:	1005003a 	cmpeq	r2,r2,zero
  803ee4:	103ea51e 	bne	r2,zero,80397c <___vfprintf_internal_r+0x5f8>
  803ee8:	00800044 	movi	r2,1
  803eec:	dc400d17 	ldw	r17,52(sp)
  803ef0:	18800115 	stw	r2,4(r3)
  803ef4:	d8814917 	ldw	r2,1316(sp)
  803ef8:	94800044 	addi	r18,r18,1
  803efc:	8c400044 	addi	r17,r17,1
  803f00:	18800015 	stw	r2,0(r3)
  803f04:	008001c4 	movi	r2,7
  803f08:	dc800e15 	stw	r18,56(sp)
  803f0c:	dc400d15 	stw	r17,52(sp)
  803f10:	1442240e 	bge	r2,r17,8047a4 <___vfprintf_internal_r+0x1420>
  803f14:	d9014f17 	ldw	r4,1340(sp)
  803f18:	b00b883a 	mov	r5,r22
  803f1c:	d9800c04 	addi	r6,sp,48
  803f20:	080332c0 	call	80332c <__sprint_r>
  803f24:	103ecf1e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  803f28:	dc800e17 	ldw	r18,56(sp)
  803f2c:	d8c01904 	addi	r3,sp,100
  803f30:	003e9206 	br	80397c <___vfprintf_internal_r+0x5f8>
  803f34:	d9014f17 	ldw	r4,1340(sp)
  803f38:	b00b883a 	mov	r5,r22
  803f3c:	d9800c04 	addi	r6,sp,48
  803f40:	080332c0 	call	80332c <__sprint_r>
  803f44:	103ec026 	beq	r2,zero,803a48 <___vfprintf_internal_r+0x6c4>
  803f48:	003ec606 	br	803a64 <___vfprintf_internal_r+0x6e0>
  803f4c:	d9014f17 	ldw	r4,1340(sp)
  803f50:	b00b883a 	mov	r5,r22
  803f54:	d9800c04 	addi	r6,sp,48
  803f58:	d9c15115 	stw	r7,1348(sp)
  803f5c:	080332c0 	call	80332c <__sprint_r>
  803f60:	d9c15117 	ldw	r7,1348(sp)
  803f64:	103ebf1e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  803f68:	dc800e17 	ldw	r18,56(sp)
  803f6c:	dc400d17 	ldw	r17,52(sp)
  803f70:	dd401904 	addi	r21,sp,100
  803f74:	003e7406 	br	803948 <___vfprintf_internal_r+0x5c4>
  803f78:	d9014f17 	ldw	r4,1340(sp)
  803f7c:	b00b883a 	mov	r5,r22
  803f80:	d9800c04 	addi	r6,sp,48
  803f84:	d9c15115 	stw	r7,1348(sp)
  803f88:	080332c0 	call	80332c <__sprint_r>
  803f8c:	d9c15117 	ldw	r7,1348(sp)
  803f90:	103eb41e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  803f94:	dd401904 	addi	r21,sp,100
  803f98:	003d6d06 	br	803550 <___vfprintf_internal_r+0x1cc>
  803f9c:	d9014f17 	ldw	r4,1340(sp)
  803fa0:	b00b883a 	mov	r5,r22
  803fa4:	d9800c04 	addi	r6,sp,48
  803fa8:	d9c15115 	stw	r7,1348(sp)
  803fac:	080332c0 	call	80332c <__sprint_r>
  803fb0:	d9c15117 	ldw	r7,1348(sp)
  803fb4:	103eab1e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  803fb8:	dc800e17 	ldw	r18,56(sp)
  803fbc:	dc400d17 	ldw	r17,52(sp)
  803fc0:	dd401904 	addi	r21,sp,100
  803fc4:	003e3406 	br	803898 <___vfprintf_internal_r+0x514>
  803fc8:	d9014f17 	ldw	r4,1340(sp)
  803fcc:	b00b883a 	mov	r5,r22
  803fd0:	d9800c04 	addi	r6,sp,48
  803fd4:	d9c15115 	stw	r7,1348(sp)
  803fd8:	080332c0 	call	80332c <__sprint_r>
  803fdc:	d9c15117 	ldw	r7,1348(sp)
  803fe0:	103ea01e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  803fe4:	dc800e17 	ldw	r18,56(sp)
  803fe8:	dc400d17 	ldw	r17,52(sp)
  803fec:	dd401904 	addi	r21,sp,100
  803ff0:	003e1c06 	br	803864 <___vfprintf_internal_r+0x4e0>
  803ff4:	d9014f17 	ldw	r4,1340(sp)
  803ff8:	b00b883a 	mov	r5,r22
  803ffc:	d9800c04 	addi	r6,sp,48
  804000:	d9c15115 	stw	r7,1348(sp)
  804004:	080332c0 	call	80332c <__sprint_r>
  804008:	d9c15117 	ldw	r7,1348(sp)
  80400c:	103e951e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  804010:	dc800e17 	ldw	r18,56(sp)
  804014:	dc400d17 	ldw	r17,52(sp)
  804018:	dd401904 	addi	r21,sp,100
  80401c:	003e0406 	br	803830 <___vfprintf_internal_r+0x4ac>
  804020:	d9000517 	ldw	r4,20(sp)
  804024:	0102580e 	bge	zero,r4,804988 <___vfprintf_internal_r+0x1604>
  804028:	d9814717 	ldw	r6,1308(sp)
  80402c:	21807a16 	blt	r4,r6,804218 <___vfprintf_internal_r+0xe94>
  804030:	d8814117 	ldw	r2,1284(sp)
  804034:	91a5883a 	add	r18,r18,r6
  804038:	8c400044 	addi	r17,r17,1
  80403c:	a8800015 	stw	r2,0(r21)
  804040:	008001c4 	movi	r2,7
  804044:	a9800115 	stw	r6,4(r21)
  804048:	dc800e15 	stw	r18,56(sp)
  80404c:	dc400d15 	stw	r17,52(sp)
  804050:	1442fc16 	blt	r2,r17,804c44 <___vfprintf_internal_r+0x18c0>
  804054:	a8c00204 	addi	r3,r21,8
  804058:	d9414717 	ldw	r5,1308(sp)
  80405c:	2161c83a 	sub	r16,r4,r5
  804060:	043f9d0e 	bge	zero,r16,803ed8 <___vfprintf_internal_r+0xb54>
  804064:	00800404 	movi	r2,16
  804068:	1402190e 	bge	r2,r16,8048d0 <___vfprintf_internal_r+0x154c>
  80406c:	dc400d17 	ldw	r17,52(sp)
  804070:	1027883a 	mov	r19,r2
  804074:	070020b4 	movhi	fp,130
  804078:	e7218d84 	addi	fp,fp,-31178
  80407c:	050001c4 	movi	r20,7
  804080:	00000306 	br	804090 <___vfprintf_internal_r+0xd0c>
  804084:	18c00204 	addi	r3,r3,8
  804088:	843ffc04 	addi	r16,r16,-16
  80408c:	9c02130e 	bge	r19,r16,8048dc <___vfprintf_internal_r+0x1558>
  804090:	94800404 	addi	r18,r18,16
  804094:	8c400044 	addi	r17,r17,1
  804098:	1f000015 	stw	fp,0(r3)
  80409c:	1cc00115 	stw	r19,4(r3)
  8040a0:	dc800e15 	stw	r18,56(sp)
  8040a4:	dc400d15 	stw	r17,52(sp)
  8040a8:	a47ff60e 	bge	r20,r17,804084 <___vfprintf_internal_r+0xd00>
  8040ac:	d9014f17 	ldw	r4,1340(sp)
  8040b0:	b00b883a 	mov	r5,r22
  8040b4:	d9800c04 	addi	r6,sp,48
  8040b8:	080332c0 	call	80332c <__sprint_r>
  8040bc:	103e691e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  8040c0:	dc800e17 	ldw	r18,56(sp)
  8040c4:	dc400d17 	ldw	r17,52(sp)
  8040c8:	d8c01904 	addi	r3,sp,100
  8040cc:	003fee06 	br	804088 <___vfprintf_internal_r+0xd04>
  8040d0:	d8814717 	ldw	r2,1308(sp)
  8040d4:	143fffc4 	addi	r16,r2,-1
  8040d8:	043e970e 	bge	zero,r16,803b38 <___vfprintf_internal_r+0x7b4>
  8040dc:	00800404 	movi	r2,16
  8040e0:	1400180e 	bge	r2,r16,804144 <___vfprintf_internal_r+0xdc0>
  8040e4:	1029883a 	mov	r20,r2
  8040e8:	070020b4 	movhi	fp,130
  8040ec:	e7218d84 	addi	fp,fp,-31178
  8040f0:	054001c4 	movi	r21,7
  8040f4:	00000306 	br	804104 <___vfprintf_internal_r+0xd80>
  8040f8:	9cc00204 	addi	r19,r19,8
  8040fc:	843ffc04 	addi	r16,r16,-16
  804100:	a400120e 	bge	r20,r16,80414c <___vfprintf_internal_r+0xdc8>
  804104:	94800404 	addi	r18,r18,16
  804108:	8c400044 	addi	r17,r17,1
  80410c:	9f000015 	stw	fp,0(r19)
  804110:	9d000115 	stw	r20,4(r19)
  804114:	dc800e15 	stw	r18,56(sp)
  804118:	dc400d15 	stw	r17,52(sp)
  80411c:	ac7ff60e 	bge	r21,r17,8040f8 <___vfprintf_internal_r+0xd74>
  804120:	d9014f17 	ldw	r4,1340(sp)
  804124:	b00b883a 	mov	r5,r22
  804128:	d9800c04 	addi	r6,sp,48
  80412c:	080332c0 	call	80332c <__sprint_r>
  804130:	103e4c1e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  804134:	dc800e17 	ldw	r18,56(sp)
  804138:	dc400d17 	ldw	r17,52(sp)
  80413c:	dcc01904 	addi	r19,sp,100
  804140:	003fee06 	br	8040fc <___vfprintf_internal_r+0xd78>
  804144:	070020b4 	movhi	fp,130
  804148:	e7218d84 	addi	fp,fp,-31178
  80414c:	9425883a 	add	r18,r18,r16
  804150:	8c400044 	addi	r17,r17,1
  804154:	008001c4 	movi	r2,7
  804158:	9f000015 	stw	fp,0(r19)
  80415c:	9c000115 	stw	r16,4(r19)
  804160:	dc800e15 	stw	r18,56(sp)
  804164:	dc400d15 	stw	r17,52(sp)
  804168:	147e720e 	bge	r2,r17,803b34 <___vfprintf_internal_r+0x7b0>
  80416c:	d9014f17 	ldw	r4,1340(sp)
  804170:	b00b883a 	mov	r5,r22
  804174:	d9800c04 	addi	r6,sp,48
  804178:	080332c0 	call	80332c <__sprint_r>
  80417c:	103e391e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  804180:	dc800e17 	ldw	r18,56(sp)
  804184:	dc400d17 	ldw	r17,52(sp)
  804188:	dcc01904 	addi	r19,sp,100
  80418c:	003e6a06 	br	803b38 <___vfprintf_internal_r+0x7b4>
  804190:	d9014f17 	ldw	r4,1340(sp)
  804194:	b00b883a 	mov	r5,r22
  804198:	d9800c04 	addi	r6,sp,48
  80419c:	d9c15115 	stw	r7,1348(sp)
  8041a0:	080332c0 	call	80332c <__sprint_r>
  8041a4:	d9c15117 	ldw	r7,1348(sp)
  8041a8:	103e2e1e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  8041ac:	dc800e17 	ldw	r18,56(sp)
  8041b0:	dc400d17 	ldw	r17,52(sp)
  8041b4:	dd401904 	addi	r21,sp,100
  8041b8:	003dba06 	br	8038a4 <___vfprintf_internal_r+0x520>
  8041bc:	d9014f17 	ldw	r4,1340(sp)
  8041c0:	b00b883a 	mov	r5,r22
  8041c4:	d9800c04 	addi	r6,sp,48
  8041c8:	080332c0 	call	80332c <__sprint_r>
  8041cc:	103e251e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  8041d0:	dc800e17 	ldw	r18,56(sp)
  8041d4:	dc400d17 	ldw	r17,52(sp)
  8041d8:	dcc01904 	addi	r19,sp,100
  8041dc:	003e4206 	br	803ae8 <___vfprintf_internal_r+0x764>
  8041e0:	d9014f17 	ldw	r4,1340(sp)
  8041e4:	b00b883a 	mov	r5,r22
  8041e8:	d9800c04 	addi	r6,sp,48
  8041ec:	080332c0 	call	80332c <__sprint_r>
  8041f0:	103e1c1e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  8041f4:	dc800e17 	ldw	r18,56(sp)
  8041f8:	dc400d17 	ldw	r17,52(sp)
  8041fc:	d8c01904 	addi	r3,sp,100
  804200:	003e2e06 	br	803abc <___vfprintf_internal_r+0x738>
  804204:	d9414c17 	ldw	r5,1328(sp)
  804208:	2880004c 	andi	r2,r5,1
  80420c:	1005003a 	cmpeq	r2,r2,zero
  804210:	103dda1e 	bne	r2,zero,80397c <___vfprintf_internal_r+0x5f8>
  804214:	003e9f06 	br	803c94 <___vfprintf_internal_r+0x910>
  804218:	d8c14117 	ldw	r3,1284(sp)
  80421c:	9125883a 	add	r18,r18,r4
  804220:	8c400044 	addi	r17,r17,1
  804224:	008001c4 	movi	r2,7
  804228:	a8c00015 	stw	r3,0(r21)
  80422c:	a9000115 	stw	r4,4(r21)
  804230:	dc800e15 	stw	r18,56(sp)
  804234:	dc400d15 	stw	r17,52(sp)
  804238:	14426c16 	blt	r2,r17,804bec <___vfprintf_internal_r+0x1868>
  80423c:	a8c00204 	addi	r3,r21,8
  804240:	d9414917 	ldw	r5,1316(sp)
  804244:	00800044 	movi	r2,1
  804248:	94800044 	addi	r18,r18,1
  80424c:	8c400044 	addi	r17,r17,1
  804250:	18800115 	stw	r2,4(r3)
  804254:	008001c4 	movi	r2,7
  804258:	19400015 	stw	r5,0(r3)
  80425c:	dc800e15 	stw	r18,56(sp)
  804260:	dc400d15 	stw	r17,52(sp)
  804264:	2021883a 	mov	r16,r4
  804268:	14425616 	blt	r2,r17,804bc4 <___vfprintf_internal_r+0x1840>
  80426c:	19400204 	addi	r5,r3,8
  804270:	d9814717 	ldw	r6,1308(sp)
  804274:	8c400044 	addi	r17,r17,1
  804278:	dc400d15 	stw	r17,52(sp)
  80427c:	3107c83a 	sub	r3,r6,r4
  804280:	d9014117 	ldw	r4,1284(sp)
  804284:	90e5883a 	add	r18,r18,r3
  804288:	28c00115 	stw	r3,4(r5)
  80428c:	8105883a 	add	r2,r16,r4
  804290:	28800015 	stw	r2,0(r5)
  804294:	008001c4 	movi	r2,7
  804298:	dc800e15 	stw	r18,56(sp)
  80429c:	147f1d16 	blt	r2,r17,803f14 <___vfprintf_internal_r+0xb90>
  8042a0:	28c00204 	addi	r3,r5,8
  8042a4:	003db506 	br	80397c <___vfprintf_internal_r+0x5f8>
  8042a8:	3c000017 	ldw	r16,0(r7)
  8042ac:	3c400117 	ldw	r17,4(r7)
  8042b0:	39800204 	addi	r6,r7,8
  8042b4:	01000044 	movi	r4,1
  8042b8:	d9814015 	stw	r6,1280(sp)
  8042bc:	d8000405 	stb	zero,16(sp)
  8042c0:	003ebe06 	br	803dbc <___vfprintf_internal_r+0xa38>
  8042c4:	3c000017 	ldw	r16,0(r7)
  8042c8:	3c400117 	ldw	r17,4(r7)
  8042cc:	38800204 	addi	r2,r7,8
  8042d0:	d8814015 	stw	r2,1280(sp)
  8042d4:	003eb706 	br	803db4 <___vfprintf_internal_r+0xa30>
  8042d8:	3c000017 	ldw	r16,0(r7)
  8042dc:	3c400117 	ldw	r17,4(r7)
  8042e0:	39000204 	addi	r4,r7,8
  8042e4:	d9014015 	stw	r4,1280(sp)
  8042e8:	0009883a 	mov	r4,zero
  8042ec:	d8000405 	stb	zero,16(sp)
  8042f0:	003eb206 	br	803dbc <___vfprintf_internal_r+0xa38>
  8042f4:	38c00017 	ldw	r3,0(r7)
  8042f8:	39c00104 	addi	r7,r7,4
  8042fc:	d8c14a15 	stw	r3,1320(sp)
  804300:	1800d70e 	bge	r3,zero,804660 <___vfprintf_internal_r+0x12dc>
  804304:	00c7c83a 	sub	r3,zero,r3
  804308:	d8c14a15 	stw	r3,1320(sp)
  80430c:	d9014c17 	ldw	r4,1328(sp)
  804310:	b8c00007 	ldb	r3,0(r23)
  804314:	21000114 	ori	r4,r4,4
  804318:	d9014c15 	stw	r4,1328(sp)
  80431c:	003c9806 	br	803580 <___vfprintf_internal_r+0x1fc>
  804320:	d9814c17 	ldw	r6,1328(sp)
  804324:	3080080c 	andi	r2,r6,32
  804328:	1001f626 	beq	r2,zero,804b04 <___vfprintf_internal_r+0x1780>
  80432c:	d9014b17 	ldw	r4,1324(sp)
  804330:	38800017 	ldw	r2,0(r7)
  804334:	39c00104 	addi	r7,r7,4
  804338:	d9c14015 	stw	r7,1280(sp)
  80433c:	2007d7fa 	srai	r3,r4,31
  804340:	d9c14017 	ldw	r7,1280(sp)
  804344:	11000015 	stw	r4,0(r2)
  804348:	10c00115 	stw	r3,4(r2)
  80434c:	003c6906 	br	8034f4 <___vfprintf_internal_r+0x170>
  804350:	b8c00007 	ldb	r3,0(r23)
  804354:	00801b04 	movi	r2,108
  804358:	18825526 	beq	r3,r2,804cb0 <___vfprintf_internal_r+0x192c>
  80435c:	d9414c17 	ldw	r5,1328(sp)
  804360:	29400414 	ori	r5,r5,16
  804364:	d9414c15 	stw	r5,1328(sp)
  804368:	003c8506 	br	803580 <___vfprintf_internal_r+0x1fc>
  80436c:	d9814c17 	ldw	r6,1328(sp)
  804370:	b8c00007 	ldb	r3,0(r23)
  804374:	31800814 	ori	r6,r6,32
  804378:	d9814c15 	stw	r6,1328(sp)
  80437c:	003c8006 	br	803580 <___vfprintf_internal_r+0x1fc>
  804380:	d8814c17 	ldw	r2,1328(sp)
  804384:	3c000017 	ldw	r16,0(r7)
  804388:	00c01e04 	movi	r3,120
  80438c:	10800094 	ori	r2,r2,2
  804390:	d8814c15 	stw	r2,1328(sp)
  804394:	39c00104 	addi	r7,r7,4
  804398:	014020b4 	movhi	r5,130
  80439c:	29617604 	addi	r5,r5,-31272
  8043a0:	00800c04 	movi	r2,48
  8043a4:	0023883a 	mov	r17,zero
  8043a8:	01000084 	movi	r4,2
  8043ac:	d9c14015 	stw	r7,1280(sp)
  8043b0:	d8c14d15 	stw	r3,1332(sp)
  8043b4:	d9414415 	stw	r5,1296(sp)
  8043b8:	d8800445 	stb	r2,17(sp)
  8043bc:	d8c00485 	stb	r3,18(sp)
  8043c0:	d8000405 	stb	zero,16(sp)
  8043c4:	003e7d06 	br	803dbc <___vfprintf_internal_r+0xa38>
  8043c8:	d8814c17 	ldw	r2,1328(sp)
  8043cc:	b8c00007 	ldb	r3,0(r23)
  8043d0:	10801014 	ori	r2,r2,64
  8043d4:	d8814c15 	stw	r2,1328(sp)
  8043d8:	003c6906 	br	803580 <___vfprintf_internal_r+0x1fc>
  8043dc:	d9414c17 	ldw	r5,1328(sp)
  8043e0:	2880020c 	andi	r2,r5,8
  8043e4:	1001e526 	beq	r2,zero,804b7c <___vfprintf_internal_r+0x17f8>
  8043e8:	39800017 	ldw	r6,0(r7)
  8043ec:	38800204 	addi	r2,r7,8
  8043f0:	d8814015 	stw	r2,1280(sp)
  8043f4:	d9814215 	stw	r6,1288(sp)
  8043f8:	39c00117 	ldw	r7,4(r7)
  8043fc:	d9c14315 	stw	r7,1292(sp)
  804400:	d9014217 	ldw	r4,1288(sp)
  804404:	d9414317 	ldw	r5,1292(sp)
  804408:	0808f000 	call	808f00 <__isinfd>
  80440c:	10021d26 	beq	r2,zero,804c84 <___vfprintf_internal_r+0x1900>
  804410:	d9014217 	ldw	r4,1288(sp)
  804414:	d9414317 	ldw	r5,1292(sp)
  804418:	000d883a 	mov	r6,zero
  80441c:	000f883a 	mov	r7,zero
  804420:	080bef80 	call	80bef8 <__ltdf2>
  804424:	1002d016 	blt	r2,zero,804f68 <___vfprintf_internal_r+0x1be4>
  804428:	d9414d17 	ldw	r5,1332(sp)
  80442c:	008011c4 	movi	r2,71
  804430:	11421016 	blt	r2,r5,804c74 <___vfprintf_internal_r+0x18f0>
  804434:	018020b4 	movhi	r6,130
  804438:	31a17b04 	addi	r6,r6,-31252
  80443c:	d9814115 	stw	r6,1284(sp)
  804440:	d9014c17 	ldw	r4,1328(sp)
  804444:	00c000c4 	movi	r3,3
  804448:	00bfdfc4 	movi	r2,-129
  80444c:	2088703a 	and	r4,r4,r2
  804450:	180f883a 	mov	r7,r3
  804454:	d8c14515 	stw	r3,1300(sp)
  804458:	d9014c15 	stw	r4,1328(sp)
  80445c:	d8014615 	stw	zero,1304(sp)
  804460:	003e6a06 	br	803e0c <___vfprintf_internal_r+0xa88>
  804464:	38800017 	ldw	r2,0(r7)
  804468:	00c00044 	movi	r3,1
  80446c:	39c00104 	addi	r7,r7,4
  804470:	d9c14015 	stw	r7,1280(sp)
  804474:	d9000f04 	addi	r4,sp,60
  804478:	180f883a 	mov	r7,r3
  80447c:	d8c14515 	stw	r3,1300(sp)
  804480:	d9014115 	stw	r4,1284(sp)
  804484:	d8800f05 	stb	r2,60(sp)
  804488:	d8000405 	stb	zero,16(sp)
  80448c:	003cac06 	br	803740 <___vfprintf_internal_r+0x3bc>
  804490:	014020b4 	movhi	r5,130
  804494:	29618104 	addi	r5,r5,-31228
  804498:	d9414415 	stw	r5,1296(sp)
  80449c:	d9814c17 	ldw	r6,1328(sp)
  8044a0:	3080080c 	andi	r2,r6,32
  8044a4:	1000ff26 	beq	r2,zero,8048a4 <___vfprintf_internal_r+0x1520>
  8044a8:	3c000017 	ldw	r16,0(r7)
  8044ac:	3c400117 	ldw	r17,4(r7)
  8044b0:	38800204 	addi	r2,r7,8
  8044b4:	d8814015 	stw	r2,1280(sp)
  8044b8:	d9414c17 	ldw	r5,1328(sp)
  8044bc:	2880004c 	andi	r2,r5,1
  8044c0:	1005003a 	cmpeq	r2,r2,zero
  8044c4:	1000b91e 	bne	r2,zero,8047ac <___vfprintf_internal_r+0x1428>
  8044c8:	8444b03a 	or	r2,r16,r17
  8044cc:	1000b726 	beq	r2,zero,8047ac <___vfprintf_internal_r+0x1428>
  8044d0:	d9814d17 	ldw	r6,1332(sp)
  8044d4:	29400094 	ori	r5,r5,2
  8044d8:	00800c04 	movi	r2,48
  8044dc:	01000084 	movi	r4,2
  8044e0:	d9414c15 	stw	r5,1328(sp)
  8044e4:	d8800445 	stb	r2,17(sp)
  8044e8:	d9800485 	stb	r6,18(sp)
  8044ec:	d8000405 	stb	zero,16(sp)
  8044f0:	003e3206 	br	803dbc <___vfprintf_internal_r+0xa38>
  8044f4:	018020b4 	movhi	r6,130
  8044f8:	31a17604 	addi	r6,r6,-31272
  8044fc:	d9814415 	stw	r6,1296(sp)
  804500:	003fe606 	br	80449c <___vfprintf_internal_r+0x1118>
  804504:	00800ac4 	movi	r2,43
  804508:	d8800405 	stb	r2,16(sp)
  80450c:	b8c00007 	ldb	r3,0(r23)
  804510:	003c1b06 	br	803580 <___vfprintf_internal_r+0x1fc>
  804514:	d8814c17 	ldw	r2,1328(sp)
  804518:	b8c00007 	ldb	r3,0(r23)
  80451c:	10800054 	ori	r2,r2,1
  804520:	d8814c15 	stw	r2,1328(sp)
  804524:	003c1606 	br	803580 <___vfprintf_internal_r+0x1fc>
  804528:	d8800407 	ldb	r2,16(sp)
  80452c:	10004c1e 	bne	r2,zero,804660 <___vfprintf_internal_r+0x12dc>
  804530:	00800804 	movi	r2,32
  804534:	d8800405 	stb	r2,16(sp)
  804538:	b8c00007 	ldb	r3,0(r23)
  80453c:	003c1006 	br	803580 <___vfprintf_internal_r+0x1fc>
  804540:	d9814c17 	ldw	r6,1328(sp)
  804544:	b8c00007 	ldb	r3,0(r23)
  804548:	31800214 	ori	r6,r6,8
  80454c:	d9814c15 	stw	r6,1328(sp)
  804550:	003c0b06 	br	803580 <___vfprintf_internal_r+0x1fc>
  804554:	0009883a 	mov	r4,zero
  804558:	04000244 	movi	r16,9
  80455c:	01400284 	movi	r5,10
  804560:	d9c15115 	stw	r7,1348(sp)
  804564:	08019440 	call	801944 <__mulsi3>
  804568:	b9000007 	ldb	r4,0(r23)
  80456c:	d8c14d17 	ldw	r3,1332(sp)
  804570:	bdc00044 	addi	r23,r23,1
  804574:	d9014d15 	stw	r4,1332(sp)
  804578:	d9414d17 	ldw	r5,1332(sp)
  80457c:	1885883a 	add	r2,r3,r2
  804580:	113ff404 	addi	r4,r2,-48
  804584:	28bff404 	addi	r2,r5,-48
  804588:	d9c15117 	ldw	r7,1348(sp)
  80458c:	80bff32e 	bgeu	r16,r2,80455c <___vfprintf_internal_r+0x11d8>
  804590:	d9014a15 	stw	r4,1320(sp)
  804594:	003bfc06 	br	803588 <___vfprintf_internal_r+0x204>
  804598:	d8814c17 	ldw	r2,1328(sp)
  80459c:	b8c00007 	ldb	r3,0(r23)
  8045a0:	10802014 	ori	r2,r2,128
  8045a4:	d8814c15 	stw	r2,1328(sp)
  8045a8:	003bf506 	br	803580 <___vfprintf_internal_r+0x1fc>
  8045ac:	b8c00007 	ldb	r3,0(r23)
  8045b0:	00800a84 	movi	r2,42
  8045b4:	bdc00044 	addi	r23,r23,1
  8045b8:	18831826 	beq	r3,r2,80521c <___vfprintf_internal_r+0x1e98>
  8045bc:	d8c14d15 	stw	r3,1332(sp)
  8045c0:	18bff404 	addi	r2,r3,-48
  8045c4:	00c00244 	movi	r3,9
  8045c8:	18827b36 	bltu	r3,r2,804fb8 <___vfprintf_internal_r+0x1c34>
  8045cc:	1821883a 	mov	r16,r3
  8045d0:	0009883a 	mov	r4,zero
  8045d4:	01400284 	movi	r5,10
  8045d8:	d9c15115 	stw	r7,1348(sp)
  8045dc:	08019440 	call	801944 <__mulsi3>
  8045e0:	d9414d17 	ldw	r5,1332(sp)
  8045e4:	b9800007 	ldb	r6,0(r23)
  8045e8:	d9c15117 	ldw	r7,1348(sp)
  8045ec:	1145883a 	add	r2,r2,r5
  8045f0:	113ff404 	addi	r4,r2,-48
  8045f4:	30bff404 	addi	r2,r6,-48
  8045f8:	d9814d15 	stw	r6,1332(sp)
  8045fc:	bdc00044 	addi	r23,r23,1
  804600:	80bff42e 	bgeu	r16,r2,8045d4 <___vfprintf_internal_r+0x1250>
  804604:	2027883a 	mov	r19,r4
  804608:	203bdf0e 	bge	r4,zero,803588 <___vfprintf_internal_r+0x204>
  80460c:	04ffffc4 	movi	r19,-1
  804610:	003bdd06 	br	803588 <___vfprintf_internal_r+0x204>
  804614:	d8000405 	stb	zero,16(sp)
  804618:	39800017 	ldw	r6,0(r7)
  80461c:	39c00104 	addi	r7,r7,4
  804620:	d9c14015 	stw	r7,1280(sp)
  804624:	d9814115 	stw	r6,1284(sp)
  804628:	3001c926 	beq	r6,zero,804d50 <___vfprintf_internal_r+0x19cc>
  80462c:	98000e16 	blt	r19,zero,804668 <___vfprintf_internal_r+0x12e4>
  804630:	d9014117 	ldw	r4,1284(sp)
  804634:	000b883a 	mov	r5,zero
  804638:	980d883a 	mov	r6,r19
  80463c:	0807d900 	call	807d90 <memchr>
  804640:	10025926 	beq	r2,zero,804fa8 <___vfprintf_internal_r+0x1c24>
  804644:	d8c14117 	ldw	r3,1284(sp)
  804648:	10cfc83a 	sub	r7,r2,r3
  80464c:	99c19e16 	blt	r19,r7,804cc8 <___vfprintf_internal_r+0x1944>
  804650:	d9c14515 	stw	r7,1300(sp)
  804654:	38000916 	blt	r7,zero,80467c <___vfprintf_internal_r+0x12f8>
  804658:	d8014615 	stw	zero,1304(sp)
  80465c:	003deb06 	br	803e0c <___vfprintf_internal_r+0xa88>
  804660:	b8c00007 	ldb	r3,0(r23)
  804664:	003bc606 	br	803580 <___vfprintf_internal_r+0x1fc>
  804668:	d9014117 	ldw	r4,1284(sp)
  80466c:	080329c0 	call	80329c <strlen>
  804670:	d8814515 	stw	r2,1300(sp)
  804674:	100f883a 	mov	r7,r2
  804678:	103ff70e 	bge	r2,zero,804658 <___vfprintf_internal_r+0x12d4>
  80467c:	d8014515 	stw	zero,1300(sp)
  804680:	d8014615 	stw	zero,1304(sp)
  804684:	003de106 	br	803e0c <___vfprintf_internal_r+0xa88>
  804688:	20c03fcc 	andi	r3,r4,255
  80468c:	00800044 	movi	r2,1
  804690:	18802d26 	beq	r3,r2,804748 <___vfprintf_internal_r+0x13c4>
  804694:	18800e36 	bltu	r3,r2,8046d0 <___vfprintf_internal_r+0x134c>
  804698:	00800084 	movi	r2,2
  80469c:	1880fa26 	beq	r3,r2,804a88 <___vfprintf_internal_r+0x1704>
  8046a0:	010020b4 	movhi	r4,130
  8046a4:	21218604 	addi	r4,r4,-31208
  8046a8:	080329c0 	call	80329c <strlen>
  8046ac:	100f883a 	mov	r7,r2
  8046b0:	dcc14515 	stw	r19,1300(sp)
  8046b4:	9880010e 	bge	r19,r2,8046bc <___vfprintf_internal_r+0x1338>
  8046b8:	d8814515 	stw	r2,1300(sp)
  8046bc:	008020b4 	movhi	r2,130
  8046c0:	10a18604 	addi	r2,r2,-31208
  8046c4:	dcc14615 	stw	r19,1304(sp)
  8046c8:	d8814115 	stw	r2,1284(sp)
  8046cc:	003dcf06 	br	803e0c <___vfprintf_internal_r+0xa88>
  8046d0:	d9401904 	addi	r5,sp,100
  8046d4:	dd000f04 	addi	r20,sp,60
  8046d8:	d9414115 	stw	r5,1284(sp)
  8046dc:	880a977a 	slli	r5,r17,29
  8046e0:	d9814117 	ldw	r6,1284(sp)
  8046e4:	8004d0fa 	srli	r2,r16,3
  8046e8:	8806d0fa 	srli	r3,r17,3
  8046ec:	810001cc 	andi	r4,r16,7
  8046f0:	2884b03a 	or	r2,r5,r2
  8046f4:	31bfffc4 	addi	r6,r6,-1
  8046f8:	21000c04 	addi	r4,r4,48
  8046fc:	d9814115 	stw	r6,1284(sp)
  804700:	10cab03a 	or	r5,r2,r3
  804704:	31000005 	stb	r4,0(r6)
  804708:	1021883a 	mov	r16,r2
  80470c:	1823883a 	mov	r17,r3
  804710:	283ff21e 	bne	r5,zero,8046dc <___vfprintf_internal_r+0x1358>
  804714:	d8c14c17 	ldw	r3,1328(sp)
  804718:	1880004c 	andi	r2,r3,1
  80471c:	1005003a 	cmpeq	r2,r2,zero
  804720:	103db31e 	bne	r2,zero,803df0 <___vfprintf_internal_r+0xa6c>
  804724:	20803fcc 	andi	r2,r4,255
  804728:	1080201c 	xori	r2,r2,128
  80472c:	10bfe004 	addi	r2,r2,-128
  804730:	00c00c04 	movi	r3,48
  804734:	10fdae26 	beq	r2,r3,803df0 <___vfprintf_internal_r+0xa6c>
  804738:	31bfffc4 	addi	r6,r6,-1
  80473c:	d9814115 	stw	r6,1284(sp)
  804740:	30c00005 	stb	r3,0(r6)
  804744:	003daa06 	br	803df0 <___vfprintf_internal_r+0xa6c>
  804748:	88800068 	cmpgeui	r2,r17,1
  80474c:	10002c1e 	bne	r2,zero,804800 <___vfprintf_internal_r+0x147c>
  804750:	8800021e 	bne	r17,zero,80475c <___vfprintf_internal_r+0x13d8>
  804754:	00800244 	movi	r2,9
  804758:	14002936 	bltu	r2,r16,804800 <___vfprintf_internal_r+0x147c>
  80475c:	d90018c4 	addi	r4,sp,99
  804760:	dd000f04 	addi	r20,sp,60
  804764:	d9014115 	stw	r4,1284(sp)
  804768:	d9014117 	ldw	r4,1284(sp)
  80476c:	80800c04 	addi	r2,r16,48
  804770:	20800005 	stb	r2,0(r4)
  804774:	003d9e06 	br	803df0 <___vfprintf_internal_r+0xa6c>
  804778:	dc400d17 	ldw	r17,52(sp)
  80477c:	070020b4 	movhi	fp,130
  804780:	e7218d84 	addi	fp,fp,-31178
  804784:	9425883a 	add	r18,r18,r16
  804788:	8c400044 	addi	r17,r17,1
  80478c:	008001c4 	movi	r2,7
  804790:	1f000015 	stw	fp,0(r3)
  804794:	1c000115 	stw	r16,4(r3)
  804798:	dc800e15 	stw	r18,56(sp)
  80479c:	dc400d15 	stw	r17,52(sp)
  8047a0:	147ddc16 	blt	r2,r17,803f14 <___vfprintf_internal_r+0xb90>
  8047a4:	18c00204 	addi	r3,r3,8
  8047a8:	003c7406 	br	80397c <___vfprintf_internal_r+0x5f8>
  8047ac:	01000084 	movi	r4,2
  8047b0:	d8000405 	stb	zero,16(sp)
  8047b4:	003d8106 	br	803dbc <___vfprintf_internal_r+0xa38>
  8047b8:	d9814c17 	ldw	r6,1328(sp)
  8047bc:	30c4703a 	and	r2,r6,r3
  8047c0:	1005003a 	cmpeq	r2,r2,zero
  8047c4:	103cb326 	beq	r2,zero,803a94 <___vfprintf_internal_r+0x710>
  8047c8:	d9014117 	ldw	r4,1284(sp)
  8047cc:	94800044 	addi	r18,r18,1
  8047d0:	8c400044 	addi	r17,r17,1
  8047d4:	008001c4 	movi	r2,7
  8047d8:	a9000015 	stw	r4,0(r21)
  8047dc:	a8c00115 	stw	r3,4(r21)
  8047e0:	dc800e15 	stw	r18,56(sp)
  8047e4:	dc400d15 	stw	r17,52(sp)
  8047e8:	147e6016 	blt	r2,r17,80416c <___vfprintf_internal_r+0xde8>
  8047ec:	acc00204 	addi	r19,r21,8
  8047f0:	003cd106 	br	803b38 <___vfprintf_internal_r+0x7b4>
  8047f4:	070020b4 	movhi	fp,130
  8047f8:	e7218d84 	addi	fp,fp,-31178
  8047fc:	003c4906 	br	803924 <___vfprintf_internal_r+0x5a0>
  804800:	dd000f04 	addi	r20,sp,60
  804804:	dc801904 	addi	r18,sp,100
  804808:	8009883a 	mov	r4,r16
  80480c:	880b883a 	mov	r5,r17
  804810:	01800284 	movi	r6,10
  804814:	000f883a 	mov	r7,zero
  804818:	080b05c0 	call	80b05c <__umoddi3>
  80481c:	12000c04 	addi	r8,r2,48
  804820:	94bfffc4 	addi	r18,r18,-1
  804824:	8009883a 	mov	r4,r16
  804828:	880b883a 	mov	r5,r17
  80482c:	01800284 	movi	r6,10
  804830:	000f883a 	mov	r7,zero
  804834:	92000005 	stb	r8,0(r18)
  804838:	080a9f00 	call	80a9f0 <__udivdi3>
  80483c:	1009883a 	mov	r4,r2
  804840:	1021883a 	mov	r16,r2
  804844:	18800068 	cmpgeui	r2,r3,1
  804848:	1823883a 	mov	r17,r3
  80484c:	103fee1e 	bne	r2,zero,804808 <___vfprintf_internal_r+0x1484>
  804850:	1800021e 	bne	r3,zero,80485c <___vfprintf_internal_r+0x14d8>
  804854:	00800244 	movi	r2,9
  804858:	113feb36 	bltu	r2,r4,804808 <___vfprintf_internal_r+0x1484>
  80485c:	94bfffc4 	addi	r18,r18,-1
  804860:	dc814115 	stw	r18,1284(sp)
  804864:	003fc006 	br	804768 <___vfprintf_internal_r+0x13e4>
  804868:	d9014c17 	ldw	r4,1328(sp)
  80486c:	2080004c 	andi	r2,r4,1
  804870:	10009a1e 	bne	r2,zero,804adc <___vfprintf_internal_r+0x1758>
  804874:	d9401904 	addi	r5,sp,100
  804878:	dd000f04 	addi	r20,sp,60
  80487c:	d9414115 	stw	r5,1284(sp)
  804880:	003d5b06 	br	803df0 <___vfprintf_internal_r+0xa6c>
  804884:	d9014f17 	ldw	r4,1340(sp)
  804888:	b00b883a 	mov	r5,r22
  80488c:	d9800c04 	addi	r6,sp,48
  804890:	080332c0 	call	80332c <__sprint_r>
  804894:	103c731e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  804898:	dc800e17 	ldw	r18,56(sp)
  80489c:	d8c01904 	addi	r3,sp,100
  8048a0:	003cf906 	br	803c88 <___vfprintf_internal_r+0x904>
  8048a4:	d8c14c17 	ldw	r3,1328(sp)
  8048a8:	1880040c 	andi	r2,r3,16
  8048ac:	1000711e 	bne	r2,zero,804a74 <___vfprintf_internal_r+0x16f0>
  8048b0:	d9014c17 	ldw	r4,1328(sp)
  8048b4:	2080100c 	andi	r2,r4,64
  8048b8:	10006e26 	beq	r2,zero,804a74 <___vfprintf_internal_r+0x16f0>
  8048bc:	3c00000b 	ldhu	r16,0(r7)
  8048c0:	0023883a 	mov	r17,zero
  8048c4:	39c00104 	addi	r7,r7,4
  8048c8:	d9c14015 	stw	r7,1280(sp)
  8048cc:	003efa06 	br	8044b8 <___vfprintf_internal_r+0x1134>
  8048d0:	dc400d17 	ldw	r17,52(sp)
  8048d4:	070020b4 	movhi	fp,130
  8048d8:	e7218d84 	addi	fp,fp,-31178
  8048dc:	9425883a 	add	r18,r18,r16
  8048e0:	8c400044 	addi	r17,r17,1
  8048e4:	008001c4 	movi	r2,7
  8048e8:	1f000015 	stw	fp,0(r3)
  8048ec:	1c000115 	stw	r16,4(r3)
  8048f0:	dc800e15 	stw	r18,56(sp)
  8048f4:	dc400d15 	stw	r17,52(sp)
  8048f8:	147d7016 	blt	r2,r17,803ebc <___vfprintf_internal_r+0xb38>
  8048fc:	18c00204 	addi	r3,r3,8
  804900:	003d7506 	br	803ed8 <___vfprintf_internal_r+0xb54>
  804904:	dc800e17 	ldw	r18,56(sp)
  804908:	dc400d17 	ldw	r17,52(sp)
  80490c:	070020b4 	movhi	fp,130
  804910:	e7219184 	addi	fp,fp,-31162
  804914:	003bba06 	br	803800 <___vfprintf_internal_r+0x47c>
  804918:	d9014f17 	ldw	r4,1340(sp)
  80491c:	b00b883a 	mov	r5,r22
  804920:	d9800c04 	addi	r6,sp,48
  804924:	080332c0 	call	80332c <__sprint_r>
  804928:	103c4e1e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  80492c:	dc800e17 	ldw	r18,56(sp)
  804930:	d8c01904 	addi	r3,sp,100
  804934:	003ce306 	br	803cc4 <___vfprintf_internal_r+0x940>
  804938:	3c000017 	ldw	r16,0(r7)
  80493c:	0009883a 	mov	r4,zero
  804940:	39c00104 	addi	r7,r7,4
  804944:	0023883a 	mov	r17,zero
  804948:	d9c14015 	stw	r7,1280(sp)
  80494c:	d8000405 	stb	zero,16(sp)
  804950:	003d1a06 	br	803dbc <___vfprintf_internal_r+0xa38>
  804954:	38800017 	ldw	r2,0(r7)
  804958:	39c00104 	addi	r7,r7,4
  80495c:	d9c14015 	stw	r7,1280(sp)
  804960:	1023d7fa 	srai	r17,r2,31
  804964:	1021883a 	mov	r16,r2
  804968:	003d1206 	br	803db4 <___vfprintf_internal_r+0xa30>
  80496c:	3c000017 	ldw	r16,0(r7)
  804970:	01000044 	movi	r4,1
  804974:	39c00104 	addi	r7,r7,4
  804978:	0023883a 	mov	r17,zero
  80497c:	d9c14015 	stw	r7,1280(sp)
  804980:	d8000405 	stb	zero,16(sp)
  804984:	003d0d06 	br	803dbc <___vfprintf_internal_r+0xa38>
  804988:	008020b4 	movhi	r2,130
  80498c:	10a18d04 	addi	r2,r2,-31180
  804990:	94800044 	addi	r18,r18,1
  804994:	8c400044 	addi	r17,r17,1
  804998:	a8800015 	stw	r2,0(r21)
  80499c:	00c00044 	movi	r3,1
  8049a0:	008001c4 	movi	r2,7
  8049a4:	a8c00115 	stw	r3,4(r21)
  8049a8:	dc800e15 	stw	r18,56(sp)
  8049ac:	dc400d15 	stw	r17,52(sp)
  8049b0:	1440ca16 	blt	r2,r17,804cdc <___vfprintf_internal_r+0x1958>
  8049b4:	a8c00204 	addi	r3,r21,8
  8049b8:	2000061e 	bne	r4,zero,8049d4 <___vfprintf_internal_r+0x1650>
  8049bc:	d9414717 	ldw	r5,1308(sp)
  8049c0:	2800041e 	bne	r5,zero,8049d4 <___vfprintf_internal_r+0x1650>
  8049c4:	d9814c17 	ldw	r6,1328(sp)
  8049c8:	3080004c 	andi	r2,r6,1
  8049cc:	1005003a 	cmpeq	r2,r2,zero
  8049d0:	103bea1e 	bne	r2,zero,80397c <___vfprintf_internal_r+0x5f8>
  8049d4:	00800044 	movi	r2,1
  8049d8:	dc400d17 	ldw	r17,52(sp)
  8049dc:	18800115 	stw	r2,4(r3)
  8049e0:	d8814917 	ldw	r2,1316(sp)
  8049e4:	94800044 	addi	r18,r18,1
  8049e8:	8c400044 	addi	r17,r17,1
  8049ec:	18800015 	stw	r2,0(r3)
  8049f0:	008001c4 	movi	r2,7
  8049f4:	dc800e15 	stw	r18,56(sp)
  8049f8:	dc400d15 	stw	r17,52(sp)
  8049fc:	1440ca16 	blt	r2,r17,804d28 <___vfprintf_internal_r+0x19a4>
  804a00:	18c00204 	addi	r3,r3,8
  804a04:	0121c83a 	sub	r16,zero,r4
  804a08:	0400500e 	bge	zero,r16,804b4c <___vfprintf_internal_r+0x17c8>
  804a0c:	00800404 	movi	r2,16
  804a10:	1400800e 	bge	r2,r16,804c14 <___vfprintf_internal_r+0x1890>
  804a14:	1027883a 	mov	r19,r2
  804a18:	070020b4 	movhi	fp,130
  804a1c:	e7218d84 	addi	fp,fp,-31178
  804a20:	050001c4 	movi	r20,7
  804a24:	00000306 	br	804a34 <___vfprintf_internal_r+0x16b0>
  804a28:	18c00204 	addi	r3,r3,8
  804a2c:	843ffc04 	addi	r16,r16,-16
  804a30:	9c007a0e 	bge	r19,r16,804c1c <___vfprintf_internal_r+0x1898>
  804a34:	94800404 	addi	r18,r18,16
  804a38:	8c400044 	addi	r17,r17,1
  804a3c:	1f000015 	stw	fp,0(r3)
  804a40:	1cc00115 	stw	r19,4(r3)
  804a44:	dc800e15 	stw	r18,56(sp)
  804a48:	dc400d15 	stw	r17,52(sp)
  804a4c:	a47ff60e 	bge	r20,r17,804a28 <___vfprintf_internal_r+0x16a4>
  804a50:	d9014f17 	ldw	r4,1340(sp)
  804a54:	b00b883a 	mov	r5,r22
  804a58:	d9800c04 	addi	r6,sp,48
  804a5c:	080332c0 	call	80332c <__sprint_r>
  804a60:	103c001e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  804a64:	dc800e17 	ldw	r18,56(sp)
  804a68:	dc400d17 	ldw	r17,52(sp)
  804a6c:	d8c01904 	addi	r3,sp,100
  804a70:	003fee06 	br	804a2c <___vfprintf_internal_r+0x16a8>
  804a74:	3c000017 	ldw	r16,0(r7)
  804a78:	0023883a 	mov	r17,zero
  804a7c:	39c00104 	addi	r7,r7,4
  804a80:	d9c14015 	stw	r7,1280(sp)
  804a84:	003e8c06 	br	8044b8 <___vfprintf_internal_r+0x1134>
  804a88:	d9401904 	addi	r5,sp,100
  804a8c:	dd000f04 	addi	r20,sp,60
  804a90:	d9414115 	stw	r5,1284(sp)
  804a94:	d9814417 	ldw	r6,1296(sp)
  804a98:	880a973a 	slli	r5,r17,28
  804a9c:	8004d13a 	srli	r2,r16,4
  804aa0:	810003cc 	andi	r4,r16,15
  804aa4:	3109883a 	add	r4,r6,r4
  804aa8:	2884b03a 	or	r2,r5,r2
  804aac:	21400003 	ldbu	r5,0(r4)
  804ab0:	d9014117 	ldw	r4,1284(sp)
  804ab4:	8806d13a 	srli	r3,r17,4
  804ab8:	1021883a 	mov	r16,r2
  804abc:	213fffc4 	addi	r4,r4,-1
  804ac0:	d9014115 	stw	r4,1284(sp)
  804ac4:	d9814117 	ldw	r6,1284(sp)
  804ac8:	10c8b03a 	or	r4,r2,r3
  804acc:	1823883a 	mov	r17,r3
  804ad0:	31400005 	stb	r5,0(r6)
  804ad4:	203fef1e 	bne	r4,zero,804a94 <___vfprintf_internal_r+0x1710>
  804ad8:	003cc506 	br	803df0 <___vfprintf_internal_r+0xa6c>
  804adc:	00800c04 	movi	r2,48
  804ae0:	d98018c4 	addi	r6,sp,99
  804ae4:	dd000f04 	addi	r20,sp,60
  804ae8:	d88018c5 	stb	r2,99(sp)
  804aec:	d9814115 	stw	r6,1284(sp)
  804af0:	003cbf06 	br	803df0 <___vfprintf_internal_r+0xa6c>
  804af4:	dc400d17 	ldw	r17,52(sp)
  804af8:	070020b4 	movhi	fp,130
  804afc:	e7219184 	addi	fp,fp,-31162
  804b00:	003bc106 	br	803a08 <___vfprintf_internal_r+0x684>
  804b04:	d9414c17 	ldw	r5,1328(sp)
  804b08:	2880040c 	andi	r2,r5,16
  804b0c:	10007c26 	beq	r2,zero,804d00 <___vfprintf_internal_r+0x197c>
  804b10:	38800017 	ldw	r2,0(r7)
  804b14:	39c00104 	addi	r7,r7,4
  804b18:	d9c14015 	stw	r7,1280(sp)
  804b1c:	d9814b17 	ldw	r6,1324(sp)
  804b20:	d9c14017 	ldw	r7,1280(sp)
  804b24:	11800015 	stw	r6,0(r2)
  804b28:	003a7206 	br	8034f4 <___vfprintf_internal_r+0x170>
  804b2c:	d9014f17 	ldw	r4,1340(sp)
  804b30:	b00b883a 	mov	r5,r22
  804b34:	d9800c04 	addi	r6,sp,48
  804b38:	080332c0 	call	80332c <__sprint_r>
  804b3c:	103bc91e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  804b40:	dc800e17 	ldw	r18,56(sp)
  804b44:	dc400d17 	ldw	r17,52(sp)
  804b48:	d8c01904 	addi	r3,sp,100
  804b4c:	d9014717 	ldw	r4,1308(sp)
  804b50:	d9414117 	ldw	r5,1284(sp)
  804b54:	8c400044 	addi	r17,r17,1
  804b58:	9125883a 	add	r18,r18,r4
  804b5c:	008001c4 	movi	r2,7
  804b60:	19400015 	stw	r5,0(r3)
  804b64:	19000115 	stw	r4,4(r3)
  804b68:	dc800e15 	stw	r18,56(sp)
  804b6c:	dc400d15 	stw	r17,52(sp)
  804b70:	147ce816 	blt	r2,r17,803f14 <___vfprintf_internal_r+0xb90>
  804b74:	18c00204 	addi	r3,r3,8
  804b78:	003b8006 	br	80397c <___vfprintf_internal_r+0x5f8>
  804b7c:	38c00017 	ldw	r3,0(r7)
  804b80:	39000204 	addi	r4,r7,8
  804b84:	d9014015 	stw	r4,1280(sp)
  804b88:	d8c14215 	stw	r3,1288(sp)
  804b8c:	39c00117 	ldw	r7,4(r7)
  804b90:	d9c14315 	stw	r7,1292(sp)
  804b94:	003e1a06 	br	804400 <___vfprintf_internal_r+0x107c>
  804b98:	0005883a 	mov	r2,zero
  804b9c:	1409c83a 	sub	r4,r2,r16
  804ba0:	1105803a 	cmpltu	r2,r2,r4
  804ba4:	044bc83a 	sub	r5,zero,r17
  804ba8:	2885c83a 	sub	r2,r5,r2
  804bac:	2021883a 	mov	r16,r4
  804bb0:	1023883a 	mov	r17,r2
  804bb4:	01000044 	movi	r4,1
  804bb8:	00800b44 	movi	r2,45
  804bbc:	d8800405 	stb	r2,16(sp)
  804bc0:	003c7e06 	br	803dbc <___vfprintf_internal_r+0xa38>
  804bc4:	d9014f17 	ldw	r4,1340(sp)
  804bc8:	b00b883a 	mov	r5,r22
  804bcc:	d9800c04 	addi	r6,sp,48
  804bd0:	080332c0 	call	80332c <__sprint_r>
  804bd4:	103ba31e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  804bd8:	dc800e17 	ldw	r18,56(sp)
  804bdc:	dc400d17 	ldw	r17,52(sp)
  804be0:	d9000517 	ldw	r4,20(sp)
  804be4:	d9401904 	addi	r5,sp,100
  804be8:	003da106 	br	804270 <___vfprintf_internal_r+0xeec>
  804bec:	d9014f17 	ldw	r4,1340(sp)
  804bf0:	b00b883a 	mov	r5,r22
  804bf4:	d9800c04 	addi	r6,sp,48
  804bf8:	080332c0 	call	80332c <__sprint_r>
  804bfc:	103b991e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  804c00:	dc800e17 	ldw	r18,56(sp)
  804c04:	dc400d17 	ldw	r17,52(sp)
  804c08:	d9000517 	ldw	r4,20(sp)
  804c0c:	d8c01904 	addi	r3,sp,100
  804c10:	003d8b06 	br	804240 <___vfprintf_internal_r+0xebc>
  804c14:	070020b4 	movhi	fp,130
  804c18:	e7218d84 	addi	fp,fp,-31178
  804c1c:	9425883a 	add	r18,r18,r16
  804c20:	8c400044 	addi	r17,r17,1
  804c24:	008001c4 	movi	r2,7
  804c28:	1f000015 	stw	fp,0(r3)
  804c2c:	1c000115 	stw	r16,4(r3)
  804c30:	dc800e15 	stw	r18,56(sp)
  804c34:	dc400d15 	stw	r17,52(sp)
  804c38:	147fbc16 	blt	r2,r17,804b2c <___vfprintf_internal_r+0x17a8>
  804c3c:	18c00204 	addi	r3,r3,8
  804c40:	003fc206 	br	804b4c <___vfprintf_internal_r+0x17c8>
  804c44:	d9014f17 	ldw	r4,1340(sp)
  804c48:	b00b883a 	mov	r5,r22
  804c4c:	d9800c04 	addi	r6,sp,48
  804c50:	080332c0 	call	80332c <__sprint_r>
  804c54:	103b831e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  804c58:	dc800e17 	ldw	r18,56(sp)
  804c5c:	d9000517 	ldw	r4,20(sp)
  804c60:	d8c01904 	addi	r3,sp,100
  804c64:	003cfc06 	br	804058 <___vfprintf_internal_r+0xcd4>
  804c68:	070020b4 	movhi	fp,130
  804c6c:	e7218d84 	addi	fp,fp,-31178
  804c70:	003bde06 	br	803bec <___vfprintf_internal_r+0x868>
  804c74:	008020b4 	movhi	r2,130
  804c78:	10a17c04 	addi	r2,r2,-31248
  804c7c:	d8814115 	stw	r2,1284(sp)
  804c80:	003def06 	br	804440 <___vfprintf_internal_r+0x10bc>
  804c84:	d9014217 	ldw	r4,1288(sp)
  804c88:	d9414317 	ldw	r5,1292(sp)
  804c8c:	0808f400 	call	808f40 <__isnand>
  804c90:	10003926 	beq	r2,zero,804d78 <___vfprintf_internal_r+0x19f4>
  804c94:	d9414d17 	ldw	r5,1332(sp)
  804c98:	008011c4 	movi	r2,71
  804c9c:	1140ce16 	blt	r2,r5,804fd8 <___vfprintf_internal_r+0x1c54>
  804ca0:	018020b4 	movhi	r6,130
  804ca4:	31a17d04 	addi	r6,r6,-31244
  804ca8:	d9814115 	stw	r6,1284(sp)
  804cac:	003de406 	br	804440 <___vfprintf_internal_r+0x10bc>
  804cb0:	d9014c17 	ldw	r4,1328(sp)
  804cb4:	bdc00044 	addi	r23,r23,1
  804cb8:	b8c00007 	ldb	r3,0(r23)
  804cbc:	21000814 	ori	r4,r4,32
  804cc0:	d9014c15 	stw	r4,1328(sp)
  804cc4:	003a2e06 	br	803580 <___vfprintf_internal_r+0x1fc>
  804cc8:	dcc14515 	stw	r19,1300(sp)
  804ccc:	98011016 	blt	r19,zero,805110 <___vfprintf_internal_r+0x1d8c>
  804cd0:	980f883a 	mov	r7,r19
  804cd4:	d8014615 	stw	zero,1304(sp)
  804cd8:	003c4c06 	br	803e0c <___vfprintf_internal_r+0xa88>
  804cdc:	d9014f17 	ldw	r4,1340(sp)
  804ce0:	b00b883a 	mov	r5,r22
  804ce4:	d9800c04 	addi	r6,sp,48
  804ce8:	080332c0 	call	80332c <__sprint_r>
  804cec:	103b5d1e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  804cf0:	dc800e17 	ldw	r18,56(sp)
  804cf4:	d9000517 	ldw	r4,20(sp)
  804cf8:	d8c01904 	addi	r3,sp,100
  804cfc:	003f2e06 	br	8049b8 <___vfprintf_internal_r+0x1634>
  804d00:	d8c14c17 	ldw	r3,1328(sp)
  804d04:	1880100c 	andi	r2,r3,64
  804d08:	1000a026 	beq	r2,zero,804f8c <___vfprintf_internal_r+0x1c08>
  804d0c:	38800017 	ldw	r2,0(r7)
  804d10:	39c00104 	addi	r7,r7,4
  804d14:	d9c14015 	stw	r7,1280(sp)
  804d18:	d9014b17 	ldw	r4,1324(sp)
  804d1c:	d9c14017 	ldw	r7,1280(sp)
  804d20:	1100000d 	sth	r4,0(r2)
  804d24:	0039f306 	br	8034f4 <___vfprintf_internal_r+0x170>
  804d28:	d9014f17 	ldw	r4,1340(sp)
  804d2c:	b00b883a 	mov	r5,r22
  804d30:	d9800c04 	addi	r6,sp,48
  804d34:	080332c0 	call	80332c <__sprint_r>
  804d38:	103b4a1e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  804d3c:	dc800e17 	ldw	r18,56(sp)
  804d40:	dc400d17 	ldw	r17,52(sp)
  804d44:	d9000517 	ldw	r4,20(sp)
  804d48:	d8c01904 	addi	r3,sp,100
  804d4c:	003f2d06 	br	804a04 <___vfprintf_internal_r+0x1680>
  804d50:	00800184 	movi	r2,6
  804d54:	14c09a36 	bltu	r2,r19,804fc0 <___vfprintf_internal_r+0x1c3c>
  804d58:	dcc14515 	stw	r19,1300(sp)
  804d5c:	9800010e 	bge	r19,zero,804d64 <___vfprintf_internal_r+0x19e0>
  804d60:	d8014515 	stw	zero,1300(sp)
  804d64:	008020b4 	movhi	r2,130
  804d68:	10a17f04 	addi	r2,r2,-31236
  804d6c:	980f883a 	mov	r7,r19
  804d70:	d8814115 	stw	r2,1284(sp)
  804d74:	003a7206 	br	803740 <___vfprintf_internal_r+0x3bc>
  804d78:	00bfffc4 	movi	r2,-1
  804d7c:	9880e226 	beq	r19,r2,805108 <___vfprintf_internal_r+0x1d84>
  804d80:	d9414d17 	ldw	r5,1332(sp)
  804d84:	008019c4 	movi	r2,103
  804d88:	2880dc26 	beq	r5,r2,8050fc <___vfprintf_internal_r+0x1d78>
  804d8c:	008011c4 	movi	r2,71
  804d90:	2880da26 	beq	r5,r2,8050fc <___vfprintf_internal_r+0x1d78>
  804d94:	d9414c17 	ldw	r5,1328(sp)
  804d98:	d9014317 	ldw	r4,1292(sp)
  804d9c:	d9814217 	ldw	r6,1288(sp)
  804da0:	29404014 	ori	r5,r5,256
  804da4:	d9414c15 	stw	r5,1328(sp)
  804da8:	2000cc16 	blt	r4,zero,8050dc <___vfprintf_internal_r+0x1d58>
  804dac:	3021883a 	mov	r16,r6
  804db0:	2023883a 	mov	r17,r4
  804db4:	0039883a 	mov	fp,zero
  804db8:	d9414d17 	ldw	r5,1332(sp)
  804dbc:	00801984 	movi	r2,102
  804dc0:	2880b726 	beq	r5,r2,8050a0 <___vfprintf_internal_r+0x1d1c>
  804dc4:	00801184 	movi	r2,70
  804dc8:	2880b526 	beq	r5,r2,8050a0 <___vfprintf_internal_r+0x1d1c>
  804dcc:	00801944 	movi	r2,101
  804dd0:	2880c826 	beq	r5,r2,8050f4 <___vfprintf_internal_r+0x1d70>
  804dd4:	00801144 	movi	r2,69
  804dd8:	2880c626 	beq	r5,r2,8050f4 <___vfprintf_internal_r+0x1d70>
  804ddc:	9829883a 	mov	r20,r19
  804de0:	d9014f17 	ldw	r4,1340(sp)
  804de4:	d8800504 	addi	r2,sp,20
  804de8:	880d883a 	mov	r6,r17
  804dec:	d8800115 	stw	r2,4(sp)
  804df0:	d8c00604 	addi	r3,sp,24
  804df4:	d8800704 	addi	r2,sp,28
  804df8:	800b883a 	mov	r5,r16
  804dfc:	01c00084 	movi	r7,2
  804e00:	d8c00215 	stw	r3,8(sp)
  804e04:	d8800315 	stw	r2,12(sp)
  804e08:	dd000015 	stw	r20,0(sp)
  804e0c:	08056040 	call	805604 <_dtoa_r>
  804e10:	d9814d17 	ldw	r6,1332(sp)
  804e14:	d8814115 	stw	r2,1284(sp)
  804e18:	008019c4 	movi	r2,103
  804e1c:	30809526 	beq	r6,r2,805074 <___vfprintf_internal_r+0x1cf0>
  804e20:	d8c14d17 	ldw	r3,1332(sp)
  804e24:	008011c4 	movi	r2,71
  804e28:	18809226 	beq	r3,r2,805074 <___vfprintf_internal_r+0x1cf0>
  804e2c:	d9414117 	ldw	r5,1284(sp)
  804e30:	d9814d17 	ldw	r6,1332(sp)
  804e34:	00801984 	movi	r2,102
  804e38:	2d25883a 	add	r18,r5,r20
  804e3c:	30808626 	beq	r6,r2,805058 <___vfprintf_internal_r+0x1cd4>
  804e40:	00801184 	movi	r2,70
  804e44:	30808426 	beq	r6,r2,805058 <___vfprintf_internal_r+0x1cd4>
  804e48:	000d883a 	mov	r6,zero
  804e4c:	000f883a 	mov	r7,zero
  804e50:	880b883a 	mov	r5,r17
  804e54:	8009883a 	mov	r4,r16
  804e58:	080bcd80 	call	80bcd8 <__eqdf2>
  804e5c:	1000751e 	bne	r2,zero,805034 <___vfprintf_internal_r+0x1cb0>
  804e60:	9005883a 	mov	r2,r18
  804e64:	dc800715 	stw	r18,28(sp)
  804e68:	d9014117 	ldw	r4,1284(sp)
  804e6c:	d9414d17 	ldw	r5,1332(sp)
  804e70:	00c019c4 	movi	r3,103
  804e74:	1125c83a 	sub	r18,r2,r4
  804e78:	28c06826 	beq	r5,r3,80501c <___vfprintf_internal_r+0x1c98>
  804e7c:	008011c4 	movi	r2,71
  804e80:	28806626 	beq	r5,r2,80501c <___vfprintf_internal_r+0x1c98>
  804e84:	d9000517 	ldw	r4,20(sp)
  804e88:	d8c14d17 	ldw	r3,1332(sp)
  804e8c:	00801944 	movi	r2,101
  804e90:	10c05516 	blt	r2,r3,804fe8 <___vfprintf_internal_r+0x1c64>
  804e94:	213fffc4 	addi	r4,r4,-1
  804e98:	d9000515 	stw	r4,20(sp)
  804e9c:	d8c00805 	stb	r3,32(sp)
  804ea0:	2021883a 	mov	r16,r4
  804ea4:	2000c116 	blt	r4,zero,8051ac <___vfprintf_internal_r+0x1e28>
  804ea8:	00800ac4 	movi	r2,43
  804eac:	d8800845 	stb	r2,33(sp)
  804eb0:	00800244 	movi	r2,9
  804eb4:	1400af0e 	bge	r2,r16,805174 <___vfprintf_internal_r+0x1df0>
  804eb8:	1027883a 	mov	r19,r2
  804ebc:	dc400b84 	addi	r17,sp,46
  804ec0:	8009883a 	mov	r4,r16
  804ec4:	01400284 	movi	r5,10
  804ec8:	08018d40 	call	8018d4 <__modsi3>
  804ecc:	10800c04 	addi	r2,r2,48
  804ed0:	8c7fffc4 	addi	r17,r17,-1
  804ed4:	8009883a 	mov	r4,r16
  804ed8:	01400284 	movi	r5,10
  804edc:	88800005 	stb	r2,0(r17)
  804ee0:	08018740 	call	801874 <__divsi3>
  804ee4:	1021883a 	mov	r16,r2
  804ee8:	98bff516 	blt	r19,r2,804ec0 <___vfprintf_internal_r+0x1b3c>
  804eec:	10c00c04 	addi	r3,r2,48
  804ef0:	d88009c4 	addi	r2,sp,39
  804ef4:	108001c4 	addi	r2,r2,7
  804ef8:	897fffc4 	addi	r5,r17,-1
  804efc:	88ffffc5 	stb	r3,-1(r17)
  804f00:	2880a72e 	bgeu	r5,r2,8051a0 <___vfprintf_internal_r+0x1e1c>
  804f04:	1009883a 	mov	r4,r2
  804f08:	d9800804 	addi	r6,sp,32
  804f0c:	d8c00884 	addi	r3,sp,34
  804f10:	28800003 	ldbu	r2,0(r5)
  804f14:	29400044 	addi	r5,r5,1
  804f18:	18800005 	stb	r2,0(r3)
  804f1c:	18c00044 	addi	r3,r3,1
  804f20:	293ffb36 	bltu	r5,r4,804f10 <___vfprintf_internal_r+0x1b8c>
  804f24:	1987c83a 	sub	r3,r3,r6
  804f28:	00800044 	movi	r2,1
  804f2c:	d8c14815 	stw	r3,1312(sp)
  804f30:	90cf883a 	add	r7,r18,r3
  804f34:	1480960e 	bge	r2,r18,805190 <___vfprintf_internal_r+0x1e0c>
  804f38:	39c00044 	addi	r7,r7,1
  804f3c:	d9c14515 	stw	r7,1300(sp)
  804f40:	38003416 	blt	r7,zero,805014 <___vfprintf_internal_r+0x1c90>
  804f44:	e0803fcc 	andi	r2,fp,255
  804f48:	1080201c 	xori	r2,r2,128
  804f4c:	10bfe004 	addi	r2,r2,-128
  804f50:	10004e26 	beq	r2,zero,80508c <___vfprintf_internal_r+0x1d08>
  804f54:	00800b44 	movi	r2,45
  804f58:	dc814715 	stw	r18,1308(sp)
  804f5c:	d8014615 	stw	zero,1304(sp)
  804f60:	d8800405 	stb	r2,16(sp)
  804f64:	003bab06 	br	803e14 <___vfprintf_internal_r+0xa90>
  804f68:	00800b44 	movi	r2,45
  804f6c:	d8800405 	stb	r2,16(sp)
  804f70:	003d2d06 	br	804428 <___vfprintf_internal_r+0x10a4>
  804f74:	d9014f17 	ldw	r4,1340(sp)
  804f78:	b00b883a 	mov	r5,r22
  804f7c:	d9800c04 	addi	r6,sp,48
  804f80:	080332c0 	call	80332c <__sprint_r>
  804f84:	103ab71e 	bne	r2,zero,803a64 <___vfprintf_internal_r+0x6e0>
  804f88:	003ab506 	br	803a60 <___vfprintf_internal_r+0x6dc>
  804f8c:	38800017 	ldw	r2,0(r7)
  804f90:	39c00104 	addi	r7,r7,4
  804f94:	d9c14015 	stw	r7,1280(sp)
  804f98:	d9414b17 	ldw	r5,1324(sp)
  804f9c:	d9c14017 	ldw	r7,1280(sp)
  804fa0:	11400015 	stw	r5,0(r2)
  804fa4:	00395306 	br	8034f4 <___vfprintf_internal_r+0x170>
  804fa8:	980f883a 	mov	r7,r19
  804fac:	dcc14515 	stw	r19,1300(sp)
  804fb0:	d8014615 	stw	zero,1304(sp)
  804fb4:	003b9506 	br	803e0c <___vfprintf_internal_r+0xa88>
  804fb8:	0027883a 	mov	r19,zero
  804fbc:	00397206 	br	803588 <___vfprintf_internal_r+0x204>
  804fc0:	00c020b4 	movhi	r3,130
  804fc4:	18e17f04 	addi	r3,r3,-31236
  804fc8:	100f883a 	mov	r7,r2
  804fcc:	d8814515 	stw	r2,1300(sp)
  804fd0:	d8c14115 	stw	r3,1284(sp)
  804fd4:	0039da06 	br	803740 <___vfprintf_internal_r+0x3bc>
  804fd8:	008020b4 	movhi	r2,130
  804fdc:	10a17e04 	addi	r2,r2,-31240
  804fe0:	d8814115 	stw	r2,1284(sp)
  804fe4:	003d1606 	br	804440 <___vfprintf_internal_r+0x10bc>
  804fe8:	d9414d17 	ldw	r5,1332(sp)
  804fec:	00801984 	movi	r2,102
  804ff0:	28804926 	beq	r5,r2,805118 <___vfprintf_internal_r+0x1d94>
  804ff4:	200f883a 	mov	r7,r4
  804ff8:	24805716 	blt	r4,r18,805158 <___vfprintf_internal_r+0x1dd4>
  804ffc:	d9414c17 	ldw	r5,1328(sp)
  805000:	2880004c 	andi	r2,r5,1
  805004:	10000126 	beq	r2,zero,80500c <___vfprintf_internal_r+0x1c88>
  805008:	21c00044 	addi	r7,r4,1
  80500c:	d9c14515 	stw	r7,1300(sp)
  805010:	383fcc0e 	bge	r7,zero,804f44 <___vfprintf_internal_r+0x1bc0>
  805014:	d8014515 	stw	zero,1300(sp)
  805018:	003fca06 	br	804f44 <___vfprintf_internal_r+0x1bc0>
  80501c:	d9000517 	ldw	r4,20(sp)
  805020:	00bfff04 	movi	r2,-4
  805024:	1100480e 	bge	r2,r4,805148 <___vfprintf_internal_r+0x1dc4>
  805028:	99004716 	blt	r19,r4,805148 <___vfprintf_internal_r+0x1dc4>
  80502c:	d8c14d15 	stw	r3,1332(sp)
  805030:	003ff006 	br	804ff4 <___vfprintf_internal_r+0x1c70>
  805034:	d8800717 	ldw	r2,28(sp)
  805038:	14bf8b2e 	bgeu	r2,r18,804e68 <___vfprintf_internal_r+0x1ae4>
  80503c:	9007883a 	mov	r3,r18
  805040:	01000c04 	movi	r4,48
  805044:	11000005 	stb	r4,0(r2)
  805048:	10800044 	addi	r2,r2,1
  80504c:	d8800715 	stw	r2,28(sp)
  805050:	18bffc1e 	bne	r3,r2,805044 <___vfprintf_internal_r+0x1cc0>
  805054:	003f8406 	br	804e68 <___vfprintf_internal_r+0x1ae4>
  805058:	d8814117 	ldw	r2,1284(sp)
  80505c:	10c00007 	ldb	r3,0(r2)
  805060:	00800c04 	movi	r2,48
  805064:	18805b26 	beq	r3,r2,8051d4 <___vfprintf_internal_r+0x1e50>
  805068:	d9000517 	ldw	r4,20(sp)
  80506c:	9125883a 	add	r18,r18,r4
  805070:	003f7506 	br	804e48 <___vfprintf_internal_r+0x1ac4>
  805074:	d9014c17 	ldw	r4,1328(sp)
  805078:	2080004c 	andi	r2,r4,1
  80507c:	1005003a 	cmpeq	r2,r2,zero
  805080:	103f6a26 	beq	r2,zero,804e2c <___vfprintf_internal_r+0x1aa8>
  805084:	d8800717 	ldw	r2,28(sp)
  805088:	003f7706 	br	804e68 <___vfprintf_internal_r+0x1ae4>
  80508c:	d9c14515 	stw	r7,1300(sp)
  805090:	38004d16 	blt	r7,zero,8051c8 <___vfprintf_internal_r+0x1e44>
  805094:	dc814715 	stw	r18,1308(sp)
  805098:	d8014615 	stw	zero,1304(sp)
  80509c:	003b5b06 	br	803e0c <___vfprintf_internal_r+0xa88>
  8050a0:	d9014f17 	ldw	r4,1340(sp)
  8050a4:	d8800504 	addi	r2,sp,20
  8050a8:	d8800115 	stw	r2,4(sp)
  8050ac:	d8c00604 	addi	r3,sp,24
  8050b0:	d8800704 	addi	r2,sp,28
  8050b4:	800b883a 	mov	r5,r16
  8050b8:	880d883a 	mov	r6,r17
  8050bc:	01c000c4 	movi	r7,3
  8050c0:	d8c00215 	stw	r3,8(sp)
  8050c4:	d8800315 	stw	r2,12(sp)
  8050c8:	dcc00015 	stw	r19,0(sp)
  8050cc:	9829883a 	mov	r20,r19
  8050d0:	08056040 	call	805604 <_dtoa_r>
  8050d4:	d8814115 	stw	r2,1284(sp)
  8050d8:	003f5106 	br	804e20 <___vfprintf_internal_r+0x1a9c>
  8050dc:	d8c14217 	ldw	r3,1288(sp)
  8050e0:	d9014317 	ldw	r4,1292(sp)
  8050e4:	07000b44 	movi	fp,45
  8050e8:	1821883a 	mov	r16,r3
  8050ec:	2460003c 	xorhi	r17,r4,32768
  8050f0:	003f3106 	br	804db8 <___vfprintf_internal_r+0x1a34>
  8050f4:	9d000044 	addi	r20,r19,1
  8050f8:	003f3906 	br	804de0 <___vfprintf_internal_r+0x1a5c>
  8050fc:	983f251e 	bne	r19,zero,804d94 <___vfprintf_internal_r+0x1a10>
  805100:	04c00044 	movi	r19,1
  805104:	003f2306 	br	804d94 <___vfprintf_internal_r+0x1a10>
  805108:	04c00184 	movi	r19,6
  80510c:	003f2106 	br	804d94 <___vfprintf_internal_r+0x1a10>
  805110:	d8014515 	stw	zero,1300(sp)
  805114:	003eee06 	br	804cd0 <___vfprintf_internal_r+0x194c>
  805118:	200f883a 	mov	r7,r4
  80511c:	0100370e 	bge	zero,r4,8051fc <___vfprintf_internal_r+0x1e78>
  805120:	9800031e 	bne	r19,zero,805130 <___vfprintf_internal_r+0x1dac>
  805124:	d9814c17 	ldw	r6,1328(sp)
  805128:	3080004c 	andi	r2,r6,1
  80512c:	103fb726 	beq	r2,zero,80500c <___vfprintf_internal_r+0x1c88>
  805130:	20800044 	addi	r2,r4,1
  805134:	98a7883a 	add	r19,r19,r2
  805138:	dcc14515 	stw	r19,1300(sp)
  80513c:	980f883a 	mov	r7,r19
  805140:	983f800e 	bge	r19,zero,804f44 <___vfprintf_internal_r+0x1bc0>
  805144:	003fb306 	br	805014 <___vfprintf_internal_r+0x1c90>
  805148:	d9814d17 	ldw	r6,1332(sp)
  80514c:	31bfff84 	addi	r6,r6,-2
  805150:	d9814d15 	stw	r6,1332(sp)
  805154:	003f4c06 	br	804e88 <___vfprintf_internal_r+0x1b04>
  805158:	0100180e 	bge	zero,r4,8051bc <___vfprintf_internal_r+0x1e38>
  80515c:	00800044 	movi	r2,1
  805160:	1485883a 	add	r2,r2,r18
  805164:	d8814515 	stw	r2,1300(sp)
  805168:	100f883a 	mov	r7,r2
  80516c:	103f750e 	bge	r2,zero,804f44 <___vfprintf_internal_r+0x1bc0>
  805170:	003fa806 	br	805014 <___vfprintf_internal_r+0x1c90>
  805174:	80c00c04 	addi	r3,r16,48
  805178:	00800c04 	movi	r2,48
  80517c:	d8c008c5 	stb	r3,35(sp)
  805180:	d9800804 	addi	r6,sp,32
  805184:	d8c00904 	addi	r3,sp,36
  805188:	d8800885 	stb	r2,34(sp)
  80518c:	003f6506 	br	804f24 <___vfprintf_internal_r+0x1ba0>
  805190:	d9014c17 	ldw	r4,1328(sp)
  805194:	2084703a 	and	r2,r4,r2
  805198:	103f9c26 	beq	r2,zero,80500c <___vfprintf_internal_r+0x1c88>
  80519c:	003f6606 	br	804f38 <___vfprintf_internal_r+0x1bb4>
  8051a0:	d9800804 	addi	r6,sp,32
  8051a4:	d8c00884 	addi	r3,sp,34
  8051a8:	003f5e06 	br	804f24 <___vfprintf_internal_r+0x1ba0>
  8051ac:	00800b44 	movi	r2,45
  8051b0:	0121c83a 	sub	r16,zero,r4
  8051b4:	d8800845 	stb	r2,33(sp)
  8051b8:	003f3d06 	br	804eb0 <___vfprintf_internal_r+0x1b2c>
  8051bc:	00800084 	movi	r2,2
  8051c0:	1105c83a 	sub	r2,r2,r4
  8051c4:	003fe606 	br	805160 <___vfprintf_internal_r+0x1ddc>
  8051c8:	d8014515 	stw	zero,1300(sp)
  8051cc:	dc814715 	stw	r18,1308(sp)
  8051d0:	003fb106 	br	805098 <___vfprintf_internal_r+0x1d14>
  8051d4:	000d883a 	mov	r6,zero
  8051d8:	000f883a 	mov	r7,zero
  8051dc:	8009883a 	mov	r4,r16
  8051e0:	880b883a 	mov	r5,r17
  8051e4:	080bd600 	call	80bd60 <__nedf2>
  8051e8:	103f9f26 	beq	r2,zero,805068 <___vfprintf_internal_r+0x1ce4>
  8051ec:	00800044 	movi	r2,1
  8051f0:	1509c83a 	sub	r4,r2,r20
  8051f4:	d9000515 	stw	r4,20(sp)
  8051f8:	003f9b06 	br	805068 <___vfprintf_internal_r+0x1ce4>
  8051fc:	98000d1e 	bne	r19,zero,805234 <___vfprintf_internal_r+0x1eb0>
  805200:	d8c14c17 	ldw	r3,1328(sp)
  805204:	1880004c 	andi	r2,r3,1
  805208:	10000a1e 	bne	r2,zero,805234 <___vfprintf_internal_r+0x1eb0>
  80520c:	01000044 	movi	r4,1
  805210:	200f883a 	mov	r7,r4
  805214:	d9014515 	stw	r4,1300(sp)
  805218:	003f4a06 	br	804f44 <___vfprintf_internal_r+0x1bc0>
  80521c:	3cc00017 	ldw	r19,0(r7)
  805220:	39c00104 	addi	r7,r7,4
  805224:	983d0e0e 	bge	r19,zero,804660 <___vfprintf_internal_r+0x12dc>
  805228:	b8c00007 	ldb	r3,0(r23)
  80522c:	04ffffc4 	movi	r19,-1
  805230:	0038d306 	br	803580 <___vfprintf_internal_r+0x1fc>
  805234:	9cc00084 	addi	r19,r19,2
  805238:	dcc14515 	stw	r19,1300(sp)
  80523c:	980f883a 	mov	r7,r19
  805240:	983f400e 	bge	r19,zero,804f44 <___vfprintf_internal_r+0x1bc0>
  805244:	003f7306 	br	805014 <___vfprintf_internal_r+0x1c90>

00805248 <__vfprintf_internal>:
  805248:	008020b4 	movhi	r2,130
  80524c:	10a93c04 	addi	r2,r2,-23312
  805250:	2013883a 	mov	r9,r4
  805254:	11000017 	ldw	r4,0(r2)
  805258:	2805883a 	mov	r2,r5
  80525c:	300f883a 	mov	r7,r6
  805260:	480b883a 	mov	r5,r9
  805264:	100d883a 	mov	r6,r2
  805268:	08033841 	jmpi	803384 <___vfprintf_internal_r>

0080526c <__swsetup_r>:
  80526c:	008020b4 	movhi	r2,130
  805270:	10a93c04 	addi	r2,r2,-23312
  805274:	10c00017 	ldw	r3,0(r2)
  805278:	defffd04 	addi	sp,sp,-12
  80527c:	dc400115 	stw	r17,4(sp)
  805280:	dc000015 	stw	r16,0(sp)
  805284:	dfc00215 	stw	ra,8(sp)
  805288:	2023883a 	mov	r17,r4
  80528c:	2821883a 	mov	r16,r5
  805290:	18000226 	beq	r3,zero,80529c <__swsetup_r+0x30>
  805294:	18800e17 	ldw	r2,56(r3)
  805298:	10001f26 	beq	r2,zero,805318 <__swsetup_r+0xac>
  80529c:	8100030b 	ldhu	r4,12(r16)
  8052a0:	2080020c 	andi	r2,r4,8
  8052a4:	10002826 	beq	r2,zero,805348 <__swsetup_r+0xdc>
  8052a8:	81400417 	ldw	r5,16(r16)
  8052ac:	28001d26 	beq	r5,zero,805324 <__swsetup_r+0xb8>
  8052b0:	2080004c 	andi	r2,r4,1
  8052b4:	1005003a 	cmpeq	r2,r2,zero
  8052b8:	10000b26 	beq	r2,zero,8052e8 <__swsetup_r+0x7c>
  8052bc:	2080008c 	andi	r2,r4,2
  8052c0:	10001226 	beq	r2,zero,80530c <__swsetup_r+0xa0>
  8052c4:	0005883a 	mov	r2,zero
  8052c8:	80800215 	stw	r2,8(r16)
  8052cc:	28000b26 	beq	r5,zero,8052fc <__swsetup_r+0x90>
  8052d0:	0005883a 	mov	r2,zero
  8052d4:	dfc00217 	ldw	ra,8(sp)
  8052d8:	dc400117 	ldw	r17,4(sp)
  8052dc:	dc000017 	ldw	r16,0(sp)
  8052e0:	dec00304 	addi	sp,sp,12
  8052e4:	f800283a 	ret
  8052e8:	80800517 	ldw	r2,20(r16)
  8052ec:	80000215 	stw	zero,8(r16)
  8052f0:	0085c83a 	sub	r2,zero,r2
  8052f4:	80800615 	stw	r2,24(r16)
  8052f8:	283ff51e 	bne	r5,zero,8052d0 <__swsetup_r+0x64>
  8052fc:	2080200c 	andi	r2,r4,128
  805300:	103ff326 	beq	r2,zero,8052d0 <__swsetup_r+0x64>
  805304:	00bfffc4 	movi	r2,-1
  805308:	003ff206 	br	8052d4 <__swsetup_r+0x68>
  80530c:	80800517 	ldw	r2,20(r16)
  805310:	80800215 	stw	r2,8(r16)
  805314:	003fed06 	br	8052cc <__swsetup_r+0x60>
  805318:	1809883a 	mov	r4,r3
  80531c:	0806e500 	call	806e50 <__sinit>
  805320:	003fde06 	br	80529c <__swsetup_r+0x30>
  805324:	20c0a00c 	andi	r3,r4,640
  805328:	00808004 	movi	r2,512
  80532c:	18bfe026 	beq	r3,r2,8052b0 <__swsetup_r+0x44>
  805330:	8809883a 	mov	r4,r17
  805334:	800b883a 	mov	r5,r16
  805338:	0807bfc0 	call	807bfc <__smakebuf_r>
  80533c:	8100030b 	ldhu	r4,12(r16)
  805340:	81400417 	ldw	r5,16(r16)
  805344:	003fda06 	br	8052b0 <__swsetup_r+0x44>
  805348:	2080040c 	andi	r2,r4,16
  80534c:	103fed26 	beq	r2,zero,805304 <__swsetup_r+0x98>
  805350:	2080010c 	andi	r2,r4,4
  805354:	10001226 	beq	r2,zero,8053a0 <__swsetup_r+0x134>
  805358:	81400c17 	ldw	r5,48(r16)
  80535c:	28000526 	beq	r5,zero,805374 <__swsetup_r+0x108>
  805360:	80801004 	addi	r2,r16,64
  805364:	28800226 	beq	r5,r2,805370 <__swsetup_r+0x104>
  805368:	8809883a 	mov	r4,r17
  80536c:	08072080 	call	807208 <_free_r>
  805370:	80000c15 	stw	zero,48(r16)
  805374:	8080030b 	ldhu	r2,12(r16)
  805378:	81400417 	ldw	r5,16(r16)
  80537c:	80000115 	stw	zero,4(r16)
  805380:	10bff6cc 	andi	r2,r2,65499
  805384:	8080030d 	sth	r2,12(r16)
  805388:	81400015 	stw	r5,0(r16)
  80538c:	8080030b 	ldhu	r2,12(r16)
  805390:	10800214 	ori	r2,r2,8
  805394:	113fffcc 	andi	r4,r2,65535
  805398:	8080030d 	sth	r2,12(r16)
  80539c:	003fc306 	br	8052ac <__swsetup_r+0x40>
  8053a0:	81400417 	ldw	r5,16(r16)
  8053a4:	003ff906 	br	80538c <__swsetup_r+0x120>

008053a8 <abort>:
  8053a8:	deffff04 	addi	sp,sp,-4
  8053ac:	01000184 	movi	r4,6
  8053b0:	dfc00015 	stw	ra,0(sp)
  8053b4:	080903c0 	call	80903c <raise>
  8053b8:	01000044 	movi	r4,1
  8053bc:	080c6540 	call	80c654 <_exit>

008053c0 <quorem>:
  8053c0:	28c00417 	ldw	r3,16(r5)
  8053c4:	20800417 	ldw	r2,16(r4)
  8053c8:	defff104 	addi	sp,sp,-60
  8053cc:	dfc00e15 	stw	ra,56(sp)
  8053d0:	df000d15 	stw	fp,52(sp)
  8053d4:	ddc00c15 	stw	r23,48(sp)
  8053d8:	dd800b15 	stw	r22,44(sp)
  8053dc:	dd400a15 	stw	r21,40(sp)
  8053e0:	dd000915 	stw	r20,36(sp)
  8053e4:	dcc00815 	stw	r19,32(sp)
  8053e8:	dc800715 	stw	r18,28(sp)
  8053ec:	dc400615 	stw	r17,24(sp)
  8053f0:	dc000515 	stw	r16,20(sp)
  8053f4:	d9000315 	stw	r4,12(sp)
  8053f8:	d9400415 	stw	r5,16(sp)
  8053fc:	10c07f16 	blt	r2,r3,8055fc <quorem+0x23c>
  805400:	1d3fffc4 	addi	r20,r3,-1
  805404:	d8c00417 	ldw	r3,16(sp)
  805408:	d9000317 	ldw	r4,12(sp)
  80540c:	a505883a 	add	r2,r20,r20
  805410:	1085883a 	add	r2,r2,r2
  805414:	1cc00504 	addi	r19,r3,20
  805418:	25c00504 	addi	r23,r4,20
  80541c:	98ad883a 	add	r22,r19,r2
  805420:	15c7883a 	add	r3,r2,r23
  805424:	b1400017 	ldw	r5,0(r22)
  805428:	19000017 	ldw	r4,0(r3)
  80542c:	d8c00015 	stw	r3,0(sp)
  805430:	29400044 	addi	r5,r5,1
  805434:	d9000215 	stw	r4,8(sp)
  805438:	08019340 	call	801934 <__udivsi3>
  80543c:	1039883a 	mov	fp,r2
  805440:	10003d1e 	bne	r2,zero,805538 <quorem+0x178>
  805444:	d9400417 	ldw	r5,16(sp)
  805448:	d9000317 	ldw	r4,12(sp)
  80544c:	0807fd00 	call	807fd0 <__mcmp>
  805450:	10002c16 	blt	r2,zero,805504 <quorem+0x144>
  805454:	e7000044 	addi	fp,fp,1
  805458:	b80f883a 	mov	r7,r23
  80545c:	0011883a 	mov	r8,zero
  805460:	0009883a 	mov	r4,zero
  805464:	99400017 	ldw	r5,0(r19)
  805468:	38c00017 	ldw	r3,0(r7)
  80546c:	9cc00104 	addi	r19,r19,4
  805470:	28bfffcc 	andi	r2,r5,65535
  805474:	2085883a 	add	r2,r4,r2
  805478:	11bfffcc 	andi	r6,r2,65535
  80547c:	193fffcc 	andi	r4,r3,65535
  805480:	1004d43a 	srli	r2,r2,16
  805484:	280ad43a 	srli	r5,r5,16
  805488:	2189c83a 	sub	r4,r4,r6
  80548c:	2209883a 	add	r4,r4,r8
  805490:	1806d43a 	srli	r3,r3,16
  805494:	288b883a 	add	r5,r5,r2
  805498:	200dd43a 	srai	r6,r4,16
  80549c:	28bfffcc 	andi	r2,r5,65535
  8054a0:	1887c83a 	sub	r3,r3,r2
  8054a4:	1987883a 	add	r3,r3,r6
  8054a8:	3900000d 	sth	r4,0(r7)
  8054ac:	38c0008d 	sth	r3,2(r7)
  8054b0:	2808d43a 	srli	r4,r5,16
  8054b4:	39c00104 	addi	r7,r7,4
  8054b8:	1811d43a 	srai	r8,r3,16
  8054bc:	b4ffe92e 	bgeu	r22,r19,805464 <quorem+0xa4>
  8054c0:	a505883a 	add	r2,r20,r20
  8054c4:	1085883a 	add	r2,r2,r2
  8054c8:	b885883a 	add	r2,r23,r2
  8054cc:	10c00017 	ldw	r3,0(r2)
  8054d0:	18000c1e 	bne	r3,zero,805504 <quorem+0x144>
  8054d4:	113fff04 	addi	r4,r2,-4
  8054d8:	b900082e 	bgeu	r23,r4,8054fc <quorem+0x13c>
  8054dc:	10bfff17 	ldw	r2,-4(r2)
  8054e0:	10000326 	beq	r2,zero,8054f0 <quorem+0x130>
  8054e4:	00000506 	br	8054fc <quorem+0x13c>
  8054e8:	20800017 	ldw	r2,0(r4)
  8054ec:	1000031e 	bne	r2,zero,8054fc <quorem+0x13c>
  8054f0:	213fff04 	addi	r4,r4,-4
  8054f4:	a53fffc4 	addi	r20,r20,-1
  8054f8:	b93ffb36 	bltu	r23,r4,8054e8 <quorem+0x128>
  8054fc:	d9000317 	ldw	r4,12(sp)
  805500:	25000415 	stw	r20,16(r4)
  805504:	e005883a 	mov	r2,fp
  805508:	dfc00e17 	ldw	ra,56(sp)
  80550c:	df000d17 	ldw	fp,52(sp)
  805510:	ddc00c17 	ldw	r23,48(sp)
  805514:	dd800b17 	ldw	r22,44(sp)
  805518:	dd400a17 	ldw	r21,40(sp)
  80551c:	dd000917 	ldw	r20,36(sp)
  805520:	dcc00817 	ldw	r19,32(sp)
  805524:	dc800717 	ldw	r18,28(sp)
  805528:	dc400617 	ldw	r17,24(sp)
  80552c:	dc000517 	ldw	r16,20(sp)
  805530:	dec00f04 	addi	sp,sp,60
  805534:	f800283a 	ret
  805538:	b823883a 	mov	r17,r23
  80553c:	9825883a 	mov	r18,r19
  805540:	d8000115 	stw	zero,4(sp)
  805544:	002b883a 	mov	r21,zero
  805548:	94000017 	ldw	r16,0(r18)
  80554c:	e009883a 	mov	r4,fp
  805550:	94800104 	addi	r18,r18,4
  805554:	817fffcc 	andi	r5,r16,65535
  805558:	08019440 	call	801944 <__mulsi3>
  80555c:	800ad43a 	srli	r5,r16,16
  805560:	e009883a 	mov	r4,fp
  805564:	a8a1883a 	add	r16,r21,r2
  805568:	08019440 	call	801944 <__mulsi3>
  80556c:	89000017 	ldw	r4,0(r17)
  805570:	80ffffcc 	andi	r3,r16,65535
  805574:	8020d43a 	srli	r16,r16,16
  805578:	217fffcc 	andi	r5,r4,65535
  80557c:	28cbc83a 	sub	r5,r5,r3
  805580:	d8c00117 	ldw	r3,4(sp)
  805584:	2008d43a 	srli	r4,r4,16
  805588:	1405883a 	add	r2,r2,r16
  80558c:	28cb883a 	add	r5,r5,r3
  805590:	280dd43a 	srai	r6,r5,16
  805594:	10ffffcc 	andi	r3,r2,65535
  805598:	20c9c83a 	sub	r4,r4,r3
  80559c:	2189883a 	add	r4,r4,r6
  8055a0:	8900008d 	sth	r4,2(r17)
  8055a4:	2009d43a 	srai	r4,r4,16
  8055a8:	8940000d 	sth	r5,0(r17)
  8055ac:	102ad43a 	srli	r21,r2,16
  8055b0:	8c400104 	addi	r17,r17,4
  8055b4:	d9000115 	stw	r4,4(sp)
  8055b8:	b4bfe32e 	bgeu	r22,r18,805548 <quorem+0x188>
  8055bc:	d9000217 	ldw	r4,8(sp)
  8055c0:	203fa01e 	bne	r4,zero,805444 <quorem+0x84>
  8055c4:	d8800017 	ldw	r2,0(sp)
  8055c8:	10ffff04 	addi	r3,r2,-4
  8055cc:	b8c0082e 	bgeu	r23,r3,8055f0 <quorem+0x230>
  8055d0:	10bfff17 	ldw	r2,-4(r2)
  8055d4:	10000326 	beq	r2,zero,8055e4 <quorem+0x224>
  8055d8:	00000506 	br	8055f0 <quorem+0x230>
  8055dc:	18800017 	ldw	r2,0(r3)
  8055e0:	1000031e 	bne	r2,zero,8055f0 <quorem+0x230>
  8055e4:	18ffff04 	addi	r3,r3,-4
  8055e8:	a53fffc4 	addi	r20,r20,-1
  8055ec:	b8fffb36 	bltu	r23,r3,8055dc <quorem+0x21c>
  8055f0:	d8c00317 	ldw	r3,12(sp)
  8055f4:	1d000415 	stw	r20,16(r3)
  8055f8:	003f9206 	br	805444 <quorem+0x84>
  8055fc:	0005883a 	mov	r2,zero
  805600:	003fc106 	br	805508 <quorem+0x148>

00805604 <_dtoa_r>:
  805604:	22001017 	ldw	r8,64(r4)
  805608:	deffda04 	addi	sp,sp,-152
  80560c:	dd402115 	stw	r21,132(sp)
  805610:	dd002015 	stw	r20,128(sp)
  805614:	dc801e15 	stw	r18,120(sp)
  805618:	dc401d15 	stw	r17,116(sp)
  80561c:	dfc02515 	stw	ra,148(sp)
  805620:	df002415 	stw	fp,144(sp)
  805624:	ddc02315 	stw	r23,140(sp)
  805628:	dd802215 	stw	r22,136(sp)
  80562c:	dcc01f15 	stw	r19,124(sp)
  805630:	dc001c15 	stw	r16,112(sp)
  805634:	d9001615 	stw	r4,88(sp)
  805638:	3023883a 	mov	r17,r6
  80563c:	2829883a 	mov	r20,r5
  805640:	d9c01715 	stw	r7,92(sp)
  805644:	dc802817 	ldw	r18,160(sp)
  805648:	302b883a 	mov	r21,r6
  80564c:	40000a26 	beq	r8,zero,805678 <_dtoa_r+0x74>
  805650:	20801117 	ldw	r2,68(r4)
  805654:	400b883a 	mov	r5,r8
  805658:	40800115 	stw	r2,4(r8)
  80565c:	20c01117 	ldw	r3,68(r4)
  805660:	00800044 	movi	r2,1
  805664:	10c4983a 	sll	r2,r2,r3
  805668:	40800215 	stw	r2,8(r8)
  80566c:	0807e740 	call	807e74 <_Bfree>
  805670:	d8c01617 	ldw	r3,88(sp)
  805674:	18001015 	stw	zero,64(r3)
  805678:	8800a316 	blt	r17,zero,805908 <_dtoa_r+0x304>
  80567c:	90000015 	stw	zero,0(r18)
  805680:	a8dffc2c 	andhi	r3,r21,32752
  805684:	009ffc34 	movhi	r2,32752
  805688:	18809126 	beq	r3,r2,8058d0 <_dtoa_r+0x2cc>
  80568c:	000d883a 	mov	r6,zero
  805690:	000f883a 	mov	r7,zero
  805694:	a009883a 	mov	r4,r20
  805698:	a80b883a 	mov	r5,r21
  80569c:	dd001215 	stw	r20,72(sp)
  8056a0:	dd401315 	stw	r21,76(sp)
  8056a4:	080bd600 	call	80bd60 <__nedf2>
  8056a8:	1000171e 	bne	r2,zero,805708 <_dtoa_r+0x104>
  8056ac:	d9802717 	ldw	r6,156(sp)
  8056b0:	00800044 	movi	r2,1
  8056b4:	30800015 	stw	r2,0(r6)
  8056b8:	d8802917 	ldw	r2,164(sp)
  8056bc:	10029b26 	beq	r2,zero,80612c <_dtoa_r+0xb28>
  8056c0:	d9002917 	ldw	r4,164(sp)
  8056c4:	008020b4 	movhi	r2,130
  8056c8:	10a18d44 	addi	r2,r2,-31179
  8056cc:	10ffffc4 	addi	r3,r2,-1
  8056d0:	20800015 	stw	r2,0(r4)
  8056d4:	1805883a 	mov	r2,r3
  8056d8:	dfc02517 	ldw	ra,148(sp)
  8056dc:	df002417 	ldw	fp,144(sp)
  8056e0:	ddc02317 	ldw	r23,140(sp)
  8056e4:	dd802217 	ldw	r22,136(sp)
  8056e8:	dd402117 	ldw	r21,132(sp)
  8056ec:	dd002017 	ldw	r20,128(sp)
  8056f0:	dcc01f17 	ldw	r19,124(sp)
  8056f4:	dc801e17 	ldw	r18,120(sp)
  8056f8:	dc401d17 	ldw	r17,116(sp)
  8056fc:	dc001c17 	ldw	r16,112(sp)
  805700:	dec02604 	addi	sp,sp,152
  805704:	f800283a 	ret
  805708:	d9001617 	ldw	r4,88(sp)
  80570c:	d9401217 	ldw	r5,72(sp)
  805710:	d8800104 	addi	r2,sp,4
  805714:	a80d883a 	mov	r6,r21
  805718:	d9c00204 	addi	r7,sp,8
  80571c:	d8800015 	stw	r2,0(sp)
  805720:	08084b00 	call	8084b0 <__d2b>
  805724:	d8800715 	stw	r2,28(sp)
  805728:	a804d53a 	srli	r2,r21,20
  80572c:	1101ffcc 	andi	r4,r2,2047
  805730:	20008626 	beq	r4,zero,80594c <_dtoa_r+0x348>
  805734:	d8c01217 	ldw	r3,72(sp)
  805738:	00800434 	movhi	r2,16
  80573c:	10bfffc4 	addi	r2,r2,-1
  805740:	ddc00117 	ldw	r23,4(sp)
  805744:	a884703a 	and	r2,r21,r2
  805748:	1811883a 	mov	r8,r3
  80574c:	124ffc34 	orhi	r9,r2,16368
  805750:	25bf0044 	addi	r22,r4,-1023
  805754:	d8000815 	stw	zero,32(sp)
  805758:	0005883a 	mov	r2,zero
  80575c:	00cffe34 	movhi	r3,16376
  805760:	480b883a 	mov	r5,r9
  805764:	4009883a 	mov	r4,r8
  805768:	180f883a 	mov	r7,r3
  80576c:	100d883a 	mov	r6,r2
  805770:	080167c0 	call	80167c <__subdf3>
  805774:	0218dbf4 	movhi	r8,25455
  805778:	4210d844 	addi	r8,r8,17249
  80577c:	024ff4f4 	movhi	r9,16339
  805780:	4a61e9c4 	addi	r9,r9,-30809
  805784:	480f883a 	mov	r7,r9
  805788:	400d883a 	mov	r6,r8
  80578c:	180b883a 	mov	r5,r3
  805790:	1009883a 	mov	r4,r2
  805794:	080b6bc0 	call	80b6bc <__muldf3>
  805798:	0222d874 	movhi	r8,35681
  80579c:	42322cc4 	addi	r8,r8,-14157
  8057a0:	024ff1f4 	movhi	r9,16327
  8057a4:	4a628a04 	addi	r9,r9,-30168
  8057a8:	480f883a 	mov	r7,r9
  8057ac:	400d883a 	mov	r6,r8
  8057b0:	180b883a 	mov	r5,r3
  8057b4:	1009883a 	mov	r4,r2
  8057b8:	08016fc0 	call	8016fc <__adddf3>
  8057bc:	b009883a 	mov	r4,r22
  8057c0:	1021883a 	mov	r16,r2
  8057c4:	1823883a 	mov	r17,r3
  8057c8:	080bf800 	call	80bf80 <__floatsidf>
  8057cc:	021427f4 	movhi	r8,20639
  8057d0:	421e7ec4 	addi	r8,r8,31227
  8057d4:	024ff4f4 	movhi	r9,16339
  8057d8:	4a5104c4 	addi	r9,r9,17427
  8057dc:	480f883a 	mov	r7,r9
  8057e0:	400d883a 	mov	r6,r8
  8057e4:	180b883a 	mov	r5,r3
  8057e8:	1009883a 	mov	r4,r2
  8057ec:	080b6bc0 	call	80b6bc <__muldf3>
  8057f0:	180f883a 	mov	r7,r3
  8057f4:	880b883a 	mov	r5,r17
  8057f8:	100d883a 	mov	r6,r2
  8057fc:	8009883a 	mov	r4,r16
  805800:	08016fc0 	call	8016fc <__adddf3>
  805804:	1009883a 	mov	r4,r2
  805808:	180b883a 	mov	r5,r3
  80580c:	1021883a 	mov	r16,r2
  805810:	1823883a 	mov	r17,r3
  805814:	080c0780 	call	80c078 <__fixdfsi>
  805818:	000d883a 	mov	r6,zero
  80581c:	000f883a 	mov	r7,zero
  805820:	8009883a 	mov	r4,r16
  805824:	880b883a 	mov	r5,r17
  805828:	d8800d15 	stw	r2,52(sp)
  80582c:	080bef80 	call	80bef8 <__ltdf2>
  805830:	10031716 	blt	r2,zero,806490 <_dtoa_r+0xe8c>
  805834:	d8c00d17 	ldw	r3,52(sp)
  805838:	00800584 	movi	r2,22
  80583c:	10c1482e 	bgeu	r2,r3,805d60 <_dtoa_r+0x75c>
  805840:	01000044 	movi	r4,1
  805844:	d9000c15 	stw	r4,48(sp)
  805848:	bd85c83a 	sub	r2,r23,r22
  80584c:	11bfffc4 	addi	r6,r2,-1
  805850:	30030b16 	blt	r6,zero,806480 <_dtoa_r+0xe7c>
  805854:	d9800a15 	stw	r6,40(sp)
  805858:	d8001115 	stw	zero,68(sp)
  80585c:	d8c00d17 	ldw	r3,52(sp)
  805860:	1802ff16 	blt	r3,zero,806460 <_dtoa_r+0xe5c>
  805864:	d9000a17 	ldw	r4,40(sp)
  805868:	d8c00915 	stw	r3,36(sp)
  80586c:	d8001015 	stw	zero,64(sp)
  805870:	20c9883a 	add	r4,r4,r3
  805874:	d9000a15 	stw	r4,40(sp)
  805878:	d9001717 	ldw	r4,92(sp)
  80587c:	00800244 	movi	r2,9
  805880:	11004636 	bltu	r2,r4,80599c <_dtoa_r+0x398>
  805884:	00800144 	movi	r2,5
  805888:	11020416 	blt	r2,r4,80609c <_dtoa_r+0xa98>
  80588c:	04400044 	movi	r17,1
  805890:	d8c01717 	ldw	r3,92(sp)
  805894:	00800144 	movi	r2,5
  805898:	10c1ed36 	bltu	r2,r3,806050 <_dtoa_r+0xa4c>
  80589c:	18c5883a 	add	r2,r3,r3
  8058a0:	1085883a 	add	r2,r2,r2
  8058a4:	00c02034 	movhi	r3,128
  8058a8:	18d62e04 	addi	r3,r3,22712
  8058ac:	10c5883a 	add	r2,r2,r3
  8058b0:	11000017 	ldw	r4,0(r2)
  8058b4:	2000683a 	jmp	r4
  8058b8:	008059a4 	muli	r2,zero,358
  8058bc:	008059a4 	muli	r2,zero,358
  8058c0:	008063a4 	muli	r2,zero,398
  8058c4:	0080637c 	xorhi	r2,zero,397
  8058c8:	008063c0 	call	8063c <OSCtxSw_SWITCH_PC+0x805fc>
  8058cc:	008063cc 	andi	r2,zero,399
  8058d0:	d9002717 	ldw	r4,156(sp)
  8058d4:	0089c3c4 	movi	r2,9999
  8058d8:	20800015 	stw	r2,0(r4)
  8058dc:	a0001026 	beq	r20,zero,805920 <_dtoa_r+0x31c>
  8058e0:	00c020b4 	movhi	r3,130
  8058e4:	18e19904 	addi	r3,r3,-31132
  8058e8:	d9802917 	ldw	r6,164(sp)
  8058ec:	303f7926 	beq	r6,zero,8056d4 <_dtoa_r+0xd0>
  8058f0:	188000c7 	ldb	r2,3(r3)
  8058f4:	190000c4 	addi	r4,r3,3
  8058f8:	1000101e 	bne	r2,zero,80593c <_dtoa_r+0x338>
  8058fc:	d8802917 	ldw	r2,164(sp)
  805900:	11000015 	stw	r4,0(r2)
  805904:	003f7306 	br	8056d4 <_dtoa_r+0xd0>
  805908:	00a00034 	movhi	r2,32768
  80590c:	10bfffc4 	addi	r2,r2,-1
  805910:	00c00044 	movi	r3,1
  805914:	88aa703a 	and	r21,r17,r2
  805918:	90c00015 	stw	r3,0(r18)
  80591c:	003f5806 	br	805680 <_dtoa_r+0x7c>
  805920:	00800434 	movhi	r2,16
  805924:	10bfffc4 	addi	r2,r2,-1
  805928:	a884703a 	and	r2,r21,r2
  80592c:	103fec1e 	bne	r2,zero,8058e0 <_dtoa_r+0x2dc>
  805930:	00c020b4 	movhi	r3,130
  805934:	18e19604 	addi	r3,r3,-31144
  805938:	003feb06 	br	8058e8 <_dtoa_r+0x2e4>
  80593c:	d8802917 	ldw	r2,164(sp)
  805940:	19000204 	addi	r4,r3,8
  805944:	11000015 	stw	r4,0(r2)
  805948:	003f6206 	br	8056d4 <_dtoa_r+0xd0>
  80594c:	ddc00117 	ldw	r23,4(sp)
  805950:	d8800217 	ldw	r2,8(sp)
  805954:	01000804 	movi	r4,32
  805958:	b8c10c84 	addi	r3,r23,1074
  80595c:	18a3883a 	add	r17,r3,r2
  805960:	2441b80e 	bge	r4,r17,806044 <_dtoa_r+0xa40>
  805964:	00c01004 	movi	r3,64
  805968:	1c47c83a 	sub	r3,r3,r17
  80596c:	88bff804 	addi	r2,r17,-32
  805970:	a8c6983a 	sll	r3,r21,r3
  805974:	a084d83a 	srl	r2,r20,r2
  805978:	1888b03a 	or	r4,r3,r2
  80597c:	080c1500 	call	80c150 <__floatunsidf>
  805980:	1011883a 	mov	r8,r2
  805984:	00bf8434 	movhi	r2,65040
  805988:	01000044 	movi	r4,1
  80598c:	10d3883a 	add	r9,r2,r3
  805990:	8dbef344 	addi	r22,r17,-1075
  805994:	d9000815 	stw	r4,32(sp)
  805998:	003f6f06 	br	805758 <_dtoa_r+0x154>
  80599c:	d8001715 	stw	zero,92(sp)
  8059a0:	04400044 	movi	r17,1
  8059a4:	00bfffc4 	movi	r2,-1
  8059a8:	00c00044 	movi	r3,1
  8059ac:	d8800e15 	stw	r2,56(sp)
  8059b0:	d8002615 	stw	zero,152(sp)
  8059b4:	d8800f15 	stw	r2,60(sp)
  8059b8:	d8c00b15 	stw	r3,44(sp)
  8059bc:	1021883a 	mov	r16,r2
  8059c0:	d8801617 	ldw	r2,88(sp)
  8059c4:	10001115 	stw	zero,68(r2)
  8059c8:	d8801617 	ldw	r2,88(sp)
  8059cc:	11401117 	ldw	r5,68(r2)
  8059d0:	1009883a 	mov	r4,r2
  8059d4:	08083f40 	call	8083f4 <_Balloc>
  8059d8:	d8c01617 	ldw	r3,88(sp)
  8059dc:	d8800515 	stw	r2,20(sp)
  8059e0:	18801015 	stw	r2,64(r3)
  8059e4:	00800384 	movi	r2,14
  8059e8:	14006836 	bltu	r2,r16,805b8c <_dtoa_r+0x588>
  8059ec:	8805003a 	cmpeq	r2,r17,zero
  8059f0:	1000661e 	bne	r2,zero,805b8c <_dtoa_r+0x588>
  8059f4:	d9000d17 	ldw	r4,52(sp)
  8059f8:	0102300e 	bge	zero,r4,8062bc <_dtoa_r+0xcb8>
  8059fc:	208003cc 	andi	r2,r4,15
  805a00:	100490fa 	slli	r2,r2,3
  805a04:	2025d13a 	srai	r18,r4,4
  805a08:	00c020b4 	movhi	r3,130
  805a0c:	18e1aa04 	addi	r3,r3,-31064
  805a10:	10c5883a 	add	r2,r2,r3
  805a14:	90c0040c 	andi	r3,r18,16
  805a18:	14000017 	ldw	r16,0(r2)
  805a1c:	14400117 	ldw	r17,4(r2)
  805a20:	18036a1e 	bne	r3,zero,8067cc <_dtoa_r+0x11c8>
  805a24:	05800084 	movi	r22,2
  805a28:	90001026 	beq	r18,zero,805a6c <_dtoa_r+0x468>
  805a2c:	04c020b4 	movhi	r19,130
  805a30:	9ce1dc04 	addi	r19,r19,-30864
  805a34:	9080004c 	andi	r2,r18,1
  805a38:	1005003a 	cmpeq	r2,r2,zero
  805a3c:	1000081e 	bne	r2,zero,805a60 <_dtoa_r+0x45c>
  805a40:	99800017 	ldw	r6,0(r19)
  805a44:	99c00117 	ldw	r7,4(r19)
  805a48:	880b883a 	mov	r5,r17
  805a4c:	8009883a 	mov	r4,r16
  805a50:	080b6bc0 	call	80b6bc <__muldf3>
  805a54:	1021883a 	mov	r16,r2
  805a58:	b5800044 	addi	r22,r22,1
  805a5c:	1823883a 	mov	r17,r3
  805a60:	9025d07a 	srai	r18,r18,1
  805a64:	9cc00204 	addi	r19,r19,8
  805a68:	903ff21e 	bne	r18,zero,805a34 <_dtoa_r+0x430>
  805a6c:	a80b883a 	mov	r5,r21
  805a70:	a009883a 	mov	r4,r20
  805a74:	880f883a 	mov	r7,r17
  805a78:	800d883a 	mov	r6,r16
  805a7c:	080ba800 	call	80ba80 <__divdf3>
  805a80:	1029883a 	mov	r20,r2
  805a84:	182b883a 	mov	r21,r3
  805a88:	d8c00c17 	ldw	r3,48(sp)
  805a8c:	1805003a 	cmpeq	r2,r3,zero
  805a90:	1000081e 	bne	r2,zero,805ab4 <_dtoa_r+0x4b0>
  805a94:	0005883a 	mov	r2,zero
  805a98:	00cffc34 	movhi	r3,16368
  805a9c:	180f883a 	mov	r7,r3
  805aa0:	a009883a 	mov	r4,r20
  805aa4:	a80b883a 	mov	r5,r21
  805aa8:	100d883a 	mov	r6,r2
  805aac:	080bef80 	call	80bef8 <__ltdf2>
  805ab0:	1003fe16 	blt	r2,zero,806aac <_dtoa_r+0x14a8>
  805ab4:	b009883a 	mov	r4,r22
  805ab8:	080bf800 	call	80bf80 <__floatsidf>
  805abc:	180b883a 	mov	r5,r3
  805ac0:	1009883a 	mov	r4,r2
  805ac4:	a00d883a 	mov	r6,r20
  805ac8:	a80f883a 	mov	r7,r21
  805acc:	080b6bc0 	call	80b6bc <__muldf3>
  805ad0:	0011883a 	mov	r8,zero
  805ad4:	02500734 	movhi	r9,16412
  805ad8:	1009883a 	mov	r4,r2
  805adc:	180b883a 	mov	r5,r3
  805ae0:	480f883a 	mov	r7,r9
  805ae4:	400d883a 	mov	r6,r8
  805ae8:	08016fc0 	call	8016fc <__adddf3>
  805aec:	d9000f17 	ldw	r4,60(sp)
  805af0:	102d883a 	mov	r22,r2
  805af4:	00bf3034 	movhi	r2,64704
  805af8:	18b9883a 	add	fp,r3,r2
  805afc:	e02f883a 	mov	r23,fp
  805b00:	20028f1e 	bne	r4,zero,806540 <_dtoa_r+0xf3c>
  805b04:	0005883a 	mov	r2,zero
  805b08:	00d00534 	movhi	r3,16404
  805b0c:	a009883a 	mov	r4,r20
  805b10:	a80b883a 	mov	r5,r21
  805b14:	180f883a 	mov	r7,r3
  805b18:	100d883a 	mov	r6,r2
  805b1c:	080167c0 	call	80167c <__subdf3>
  805b20:	1009883a 	mov	r4,r2
  805b24:	e00f883a 	mov	r7,fp
  805b28:	180b883a 	mov	r5,r3
  805b2c:	b00d883a 	mov	r6,r22
  805b30:	1025883a 	mov	r18,r2
  805b34:	1827883a 	mov	r19,r3
  805b38:	080bde80 	call	80bde8 <__gtdf2>
  805b3c:	00834f16 	blt	zero,r2,80687c <_dtoa_r+0x1278>
  805b40:	e0e0003c 	xorhi	r3,fp,32768
  805b44:	9009883a 	mov	r4,r18
  805b48:	980b883a 	mov	r5,r19
  805b4c:	180f883a 	mov	r7,r3
  805b50:	b00d883a 	mov	r6,r22
  805b54:	080bef80 	call	80bef8 <__ltdf2>
  805b58:	1000080e 	bge	r2,zero,805b7c <_dtoa_r+0x578>
  805b5c:	0027883a 	mov	r19,zero
  805b60:	0025883a 	mov	r18,zero
  805b64:	d8802617 	ldw	r2,152(sp)
  805b68:	df000517 	ldw	fp,20(sp)
  805b6c:	d8000615 	stw	zero,24(sp)
  805b70:	0084303a 	nor	r2,zero,r2
  805b74:	d8800d15 	stw	r2,52(sp)
  805b78:	00019b06 	br	8061e8 <_dtoa_r+0xbe4>
  805b7c:	d9801217 	ldw	r6,72(sp)
  805b80:	d8801317 	ldw	r2,76(sp)
  805b84:	3029883a 	mov	r20,r6
  805b88:	102b883a 	mov	r21,r2
  805b8c:	d8c00217 	ldw	r3,8(sp)
  805b90:	18008516 	blt	r3,zero,805da8 <_dtoa_r+0x7a4>
  805b94:	d9000d17 	ldw	r4,52(sp)
  805b98:	00800384 	movi	r2,14
  805b9c:	11008216 	blt	r2,r4,805da8 <_dtoa_r+0x7a4>
  805ba0:	200490fa 	slli	r2,r4,3
  805ba4:	d9802617 	ldw	r6,152(sp)
  805ba8:	00c020b4 	movhi	r3,130
  805bac:	18e1aa04 	addi	r3,r3,-31064
  805bb0:	10c5883a 	add	r2,r2,r3
  805bb4:	14800017 	ldw	r18,0(r2)
  805bb8:	14c00117 	ldw	r19,4(r2)
  805bbc:	30031e16 	blt	r6,zero,806838 <_dtoa_r+0x1234>
  805bc0:	d9000517 	ldw	r4,20(sp)
  805bc4:	d8c00f17 	ldw	r3,60(sp)
  805bc8:	a823883a 	mov	r17,r21
  805bcc:	a021883a 	mov	r16,r20
  805bd0:	192b883a 	add	r21,r3,r4
  805bd4:	2039883a 	mov	fp,r4
  805bd8:	00000f06 	br	805c18 <_dtoa_r+0x614>
  805bdc:	0005883a 	mov	r2,zero
  805be0:	00d00934 	movhi	r3,16420
  805be4:	5009883a 	mov	r4,r10
  805be8:	580b883a 	mov	r5,r11
  805bec:	180f883a 	mov	r7,r3
  805bf0:	100d883a 	mov	r6,r2
  805bf4:	080b6bc0 	call	80b6bc <__muldf3>
  805bf8:	180b883a 	mov	r5,r3
  805bfc:	000d883a 	mov	r6,zero
  805c00:	000f883a 	mov	r7,zero
  805c04:	1009883a 	mov	r4,r2
  805c08:	1021883a 	mov	r16,r2
  805c0c:	1823883a 	mov	r17,r3
  805c10:	080bd600 	call	80bd60 <__nedf2>
  805c14:	10004526 	beq	r2,zero,805d2c <_dtoa_r+0x728>
  805c18:	900d883a 	mov	r6,r18
  805c1c:	980f883a 	mov	r7,r19
  805c20:	8009883a 	mov	r4,r16
  805c24:	880b883a 	mov	r5,r17
  805c28:	080ba800 	call	80ba80 <__divdf3>
  805c2c:	180b883a 	mov	r5,r3
  805c30:	1009883a 	mov	r4,r2
  805c34:	080c0780 	call	80c078 <__fixdfsi>
  805c38:	1009883a 	mov	r4,r2
  805c3c:	1029883a 	mov	r20,r2
  805c40:	080bf800 	call	80bf80 <__floatsidf>
  805c44:	180f883a 	mov	r7,r3
  805c48:	9009883a 	mov	r4,r18
  805c4c:	980b883a 	mov	r5,r19
  805c50:	100d883a 	mov	r6,r2
  805c54:	080b6bc0 	call	80b6bc <__muldf3>
  805c58:	180f883a 	mov	r7,r3
  805c5c:	880b883a 	mov	r5,r17
  805c60:	8009883a 	mov	r4,r16
  805c64:	100d883a 	mov	r6,r2
  805c68:	080167c0 	call	80167c <__subdf3>
  805c6c:	1015883a 	mov	r10,r2
  805c70:	a0800c04 	addi	r2,r20,48
  805c74:	e0800005 	stb	r2,0(fp)
  805c78:	e7000044 	addi	fp,fp,1
  805c7c:	1817883a 	mov	r11,r3
  805c80:	e57fd61e 	bne	fp,r21,805bdc <_dtoa_r+0x5d8>
  805c84:	500d883a 	mov	r6,r10
  805c88:	180f883a 	mov	r7,r3
  805c8c:	5009883a 	mov	r4,r10
  805c90:	180b883a 	mov	r5,r3
  805c94:	08016fc0 	call	8016fc <__adddf3>
  805c98:	100d883a 	mov	r6,r2
  805c9c:	9009883a 	mov	r4,r18
  805ca0:	980b883a 	mov	r5,r19
  805ca4:	180f883a 	mov	r7,r3
  805ca8:	1021883a 	mov	r16,r2
  805cac:	1823883a 	mov	r17,r3
  805cb0:	080bef80 	call	80bef8 <__ltdf2>
  805cb4:	10000816 	blt	r2,zero,805cd8 <_dtoa_r+0x6d4>
  805cb8:	980b883a 	mov	r5,r19
  805cbc:	800d883a 	mov	r6,r16
  805cc0:	880f883a 	mov	r7,r17
  805cc4:	9009883a 	mov	r4,r18
  805cc8:	080bcd80 	call	80bcd8 <__eqdf2>
  805ccc:	1000171e 	bne	r2,zero,805d2c <_dtoa_r+0x728>
  805cd0:	a080004c 	andi	r2,r20,1
  805cd4:	10001526 	beq	r2,zero,805d2c <_dtoa_r+0x728>
  805cd8:	d8800d17 	ldw	r2,52(sp)
  805cdc:	d8800415 	stw	r2,16(sp)
  805ce0:	e009883a 	mov	r4,fp
  805ce4:	213fffc4 	addi	r4,r4,-1
  805ce8:	20c00007 	ldb	r3,0(r4)
  805cec:	00800e44 	movi	r2,57
  805cf0:	1880081e 	bne	r3,r2,805d14 <_dtoa_r+0x710>
  805cf4:	d8800517 	ldw	r2,20(sp)
  805cf8:	113ffa1e 	bne	r2,r4,805ce4 <_dtoa_r+0x6e0>
  805cfc:	d8c00417 	ldw	r3,16(sp)
  805d00:	d9800517 	ldw	r6,20(sp)
  805d04:	00800c04 	movi	r2,48
  805d08:	18c00044 	addi	r3,r3,1
  805d0c:	d8c00415 	stw	r3,16(sp)
  805d10:	30800005 	stb	r2,0(r6)
  805d14:	20800003 	ldbu	r2,0(r4)
  805d18:	d8c00417 	ldw	r3,16(sp)
  805d1c:	27000044 	addi	fp,r4,1
  805d20:	10800044 	addi	r2,r2,1
  805d24:	d8c00d15 	stw	r3,52(sp)
  805d28:	20800005 	stb	r2,0(r4)
  805d2c:	d9001617 	ldw	r4,88(sp)
  805d30:	d9400717 	ldw	r5,28(sp)
  805d34:	0807e740 	call	807e74 <_Bfree>
  805d38:	e0000005 	stb	zero,0(fp)
  805d3c:	d9800d17 	ldw	r6,52(sp)
  805d40:	d8c02717 	ldw	r3,156(sp)
  805d44:	d9002917 	ldw	r4,164(sp)
  805d48:	30800044 	addi	r2,r6,1
  805d4c:	18800015 	stw	r2,0(r3)
  805d50:	20029c26 	beq	r4,zero,8067c4 <_dtoa_r+0x11c0>
  805d54:	d8c00517 	ldw	r3,20(sp)
  805d58:	27000015 	stw	fp,0(r4)
  805d5c:	003e5d06 	br	8056d4 <_dtoa_r+0xd0>
  805d60:	d9800d17 	ldw	r6,52(sp)
  805d64:	00c020b4 	movhi	r3,130
  805d68:	18e1aa04 	addi	r3,r3,-31064
  805d6c:	d9001217 	ldw	r4,72(sp)
  805d70:	300490fa 	slli	r2,r6,3
  805d74:	d9401317 	ldw	r5,76(sp)
  805d78:	10c5883a 	add	r2,r2,r3
  805d7c:	12000017 	ldw	r8,0(r2)
  805d80:	12400117 	ldw	r9,4(r2)
  805d84:	400d883a 	mov	r6,r8
  805d88:	480f883a 	mov	r7,r9
  805d8c:	080bef80 	call	80bef8 <__ltdf2>
  805d90:	1000030e 	bge	r2,zero,805da0 <_dtoa_r+0x79c>
  805d94:	d8800d17 	ldw	r2,52(sp)
  805d98:	10bfffc4 	addi	r2,r2,-1
  805d9c:	d8800d15 	stw	r2,52(sp)
  805da0:	d8000c15 	stw	zero,48(sp)
  805da4:	003ea806 	br	805848 <_dtoa_r+0x244>
  805da8:	d9000b17 	ldw	r4,44(sp)
  805dac:	202cc03a 	cmpne	r22,r4,zero
  805db0:	b000c71e 	bne	r22,zero,8060d0 <_dtoa_r+0xacc>
  805db4:	dc001117 	ldw	r16,68(sp)
  805db8:	dc801017 	ldw	r18,64(sp)
  805dbc:	0027883a 	mov	r19,zero
  805dc0:	04000b0e 	bge	zero,r16,805df0 <_dtoa_r+0x7ec>
  805dc4:	d8c00a17 	ldw	r3,40(sp)
  805dc8:	00c0090e 	bge	zero,r3,805df0 <_dtoa_r+0x7ec>
  805dcc:	8005883a 	mov	r2,r16
  805dd0:	1c011316 	blt	r3,r16,806220 <_dtoa_r+0xc1c>
  805dd4:	d9000a17 	ldw	r4,40(sp)
  805dd8:	d9801117 	ldw	r6,68(sp)
  805ddc:	80a1c83a 	sub	r16,r16,r2
  805de0:	2089c83a 	sub	r4,r4,r2
  805de4:	308dc83a 	sub	r6,r6,r2
  805de8:	d9000a15 	stw	r4,40(sp)
  805dec:	d9801115 	stw	r6,68(sp)
  805df0:	d8801017 	ldw	r2,64(sp)
  805df4:	0080150e 	bge	zero,r2,805e4c <_dtoa_r+0x848>
  805df8:	d8c00b17 	ldw	r3,44(sp)
  805dfc:	1805003a 	cmpeq	r2,r3,zero
  805e00:	1001c91e 	bne	r2,zero,806528 <_dtoa_r+0xf24>
  805e04:	04800e0e 	bge	zero,r18,805e40 <_dtoa_r+0x83c>
  805e08:	d9001617 	ldw	r4,88(sp)
  805e0c:	980b883a 	mov	r5,r19
  805e10:	900d883a 	mov	r6,r18
  805e14:	0808cc00 	call	808cc0 <__pow5mult>
  805e18:	d9001617 	ldw	r4,88(sp)
  805e1c:	d9800717 	ldw	r6,28(sp)
  805e20:	100b883a 	mov	r5,r2
  805e24:	1027883a 	mov	r19,r2
  805e28:	08089040 	call	808904 <__multiply>
  805e2c:	d9001617 	ldw	r4,88(sp)
  805e30:	d9400717 	ldw	r5,28(sp)
  805e34:	1023883a 	mov	r17,r2
  805e38:	0807e740 	call	807e74 <_Bfree>
  805e3c:	dc400715 	stw	r17,28(sp)
  805e40:	d9001017 	ldw	r4,64(sp)
  805e44:	248dc83a 	sub	r6,r4,r18
  805e48:	30010e1e 	bne	r6,zero,806284 <_dtoa_r+0xc80>
  805e4c:	d9001617 	ldw	r4,88(sp)
  805e50:	04400044 	movi	r17,1
  805e54:	880b883a 	mov	r5,r17
  805e58:	0808b580 	call	808b58 <__i2b>
  805e5c:	d9800917 	ldw	r6,36(sp)
  805e60:	1025883a 	mov	r18,r2
  805e64:	0180040e 	bge	zero,r6,805e78 <_dtoa_r+0x874>
  805e68:	d9001617 	ldw	r4,88(sp)
  805e6c:	100b883a 	mov	r5,r2
  805e70:	0808cc00 	call	808cc0 <__pow5mult>
  805e74:	1025883a 	mov	r18,r2
  805e78:	d8801717 	ldw	r2,92(sp)
  805e7c:	8880f30e 	bge	r17,r2,80624c <_dtoa_r+0xc48>
  805e80:	0023883a 	mov	r17,zero
  805e84:	d9800917 	ldw	r6,36(sp)
  805e88:	30019e1e 	bne	r6,zero,806504 <_dtoa_r+0xf00>
  805e8c:	00c00044 	movi	r3,1
  805e90:	d9000a17 	ldw	r4,40(sp)
  805e94:	20c5883a 	add	r2,r4,r3
  805e98:	10c007cc 	andi	r3,r2,31
  805e9c:	1800841e 	bne	r3,zero,8060b0 <_dtoa_r+0xaac>
  805ea0:	00800704 	movi	r2,28
  805ea4:	d9000a17 	ldw	r4,40(sp)
  805ea8:	d9801117 	ldw	r6,68(sp)
  805eac:	80a1883a 	add	r16,r16,r2
  805eb0:	2089883a 	add	r4,r4,r2
  805eb4:	308d883a 	add	r6,r6,r2
  805eb8:	d9000a15 	stw	r4,40(sp)
  805ebc:	d9801115 	stw	r6,68(sp)
  805ec0:	d8801117 	ldw	r2,68(sp)
  805ec4:	0080050e 	bge	zero,r2,805edc <_dtoa_r+0x8d8>
  805ec8:	d9400717 	ldw	r5,28(sp)
  805ecc:	d9001617 	ldw	r4,88(sp)
  805ed0:	100d883a 	mov	r6,r2
  805ed4:	08087b80 	call	8087b8 <__lshift>
  805ed8:	d8800715 	stw	r2,28(sp)
  805edc:	d8c00a17 	ldw	r3,40(sp)
  805ee0:	00c0050e 	bge	zero,r3,805ef8 <_dtoa_r+0x8f4>
  805ee4:	d9001617 	ldw	r4,88(sp)
  805ee8:	900b883a 	mov	r5,r18
  805eec:	180d883a 	mov	r6,r3
  805ef0:	08087b80 	call	8087b8 <__lshift>
  805ef4:	1025883a 	mov	r18,r2
  805ef8:	d9000c17 	ldw	r4,48(sp)
  805efc:	2005003a 	cmpeq	r2,r4,zero
  805f00:	10016f26 	beq	r2,zero,8064c0 <_dtoa_r+0xebc>
  805f04:	d9000f17 	ldw	r4,60(sp)
  805f08:	0102170e 	bge	zero,r4,806768 <_dtoa_r+0x1164>
  805f0c:	d9800b17 	ldw	r6,44(sp)
  805f10:	3005003a 	cmpeq	r2,r6,zero
  805f14:	1000881e 	bne	r2,zero,806138 <_dtoa_r+0xb34>
  805f18:	0400050e 	bge	zero,r16,805f30 <_dtoa_r+0x92c>
  805f1c:	d9001617 	ldw	r4,88(sp)
  805f20:	980b883a 	mov	r5,r19
  805f24:	800d883a 	mov	r6,r16
  805f28:	08087b80 	call	8087b8 <__lshift>
  805f2c:	1027883a 	mov	r19,r2
  805f30:	8804c03a 	cmpne	r2,r17,zero
  805f34:	1002541e 	bne	r2,zero,806888 <_dtoa_r+0x1284>
  805f38:	980b883a 	mov	r5,r19
  805f3c:	dd800517 	ldw	r22,20(sp)
  805f40:	dcc00615 	stw	r19,24(sp)
  805f44:	a700004c 	andi	fp,r20,1
  805f48:	2827883a 	mov	r19,r5
  805f4c:	d9000717 	ldw	r4,28(sp)
  805f50:	900b883a 	mov	r5,r18
  805f54:	08053c00 	call	8053c0 <quorem>
  805f58:	d9000717 	ldw	r4,28(sp)
  805f5c:	d9400617 	ldw	r5,24(sp)
  805f60:	1023883a 	mov	r17,r2
  805f64:	8dc00c04 	addi	r23,r17,48
  805f68:	0807fd00 	call	807fd0 <__mcmp>
  805f6c:	d9001617 	ldw	r4,88(sp)
  805f70:	900b883a 	mov	r5,r18
  805f74:	980d883a 	mov	r6,r19
  805f78:	1029883a 	mov	r20,r2
  805f7c:	080862c0 	call	80862c <__mdiff>
  805f80:	102b883a 	mov	r21,r2
  805f84:	10800317 	ldw	r2,12(r2)
  805f88:	1001281e 	bne	r2,zero,80642c <_dtoa_r+0xe28>
  805f8c:	d9000717 	ldw	r4,28(sp)
  805f90:	a80b883a 	mov	r5,r21
  805f94:	0807fd00 	call	807fd0 <__mcmp>
  805f98:	d9001617 	ldw	r4,88(sp)
  805f9c:	1021883a 	mov	r16,r2
  805fa0:	a80b883a 	mov	r5,r21
  805fa4:	0807e740 	call	807e74 <_Bfree>
  805fa8:	8000041e 	bne	r16,zero,805fbc <_dtoa_r+0x9b8>
  805fac:	d8801717 	ldw	r2,92(sp)
  805fb0:	1000021e 	bne	r2,zero,805fbc <_dtoa_r+0x9b8>
  805fb4:	e004c03a 	cmpne	r2,fp,zero
  805fb8:	10011726 	beq	r2,zero,806418 <_dtoa_r+0xe14>
  805fbc:	a0010616 	blt	r20,zero,8063d8 <_dtoa_r+0xdd4>
  805fc0:	a000041e 	bne	r20,zero,805fd4 <_dtoa_r+0x9d0>
  805fc4:	d8c01717 	ldw	r3,92(sp)
  805fc8:	1800021e 	bne	r3,zero,805fd4 <_dtoa_r+0x9d0>
  805fcc:	e004c03a 	cmpne	r2,fp,zero
  805fd0:	10010126 	beq	r2,zero,8063d8 <_dtoa_r+0xdd4>
  805fd4:	04023d16 	blt	zero,r16,8068cc <_dtoa_r+0x12c8>
  805fd8:	b5c00005 	stb	r23,0(r22)
  805fdc:	d9800517 	ldw	r6,20(sp)
  805fe0:	d9000f17 	ldw	r4,60(sp)
  805fe4:	b5800044 	addi	r22,r22,1
  805fe8:	3105883a 	add	r2,r6,r4
  805fec:	b0806526 	beq	r22,r2,806184 <_dtoa_r+0xb80>
  805ff0:	d9400717 	ldw	r5,28(sp)
  805ff4:	d9001617 	ldw	r4,88(sp)
  805ff8:	01800284 	movi	r6,10
  805ffc:	000f883a 	mov	r7,zero
  806000:	0808b940 	call	808b94 <__multadd>
  806004:	d8800715 	stw	r2,28(sp)
  806008:	d8800617 	ldw	r2,24(sp)
  80600c:	14c10c26 	beq	r2,r19,806440 <_dtoa_r+0xe3c>
  806010:	d9400617 	ldw	r5,24(sp)
  806014:	d9001617 	ldw	r4,88(sp)
  806018:	01800284 	movi	r6,10
  80601c:	000f883a 	mov	r7,zero
  806020:	0808b940 	call	808b94 <__multadd>
  806024:	d9001617 	ldw	r4,88(sp)
  806028:	980b883a 	mov	r5,r19
  80602c:	01800284 	movi	r6,10
  806030:	000f883a 	mov	r7,zero
  806034:	d8800615 	stw	r2,24(sp)
  806038:	0808b940 	call	808b94 <__multadd>
  80603c:	1027883a 	mov	r19,r2
  806040:	003fc206 	br	805f4c <_dtoa_r+0x948>
  806044:	2445c83a 	sub	r2,r4,r17
  806048:	a088983a 	sll	r4,r20,r2
  80604c:	003e4b06 	br	80597c <_dtoa_r+0x378>
  806050:	01bfffc4 	movi	r6,-1
  806054:	00800044 	movi	r2,1
  806058:	d9800e15 	stw	r6,56(sp)
  80605c:	d9800f15 	stw	r6,60(sp)
  806060:	d8800b15 	stw	r2,44(sp)
  806064:	d8c01617 	ldw	r3,88(sp)
  806068:	008005c4 	movi	r2,23
  80606c:	18001115 	stw	zero,68(r3)
  806070:	1580082e 	bgeu	r2,r22,806094 <_dtoa_r+0xa90>
  806074:	00c00104 	movi	r3,4
  806078:	0009883a 	mov	r4,zero
  80607c:	18c7883a 	add	r3,r3,r3
  806080:	18800504 	addi	r2,r3,20
  806084:	21000044 	addi	r4,r4,1
  806088:	b0bffc2e 	bgeu	r22,r2,80607c <_dtoa_r+0xa78>
  80608c:	d9801617 	ldw	r6,88(sp)
  806090:	31001115 	stw	r4,68(r6)
  806094:	dc000f17 	ldw	r16,60(sp)
  806098:	003e4b06 	br	8059c8 <_dtoa_r+0x3c4>
  80609c:	d9801717 	ldw	r6,92(sp)
  8060a0:	0023883a 	mov	r17,zero
  8060a4:	31bfff04 	addi	r6,r6,-4
  8060a8:	d9801715 	stw	r6,92(sp)
  8060ac:	003df806 	br	805890 <_dtoa_r+0x28c>
  8060b0:	00800804 	movi	r2,32
  8060b4:	10c9c83a 	sub	r4,r2,r3
  8060b8:	00c00104 	movi	r3,4
  8060bc:	19005a16 	blt	r3,r4,806228 <_dtoa_r+0xc24>
  8060c0:	008000c4 	movi	r2,3
  8060c4:	113f7e16 	blt	r2,r4,805ec0 <_dtoa_r+0x8bc>
  8060c8:	20800704 	addi	r2,r4,28
  8060cc:	003f7506 	br	805ea4 <_dtoa_r+0x8a0>
  8060d0:	d9801717 	ldw	r6,92(sp)
  8060d4:	00800044 	movi	r2,1
  8060d8:	1180a10e 	bge	r2,r6,806360 <_dtoa_r+0xd5c>
  8060dc:	d9800f17 	ldw	r6,60(sp)
  8060e0:	d8c01017 	ldw	r3,64(sp)
  8060e4:	30bfffc4 	addi	r2,r6,-1
  8060e8:	1881c616 	blt	r3,r2,806804 <_dtoa_r+0x1200>
  8060ec:	18a5c83a 	sub	r18,r3,r2
  8060f0:	d8800f17 	ldw	r2,60(sp)
  8060f4:	10026216 	blt	r2,zero,806a80 <_dtoa_r+0x147c>
  8060f8:	dc001117 	ldw	r16,68(sp)
  8060fc:	1007883a 	mov	r3,r2
  806100:	d9800a17 	ldw	r6,40(sp)
  806104:	d8801117 	ldw	r2,68(sp)
  806108:	d9001617 	ldw	r4,88(sp)
  80610c:	30cd883a 	add	r6,r6,r3
  806110:	10c5883a 	add	r2,r2,r3
  806114:	01400044 	movi	r5,1
  806118:	d9800a15 	stw	r6,40(sp)
  80611c:	d8801115 	stw	r2,68(sp)
  806120:	0808b580 	call	808b58 <__i2b>
  806124:	1027883a 	mov	r19,r2
  806128:	003f2506 	br	805dc0 <_dtoa_r+0x7bc>
  80612c:	00c020b4 	movhi	r3,130
  806130:	18e18d04 	addi	r3,r3,-31180
  806134:	003d6706 	br	8056d4 <_dtoa_r+0xd0>
  806138:	dd800517 	ldw	r22,20(sp)
  80613c:	04000044 	movi	r16,1
  806140:	00000706 	br	806160 <_dtoa_r+0xb5c>
  806144:	d9400717 	ldw	r5,28(sp)
  806148:	d9001617 	ldw	r4,88(sp)
  80614c:	01800284 	movi	r6,10
  806150:	000f883a 	mov	r7,zero
  806154:	0808b940 	call	808b94 <__multadd>
  806158:	d8800715 	stw	r2,28(sp)
  80615c:	84000044 	addi	r16,r16,1
  806160:	d9000717 	ldw	r4,28(sp)
  806164:	900b883a 	mov	r5,r18
  806168:	08053c00 	call	8053c0 <quorem>
  80616c:	15c00c04 	addi	r23,r2,48
  806170:	b5c00005 	stb	r23,0(r22)
  806174:	d8c00f17 	ldw	r3,60(sp)
  806178:	b5800044 	addi	r22,r22,1
  80617c:	80fff116 	blt	r16,r3,806144 <_dtoa_r+0xb40>
  806180:	d8000615 	stw	zero,24(sp)
  806184:	d9400717 	ldw	r5,28(sp)
  806188:	d9001617 	ldw	r4,88(sp)
  80618c:	01800044 	movi	r6,1
  806190:	08087b80 	call	8087b8 <__lshift>
  806194:	1009883a 	mov	r4,r2
  806198:	900b883a 	mov	r5,r18
  80619c:	d8800715 	stw	r2,28(sp)
  8061a0:	0807fd00 	call	807fd0 <__mcmp>
  8061a4:	00803c0e 	bge	zero,r2,806298 <_dtoa_r+0xc94>
  8061a8:	b009883a 	mov	r4,r22
  8061ac:	213fffc4 	addi	r4,r4,-1
  8061b0:	21400003 	ldbu	r5,0(r4)
  8061b4:	00800e44 	movi	r2,57
  8061b8:	28c03fcc 	andi	r3,r5,255
  8061bc:	18c0201c 	xori	r3,r3,128
  8061c0:	18ffe004 	addi	r3,r3,-128
  8061c4:	1881981e 	bne	r3,r2,806828 <_dtoa_r+0x1224>
  8061c8:	d9800517 	ldw	r6,20(sp)
  8061cc:	21bff71e 	bne	r4,r6,8061ac <_dtoa_r+0xba8>
  8061d0:	d8800d17 	ldw	r2,52(sp)
  8061d4:	37000044 	addi	fp,r6,1
  8061d8:	10800044 	addi	r2,r2,1
  8061dc:	d8800d15 	stw	r2,52(sp)
  8061e0:	00800c44 	movi	r2,49
  8061e4:	30800005 	stb	r2,0(r6)
  8061e8:	d9001617 	ldw	r4,88(sp)
  8061ec:	900b883a 	mov	r5,r18
  8061f0:	0807e740 	call	807e74 <_Bfree>
  8061f4:	983ecd26 	beq	r19,zero,805d2c <_dtoa_r+0x728>
  8061f8:	d8c00617 	ldw	r3,24(sp)
  8061fc:	18000426 	beq	r3,zero,806210 <_dtoa_r+0xc0c>
  806200:	1cc00326 	beq	r3,r19,806210 <_dtoa_r+0xc0c>
  806204:	d9001617 	ldw	r4,88(sp)
  806208:	180b883a 	mov	r5,r3
  80620c:	0807e740 	call	807e74 <_Bfree>
  806210:	d9001617 	ldw	r4,88(sp)
  806214:	980b883a 	mov	r5,r19
  806218:	0807e740 	call	807e74 <_Bfree>
  80621c:	003ec306 	br	805d2c <_dtoa_r+0x728>
  806220:	1805883a 	mov	r2,r3
  806224:	003eeb06 	br	805dd4 <_dtoa_r+0x7d0>
  806228:	d9800a17 	ldw	r6,40(sp)
  80622c:	d8c01117 	ldw	r3,68(sp)
  806230:	20bfff04 	addi	r2,r4,-4
  806234:	308d883a 	add	r6,r6,r2
  806238:	1887883a 	add	r3,r3,r2
  80623c:	80a1883a 	add	r16,r16,r2
  806240:	d9800a15 	stw	r6,40(sp)
  806244:	d8c01115 	stw	r3,68(sp)
  806248:	003f1d06 	br	805ec0 <_dtoa_r+0x8bc>
  80624c:	a03f0c1e 	bne	r20,zero,805e80 <_dtoa_r+0x87c>
  806250:	00800434 	movhi	r2,16
  806254:	10bfffc4 	addi	r2,r2,-1
  806258:	a884703a 	and	r2,r21,r2
  80625c:	103f081e 	bne	r2,zero,805e80 <_dtoa_r+0x87c>
  806260:	a89ffc2c 	andhi	r2,r21,32752
  806264:	103f0626 	beq	r2,zero,805e80 <_dtoa_r+0x87c>
  806268:	d8c01117 	ldw	r3,68(sp)
  80626c:	d9000a17 	ldw	r4,40(sp)
  806270:	18c00044 	addi	r3,r3,1
  806274:	21000044 	addi	r4,r4,1
  806278:	d8c01115 	stw	r3,68(sp)
  80627c:	d9000a15 	stw	r4,40(sp)
  806280:	003f0006 	br	805e84 <_dtoa_r+0x880>
  806284:	d9400717 	ldw	r5,28(sp)
  806288:	d9001617 	ldw	r4,88(sp)
  80628c:	0808cc00 	call	808cc0 <__pow5mult>
  806290:	d8800715 	stw	r2,28(sp)
  806294:	003eed06 	br	805e4c <_dtoa_r+0x848>
  806298:	1000021e 	bne	r2,zero,8062a4 <_dtoa_r+0xca0>
  80629c:	b880004c 	andi	r2,r23,1
  8062a0:	103fc11e 	bne	r2,zero,8061a8 <_dtoa_r+0xba4>
  8062a4:	b5bfffc4 	addi	r22,r22,-1
  8062a8:	b0c00007 	ldb	r3,0(r22)
  8062ac:	00800c04 	movi	r2,48
  8062b0:	18bffc26 	beq	r3,r2,8062a4 <_dtoa_r+0xca0>
  8062b4:	b7000044 	addi	fp,r22,1
  8062b8:	003fcb06 	br	8061e8 <_dtoa_r+0xbe4>
  8062bc:	d9800d17 	ldw	r6,52(sp)
  8062c0:	018fc83a 	sub	r7,zero,r6
  8062c4:	3801f726 	beq	r7,zero,806aa4 <_dtoa_r+0x14a0>
  8062c8:	398003cc 	andi	r6,r7,15
  8062cc:	300c90fa 	slli	r6,r6,3
  8062d0:	014020b4 	movhi	r5,130
  8062d4:	2961aa04 	addi	r5,r5,-31064
  8062d8:	d9001217 	ldw	r4,72(sp)
  8062dc:	314d883a 	add	r6,r6,r5
  8062e0:	30c00117 	ldw	r3,4(r6)
  8062e4:	30800017 	ldw	r2,0(r6)
  8062e8:	d9401317 	ldw	r5,76(sp)
  8062ec:	3821d13a 	srai	r16,r7,4
  8062f0:	100d883a 	mov	r6,r2
  8062f4:	180f883a 	mov	r7,r3
  8062f8:	080b6bc0 	call	80b6bc <__muldf3>
  8062fc:	1011883a 	mov	r8,r2
  806300:	1813883a 	mov	r9,r3
  806304:	1029883a 	mov	r20,r2
  806308:	182b883a 	mov	r21,r3
  80630c:	8001e526 	beq	r16,zero,806aa4 <_dtoa_r+0x14a0>
  806310:	05800084 	movi	r22,2
  806314:	044020b4 	movhi	r17,130
  806318:	8c61dc04 	addi	r17,r17,-30864
  80631c:	8080004c 	andi	r2,r16,1
  806320:	1005003a 	cmpeq	r2,r2,zero
  806324:	1000081e 	bne	r2,zero,806348 <_dtoa_r+0xd44>
  806328:	89800017 	ldw	r6,0(r17)
  80632c:	89c00117 	ldw	r7,4(r17)
  806330:	480b883a 	mov	r5,r9
  806334:	4009883a 	mov	r4,r8
  806338:	080b6bc0 	call	80b6bc <__muldf3>
  80633c:	1011883a 	mov	r8,r2
  806340:	b5800044 	addi	r22,r22,1
  806344:	1813883a 	mov	r9,r3
  806348:	8021d07a 	srai	r16,r16,1
  80634c:	8c400204 	addi	r17,r17,8
  806350:	803ff21e 	bne	r16,zero,80631c <_dtoa_r+0xd18>
  806354:	4029883a 	mov	r20,r8
  806358:	482b883a 	mov	r21,r9
  80635c:	003dca06 	br	805a88 <_dtoa_r+0x484>
  806360:	d9000817 	ldw	r4,32(sp)
  806364:	2005003a 	cmpeq	r2,r4,zero
  806368:	1001f61e 	bne	r2,zero,806b44 <_dtoa_r+0x1540>
  80636c:	dc001117 	ldw	r16,68(sp)
  806370:	dc801017 	ldw	r18,64(sp)
  806374:	18c10cc4 	addi	r3,r3,1075
  806378:	003f6106 	br	806100 <_dtoa_r+0xafc>
  80637c:	d8000b15 	stw	zero,44(sp)
  806380:	d9802617 	ldw	r6,152(sp)
  806384:	d8c00d17 	ldw	r3,52(sp)
  806388:	30800044 	addi	r2,r6,1
  80638c:	18ad883a 	add	r22,r3,r2
  806390:	b13fffc4 	addi	r4,r22,-1
  806394:	d9000e15 	stw	r4,56(sp)
  806398:	0581f60e 	bge	zero,r22,806b74 <_dtoa_r+0x1570>
  80639c:	dd800f15 	stw	r22,60(sp)
  8063a0:	003f3006 	br	806064 <_dtoa_r+0xa60>
  8063a4:	d8000b15 	stw	zero,44(sp)
  8063a8:	d9002617 	ldw	r4,152(sp)
  8063ac:	0101eb0e 	bge	zero,r4,806b5c <_dtoa_r+0x1558>
  8063b0:	202d883a 	mov	r22,r4
  8063b4:	d9000e15 	stw	r4,56(sp)
  8063b8:	d9000f15 	stw	r4,60(sp)
  8063bc:	003f2906 	br	806064 <_dtoa_r+0xa60>
  8063c0:	01800044 	movi	r6,1
  8063c4:	d9800b15 	stw	r6,44(sp)
  8063c8:	003ff706 	br	8063a8 <_dtoa_r+0xda4>
  8063cc:	01000044 	movi	r4,1
  8063d0:	d9000b15 	stw	r4,44(sp)
  8063d4:	003fea06 	br	806380 <_dtoa_r+0xd7c>
  8063d8:	04000c0e 	bge	zero,r16,80640c <_dtoa_r+0xe08>
  8063dc:	d9400717 	ldw	r5,28(sp)
  8063e0:	d9001617 	ldw	r4,88(sp)
  8063e4:	01800044 	movi	r6,1
  8063e8:	08087b80 	call	8087b8 <__lshift>
  8063ec:	1009883a 	mov	r4,r2
  8063f0:	900b883a 	mov	r5,r18
  8063f4:	d8800715 	stw	r2,28(sp)
  8063f8:	0807fd00 	call	807fd0 <__mcmp>
  8063fc:	0081e00e 	bge	zero,r2,806b80 <_dtoa_r+0x157c>
  806400:	bdc00044 	addi	r23,r23,1
  806404:	00800e84 	movi	r2,58
  806408:	b881a226 	beq	r23,r2,806a94 <_dtoa_r+0x1490>
  80640c:	b7000044 	addi	fp,r22,1
  806410:	b5c00005 	stb	r23,0(r22)
  806414:	003f7406 	br	8061e8 <_dtoa_r+0xbe4>
  806418:	00800e44 	movi	r2,57
  80641c:	b8819d26 	beq	r23,r2,806a94 <_dtoa_r+0x1490>
  806420:	053ffa0e 	bge	zero,r20,80640c <_dtoa_r+0xe08>
  806424:	8dc00c44 	addi	r23,r17,49
  806428:	003ff806 	br	80640c <_dtoa_r+0xe08>
  80642c:	d9001617 	ldw	r4,88(sp)
  806430:	a80b883a 	mov	r5,r21
  806434:	04000044 	movi	r16,1
  806438:	0807e740 	call	807e74 <_Bfree>
  80643c:	003edf06 	br	805fbc <_dtoa_r+0x9b8>
  806440:	d9001617 	ldw	r4,88(sp)
  806444:	980b883a 	mov	r5,r19
  806448:	01800284 	movi	r6,10
  80644c:	000f883a 	mov	r7,zero
  806450:	0808b940 	call	808b94 <__multadd>
  806454:	1027883a 	mov	r19,r2
  806458:	d8800615 	stw	r2,24(sp)
  80645c:	003ebb06 	br	805f4c <_dtoa_r+0x948>
  806460:	d9801117 	ldw	r6,68(sp)
  806464:	d8800d17 	ldw	r2,52(sp)
  806468:	d8000915 	stw	zero,36(sp)
  80646c:	308dc83a 	sub	r6,r6,r2
  806470:	0087c83a 	sub	r3,zero,r2
  806474:	d9801115 	stw	r6,68(sp)
  806478:	d8c01015 	stw	r3,64(sp)
  80647c:	003cfe06 	br	805878 <_dtoa_r+0x274>
  806480:	018dc83a 	sub	r6,zero,r6
  806484:	d9801115 	stw	r6,68(sp)
  806488:	d8000a15 	stw	zero,40(sp)
  80648c:	003cf306 	br	80585c <_dtoa_r+0x258>
  806490:	d9000d17 	ldw	r4,52(sp)
  806494:	080bf800 	call	80bf80 <__floatsidf>
  806498:	880b883a 	mov	r5,r17
  80649c:	8009883a 	mov	r4,r16
  8064a0:	180f883a 	mov	r7,r3
  8064a4:	100d883a 	mov	r6,r2
  8064a8:	080bd600 	call	80bd60 <__nedf2>
  8064ac:	103ce126 	beq	r2,zero,805834 <_dtoa_r+0x230>
  8064b0:	d9800d17 	ldw	r6,52(sp)
  8064b4:	31bfffc4 	addi	r6,r6,-1
  8064b8:	d9800d15 	stw	r6,52(sp)
  8064bc:	003cdd06 	br	805834 <_dtoa_r+0x230>
  8064c0:	d9000717 	ldw	r4,28(sp)
  8064c4:	900b883a 	mov	r5,r18
  8064c8:	0807fd00 	call	807fd0 <__mcmp>
  8064cc:	103e8d0e 	bge	r2,zero,805f04 <_dtoa_r+0x900>
  8064d0:	d9400717 	ldw	r5,28(sp)
  8064d4:	d9001617 	ldw	r4,88(sp)
  8064d8:	01800284 	movi	r6,10
  8064dc:	000f883a 	mov	r7,zero
  8064e0:	0808b940 	call	808b94 <__multadd>
  8064e4:	d9800d17 	ldw	r6,52(sp)
  8064e8:	d8800715 	stw	r2,28(sp)
  8064ec:	31bfffc4 	addi	r6,r6,-1
  8064f0:	d9800d15 	stw	r6,52(sp)
  8064f4:	b001a71e 	bne	r22,zero,806b94 <_dtoa_r+0x1590>
  8064f8:	d8800e17 	ldw	r2,56(sp)
  8064fc:	d8800f15 	stw	r2,60(sp)
  806500:	003e8006 	br	805f04 <_dtoa_r+0x900>
  806504:	90800417 	ldw	r2,16(r18)
  806508:	1085883a 	add	r2,r2,r2
  80650c:	1085883a 	add	r2,r2,r2
  806510:	1485883a 	add	r2,r2,r18
  806514:	11000417 	ldw	r4,16(r2)
  806518:	0807e9c0 	call	807e9c <__hi0bits>
  80651c:	00c00804 	movi	r3,32
  806520:	1887c83a 	sub	r3,r3,r2
  806524:	003e5a06 	br	805e90 <_dtoa_r+0x88c>
  806528:	d9400717 	ldw	r5,28(sp)
  80652c:	d9801017 	ldw	r6,64(sp)
  806530:	d9001617 	ldw	r4,88(sp)
  806534:	0808cc00 	call	808cc0 <__pow5mult>
  806538:	d8800715 	stw	r2,28(sp)
  80653c:	003e4306 	br	805e4c <_dtoa_r+0x848>
  806540:	d9800f17 	ldw	r6,60(sp)
  806544:	d8800d17 	ldw	r2,52(sp)
  806548:	d9800315 	stw	r6,12(sp)
  80654c:	d8800415 	stw	r2,16(sp)
  806550:	d8c00b17 	ldw	r3,44(sp)
  806554:	1805003a 	cmpeq	r2,r3,zero
  806558:	1000e21e 	bne	r2,zero,8068e4 <_dtoa_r+0x12e0>
  80655c:	d9000317 	ldw	r4,12(sp)
  806560:	0005883a 	mov	r2,zero
  806564:	00cff834 	movhi	r3,16352
  806568:	200c90fa 	slli	r6,r4,3
  80656c:	010020b4 	movhi	r4,130
  806570:	2121aa04 	addi	r4,r4,-31064
  806574:	180b883a 	mov	r5,r3
  806578:	310d883a 	add	r6,r6,r4
  80657c:	327fff17 	ldw	r9,-4(r6)
  806580:	323ffe17 	ldw	r8,-8(r6)
  806584:	1009883a 	mov	r4,r2
  806588:	480f883a 	mov	r7,r9
  80658c:	400d883a 	mov	r6,r8
  806590:	080ba800 	call	80ba80 <__divdf3>
  806594:	180b883a 	mov	r5,r3
  806598:	b00d883a 	mov	r6,r22
  80659c:	b80f883a 	mov	r7,r23
  8065a0:	1009883a 	mov	r4,r2
  8065a4:	080167c0 	call	80167c <__subdf3>
  8065a8:	a80b883a 	mov	r5,r21
  8065ac:	a009883a 	mov	r4,r20
  8065b0:	d8c01915 	stw	r3,100(sp)
  8065b4:	d8801815 	stw	r2,96(sp)
  8065b8:	080c0780 	call	80c078 <__fixdfsi>
  8065bc:	1009883a 	mov	r4,r2
  8065c0:	1027883a 	mov	r19,r2
  8065c4:	080bf800 	call	80bf80 <__floatsidf>
  8065c8:	a80b883a 	mov	r5,r21
  8065cc:	a009883a 	mov	r4,r20
  8065d0:	180f883a 	mov	r7,r3
  8065d4:	100d883a 	mov	r6,r2
  8065d8:	080167c0 	call	80167c <__subdf3>
  8065dc:	d9801817 	ldw	r6,96(sp)
  8065e0:	1823883a 	mov	r17,r3
  8065e4:	d8801415 	stw	r2,80(sp)
  8065e8:	302d883a 	mov	r22,r6
  8065ec:	d9800517 	ldw	r6,20(sp)
  8065f0:	9cc00c04 	addi	r19,r19,48
  8065f4:	dc401515 	stw	r17,84(sp)
  8065f8:	d8c01917 	ldw	r3,100(sp)
  8065fc:	34c00005 	stb	r19,0(r6)
  806600:	d8800517 	ldw	r2,20(sp)
  806604:	d9401917 	ldw	r5,100(sp)
  806608:	d9801417 	ldw	r6,80(sp)
  80660c:	b009883a 	mov	r4,r22
  806610:	880f883a 	mov	r7,r17
  806614:	182f883a 	mov	r23,r3
  806618:	17000044 	addi	fp,r2,1
  80661c:	080bde80 	call	80bde8 <__gtdf2>
  806620:	00804e16 	blt	zero,r2,80675c <_dtoa_r+0x1158>
  806624:	d9801417 	ldw	r6,80(sp)
  806628:	0005883a 	mov	r2,zero
  80662c:	00cffc34 	movhi	r3,16368
  806630:	180b883a 	mov	r5,r3
  806634:	880f883a 	mov	r7,r17
  806638:	1009883a 	mov	r4,r2
  80663c:	080167c0 	call	80167c <__subdf3>
  806640:	d9401917 	ldw	r5,100(sp)
  806644:	180f883a 	mov	r7,r3
  806648:	b009883a 	mov	r4,r22
  80664c:	100d883a 	mov	r6,r2
  806650:	080bde80 	call	80bde8 <__gtdf2>
  806654:	00bda216 	blt	zero,r2,805ce0 <_dtoa_r+0x6dc>
  806658:	d8c00317 	ldw	r3,12(sp)
  80665c:	00800044 	movi	r2,1
  806660:	10c01216 	blt	r2,r3,8066ac <_dtoa_r+0x10a8>
  806664:	003d4506 	br	805b7c <_dtoa_r+0x578>
  806668:	d9801417 	ldw	r6,80(sp)
  80666c:	0005883a 	mov	r2,zero
  806670:	00cffc34 	movhi	r3,16368
  806674:	180b883a 	mov	r5,r3
  806678:	880f883a 	mov	r7,r17
  80667c:	1009883a 	mov	r4,r2
  806680:	080167c0 	call	80167c <__subdf3>
  806684:	d9c01b17 	ldw	r7,108(sp)
  806688:	180b883a 	mov	r5,r3
  80668c:	1009883a 	mov	r4,r2
  806690:	b00d883a 	mov	r6,r22
  806694:	080bef80 	call	80bef8 <__ltdf2>
  806698:	103d9116 	blt	r2,zero,805ce0 <_dtoa_r+0x6dc>
  80669c:	d9800517 	ldw	r6,20(sp)
  8066a0:	d9000317 	ldw	r4,12(sp)
  8066a4:	3105883a 	add	r2,r6,r4
  8066a8:	e0bd3426 	beq	fp,r2,805b7c <_dtoa_r+0x578>
  8066ac:	04500934 	movhi	r17,16420
  8066b0:	0021883a 	mov	r16,zero
  8066b4:	b80b883a 	mov	r5,r23
  8066b8:	b009883a 	mov	r4,r22
  8066bc:	800d883a 	mov	r6,r16
  8066c0:	880f883a 	mov	r7,r17
  8066c4:	080b6bc0 	call	80b6bc <__muldf3>
  8066c8:	d9401517 	ldw	r5,84(sp)
  8066cc:	d9001417 	ldw	r4,80(sp)
  8066d0:	880f883a 	mov	r7,r17
  8066d4:	000d883a 	mov	r6,zero
  8066d8:	d8801a15 	stw	r2,104(sp)
  8066dc:	d8c01b15 	stw	r3,108(sp)
  8066e0:	080b6bc0 	call	80b6bc <__muldf3>
  8066e4:	180b883a 	mov	r5,r3
  8066e8:	1009883a 	mov	r4,r2
  8066ec:	1823883a 	mov	r17,r3
  8066f0:	1021883a 	mov	r16,r2
  8066f4:	080c0780 	call	80c078 <__fixdfsi>
  8066f8:	1009883a 	mov	r4,r2
  8066fc:	102b883a 	mov	r21,r2
  806700:	080bf800 	call	80bf80 <__floatsidf>
  806704:	880b883a 	mov	r5,r17
  806708:	8009883a 	mov	r4,r16
  80670c:	180f883a 	mov	r7,r3
  806710:	100d883a 	mov	r6,r2
  806714:	080167c0 	call	80167c <__subdf3>
  806718:	1021883a 	mov	r16,r2
  80671c:	d9001b17 	ldw	r4,108(sp)
  806720:	1823883a 	mov	r17,r3
  806724:	dc001415 	stw	r16,80(sp)
  806728:	ad400c04 	addi	r21,r21,48
  80672c:	dc401515 	stw	r17,84(sp)
  806730:	d8801a17 	ldw	r2,104(sp)
  806734:	e5400005 	stb	r21,0(fp)
  806738:	202f883a 	mov	r23,r4
  80673c:	d9c01b17 	ldw	r7,108(sp)
  806740:	d9001417 	ldw	r4,80(sp)
  806744:	880b883a 	mov	r5,r17
  806748:	100d883a 	mov	r6,r2
  80674c:	102d883a 	mov	r22,r2
  806750:	e7000044 	addi	fp,fp,1
  806754:	080bef80 	call	80bef8 <__ltdf2>
  806758:	103fc30e 	bge	r2,zero,806668 <_dtoa_r+0x1064>
  80675c:	d9000417 	ldw	r4,16(sp)
  806760:	d9000d15 	stw	r4,52(sp)
  806764:	003d7106 	br	805d2c <_dtoa_r+0x728>
  806768:	d9801717 	ldw	r6,92(sp)
  80676c:	00800084 	movi	r2,2
  806770:	11bde60e 	bge	r2,r6,805f0c <_dtoa_r+0x908>
  806774:	203cfb1e 	bne	r4,zero,805b64 <_dtoa_r+0x560>
  806778:	d9001617 	ldw	r4,88(sp)
  80677c:	900b883a 	mov	r5,r18
  806780:	01800144 	movi	r6,5
  806784:	000f883a 	mov	r7,zero
  806788:	0808b940 	call	808b94 <__multadd>
  80678c:	d9000717 	ldw	r4,28(sp)
  806790:	100b883a 	mov	r5,r2
  806794:	1025883a 	mov	r18,r2
  806798:	0807fd00 	call	807fd0 <__mcmp>
  80679c:	00bcf10e 	bge	zero,r2,805b64 <_dtoa_r+0x560>
  8067a0:	d8c00d17 	ldw	r3,52(sp)
  8067a4:	d9000517 	ldw	r4,20(sp)
  8067a8:	d8000615 	stw	zero,24(sp)
  8067ac:	18c00044 	addi	r3,r3,1
  8067b0:	d8c00d15 	stw	r3,52(sp)
  8067b4:	00800c44 	movi	r2,49
  8067b8:	27000044 	addi	fp,r4,1
  8067bc:	20800005 	stb	r2,0(r4)
  8067c0:	003e8906 	br	8061e8 <_dtoa_r+0xbe4>
  8067c4:	d8c00517 	ldw	r3,20(sp)
  8067c8:	003bc206 	br	8056d4 <_dtoa_r+0xd0>
  8067cc:	018020b4 	movhi	r6,130
  8067d0:	31a1dc04 	addi	r6,r6,-30864
  8067d4:	30c00917 	ldw	r3,36(r6)
  8067d8:	30800817 	ldw	r2,32(r6)
  8067dc:	d9001217 	ldw	r4,72(sp)
  8067e0:	d9401317 	ldw	r5,76(sp)
  8067e4:	180f883a 	mov	r7,r3
  8067e8:	100d883a 	mov	r6,r2
  8067ec:	080ba800 	call	80ba80 <__divdf3>
  8067f0:	948003cc 	andi	r18,r18,15
  8067f4:	058000c4 	movi	r22,3
  8067f8:	1029883a 	mov	r20,r2
  8067fc:	182b883a 	mov	r21,r3
  806800:	003c8906 	br	805a28 <_dtoa_r+0x424>
  806804:	d9001017 	ldw	r4,64(sp)
  806808:	d9800917 	ldw	r6,36(sp)
  80680c:	0025883a 	mov	r18,zero
  806810:	1105c83a 	sub	r2,r2,r4
  806814:	2089883a 	add	r4,r4,r2
  806818:	308d883a 	add	r6,r6,r2
  80681c:	d9001015 	stw	r4,64(sp)
  806820:	d9800915 	stw	r6,36(sp)
  806824:	003e3206 	br	8060f0 <_dtoa_r+0xaec>
  806828:	28800044 	addi	r2,r5,1
  80682c:	27000044 	addi	fp,r4,1
  806830:	20800005 	stb	r2,0(r4)
  806834:	003e6c06 	br	8061e8 <_dtoa_r+0xbe4>
  806838:	d8800f17 	ldw	r2,60(sp)
  80683c:	00bce016 	blt	zero,r2,805bc0 <_dtoa_r+0x5bc>
  806840:	d9800f17 	ldw	r6,60(sp)
  806844:	303cc51e 	bne	r6,zero,805b5c <_dtoa_r+0x558>
  806848:	0005883a 	mov	r2,zero
  80684c:	00d00534 	movhi	r3,16404
  806850:	980b883a 	mov	r5,r19
  806854:	180f883a 	mov	r7,r3
  806858:	9009883a 	mov	r4,r18
  80685c:	100d883a 	mov	r6,r2
  806860:	080b6bc0 	call	80b6bc <__muldf3>
  806864:	180b883a 	mov	r5,r3
  806868:	a80f883a 	mov	r7,r21
  80686c:	1009883a 	mov	r4,r2
  806870:	a00d883a 	mov	r6,r20
  806874:	080be700 	call	80be70 <__gedf2>
  806878:	103cb80e 	bge	r2,zero,805b5c <_dtoa_r+0x558>
  80687c:	0027883a 	mov	r19,zero
  806880:	0025883a 	mov	r18,zero
  806884:	003fc606 	br	8067a0 <_dtoa_r+0x119c>
  806888:	99400117 	ldw	r5,4(r19)
  80688c:	d9001617 	ldw	r4,88(sp)
  806890:	08083f40 	call	8083f4 <_Balloc>
  806894:	99800417 	ldw	r6,16(r19)
  806898:	11000304 	addi	r4,r2,12
  80689c:	99400304 	addi	r5,r19,12
  8068a0:	318d883a 	add	r6,r6,r6
  8068a4:	318d883a 	add	r6,r6,r6
  8068a8:	31800204 	addi	r6,r6,8
  8068ac:	1023883a 	mov	r17,r2
  8068b0:	08026dc0 	call	8026dc <memcpy>
  8068b4:	d9001617 	ldw	r4,88(sp)
  8068b8:	880b883a 	mov	r5,r17
  8068bc:	01800044 	movi	r6,1
  8068c0:	08087b80 	call	8087b8 <__lshift>
  8068c4:	100b883a 	mov	r5,r2
  8068c8:	003d9c06 	br	805f3c <_dtoa_r+0x938>
  8068cc:	00800e44 	movi	r2,57
  8068d0:	b8807026 	beq	r23,r2,806a94 <_dtoa_r+0x1490>
  8068d4:	b8800044 	addi	r2,r23,1
  8068d8:	b7000044 	addi	fp,r22,1
  8068dc:	b0800005 	stb	r2,0(r22)
  8068e0:	003e4106 	br	8061e8 <_dtoa_r+0xbe4>
  8068e4:	d8800317 	ldw	r2,12(sp)
  8068e8:	018020b4 	movhi	r6,130
  8068ec:	31a1aa04 	addi	r6,r6,-31064
  8068f0:	b009883a 	mov	r4,r22
  8068f4:	100e90fa 	slli	r7,r2,3
  8068f8:	b80b883a 	mov	r5,r23
  8068fc:	398f883a 	add	r7,r7,r6
  806900:	38bffe17 	ldw	r2,-8(r7)
  806904:	d9800517 	ldw	r6,20(sp)
  806908:	38ffff17 	ldw	r3,-4(r7)
  80690c:	37000044 	addi	fp,r6,1
  806910:	180f883a 	mov	r7,r3
  806914:	100d883a 	mov	r6,r2
  806918:	080b6bc0 	call	80b6bc <__muldf3>
  80691c:	a80b883a 	mov	r5,r21
  806920:	a009883a 	mov	r4,r20
  806924:	182f883a 	mov	r23,r3
  806928:	102d883a 	mov	r22,r2
  80692c:	080c0780 	call	80c078 <__fixdfsi>
  806930:	1009883a 	mov	r4,r2
  806934:	1027883a 	mov	r19,r2
  806938:	080bf800 	call	80bf80 <__floatsidf>
  80693c:	a80b883a 	mov	r5,r21
  806940:	a009883a 	mov	r4,r20
  806944:	180f883a 	mov	r7,r3
  806948:	100d883a 	mov	r6,r2
  80694c:	080167c0 	call	80167c <__subdf3>
  806950:	180b883a 	mov	r5,r3
  806954:	d8c00517 	ldw	r3,20(sp)
  806958:	9cc00c04 	addi	r19,r19,48
  80695c:	1009883a 	mov	r4,r2
  806960:	1cc00005 	stb	r19,0(r3)
  806964:	2021883a 	mov	r16,r4
  806968:	d9000317 	ldw	r4,12(sp)
  80696c:	00800044 	movi	r2,1
  806970:	2823883a 	mov	r17,r5
  806974:	20802226 	beq	r4,r2,806a00 <_dtoa_r+0x13fc>
  806978:	1029883a 	mov	r20,r2
  80697c:	0005883a 	mov	r2,zero
  806980:	00d00934 	movhi	r3,16420
  806984:	180f883a 	mov	r7,r3
  806988:	100d883a 	mov	r6,r2
  80698c:	880b883a 	mov	r5,r17
  806990:	8009883a 	mov	r4,r16
  806994:	080b6bc0 	call	80b6bc <__muldf3>
  806998:	180b883a 	mov	r5,r3
  80699c:	1009883a 	mov	r4,r2
  8069a0:	1823883a 	mov	r17,r3
  8069a4:	1021883a 	mov	r16,r2
  8069a8:	080c0780 	call	80c078 <__fixdfsi>
  8069ac:	1009883a 	mov	r4,r2
  8069b0:	102b883a 	mov	r21,r2
  8069b4:	080bf800 	call	80bf80 <__floatsidf>
  8069b8:	880b883a 	mov	r5,r17
  8069bc:	8009883a 	mov	r4,r16
  8069c0:	180f883a 	mov	r7,r3
  8069c4:	100d883a 	mov	r6,r2
  8069c8:	080167c0 	call	80167c <__subdf3>
  8069cc:	180b883a 	mov	r5,r3
  8069d0:	d8c00517 	ldw	r3,20(sp)
  8069d4:	1009883a 	mov	r4,r2
  8069d8:	ad400c04 	addi	r21,r21,48
  8069dc:	1d05883a 	add	r2,r3,r20
  8069e0:	15400005 	stb	r21,0(r2)
  8069e4:	2021883a 	mov	r16,r4
  8069e8:	d9000317 	ldw	r4,12(sp)
  8069ec:	a5000044 	addi	r20,r20,1
  8069f0:	2823883a 	mov	r17,r5
  8069f4:	a13fe11e 	bne	r20,r4,80697c <_dtoa_r+0x1378>
  8069f8:	e505883a 	add	r2,fp,r20
  8069fc:	173fffc4 	addi	fp,r2,-1
  806a00:	0025883a 	mov	r18,zero
  806a04:	04cff834 	movhi	r19,16352
  806a08:	b009883a 	mov	r4,r22
  806a0c:	b80b883a 	mov	r5,r23
  806a10:	900d883a 	mov	r6,r18
  806a14:	980f883a 	mov	r7,r19
  806a18:	08016fc0 	call	8016fc <__adddf3>
  806a1c:	180b883a 	mov	r5,r3
  806a20:	1009883a 	mov	r4,r2
  806a24:	800d883a 	mov	r6,r16
  806a28:	880f883a 	mov	r7,r17
  806a2c:	080bef80 	call	80bef8 <__ltdf2>
  806a30:	103cab16 	blt	r2,zero,805ce0 <_dtoa_r+0x6dc>
  806a34:	0009883a 	mov	r4,zero
  806a38:	980b883a 	mov	r5,r19
  806a3c:	b80f883a 	mov	r7,r23
  806a40:	b00d883a 	mov	r6,r22
  806a44:	080167c0 	call	80167c <__subdf3>
  806a48:	180b883a 	mov	r5,r3
  806a4c:	880f883a 	mov	r7,r17
  806a50:	1009883a 	mov	r4,r2
  806a54:	800d883a 	mov	r6,r16
  806a58:	080bde80 	call	80bde8 <__gtdf2>
  806a5c:	00bc470e 	bge	zero,r2,805b7c <_dtoa_r+0x578>
  806a60:	00c00c04 	movi	r3,48
  806a64:	e73fffc4 	addi	fp,fp,-1
  806a68:	e0800007 	ldb	r2,0(fp)
  806a6c:	10fffd26 	beq	r2,r3,806a64 <_dtoa_r+0x1460>
  806a70:	d9800417 	ldw	r6,16(sp)
  806a74:	e7000044 	addi	fp,fp,1
  806a78:	d9800d15 	stw	r6,52(sp)
  806a7c:	003cab06 	br	805d2c <_dtoa_r+0x728>
  806a80:	d8c00f17 	ldw	r3,60(sp)
  806a84:	d9001117 	ldw	r4,68(sp)
  806a88:	20e1c83a 	sub	r16,r4,r3
  806a8c:	0007883a 	mov	r3,zero
  806a90:	003d9b06 	br	806100 <_dtoa_r+0xafc>
  806a94:	00800e44 	movi	r2,57
  806a98:	b0800005 	stb	r2,0(r22)
  806a9c:	b5800044 	addi	r22,r22,1
  806aa0:	003dc106 	br	8061a8 <_dtoa_r+0xba4>
  806aa4:	05800084 	movi	r22,2
  806aa8:	003bf706 	br	805a88 <_dtoa_r+0x484>
  806aac:	d9000f17 	ldw	r4,60(sp)
  806ab0:	013c000e 	bge	zero,r4,805ab4 <_dtoa_r+0x4b0>
  806ab4:	d9800e17 	ldw	r6,56(sp)
  806ab8:	01bc300e 	bge	zero,r6,805b7c <_dtoa_r+0x578>
  806abc:	0005883a 	mov	r2,zero
  806ac0:	00d00934 	movhi	r3,16420
  806ac4:	a80b883a 	mov	r5,r21
  806ac8:	180f883a 	mov	r7,r3
  806acc:	a009883a 	mov	r4,r20
  806ad0:	100d883a 	mov	r6,r2
  806ad4:	080b6bc0 	call	80b6bc <__muldf3>
  806ad8:	b1000044 	addi	r4,r22,1
  806adc:	1021883a 	mov	r16,r2
  806ae0:	1823883a 	mov	r17,r3
  806ae4:	080bf800 	call	80bf80 <__floatsidf>
  806ae8:	880b883a 	mov	r5,r17
  806aec:	8009883a 	mov	r4,r16
  806af0:	180f883a 	mov	r7,r3
  806af4:	100d883a 	mov	r6,r2
  806af8:	080b6bc0 	call	80b6bc <__muldf3>
  806afc:	0011883a 	mov	r8,zero
  806b00:	02500734 	movhi	r9,16412
  806b04:	180b883a 	mov	r5,r3
  806b08:	480f883a 	mov	r7,r9
  806b0c:	1009883a 	mov	r4,r2
  806b10:	400d883a 	mov	r6,r8
  806b14:	08016fc0 	call	8016fc <__adddf3>
  806b18:	102d883a 	mov	r22,r2
  806b1c:	00bf3034 	movhi	r2,64704
  806b20:	10ef883a 	add	r23,r2,r3
  806b24:	d8800d17 	ldw	r2,52(sp)
  806b28:	d8c00e17 	ldw	r3,56(sp)
  806b2c:	8029883a 	mov	r20,r16
  806b30:	10bfffc4 	addi	r2,r2,-1
  806b34:	882b883a 	mov	r21,r17
  806b38:	d8800415 	stw	r2,16(sp)
  806b3c:	d8c00315 	stw	r3,12(sp)
  806b40:	003e8306 	br	806550 <_dtoa_r+0xf4c>
  806b44:	d8800117 	ldw	r2,4(sp)
  806b48:	dc001117 	ldw	r16,68(sp)
  806b4c:	dc801017 	ldw	r18,64(sp)
  806b50:	00c00d84 	movi	r3,54
  806b54:	1887c83a 	sub	r3,r3,r2
  806b58:	003d6906 	br	806100 <_dtoa_r+0xafc>
  806b5c:	01800044 	movi	r6,1
  806b60:	3021883a 	mov	r16,r6
  806b64:	d9800f15 	stw	r6,60(sp)
  806b68:	d9802615 	stw	r6,152(sp)
  806b6c:	d9800e15 	stw	r6,56(sp)
  806b70:	003b9306 	br	8059c0 <_dtoa_r+0x3bc>
  806b74:	b021883a 	mov	r16,r22
  806b78:	dd800f15 	stw	r22,60(sp)
  806b7c:	003b9006 	br	8059c0 <_dtoa_r+0x3bc>
  806b80:	103e221e 	bne	r2,zero,80640c <_dtoa_r+0xe08>
  806b84:	b880004c 	andi	r2,r23,1
  806b88:	1005003a 	cmpeq	r2,r2,zero
  806b8c:	103e1f1e 	bne	r2,zero,80640c <_dtoa_r+0xe08>
  806b90:	003e1b06 	br	806400 <_dtoa_r+0xdfc>
  806b94:	d9001617 	ldw	r4,88(sp)
  806b98:	980b883a 	mov	r5,r19
  806b9c:	01800284 	movi	r6,10
  806ba0:	000f883a 	mov	r7,zero
  806ba4:	0808b940 	call	808b94 <__multadd>
  806ba8:	d8c00e17 	ldw	r3,56(sp)
  806bac:	1027883a 	mov	r19,r2
  806bb0:	d8c00f15 	stw	r3,60(sp)
  806bb4:	003cd306 	br	805f04 <_dtoa_r+0x900>

00806bb8 <_fflush_r>:
  806bb8:	defffb04 	addi	sp,sp,-20
  806bbc:	dcc00315 	stw	r19,12(sp)
  806bc0:	dc800215 	stw	r18,8(sp)
  806bc4:	dfc00415 	stw	ra,16(sp)
  806bc8:	dc400115 	stw	r17,4(sp)
  806bcc:	dc000015 	stw	r16,0(sp)
  806bd0:	2027883a 	mov	r19,r4
  806bd4:	2825883a 	mov	r18,r5
  806bd8:	20000226 	beq	r4,zero,806be4 <_fflush_r+0x2c>
  806bdc:	20800e17 	ldw	r2,56(r4)
  806be0:	10005626 	beq	r2,zero,806d3c <_fflush_r+0x184>
  806be4:	9100030b 	ldhu	r4,12(r18)
  806be8:	20ffffcc 	andi	r3,r4,65535
  806bec:	18e0001c 	xori	r3,r3,32768
  806bf0:	18e00004 	addi	r3,r3,-32768
  806bf4:	1880020c 	andi	r2,r3,8
  806bf8:	1000261e 	bne	r2,zero,806c94 <_fflush_r+0xdc>
  806bfc:	90c00117 	ldw	r3,4(r18)
  806c00:	20820014 	ori	r2,r4,2048
  806c04:	9080030d 	sth	r2,12(r18)
  806c08:	1009883a 	mov	r4,r2
  806c0c:	00c0400e 	bge	zero,r3,806d10 <_fflush_r+0x158>
  806c10:	92000a17 	ldw	r8,40(r18)
  806c14:	40004026 	beq	r8,zero,806d18 <_fflush_r+0x160>
  806c18:	2084000c 	andi	r2,r4,4096
  806c1c:	10005326 	beq	r2,zero,806d6c <_fflush_r+0x1b4>
  806c20:	94001417 	ldw	r16,80(r18)
  806c24:	9080030b 	ldhu	r2,12(r18)
  806c28:	1080010c 	andi	r2,r2,4
  806c2c:	1000481e 	bne	r2,zero,806d50 <_fflush_r+0x198>
  806c30:	91400717 	ldw	r5,28(r18)
  806c34:	9809883a 	mov	r4,r19
  806c38:	800d883a 	mov	r6,r16
  806c3c:	000f883a 	mov	r7,zero
  806c40:	403ee83a 	callr	r8
  806c44:	8080261e 	bne	r16,r2,806ce0 <_fflush_r+0x128>
  806c48:	9080030b 	ldhu	r2,12(r18)
  806c4c:	91000417 	ldw	r4,16(r18)
  806c50:	90000115 	stw	zero,4(r18)
  806c54:	10bdffcc 	andi	r2,r2,63487
  806c58:	10ffffcc 	andi	r3,r2,65535
  806c5c:	18c4000c 	andi	r3,r3,4096
  806c60:	9080030d 	sth	r2,12(r18)
  806c64:	91000015 	stw	r4,0(r18)
  806c68:	18002b26 	beq	r3,zero,806d18 <_fflush_r+0x160>
  806c6c:	0007883a 	mov	r3,zero
  806c70:	1805883a 	mov	r2,r3
  806c74:	94001415 	stw	r16,80(r18)
  806c78:	dfc00417 	ldw	ra,16(sp)
  806c7c:	dcc00317 	ldw	r19,12(sp)
  806c80:	dc800217 	ldw	r18,8(sp)
  806c84:	dc400117 	ldw	r17,4(sp)
  806c88:	dc000017 	ldw	r16,0(sp)
  806c8c:	dec00504 	addi	sp,sp,20
  806c90:	f800283a 	ret
  806c94:	94400417 	ldw	r17,16(r18)
  806c98:	88001f26 	beq	r17,zero,806d18 <_fflush_r+0x160>
  806c9c:	90800017 	ldw	r2,0(r18)
  806ca0:	18c000cc 	andi	r3,r3,3
  806ca4:	94400015 	stw	r17,0(r18)
  806ca8:	1461c83a 	sub	r16,r2,r17
  806cac:	18002526 	beq	r3,zero,806d44 <_fflush_r+0x18c>
  806cb0:	0005883a 	mov	r2,zero
  806cb4:	90800215 	stw	r2,8(r18)
  806cb8:	0400170e 	bge	zero,r16,806d18 <_fflush_r+0x160>
  806cbc:	90c00917 	ldw	r3,36(r18)
  806cc0:	91400717 	ldw	r5,28(r18)
  806cc4:	880d883a 	mov	r6,r17
  806cc8:	800f883a 	mov	r7,r16
  806ccc:	9809883a 	mov	r4,r19
  806cd0:	183ee83a 	callr	r3
  806cd4:	88a3883a 	add	r17,r17,r2
  806cd8:	80a1c83a 	sub	r16,r16,r2
  806cdc:	00bff616 	blt	zero,r2,806cb8 <_fflush_r+0x100>
  806ce0:	9080030b 	ldhu	r2,12(r18)
  806ce4:	00ffffc4 	movi	r3,-1
  806ce8:	10801014 	ori	r2,r2,64
  806cec:	9080030d 	sth	r2,12(r18)
  806cf0:	1805883a 	mov	r2,r3
  806cf4:	dfc00417 	ldw	ra,16(sp)
  806cf8:	dcc00317 	ldw	r19,12(sp)
  806cfc:	dc800217 	ldw	r18,8(sp)
  806d00:	dc400117 	ldw	r17,4(sp)
  806d04:	dc000017 	ldw	r16,0(sp)
  806d08:	dec00504 	addi	sp,sp,20
  806d0c:	f800283a 	ret
  806d10:	90800f17 	ldw	r2,60(r18)
  806d14:	00bfbe16 	blt	zero,r2,806c10 <_fflush_r+0x58>
  806d18:	0007883a 	mov	r3,zero
  806d1c:	1805883a 	mov	r2,r3
  806d20:	dfc00417 	ldw	ra,16(sp)
  806d24:	dcc00317 	ldw	r19,12(sp)
  806d28:	dc800217 	ldw	r18,8(sp)
  806d2c:	dc400117 	ldw	r17,4(sp)
  806d30:	dc000017 	ldw	r16,0(sp)
  806d34:	dec00504 	addi	sp,sp,20
  806d38:	f800283a 	ret
  806d3c:	0806e500 	call	806e50 <__sinit>
  806d40:	003fa806 	br	806be4 <_fflush_r+0x2c>
  806d44:	90800517 	ldw	r2,20(r18)
  806d48:	90800215 	stw	r2,8(r18)
  806d4c:	003fda06 	br	806cb8 <_fflush_r+0x100>
  806d50:	90800117 	ldw	r2,4(r18)
  806d54:	90c00c17 	ldw	r3,48(r18)
  806d58:	80a1c83a 	sub	r16,r16,r2
  806d5c:	183fb426 	beq	r3,zero,806c30 <_fflush_r+0x78>
  806d60:	90800f17 	ldw	r2,60(r18)
  806d64:	80a1c83a 	sub	r16,r16,r2
  806d68:	003fb106 	br	806c30 <_fflush_r+0x78>
  806d6c:	91400717 	ldw	r5,28(r18)
  806d70:	9809883a 	mov	r4,r19
  806d74:	000d883a 	mov	r6,zero
  806d78:	01c00044 	movi	r7,1
  806d7c:	403ee83a 	callr	r8
  806d80:	1021883a 	mov	r16,r2
  806d84:	00bfffc4 	movi	r2,-1
  806d88:	80800226 	beq	r16,r2,806d94 <_fflush_r+0x1dc>
  806d8c:	92000a17 	ldw	r8,40(r18)
  806d90:	003fa406 	br	806c24 <_fflush_r+0x6c>
  806d94:	98c00017 	ldw	r3,0(r19)
  806d98:	00800744 	movi	r2,29
  806d9c:	18bfde26 	beq	r3,r2,806d18 <_fflush_r+0x160>
  806da0:	9080030b 	ldhu	r2,12(r18)
  806da4:	8007883a 	mov	r3,r16
  806da8:	10801014 	ori	r2,r2,64
  806dac:	9080030d 	sth	r2,12(r18)
  806db0:	003fcf06 	br	806cf0 <_fflush_r+0x138>

00806db4 <fflush>:
  806db4:	01402034 	movhi	r5,128
  806db8:	295aee04 	addi	r5,r5,27576
  806dbc:	2007883a 	mov	r3,r4
  806dc0:	20000526 	beq	r4,zero,806dd8 <fflush+0x24>
  806dc4:	008020b4 	movhi	r2,130
  806dc8:	10a93c04 	addi	r2,r2,-23312
  806dcc:	11000017 	ldw	r4,0(r2)
  806dd0:	180b883a 	mov	r5,r3
  806dd4:	0806bb81 	jmpi	806bb8 <_fflush_r>
  806dd8:	008020b4 	movhi	r2,130
  806ddc:	10a93d04 	addi	r2,r2,-23308
  806de0:	11000017 	ldw	r4,0(r2)
  806de4:	08079b81 	jmpi	8079b8 <_fwalk_reent>

00806de8 <std>:
  806de8:	00802074 	movhi	r2,129
  806dec:	10a4b004 	addi	r2,r2,-27968
  806df0:	20800b15 	stw	r2,44(r4)
  806df4:	00802074 	movhi	r2,129
  806df8:	10a4eb04 	addi	r2,r2,-27732
  806dfc:	20800815 	stw	r2,32(r4)
  806e00:	00c02074 	movhi	r3,129
  806e04:	18e4cc04 	addi	r3,r3,-27856
  806e08:	00802074 	movhi	r2,129
  806e0c:	10a4b204 	addi	r2,r2,-27960
  806e10:	2140030d 	sth	r5,12(r4)
  806e14:	2180038d 	sth	r6,14(r4)
  806e18:	20c00915 	stw	r3,36(r4)
  806e1c:	20800a15 	stw	r2,40(r4)
  806e20:	20000015 	stw	zero,0(r4)
  806e24:	20000115 	stw	zero,4(r4)
  806e28:	20000215 	stw	zero,8(r4)
  806e2c:	20000415 	stw	zero,16(r4)
  806e30:	20000515 	stw	zero,20(r4)
  806e34:	20000615 	stw	zero,24(r4)
  806e38:	21000715 	stw	r4,28(r4)
  806e3c:	f800283a 	ret

00806e40 <__sfp_lock_acquire>:
  806e40:	f800283a 	ret

00806e44 <__sfp_lock_release>:
  806e44:	f800283a 	ret

00806e48 <__sinit_lock_acquire>:
  806e48:	f800283a 	ret

00806e4c <__sinit_lock_release>:
  806e4c:	f800283a 	ret

00806e50 <__sinit>:
  806e50:	20800e17 	ldw	r2,56(r4)
  806e54:	defffd04 	addi	sp,sp,-12
  806e58:	dc400115 	stw	r17,4(sp)
  806e5c:	dc000015 	stw	r16,0(sp)
  806e60:	dfc00215 	stw	ra,8(sp)
  806e64:	04400044 	movi	r17,1
  806e68:	01400104 	movi	r5,4
  806e6c:	000d883a 	mov	r6,zero
  806e70:	2021883a 	mov	r16,r4
  806e74:	2200bb04 	addi	r8,r4,748
  806e78:	200f883a 	mov	r7,r4
  806e7c:	10000526 	beq	r2,zero,806e94 <__sinit+0x44>
  806e80:	dfc00217 	ldw	ra,8(sp)
  806e84:	dc400117 	ldw	r17,4(sp)
  806e88:	dc000017 	ldw	r16,0(sp)
  806e8c:	dec00304 	addi	sp,sp,12
  806e90:	f800283a 	ret
  806e94:	21000117 	ldw	r4,4(r4)
  806e98:	00802034 	movhi	r2,128
  806e9c:	109bcd04 	addi	r2,r2,28468
  806ea0:	00c000c4 	movi	r3,3
  806ea4:	80800f15 	stw	r2,60(r16)
  806ea8:	80c0b915 	stw	r3,740(r16)
  806eac:	8200ba15 	stw	r8,744(r16)
  806eb0:	84400e15 	stw	r17,56(r16)
  806eb4:	8000b815 	stw	zero,736(r16)
  806eb8:	0806de80 	call	806de8 <std>
  806ebc:	81000217 	ldw	r4,8(r16)
  806ec0:	880d883a 	mov	r6,r17
  806ec4:	800f883a 	mov	r7,r16
  806ec8:	01400284 	movi	r5,10
  806ecc:	0806de80 	call	806de8 <std>
  806ed0:	81000317 	ldw	r4,12(r16)
  806ed4:	800f883a 	mov	r7,r16
  806ed8:	01400484 	movi	r5,18
  806edc:	01800084 	movi	r6,2
  806ee0:	dfc00217 	ldw	ra,8(sp)
  806ee4:	dc400117 	ldw	r17,4(sp)
  806ee8:	dc000017 	ldw	r16,0(sp)
  806eec:	dec00304 	addi	sp,sp,12
  806ef0:	0806de81 	jmpi	806de8 <std>

00806ef4 <__fp_lock>:
  806ef4:	0005883a 	mov	r2,zero
  806ef8:	f800283a 	ret

00806efc <__fp_unlock>:
  806efc:	0005883a 	mov	r2,zero
  806f00:	f800283a 	ret

00806f04 <__fp_unlock_all>:
  806f04:	008020b4 	movhi	r2,130
  806f08:	10a93c04 	addi	r2,r2,-23312
  806f0c:	11000017 	ldw	r4,0(r2)
  806f10:	01402034 	movhi	r5,128
  806f14:	295bbf04 	addi	r5,r5,28412
  806f18:	0807a801 	jmpi	807a80 <_fwalk>

00806f1c <__fp_lock_all>:
  806f1c:	008020b4 	movhi	r2,130
  806f20:	10a93c04 	addi	r2,r2,-23312
  806f24:	11000017 	ldw	r4,0(r2)
  806f28:	01402034 	movhi	r5,128
  806f2c:	295bbd04 	addi	r5,r5,28404
  806f30:	0807a801 	jmpi	807a80 <_fwalk>

00806f34 <_cleanup_r>:
  806f34:	01402074 	movhi	r5,129
  806f38:	296a0204 	addi	r5,r5,-22520
  806f3c:	0807a801 	jmpi	807a80 <_fwalk>

00806f40 <_cleanup>:
  806f40:	008020b4 	movhi	r2,130
  806f44:	10a93d04 	addi	r2,r2,-23308
  806f48:	11000017 	ldw	r4,0(r2)
  806f4c:	0806f341 	jmpi	806f34 <_cleanup_r>

00806f50 <__sfmoreglue>:
  806f50:	defffc04 	addi	sp,sp,-16
  806f54:	dc000015 	stw	r16,0(sp)
  806f58:	2821883a 	mov	r16,r5
  806f5c:	dc400115 	stw	r17,4(sp)
  806f60:	01401704 	movi	r5,92
  806f64:	2023883a 	mov	r17,r4
  806f68:	8009883a 	mov	r4,r16
  806f6c:	dfc00315 	stw	ra,12(sp)
  806f70:	dcc00215 	stw	r19,8(sp)
  806f74:	08019440 	call	801944 <__mulsi3>
  806f78:	11400304 	addi	r5,r2,12
  806f7c:	8809883a 	mov	r4,r17
  806f80:	1027883a 	mov	r19,r2
  806f84:	0801f9c0 	call	801f9c <_malloc_r>
  806f88:	10c00304 	addi	r3,r2,12
  806f8c:	1023883a 	mov	r17,r2
  806f90:	1809883a 	mov	r4,r3
  806f94:	980d883a 	mov	r6,r19
  806f98:	000b883a 	mov	r5,zero
  806f9c:	10000b26 	beq	r2,zero,806fcc <__sfmoreglue+0x7c>
  806fa0:	14000115 	stw	r16,4(r2)
  806fa4:	10c00215 	stw	r3,8(r2)
  806fa8:	10000015 	stw	zero,0(r2)
  806fac:	080285c0 	call	80285c <memset>
  806fb0:	8805883a 	mov	r2,r17
  806fb4:	dfc00317 	ldw	ra,12(sp)
  806fb8:	dcc00217 	ldw	r19,8(sp)
  806fbc:	dc400117 	ldw	r17,4(sp)
  806fc0:	dc000017 	ldw	r16,0(sp)
  806fc4:	dec00404 	addi	sp,sp,16
  806fc8:	f800283a 	ret
  806fcc:	0023883a 	mov	r17,zero
  806fd0:	8805883a 	mov	r2,r17
  806fd4:	dfc00317 	ldw	ra,12(sp)
  806fd8:	dcc00217 	ldw	r19,8(sp)
  806fdc:	dc400117 	ldw	r17,4(sp)
  806fe0:	dc000017 	ldw	r16,0(sp)
  806fe4:	dec00404 	addi	sp,sp,16
  806fe8:	f800283a 	ret

00806fec <__sfp>:
  806fec:	defffd04 	addi	sp,sp,-12
  806ff0:	008020b4 	movhi	r2,130
  806ff4:	10a93d04 	addi	r2,r2,-23308
  806ff8:	dc000015 	stw	r16,0(sp)
  806ffc:	14000017 	ldw	r16,0(r2)
  807000:	dc400115 	stw	r17,4(sp)
  807004:	dfc00215 	stw	ra,8(sp)
  807008:	80800e17 	ldw	r2,56(r16)
  80700c:	2023883a 	mov	r17,r4
  807010:	10002626 	beq	r2,zero,8070ac <__sfp+0xc0>
  807014:	8400b804 	addi	r16,r16,736
  807018:	80800117 	ldw	r2,4(r16)
  80701c:	81000217 	ldw	r4,8(r16)
  807020:	10ffffc4 	addi	r3,r2,-1
  807024:	18000916 	blt	r3,zero,80704c <__sfp+0x60>
  807028:	2080030f 	ldh	r2,12(r4)
  80702c:	10000b26 	beq	r2,zero,80705c <__sfp+0x70>
  807030:	017fffc4 	movi	r5,-1
  807034:	00000206 	br	807040 <__sfp+0x54>
  807038:	2080030f 	ldh	r2,12(r4)
  80703c:	10000726 	beq	r2,zero,80705c <__sfp+0x70>
  807040:	18ffffc4 	addi	r3,r3,-1
  807044:	21001704 	addi	r4,r4,92
  807048:	197ffb1e 	bne	r3,r5,807038 <__sfp+0x4c>
  80704c:	80800017 	ldw	r2,0(r16)
  807050:	10001926 	beq	r2,zero,8070b8 <__sfp+0xcc>
  807054:	1021883a 	mov	r16,r2
  807058:	003fef06 	br	807018 <__sfp+0x2c>
  80705c:	00bfffc4 	movi	r2,-1
  807060:	00c00044 	movi	r3,1
  807064:	2080038d 	sth	r2,14(r4)
  807068:	20c0030d 	sth	r3,12(r4)
  80706c:	20000015 	stw	zero,0(r4)
  807070:	20000215 	stw	zero,8(r4)
  807074:	20000115 	stw	zero,4(r4)
  807078:	20000415 	stw	zero,16(r4)
  80707c:	20000515 	stw	zero,20(r4)
  807080:	20000615 	stw	zero,24(r4)
  807084:	20000c15 	stw	zero,48(r4)
  807088:	20000d15 	stw	zero,52(r4)
  80708c:	20001115 	stw	zero,68(r4)
  807090:	20001215 	stw	zero,72(r4)
  807094:	2005883a 	mov	r2,r4
  807098:	dfc00217 	ldw	ra,8(sp)
  80709c:	dc400117 	ldw	r17,4(sp)
  8070a0:	dc000017 	ldw	r16,0(sp)
  8070a4:	dec00304 	addi	sp,sp,12
  8070a8:	f800283a 	ret
  8070ac:	8009883a 	mov	r4,r16
  8070b0:	0806e500 	call	806e50 <__sinit>
  8070b4:	003fd706 	br	807014 <__sfp+0x28>
  8070b8:	8809883a 	mov	r4,r17
  8070bc:	01400104 	movi	r5,4
  8070c0:	0806f500 	call	806f50 <__sfmoreglue>
  8070c4:	80800015 	stw	r2,0(r16)
  8070c8:	103fe21e 	bne	r2,zero,807054 <__sfp+0x68>
  8070cc:	00800304 	movi	r2,12
  8070d0:	0009883a 	mov	r4,zero
  8070d4:	88800015 	stw	r2,0(r17)
  8070d8:	003fee06 	br	807094 <__sfp+0xa8>

008070dc <_malloc_trim_r>:
  8070dc:	defffb04 	addi	sp,sp,-20
  8070e0:	dcc00315 	stw	r19,12(sp)
  8070e4:	04c020b4 	movhi	r19,130
  8070e8:	9ce39c04 	addi	r19,r19,-29072
  8070ec:	dc800215 	stw	r18,8(sp)
  8070f0:	dc400115 	stw	r17,4(sp)
  8070f4:	dc000015 	stw	r16,0(sp)
  8070f8:	2823883a 	mov	r17,r5
  8070fc:	2025883a 	mov	r18,r4
  807100:	dfc00415 	stw	ra,16(sp)
  807104:	080d1fc0 	call	80d1fc <__malloc_lock>
  807108:	98800217 	ldw	r2,8(r19)
  80710c:	9009883a 	mov	r4,r18
  807110:	000b883a 	mov	r5,zero
  807114:	10c00117 	ldw	r3,4(r2)
  807118:	00bfff04 	movi	r2,-4
  80711c:	18a0703a 	and	r16,r3,r2
  807120:	8463c83a 	sub	r17,r16,r17
  807124:	8c43fbc4 	addi	r17,r17,4079
  807128:	8822d33a 	srli	r17,r17,12
  80712c:	0083ffc4 	movi	r2,4095
  807130:	8c7fffc4 	addi	r17,r17,-1
  807134:	8822933a 	slli	r17,r17,12
  807138:	1440060e 	bge	r2,r17,807154 <_malloc_trim_r+0x78>
  80713c:	0802f040 	call	802f04 <_sbrk_r>
  807140:	98c00217 	ldw	r3,8(r19)
  807144:	9009883a 	mov	r4,r18
  807148:	044bc83a 	sub	r5,zero,r17
  80714c:	80c7883a 	add	r3,r16,r3
  807150:	10c00926 	beq	r2,r3,807178 <_malloc_trim_r+0x9c>
  807154:	080d3040 	call	80d304 <__malloc_unlock>
  807158:	0005883a 	mov	r2,zero
  80715c:	dfc00417 	ldw	ra,16(sp)
  807160:	dcc00317 	ldw	r19,12(sp)
  807164:	dc800217 	ldw	r18,8(sp)
  807168:	dc400117 	ldw	r17,4(sp)
  80716c:	dc000017 	ldw	r16,0(sp)
  807170:	dec00504 	addi	sp,sp,20
  807174:	f800283a 	ret
  807178:	9009883a 	mov	r4,r18
  80717c:	0802f040 	call	802f04 <_sbrk_r>
  807180:	844dc83a 	sub	r6,r16,r17
  807184:	00ffffc4 	movi	r3,-1
  807188:	9009883a 	mov	r4,r18
  80718c:	000b883a 	mov	r5,zero
  807190:	01c020b4 	movhi	r7,130
  807194:	39e99204 	addi	r7,r7,-22968
  807198:	31800054 	ori	r6,r6,1
  80719c:	10c00926 	beq	r2,r3,8071c4 <_malloc_trim_r+0xe8>
  8071a0:	38800017 	ldw	r2,0(r7)
  8071a4:	98c00217 	ldw	r3,8(r19)
  8071a8:	9009883a 	mov	r4,r18
  8071ac:	1445c83a 	sub	r2,r2,r17
  8071b0:	38800015 	stw	r2,0(r7)
  8071b4:	19800115 	stw	r6,4(r3)
  8071b8:	080d3040 	call	80d304 <__malloc_unlock>
  8071bc:	00800044 	movi	r2,1
  8071c0:	003fe606 	br	80715c <_malloc_trim_r+0x80>
  8071c4:	0802f040 	call	802f04 <_sbrk_r>
  8071c8:	99800217 	ldw	r6,8(r19)
  8071cc:	100f883a 	mov	r7,r2
  8071d0:	9009883a 	mov	r4,r18
  8071d4:	1187c83a 	sub	r3,r2,r6
  8071d8:	008003c4 	movi	r2,15
  8071dc:	19400054 	ori	r5,r3,1
  8071e0:	10ffdc0e 	bge	r2,r3,807154 <_malloc_trim_r+0x78>
  8071e4:	008020b4 	movhi	r2,130
  8071e8:	10a93f04 	addi	r2,r2,-23300
  8071ec:	10c00017 	ldw	r3,0(r2)
  8071f0:	008020b4 	movhi	r2,130
  8071f4:	10a99204 	addi	r2,r2,-22968
  8071f8:	31400115 	stw	r5,4(r6)
  8071fc:	38c7c83a 	sub	r3,r7,r3
  807200:	10c00015 	stw	r3,0(r2)
  807204:	003fd306 	br	807154 <_malloc_trim_r+0x78>

00807208 <_free_r>:
  807208:	defffd04 	addi	sp,sp,-12
  80720c:	dc400115 	stw	r17,4(sp)
  807210:	dc000015 	stw	r16,0(sp)
  807214:	dfc00215 	stw	ra,8(sp)
  807218:	2821883a 	mov	r16,r5
  80721c:	2023883a 	mov	r17,r4
  807220:	28005a26 	beq	r5,zero,80738c <_free_r+0x184>
  807224:	080d1fc0 	call	80d1fc <__malloc_lock>
  807228:	823ffe04 	addi	r8,r16,-8
  80722c:	41400117 	ldw	r5,4(r8)
  807230:	00bfff84 	movi	r2,-2
  807234:	028020b4 	movhi	r10,130
  807238:	52a39c04 	addi	r10,r10,-29072
  80723c:	288e703a 	and	r7,r5,r2
  807240:	41cd883a 	add	r6,r8,r7
  807244:	30c00117 	ldw	r3,4(r6)
  807248:	51000217 	ldw	r4,8(r10)
  80724c:	00bfff04 	movi	r2,-4
  807250:	1892703a 	and	r9,r3,r2
  807254:	5017883a 	mov	r11,r10
  807258:	31006726 	beq	r6,r4,8073f8 <_free_r+0x1f0>
  80725c:	2880004c 	andi	r2,r5,1
  807260:	1005003a 	cmpeq	r2,r2,zero
  807264:	32400115 	stw	r9,4(r6)
  807268:	10001a1e 	bne	r2,zero,8072d4 <_free_r+0xcc>
  80726c:	000b883a 	mov	r5,zero
  807270:	3247883a 	add	r3,r6,r9
  807274:	18800117 	ldw	r2,4(r3)
  807278:	1080004c 	andi	r2,r2,1
  80727c:	1000231e 	bne	r2,zero,80730c <_free_r+0x104>
  807280:	280ac03a 	cmpne	r5,r5,zero
  807284:	3a4f883a 	add	r7,r7,r9
  807288:	2800451e 	bne	r5,zero,8073a0 <_free_r+0x198>
  80728c:	31000217 	ldw	r4,8(r6)
  807290:	008020b4 	movhi	r2,130
  807294:	10a39e04 	addi	r2,r2,-29064
  807298:	20807b26 	beq	r4,r2,807488 <_free_r+0x280>
  80729c:	30800317 	ldw	r2,12(r6)
  8072a0:	3a07883a 	add	r3,r7,r8
  8072a4:	19c00015 	stw	r7,0(r3)
  8072a8:	11000215 	stw	r4,8(r2)
  8072ac:	20800315 	stw	r2,12(r4)
  8072b0:	38800054 	ori	r2,r7,1
  8072b4:	40800115 	stw	r2,4(r8)
  8072b8:	28001a26 	beq	r5,zero,807324 <_free_r+0x11c>
  8072bc:	8809883a 	mov	r4,r17
  8072c0:	dfc00217 	ldw	ra,8(sp)
  8072c4:	dc400117 	ldw	r17,4(sp)
  8072c8:	dc000017 	ldw	r16,0(sp)
  8072cc:	dec00304 	addi	sp,sp,12
  8072d0:	080d3041 	jmpi	80d304 <__malloc_unlock>
  8072d4:	80bffe17 	ldw	r2,-8(r16)
  8072d8:	50c00204 	addi	r3,r10,8
  8072dc:	4091c83a 	sub	r8,r8,r2
  8072e0:	41000217 	ldw	r4,8(r8)
  8072e4:	388f883a 	add	r7,r7,r2
  8072e8:	20c06126 	beq	r4,r3,807470 <_free_r+0x268>
  8072ec:	40800317 	ldw	r2,12(r8)
  8072f0:	3247883a 	add	r3,r6,r9
  8072f4:	000b883a 	mov	r5,zero
  8072f8:	11000215 	stw	r4,8(r2)
  8072fc:	20800315 	stw	r2,12(r4)
  807300:	18800117 	ldw	r2,4(r3)
  807304:	1080004c 	andi	r2,r2,1
  807308:	103fdd26 	beq	r2,zero,807280 <_free_r+0x78>
  80730c:	38800054 	ori	r2,r7,1
  807310:	3a07883a 	add	r3,r7,r8
  807314:	280ac03a 	cmpne	r5,r5,zero
  807318:	40800115 	stw	r2,4(r8)
  80731c:	19c00015 	stw	r7,0(r3)
  807320:	283fe61e 	bne	r5,zero,8072bc <_free_r+0xb4>
  807324:	00807fc4 	movi	r2,511
  807328:	11c01f2e 	bgeu	r2,r7,8073a8 <_free_r+0x1a0>
  80732c:	3806d27a 	srli	r3,r7,9
  807330:	1800481e 	bne	r3,zero,807454 <_free_r+0x24c>
  807334:	3804d0fa 	srli	r2,r7,3
  807338:	100690fa 	slli	r3,r2,3
  80733c:	1acd883a 	add	r6,r3,r11
  807340:	31400217 	ldw	r5,8(r6)
  807344:	31405926 	beq	r6,r5,8074ac <_free_r+0x2a4>
  807348:	28800117 	ldw	r2,4(r5)
  80734c:	00ffff04 	movi	r3,-4
  807350:	10c4703a 	and	r2,r2,r3
  807354:	3880022e 	bgeu	r7,r2,807360 <_free_r+0x158>
  807358:	29400217 	ldw	r5,8(r5)
  80735c:	317ffa1e 	bne	r6,r5,807348 <_free_r+0x140>
  807360:	29800317 	ldw	r6,12(r5)
  807364:	41800315 	stw	r6,12(r8)
  807368:	41400215 	stw	r5,8(r8)
  80736c:	8809883a 	mov	r4,r17
  807370:	2a000315 	stw	r8,12(r5)
  807374:	32000215 	stw	r8,8(r6)
  807378:	dfc00217 	ldw	ra,8(sp)
  80737c:	dc400117 	ldw	r17,4(sp)
  807380:	dc000017 	ldw	r16,0(sp)
  807384:	dec00304 	addi	sp,sp,12
  807388:	080d3041 	jmpi	80d304 <__malloc_unlock>
  80738c:	dfc00217 	ldw	ra,8(sp)
  807390:	dc400117 	ldw	r17,4(sp)
  807394:	dc000017 	ldw	r16,0(sp)
  807398:	dec00304 	addi	sp,sp,12
  80739c:	f800283a 	ret
  8073a0:	31000217 	ldw	r4,8(r6)
  8073a4:	003fbd06 	br	80729c <_free_r+0x94>
  8073a8:	3806d0fa 	srli	r3,r7,3
  8073ac:	00800044 	movi	r2,1
  8073b0:	51400117 	ldw	r5,4(r10)
  8073b4:	180890fa 	slli	r4,r3,3
  8073b8:	1807d0ba 	srai	r3,r3,2
  8073bc:	22c9883a 	add	r4,r4,r11
  8073c0:	21800217 	ldw	r6,8(r4)
  8073c4:	10c4983a 	sll	r2,r2,r3
  8073c8:	41000315 	stw	r4,12(r8)
  8073cc:	41800215 	stw	r6,8(r8)
  8073d0:	288ab03a 	or	r5,r5,r2
  8073d4:	22000215 	stw	r8,8(r4)
  8073d8:	8809883a 	mov	r4,r17
  8073dc:	51400115 	stw	r5,4(r10)
  8073e0:	32000315 	stw	r8,12(r6)
  8073e4:	dfc00217 	ldw	ra,8(sp)
  8073e8:	dc400117 	ldw	r17,4(sp)
  8073ec:	dc000017 	ldw	r16,0(sp)
  8073f0:	dec00304 	addi	sp,sp,12
  8073f4:	080d3041 	jmpi	80d304 <__malloc_unlock>
  8073f8:	2880004c 	andi	r2,r5,1
  8073fc:	3a4d883a 	add	r6,r7,r9
  807400:	1000071e 	bne	r2,zero,807420 <_free_r+0x218>
  807404:	80bffe17 	ldw	r2,-8(r16)
  807408:	4091c83a 	sub	r8,r8,r2
  80740c:	41000317 	ldw	r4,12(r8)
  807410:	40c00217 	ldw	r3,8(r8)
  807414:	308d883a 	add	r6,r6,r2
  807418:	20c00215 	stw	r3,8(r4)
  80741c:	19000315 	stw	r4,12(r3)
  807420:	008020b4 	movhi	r2,130
  807424:	10a93e04 	addi	r2,r2,-23304
  807428:	11000017 	ldw	r4,0(r2)
  80742c:	30c00054 	ori	r3,r6,1
  807430:	52000215 	stw	r8,8(r10)
  807434:	40c00115 	stw	r3,4(r8)
  807438:	313fa036 	bltu	r6,r4,8072bc <_free_r+0xb4>
  80743c:	008020b4 	movhi	r2,130
  807440:	10a96c04 	addi	r2,r2,-23120
  807444:	11400017 	ldw	r5,0(r2)
  807448:	8809883a 	mov	r4,r17
  80744c:	08070dc0 	call	8070dc <_malloc_trim_r>
  807450:	003f9a06 	br	8072bc <_free_r+0xb4>
  807454:	00800104 	movi	r2,4
  807458:	10c0072e 	bgeu	r2,r3,807478 <_free_r+0x270>
  80745c:	00800504 	movi	r2,20
  807460:	10c01936 	bltu	r2,r3,8074c8 <_free_r+0x2c0>
  807464:	188016c4 	addi	r2,r3,91
  807468:	100690fa 	slli	r3,r2,3
  80746c:	003fb306 	br	80733c <_free_r+0x134>
  807470:	01400044 	movi	r5,1
  807474:	003f7e06 	br	807270 <_free_r+0x68>
  807478:	3804d1ba 	srli	r2,r7,6
  80747c:	10800e04 	addi	r2,r2,56
  807480:	100690fa 	slli	r3,r2,3
  807484:	003fad06 	br	80733c <_free_r+0x134>
  807488:	22000315 	stw	r8,12(r4)
  80748c:	22000215 	stw	r8,8(r4)
  807490:	3a05883a 	add	r2,r7,r8
  807494:	38c00054 	ori	r3,r7,1
  807498:	11c00015 	stw	r7,0(r2)
  80749c:	41000215 	stw	r4,8(r8)
  8074a0:	40c00115 	stw	r3,4(r8)
  8074a4:	41000315 	stw	r4,12(r8)
  8074a8:	003f8406 	br	8072bc <_free_r+0xb4>
  8074ac:	1005d0ba 	srai	r2,r2,2
  8074b0:	00c00044 	movi	r3,1
  8074b4:	51000117 	ldw	r4,4(r10)
  8074b8:	1886983a 	sll	r3,r3,r2
  8074bc:	20c8b03a 	or	r4,r4,r3
  8074c0:	51000115 	stw	r4,4(r10)
  8074c4:	003fa706 	br	807364 <_free_r+0x15c>
  8074c8:	00801504 	movi	r2,84
  8074cc:	10c00436 	bltu	r2,r3,8074e0 <_free_r+0x2d8>
  8074d0:	3804d33a 	srli	r2,r7,12
  8074d4:	10801b84 	addi	r2,r2,110
  8074d8:	100690fa 	slli	r3,r2,3
  8074dc:	003f9706 	br	80733c <_free_r+0x134>
  8074e0:	00805504 	movi	r2,340
  8074e4:	10c00436 	bltu	r2,r3,8074f8 <_free_r+0x2f0>
  8074e8:	3804d3fa 	srli	r2,r7,15
  8074ec:	10801dc4 	addi	r2,r2,119
  8074f0:	100690fa 	slli	r3,r2,3
  8074f4:	003f9106 	br	80733c <_free_r+0x134>
  8074f8:	00815504 	movi	r2,1364
  8074fc:	10c0032e 	bgeu	r2,r3,80750c <_free_r+0x304>
  807500:	00801f84 	movi	r2,126
  807504:	00c0fc04 	movi	r3,1008
  807508:	003f8c06 	br	80733c <_free_r+0x134>
  80750c:	3804d4ba 	srli	r2,r7,18
  807510:	10801f04 	addi	r2,r2,124
  807514:	100690fa 	slli	r3,r2,3
  807518:	003f8806 	br	80733c <_free_r+0x134>

0080751c <__sfvwrite_r>:
  80751c:	30800217 	ldw	r2,8(r6)
  807520:	defff504 	addi	sp,sp,-44
  807524:	df000915 	stw	fp,36(sp)
  807528:	dd800715 	stw	r22,28(sp)
  80752c:	dc800315 	stw	r18,12(sp)
  807530:	dfc00a15 	stw	ra,40(sp)
  807534:	ddc00815 	stw	r23,32(sp)
  807538:	dd400615 	stw	r21,24(sp)
  80753c:	dd000515 	stw	r20,20(sp)
  807540:	dcc00415 	stw	r19,16(sp)
  807544:	dc400215 	stw	r17,8(sp)
  807548:	dc000115 	stw	r16,4(sp)
  80754c:	302d883a 	mov	r22,r6
  807550:	2039883a 	mov	fp,r4
  807554:	2825883a 	mov	r18,r5
  807558:	10001c26 	beq	r2,zero,8075cc <__sfvwrite_r+0xb0>
  80755c:	29c0030b 	ldhu	r7,12(r5)
  807560:	3880020c 	andi	r2,r7,8
  807564:	10002726 	beq	r2,zero,807604 <__sfvwrite_r+0xe8>
  807568:	28800417 	ldw	r2,16(r5)
  80756c:	10002526 	beq	r2,zero,807604 <__sfvwrite_r+0xe8>
  807570:	3880008c 	andi	r2,r7,2
  807574:	b5400017 	ldw	r21,0(r22)
  807578:	10002826 	beq	r2,zero,80761c <__sfvwrite_r+0x100>
  80757c:	0021883a 	mov	r16,zero
  807580:	0023883a 	mov	r17,zero
  807584:	880d883a 	mov	r6,r17
  807588:	e009883a 	mov	r4,fp
  80758c:	00810004 	movi	r2,1024
  807590:	80006e26 	beq	r16,zero,80774c <__sfvwrite_r+0x230>
  807594:	800f883a 	mov	r7,r16
  807598:	91400717 	ldw	r5,28(r18)
  80759c:	1400012e 	bgeu	r2,r16,8075a4 <__sfvwrite_r+0x88>
  8075a0:	100f883a 	mov	r7,r2
  8075a4:	90c00917 	ldw	r3,36(r18)
  8075a8:	183ee83a 	callr	r3
  8075ac:	1007883a 	mov	r3,r2
  8075b0:	80a1c83a 	sub	r16,r16,r2
  8075b4:	88a3883a 	add	r17,r17,r2
  8075b8:	00806d0e 	bge	zero,r2,807770 <__sfvwrite_r+0x254>
  8075bc:	b0800217 	ldw	r2,8(r22)
  8075c0:	10c5c83a 	sub	r2,r2,r3
  8075c4:	b0800215 	stw	r2,8(r22)
  8075c8:	103fee1e 	bne	r2,zero,807584 <__sfvwrite_r+0x68>
  8075cc:	0009883a 	mov	r4,zero
  8075d0:	2005883a 	mov	r2,r4
  8075d4:	dfc00a17 	ldw	ra,40(sp)
  8075d8:	df000917 	ldw	fp,36(sp)
  8075dc:	ddc00817 	ldw	r23,32(sp)
  8075e0:	dd800717 	ldw	r22,28(sp)
  8075e4:	dd400617 	ldw	r21,24(sp)
  8075e8:	dd000517 	ldw	r20,20(sp)
  8075ec:	dcc00417 	ldw	r19,16(sp)
  8075f0:	dc800317 	ldw	r18,12(sp)
  8075f4:	dc400217 	ldw	r17,8(sp)
  8075f8:	dc000117 	ldw	r16,4(sp)
  8075fc:	dec00b04 	addi	sp,sp,44
  807600:	f800283a 	ret
  807604:	080526c0 	call	80526c <__swsetup_r>
  807608:	1000e41e 	bne	r2,zero,80799c <__sfvwrite_r+0x480>
  80760c:	91c0030b 	ldhu	r7,12(r18)
  807610:	b5400017 	ldw	r21,0(r22)
  807614:	3880008c 	andi	r2,r7,2
  807618:	103fd81e 	bne	r2,zero,80757c <__sfvwrite_r+0x60>
  80761c:	3880004c 	andi	r2,r7,1
  807620:	1005003a 	cmpeq	r2,r2,zero
  807624:	10005726 	beq	r2,zero,807784 <__sfvwrite_r+0x268>
  807628:	0029883a 	mov	r20,zero
  80762c:	002f883a 	mov	r23,zero
  807630:	a0004226 	beq	r20,zero,80773c <__sfvwrite_r+0x220>
  807634:	3880800c 	andi	r2,r7,512
  807638:	94000217 	ldw	r16,8(r18)
  80763c:	10008b26 	beq	r2,zero,80786c <__sfvwrite_r+0x350>
  807640:	800d883a 	mov	r6,r16
  807644:	a400a536 	bltu	r20,r16,8078dc <__sfvwrite_r+0x3c0>
  807648:	3881200c 	andi	r2,r7,1152
  80764c:	10002726 	beq	r2,zero,8076ec <__sfvwrite_r+0x1d0>
  807650:	90800517 	ldw	r2,20(r18)
  807654:	92000417 	ldw	r8,16(r18)
  807658:	91400017 	ldw	r5,0(r18)
  80765c:	1087883a 	add	r3,r2,r2
  807660:	1887883a 	add	r3,r3,r2
  807664:	1808d7fa 	srli	r4,r3,31
  807668:	2a21c83a 	sub	r16,r5,r8
  80766c:	80800044 	addi	r2,r16,1
  807670:	20c9883a 	add	r4,r4,r3
  807674:	2027d07a 	srai	r19,r4,1
  807678:	a085883a 	add	r2,r20,r2
  80767c:	980d883a 	mov	r6,r19
  807680:	9880022e 	bgeu	r19,r2,80768c <__sfvwrite_r+0x170>
  807684:	1027883a 	mov	r19,r2
  807688:	100d883a 	mov	r6,r2
  80768c:	3881000c 	andi	r2,r7,1024
  807690:	1000b826 	beq	r2,zero,807974 <__sfvwrite_r+0x458>
  807694:	300b883a 	mov	r5,r6
  807698:	e009883a 	mov	r4,fp
  80769c:	0801f9c0 	call	801f9c <_malloc_r>
  8076a0:	10003126 	beq	r2,zero,807768 <__sfvwrite_r+0x24c>
  8076a4:	91400417 	ldw	r5,16(r18)
  8076a8:	1009883a 	mov	r4,r2
  8076ac:	800d883a 	mov	r6,r16
  8076b0:	1023883a 	mov	r17,r2
  8076b4:	08026dc0 	call	8026dc <memcpy>
  8076b8:	90c0030b 	ldhu	r3,12(r18)
  8076bc:	00beffc4 	movi	r2,-1025
  8076c0:	1886703a 	and	r3,r3,r2
  8076c4:	18c02014 	ori	r3,r3,128
  8076c8:	90c0030d 	sth	r3,12(r18)
  8076cc:	9c07c83a 	sub	r3,r19,r16
  8076d0:	8c05883a 	add	r2,r17,r16
  8076d4:	a00d883a 	mov	r6,r20
  8076d8:	a021883a 	mov	r16,r20
  8076dc:	90800015 	stw	r2,0(r18)
  8076e0:	90c00215 	stw	r3,8(r18)
  8076e4:	94400415 	stw	r17,16(r18)
  8076e8:	94c00515 	stw	r19,20(r18)
  8076ec:	91000017 	ldw	r4,0(r18)
  8076f0:	b80b883a 	mov	r5,r23
  8076f4:	a023883a 	mov	r17,r20
  8076f8:	080277c0 	call	80277c <memmove>
  8076fc:	90c00217 	ldw	r3,8(r18)
  807700:	90800017 	ldw	r2,0(r18)
  807704:	a027883a 	mov	r19,r20
  807708:	1c07c83a 	sub	r3,r3,r16
  80770c:	1405883a 	add	r2,r2,r16
  807710:	90c00215 	stw	r3,8(r18)
  807714:	a021883a 	mov	r16,r20
  807718:	90800015 	stw	r2,0(r18)
  80771c:	b0800217 	ldw	r2,8(r22)
  807720:	1405c83a 	sub	r2,r2,r16
  807724:	b0800215 	stw	r2,8(r22)
  807728:	103fa826 	beq	r2,zero,8075cc <__sfvwrite_r+0xb0>
  80772c:	a469c83a 	sub	r20,r20,r17
  807730:	91c0030b 	ldhu	r7,12(r18)
  807734:	bcef883a 	add	r23,r23,r19
  807738:	a03fbe1e 	bne	r20,zero,807634 <__sfvwrite_r+0x118>
  80773c:	adc00017 	ldw	r23,0(r21)
  807740:	ad000117 	ldw	r20,4(r21)
  807744:	ad400204 	addi	r21,r21,8
  807748:	003fb906 	br	807630 <__sfvwrite_r+0x114>
  80774c:	ac400017 	ldw	r17,0(r21)
  807750:	ac000117 	ldw	r16,4(r21)
  807754:	ad400204 	addi	r21,r21,8
  807758:	003f8a06 	br	807584 <__sfvwrite_r+0x68>
  80775c:	91400417 	ldw	r5,16(r18)
  807760:	e009883a 	mov	r4,fp
  807764:	08072080 	call	807208 <_free_r>
  807768:	00800304 	movi	r2,12
  80776c:	e0800015 	stw	r2,0(fp)
  807770:	9080030b 	ldhu	r2,12(r18)
  807774:	013fffc4 	movi	r4,-1
  807778:	10801014 	ori	r2,r2,64
  80777c:	9080030d 	sth	r2,12(r18)
  807780:	003f9306 	br	8075d0 <__sfvwrite_r+0xb4>
  807784:	0027883a 	mov	r19,zero
  807788:	002f883a 	mov	r23,zero
  80778c:	d8000015 	stw	zero,0(sp)
  807790:	0029883a 	mov	r20,zero
  807794:	98001e26 	beq	r19,zero,807810 <__sfvwrite_r+0x2f4>
  807798:	d8c00017 	ldw	r3,0(sp)
  80779c:	1804c03a 	cmpne	r2,r3,zero
  8077a0:	10005e26 	beq	r2,zero,80791c <__sfvwrite_r+0x400>
  8077a4:	9821883a 	mov	r16,r19
  8077a8:	a4c0012e 	bgeu	r20,r19,8077b0 <__sfvwrite_r+0x294>
  8077ac:	a021883a 	mov	r16,r20
  8077b0:	91000017 	ldw	r4,0(r18)
  8077b4:	90800417 	ldw	r2,16(r18)
  8077b8:	91800217 	ldw	r6,8(r18)
  8077bc:	91c00517 	ldw	r7,20(r18)
  8077c0:	1100022e 	bgeu	r2,r4,8077cc <__sfvwrite_r+0x2b0>
  8077c4:	31e3883a 	add	r17,r6,r7
  8077c8:	8c001616 	blt	r17,r16,807824 <__sfvwrite_r+0x308>
  8077cc:	81c03816 	blt	r16,r7,8078b0 <__sfvwrite_r+0x394>
  8077d0:	90c00917 	ldw	r3,36(r18)
  8077d4:	91400717 	ldw	r5,28(r18)
  8077d8:	e009883a 	mov	r4,fp
  8077dc:	b80d883a 	mov	r6,r23
  8077e0:	183ee83a 	callr	r3
  8077e4:	1023883a 	mov	r17,r2
  8077e8:	00bfe10e 	bge	zero,r2,807770 <__sfvwrite_r+0x254>
  8077ec:	a469c83a 	sub	r20,r20,r17
  8077f0:	a0001826 	beq	r20,zero,807854 <__sfvwrite_r+0x338>
  8077f4:	b0800217 	ldw	r2,8(r22)
  8077f8:	1445c83a 	sub	r2,r2,r17
  8077fc:	b0800215 	stw	r2,8(r22)
  807800:	103f7226 	beq	r2,zero,8075cc <__sfvwrite_r+0xb0>
  807804:	9c67c83a 	sub	r19,r19,r17
  807808:	bc6f883a 	add	r23,r23,r17
  80780c:	983fe21e 	bne	r19,zero,807798 <__sfvwrite_r+0x27c>
  807810:	adc00017 	ldw	r23,0(r21)
  807814:	acc00117 	ldw	r19,4(r21)
  807818:	ad400204 	addi	r21,r21,8
  80781c:	d8000015 	stw	zero,0(sp)
  807820:	003fdc06 	br	807794 <__sfvwrite_r+0x278>
  807824:	b80b883a 	mov	r5,r23
  807828:	880d883a 	mov	r6,r17
  80782c:	080277c0 	call	80277c <memmove>
  807830:	90c00017 	ldw	r3,0(r18)
  807834:	e009883a 	mov	r4,fp
  807838:	900b883a 	mov	r5,r18
  80783c:	1c47883a 	add	r3,r3,r17
  807840:	90c00015 	stw	r3,0(r18)
  807844:	0806bb80 	call	806bb8 <_fflush_r>
  807848:	103fc91e 	bne	r2,zero,807770 <__sfvwrite_r+0x254>
  80784c:	a469c83a 	sub	r20,r20,r17
  807850:	a03fe81e 	bne	r20,zero,8077f4 <__sfvwrite_r+0x2d8>
  807854:	e009883a 	mov	r4,fp
  807858:	900b883a 	mov	r5,r18
  80785c:	0806bb80 	call	806bb8 <_fflush_r>
  807860:	103fc31e 	bne	r2,zero,807770 <__sfvwrite_r+0x254>
  807864:	d8000015 	stw	zero,0(sp)
  807868:	003fe206 	br	8077f4 <__sfvwrite_r+0x2d8>
  80786c:	91000017 	ldw	r4,0(r18)
  807870:	90800417 	ldw	r2,16(r18)
  807874:	1100022e 	bgeu	r2,r4,807880 <__sfvwrite_r+0x364>
  807878:	8023883a 	mov	r17,r16
  80787c:	85003136 	bltu	r16,r20,807944 <__sfvwrite_r+0x428>
  807880:	91c00517 	ldw	r7,20(r18)
  807884:	a1c01836 	bltu	r20,r7,8078e8 <__sfvwrite_r+0x3cc>
  807888:	90c00917 	ldw	r3,36(r18)
  80788c:	91400717 	ldw	r5,28(r18)
  807890:	e009883a 	mov	r4,fp
  807894:	b80d883a 	mov	r6,r23
  807898:	183ee83a 	callr	r3
  80789c:	1021883a 	mov	r16,r2
  8078a0:	00bfb30e 	bge	zero,r2,807770 <__sfvwrite_r+0x254>
  8078a4:	1023883a 	mov	r17,r2
  8078a8:	1027883a 	mov	r19,r2
  8078ac:	003f9b06 	br	80771c <__sfvwrite_r+0x200>
  8078b0:	b80b883a 	mov	r5,r23
  8078b4:	800d883a 	mov	r6,r16
  8078b8:	080277c0 	call	80277c <memmove>
  8078bc:	90c00217 	ldw	r3,8(r18)
  8078c0:	90800017 	ldw	r2,0(r18)
  8078c4:	8023883a 	mov	r17,r16
  8078c8:	1c07c83a 	sub	r3,r3,r16
  8078cc:	1405883a 	add	r2,r2,r16
  8078d0:	90c00215 	stw	r3,8(r18)
  8078d4:	90800015 	stw	r2,0(r18)
  8078d8:	003fc406 	br	8077ec <__sfvwrite_r+0x2d0>
  8078dc:	a00d883a 	mov	r6,r20
  8078e0:	a021883a 	mov	r16,r20
  8078e4:	003f8106 	br	8076ec <__sfvwrite_r+0x1d0>
  8078e8:	b80b883a 	mov	r5,r23
  8078ec:	a00d883a 	mov	r6,r20
  8078f0:	080277c0 	call	80277c <memmove>
  8078f4:	90c00217 	ldw	r3,8(r18)
  8078f8:	90800017 	ldw	r2,0(r18)
  8078fc:	a021883a 	mov	r16,r20
  807900:	1d07c83a 	sub	r3,r3,r20
  807904:	1505883a 	add	r2,r2,r20
  807908:	a023883a 	mov	r17,r20
  80790c:	a027883a 	mov	r19,r20
  807910:	90c00215 	stw	r3,8(r18)
  807914:	90800015 	stw	r2,0(r18)
  807918:	003f8006 	br	80771c <__sfvwrite_r+0x200>
  80791c:	b809883a 	mov	r4,r23
  807920:	01400284 	movi	r5,10
  807924:	980d883a 	mov	r6,r19
  807928:	0807d900 	call	807d90 <memchr>
  80792c:	10001726 	beq	r2,zero,80798c <__sfvwrite_r+0x470>
  807930:	15c5c83a 	sub	r2,r2,r23
  807934:	15000044 	addi	r20,r2,1
  807938:	00800044 	movi	r2,1
  80793c:	d8800015 	stw	r2,0(sp)
  807940:	003f9806 	br	8077a4 <__sfvwrite_r+0x288>
  807944:	b80b883a 	mov	r5,r23
  807948:	800d883a 	mov	r6,r16
  80794c:	080277c0 	call	80277c <memmove>
  807950:	90c00017 	ldw	r3,0(r18)
  807954:	e009883a 	mov	r4,fp
  807958:	900b883a 	mov	r5,r18
  80795c:	1c07883a 	add	r3,r3,r16
  807960:	90c00015 	stw	r3,0(r18)
  807964:	8027883a 	mov	r19,r16
  807968:	0806bb80 	call	806bb8 <_fflush_r>
  80796c:	103f6b26 	beq	r2,zero,80771c <__sfvwrite_r+0x200>
  807970:	003f7f06 	br	807770 <__sfvwrite_r+0x254>
  807974:	400b883a 	mov	r5,r8
  807978:	e009883a 	mov	r4,fp
  80797c:	08029100 	call	802910 <_realloc_r>
  807980:	103f7626 	beq	r2,zero,80775c <__sfvwrite_r+0x240>
  807984:	1023883a 	mov	r17,r2
  807988:	003f5006 	br	8076cc <__sfvwrite_r+0x1b0>
  80798c:	00c00044 	movi	r3,1
  807990:	9d000044 	addi	r20,r19,1
  807994:	d8c00015 	stw	r3,0(sp)
  807998:	003f8206 	br	8077a4 <__sfvwrite_r+0x288>
  80799c:	9080030b 	ldhu	r2,12(r18)
  8079a0:	00c00244 	movi	r3,9
  8079a4:	013fffc4 	movi	r4,-1
  8079a8:	10801014 	ori	r2,r2,64
  8079ac:	9080030d 	sth	r2,12(r18)
  8079b0:	e0c00015 	stw	r3,0(fp)
  8079b4:	003f0606 	br	8075d0 <__sfvwrite_r+0xb4>

008079b8 <_fwalk_reent>:
  8079b8:	defff704 	addi	sp,sp,-36
  8079bc:	dcc00315 	stw	r19,12(sp)
  8079c0:	24c0b804 	addi	r19,r4,736
  8079c4:	dd800615 	stw	r22,24(sp)
  8079c8:	dd400515 	stw	r21,20(sp)
  8079cc:	dfc00815 	stw	ra,32(sp)
  8079d0:	ddc00715 	stw	r23,28(sp)
  8079d4:	dd000415 	stw	r20,16(sp)
  8079d8:	dc800215 	stw	r18,8(sp)
  8079dc:	dc400115 	stw	r17,4(sp)
  8079e0:	dc000015 	stw	r16,0(sp)
  8079e4:	202b883a 	mov	r21,r4
  8079e8:	282d883a 	mov	r22,r5
  8079ec:	0806e400 	call	806e40 <__sfp_lock_acquire>
  8079f0:	98002126 	beq	r19,zero,807a78 <_fwalk_reent+0xc0>
  8079f4:	002f883a 	mov	r23,zero
  8079f8:	9c800117 	ldw	r18,4(r19)
  8079fc:	9c000217 	ldw	r16,8(r19)
  807a00:	90bfffc4 	addi	r2,r18,-1
  807a04:	10000d16 	blt	r2,zero,807a3c <_fwalk_reent+0x84>
  807a08:	0023883a 	mov	r17,zero
  807a0c:	053fffc4 	movi	r20,-1
  807a10:	8080030f 	ldh	r2,12(r16)
  807a14:	8c400044 	addi	r17,r17,1
  807a18:	10000626 	beq	r2,zero,807a34 <_fwalk_reent+0x7c>
  807a1c:	8080038f 	ldh	r2,14(r16)
  807a20:	800b883a 	mov	r5,r16
  807a24:	a809883a 	mov	r4,r21
  807a28:	15000226 	beq	r2,r20,807a34 <_fwalk_reent+0x7c>
  807a2c:	b03ee83a 	callr	r22
  807a30:	b8aeb03a 	or	r23,r23,r2
  807a34:	84001704 	addi	r16,r16,92
  807a38:	947ff51e 	bne	r18,r17,807a10 <_fwalk_reent+0x58>
  807a3c:	9cc00017 	ldw	r19,0(r19)
  807a40:	983fed1e 	bne	r19,zero,8079f8 <_fwalk_reent+0x40>
  807a44:	0806e440 	call	806e44 <__sfp_lock_release>
  807a48:	b805883a 	mov	r2,r23
  807a4c:	dfc00817 	ldw	ra,32(sp)
  807a50:	ddc00717 	ldw	r23,28(sp)
  807a54:	dd800617 	ldw	r22,24(sp)
  807a58:	dd400517 	ldw	r21,20(sp)
  807a5c:	dd000417 	ldw	r20,16(sp)
  807a60:	dcc00317 	ldw	r19,12(sp)
  807a64:	dc800217 	ldw	r18,8(sp)
  807a68:	dc400117 	ldw	r17,4(sp)
  807a6c:	dc000017 	ldw	r16,0(sp)
  807a70:	dec00904 	addi	sp,sp,36
  807a74:	f800283a 	ret
  807a78:	002f883a 	mov	r23,zero
  807a7c:	003ff106 	br	807a44 <_fwalk_reent+0x8c>

00807a80 <_fwalk>:
  807a80:	defff804 	addi	sp,sp,-32
  807a84:	dcc00315 	stw	r19,12(sp)
  807a88:	24c0b804 	addi	r19,r4,736
  807a8c:	dd400515 	stw	r21,20(sp)
  807a90:	dfc00715 	stw	ra,28(sp)
  807a94:	dd800615 	stw	r22,24(sp)
  807a98:	dd000415 	stw	r20,16(sp)
  807a9c:	dc800215 	stw	r18,8(sp)
  807aa0:	dc400115 	stw	r17,4(sp)
  807aa4:	dc000015 	stw	r16,0(sp)
  807aa8:	282b883a 	mov	r21,r5
  807aac:	0806e400 	call	806e40 <__sfp_lock_acquire>
  807ab0:	98001f26 	beq	r19,zero,807b30 <_fwalk+0xb0>
  807ab4:	002d883a 	mov	r22,zero
  807ab8:	9c800117 	ldw	r18,4(r19)
  807abc:	9c000217 	ldw	r16,8(r19)
  807ac0:	90bfffc4 	addi	r2,r18,-1
  807ac4:	10000c16 	blt	r2,zero,807af8 <_fwalk+0x78>
  807ac8:	0023883a 	mov	r17,zero
  807acc:	053fffc4 	movi	r20,-1
  807ad0:	8080030f 	ldh	r2,12(r16)
  807ad4:	8c400044 	addi	r17,r17,1
  807ad8:	10000526 	beq	r2,zero,807af0 <_fwalk+0x70>
  807adc:	8080038f 	ldh	r2,14(r16)
  807ae0:	8009883a 	mov	r4,r16
  807ae4:	15000226 	beq	r2,r20,807af0 <_fwalk+0x70>
  807ae8:	a83ee83a 	callr	r21
  807aec:	b0acb03a 	or	r22,r22,r2
  807af0:	84001704 	addi	r16,r16,92
  807af4:	947ff61e 	bne	r18,r17,807ad0 <_fwalk+0x50>
  807af8:	9cc00017 	ldw	r19,0(r19)
  807afc:	983fee1e 	bne	r19,zero,807ab8 <_fwalk+0x38>
  807b00:	0806e440 	call	806e44 <__sfp_lock_release>
  807b04:	b005883a 	mov	r2,r22
  807b08:	dfc00717 	ldw	ra,28(sp)
  807b0c:	dd800617 	ldw	r22,24(sp)
  807b10:	dd400517 	ldw	r21,20(sp)
  807b14:	dd000417 	ldw	r20,16(sp)
  807b18:	dcc00317 	ldw	r19,12(sp)
  807b1c:	dc800217 	ldw	r18,8(sp)
  807b20:	dc400117 	ldw	r17,4(sp)
  807b24:	dc000017 	ldw	r16,0(sp)
  807b28:	dec00804 	addi	sp,sp,32
  807b2c:	f800283a 	ret
  807b30:	002d883a 	mov	r22,zero
  807b34:	003ff206 	br	807b00 <_fwalk+0x80>

00807b38 <__locale_charset>:
  807b38:	d0a00517 	ldw	r2,-32748(gp)
  807b3c:	f800283a 	ret

00807b40 <_localeconv_r>:
  807b40:	008020b4 	movhi	r2,130
  807b44:	10a19e04 	addi	r2,r2,-31112
  807b48:	f800283a 	ret

00807b4c <localeconv>:
  807b4c:	008020b4 	movhi	r2,130
  807b50:	10a93c04 	addi	r2,r2,-23312
  807b54:	11000017 	ldw	r4,0(r2)
  807b58:	0807b401 	jmpi	807b40 <_localeconv_r>

00807b5c <_setlocale_r>:
  807b5c:	defffc04 	addi	sp,sp,-16
  807b60:	00c020b4 	movhi	r3,130
  807b64:	18e17504 	addi	r3,r3,-31276
  807b68:	dc800215 	stw	r18,8(sp)
  807b6c:	dc400115 	stw	r17,4(sp)
  807b70:	dc000015 	stw	r16,0(sp)
  807b74:	2023883a 	mov	r17,r4
  807b78:	2825883a 	mov	r18,r5
  807b7c:	dfc00315 	stw	ra,12(sp)
  807b80:	3021883a 	mov	r16,r6
  807b84:	3009883a 	mov	r4,r6
  807b88:	180b883a 	mov	r5,r3
  807b8c:	30000926 	beq	r6,zero,807bb4 <_setlocale_r+0x58>
  807b90:	08031540 	call	803154 <strcmp>
  807b94:	8009883a 	mov	r4,r16
  807b98:	014020b4 	movhi	r5,130
  807b9c:	29617404 	addi	r5,r5,-31280
  807ba0:	10000b1e 	bne	r2,zero,807bd0 <_setlocale_r+0x74>
  807ba4:	8c000d15 	stw	r16,52(r17)
  807ba8:	8c800c15 	stw	r18,48(r17)
  807bac:	00c020b4 	movhi	r3,130
  807bb0:	18e17504 	addi	r3,r3,-31276
  807bb4:	1805883a 	mov	r2,r3
  807bb8:	dfc00317 	ldw	ra,12(sp)
  807bbc:	dc800217 	ldw	r18,8(sp)
  807bc0:	dc400117 	ldw	r17,4(sp)
  807bc4:	dc000017 	ldw	r16,0(sp)
  807bc8:	dec00404 	addi	sp,sp,16
  807bcc:	f800283a 	ret
  807bd0:	08031540 	call	803154 <strcmp>
  807bd4:	0007883a 	mov	r3,zero
  807bd8:	103ff226 	beq	r2,zero,807ba4 <_setlocale_r+0x48>
  807bdc:	003ff506 	br	807bb4 <_setlocale_r+0x58>

00807be0 <setlocale>:
  807be0:	018020b4 	movhi	r6,130
  807be4:	31a93c04 	addi	r6,r6,-23312
  807be8:	2007883a 	mov	r3,r4
  807bec:	31000017 	ldw	r4,0(r6)
  807bf0:	280d883a 	mov	r6,r5
  807bf4:	180b883a 	mov	r5,r3
  807bf8:	0807b5c1 	jmpi	807b5c <_setlocale_r>

00807bfc <__smakebuf_r>:
  807bfc:	2880030b 	ldhu	r2,12(r5)
  807c00:	deffed04 	addi	sp,sp,-76
  807c04:	dc401015 	stw	r17,64(sp)
  807c08:	1080008c 	andi	r2,r2,2
  807c0c:	dc000f15 	stw	r16,60(sp)
  807c10:	dfc01215 	stw	ra,72(sp)
  807c14:	dc801115 	stw	r18,68(sp)
  807c18:	2821883a 	mov	r16,r5
  807c1c:	2023883a 	mov	r17,r4
  807c20:	10000b26 	beq	r2,zero,807c50 <__smakebuf_r+0x54>
  807c24:	28c010c4 	addi	r3,r5,67
  807c28:	00800044 	movi	r2,1
  807c2c:	28800515 	stw	r2,20(r5)
  807c30:	28c00415 	stw	r3,16(r5)
  807c34:	28c00015 	stw	r3,0(r5)
  807c38:	dfc01217 	ldw	ra,72(sp)
  807c3c:	dc801117 	ldw	r18,68(sp)
  807c40:	dc401017 	ldw	r17,64(sp)
  807c44:	dc000f17 	ldw	r16,60(sp)
  807c48:	dec01304 	addi	sp,sp,76
  807c4c:	f800283a 	ret
  807c50:	2940038f 	ldh	r5,14(r5)
  807c54:	28002116 	blt	r5,zero,807cdc <__smakebuf_r+0xe0>
  807c58:	d80d883a 	mov	r6,sp
  807c5c:	080a81c0 	call	80a81c <_fstat_r>
  807c60:	10001e16 	blt	r2,zero,807cdc <__smakebuf_r+0xe0>
  807c64:	d8800117 	ldw	r2,4(sp)
  807c68:	00e00014 	movui	r3,32768
  807c6c:	113c000c 	andi	r4,r2,61440
  807c70:	20c03126 	beq	r4,r3,807d38 <__smakebuf_r+0x13c>
  807c74:	8080030b 	ldhu	r2,12(r16)
  807c78:	00c80004 	movi	r3,8192
  807c7c:	10820014 	ori	r2,r2,2048
  807c80:	8080030d 	sth	r2,12(r16)
  807c84:	20c01e26 	beq	r4,r3,807d00 <__smakebuf_r+0x104>
  807c88:	04810004 	movi	r18,1024
  807c8c:	8809883a 	mov	r4,r17
  807c90:	900b883a 	mov	r5,r18
  807c94:	0801f9c0 	call	801f9c <_malloc_r>
  807c98:	1009883a 	mov	r4,r2
  807c9c:	10003126 	beq	r2,zero,807d64 <__smakebuf_r+0x168>
  807ca0:	80c0030b 	ldhu	r3,12(r16)
  807ca4:	00802034 	movhi	r2,128
  807ca8:	109bcd04 	addi	r2,r2,28468
  807cac:	88800f15 	stw	r2,60(r17)
  807cb0:	18c02014 	ori	r3,r3,128
  807cb4:	84800515 	stw	r18,20(r16)
  807cb8:	80c0030d 	sth	r3,12(r16)
  807cbc:	81000415 	stw	r4,16(r16)
  807cc0:	81000015 	stw	r4,0(r16)
  807cc4:	dfc01217 	ldw	ra,72(sp)
  807cc8:	dc801117 	ldw	r18,68(sp)
  807ccc:	dc401017 	ldw	r17,64(sp)
  807cd0:	dc000f17 	ldw	r16,60(sp)
  807cd4:	dec01304 	addi	sp,sp,76
  807cd8:	f800283a 	ret
  807cdc:	80c0030b 	ldhu	r3,12(r16)
  807ce0:	1880200c 	andi	r2,r3,128
  807ce4:	10000426 	beq	r2,zero,807cf8 <__smakebuf_r+0xfc>
  807ce8:	04801004 	movi	r18,64
  807cec:	18820014 	ori	r2,r3,2048
  807cf0:	8080030d 	sth	r2,12(r16)
  807cf4:	003fe506 	br	807c8c <__smakebuf_r+0x90>
  807cf8:	04810004 	movi	r18,1024
  807cfc:	003ffb06 	br	807cec <__smakebuf_r+0xf0>
  807d00:	8140038f 	ldh	r5,14(r16)
  807d04:	8809883a 	mov	r4,r17
  807d08:	080a8900 	call	80a890 <_isatty_r>
  807d0c:	103fde26 	beq	r2,zero,807c88 <__smakebuf_r+0x8c>
  807d10:	8080030b 	ldhu	r2,12(r16)
  807d14:	80c010c4 	addi	r3,r16,67
  807d18:	04810004 	movi	r18,1024
  807d1c:	10800054 	ori	r2,r2,1
  807d20:	8080030d 	sth	r2,12(r16)
  807d24:	00800044 	movi	r2,1
  807d28:	80c00415 	stw	r3,16(r16)
  807d2c:	80800515 	stw	r2,20(r16)
  807d30:	80c00015 	stw	r3,0(r16)
  807d34:	003fd506 	br	807c8c <__smakebuf_r+0x90>
  807d38:	80c00a17 	ldw	r3,40(r16)
  807d3c:	00802074 	movhi	r2,129
  807d40:	10a4b204 	addi	r2,r2,-27960
  807d44:	18bfcb1e 	bne	r3,r2,807c74 <__smakebuf_r+0x78>
  807d48:	8080030b 	ldhu	r2,12(r16)
  807d4c:	00c10004 	movi	r3,1024
  807d50:	1825883a 	mov	r18,r3
  807d54:	10c4b03a 	or	r2,r2,r3
  807d58:	8080030d 	sth	r2,12(r16)
  807d5c:	80c01315 	stw	r3,76(r16)
  807d60:	003fca06 	br	807c8c <__smakebuf_r+0x90>
  807d64:	8100030b 	ldhu	r4,12(r16)
  807d68:	2080800c 	andi	r2,r4,512
  807d6c:	103fb21e 	bne	r2,zero,807c38 <__smakebuf_r+0x3c>
  807d70:	80c010c4 	addi	r3,r16,67
  807d74:	21000094 	ori	r4,r4,2
  807d78:	00800044 	movi	r2,1
  807d7c:	80800515 	stw	r2,20(r16)
  807d80:	8100030d 	sth	r4,12(r16)
  807d84:	80c00415 	stw	r3,16(r16)
  807d88:	80c00015 	stw	r3,0(r16)
  807d8c:	003faa06 	br	807c38 <__smakebuf_r+0x3c>

00807d90 <memchr>:
  807d90:	008000c4 	movi	r2,3
  807d94:	29403fcc 	andi	r5,r5,255
  807d98:	2007883a 	mov	r3,r4
  807d9c:	1180022e 	bgeu	r2,r6,807da8 <memchr+0x18>
  807da0:	2084703a 	and	r2,r4,r2
  807da4:	10000b26 	beq	r2,zero,807dd4 <memchr+0x44>
  807da8:	313fffc4 	addi	r4,r6,-1
  807dac:	3000051e 	bne	r6,zero,807dc4 <memchr+0x34>
  807db0:	00002c06 	br	807e64 <memchr+0xd4>
  807db4:	213fffc4 	addi	r4,r4,-1
  807db8:	00bfffc4 	movi	r2,-1
  807dbc:	18c00044 	addi	r3,r3,1
  807dc0:	20802826 	beq	r4,r2,807e64 <memchr+0xd4>
  807dc4:	18800003 	ldbu	r2,0(r3)
  807dc8:	28bffa1e 	bne	r5,r2,807db4 <memchr+0x24>
  807dcc:	1805883a 	mov	r2,r3
  807dd0:	f800283a 	ret
  807dd4:	0011883a 	mov	r8,zero
  807dd8:	0007883a 	mov	r3,zero
  807ddc:	01c00104 	movi	r7,4
  807de0:	4004923a 	slli	r2,r8,8
  807de4:	18c00044 	addi	r3,r3,1
  807de8:	1151883a 	add	r8,r2,r5
  807dec:	19fffc1e 	bne	r3,r7,807de0 <memchr+0x50>
  807df0:	02bfbff4 	movhi	r10,65279
  807df4:	52bfbfc4 	addi	r10,r10,-257
  807df8:	02602074 	movhi	r9,32897
  807dfc:	4a602004 	addi	r9,r9,-32640
  807e00:	02c000c4 	movi	r11,3
  807e04:	20800017 	ldw	r2,0(r4)
  807e08:	31bfff04 	addi	r6,r6,-4
  807e0c:	200f883a 	mov	r7,r4
  807e10:	1204f03a 	xor	r2,r2,r8
  807e14:	1287883a 	add	r3,r2,r10
  807e18:	1a46703a 	and	r3,r3,r9
  807e1c:	0084303a 	nor	r2,zero,r2
  807e20:	10c4703a 	and	r2,r2,r3
  807e24:	10000b26 	beq	r2,zero,807e54 <memchr+0xc4>
  807e28:	20800003 	ldbu	r2,0(r4)
  807e2c:	28800f26 	beq	r5,r2,807e6c <memchr+0xdc>
  807e30:	20800043 	ldbu	r2,1(r4)
  807e34:	21c00044 	addi	r7,r4,1
  807e38:	28800c26 	beq	r5,r2,807e6c <memchr+0xdc>
  807e3c:	20800083 	ldbu	r2,2(r4)
  807e40:	21c00084 	addi	r7,r4,2
  807e44:	28800926 	beq	r5,r2,807e6c <memchr+0xdc>
  807e48:	208000c3 	ldbu	r2,3(r4)
  807e4c:	21c000c4 	addi	r7,r4,3
  807e50:	28800626 	beq	r5,r2,807e6c <memchr+0xdc>
  807e54:	21000104 	addi	r4,r4,4
  807e58:	59bfea36 	bltu	r11,r6,807e04 <memchr+0x74>
  807e5c:	2007883a 	mov	r3,r4
  807e60:	003fd106 	br	807da8 <memchr+0x18>
  807e64:	0005883a 	mov	r2,zero
  807e68:	f800283a 	ret
  807e6c:	3805883a 	mov	r2,r7
  807e70:	f800283a 	ret

00807e74 <_Bfree>:
  807e74:	28000826 	beq	r5,zero,807e98 <_Bfree+0x24>
  807e78:	28800117 	ldw	r2,4(r5)
  807e7c:	21001317 	ldw	r4,76(r4)
  807e80:	1085883a 	add	r2,r2,r2
  807e84:	1085883a 	add	r2,r2,r2
  807e88:	1105883a 	add	r2,r2,r4
  807e8c:	10c00017 	ldw	r3,0(r2)
  807e90:	28c00015 	stw	r3,0(r5)
  807e94:	11400015 	stw	r5,0(r2)
  807e98:	f800283a 	ret

00807e9c <__hi0bits>:
  807e9c:	20bfffec 	andhi	r2,r4,65535
  807ea0:	10001426 	beq	r2,zero,807ef4 <__hi0bits+0x58>
  807ea4:	0007883a 	mov	r3,zero
  807ea8:	20bfc02c 	andhi	r2,r4,65280
  807eac:	1000021e 	bne	r2,zero,807eb8 <__hi0bits+0x1c>
  807eb0:	2008923a 	slli	r4,r4,8
  807eb4:	18c00204 	addi	r3,r3,8
  807eb8:	20bc002c 	andhi	r2,r4,61440
  807ebc:	1000021e 	bne	r2,zero,807ec8 <__hi0bits+0x2c>
  807ec0:	2008913a 	slli	r4,r4,4
  807ec4:	18c00104 	addi	r3,r3,4
  807ec8:	20b0002c 	andhi	r2,r4,49152
  807ecc:	1000031e 	bne	r2,zero,807edc <__hi0bits+0x40>
  807ed0:	2105883a 	add	r2,r4,r4
  807ed4:	18c00084 	addi	r3,r3,2
  807ed8:	1089883a 	add	r4,r2,r2
  807edc:	20000316 	blt	r4,zero,807eec <__hi0bits+0x50>
  807ee0:	2090002c 	andhi	r2,r4,16384
  807ee4:	10000626 	beq	r2,zero,807f00 <__hi0bits+0x64>
  807ee8:	18c00044 	addi	r3,r3,1
  807eec:	1805883a 	mov	r2,r3
  807ef0:	f800283a 	ret
  807ef4:	2008943a 	slli	r4,r4,16
  807ef8:	00c00404 	movi	r3,16
  807efc:	003fea06 	br	807ea8 <__hi0bits+0xc>
  807f00:	00c00804 	movi	r3,32
  807f04:	1805883a 	mov	r2,r3
  807f08:	f800283a 	ret

00807f0c <__lo0bits>:
  807f0c:	20c00017 	ldw	r3,0(r4)
  807f10:	188001cc 	andi	r2,r3,7
  807f14:	10000a26 	beq	r2,zero,807f40 <__lo0bits+0x34>
  807f18:	1880004c 	andi	r2,r3,1
  807f1c:	1005003a 	cmpeq	r2,r2,zero
  807f20:	10002126 	beq	r2,zero,807fa8 <__lo0bits+0x9c>
  807f24:	1880008c 	andi	r2,r3,2
  807f28:	1000251e 	bne	r2,zero,807fc0 <__lo0bits+0xb4>
  807f2c:	1804d0ba 	srli	r2,r3,2
  807f30:	01400084 	movi	r5,2
  807f34:	20800015 	stw	r2,0(r4)
  807f38:	2805883a 	mov	r2,r5
  807f3c:	f800283a 	ret
  807f40:	18bfffcc 	andi	r2,r3,65535
  807f44:	10001526 	beq	r2,zero,807f9c <__lo0bits+0x90>
  807f48:	000b883a 	mov	r5,zero
  807f4c:	18803fcc 	andi	r2,r3,255
  807f50:	1000021e 	bne	r2,zero,807f5c <__lo0bits+0x50>
  807f54:	1806d23a 	srli	r3,r3,8
  807f58:	29400204 	addi	r5,r5,8
  807f5c:	188003cc 	andi	r2,r3,15
  807f60:	1000021e 	bne	r2,zero,807f6c <__lo0bits+0x60>
  807f64:	1806d13a 	srli	r3,r3,4
  807f68:	29400104 	addi	r5,r5,4
  807f6c:	188000cc 	andi	r2,r3,3
  807f70:	1000021e 	bne	r2,zero,807f7c <__lo0bits+0x70>
  807f74:	1806d0ba 	srli	r3,r3,2
  807f78:	29400084 	addi	r5,r5,2
  807f7c:	1880004c 	andi	r2,r3,1
  807f80:	1000031e 	bne	r2,zero,807f90 <__lo0bits+0x84>
  807f84:	1806d07a 	srli	r3,r3,1
  807f88:	18000a26 	beq	r3,zero,807fb4 <__lo0bits+0xa8>
  807f8c:	29400044 	addi	r5,r5,1
  807f90:	2805883a 	mov	r2,r5
  807f94:	20c00015 	stw	r3,0(r4)
  807f98:	f800283a 	ret
  807f9c:	1806d43a 	srli	r3,r3,16
  807fa0:	01400404 	movi	r5,16
  807fa4:	003fe906 	br	807f4c <__lo0bits+0x40>
  807fa8:	000b883a 	mov	r5,zero
  807fac:	2805883a 	mov	r2,r5
  807fb0:	f800283a 	ret
  807fb4:	01400804 	movi	r5,32
  807fb8:	2805883a 	mov	r2,r5
  807fbc:	f800283a 	ret
  807fc0:	1804d07a 	srli	r2,r3,1
  807fc4:	01400044 	movi	r5,1
  807fc8:	20800015 	stw	r2,0(r4)
  807fcc:	003fda06 	br	807f38 <__lo0bits+0x2c>

00807fd0 <__mcmp>:
  807fd0:	20800417 	ldw	r2,16(r4)
  807fd4:	28c00417 	ldw	r3,16(r5)
  807fd8:	10cfc83a 	sub	r7,r2,r3
  807fdc:	38000c1e 	bne	r7,zero,808010 <__mcmp+0x40>
  807fe0:	18c5883a 	add	r2,r3,r3
  807fe4:	1085883a 	add	r2,r2,r2
  807fe8:	10c00504 	addi	r3,r2,20
  807fec:	21000504 	addi	r4,r4,20
  807ff0:	28cb883a 	add	r5,r5,r3
  807ff4:	2085883a 	add	r2,r4,r2
  807ff8:	10bfff04 	addi	r2,r2,-4
  807ffc:	297fff04 	addi	r5,r5,-4
  808000:	11800017 	ldw	r6,0(r2)
  808004:	28c00017 	ldw	r3,0(r5)
  808008:	30c0031e 	bne	r6,r3,808018 <__mcmp+0x48>
  80800c:	20bffa36 	bltu	r4,r2,807ff8 <__mcmp+0x28>
  808010:	3805883a 	mov	r2,r7
  808014:	f800283a 	ret
  808018:	30c00336 	bltu	r6,r3,808028 <__mcmp+0x58>
  80801c:	01c00044 	movi	r7,1
  808020:	3805883a 	mov	r2,r7
  808024:	f800283a 	ret
  808028:	01ffffc4 	movi	r7,-1
  80802c:	003ff806 	br	808010 <__mcmp+0x40>

00808030 <__ulp>:
  808030:	295ffc2c 	andhi	r5,r5,32752
  808034:	013f3034 	movhi	r4,64704
  808038:	290b883a 	add	r5,r5,r4
  80803c:	0145c83a 	sub	r2,zero,r5
  808040:	1007d53a 	srai	r3,r2,20
  808044:	000d883a 	mov	r6,zero
  808048:	0140040e 	bge	zero,r5,80805c <__ulp+0x2c>
  80804c:	280f883a 	mov	r7,r5
  808050:	3807883a 	mov	r3,r7
  808054:	3005883a 	mov	r2,r6
  808058:	f800283a 	ret
  80805c:	008004c4 	movi	r2,19
  808060:	193ffb04 	addi	r4,r3,-20
  808064:	10c00c0e 	bge	r2,r3,808098 <__ulp+0x68>
  808068:	008007c4 	movi	r2,31
  80806c:	1107c83a 	sub	r3,r2,r4
  808070:	00800784 	movi	r2,30
  808074:	01400044 	movi	r5,1
  808078:	11000216 	blt	r2,r4,808084 <__ulp+0x54>
  80807c:	00800044 	movi	r2,1
  808080:	10ca983a 	sll	r5,r2,r3
  808084:	000f883a 	mov	r7,zero
  808088:	280d883a 	mov	r6,r5
  80808c:	3807883a 	mov	r3,r7
  808090:	3005883a 	mov	r2,r6
  808094:	f800283a 	ret
  808098:	00800234 	movhi	r2,8
  80809c:	10cfd83a 	sra	r7,r2,r3
  8080a0:	000d883a 	mov	r6,zero
  8080a4:	3005883a 	mov	r2,r6
  8080a8:	3807883a 	mov	r3,r7
  8080ac:	f800283a 	ret

008080b0 <__b2d>:
  8080b0:	20800417 	ldw	r2,16(r4)
  8080b4:	defff904 	addi	sp,sp,-28
  8080b8:	dd000415 	stw	r20,16(sp)
  8080bc:	1085883a 	add	r2,r2,r2
  8080c0:	25000504 	addi	r20,r4,20
  8080c4:	1085883a 	add	r2,r2,r2
  8080c8:	dc000015 	stw	r16,0(sp)
  8080cc:	a0a1883a 	add	r16,r20,r2
  8080d0:	dd400515 	stw	r21,20(sp)
  8080d4:	857fff17 	ldw	r21,-4(r16)
  8080d8:	dc400115 	stw	r17,4(sp)
  8080dc:	dfc00615 	stw	ra,24(sp)
  8080e0:	a809883a 	mov	r4,r21
  8080e4:	2823883a 	mov	r17,r5
  8080e8:	dcc00315 	stw	r19,12(sp)
  8080ec:	dc800215 	stw	r18,8(sp)
  8080f0:	0807e9c0 	call	807e9c <__hi0bits>
  8080f4:	100b883a 	mov	r5,r2
  8080f8:	00800804 	movi	r2,32
  8080fc:	1145c83a 	sub	r2,r2,r5
  808100:	88800015 	stw	r2,0(r17)
  808104:	00800284 	movi	r2,10
  808108:	80ffff04 	addi	r3,r16,-4
  80810c:	11401416 	blt	r2,r5,808160 <__b2d+0xb0>
  808110:	008002c4 	movi	r2,11
  808114:	1149c83a 	sub	r4,r2,r5
  808118:	a0c02736 	bltu	r20,r3,8081b8 <__b2d+0x108>
  80811c:	000d883a 	mov	r6,zero
  808120:	28800544 	addi	r2,r5,21
  808124:	a906d83a 	srl	r3,r21,r4
  808128:	a884983a 	sll	r2,r21,r2
  80812c:	1ccffc34 	orhi	r19,r3,16368
  808130:	11a4b03a 	or	r18,r2,r6
  808134:	9005883a 	mov	r2,r18
  808138:	9807883a 	mov	r3,r19
  80813c:	dfc00617 	ldw	ra,24(sp)
  808140:	dd400517 	ldw	r21,20(sp)
  808144:	dd000417 	ldw	r20,16(sp)
  808148:	dcc00317 	ldw	r19,12(sp)
  80814c:	dc800217 	ldw	r18,8(sp)
  808150:	dc400117 	ldw	r17,4(sp)
  808154:	dc000017 	ldw	r16,0(sp)
  808158:	dec00704 	addi	sp,sp,28
  80815c:	f800283a 	ret
  808160:	a0c00e36 	bltu	r20,r3,80819c <__b2d+0xec>
  808164:	293ffd44 	addi	r4,r5,-11
  808168:	000d883a 	mov	r6,zero
  80816c:	20000f26 	beq	r4,zero,8081ac <__b2d+0xfc>
  808170:	00800804 	movi	r2,32
  808174:	110bc83a 	sub	r5,r2,r4
  808178:	a0c01236 	bltu	r20,r3,8081c4 <__b2d+0x114>
  80817c:	000f883a 	mov	r7,zero
  808180:	a904983a 	sll	r2,r21,r4
  808184:	3146d83a 	srl	r3,r6,r5
  808188:	3108983a 	sll	r4,r6,r4
  80818c:	108ffc34 	orhi	r2,r2,16368
  808190:	18a6b03a 	or	r19,r3,r2
  808194:	3924b03a 	or	r18,r7,r4
  808198:	003fe606 	br	808134 <__b2d+0x84>
  80819c:	293ffd44 	addi	r4,r5,-11
  8081a0:	81bffe17 	ldw	r6,-8(r16)
  8081a4:	80fffe04 	addi	r3,r16,-8
  8081a8:	203ff11e 	bne	r4,zero,808170 <__b2d+0xc0>
  8081ac:	accffc34 	orhi	r19,r21,16368
  8081b0:	3025883a 	mov	r18,r6
  8081b4:	003fdf06 	br	808134 <__b2d+0x84>
  8081b8:	18bfff17 	ldw	r2,-4(r3)
  8081bc:	110cd83a 	srl	r6,r2,r4
  8081c0:	003fd706 	br	808120 <__b2d+0x70>
  8081c4:	18bfff17 	ldw	r2,-4(r3)
  8081c8:	114ed83a 	srl	r7,r2,r5
  8081cc:	003fec06 	br	808180 <__b2d+0xd0>

008081d0 <__ratio>:
  8081d0:	defff904 	addi	sp,sp,-28
  8081d4:	dc400215 	stw	r17,8(sp)
  8081d8:	2823883a 	mov	r17,r5
  8081dc:	d80b883a 	mov	r5,sp
  8081e0:	dfc00615 	stw	ra,24(sp)
  8081e4:	dd000515 	stw	r20,20(sp)
  8081e8:	dcc00415 	stw	r19,16(sp)
  8081ec:	dc800315 	stw	r18,12(sp)
  8081f0:	2025883a 	mov	r18,r4
  8081f4:	08080b00 	call	8080b0 <__b2d>
  8081f8:	8809883a 	mov	r4,r17
  8081fc:	d9400104 	addi	r5,sp,4
  808200:	1027883a 	mov	r19,r2
  808204:	1829883a 	mov	r20,r3
  808208:	08080b00 	call	8080b0 <__b2d>
  80820c:	89000417 	ldw	r4,16(r17)
  808210:	91c00417 	ldw	r7,16(r18)
  808214:	d9800117 	ldw	r6,4(sp)
  808218:	180b883a 	mov	r5,r3
  80821c:	390fc83a 	sub	r7,r7,r4
  808220:	1009883a 	mov	r4,r2
  808224:	d8800017 	ldw	r2,0(sp)
  808228:	380e917a 	slli	r7,r7,5
  80822c:	2011883a 	mov	r8,r4
  808230:	1185c83a 	sub	r2,r2,r6
  808234:	11c5883a 	add	r2,r2,r7
  808238:	1006953a 	slli	r3,r2,20
  80823c:	2813883a 	mov	r9,r5
  808240:	00800d0e 	bge	zero,r2,808278 <__ratio+0xa8>
  808244:	1d29883a 	add	r20,r3,r20
  808248:	a00b883a 	mov	r5,r20
  80824c:	480f883a 	mov	r7,r9
  808250:	9809883a 	mov	r4,r19
  808254:	400d883a 	mov	r6,r8
  808258:	080ba800 	call	80ba80 <__divdf3>
  80825c:	dfc00617 	ldw	ra,24(sp)
  808260:	dd000517 	ldw	r20,20(sp)
  808264:	dcc00417 	ldw	r19,16(sp)
  808268:	dc800317 	ldw	r18,12(sp)
  80826c:	dc400217 	ldw	r17,8(sp)
  808270:	dec00704 	addi	sp,sp,28
  808274:	f800283a 	ret
  808278:	28d3c83a 	sub	r9,r5,r3
  80827c:	003ff206 	br	808248 <__ratio+0x78>

00808280 <_mprec_log10>:
  808280:	defffe04 	addi	sp,sp,-8
  808284:	008005c4 	movi	r2,23
  808288:	dc000015 	stw	r16,0(sp)
  80828c:	dfc00115 	stw	ra,4(sp)
  808290:	2021883a 	mov	r16,r4
  808294:	11000c16 	blt	r2,r4,8082c8 <_mprec_log10+0x48>
  808298:	200490fa 	slli	r2,r4,3
  80829c:	00c020b4 	movhi	r3,130
  8082a0:	18e1aa04 	addi	r3,r3,-31064
  8082a4:	10c5883a 	add	r2,r2,r3
  8082a8:	12400117 	ldw	r9,4(r2)
  8082ac:	12000017 	ldw	r8,0(r2)
  8082b0:	4807883a 	mov	r3,r9
  8082b4:	4005883a 	mov	r2,r8
  8082b8:	dfc00117 	ldw	ra,4(sp)
  8082bc:	dc000017 	ldw	r16,0(sp)
  8082c0:	dec00204 	addi	sp,sp,8
  8082c4:	f800283a 	ret
  8082c8:	0011883a 	mov	r8,zero
  8082cc:	024ffc34 	movhi	r9,16368
  8082d0:	0005883a 	mov	r2,zero
  8082d4:	00d00934 	movhi	r3,16420
  8082d8:	480b883a 	mov	r5,r9
  8082dc:	4009883a 	mov	r4,r8
  8082e0:	180f883a 	mov	r7,r3
  8082e4:	100d883a 	mov	r6,r2
  8082e8:	080b6bc0 	call	80b6bc <__muldf3>
  8082ec:	843fffc4 	addi	r16,r16,-1
  8082f0:	1011883a 	mov	r8,r2
  8082f4:	1813883a 	mov	r9,r3
  8082f8:	803ff51e 	bne	r16,zero,8082d0 <_mprec_log10+0x50>
  8082fc:	4005883a 	mov	r2,r8
  808300:	4807883a 	mov	r3,r9
  808304:	dfc00117 	ldw	ra,4(sp)
  808308:	dc000017 	ldw	r16,0(sp)
  80830c:	dec00204 	addi	sp,sp,8
  808310:	f800283a 	ret

00808314 <__copybits>:
  808314:	297fffc4 	addi	r5,r5,-1
  808318:	30800417 	ldw	r2,16(r6)
  80831c:	280bd17a 	srai	r5,r5,5
  808320:	31800504 	addi	r6,r6,20
  808324:	1085883a 	add	r2,r2,r2
  808328:	294b883a 	add	r5,r5,r5
  80832c:	294b883a 	add	r5,r5,r5
  808330:	1085883a 	add	r2,r2,r2
  808334:	290b883a 	add	r5,r5,r4
  808338:	3087883a 	add	r3,r6,r2
  80833c:	29400104 	addi	r5,r5,4
  808340:	30c0052e 	bgeu	r6,r3,808358 <__copybits+0x44>
  808344:	30800017 	ldw	r2,0(r6)
  808348:	31800104 	addi	r6,r6,4
  80834c:	20800015 	stw	r2,0(r4)
  808350:	21000104 	addi	r4,r4,4
  808354:	30fffb36 	bltu	r6,r3,808344 <__copybits+0x30>
  808358:	2140032e 	bgeu	r4,r5,808368 <__copybits+0x54>
  80835c:	20000015 	stw	zero,0(r4)
  808360:	21000104 	addi	r4,r4,4
  808364:	217ffd36 	bltu	r4,r5,80835c <__copybits+0x48>
  808368:	f800283a 	ret

0080836c <__any_on>:
  80836c:	20800417 	ldw	r2,16(r4)
  808370:	2807d17a 	srai	r3,r5,5
  808374:	21000504 	addi	r4,r4,20
  808378:	10c00d0e 	bge	r2,r3,8083b0 <__any_on+0x44>
  80837c:	1085883a 	add	r2,r2,r2
  808380:	1085883a 	add	r2,r2,r2
  808384:	208d883a 	add	r6,r4,r2
  808388:	2180182e 	bgeu	r4,r6,8083ec <__any_on+0x80>
  80838c:	30bfff17 	ldw	r2,-4(r6)
  808390:	30ffff04 	addi	r3,r6,-4
  808394:	1000041e 	bne	r2,zero,8083a8 <__any_on+0x3c>
  808398:	20c0142e 	bgeu	r4,r3,8083ec <__any_on+0x80>
  80839c:	18ffff04 	addi	r3,r3,-4
  8083a0:	18800017 	ldw	r2,0(r3)
  8083a4:	103ffc26 	beq	r2,zero,808398 <__any_on+0x2c>
  8083a8:	00800044 	movi	r2,1
  8083ac:	f800283a 	ret
  8083b0:	18800a0e 	bge	r3,r2,8083dc <__any_on+0x70>
  8083b4:	294007cc 	andi	r5,r5,31
  8083b8:	28000826 	beq	r5,zero,8083dc <__any_on+0x70>
  8083bc:	18c5883a 	add	r2,r3,r3
  8083c0:	1085883a 	add	r2,r2,r2
  8083c4:	208d883a 	add	r6,r4,r2
  8083c8:	30c00017 	ldw	r3,0(r6)
  8083cc:	1944d83a 	srl	r2,r3,r5
  8083d0:	1144983a 	sll	r2,r2,r5
  8083d4:	18bff41e 	bne	r3,r2,8083a8 <__any_on+0x3c>
  8083d8:	003feb06 	br	808388 <__any_on+0x1c>
  8083dc:	18c5883a 	add	r2,r3,r3
  8083e0:	1085883a 	add	r2,r2,r2
  8083e4:	208d883a 	add	r6,r4,r2
  8083e8:	003fe706 	br	808388 <__any_on+0x1c>
  8083ec:	0005883a 	mov	r2,zero
  8083f0:	f800283a 	ret

008083f4 <_Balloc>:
  8083f4:	20c01317 	ldw	r3,76(r4)
  8083f8:	defffb04 	addi	sp,sp,-20
  8083fc:	dcc00315 	stw	r19,12(sp)
  808400:	dc800215 	stw	r18,8(sp)
  808404:	dfc00415 	stw	ra,16(sp)
  808408:	2825883a 	mov	r18,r5
  80840c:	dc400115 	stw	r17,4(sp)
  808410:	dc000015 	stw	r16,0(sp)
  808414:	2027883a 	mov	r19,r4
  808418:	01800404 	movi	r6,16
  80841c:	01400104 	movi	r5,4
  808420:	18001726 	beq	r3,zero,808480 <_Balloc+0x8c>
  808424:	01400044 	movi	r5,1
  808428:	9485883a 	add	r2,r18,r18
  80842c:	2ca2983a 	sll	r17,r5,r18
  808430:	1085883a 	add	r2,r2,r2
  808434:	10c7883a 	add	r3,r2,r3
  808438:	1c000017 	ldw	r16,0(r3)
  80843c:	8c4d883a 	add	r6,r17,r17
  808440:	318d883a 	add	r6,r6,r6
  808444:	9809883a 	mov	r4,r19
  808448:	31800504 	addi	r6,r6,20
  80844c:	80001226 	beq	r16,zero,808498 <_Balloc+0xa4>
  808450:	80800017 	ldw	r2,0(r16)
  808454:	18800015 	stw	r2,0(r3)
  808458:	80000415 	stw	zero,16(r16)
  80845c:	80000315 	stw	zero,12(r16)
  808460:	8005883a 	mov	r2,r16
  808464:	dfc00417 	ldw	ra,16(sp)
  808468:	dcc00317 	ldw	r19,12(sp)
  80846c:	dc800217 	ldw	r18,8(sp)
  808470:	dc400117 	ldw	r17,4(sp)
  808474:	dc000017 	ldw	r16,0(sp)
  808478:	dec00504 	addi	sp,sp,20
  80847c:	f800283a 	ret
  808480:	080a5c00 	call	80a5c0 <_calloc_r>
  808484:	1007883a 	mov	r3,r2
  808488:	0021883a 	mov	r16,zero
  80848c:	98801315 	stw	r2,76(r19)
  808490:	103fe41e 	bne	r2,zero,808424 <_Balloc+0x30>
  808494:	003ff206 	br	808460 <_Balloc+0x6c>
  808498:	080a5c00 	call	80a5c0 <_calloc_r>
  80849c:	103ff026 	beq	r2,zero,808460 <_Balloc+0x6c>
  8084a0:	1021883a 	mov	r16,r2
  8084a4:	14800115 	stw	r18,4(r2)
  8084a8:	14400215 	stw	r17,8(r2)
  8084ac:	003fea06 	br	808458 <_Balloc+0x64>

008084b0 <__d2b>:
  8084b0:	defff504 	addi	sp,sp,-44
  8084b4:	dcc00515 	stw	r19,20(sp)
  8084b8:	04c00044 	movi	r19,1
  8084bc:	dc000215 	stw	r16,8(sp)
  8084c0:	2821883a 	mov	r16,r5
  8084c4:	980b883a 	mov	r5,r19
  8084c8:	ddc00915 	stw	r23,36(sp)
  8084cc:	dd800815 	stw	r22,32(sp)
  8084d0:	dd400715 	stw	r21,28(sp)
  8084d4:	dd000615 	stw	r20,24(sp)
  8084d8:	dc800415 	stw	r18,16(sp)
  8084dc:	dc400315 	stw	r17,12(sp)
  8084e0:	dfc00a15 	stw	ra,40(sp)
  8084e4:	3023883a 	mov	r17,r6
  8084e8:	382d883a 	mov	r22,r7
  8084ec:	ddc00b17 	ldw	r23,44(sp)
  8084f0:	08083f40 	call	8083f4 <_Balloc>
  8084f4:	1025883a 	mov	r18,r2
  8084f8:	00a00034 	movhi	r2,32768
  8084fc:	10bfffc4 	addi	r2,r2,-1
  808500:	8888703a 	and	r4,r17,r2
  808504:	202ad53a 	srli	r21,r4,20
  808508:	00800434 	movhi	r2,16
  80850c:	10bfffc4 	addi	r2,r2,-1
  808510:	8886703a 	and	r3,r17,r2
  808514:	a829003a 	cmpeq	r20,r21,zero
  808518:	800b883a 	mov	r5,r16
  80851c:	d8c00115 	stw	r3,4(sp)
  808520:	94000504 	addi	r16,r18,20
  808524:	a000021e 	bne	r20,zero,808530 <__d2b+0x80>
  808528:	18c00434 	orhi	r3,r3,16
  80852c:	d8c00115 	stw	r3,4(sp)
  808530:	28002726 	beq	r5,zero,8085d0 <__d2b+0x120>
  808534:	d809883a 	mov	r4,sp
  808538:	d9400015 	stw	r5,0(sp)
  80853c:	0807f0c0 	call	807f0c <__lo0bits>
  808540:	100d883a 	mov	r6,r2
  808544:	10003526 	beq	r2,zero,80861c <__d2b+0x16c>
  808548:	d8c00117 	ldw	r3,4(sp)
  80854c:	00800804 	movi	r2,32
  808550:	1185c83a 	sub	r2,r2,r6
  808554:	d9000017 	ldw	r4,0(sp)
  808558:	1886983a 	sll	r3,r3,r2
  80855c:	1906b03a 	or	r3,r3,r4
  808560:	90c00515 	stw	r3,20(r18)
  808564:	d8c00117 	ldw	r3,4(sp)
  808568:	1986d83a 	srl	r3,r3,r6
  80856c:	d8c00115 	stw	r3,4(sp)
  808570:	180b003a 	cmpeq	r5,r3,zero
  808574:	00800084 	movi	r2,2
  808578:	114bc83a 	sub	r5,r2,r5
  80857c:	80c00115 	stw	r3,4(r16)
  808580:	91400415 	stw	r5,16(r18)
  808584:	a0001a1e 	bne	r20,zero,8085f0 <__d2b+0x140>
  808588:	3545883a 	add	r2,r6,r21
  80858c:	10bef344 	addi	r2,r2,-1075
  808590:	00c00d44 	movi	r3,53
  808594:	b0800015 	stw	r2,0(r22)
  808598:	1987c83a 	sub	r3,r3,r6
  80859c:	b8c00015 	stw	r3,0(r23)
  8085a0:	9005883a 	mov	r2,r18
  8085a4:	dfc00a17 	ldw	ra,40(sp)
  8085a8:	ddc00917 	ldw	r23,36(sp)
  8085ac:	dd800817 	ldw	r22,32(sp)
  8085b0:	dd400717 	ldw	r21,28(sp)
  8085b4:	dd000617 	ldw	r20,24(sp)
  8085b8:	dcc00517 	ldw	r19,20(sp)
  8085bc:	dc800417 	ldw	r18,16(sp)
  8085c0:	dc400317 	ldw	r17,12(sp)
  8085c4:	dc000217 	ldw	r16,8(sp)
  8085c8:	dec00b04 	addi	sp,sp,44
  8085cc:	f800283a 	ret
  8085d0:	d9000104 	addi	r4,sp,4
  8085d4:	0807f0c0 	call	807f0c <__lo0bits>
  8085d8:	11800804 	addi	r6,r2,32
  8085dc:	d8800117 	ldw	r2,4(sp)
  8085e0:	94c00415 	stw	r19,16(r18)
  8085e4:	980b883a 	mov	r5,r19
  8085e8:	90800515 	stw	r2,20(r18)
  8085ec:	a03fe626 	beq	r20,zero,808588 <__d2b+0xd8>
  8085f0:	2945883a 	add	r2,r5,r5
  8085f4:	1085883a 	add	r2,r2,r2
  8085f8:	1405883a 	add	r2,r2,r16
  8085fc:	113fff17 	ldw	r4,-4(r2)
  808600:	30fef384 	addi	r3,r6,-1074
  808604:	2820917a 	slli	r16,r5,5
  808608:	b0c00015 	stw	r3,0(r22)
  80860c:	0807e9c0 	call	807e9c <__hi0bits>
  808610:	80a1c83a 	sub	r16,r16,r2
  808614:	bc000015 	stw	r16,0(r23)
  808618:	003fe106 	br	8085a0 <__d2b+0xf0>
  80861c:	d8800017 	ldw	r2,0(sp)
  808620:	90800515 	stw	r2,20(r18)
  808624:	d8c00117 	ldw	r3,4(sp)
  808628:	003fd106 	br	808570 <__d2b+0xc0>

0080862c <__mdiff>:
  80862c:	defffb04 	addi	sp,sp,-20
  808630:	dc000015 	stw	r16,0(sp)
  808634:	2821883a 	mov	r16,r5
  808638:	dc800215 	stw	r18,8(sp)
  80863c:	300b883a 	mov	r5,r6
  808640:	2025883a 	mov	r18,r4
  808644:	8009883a 	mov	r4,r16
  808648:	dc400115 	stw	r17,4(sp)
  80864c:	dfc00415 	stw	ra,16(sp)
  808650:	dcc00315 	stw	r19,12(sp)
  808654:	3023883a 	mov	r17,r6
  808658:	0807fd00 	call	807fd0 <__mcmp>
  80865c:	10004226 	beq	r2,zero,808768 <__mdiff+0x13c>
  808660:	10005016 	blt	r2,zero,8087a4 <__mdiff+0x178>
  808664:	0027883a 	mov	r19,zero
  808668:	81400117 	ldw	r5,4(r16)
  80866c:	9009883a 	mov	r4,r18
  808670:	08083f40 	call	8083f4 <_Balloc>
  808674:	1019883a 	mov	r12,r2
  808678:	82800417 	ldw	r10,16(r16)
  80867c:	88800417 	ldw	r2,16(r17)
  808680:	81800504 	addi	r6,r16,20
  808684:	5287883a 	add	r3,r10,r10
  808688:	1085883a 	add	r2,r2,r2
  80868c:	18c7883a 	add	r3,r3,r3
  808690:	1085883a 	add	r2,r2,r2
  808694:	8a000504 	addi	r8,r17,20
  808698:	64c00315 	stw	r19,12(r12)
  80869c:	30db883a 	add	r13,r6,r3
  8086a0:	4097883a 	add	r11,r8,r2
  8086a4:	61c00504 	addi	r7,r12,20
  8086a8:	0013883a 	mov	r9,zero
  8086ac:	31000017 	ldw	r4,0(r6)
  8086b0:	41400017 	ldw	r5,0(r8)
  8086b4:	42000104 	addi	r8,r8,4
  8086b8:	20bfffcc 	andi	r2,r4,65535
  8086bc:	28ffffcc 	andi	r3,r5,65535
  8086c0:	10c5c83a 	sub	r2,r2,r3
  8086c4:	1245883a 	add	r2,r2,r9
  8086c8:	2008d43a 	srli	r4,r4,16
  8086cc:	280ad43a 	srli	r5,r5,16
  8086d0:	1007d43a 	srai	r3,r2,16
  8086d4:	3880000d 	sth	r2,0(r7)
  8086d8:	2149c83a 	sub	r4,r4,r5
  8086dc:	20c9883a 	add	r4,r4,r3
  8086e0:	3900008d 	sth	r4,2(r7)
  8086e4:	31800104 	addi	r6,r6,4
  8086e8:	39c00104 	addi	r7,r7,4
  8086ec:	2013d43a 	srai	r9,r4,16
  8086f0:	42ffee36 	bltu	r8,r11,8086ac <__mdiff+0x80>
  8086f4:	33400c2e 	bgeu	r6,r13,808728 <__mdiff+0xfc>
  8086f8:	30800017 	ldw	r2,0(r6)
  8086fc:	31800104 	addi	r6,r6,4
  808700:	10ffffcc 	andi	r3,r2,65535
  808704:	1a47883a 	add	r3,r3,r9
  808708:	1004d43a 	srli	r2,r2,16
  80870c:	1809d43a 	srai	r4,r3,16
  808710:	38c0000d 	sth	r3,0(r7)
  808714:	1105883a 	add	r2,r2,r4
  808718:	3880008d 	sth	r2,2(r7)
  80871c:	1013d43a 	srai	r9,r2,16
  808720:	39c00104 	addi	r7,r7,4
  808724:	337ff436 	bltu	r6,r13,8086f8 <__mdiff+0xcc>
  808728:	38bfff17 	ldw	r2,-4(r7)
  80872c:	38ffff04 	addi	r3,r7,-4
  808730:	1000041e 	bne	r2,zero,808744 <__mdiff+0x118>
  808734:	18ffff04 	addi	r3,r3,-4
  808738:	18800017 	ldw	r2,0(r3)
  80873c:	52bfffc4 	addi	r10,r10,-1
  808740:	103ffc26 	beq	r2,zero,808734 <__mdiff+0x108>
  808744:	6005883a 	mov	r2,r12
  808748:	62800415 	stw	r10,16(r12)
  80874c:	dfc00417 	ldw	ra,16(sp)
  808750:	dcc00317 	ldw	r19,12(sp)
  808754:	dc800217 	ldw	r18,8(sp)
  808758:	dc400117 	ldw	r17,4(sp)
  80875c:	dc000017 	ldw	r16,0(sp)
  808760:	dec00504 	addi	sp,sp,20
  808764:	f800283a 	ret
  808768:	9009883a 	mov	r4,r18
  80876c:	000b883a 	mov	r5,zero
  808770:	08083f40 	call	8083f4 <_Balloc>
  808774:	1019883a 	mov	r12,r2
  808778:	00800044 	movi	r2,1
  80877c:	60800415 	stw	r2,16(r12)
  808780:	6005883a 	mov	r2,r12
  808784:	60000515 	stw	zero,20(r12)
  808788:	dfc00417 	ldw	ra,16(sp)
  80878c:	dcc00317 	ldw	r19,12(sp)
  808790:	dc800217 	ldw	r18,8(sp)
  808794:	dc400117 	ldw	r17,4(sp)
  808798:	dc000017 	ldw	r16,0(sp)
  80879c:	dec00504 	addi	sp,sp,20
  8087a0:	f800283a 	ret
  8087a4:	880d883a 	mov	r6,r17
  8087a8:	04c00044 	movi	r19,1
  8087ac:	8023883a 	mov	r17,r16
  8087b0:	3021883a 	mov	r16,r6
  8087b4:	003fac06 	br	808668 <__mdiff+0x3c>

008087b8 <__lshift>:
  8087b8:	defff904 	addi	sp,sp,-28
  8087bc:	28800417 	ldw	r2,16(r5)
  8087c0:	dc000015 	stw	r16,0(sp)
  8087c4:	3021d17a 	srai	r16,r6,5
  8087c8:	28c00217 	ldw	r3,8(r5)
  8087cc:	10800044 	addi	r2,r2,1
  8087d0:	dc400115 	stw	r17,4(sp)
  8087d4:	80a3883a 	add	r17,r16,r2
  8087d8:	dd400515 	stw	r21,20(sp)
  8087dc:	dd000415 	stw	r20,16(sp)
  8087e0:	dc800215 	stw	r18,8(sp)
  8087e4:	dfc00615 	stw	ra,24(sp)
  8087e8:	2825883a 	mov	r18,r5
  8087ec:	dcc00315 	stw	r19,12(sp)
  8087f0:	3029883a 	mov	r20,r6
  8087f4:	202b883a 	mov	r21,r4
  8087f8:	29400117 	ldw	r5,4(r5)
  8087fc:	1c40030e 	bge	r3,r17,80880c <__lshift+0x54>
  808800:	18c7883a 	add	r3,r3,r3
  808804:	29400044 	addi	r5,r5,1
  808808:	1c7ffd16 	blt	r3,r17,808800 <__lshift+0x48>
  80880c:	a809883a 	mov	r4,r21
  808810:	08083f40 	call	8083f4 <_Balloc>
  808814:	1027883a 	mov	r19,r2
  808818:	11400504 	addi	r5,r2,20
  80881c:	0400090e 	bge	zero,r16,808844 <__lshift+0x8c>
  808820:	2805883a 	mov	r2,r5
  808824:	0007883a 	mov	r3,zero
  808828:	18c00044 	addi	r3,r3,1
  80882c:	10000015 	stw	zero,0(r2)
  808830:	10800104 	addi	r2,r2,4
  808834:	80fffc1e 	bne	r16,r3,808828 <__lshift+0x70>
  808838:	8405883a 	add	r2,r16,r16
  80883c:	1085883a 	add	r2,r2,r2
  808840:	288b883a 	add	r5,r5,r2
  808844:	90800417 	ldw	r2,16(r18)
  808848:	91000504 	addi	r4,r18,20
  80884c:	a18007cc 	andi	r6,r20,31
  808850:	1085883a 	add	r2,r2,r2
  808854:	1085883a 	add	r2,r2,r2
  808858:	208f883a 	add	r7,r4,r2
  80885c:	30001e26 	beq	r6,zero,8088d8 <__lshift+0x120>
  808860:	00800804 	movi	r2,32
  808864:	1191c83a 	sub	r8,r2,r6
  808868:	0007883a 	mov	r3,zero
  80886c:	20800017 	ldw	r2,0(r4)
  808870:	1184983a 	sll	r2,r2,r6
  808874:	1884b03a 	or	r2,r3,r2
  808878:	28800015 	stw	r2,0(r5)
  80887c:	20c00017 	ldw	r3,0(r4)
  808880:	21000104 	addi	r4,r4,4
  808884:	29400104 	addi	r5,r5,4
  808888:	1a06d83a 	srl	r3,r3,r8
  80888c:	21fff736 	bltu	r4,r7,80886c <__lshift+0xb4>
  808890:	28c00015 	stw	r3,0(r5)
  808894:	18000126 	beq	r3,zero,80889c <__lshift+0xe4>
  808898:	8c400044 	addi	r17,r17,1
  80889c:	88bfffc4 	addi	r2,r17,-1
  8088a0:	98800415 	stw	r2,16(r19)
  8088a4:	a809883a 	mov	r4,r21
  8088a8:	900b883a 	mov	r5,r18
  8088ac:	0807e740 	call	807e74 <_Bfree>
  8088b0:	9805883a 	mov	r2,r19
  8088b4:	dfc00617 	ldw	ra,24(sp)
  8088b8:	dd400517 	ldw	r21,20(sp)
  8088bc:	dd000417 	ldw	r20,16(sp)
  8088c0:	dcc00317 	ldw	r19,12(sp)
  8088c4:	dc800217 	ldw	r18,8(sp)
  8088c8:	dc400117 	ldw	r17,4(sp)
  8088cc:	dc000017 	ldw	r16,0(sp)
  8088d0:	dec00704 	addi	sp,sp,28
  8088d4:	f800283a 	ret
  8088d8:	20800017 	ldw	r2,0(r4)
  8088dc:	21000104 	addi	r4,r4,4
  8088e0:	28800015 	stw	r2,0(r5)
  8088e4:	29400104 	addi	r5,r5,4
  8088e8:	21ffec2e 	bgeu	r4,r7,80889c <__lshift+0xe4>
  8088ec:	20800017 	ldw	r2,0(r4)
  8088f0:	21000104 	addi	r4,r4,4
  8088f4:	28800015 	stw	r2,0(r5)
  8088f8:	29400104 	addi	r5,r5,4
  8088fc:	21fff636 	bltu	r4,r7,8088d8 <__lshift+0x120>
  808900:	003fe606 	br	80889c <__lshift+0xe4>

00808904 <__multiply>:
  808904:	defff004 	addi	sp,sp,-64
  808908:	dc800815 	stw	r18,32(sp)
  80890c:	dc400715 	stw	r17,28(sp)
  808910:	2c800417 	ldw	r18,16(r5)
  808914:	34400417 	ldw	r17,16(r6)
  808918:	dcc00915 	stw	r19,36(sp)
  80891c:	dc000615 	stw	r16,24(sp)
  808920:	dfc00f15 	stw	ra,60(sp)
  808924:	df000e15 	stw	fp,56(sp)
  808928:	ddc00d15 	stw	r23,52(sp)
  80892c:	dd800c15 	stw	r22,48(sp)
  808930:	dd400b15 	stw	r21,44(sp)
  808934:	dd000a15 	stw	r20,40(sp)
  808938:	2821883a 	mov	r16,r5
  80893c:	3027883a 	mov	r19,r6
  808940:	9440040e 	bge	r18,r17,808954 <__multiply+0x50>
  808944:	8825883a 	mov	r18,r17
  808948:	2c400417 	ldw	r17,16(r5)
  80894c:	2827883a 	mov	r19,r5
  808950:	3021883a 	mov	r16,r6
  808954:	80800217 	ldw	r2,8(r16)
  808958:	9447883a 	add	r3,r18,r17
  80895c:	d8c00415 	stw	r3,16(sp)
  808960:	81400117 	ldw	r5,4(r16)
  808964:	10c0010e 	bge	r2,r3,80896c <__multiply+0x68>
  808968:	29400044 	addi	r5,r5,1
  80896c:	08083f40 	call	8083f4 <_Balloc>
  808970:	d8800515 	stw	r2,20(sp)
  808974:	d9000417 	ldw	r4,16(sp)
  808978:	d8c00517 	ldw	r3,20(sp)
  80897c:	2105883a 	add	r2,r4,r4
  808980:	1085883a 	add	r2,r2,r2
  808984:	19000504 	addi	r4,r3,20
  808988:	2085883a 	add	r2,r4,r2
  80898c:	d8800315 	stw	r2,12(sp)
  808990:	2080052e 	bgeu	r4,r2,8089a8 <__multiply+0xa4>
  808994:	2005883a 	mov	r2,r4
  808998:	d8c00317 	ldw	r3,12(sp)
  80899c:	10000015 	stw	zero,0(r2)
  8089a0:	10800104 	addi	r2,r2,4
  8089a4:	10fffc36 	bltu	r2,r3,808998 <__multiply+0x94>
  8089a8:	8c45883a 	add	r2,r17,r17
  8089ac:	9487883a 	add	r3,r18,r18
  8089b0:	9dc00504 	addi	r23,r19,20
  8089b4:	1085883a 	add	r2,r2,r2
  8089b8:	84000504 	addi	r16,r16,20
  8089bc:	18c7883a 	add	r3,r3,r3
  8089c0:	b885883a 	add	r2,r23,r2
  8089c4:	dc000015 	stw	r16,0(sp)
  8089c8:	d8800215 	stw	r2,8(sp)
  8089cc:	80f9883a 	add	fp,r16,r3
  8089d0:	b880432e 	bgeu	r23,r2,808ae0 <__multiply+0x1dc>
  8089d4:	d9000115 	stw	r4,4(sp)
  8089d8:	b9000017 	ldw	r4,0(r23)
  8089dc:	253fffcc 	andi	r20,r4,65535
  8089e0:	a0001a26 	beq	r20,zero,808a4c <__multiply+0x148>
  8089e4:	dcc00017 	ldw	r19,0(sp)
  8089e8:	dc800117 	ldw	r18,4(sp)
  8089ec:	002b883a 	mov	r21,zero
  8089f0:	9c400017 	ldw	r17,0(r19)
  8089f4:	94000017 	ldw	r16,0(r18)
  8089f8:	a009883a 	mov	r4,r20
  8089fc:	897fffcc 	andi	r5,r17,65535
  808a00:	08019440 	call	801944 <__mulsi3>
  808a04:	880ad43a 	srli	r5,r17,16
  808a08:	80ffffcc 	andi	r3,r16,65535
  808a0c:	a8c7883a 	add	r3,r21,r3
  808a10:	a009883a 	mov	r4,r20
  808a14:	10e3883a 	add	r17,r2,r3
  808a18:	8020d43a 	srli	r16,r16,16
  808a1c:	08019440 	call	801944 <__mulsi3>
  808a20:	8806d43a 	srli	r3,r17,16
  808a24:	1405883a 	add	r2,r2,r16
  808a28:	9cc00104 	addi	r19,r19,4
  808a2c:	1887883a 	add	r3,r3,r2
  808a30:	90c0008d 	sth	r3,2(r18)
  808a34:	9440000d 	sth	r17,0(r18)
  808a38:	182ad43a 	srli	r21,r3,16
  808a3c:	94800104 	addi	r18,r18,4
  808a40:	9f3feb36 	bltu	r19,fp,8089f0 <__multiply+0xec>
  808a44:	95400015 	stw	r21,0(r18)
  808a48:	b9000017 	ldw	r4,0(r23)
  808a4c:	202ad43a 	srli	r21,r4,16
  808a50:	a8001c26 	beq	r21,zero,808ac4 <__multiply+0x1c0>
  808a54:	d9000117 	ldw	r4,4(sp)
  808a58:	dd000017 	ldw	r20,0(sp)
  808a5c:	002d883a 	mov	r22,zero
  808a60:	24c00017 	ldw	r19,0(r4)
  808a64:	2025883a 	mov	r18,r4
  808a68:	9823883a 	mov	r17,r19
  808a6c:	a4000017 	ldw	r16,0(r20)
  808a70:	a809883a 	mov	r4,r21
  808a74:	a5000104 	addi	r20,r20,4
  808a78:	817fffcc 	andi	r5,r16,65535
  808a7c:	08019440 	call	801944 <__mulsi3>
  808a80:	8806d43a 	srli	r3,r17,16
  808a84:	800ad43a 	srli	r5,r16,16
  808a88:	94c0000d 	sth	r19,0(r18)
  808a8c:	b0c7883a 	add	r3,r22,r3
  808a90:	10e1883a 	add	r16,r2,r3
  808a94:	9400008d 	sth	r16,2(r18)
  808a98:	a809883a 	mov	r4,r21
  808a9c:	94800104 	addi	r18,r18,4
  808aa0:	08019440 	call	801944 <__mulsi3>
  808aa4:	94400017 	ldw	r17,0(r18)
  808aa8:	8020d43a 	srli	r16,r16,16
  808aac:	88ffffcc 	andi	r3,r17,65535
  808ab0:	10c5883a 	add	r2,r2,r3
  808ab4:	80a7883a 	add	r19,r16,r2
  808ab8:	982cd43a 	srli	r22,r19,16
  808abc:	a73feb36 	bltu	r20,fp,808a6c <__multiply+0x168>
  808ac0:	94c00015 	stw	r19,0(r18)
  808ac4:	d8800217 	ldw	r2,8(sp)
  808ac8:	bdc00104 	addi	r23,r23,4
  808acc:	b880042e 	bgeu	r23,r2,808ae0 <__multiply+0x1dc>
  808ad0:	d8c00117 	ldw	r3,4(sp)
  808ad4:	18c00104 	addi	r3,r3,4
  808ad8:	d8c00115 	stw	r3,4(sp)
  808adc:	003fbe06 	br	8089d8 <__multiply+0xd4>
  808ae0:	d9000417 	ldw	r4,16(sp)
  808ae4:	01000c0e 	bge	zero,r4,808b18 <__multiply+0x214>
  808ae8:	d8c00317 	ldw	r3,12(sp)
  808aec:	18bfff17 	ldw	r2,-4(r3)
  808af0:	18ffff04 	addi	r3,r3,-4
  808af4:	10000326 	beq	r2,zero,808b04 <__multiply+0x200>
  808af8:	00000706 	br	808b18 <__multiply+0x214>
  808afc:	18800017 	ldw	r2,0(r3)
  808b00:	1000051e 	bne	r2,zero,808b18 <__multiply+0x214>
  808b04:	d9000417 	ldw	r4,16(sp)
  808b08:	18ffff04 	addi	r3,r3,-4
  808b0c:	213fffc4 	addi	r4,r4,-1
  808b10:	d9000415 	stw	r4,16(sp)
  808b14:	203ff91e 	bne	r4,zero,808afc <__multiply+0x1f8>
  808b18:	d8800417 	ldw	r2,16(sp)
  808b1c:	d8c00517 	ldw	r3,20(sp)
  808b20:	18800415 	stw	r2,16(r3)
  808b24:	1805883a 	mov	r2,r3
  808b28:	dfc00f17 	ldw	ra,60(sp)
  808b2c:	df000e17 	ldw	fp,56(sp)
  808b30:	ddc00d17 	ldw	r23,52(sp)
  808b34:	dd800c17 	ldw	r22,48(sp)
  808b38:	dd400b17 	ldw	r21,44(sp)
  808b3c:	dd000a17 	ldw	r20,40(sp)
  808b40:	dcc00917 	ldw	r19,36(sp)
  808b44:	dc800817 	ldw	r18,32(sp)
  808b48:	dc400717 	ldw	r17,28(sp)
  808b4c:	dc000617 	ldw	r16,24(sp)
  808b50:	dec01004 	addi	sp,sp,64
  808b54:	f800283a 	ret

00808b58 <__i2b>:
  808b58:	defffd04 	addi	sp,sp,-12
  808b5c:	dc000015 	stw	r16,0(sp)
  808b60:	04000044 	movi	r16,1
  808b64:	dc800115 	stw	r18,4(sp)
  808b68:	2825883a 	mov	r18,r5
  808b6c:	800b883a 	mov	r5,r16
  808b70:	dfc00215 	stw	ra,8(sp)
  808b74:	08083f40 	call	8083f4 <_Balloc>
  808b78:	14000415 	stw	r16,16(r2)
  808b7c:	14800515 	stw	r18,20(r2)
  808b80:	dfc00217 	ldw	ra,8(sp)
  808b84:	dc800117 	ldw	r18,4(sp)
  808b88:	dc000017 	ldw	r16,0(sp)
  808b8c:	dec00304 	addi	sp,sp,12
  808b90:	f800283a 	ret

00808b94 <__multadd>:
  808b94:	defff604 	addi	sp,sp,-40
  808b98:	dd800615 	stw	r22,24(sp)
  808b9c:	2d800417 	ldw	r22,16(r5)
  808ba0:	df000815 	stw	fp,32(sp)
  808ba4:	ddc00715 	stw	r23,28(sp)
  808ba8:	dd400515 	stw	r21,20(sp)
  808bac:	dd000415 	stw	r20,16(sp)
  808bb0:	dcc00315 	stw	r19,12(sp)
  808bb4:	dc800215 	stw	r18,8(sp)
  808bb8:	dfc00915 	stw	ra,36(sp)
  808bbc:	dc400115 	stw	r17,4(sp)
  808bc0:	dc000015 	stw	r16,0(sp)
  808bc4:	282f883a 	mov	r23,r5
  808bc8:	2039883a 	mov	fp,r4
  808bcc:	302b883a 	mov	r21,r6
  808bd0:	3829883a 	mov	r20,r7
  808bd4:	2c800504 	addi	r18,r5,20
  808bd8:	0027883a 	mov	r19,zero
  808bdc:	94400017 	ldw	r17,0(r18)
  808be0:	a80b883a 	mov	r5,r21
  808be4:	9cc00044 	addi	r19,r19,1
  808be8:	893fffcc 	andi	r4,r17,65535
  808bec:	08019440 	call	801944 <__mulsi3>
  808bf0:	8808d43a 	srli	r4,r17,16
  808bf4:	1521883a 	add	r16,r2,r20
  808bf8:	a80b883a 	mov	r5,r21
  808bfc:	08019440 	call	801944 <__mulsi3>
  808c00:	8008d43a 	srli	r4,r16,16
  808c04:	843fffcc 	andi	r16,r16,65535
  808c08:	1105883a 	add	r2,r2,r4
  808c0c:	1006943a 	slli	r3,r2,16
  808c10:	1028d43a 	srli	r20,r2,16
  808c14:	1c07883a 	add	r3,r3,r16
  808c18:	90c00015 	stw	r3,0(r18)
  808c1c:	94800104 	addi	r18,r18,4
  808c20:	9dbfee16 	blt	r19,r22,808bdc <__multadd+0x48>
  808c24:	a0000826 	beq	r20,zero,808c48 <__multadd+0xb4>
  808c28:	b8800217 	ldw	r2,8(r23)
  808c2c:	b080130e 	bge	r22,r2,808c7c <__multadd+0xe8>
  808c30:	b585883a 	add	r2,r22,r22
  808c34:	1085883a 	add	r2,r2,r2
  808c38:	15c5883a 	add	r2,r2,r23
  808c3c:	b0c00044 	addi	r3,r22,1
  808c40:	15000515 	stw	r20,20(r2)
  808c44:	b8c00415 	stw	r3,16(r23)
  808c48:	b805883a 	mov	r2,r23
  808c4c:	dfc00917 	ldw	ra,36(sp)
  808c50:	df000817 	ldw	fp,32(sp)
  808c54:	ddc00717 	ldw	r23,28(sp)
  808c58:	dd800617 	ldw	r22,24(sp)
  808c5c:	dd400517 	ldw	r21,20(sp)
  808c60:	dd000417 	ldw	r20,16(sp)
  808c64:	dcc00317 	ldw	r19,12(sp)
  808c68:	dc800217 	ldw	r18,8(sp)
  808c6c:	dc400117 	ldw	r17,4(sp)
  808c70:	dc000017 	ldw	r16,0(sp)
  808c74:	dec00a04 	addi	sp,sp,40
  808c78:	f800283a 	ret
  808c7c:	b9400117 	ldw	r5,4(r23)
  808c80:	e009883a 	mov	r4,fp
  808c84:	29400044 	addi	r5,r5,1
  808c88:	08083f40 	call	8083f4 <_Balloc>
  808c8c:	b9800417 	ldw	r6,16(r23)
  808c90:	b9400304 	addi	r5,r23,12
  808c94:	11000304 	addi	r4,r2,12
  808c98:	318d883a 	add	r6,r6,r6
  808c9c:	318d883a 	add	r6,r6,r6
  808ca0:	31800204 	addi	r6,r6,8
  808ca4:	1023883a 	mov	r17,r2
  808ca8:	08026dc0 	call	8026dc <memcpy>
  808cac:	b80b883a 	mov	r5,r23
  808cb0:	e009883a 	mov	r4,fp
  808cb4:	0807e740 	call	807e74 <_Bfree>
  808cb8:	882f883a 	mov	r23,r17
  808cbc:	003fdc06 	br	808c30 <__multadd+0x9c>

00808cc0 <__pow5mult>:
  808cc0:	defffa04 	addi	sp,sp,-24
  808cc4:	308000cc 	andi	r2,r6,3
  808cc8:	dd000415 	stw	r20,16(sp)
  808ccc:	dcc00315 	stw	r19,12(sp)
  808cd0:	dc000015 	stw	r16,0(sp)
  808cd4:	dfc00515 	stw	ra,20(sp)
  808cd8:	dc800215 	stw	r18,8(sp)
  808cdc:	dc400115 	stw	r17,4(sp)
  808ce0:	3021883a 	mov	r16,r6
  808ce4:	2027883a 	mov	r19,r4
  808ce8:	2829883a 	mov	r20,r5
  808cec:	10002b1e 	bne	r2,zero,808d9c <__pow5mult+0xdc>
  808cf0:	8025d0ba 	srai	r18,r16,2
  808cf4:	90001b26 	beq	r18,zero,808d64 <__pow5mult+0xa4>
  808cf8:	9c001217 	ldw	r16,72(r19)
  808cfc:	8000081e 	bne	r16,zero,808d20 <__pow5mult+0x60>
  808d00:	00003006 	br	808dc4 <__pow5mult+0x104>
  808d04:	800b883a 	mov	r5,r16
  808d08:	800d883a 	mov	r6,r16
  808d0c:	9809883a 	mov	r4,r19
  808d10:	90001426 	beq	r18,zero,808d64 <__pow5mult+0xa4>
  808d14:	80800017 	ldw	r2,0(r16)
  808d18:	10001b26 	beq	r2,zero,808d88 <__pow5mult+0xc8>
  808d1c:	1021883a 	mov	r16,r2
  808d20:	9080004c 	andi	r2,r18,1
  808d24:	1005003a 	cmpeq	r2,r2,zero
  808d28:	9025d07a 	srai	r18,r18,1
  808d2c:	800d883a 	mov	r6,r16
  808d30:	9809883a 	mov	r4,r19
  808d34:	a00b883a 	mov	r5,r20
  808d38:	103ff21e 	bne	r2,zero,808d04 <__pow5mult+0x44>
  808d3c:	08089040 	call	808904 <__multiply>
  808d40:	a00b883a 	mov	r5,r20
  808d44:	9809883a 	mov	r4,r19
  808d48:	1023883a 	mov	r17,r2
  808d4c:	0807e740 	call	807e74 <_Bfree>
  808d50:	8829883a 	mov	r20,r17
  808d54:	800b883a 	mov	r5,r16
  808d58:	800d883a 	mov	r6,r16
  808d5c:	9809883a 	mov	r4,r19
  808d60:	903fec1e 	bne	r18,zero,808d14 <__pow5mult+0x54>
  808d64:	a005883a 	mov	r2,r20
  808d68:	dfc00517 	ldw	ra,20(sp)
  808d6c:	dd000417 	ldw	r20,16(sp)
  808d70:	dcc00317 	ldw	r19,12(sp)
  808d74:	dc800217 	ldw	r18,8(sp)
  808d78:	dc400117 	ldw	r17,4(sp)
  808d7c:	dc000017 	ldw	r16,0(sp)
  808d80:	dec00604 	addi	sp,sp,24
  808d84:	f800283a 	ret
  808d88:	08089040 	call	808904 <__multiply>
  808d8c:	80800015 	stw	r2,0(r16)
  808d90:	1021883a 	mov	r16,r2
  808d94:	10000015 	stw	zero,0(r2)
  808d98:	003fe106 	br	808d20 <__pow5mult+0x60>
  808d9c:	1085883a 	add	r2,r2,r2
  808da0:	00c020b4 	movhi	r3,130
  808da4:	18e1f004 	addi	r3,r3,-30784
  808da8:	1085883a 	add	r2,r2,r2
  808dac:	10c5883a 	add	r2,r2,r3
  808db0:	11bfff17 	ldw	r6,-4(r2)
  808db4:	000f883a 	mov	r7,zero
  808db8:	0808b940 	call	808b94 <__multadd>
  808dbc:	1029883a 	mov	r20,r2
  808dc0:	003fcb06 	br	808cf0 <__pow5mult+0x30>
  808dc4:	9809883a 	mov	r4,r19
  808dc8:	01409c44 	movi	r5,625
  808dcc:	0808b580 	call	808b58 <__i2b>
  808dd0:	98801215 	stw	r2,72(r19)
  808dd4:	1021883a 	mov	r16,r2
  808dd8:	10000015 	stw	zero,0(r2)
  808ddc:	003fd006 	br	808d20 <__pow5mult+0x60>

00808de0 <__s2b>:
  808de0:	defff904 	addi	sp,sp,-28
  808de4:	dcc00315 	stw	r19,12(sp)
  808de8:	dc800215 	stw	r18,8(sp)
  808dec:	2827883a 	mov	r19,r5
  808df0:	2025883a 	mov	r18,r4
  808df4:	01400244 	movi	r5,9
  808df8:	39000204 	addi	r4,r7,8
  808dfc:	dd000415 	stw	r20,16(sp)
  808e00:	dc400115 	stw	r17,4(sp)
  808e04:	dfc00615 	stw	ra,24(sp)
  808e08:	dd400515 	stw	r21,20(sp)
  808e0c:	dc000015 	stw	r16,0(sp)
  808e10:	3829883a 	mov	r20,r7
  808e14:	3023883a 	mov	r17,r6
  808e18:	08018740 	call	801874 <__divsi3>
  808e1c:	00c00044 	movi	r3,1
  808e20:	1880350e 	bge	r3,r2,808ef8 <__s2b+0x118>
  808e24:	000b883a 	mov	r5,zero
  808e28:	18c7883a 	add	r3,r3,r3
  808e2c:	29400044 	addi	r5,r5,1
  808e30:	18bffd16 	blt	r3,r2,808e28 <__s2b+0x48>
  808e34:	9009883a 	mov	r4,r18
  808e38:	08083f40 	call	8083f4 <_Balloc>
  808e3c:	1011883a 	mov	r8,r2
  808e40:	d8800717 	ldw	r2,28(sp)
  808e44:	00c00044 	movi	r3,1
  808e48:	01800244 	movi	r6,9
  808e4c:	40800515 	stw	r2,20(r8)
  808e50:	40c00415 	stw	r3,16(r8)
  808e54:	3440260e 	bge	r6,r17,808ef0 <__s2b+0x110>
  808e58:	3021883a 	mov	r16,r6
  808e5c:	99ab883a 	add	r21,r19,r6
  808e60:	9c05883a 	add	r2,r19,r16
  808e64:	11c00007 	ldb	r7,0(r2)
  808e68:	400b883a 	mov	r5,r8
  808e6c:	9009883a 	mov	r4,r18
  808e70:	39fff404 	addi	r7,r7,-48
  808e74:	01800284 	movi	r6,10
  808e78:	0808b940 	call	808b94 <__multadd>
  808e7c:	84000044 	addi	r16,r16,1
  808e80:	1011883a 	mov	r8,r2
  808e84:	8c3ff61e 	bne	r17,r16,808e60 <__s2b+0x80>
  808e88:	ac45883a 	add	r2,r21,r17
  808e8c:	117ffe04 	addi	r5,r2,-8
  808e90:	880d883a 	mov	r6,r17
  808e94:	35000c0e 	bge	r6,r20,808ec8 <__s2b+0xe8>
  808e98:	a185c83a 	sub	r2,r20,r6
  808e9c:	2821883a 	mov	r16,r5
  808ea0:	28a3883a 	add	r17,r5,r2
  808ea4:	81c00007 	ldb	r7,0(r16)
  808ea8:	400b883a 	mov	r5,r8
  808eac:	9009883a 	mov	r4,r18
  808eb0:	39fff404 	addi	r7,r7,-48
  808eb4:	01800284 	movi	r6,10
  808eb8:	0808b940 	call	808b94 <__multadd>
  808ebc:	84000044 	addi	r16,r16,1
  808ec0:	1011883a 	mov	r8,r2
  808ec4:	847ff71e 	bne	r16,r17,808ea4 <__s2b+0xc4>
  808ec8:	4005883a 	mov	r2,r8
  808ecc:	dfc00617 	ldw	ra,24(sp)
  808ed0:	dd400517 	ldw	r21,20(sp)
  808ed4:	dd000417 	ldw	r20,16(sp)
  808ed8:	dcc00317 	ldw	r19,12(sp)
  808edc:	dc800217 	ldw	r18,8(sp)
  808ee0:	dc400117 	ldw	r17,4(sp)
  808ee4:	dc000017 	ldw	r16,0(sp)
  808ee8:	dec00704 	addi	sp,sp,28
  808eec:	f800283a 	ret
  808ef0:	99400284 	addi	r5,r19,10
  808ef4:	003fe706 	br	808e94 <__s2b+0xb4>
  808ef8:	000b883a 	mov	r5,zero
  808efc:	003fcd06 	br	808e34 <__s2b+0x54>

00808f00 <__isinfd>:
  808f00:	200d883a 	mov	r6,r4
  808f04:	0109c83a 	sub	r4,zero,r4
  808f08:	2188b03a 	or	r4,r4,r6
  808f0c:	2008d7fa 	srli	r4,r4,31
  808f10:	00a00034 	movhi	r2,32768
  808f14:	10bfffc4 	addi	r2,r2,-1
  808f18:	1144703a 	and	r2,r2,r5
  808f1c:	2088b03a 	or	r4,r4,r2
  808f20:	009ffc34 	movhi	r2,32752
  808f24:	1105c83a 	sub	r2,r2,r4
  808f28:	0087c83a 	sub	r3,zero,r2
  808f2c:	10c4b03a 	or	r2,r2,r3
  808f30:	1004d7fa 	srli	r2,r2,31
  808f34:	00c00044 	movi	r3,1
  808f38:	1885c83a 	sub	r2,r3,r2
  808f3c:	f800283a 	ret

00808f40 <__isnand>:
  808f40:	200d883a 	mov	r6,r4
  808f44:	0109c83a 	sub	r4,zero,r4
  808f48:	2188b03a 	or	r4,r4,r6
  808f4c:	2008d7fa 	srli	r4,r4,31
  808f50:	00a00034 	movhi	r2,32768
  808f54:	10bfffc4 	addi	r2,r2,-1
  808f58:	1144703a 	and	r2,r2,r5
  808f5c:	2088b03a 	or	r4,r4,r2
  808f60:	009ffc34 	movhi	r2,32752
  808f64:	1105c83a 	sub	r2,r2,r4
  808f68:	1004d7fa 	srli	r2,r2,31
  808f6c:	f800283a 	ret

00808f70 <_raise_r>:
  808f70:	defffd04 	addi	sp,sp,-12
  808f74:	008007c4 	movi	r2,31
  808f78:	dc400115 	stw	r17,4(sp)
  808f7c:	dc000015 	stw	r16,0(sp)
  808f80:	dfc00215 	stw	ra,8(sp)
  808f84:	2821883a 	mov	r16,r5
  808f88:	2023883a 	mov	r17,r4
  808f8c:	11402736 	bltu	r2,r5,80902c <_raise_r+0xbc>
  808f90:	20c0b717 	ldw	r3,732(r4)
  808f94:	18001326 	beq	r3,zero,808fe4 <_raise_r+0x74>
  808f98:	2945883a 	add	r2,r5,r5
  808f9c:	1085883a 	add	r2,r2,r2
  808fa0:	188b883a 	add	r5,r3,r2
  808fa4:	28c00017 	ldw	r3,0(r5)
  808fa8:	18000e26 	beq	r3,zero,808fe4 <_raise_r+0x74>
  808fac:	01000044 	movi	r4,1
  808fb0:	19000526 	beq	r3,r4,808fc8 <_raise_r+0x58>
  808fb4:	00bfffc4 	movi	r2,-1
  808fb8:	18801326 	beq	r3,r2,809008 <_raise_r+0x98>
  808fbc:	28000015 	stw	zero,0(r5)
  808fc0:	8009883a 	mov	r4,r16
  808fc4:	183ee83a 	callr	r3
  808fc8:	0007883a 	mov	r3,zero
  808fcc:	1805883a 	mov	r2,r3
  808fd0:	dfc00217 	ldw	ra,8(sp)
  808fd4:	dc400117 	ldw	r17,4(sp)
  808fd8:	dc000017 	ldw	r16,0(sp)
  808fdc:	dec00304 	addi	sp,sp,12
  808fe0:	f800283a 	ret
  808fe4:	08092480 	call	809248 <_getpid_r>
  808fe8:	100b883a 	mov	r5,r2
  808fec:	8809883a 	mov	r4,r17
  808ff0:	800d883a 	mov	r6,r16
  808ff4:	dfc00217 	ldw	ra,8(sp)
  808ff8:	dc400117 	ldw	r17,4(sp)
  808ffc:	dc000017 	ldw	r16,0(sp)
  809000:	dec00304 	addi	sp,sp,12
  809004:	080924c1 	jmpi	80924c <_kill_r>
  809008:	2007883a 	mov	r3,r4
  80900c:	00800584 	movi	r2,22
  809010:	88800015 	stw	r2,0(r17)
  809014:	1805883a 	mov	r2,r3
  809018:	dfc00217 	ldw	ra,8(sp)
  80901c:	dc400117 	ldw	r17,4(sp)
  809020:	dc000017 	ldw	r16,0(sp)
  809024:	dec00304 	addi	sp,sp,12
  809028:	f800283a 	ret
  80902c:	00800584 	movi	r2,22
  809030:	00ffffc4 	movi	r3,-1
  809034:	20800015 	stw	r2,0(r4)
  809038:	003fe406 	br	808fcc <_raise_r+0x5c>

0080903c <raise>:
  80903c:	008020b4 	movhi	r2,130
  809040:	10a93c04 	addi	r2,r2,-23312
  809044:	200b883a 	mov	r5,r4
  809048:	11000017 	ldw	r4,0(r2)
  80904c:	0808f701 	jmpi	808f70 <_raise_r>

00809050 <_init_signal_r>:
  809050:	2080b717 	ldw	r2,732(r4)
  809054:	defffe04 	addi	sp,sp,-8
  809058:	dc000015 	stw	r16,0(sp)
  80905c:	dfc00115 	stw	ra,4(sp)
  809060:	2021883a 	mov	r16,r4
  809064:	10000526 	beq	r2,zero,80907c <_init_signal_r+0x2c>
  809068:	0005883a 	mov	r2,zero
  80906c:	dfc00117 	ldw	ra,4(sp)
  809070:	dc000017 	ldw	r16,0(sp)
  809074:	dec00204 	addi	sp,sp,8
  809078:	f800283a 	ret
  80907c:	01402004 	movi	r5,128
  809080:	0801f9c0 	call	801f9c <_malloc_r>
  809084:	1009883a 	mov	r4,r2
  809088:	8080b715 	stw	r2,732(r16)
  80908c:	10000726 	beq	r2,zero,8090ac <_init_signal_r+0x5c>
  809090:	0007883a 	mov	r3,zero
  809094:	01402004 	movi	r5,128
  809098:	20c5883a 	add	r2,r4,r3
  80909c:	18c00104 	addi	r3,r3,4
  8090a0:	10000015 	stw	zero,0(r2)
  8090a4:	197ffc1e 	bne	r3,r5,809098 <_init_signal_r+0x48>
  8090a8:	003fef06 	br	809068 <_init_signal_r+0x18>
  8090ac:	00bfffc4 	movi	r2,-1
  8090b0:	003fee06 	br	80906c <_init_signal_r+0x1c>

008090b4 <_init_signal>:
  8090b4:	008020b4 	movhi	r2,130
  8090b8:	10a93c04 	addi	r2,r2,-23312
  8090bc:	11000017 	ldw	r4,0(r2)
  8090c0:	08090501 	jmpi	809050 <_init_signal_r>

008090c4 <__sigtramp_r>:
  8090c4:	defffd04 	addi	sp,sp,-12
  8090c8:	008007c4 	movi	r2,31
  8090cc:	dc000115 	stw	r16,4(sp)
  8090d0:	dfc00215 	stw	ra,8(sp)
  8090d4:	2021883a 	mov	r16,r4
  8090d8:	11401336 	bltu	r2,r5,809128 <__sigtramp_r+0x64>
  8090dc:	20c0b717 	ldw	r3,732(r4)
  8090e0:	18001f26 	beq	r3,zero,809160 <__sigtramp_r+0x9c>
  8090e4:	2945883a 	add	r2,r5,r5
  8090e8:	1085883a 	add	r2,r2,r2
  8090ec:	10c9883a 	add	r4,r2,r3
  8090f0:	20c00017 	ldw	r3,0(r4)
  8090f4:	18001626 	beq	r3,zero,809150 <__sigtramp_r+0x8c>
  8090f8:	00bfffc4 	movi	r2,-1
  8090fc:	18801626 	beq	r3,r2,809158 <__sigtramp_r+0x94>
  809100:	00800044 	movi	r2,1
  809104:	18800d26 	beq	r3,r2,80913c <__sigtramp_r+0x78>
  809108:	20000015 	stw	zero,0(r4)
  80910c:	2809883a 	mov	r4,r5
  809110:	183ee83a 	callr	r3
  809114:	0005883a 	mov	r2,zero
  809118:	dfc00217 	ldw	ra,8(sp)
  80911c:	dc000117 	ldw	r16,4(sp)
  809120:	dec00304 	addi	sp,sp,12
  809124:	f800283a 	ret
  809128:	00bfffc4 	movi	r2,-1
  80912c:	dfc00217 	ldw	ra,8(sp)
  809130:	dc000117 	ldw	r16,4(sp)
  809134:	dec00304 	addi	sp,sp,12
  809138:	f800283a 	ret
  80913c:	008000c4 	movi	r2,3
  809140:	dfc00217 	ldw	ra,8(sp)
  809144:	dc000117 	ldw	r16,4(sp)
  809148:	dec00304 	addi	sp,sp,12
  80914c:	f800283a 	ret
  809150:	00800044 	movi	r2,1
  809154:	003ff006 	br	809118 <__sigtramp_r+0x54>
  809158:	00800084 	movi	r2,2
  80915c:	003fee06 	br	809118 <__sigtramp_r+0x54>
  809160:	d9400015 	stw	r5,0(sp)
  809164:	08090500 	call	809050 <_init_signal_r>
  809168:	d9400017 	ldw	r5,0(sp)
  80916c:	103fee1e 	bne	r2,zero,809128 <__sigtramp_r+0x64>
  809170:	80c0b717 	ldw	r3,732(r16)
  809174:	003fdb06 	br	8090e4 <__sigtramp_r+0x20>

00809178 <__sigtramp>:
  809178:	008020b4 	movhi	r2,130
  80917c:	10a93c04 	addi	r2,r2,-23312
  809180:	200b883a 	mov	r5,r4
  809184:	11000017 	ldw	r4,0(r2)
  809188:	08090c41 	jmpi	8090c4 <__sigtramp_r>

0080918c <_signal_r>:
  80918c:	defffc04 	addi	sp,sp,-16
  809190:	008007c4 	movi	r2,31
  809194:	dc800215 	stw	r18,8(sp)
  809198:	dc400115 	stw	r17,4(sp)
  80919c:	dc000015 	stw	r16,0(sp)
  8091a0:	dfc00315 	stw	ra,12(sp)
  8091a4:	2823883a 	mov	r17,r5
  8091a8:	00ffffc4 	movi	r3,-1
  8091ac:	3025883a 	mov	r18,r6
  8091b0:	2021883a 	mov	r16,r4
  8091b4:	1140092e 	bgeu	r2,r5,8091dc <_signal_r+0x50>
  8091b8:	00800584 	movi	r2,22
  8091bc:	20800015 	stw	r2,0(r4)
  8091c0:	1805883a 	mov	r2,r3
  8091c4:	dfc00317 	ldw	ra,12(sp)
  8091c8:	dc800217 	ldw	r18,8(sp)
  8091cc:	dc400117 	ldw	r17,4(sp)
  8091d0:	dc000017 	ldw	r16,0(sp)
  8091d4:	dec00404 	addi	sp,sp,16
  8091d8:	f800283a 	ret
  8091dc:	2140b717 	ldw	r5,732(r4)
  8091e0:	28000c26 	beq	r5,zero,809214 <_signal_r+0x88>
  8091e4:	8c45883a 	add	r2,r17,r17
  8091e8:	1085883a 	add	r2,r2,r2
  8091ec:	1145883a 	add	r2,r2,r5
  8091f0:	10c00017 	ldw	r3,0(r2)
  8091f4:	14800015 	stw	r18,0(r2)
  8091f8:	1805883a 	mov	r2,r3
  8091fc:	dfc00317 	ldw	ra,12(sp)
  809200:	dc800217 	ldw	r18,8(sp)
  809204:	dc400117 	ldw	r17,4(sp)
  809208:	dc000017 	ldw	r16,0(sp)
  80920c:	dec00404 	addi	sp,sp,16
  809210:	f800283a 	ret
  809214:	08090500 	call	809050 <_init_signal_r>
  809218:	1000021e 	bne	r2,zero,809224 <_signal_r+0x98>
  80921c:	8140b717 	ldw	r5,732(r16)
  809220:	003ff006 	br	8091e4 <_signal_r+0x58>
  809224:	00ffffc4 	movi	r3,-1
  809228:	003fe506 	br	8091c0 <_signal_r+0x34>

0080922c <signal>:
  80922c:	018020b4 	movhi	r6,130
  809230:	31a93c04 	addi	r6,r6,-23312
  809234:	2007883a 	mov	r3,r4
  809238:	31000017 	ldw	r4,0(r6)
  80923c:	280d883a 	mov	r6,r5
  809240:	180b883a 	mov	r5,r3
  809244:	080918c1 	jmpi	80918c <_signal_r>

00809248 <_getpid_r>:
  809248:	080c7b81 	jmpi	80c7b8 <getpid>

0080924c <_kill_r>:
  80924c:	defffd04 	addi	sp,sp,-12
  809250:	dc000015 	stw	r16,0(sp)
  809254:	040020b4 	movhi	r16,130
  809258:	84296f04 	addi	r16,r16,-23108
  80925c:	dc400115 	stw	r17,4(sp)
  809260:	80000015 	stw	zero,0(r16)
  809264:	2023883a 	mov	r17,r4
  809268:	2809883a 	mov	r4,r5
  80926c:	300b883a 	mov	r5,r6
  809270:	dfc00215 	stw	ra,8(sp)
  809274:	080c8fc0 	call	80c8fc <kill>
  809278:	1007883a 	mov	r3,r2
  80927c:	00bfffc4 	movi	r2,-1
  809280:	18800626 	beq	r3,r2,80929c <_kill_r+0x50>
  809284:	1805883a 	mov	r2,r3
  809288:	dfc00217 	ldw	ra,8(sp)
  80928c:	dc400117 	ldw	r17,4(sp)
  809290:	dc000017 	ldw	r16,0(sp)
  809294:	dec00304 	addi	sp,sp,12
  809298:	f800283a 	ret
  80929c:	80800017 	ldw	r2,0(r16)
  8092a0:	103ff826 	beq	r2,zero,809284 <_kill_r+0x38>
  8092a4:	88800015 	stw	r2,0(r17)
  8092a8:	1805883a 	mov	r2,r3
  8092ac:	dfc00217 	ldw	ra,8(sp)
  8092b0:	dc400117 	ldw	r17,4(sp)
  8092b4:	dc000017 	ldw	r16,0(sp)
  8092b8:	dec00304 	addi	sp,sp,12
  8092bc:	f800283a 	ret

008092c0 <__sclose>:
  8092c0:	2940038f 	ldh	r5,14(r5)
  8092c4:	080a6881 	jmpi	80a688 <_close_r>

008092c8 <__sseek>:
  8092c8:	defffe04 	addi	sp,sp,-8
  8092cc:	dc000015 	stw	r16,0(sp)
  8092d0:	2821883a 	mov	r16,r5
  8092d4:	2940038f 	ldh	r5,14(r5)
  8092d8:	dfc00115 	stw	ra,4(sp)
  8092dc:	080a9000 	call	80a900 <_lseek_r>
  8092e0:	1007883a 	mov	r3,r2
  8092e4:	00bfffc4 	movi	r2,-1
  8092e8:	18800926 	beq	r3,r2,809310 <__sseek+0x48>
  8092ec:	8080030b 	ldhu	r2,12(r16)
  8092f0:	80c01415 	stw	r3,80(r16)
  8092f4:	10840014 	ori	r2,r2,4096
  8092f8:	8080030d 	sth	r2,12(r16)
  8092fc:	1805883a 	mov	r2,r3
  809300:	dfc00117 	ldw	ra,4(sp)
  809304:	dc000017 	ldw	r16,0(sp)
  809308:	dec00204 	addi	sp,sp,8
  80930c:	f800283a 	ret
  809310:	8080030b 	ldhu	r2,12(r16)
  809314:	10bbffcc 	andi	r2,r2,61439
  809318:	8080030d 	sth	r2,12(r16)
  80931c:	1805883a 	mov	r2,r3
  809320:	dfc00117 	ldw	ra,4(sp)
  809324:	dc000017 	ldw	r16,0(sp)
  809328:	dec00204 	addi	sp,sp,8
  80932c:	f800283a 	ret

00809330 <__swrite>:
  809330:	2880030b 	ldhu	r2,12(r5)
  809334:	defffb04 	addi	sp,sp,-20
  809338:	dcc00315 	stw	r19,12(sp)
  80933c:	1080400c 	andi	r2,r2,256
  809340:	dc800215 	stw	r18,8(sp)
  809344:	dc400115 	stw	r17,4(sp)
  809348:	dc000015 	stw	r16,0(sp)
  80934c:	3027883a 	mov	r19,r6
  809350:	3825883a 	mov	r18,r7
  809354:	dfc00415 	stw	ra,16(sp)
  809358:	2821883a 	mov	r16,r5
  80935c:	000d883a 	mov	r6,zero
  809360:	01c00084 	movi	r7,2
  809364:	2023883a 	mov	r17,r4
  809368:	10000226 	beq	r2,zero,809374 <__swrite+0x44>
  80936c:	2940038f 	ldh	r5,14(r5)
  809370:	080a9000 	call	80a900 <_lseek_r>
  809374:	8080030b 	ldhu	r2,12(r16)
  809378:	8140038f 	ldh	r5,14(r16)
  80937c:	8809883a 	mov	r4,r17
  809380:	10bbffcc 	andi	r2,r2,61439
  809384:	980d883a 	mov	r6,r19
  809388:	900f883a 	mov	r7,r18
  80938c:	8080030d 	sth	r2,12(r16)
  809390:	dfc00417 	ldw	ra,16(sp)
  809394:	dcc00317 	ldw	r19,12(sp)
  809398:	dc800217 	ldw	r18,8(sp)
  80939c:	dc400117 	ldw	r17,4(sp)
  8093a0:	dc000017 	ldw	r16,0(sp)
  8093a4:	dec00504 	addi	sp,sp,20
  8093a8:	080a5481 	jmpi	80a548 <_write_r>

008093ac <__sread>:
  8093ac:	defffe04 	addi	sp,sp,-8
  8093b0:	dc000015 	stw	r16,0(sp)
  8093b4:	2821883a 	mov	r16,r5
  8093b8:	2940038f 	ldh	r5,14(r5)
  8093bc:	dfc00115 	stw	ra,4(sp)
  8093c0:	080a9780 	call	80a978 <_read_r>
  8093c4:	1007883a 	mov	r3,r2
  8093c8:	10000816 	blt	r2,zero,8093ec <__sread+0x40>
  8093cc:	80801417 	ldw	r2,80(r16)
  8093d0:	10c5883a 	add	r2,r2,r3
  8093d4:	80801415 	stw	r2,80(r16)
  8093d8:	1805883a 	mov	r2,r3
  8093dc:	dfc00117 	ldw	ra,4(sp)
  8093e0:	dc000017 	ldw	r16,0(sp)
  8093e4:	dec00204 	addi	sp,sp,8
  8093e8:	f800283a 	ret
  8093ec:	8080030b 	ldhu	r2,12(r16)
  8093f0:	10bbffcc 	andi	r2,r2,61439
  8093f4:	8080030d 	sth	r2,12(r16)
  8093f8:	1805883a 	mov	r2,r3
  8093fc:	dfc00117 	ldw	ra,4(sp)
  809400:	dc000017 	ldw	r16,0(sp)
  809404:	dec00204 	addi	sp,sp,8
  809408:	f800283a 	ret

0080940c <__sprint_r>:
  80940c:	30800217 	ldw	r2,8(r6)
  809410:	defffe04 	addi	sp,sp,-8
  809414:	dc000015 	stw	r16,0(sp)
  809418:	dfc00115 	stw	ra,4(sp)
  80941c:	3021883a 	mov	r16,r6
  809420:	0007883a 	mov	r3,zero
  809424:	1000061e 	bne	r2,zero,809440 <__sprint_r+0x34>
  809428:	1805883a 	mov	r2,r3
  80942c:	30000115 	stw	zero,4(r6)
  809430:	dfc00117 	ldw	ra,4(sp)
  809434:	dc000017 	ldw	r16,0(sp)
  809438:	dec00204 	addi	sp,sp,8
  80943c:	f800283a 	ret
  809440:	080751c0 	call	80751c <__sfvwrite_r>
  809444:	1007883a 	mov	r3,r2
  809448:	1805883a 	mov	r2,r3
  80944c:	80000115 	stw	zero,4(r16)
  809450:	80000215 	stw	zero,8(r16)
  809454:	dfc00117 	ldw	ra,4(sp)
  809458:	dc000017 	ldw	r16,0(sp)
  80945c:	dec00204 	addi	sp,sp,8
  809460:	f800283a 	ret

00809464 <___vfiprintf_internal_r>:
  809464:	defeb604 	addi	sp,sp,-1320
  809468:	dd814615 	stw	r22,1304(sp)
  80946c:	dd414515 	stw	r21,1300(sp)
  809470:	dc014015 	stw	r16,1280(sp)
  809474:	dfc14915 	stw	ra,1316(sp)
  809478:	df014815 	stw	fp,1312(sp)
  80947c:	ddc14715 	stw	r23,1308(sp)
  809480:	dd014415 	stw	r20,1296(sp)
  809484:	dcc14315 	stw	r19,1292(sp)
  809488:	dc814215 	stw	r18,1288(sp)
  80948c:	dc414115 	stw	r17,1284(sp)
  809490:	202d883a 	mov	r22,r4
  809494:	282b883a 	mov	r21,r5
  809498:	3021883a 	mov	r16,r6
  80949c:	20000226 	beq	r4,zero,8094a8 <___vfiprintf_internal_r+0x44>
  8094a0:	20800e17 	ldw	r2,56(r4)
  8094a4:	1001bc26 	beq	r2,zero,809b98 <___vfiprintf_internal_r+0x734>
  8094a8:	a880030b 	ldhu	r2,12(r21)
  8094ac:	1080020c 	andi	r2,r2,8
  8094b0:	1001cb26 	beq	r2,zero,809be0 <___vfiprintf_internal_r+0x77c>
  8094b4:	a8800417 	ldw	r2,16(r21)
  8094b8:	1001c926 	beq	r2,zero,809be0 <___vfiprintf_internal_r+0x77c>
  8094bc:	aa00030b 	ldhu	r8,12(r21)
  8094c0:	00800284 	movi	r2,10
  8094c4:	40c0068c 	andi	r3,r8,26
  8094c8:	18802f1e 	bne	r3,r2,809588 <___vfiprintf_internal_r+0x124>
  8094cc:	a880038f 	ldh	r2,14(r21)
  8094d0:	10002d16 	blt	r2,zero,809588 <___vfiprintf_internal_r+0x124>
  8094d4:	aa40038b 	ldhu	r9,14(r21)
  8094d8:	aa800717 	ldw	r10,28(r21)
  8094dc:	aac00917 	ldw	r11,36(r21)
  8094e0:	dc401e04 	addi	r17,sp,120
  8094e4:	d8803504 	addi	r2,sp,212
  8094e8:	00c10004 	movi	r3,1024
  8094ec:	423fff4c 	andi	r8,r8,65533
  8094f0:	800d883a 	mov	r6,r16
  8094f4:	b009883a 	mov	r4,r22
  8094f8:	880b883a 	mov	r5,r17
  8094fc:	da00210d 	sth	r8,132(sp)
  809500:	da40218d 	sth	r9,134(sp)
  809504:	da802515 	stw	r10,148(sp)
  809508:	dac02715 	stw	r11,156(sp)
  80950c:	d8802215 	stw	r2,136(sp)
  809510:	d8c02315 	stw	r3,140(sp)
  809514:	d8801e15 	stw	r2,120(sp)
  809518:	d8c02015 	stw	r3,128(sp)
  80951c:	d8002415 	stw	zero,144(sp)
  809520:	08094640 	call	809464 <___vfiprintf_internal_r>
  809524:	d8813a15 	stw	r2,1256(sp)
  809528:	10000416 	blt	r2,zero,80953c <___vfiprintf_internal_r+0xd8>
  80952c:	b009883a 	mov	r4,r22
  809530:	880b883a 	mov	r5,r17
  809534:	0806bb80 	call	806bb8 <_fflush_r>
  809538:	1001b01e 	bne	r2,zero,809bfc <___vfiprintf_internal_r+0x798>
  80953c:	d880210b 	ldhu	r2,132(sp)
  809540:	1080100c 	andi	r2,r2,64
  809544:	10000326 	beq	r2,zero,809554 <___vfiprintf_internal_r+0xf0>
  809548:	a880030b 	ldhu	r2,12(r21)
  80954c:	10801014 	ori	r2,r2,64
  809550:	a880030d 	sth	r2,12(r21)
  809554:	d8813a17 	ldw	r2,1256(sp)
  809558:	dfc14917 	ldw	ra,1316(sp)
  80955c:	df014817 	ldw	fp,1312(sp)
  809560:	ddc14717 	ldw	r23,1308(sp)
  809564:	dd814617 	ldw	r22,1304(sp)
  809568:	dd414517 	ldw	r21,1300(sp)
  80956c:	dd014417 	ldw	r20,1296(sp)
  809570:	dcc14317 	ldw	r19,1292(sp)
  809574:	dc814217 	ldw	r18,1288(sp)
  809578:	dc414117 	ldw	r17,1284(sp)
  80957c:	dc014017 	ldw	r16,1280(sp)
  809580:	dec14a04 	addi	sp,sp,1320
  809584:	f800283a 	ret
  809588:	d8c00e04 	addi	r3,sp,56
  80958c:	8029883a 	mov	r20,r16
  809590:	d8c00115 	stw	r3,4(sp)
  809594:	d8000315 	stw	zero,12(sp)
  809598:	d8000215 	stw	zero,8(sp)
  80959c:	1825883a 	mov	r18,r3
  8095a0:	d8013a15 	stw	zero,1256(sp)
  8095a4:	d8013615 	stw	zero,1240(sp)
  8095a8:	a0800007 	ldb	r2,0(r20)
  8095ac:	10001926 	beq	r2,zero,809614 <___vfiprintf_internal_r+0x1b0>
  8095b0:	00c00944 	movi	r3,37
  8095b4:	10c01726 	beq	r2,r3,809614 <___vfiprintf_internal_r+0x1b0>
  8095b8:	a021883a 	mov	r16,r20
  8095bc:	00000106 	br	8095c4 <___vfiprintf_internal_r+0x160>
  8095c0:	10c00326 	beq	r2,r3,8095d0 <___vfiprintf_internal_r+0x16c>
  8095c4:	84000044 	addi	r16,r16,1
  8095c8:	80800007 	ldb	r2,0(r16)
  8095cc:	103ffc1e 	bne	r2,zero,8095c0 <___vfiprintf_internal_r+0x15c>
  8095d0:	8523c83a 	sub	r17,r16,r20
  8095d4:	88000e26 	beq	r17,zero,809610 <___vfiprintf_internal_r+0x1ac>
  8095d8:	d9400317 	ldw	r5,12(sp)
  8095dc:	d9000217 	ldw	r4,8(sp)
  8095e0:	008001c4 	movi	r2,7
  8095e4:	2c4b883a 	add	r5,r5,r17
  8095e8:	21000044 	addi	r4,r4,1
  8095ec:	95000015 	stw	r20,0(r18)
  8095f0:	d9400315 	stw	r5,12(sp)
  8095f4:	94400115 	stw	r17,4(r18)
  8095f8:	d9000215 	stw	r4,8(sp)
  8095fc:	1101e816 	blt	r2,r4,809da0 <___vfiprintf_internal_r+0x93c>
  809600:	94800204 	addi	r18,r18,8
  809604:	d9013a17 	ldw	r4,1256(sp)
  809608:	2449883a 	add	r4,r4,r17
  80960c:	d9013a15 	stw	r4,1256(sp)
  809610:	8029883a 	mov	r20,r16
  809614:	a0800007 	ldb	r2,0(r20)
  809618:	10012e26 	beq	r2,zero,809ad4 <___vfiprintf_internal_r+0x670>
  80961c:	a5000044 	addi	r20,r20,1
  809620:	d8000005 	stb	zero,0(sp)
  809624:	a0c00007 	ldb	r3,0(r20)
  809628:	05ffffc4 	movi	r23,-1
  80962c:	d8013915 	stw	zero,1252(sp)
  809630:	d8013b15 	stw	zero,1260(sp)
  809634:	1827883a 	mov	r19,r3
  809638:	a5000044 	addi	r20,r20,1
  80963c:	98fff804 	addi	r3,r19,-32
  809640:	00801604 	movi	r2,88
  809644:	10c06036 	bltu	r2,r3,8097c8 <___vfiprintf_internal_r+0x364>
  809648:	18c5883a 	add	r2,r3,r3
  80964c:	1085883a 	add	r2,r2,r2
  809650:	00c02074 	movhi	r3,129
  809654:	18e59904 	addi	r3,r3,-27036
  809658:	10c5883a 	add	r2,r2,r3
  80965c:	11000017 	ldw	r4,0(r2)
  809660:	2000683a 	jmp	r4
  809664:	00809ecc 	andi	r2,zero,635
  809668:	008097c8 	cmpgei	r2,zero,607
  80966c:	008097c8 	cmpgei	r2,zero,607
  809670:	00809f90 	cmplti	r2,zero,638
  809674:	008097c8 	cmpgei	r2,zero,607
  809678:	008097c8 	cmpgei	r2,zero,607
  80967c:	008097c8 	cmpgei	r2,zero,607
  809680:	008097c8 	cmpgei	r2,zero,607
  809684:	008097c8 	cmpgei	r2,zero,607
  809688:	008097c8 	cmpgei	r2,zero,607
  80968c:	00809e54 	movui	r2,633
  809690:	00809fa4 	muli	r2,zero,638
  809694:	008097c8 	cmpgei	r2,zero,607
  809698:	00809e6c 	andhi	r2,zero,633
  80969c:	00809f30 	cmpltui	r2,zero,636
  8096a0:	008097c8 	cmpgei	r2,zero,607
  8096a4:	00809f1c 	xori	r2,zero,636
  8096a8:	00809ee4 	muli	r2,zero,635
  8096ac:	00809ee4 	muli	r2,zero,635
  8096b0:	00809ee4 	muli	r2,zero,635
  8096b4:	00809ee4 	muli	r2,zero,635
  8096b8:	00809ee4 	muli	r2,zero,635
  8096bc:	00809ee4 	muli	r2,zero,635
  8096c0:	00809ee4 	muli	r2,zero,635
  8096c4:	00809ee4 	muli	r2,zero,635
  8096c8:	00809ee4 	muli	r2,zero,635
  8096cc:	008097c8 	cmpgei	r2,zero,607
  8096d0:	008097c8 	cmpgei	r2,zero,607
  8096d4:	008097c8 	cmpgei	r2,zero,607
  8096d8:	008097c8 	cmpgei	r2,zero,607
  8096dc:	008097c8 	cmpgei	r2,zero,607
  8096e0:	008097c8 	cmpgei	r2,zero,607
  8096e4:	008097c8 	cmpgei	r2,zero,607
  8096e8:	008097c8 	cmpgei	r2,zero,607
  8096ec:	008097c8 	cmpgei	r2,zero,607
  8096f0:	008097c8 	cmpgei	r2,zero,607
  8096f4:	00809c30 	cmpltui	r2,zero,624
  8096f8:	008097c8 	cmpgei	r2,zero,607
  8096fc:	008097c8 	cmpgei	r2,zero,607
  809700:	008097c8 	cmpgei	r2,zero,607
  809704:	008097c8 	cmpgei	r2,zero,607
  809708:	008097c8 	cmpgei	r2,zero,607
  80970c:	008097c8 	cmpgei	r2,zero,607
  809710:	008097c8 	cmpgei	r2,zero,607
  809714:	008097c8 	cmpgei	r2,zero,607
  809718:	008097c8 	cmpgei	r2,zero,607
  80971c:	008097c8 	cmpgei	r2,zero,607
  809720:	00809ce4 	muli	r2,zero,627
  809724:	008097c8 	cmpgei	r2,zero,607
  809728:	008097c8 	cmpgei	r2,zero,607
  80972c:	008097c8 	cmpgei	r2,zero,607
  809730:	008097c8 	cmpgei	r2,zero,607
  809734:	008097c8 	cmpgei	r2,zero,607
  809738:	00809d30 	cmpltui	r2,zero,628
  80973c:	008097c8 	cmpgei	r2,zero,607
  809740:	008097c8 	cmpgei	r2,zero,607
  809744:	0080a03c 	xorhi	r2,zero,640
  809748:	008097c8 	cmpgei	r2,zero,607
  80974c:	008097c8 	cmpgei	r2,zero,607
  809750:	008097c8 	cmpgei	r2,zero,607
  809754:	008097c8 	cmpgei	r2,zero,607
  809758:	008097c8 	cmpgei	r2,zero,607
  80975c:	008097c8 	cmpgei	r2,zero,607
  809760:	008097c8 	cmpgei	r2,zero,607
  809764:	008097c8 	cmpgei	r2,zero,607
  809768:	008097c8 	cmpgei	r2,zero,607
  80976c:	008097c8 	cmpgei	r2,zero,607
  809770:	0080a014 	movui	r2,640
  809774:	00809c3c 	xorhi	r2,zero,624
  809778:	008097c8 	cmpgei	r2,zero,607
  80977c:	008097c8 	cmpgei	r2,zero,607
  809780:	008097c8 	cmpgei	r2,zero,607
  809784:	0080a120 	cmpeqi	r2,zero,644
  809788:	00809c3c 	xorhi	r2,zero,624
  80978c:	008097c8 	cmpgei	r2,zero,607
  809790:	008097c8 	cmpgei	r2,zero,607
  809794:	0080a074 	movhi	r2,641
  809798:	008097c8 	cmpgei	r2,zero,607
  80979c:	0080a04c 	andi	r2,zero,641
  8097a0:	00809cf0 	cmpltui	r2,zero,627
  8097a4:	0080a0dc 	xori	r2,zero,643
  8097a8:	0080a134 	movhi	r2,644
  8097ac:	008097c8 	cmpgei	r2,zero,607
  8097b0:	0080a090 	cmplti	r2,zero,642
  8097b4:	008097c8 	cmpgei	r2,zero,607
  8097b8:	00809d3c 	xorhi	r2,zero,628
  8097bc:	008097c8 	cmpgei	r2,zero,607
  8097c0:	008097c8 	cmpgei	r2,zero,607
  8097c4:	00809fb4 	movhi	r2,638
  8097c8:	9800c226 	beq	r19,zero,809ad4 <___vfiprintf_internal_r+0x670>
  8097cc:	07000044 	movi	fp,1
  8097d0:	d9000404 	addi	r4,sp,16
  8097d4:	d9c13515 	stw	r7,1236(sp)
  8097d8:	d9013c15 	stw	r4,1264(sp)
  8097dc:	df013715 	stw	fp,1244(sp)
  8097e0:	dcc00405 	stb	r19,16(sp)
  8097e4:	d8000005 	stb	zero,0(sp)
  8097e8:	d8013815 	stw	zero,1248(sp)
  8097ec:	d9813b17 	ldw	r6,1260(sp)
  8097f0:	3080008c 	andi	r2,r6,2
  8097f4:	1005003a 	cmpeq	r2,r2,zero
  8097f8:	d8813e15 	stw	r2,1272(sp)
  8097fc:	1000011e 	bne	r2,zero,809804 <___vfiprintf_internal_r+0x3a0>
  809800:	e7000084 	addi	fp,fp,2
  809804:	d8813b17 	ldw	r2,1260(sp)
  809808:	1080210c 	andi	r2,r2,132
  80980c:	d8813d15 	stw	r2,1268(sp)
  809810:	10002a1e 	bne	r2,zero,8098bc <___vfiprintf_internal_r+0x458>
  809814:	d8c13917 	ldw	r3,1252(sp)
  809818:	1f21c83a 	sub	r16,r3,fp
  80981c:	0400270e 	bge	zero,r16,8098bc <___vfiprintf_internal_r+0x458>
  809820:	00800404 	movi	r2,16
  809824:	1402cf0e 	bge	r2,r16,80a364 <___vfiprintf_internal_r+0xf00>
  809828:	d9400317 	ldw	r5,12(sp)
  80982c:	d9000217 	ldw	r4,8(sp)
  809830:	1023883a 	mov	r17,r2
  809834:	05c020b4 	movhi	r23,130
  809838:	bde1f704 	addi	r23,r23,-30756
  80983c:	04c001c4 	movi	r19,7
  809840:	00000306 	br	809850 <___vfiprintf_internal_r+0x3ec>
  809844:	843ffc04 	addi	r16,r16,-16
  809848:	94800204 	addi	r18,r18,8
  80984c:	8c00110e 	bge	r17,r16,809894 <___vfiprintf_internal_r+0x430>
  809850:	29400404 	addi	r5,r5,16
  809854:	21000044 	addi	r4,r4,1
  809858:	95c00015 	stw	r23,0(r18)
  80985c:	94400115 	stw	r17,4(r18)
  809860:	d9400315 	stw	r5,12(sp)
  809864:	d9000215 	stw	r4,8(sp)
  809868:	993ff60e 	bge	r19,r4,809844 <___vfiprintf_internal_r+0x3e0>
  80986c:	b009883a 	mov	r4,r22
  809870:	a80b883a 	mov	r5,r21
  809874:	d9800104 	addi	r6,sp,4
  809878:	080940c0 	call	80940c <__sprint_r>
  80987c:	1000981e 	bne	r2,zero,809ae0 <___vfiprintf_internal_r+0x67c>
  809880:	843ffc04 	addi	r16,r16,-16
  809884:	d9400317 	ldw	r5,12(sp)
  809888:	d9000217 	ldw	r4,8(sp)
  80988c:	dc800e04 	addi	r18,sp,56
  809890:	8c3fef16 	blt	r17,r16,809850 <___vfiprintf_internal_r+0x3ec>
  809894:	2c0b883a 	add	r5,r5,r16
  809898:	21000044 	addi	r4,r4,1
  80989c:	008001c4 	movi	r2,7
  8098a0:	95c00015 	stw	r23,0(r18)
  8098a4:	94000115 	stw	r16,4(r18)
  8098a8:	d9400315 	stw	r5,12(sp)
  8098ac:	d9000215 	stw	r4,8(sp)
  8098b0:	11015616 	blt	r2,r4,809e0c <___vfiprintf_internal_r+0x9a8>
  8098b4:	94800204 	addi	r18,r18,8
  8098b8:	00000206 	br	8098c4 <___vfiprintf_internal_r+0x460>
  8098bc:	d9400317 	ldw	r5,12(sp)
  8098c0:	d9000217 	ldw	r4,8(sp)
  8098c4:	d8800007 	ldb	r2,0(sp)
  8098c8:	10000a26 	beq	r2,zero,8098f4 <___vfiprintf_internal_r+0x490>
  8098cc:	00800044 	movi	r2,1
  8098d0:	29400044 	addi	r5,r5,1
  8098d4:	21000044 	addi	r4,r4,1
  8098d8:	90800115 	stw	r2,4(r18)
  8098dc:	008001c4 	movi	r2,7
  8098e0:	96c00015 	stw	sp,0(r18)
  8098e4:	d9400315 	stw	r5,12(sp)
  8098e8:	d9000215 	stw	r4,8(sp)
  8098ec:	11013516 	blt	r2,r4,809dc4 <___vfiprintf_internal_r+0x960>
  8098f0:	94800204 	addi	r18,r18,8
  8098f4:	d9813e17 	ldw	r6,1272(sp)
  8098f8:	30000b1e 	bne	r6,zero,809928 <___vfiprintf_internal_r+0x4c4>
  8098fc:	d8800044 	addi	r2,sp,1
  809900:	29400084 	addi	r5,r5,2
  809904:	21000044 	addi	r4,r4,1
  809908:	90800015 	stw	r2,0(r18)
  80990c:	00c00084 	movi	r3,2
  809910:	008001c4 	movi	r2,7
  809914:	90c00115 	stw	r3,4(r18)
  809918:	d9400315 	stw	r5,12(sp)
  80991c:	d9000215 	stw	r4,8(sp)
  809920:	11013116 	blt	r2,r4,809de8 <___vfiprintf_internal_r+0x984>
  809924:	94800204 	addi	r18,r18,8
  809928:	d8c13d17 	ldw	r3,1268(sp)
  80992c:	00802004 	movi	r2,128
  809930:	18807126 	beq	r3,r2,809af8 <___vfiprintf_internal_r+0x694>
  809934:	d8813817 	ldw	r2,1248(sp)
  809938:	d8c13717 	ldw	r3,1244(sp)
  80993c:	10e1c83a 	sub	r16,r2,r3
  809940:	0400240e 	bge	zero,r16,8099d4 <___vfiprintf_internal_r+0x570>
  809944:	00800404 	movi	r2,16
  809948:	1402580e 	bge	r2,r16,80a2ac <___vfiprintf_internal_r+0xe48>
  80994c:	1023883a 	mov	r17,r2
  809950:	05c020b4 	movhi	r23,130
  809954:	bde1f304 	addi	r23,r23,-30772
  809958:	04c001c4 	movi	r19,7
  80995c:	00000306 	br	80996c <___vfiprintf_internal_r+0x508>
  809960:	843ffc04 	addi	r16,r16,-16
  809964:	94800204 	addi	r18,r18,8
  809968:	8c00110e 	bge	r17,r16,8099b0 <___vfiprintf_internal_r+0x54c>
  80996c:	29400404 	addi	r5,r5,16
  809970:	21000044 	addi	r4,r4,1
  809974:	95c00015 	stw	r23,0(r18)
  809978:	94400115 	stw	r17,4(r18)
  80997c:	d9400315 	stw	r5,12(sp)
  809980:	d9000215 	stw	r4,8(sp)
  809984:	993ff60e 	bge	r19,r4,809960 <___vfiprintf_internal_r+0x4fc>
  809988:	b009883a 	mov	r4,r22
  80998c:	a80b883a 	mov	r5,r21
  809990:	d9800104 	addi	r6,sp,4
  809994:	080940c0 	call	80940c <__sprint_r>
  809998:	1000511e 	bne	r2,zero,809ae0 <___vfiprintf_internal_r+0x67c>
  80999c:	843ffc04 	addi	r16,r16,-16
  8099a0:	d9400317 	ldw	r5,12(sp)
  8099a4:	d9000217 	ldw	r4,8(sp)
  8099a8:	dc800e04 	addi	r18,sp,56
  8099ac:	8c3fef16 	blt	r17,r16,80996c <___vfiprintf_internal_r+0x508>
  8099b0:	2c0b883a 	add	r5,r5,r16
  8099b4:	21000044 	addi	r4,r4,1
  8099b8:	008001c4 	movi	r2,7
  8099bc:	95c00015 	stw	r23,0(r18)
  8099c0:	94000115 	stw	r16,4(r18)
  8099c4:	d9400315 	stw	r5,12(sp)
  8099c8:	d9000215 	stw	r4,8(sp)
  8099cc:	1100eb16 	blt	r2,r4,809d7c <___vfiprintf_internal_r+0x918>
  8099d0:	94800204 	addi	r18,r18,8
  8099d4:	d9813717 	ldw	r6,1244(sp)
  8099d8:	d8813c17 	ldw	r2,1264(sp)
  8099dc:	21000044 	addi	r4,r4,1
  8099e0:	298b883a 	add	r5,r5,r6
  8099e4:	90800015 	stw	r2,0(r18)
  8099e8:	008001c4 	movi	r2,7
  8099ec:	91800115 	stw	r6,4(r18)
  8099f0:	d9400315 	stw	r5,12(sp)
  8099f4:	d9000215 	stw	r4,8(sp)
  8099f8:	11006b16 	blt	r2,r4,809ba8 <___vfiprintf_internal_r+0x744>
  8099fc:	90c00204 	addi	r3,r18,8
  809a00:	d9013b17 	ldw	r4,1260(sp)
  809a04:	2080010c 	andi	r2,r4,4
  809a08:	10002726 	beq	r2,zero,809aa8 <___vfiprintf_internal_r+0x644>
  809a0c:	d9813917 	ldw	r6,1252(sp)
  809a10:	3721c83a 	sub	r16,r6,fp
  809a14:	0400240e 	bge	zero,r16,809aa8 <___vfiprintf_internal_r+0x644>
  809a18:	00800404 	movi	r2,16
  809a1c:	1402790e 	bge	r2,r16,80a404 <___vfiprintf_internal_r+0xfa0>
  809a20:	d9000217 	ldw	r4,8(sp)
  809a24:	1023883a 	mov	r17,r2
  809a28:	05c020b4 	movhi	r23,130
  809a2c:	bde1f704 	addi	r23,r23,-30756
  809a30:	048001c4 	movi	r18,7
  809a34:	00000306 	br	809a44 <___vfiprintf_internal_r+0x5e0>
  809a38:	843ffc04 	addi	r16,r16,-16
  809a3c:	18c00204 	addi	r3,r3,8
  809a40:	8c00110e 	bge	r17,r16,809a88 <___vfiprintf_internal_r+0x624>
  809a44:	29400404 	addi	r5,r5,16
  809a48:	21000044 	addi	r4,r4,1
  809a4c:	1dc00015 	stw	r23,0(r3)
  809a50:	1c400115 	stw	r17,4(r3)
  809a54:	d9400315 	stw	r5,12(sp)
  809a58:	d9000215 	stw	r4,8(sp)
  809a5c:	913ff60e 	bge	r18,r4,809a38 <___vfiprintf_internal_r+0x5d4>
  809a60:	b009883a 	mov	r4,r22
  809a64:	a80b883a 	mov	r5,r21
  809a68:	d9800104 	addi	r6,sp,4
  809a6c:	080940c0 	call	80940c <__sprint_r>
  809a70:	10001b1e 	bne	r2,zero,809ae0 <___vfiprintf_internal_r+0x67c>
  809a74:	843ffc04 	addi	r16,r16,-16
  809a78:	d9400317 	ldw	r5,12(sp)
  809a7c:	d9000217 	ldw	r4,8(sp)
  809a80:	d8c00e04 	addi	r3,sp,56
  809a84:	8c3fef16 	blt	r17,r16,809a44 <___vfiprintf_internal_r+0x5e0>
  809a88:	2c0b883a 	add	r5,r5,r16
  809a8c:	21000044 	addi	r4,r4,1
  809a90:	008001c4 	movi	r2,7
  809a94:	1dc00015 	stw	r23,0(r3)
  809a98:	1c000115 	stw	r16,4(r3)
  809a9c:	d9400315 	stw	r5,12(sp)
  809aa0:	d9000215 	stw	r4,8(sp)
  809aa4:	11005b16 	blt	r2,r4,809c14 <___vfiprintf_internal_r+0x7b0>
  809aa8:	d9013917 	ldw	r4,1252(sp)
  809aac:	2700010e 	bge	r4,fp,809ab4 <___vfiprintf_internal_r+0x650>
  809ab0:	e009883a 	mov	r4,fp
  809ab4:	d8813a17 	ldw	r2,1256(sp)
  809ab8:	1105883a 	add	r2,r2,r4
  809abc:	d8813a15 	stw	r2,1256(sp)
  809ac0:	2800411e 	bne	r5,zero,809bc8 <___vfiprintf_internal_r+0x764>
  809ac4:	d9c13517 	ldw	r7,1236(sp)
  809ac8:	dc800e04 	addi	r18,sp,56
  809acc:	d8000215 	stw	zero,8(sp)
  809ad0:	003eb506 	br	8095a8 <___vfiprintf_internal_r+0x144>
  809ad4:	d8800317 	ldw	r2,12(sp)
  809ad8:	1002591e 	bne	r2,zero,80a440 <___vfiprintf_internal_r+0xfdc>
  809adc:	d8000215 	stw	zero,8(sp)
  809ae0:	a880030b 	ldhu	r2,12(r21)
  809ae4:	1080100c 	andi	r2,r2,64
  809ae8:	103e9a26 	beq	r2,zero,809554 <___vfiprintf_internal_r+0xf0>
  809aec:	00ffffc4 	movi	r3,-1
  809af0:	d8c13a15 	stw	r3,1256(sp)
  809af4:	003e9706 	br	809554 <___vfiprintf_internal_r+0xf0>
  809af8:	d9813917 	ldw	r6,1252(sp)
  809afc:	3721c83a 	sub	r16,r6,fp
  809b00:	043f8c0e 	bge	zero,r16,809934 <___vfiprintf_internal_r+0x4d0>
  809b04:	00800404 	movi	r2,16
  809b08:	1402530e 	bge	r2,r16,80a458 <___vfiprintf_internal_r+0xff4>
  809b0c:	1023883a 	mov	r17,r2
  809b10:	05c020b4 	movhi	r23,130
  809b14:	bde1f304 	addi	r23,r23,-30772
  809b18:	04c001c4 	movi	r19,7
  809b1c:	00000306 	br	809b2c <___vfiprintf_internal_r+0x6c8>
  809b20:	843ffc04 	addi	r16,r16,-16
  809b24:	94800204 	addi	r18,r18,8
  809b28:	8c00110e 	bge	r17,r16,809b70 <___vfiprintf_internal_r+0x70c>
  809b2c:	29400404 	addi	r5,r5,16
  809b30:	21000044 	addi	r4,r4,1
  809b34:	95c00015 	stw	r23,0(r18)
  809b38:	94400115 	stw	r17,4(r18)
  809b3c:	d9400315 	stw	r5,12(sp)
  809b40:	d9000215 	stw	r4,8(sp)
  809b44:	993ff60e 	bge	r19,r4,809b20 <___vfiprintf_internal_r+0x6bc>
  809b48:	b009883a 	mov	r4,r22
  809b4c:	a80b883a 	mov	r5,r21
  809b50:	d9800104 	addi	r6,sp,4
  809b54:	080940c0 	call	80940c <__sprint_r>
  809b58:	103fe11e 	bne	r2,zero,809ae0 <___vfiprintf_internal_r+0x67c>
  809b5c:	843ffc04 	addi	r16,r16,-16
  809b60:	d9400317 	ldw	r5,12(sp)
  809b64:	d9000217 	ldw	r4,8(sp)
  809b68:	dc800e04 	addi	r18,sp,56
  809b6c:	8c3fef16 	blt	r17,r16,809b2c <___vfiprintf_internal_r+0x6c8>
  809b70:	2c0b883a 	add	r5,r5,r16
  809b74:	21000044 	addi	r4,r4,1
  809b78:	008001c4 	movi	r2,7
  809b7c:	95c00015 	stw	r23,0(r18)
  809b80:	94000115 	stw	r16,4(r18)
  809b84:	d9400315 	stw	r5,12(sp)
  809b88:	d9000215 	stw	r4,8(sp)
  809b8c:	1100a816 	blt	r2,r4,809e30 <___vfiprintf_internal_r+0x9cc>
  809b90:	94800204 	addi	r18,r18,8
  809b94:	003f6706 	br	809934 <___vfiprintf_internal_r+0x4d0>
  809b98:	d9c13f15 	stw	r7,1276(sp)
  809b9c:	0806e500 	call	806e50 <__sinit>
  809ba0:	d9c13f17 	ldw	r7,1276(sp)
  809ba4:	003e4006 	br	8094a8 <___vfiprintf_internal_r+0x44>
  809ba8:	b009883a 	mov	r4,r22
  809bac:	a80b883a 	mov	r5,r21
  809bb0:	d9800104 	addi	r6,sp,4
  809bb4:	080940c0 	call	80940c <__sprint_r>
  809bb8:	103fc91e 	bne	r2,zero,809ae0 <___vfiprintf_internal_r+0x67c>
  809bbc:	d9400317 	ldw	r5,12(sp)
  809bc0:	d8c00e04 	addi	r3,sp,56
  809bc4:	003f8e06 	br	809a00 <___vfiprintf_internal_r+0x59c>
  809bc8:	b009883a 	mov	r4,r22
  809bcc:	a80b883a 	mov	r5,r21
  809bd0:	d9800104 	addi	r6,sp,4
  809bd4:	080940c0 	call	80940c <__sprint_r>
  809bd8:	103fba26 	beq	r2,zero,809ac4 <___vfiprintf_internal_r+0x660>
  809bdc:	003fc006 	br	809ae0 <___vfiprintf_internal_r+0x67c>
  809be0:	b009883a 	mov	r4,r22
  809be4:	a80b883a 	mov	r5,r21
  809be8:	d9c13f15 	stw	r7,1276(sp)
  809bec:	080526c0 	call	80526c <__swsetup_r>
  809bf0:	d9c13f17 	ldw	r7,1276(sp)
  809bf4:	103e3126 	beq	r2,zero,8094bc <___vfiprintf_internal_r+0x58>
  809bf8:	003fbc06 	br	809aec <___vfiprintf_internal_r+0x688>
  809bfc:	00bfffc4 	movi	r2,-1
  809c00:	d8813a15 	stw	r2,1256(sp)
  809c04:	d880210b 	ldhu	r2,132(sp)
  809c08:	1080100c 	andi	r2,r2,64
  809c0c:	103e4e1e 	bne	r2,zero,809548 <___vfiprintf_internal_r+0xe4>
  809c10:	003e5006 	br	809554 <___vfiprintf_internal_r+0xf0>
  809c14:	b009883a 	mov	r4,r22
  809c18:	a80b883a 	mov	r5,r21
  809c1c:	d9800104 	addi	r6,sp,4
  809c20:	080940c0 	call	80940c <__sprint_r>
  809c24:	103fae1e 	bne	r2,zero,809ae0 <___vfiprintf_internal_r+0x67c>
  809c28:	d9400317 	ldw	r5,12(sp)
  809c2c:	003f9e06 	br	809aa8 <___vfiprintf_internal_r+0x644>
  809c30:	d8813b17 	ldw	r2,1260(sp)
  809c34:	10800414 	ori	r2,r2,16
  809c38:	d8813b15 	stw	r2,1260(sp)
  809c3c:	d8c13b17 	ldw	r3,1260(sp)
  809c40:	1880080c 	andi	r2,r3,32
  809c44:	10009c1e 	bne	r2,zero,809eb8 <___vfiprintf_internal_r+0xa54>
  809c48:	d9413b17 	ldw	r5,1260(sp)
  809c4c:	2880040c 	andi	r2,r5,16
  809c50:	1001b91e 	bne	r2,zero,80a338 <___vfiprintf_internal_r+0xed4>
  809c54:	d9813b17 	ldw	r6,1260(sp)
  809c58:	3080100c 	andi	r2,r6,64
  809c5c:	1001b626 	beq	r2,zero,80a338 <___vfiprintf_internal_r+0xed4>
  809c60:	3880000f 	ldh	r2,0(r7)
  809c64:	39c00104 	addi	r7,r7,4
  809c68:	d9c13515 	stw	r7,1236(sp)
  809c6c:	1023d7fa 	srai	r17,r2,31
  809c70:	1021883a 	mov	r16,r2
  809c74:	8801e716 	blt	r17,zero,80a414 <___vfiprintf_internal_r+0xfb0>
  809c78:	01000044 	movi	r4,1
  809c7c:	b8000416 	blt	r23,zero,809c90 <___vfiprintf_internal_r+0x82c>
  809c80:	d9413b17 	ldw	r5,1260(sp)
  809c84:	00bfdfc4 	movi	r2,-129
  809c88:	288a703a 	and	r5,r5,r2
  809c8c:	d9413b15 	stw	r5,1260(sp)
  809c90:	8444b03a 	or	r2,r16,r17
  809c94:	10012e1e 	bne	r2,zero,80a150 <___vfiprintf_internal_r+0xcec>
  809c98:	b8012d1e 	bne	r23,zero,80a150 <___vfiprintf_internal_r+0xcec>
  809c9c:	20803fcc 	andi	r2,r4,255
  809ca0:	10018526 	beq	r2,zero,80a2b8 <___vfiprintf_internal_r+0xe54>
  809ca4:	d8c00e04 	addi	r3,sp,56
  809ca8:	df000404 	addi	fp,sp,16
  809cac:	d8c13c15 	stw	r3,1264(sp)
  809cb0:	d8c13c17 	ldw	r3,1264(sp)
  809cb4:	ddc13815 	stw	r23,1248(sp)
  809cb8:	e0c5c83a 	sub	r2,fp,r3
  809cbc:	10800a04 	addi	r2,r2,40
  809cc0:	d8813715 	stw	r2,1244(sp)
  809cc4:	df013817 	ldw	fp,1248(sp)
  809cc8:	d9413717 	ldw	r5,1244(sp)
  809ccc:	e140010e 	bge	fp,r5,809cd4 <___vfiprintf_internal_r+0x870>
  809cd0:	2839883a 	mov	fp,r5
  809cd4:	d8800007 	ldb	r2,0(sp)
  809cd8:	103ec426 	beq	r2,zero,8097ec <___vfiprintf_internal_r+0x388>
  809cdc:	e7000044 	addi	fp,fp,1
  809ce0:	003ec206 	br	8097ec <___vfiprintf_internal_r+0x388>
  809ce4:	d9813b17 	ldw	r6,1260(sp)
  809ce8:	31800414 	ori	r6,r6,16
  809cec:	d9813b15 	stw	r6,1260(sp)
  809cf0:	d8c13b17 	ldw	r3,1260(sp)
  809cf4:	1880080c 	andi	r2,r3,32
  809cf8:	1000681e 	bne	r2,zero,809e9c <___vfiprintf_internal_r+0xa38>
  809cfc:	d9413b17 	ldw	r5,1260(sp)
  809d00:	2880040c 	andi	r2,r5,16
  809d04:	10017e1e 	bne	r2,zero,80a300 <___vfiprintf_internal_r+0xe9c>
  809d08:	d9813b17 	ldw	r6,1260(sp)
  809d0c:	3080100c 	andi	r2,r6,64
  809d10:	10017b26 	beq	r2,zero,80a300 <___vfiprintf_internal_r+0xe9c>
  809d14:	3c00000b 	ldhu	r16,0(r7)
  809d18:	0009883a 	mov	r4,zero
  809d1c:	39c00104 	addi	r7,r7,4
  809d20:	0023883a 	mov	r17,zero
  809d24:	d9c13515 	stw	r7,1236(sp)
  809d28:	d8000005 	stb	zero,0(sp)
  809d2c:	003fd306 	br	809c7c <___vfiprintf_internal_r+0x818>
  809d30:	d8813b17 	ldw	r2,1260(sp)
  809d34:	10800414 	ori	r2,r2,16
  809d38:	d8813b15 	stw	r2,1260(sp)
  809d3c:	d8c13b17 	ldw	r3,1260(sp)
  809d40:	1880080c 	andi	r2,r3,32
  809d44:	10004e1e 	bne	r2,zero,809e80 <___vfiprintf_internal_r+0xa1c>
  809d48:	d9413b17 	ldw	r5,1260(sp)
  809d4c:	2880040c 	andi	r2,r5,16
  809d50:	1001721e 	bne	r2,zero,80a31c <___vfiprintf_internal_r+0xeb8>
  809d54:	d9813b17 	ldw	r6,1260(sp)
  809d58:	3080100c 	andi	r2,r6,64
  809d5c:	10016f26 	beq	r2,zero,80a31c <___vfiprintf_internal_r+0xeb8>
  809d60:	3c00000b 	ldhu	r16,0(r7)
  809d64:	01000044 	movi	r4,1
  809d68:	39c00104 	addi	r7,r7,4
  809d6c:	0023883a 	mov	r17,zero
  809d70:	d9c13515 	stw	r7,1236(sp)
  809d74:	d8000005 	stb	zero,0(sp)
  809d78:	003fc006 	br	809c7c <___vfiprintf_internal_r+0x818>
  809d7c:	b009883a 	mov	r4,r22
  809d80:	a80b883a 	mov	r5,r21
  809d84:	d9800104 	addi	r6,sp,4
  809d88:	080940c0 	call	80940c <__sprint_r>
  809d8c:	103f541e 	bne	r2,zero,809ae0 <___vfiprintf_internal_r+0x67c>
  809d90:	d9400317 	ldw	r5,12(sp)
  809d94:	d9000217 	ldw	r4,8(sp)
  809d98:	dc800e04 	addi	r18,sp,56
  809d9c:	003f0d06 	br	8099d4 <___vfiprintf_internal_r+0x570>
  809da0:	b009883a 	mov	r4,r22
  809da4:	a80b883a 	mov	r5,r21
  809da8:	d9800104 	addi	r6,sp,4
  809dac:	d9c13f15 	stw	r7,1276(sp)
  809db0:	080940c0 	call	80940c <__sprint_r>
  809db4:	d9c13f17 	ldw	r7,1276(sp)
  809db8:	103f491e 	bne	r2,zero,809ae0 <___vfiprintf_internal_r+0x67c>
  809dbc:	dc800e04 	addi	r18,sp,56
  809dc0:	003e1006 	br	809604 <___vfiprintf_internal_r+0x1a0>
  809dc4:	b009883a 	mov	r4,r22
  809dc8:	a80b883a 	mov	r5,r21
  809dcc:	d9800104 	addi	r6,sp,4
  809dd0:	080940c0 	call	80940c <__sprint_r>
  809dd4:	103f421e 	bne	r2,zero,809ae0 <___vfiprintf_internal_r+0x67c>
  809dd8:	d9400317 	ldw	r5,12(sp)
  809ddc:	d9000217 	ldw	r4,8(sp)
  809de0:	dc800e04 	addi	r18,sp,56
  809de4:	003ec306 	br	8098f4 <___vfiprintf_internal_r+0x490>
  809de8:	b009883a 	mov	r4,r22
  809dec:	a80b883a 	mov	r5,r21
  809df0:	d9800104 	addi	r6,sp,4
  809df4:	080940c0 	call	80940c <__sprint_r>
  809df8:	103f391e 	bne	r2,zero,809ae0 <___vfiprintf_internal_r+0x67c>
  809dfc:	d9400317 	ldw	r5,12(sp)
  809e00:	d9000217 	ldw	r4,8(sp)
  809e04:	dc800e04 	addi	r18,sp,56
  809e08:	003ec706 	br	809928 <___vfiprintf_internal_r+0x4c4>
  809e0c:	b009883a 	mov	r4,r22
  809e10:	a80b883a 	mov	r5,r21
  809e14:	d9800104 	addi	r6,sp,4
  809e18:	080940c0 	call	80940c <__sprint_r>
  809e1c:	103f301e 	bne	r2,zero,809ae0 <___vfiprintf_internal_r+0x67c>
  809e20:	d9400317 	ldw	r5,12(sp)
  809e24:	d9000217 	ldw	r4,8(sp)
  809e28:	dc800e04 	addi	r18,sp,56
  809e2c:	003ea506 	br	8098c4 <___vfiprintf_internal_r+0x460>
  809e30:	b009883a 	mov	r4,r22
  809e34:	a80b883a 	mov	r5,r21
  809e38:	d9800104 	addi	r6,sp,4
  809e3c:	080940c0 	call	80940c <__sprint_r>
  809e40:	103f271e 	bne	r2,zero,809ae0 <___vfiprintf_internal_r+0x67c>
  809e44:	d9400317 	ldw	r5,12(sp)
  809e48:	d9000217 	ldw	r4,8(sp)
  809e4c:	dc800e04 	addi	r18,sp,56
  809e50:	003eb806 	br	809934 <___vfiprintf_internal_r+0x4d0>
  809e54:	38800017 	ldw	r2,0(r7)
  809e58:	39c00104 	addi	r7,r7,4
  809e5c:	d8813915 	stw	r2,1252(sp)
  809e60:	1000b90e 	bge	r2,zero,80a148 <___vfiprintf_internal_r+0xce4>
  809e64:	0085c83a 	sub	r2,zero,r2
  809e68:	d8813915 	stw	r2,1252(sp)
  809e6c:	d9013b17 	ldw	r4,1260(sp)
  809e70:	a0c00007 	ldb	r3,0(r20)
  809e74:	21000114 	ori	r4,r4,4
  809e78:	d9013b15 	stw	r4,1260(sp)
  809e7c:	003ded06 	br	809634 <___vfiprintf_internal_r+0x1d0>
  809e80:	3c000017 	ldw	r16,0(r7)
  809e84:	3c400117 	ldw	r17,4(r7)
  809e88:	39000204 	addi	r4,r7,8
  809e8c:	d9013515 	stw	r4,1236(sp)
  809e90:	01000044 	movi	r4,1
  809e94:	d8000005 	stb	zero,0(sp)
  809e98:	003f7806 	br	809c7c <___vfiprintf_internal_r+0x818>
  809e9c:	3c000017 	ldw	r16,0(r7)
  809ea0:	3c400117 	ldw	r17,4(r7)
  809ea4:	39000204 	addi	r4,r7,8
  809ea8:	d9013515 	stw	r4,1236(sp)
  809eac:	0009883a 	mov	r4,zero
  809eb0:	d8000005 	stb	zero,0(sp)
  809eb4:	003f7106 	br	809c7c <___vfiprintf_internal_r+0x818>
  809eb8:	3c000017 	ldw	r16,0(r7)
  809ebc:	3c400117 	ldw	r17,4(r7)
  809ec0:	39000204 	addi	r4,r7,8
  809ec4:	d9013515 	stw	r4,1236(sp)
  809ec8:	003f6a06 	br	809c74 <___vfiprintf_internal_r+0x810>
  809ecc:	d8800007 	ldb	r2,0(sp)
  809ed0:	10009d1e 	bne	r2,zero,80a148 <___vfiprintf_internal_r+0xce4>
  809ed4:	00800804 	movi	r2,32
  809ed8:	d8800005 	stb	r2,0(sp)
  809edc:	a0c00007 	ldb	r3,0(r20)
  809ee0:	003dd406 	br	809634 <___vfiprintf_internal_r+0x1d0>
  809ee4:	0009883a 	mov	r4,zero
  809ee8:	04000244 	movi	r16,9
  809eec:	01400284 	movi	r5,10
  809ef0:	d9c13f15 	stw	r7,1276(sp)
  809ef4:	08019440 	call	801944 <__mulsi3>
  809ef8:	9885883a 	add	r2,r19,r2
  809efc:	a4c00007 	ldb	r19,0(r20)
  809f00:	113ff404 	addi	r4,r2,-48
  809f04:	a5000044 	addi	r20,r20,1
  809f08:	98bff404 	addi	r2,r19,-48
  809f0c:	d9c13f17 	ldw	r7,1276(sp)
  809f10:	80bff62e 	bgeu	r16,r2,809eec <___vfiprintf_internal_r+0xa88>
  809f14:	d9013915 	stw	r4,1252(sp)
  809f18:	003dc806 	br	80963c <___vfiprintf_internal_r+0x1d8>
  809f1c:	d9413b17 	ldw	r5,1260(sp)
  809f20:	a0c00007 	ldb	r3,0(r20)
  809f24:	29402014 	ori	r5,r5,128
  809f28:	d9413b15 	stw	r5,1260(sp)
  809f2c:	003dc106 	br	809634 <___vfiprintf_internal_r+0x1d0>
  809f30:	a0c00007 	ldb	r3,0(r20)
  809f34:	00800a84 	movi	r2,42
  809f38:	a5000044 	addi	r20,r20,1
  809f3c:	18817326 	beq	r3,r2,80a50c <___vfiprintf_internal_r+0x10a8>
  809f40:	1827883a 	mov	r19,r3
  809f44:	18bff404 	addi	r2,r3,-48
  809f48:	00c00244 	movi	r3,9
  809f4c:	18816d36 	bltu	r3,r2,80a504 <___vfiprintf_internal_r+0x10a0>
  809f50:	1821883a 	mov	r16,r3
  809f54:	0009883a 	mov	r4,zero
  809f58:	01400284 	movi	r5,10
  809f5c:	d9c13f15 	stw	r7,1276(sp)
  809f60:	08019440 	call	801944 <__mulsi3>
  809f64:	14c5883a 	add	r2,r2,r19
  809f68:	a4c00007 	ldb	r19,0(r20)
  809f6c:	113ff404 	addi	r4,r2,-48
  809f70:	a5000044 	addi	r20,r20,1
  809f74:	98bff404 	addi	r2,r19,-48
  809f78:	d9c13f17 	ldw	r7,1276(sp)
  809f7c:	80bff62e 	bgeu	r16,r2,809f58 <___vfiprintf_internal_r+0xaf4>
  809f80:	202f883a 	mov	r23,r4
  809f84:	203dad0e 	bge	r4,zero,80963c <___vfiprintf_internal_r+0x1d8>
  809f88:	05ffffc4 	movi	r23,-1
  809f8c:	003dab06 	br	80963c <___vfiprintf_internal_r+0x1d8>
  809f90:	d9813b17 	ldw	r6,1260(sp)
  809f94:	a0c00007 	ldb	r3,0(r20)
  809f98:	31800054 	ori	r6,r6,1
  809f9c:	d9813b15 	stw	r6,1260(sp)
  809fa0:	003da406 	br	809634 <___vfiprintf_internal_r+0x1d0>
  809fa4:	00800ac4 	movi	r2,43
  809fa8:	d8800005 	stb	r2,0(sp)
  809fac:	a0c00007 	ldb	r3,0(r20)
  809fb0:	003da006 	br	809634 <___vfiprintf_internal_r+0x1d0>
  809fb4:	014020b4 	movhi	r5,130
  809fb8:	29617604 	addi	r5,r5,-31272
  809fbc:	d9413615 	stw	r5,1240(sp)
  809fc0:	d8c13b17 	ldw	r3,1260(sp)
  809fc4:	1880080c 	andi	r2,r3,32
  809fc8:	1000c226 	beq	r2,zero,80a2d4 <___vfiprintf_internal_r+0xe70>
  809fcc:	3c000017 	ldw	r16,0(r7)
  809fd0:	3c400117 	ldw	r17,4(r7)
  809fd4:	39000204 	addi	r4,r7,8
  809fd8:	d9013515 	stw	r4,1236(sp)
  809fdc:	d8c13b17 	ldw	r3,1260(sp)
  809fe0:	1880004c 	andi	r2,r3,1
  809fe4:	1005003a 	cmpeq	r2,r2,zero
  809fe8:	1000931e 	bne	r2,zero,80a238 <___vfiprintf_internal_r+0xdd4>
  809fec:	8444b03a 	or	r2,r16,r17
  809ff0:	10009126 	beq	r2,zero,80a238 <___vfiprintf_internal_r+0xdd4>
  809ff4:	18c00094 	ori	r3,r3,2
  809ff8:	00800c04 	movi	r2,48
  809ffc:	01000084 	movi	r4,2
  80a000:	d8c13b15 	stw	r3,1260(sp)
  80a004:	d8800045 	stb	r2,1(sp)
  80a008:	dcc00085 	stb	r19,2(sp)
  80a00c:	d8000005 	stb	zero,0(sp)
  80a010:	003f1a06 	br	809c7c <___vfiprintf_internal_r+0x818>
  80a014:	38800017 	ldw	r2,0(r7)
  80a018:	07000044 	movi	fp,1
  80a01c:	39c00104 	addi	r7,r7,4
  80a020:	d9800404 	addi	r6,sp,16
  80a024:	d9c13515 	stw	r7,1236(sp)
  80a028:	d9813c15 	stw	r6,1264(sp)
  80a02c:	df013715 	stw	fp,1244(sp)
  80a030:	d8800405 	stb	r2,16(sp)
  80a034:	d8000005 	stb	zero,0(sp)
  80a038:	003deb06 	br	8097e8 <___vfiprintf_internal_r+0x384>
  80a03c:	008020b4 	movhi	r2,130
  80a040:	10a18104 	addi	r2,r2,-31228
  80a044:	d8813615 	stw	r2,1240(sp)
  80a048:	003fdd06 	br	809fc0 <___vfiprintf_internal_r+0xb5c>
  80a04c:	d8c13b17 	ldw	r3,1260(sp)
  80a050:	1880080c 	andi	r2,r3,32
  80a054:	1000e326 	beq	r2,zero,80a3e4 <___vfiprintf_internal_r+0xf80>
  80a058:	d9013a17 	ldw	r4,1256(sp)
  80a05c:	38800017 	ldw	r2,0(r7)
  80a060:	39c00104 	addi	r7,r7,4
  80a064:	2007d7fa 	srai	r3,r4,31
  80a068:	11000015 	stw	r4,0(r2)
  80a06c:	10c00115 	stw	r3,4(r2)
  80a070:	003d4d06 	br	8095a8 <___vfiprintf_internal_r+0x144>
  80a074:	a0c00007 	ldb	r3,0(r20)
  80a078:	00801b04 	movi	r2,108
  80a07c:	1880f926 	beq	r3,r2,80a464 <___vfiprintf_internal_r+0x1000>
  80a080:	d9013b17 	ldw	r4,1260(sp)
  80a084:	21000414 	ori	r4,r4,16
  80a088:	d9013b15 	stw	r4,1260(sp)
  80a08c:	003d6906 	br	809634 <___vfiprintf_internal_r+0x1d0>
  80a090:	d8000005 	stb	zero,0(sp)
  80a094:	39000017 	ldw	r4,0(r7)
  80a098:	39c00104 	addi	r7,r7,4
  80a09c:	d9c13515 	stw	r7,1236(sp)
  80a0a0:	d9013c15 	stw	r4,1264(sp)
  80a0a4:	20010226 	beq	r4,zero,80a4b0 <___vfiprintf_internal_r+0x104c>
  80a0a8:	b800fc16 	blt	r23,zero,80a49c <___vfiprintf_internal_r+0x1038>
  80a0ac:	d9013c17 	ldw	r4,1264(sp)
  80a0b0:	000b883a 	mov	r5,zero
  80a0b4:	b80d883a 	mov	r6,r23
  80a0b8:	0807d900 	call	807d90 <memchr>
  80a0bc:	10000426 	beq	r2,zero,80a0d0 <___vfiprintf_internal_r+0xc6c>
  80a0c0:	d9813c17 	ldw	r6,1264(sp)
  80a0c4:	1185c83a 	sub	r2,r2,r6
  80a0c8:	d8813715 	stw	r2,1244(sp)
  80a0cc:	b880010e 	bge	r23,r2,80a0d4 <___vfiprintf_internal_r+0xc70>
  80a0d0:	ddc13715 	stw	r23,1244(sp)
  80a0d4:	d8013815 	stw	zero,1248(sp)
  80a0d8:	003efa06 	br	809cc4 <___vfiprintf_internal_r+0x860>
  80a0dc:	d8813b17 	ldw	r2,1260(sp)
  80a0e0:	3c000017 	ldw	r16,0(r7)
  80a0e4:	00c020b4 	movhi	r3,130
  80a0e8:	18e17604 	addi	r3,r3,-31272
  80a0ec:	10800094 	ori	r2,r2,2
  80a0f0:	d8813b15 	stw	r2,1260(sp)
  80a0f4:	39c00104 	addi	r7,r7,4
  80a0f8:	d8c13615 	stw	r3,1240(sp)
  80a0fc:	00800c04 	movi	r2,48
  80a100:	00c01e04 	movi	r3,120
  80a104:	0023883a 	mov	r17,zero
  80a108:	01000084 	movi	r4,2
  80a10c:	d9c13515 	stw	r7,1236(sp)
  80a110:	d8800045 	stb	r2,1(sp)
  80a114:	d8c00085 	stb	r3,2(sp)
  80a118:	d8000005 	stb	zero,0(sp)
  80a11c:	003ed706 	br	809c7c <___vfiprintf_internal_r+0x818>
  80a120:	d9813b17 	ldw	r6,1260(sp)
  80a124:	a0c00007 	ldb	r3,0(r20)
  80a128:	31801014 	ori	r6,r6,64
  80a12c:	d9813b15 	stw	r6,1260(sp)
  80a130:	003d4006 	br	809634 <___vfiprintf_internal_r+0x1d0>
  80a134:	d9413b17 	ldw	r5,1260(sp)
  80a138:	a0c00007 	ldb	r3,0(r20)
  80a13c:	29400814 	ori	r5,r5,32
  80a140:	d9413b15 	stw	r5,1260(sp)
  80a144:	003d3b06 	br	809634 <___vfiprintf_internal_r+0x1d0>
  80a148:	a0c00007 	ldb	r3,0(r20)
  80a14c:	003d3906 	br	809634 <___vfiprintf_internal_r+0x1d0>
  80a150:	20c03fcc 	andi	r3,r4,255
  80a154:	00800044 	movi	r2,1
  80a158:	18802b26 	beq	r3,r2,80a208 <___vfiprintf_internal_r+0xda4>
  80a15c:	18800b36 	bltu	r3,r2,80a18c <___vfiprintf_internal_r+0xd28>
  80a160:	00800084 	movi	r2,2
  80a164:	18808426 	beq	r3,r2,80a378 <___vfiprintf_internal_r+0xf14>
  80a168:	010020b4 	movhi	r4,130
  80a16c:	21218604 	addi	r4,r4,-31208
  80a170:	ddc13815 	stw	r23,1248(sp)
  80a174:	080329c0 	call	80329c <strlen>
  80a178:	d8813715 	stw	r2,1244(sp)
  80a17c:	008020b4 	movhi	r2,130
  80a180:	10a18604 	addi	r2,r2,-31208
  80a184:	d8813c15 	stw	r2,1264(sp)
  80a188:	003ece06 	br	809cc4 <___vfiprintf_internal_r+0x860>
  80a18c:	d8800e04 	addi	r2,sp,56
  80a190:	df000404 	addi	fp,sp,16
  80a194:	d8813c15 	stw	r2,1264(sp)
  80a198:	880a977a 	slli	r5,r17,29
  80a19c:	8004d0fa 	srli	r2,r16,3
  80a1a0:	8806d0fa 	srli	r3,r17,3
  80a1a4:	810001cc 	andi	r4,r16,7
  80a1a8:	2884b03a 	or	r2,r5,r2
  80a1ac:	d9413c17 	ldw	r5,1264(sp)
  80a1b0:	21000c04 	addi	r4,r4,48
  80a1b4:	1021883a 	mov	r16,r2
  80a1b8:	297fffc4 	addi	r5,r5,-1
  80a1bc:	d9413c15 	stw	r5,1264(sp)
  80a1c0:	29000005 	stb	r4,0(r5)
  80a1c4:	10cab03a 	or	r5,r2,r3
  80a1c8:	1823883a 	mov	r17,r3
  80a1cc:	283ff21e 	bne	r5,zero,80a198 <___vfiprintf_internal_r+0xd34>
  80a1d0:	d9813b17 	ldw	r6,1260(sp)
  80a1d4:	3080004c 	andi	r2,r6,1
  80a1d8:	1005003a 	cmpeq	r2,r2,zero
  80a1dc:	103eb41e 	bne	r2,zero,809cb0 <___vfiprintf_internal_r+0x84c>
  80a1e0:	20803fcc 	andi	r2,r4,255
  80a1e4:	1080201c 	xori	r2,r2,128
  80a1e8:	10bfe004 	addi	r2,r2,-128
  80a1ec:	00c00c04 	movi	r3,48
  80a1f0:	10feaf26 	beq	r2,r3,809cb0 <___vfiprintf_internal_r+0x84c>
  80a1f4:	d8813c17 	ldw	r2,1264(sp)
  80a1f8:	10bfffc4 	addi	r2,r2,-1
  80a1fc:	d8813c15 	stw	r2,1264(sp)
  80a200:	10c00005 	stb	r3,0(r2)
  80a204:	003eaa06 	br	809cb0 <___vfiprintf_internal_r+0x84c>
  80a208:	88800068 	cmpgeui	r2,r17,1
  80a20c:	10000d1e 	bne	r2,zero,80a244 <___vfiprintf_internal_r+0xde0>
  80a210:	8800021e 	bne	r17,zero,80a21c <___vfiprintf_internal_r+0xdb8>
  80a214:	00800244 	movi	r2,9
  80a218:	14000a36 	bltu	r2,r16,80a244 <___vfiprintf_internal_r+0xde0>
  80a21c:	d9800dc4 	addi	r6,sp,55
  80a220:	df000404 	addi	fp,sp,16
  80a224:	d9813c15 	stw	r6,1264(sp)
  80a228:	d8c13c17 	ldw	r3,1264(sp)
  80a22c:	80800c04 	addi	r2,r16,48
  80a230:	18800005 	stb	r2,0(r3)
  80a234:	003e9e06 	br	809cb0 <___vfiprintf_internal_r+0x84c>
  80a238:	01000084 	movi	r4,2
  80a23c:	d8000005 	stb	zero,0(sp)
  80a240:	003e8e06 	br	809c7c <___vfiprintf_internal_r+0x818>
  80a244:	df000404 	addi	fp,sp,16
  80a248:	dcc00e04 	addi	r19,sp,56
  80a24c:	8009883a 	mov	r4,r16
  80a250:	880b883a 	mov	r5,r17
  80a254:	01800284 	movi	r6,10
  80a258:	000f883a 	mov	r7,zero
  80a25c:	080b05c0 	call	80b05c <__umoddi3>
  80a260:	12000c04 	addi	r8,r2,48
  80a264:	9cffffc4 	addi	r19,r19,-1
  80a268:	8009883a 	mov	r4,r16
  80a26c:	880b883a 	mov	r5,r17
  80a270:	01800284 	movi	r6,10
  80a274:	000f883a 	mov	r7,zero
  80a278:	9a000005 	stb	r8,0(r19)
  80a27c:	080a9f00 	call	80a9f0 <__udivdi3>
  80a280:	1009883a 	mov	r4,r2
  80a284:	1021883a 	mov	r16,r2
  80a288:	18800068 	cmpgeui	r2,r3,1
  80a28c:	1823883a 	mov	r17,r3
  80a290:	103fee1e 	bne	r2,zero,80a24c <___vfiprintf_internal_r+0xde8>
  80a294:	1800021e 	bne	r3,zero,80a2a0 <___vfiprintf_internal_r+0xe3c>
  80a298:	00800244 	movi	r2,9
  80a29c:	113feb36 	bltu	r2,r4,80a24c <___vfiprintf_internal_r+0xde8>
  80a2a0:	9cffffc4 	addi	r19,r19,-1
  80a2a4:	dcc13c15 	stw	r19,1264(sp)
  80a2a8:	003fdf06 	br	80a228 <___vfiprintf_internal_r+0xdc4>
  80a2ac:	05c020b4 	movhi	r23,130
  80a2b0:	bde1f304 	addi	r23,r23,-30772
  80a2b4:	003dbe06 	br	8099b0 <___vfiprintf_internal_r+0x54c>
  80a2b8:	d9013b17 	ldw	r4,1260(sp)
  80a2bc:	2080004c 	andi	r2,r4,1
  80a2c0:	1000421e 	bne	r2,zero,80a3cc <___vfiprintf_internal_r+0xf68>
  80a2c4:	d9400e04 	addi	r5,sp,56
  80a2c8:	df000404 	addi	fp,sp,16
  80a2cc:	d9413c15 	stw	r5,1264(sp)
  80a2d0:	003e7706 	br	809cb0 <___vfiprintf_internal_r+0x84c>
  80a2d4:	d9413b17 	ldw	r5,1260(sp)
  80a2d8:	2880040c 	andi	r2,r5,16
  80a2dc:	10001c1e 	bne	r2,zero,80a350 <___vfiprintf_internal_r+0xeec>
  80a2e0:	d9813b17 	ldw	r6,1260(sp)
  80a2e4:	3080100c 	andi	r2,r6,64
  80a2e8:	10001926 	beq	r2,zero,80a350 <___vfiprintf_internal_r+0xeec>
  80a2ec:	3c00000b 	ldhu	r16,0(r7)
  80a2f0:	0023883a 	mov	r17,zero
  80a2f4:	39c00104 	addi	r7,r7,4
  80a2f8:	d9c13515 	stw	r7,1236(sp)
  80a2fc:	003f3706 	br	809fdc <___vfiprintf_internal_r+0xb78>
  80a300:	3c000017 	ldw	r16,0(r7)
  80a304:	0009883a 	mov	r4,zero
  80a308:	39c00104 	addi	r7,r7,4
  80a30c:	0023883a 	mov	r17,zero
  80a310:	d9c13515 	stw	r7,1236(sp)
  80a314:	d8000005 	stb	zero,0(sp)
  80a318:	003e5806 	br	809c7c <___vfiprintf_internal_r+0x818>
  80a31c:	3c000017 	ldw	r16,0(r7)
  80a320:	01000044 	movi	r4,1
  80a324:	39c00104 	addi	r7,r7,4
  80a328:	0023883a 	mov	r17,zero
  80a32c:	d9c13515 	stw	r7,1236(sp)
  80a330:	d8000005 	stb	zero,0(sp)
  80a334:	003e5106 	br	809c7c <___vfiprintf_internal_r+0x818>
  80a338:	38800017 	ldw	r2,0(r7)
  80a33c:	39c00104 	addi	r7,r7,4
  80a340:	d9c13515 	stw	r7,1236(sp)
  80a344:	1023d7fa 	srai	r17,r2,31
  80a348:	1021883a 	mov	r16,r2
  80a34c:	003e4906 	br	809c74 <___vfiprintf_internal_r+0x810>
  80a350:	3c000017 	ldw	r16,0(r7)
  80a354:	0023883a 	mov	r17,zero
  80a358:	39c00104 	addi	r7,r7,4
  80a35c:	d9c13515 	stw	r7,1236(sp)
  80a360:	003f1e06 	br	809fdc <___vfiprintf_internal_r+0xb78>
  80a364:	d9400317 	ldw	r5,12(sp)
  80a368:	d9000217 	ldw	r4,8(sp)
  80a36c:	05c020b4 	movhi	r23,130
  80a370:	bde1f704 	addi	r23,r23,-30756
  80a374:	003d4706 	br	809894 <___vfiprintf_internal_r+0x430>
  80a378:	d9000e04 	addi	r4,sp,56
  80a37c:	df000404 	addi	fp,sp,16
  80a380:	d9013c15 	stw	r4,1264(sp)
  80a384:	d9813617 	ldw	r6,1240(sp)
  80a388:	880a973a 	slli	r5,r17,28
  80a38c:	8004d13a 	srli	r2,r16,4
  80a390:	810003cc 	andi	r4,r16,15
  80a394:	3109883a 	add	r4,r6,r4
  80a398:	2884b03a 	or	r2,r5,r2
  80a39c:	21400003 	ldbu	r5,0(r4)
  80a3a0:	d9013c17 	ldw	r4,1264(sp)
  80a3a4:	8806d13a 	srli	r3,r17,4
  80a3a8:	1021883a 	mov	r16,r2
  80a3ac:	213fffc4 	addi	r4,r4,-1
  80a3b0:	d9013c15 	stw	r4,1264(sp)
  80a3b4:	d9813c17 	ldw	r6,1264(sp)
  80a3b8:	10c8b03a 	or	r4,r2,r3
  80a3bc:	1823883a 	mov	r17,r3
  80a3c0:	31400005 	stb	r5,0(r6)
  80a3c4:	203fef1e 	bne	r4,zero,80a384 <___vfiprintf_internal_r+0xf20>
  80a3c8:	003e3906 	br	809cb0 <___vfiprintf_internal_r+0x84c>
  80a3cc:	00800c04 	movi	r2,48
  80a3d0:	d9800dc4 	addi	r6,sp,55
  80a3d4:	df000404 	addi	fp,sp,16
  80a3d8:	d8800dc5 	stb	r2,55(sp)
  80a3dc:	d9813c15 	stw	r6,1264(sp)
  80a3e0:	003e3306 	br	809cb0 <___vfiprintf_internal_r+0x84c>
  80a3e4:	d9413b17 	ldw	r5,1260(sp)
  80a3e8:	2880040c 	andi	r2,r5,16
  80a3ec:	10002326 	beq	r2,zero,80a47c <___vfiprintf_internal_r+0x1018>
  80a3f0:	38800017 	ldw	r2,0(r7)
  80a3f4:	d9813a17 	ldw	r6,1256(sp)
  80a3f8:	39c00104 	addi	r7,r7,4
  80a3fc:	11800015 	stw	r6,0(r2)
  80a400:	003c6906 	br	8095a8 <___vfiprintf_internal_r+0x144>
  80a404:	d9000217 	ldw	r4,8(sp)
  80a408:	05c020b4 	movhi	r23,130
  80a40c:	bde1f704 	addi	r23,r23,-30756
  80a410:	003d9d06 	br	809a88 <___vfiprintf_internal_r+0x624>
  80a414:	0005883a 	mov	r2,zero
  80a418:	1409c83a 	sub	r4,r2,r16
  80a41c:	1105803a 	cmpltu	r2,r2,r4
  80a420:	044bc83a 	sub	r5,zero,r17
  80a424:	2885c83a 	sub	r2,r5,r2
  80a428:	2021883a 	mov	r16,r4
  80a42c:	1023883a 	mov	r17,r2
  80a430:	01000044 	movi	r4,1
  80a434:	00800b44 	movi	r2,45
  80a438:	d8800005 	stb	r2,0(sp)
  80a43c:	003e0f06 	br	809c7c <___vfiprintf_internal_r+0x818>
  80a440:	b009883a 	mov	r4,r22
  80a444:	a80b883a 	mov	r5,r21
  80a448:	d9800104 	addi	r6,sp,4
  80a44c:	080940c0 	call	80940c <__sprint_r>
  80a450:	103da31e 	bne	r2,zero,809ae0 <___vfiprintf_internal_r+0x67c>
  80a454:	003da106 	br	809adc <___vfiprintf_internal_r+0x678>
  80a458:	05c020b4 	movhi	r23,130
  80a45c:	bde1f304 	addi	r23,r23,-30772
  80a460:	003dc306 	br	809b70 <___vfiprintf_internal_r+0x70c>
  80a464:	d8813b17 	ldw	r2,1260(sp)
  80a468:	a5000044 	addi	r20,r20,1
  80a46c:	a0c00007 	ldb	r3,0(r20)
  80a470:	10800814 	ori	r2,r2,32
  80a474:	d8813b15 	stw	r2,1260(sp)
  80a478:	003c6e06 	br	809634 <___vfiprintf_internal_r+0x1d0>
  80a47c:	d8c13b17 	ldw	r3,1260(sp)
  80a480:	1880100c 	andi	r2,r3,64
  80a484:	10001a26 	beq	r2,zero,80a4f0 <___vfiprintf_internal_r+0x108c>
  80a488:	38800017 	ldw	r2,0(r7)
  80a48c:	d9013a17 	ldw	r4,1256(sp)
  80a490:	39c00104 	addi	r7,r7,4
  80a494:	1100000d 	sth	r4,0(r2)
  80a498:	003c4306 	br	8095a8 <___vfiprintf_internal_r+0x144>
  80a49c:	d9013c17 	ldw	r4,1264(sp)
  80a4a0:	080329c0 	call	80329c <strlen>
  80a4a4:	d8813715 	stw	r2,1244(sp)
  80a4a8:	d8013815 	stw	zero,1248(sp)
  80a4ac:	003e0506 	br	809cc4 <___vfiprintf_internal_r+0x860>
  80a4b0:	00800184 	movi	r2,6
  80a4b4:	15c00836 	bltu	r2,r23,80a4d8 <___vfiprintf_internal_r+0x1074>
  80a4b8:	b839883a 	mov	fp,r23
  80a4bc:	b800010e 	bge	r23,zero,80a4c4 <___vfiprintf_internal_r+0x1060>
  80a4c0:	0039883a 	mov	fp,zero
  80a4c4:	014020b4 	movhi	r5,130
  80a4c8:	29617f04 	addi	r5,r5,-31236
  80a4cc:	ddc13715 	stw	r23,1244(sp)
  80a4d0:	d9413c15 	stw	r5,1264(sp)
  80a4d4:	003cc406 	br	8097e8 <___vfiprintf_internal_r+0x384>
  80a4d8:	010020b4 	movhi	r4,130
  80a4dc:	21217f04 	addi	r4,r4,-31236
  80a4e0:	1039883a 	mov	fp,r2
  80a4e4:	d9013c15 	stw	r4,1264(sp)
  80a4e8:	d8813715 	stw	r2,1244(sp)
  80a4ec:	003cbe06 	br	8097e8 <___vfiprintf_internal_r+0x384>
  80a4f0:	38800017 	ldw	r2,0(r7)
  80a4f4:	d9413a17 	ldw	r5,1256(sp)
  80a4f8:	39c00104 	addi	r7,r7,4
  80a4fc:	11400015 	stw	r5,0(r2)
  80a500:	003c2906 	br	8095a8 <___vfiprintf_internal_r+0x144>
  80a504:	002f883a 	mov	r23,zero
  80a508:	003c4c06 	br	80963c <___vfiprintf_internal_r+0x1d8>
  80a50c:	3dc00017 	ldw	r23,0(r7)
  80a510:	39c00104 	addi	r7,r7,4
  80a514:	b83f0c0e 	bge	r23,zero,80a148 <___vfiprintf_internal_r+0xce4>
  80a518:	a0c00007 	ldb	r3,0(r20)
  80a51c:	05ffffc4 	movi	r23,-1
  80a520:	003c4406 	br	809634 <___vfiprintf_internal_r+0x1d0>

0080a524 <__vfiprintf_internal>:
  80a524:	008020b4 	movhi	r2,130
  80a528:	10a93c04 	addi	r2,r2,-23312
  80a52c:	2013883a 	mov	r9,r4
  80a530:	11000017 	ldw	r4,0(r2)
  80a534:	2805883a 	mov	r2,r5
  80a538:	300f883a 	mov	r7,r6
  80a53c:	480b883a 	mov	r5,r9
  80a540:	100d883a 	mov	r6,r2
  80a544:	08094641 	jmpi	809464 <___vfiprintf_internal_r>

0080a548 <_write_r>:
  80a548:	defffd04 	addi	sp,sp,-12
  80a54c:	dc000015 	stw	r16,0(sp)
  80a550:	040020b4 	movhi	r16,130
  80a554:	84296f04 	addi	r16,r16,-23108
  80a558:	dc400115 	stw	r17,4(sp)
  80a55c:	80000015 	stw	zero,0(r16)
  80a560:	2023883a 	mov	r17,r4
  80a564:	2809883a 	mov	r4,r5
  80a568:	300b883a 	mov	r5,r6
  80a56c:	380d883a 	mov	r6,r7
  80a570:	dfc00215 	stw	ra,8(sp)
  80a574:	080cf700 	call	80cf70 <write>
  80a578:	1007883a 	mov	r3,r2
  80a57c:	00bfffc4 	movi	r2,-1
  80a580:	18800626 	beq	r3,r2,80a59c <_write_r+0x54>
  80a584:	1805883a 	mov	r2,r3
  80a588:	dfc00217 	ldw	ra,8(sp)
  80a58c:	dc400117 	ldw	r17,4(sp)
  80a590:	dc000017 	ldw	r16,0(sp)
  80a594:	dec00304 	addi	sp,sp,12
  80a598:	f800283a 	ret
  80a59c:	80800017 	ldw	r2,0(r16)
  80a5a0:	103ff826 	beq	r2,zero,80a584 <_write_r+0x3c>
  80a5a4:	88800015 	stw	r2,0(r17)
  80a5a8:	1805883a 	mov	r2,r3
  80a5ac:	dfc00217 	ldw	ra,8(sp)
  80a5b0:	dc400117 	ldw	r17,4(sp)
  80a5b4:	dc000017 	ldw	r16,0(sp)
  80a5b8:	dec00304 	addi	sp,sp,12
  80a5bc:	f800283a 	ret

0080a5c0 <_calloc_r>:
  80a5c0:	defffe04 	addi	sp,sp,-8
  80a5c4:	dc400015 	stw	r17,0(sp)
  80a5c8:	2023883a 	mov	r17,r4
  80a5cc:	2809883a 	mov	r4,r5
  80a5d0:	300b883a 	mov	r5,r6
  80a5d4:	dfc00115 	stw	ra,4(sp)
  80a5d8:	08019440 	call	801944 <__mulsi3>
  80a5dc:	100b883a 	mov	r5,r2
  80a5e0:	8809883a 	mov	r4,r17
  80a5e4:	0801f9c0 	call	801f9c <_malloc_r>
  80a5e8:	1023883a 	mov	r17,r2
  80a5ec:	01c00904 	movi	r7,36
  80a5f0:	10000d26 	beq	r2,zero,80a628 <_calloc_r+0x68>
  80a5f4:	10ffff17 	ldw	r3,-4(r2)
  80a5f8:	1009883a 	mov	r4,r2
  80a5fc:	00bfff04 	movi	r2,-4
  80a600:	1886703a 	and	r3,r3,r2
  80a604:	1887883a 	add	r3,r3,r2
  80a608:	180d883a 	mov	r6,r3
  80a60c:	000b883a 	mov	r5,zero
  80a610:	38c01736 	bltu	r7,r3,80a670 <_calloc_r+0xb0>
  80a614:	008004c4 	movi	r2,19
  80a618:	10c00836 	bltu	r2,r3,80a63c <_calloc_r+0x7c>
  80a61c:	20000215 	stw	zero,8(r4)
  80a620:	20000015 	stw	zero,0(r4)
  80a624:	20000115 	stw	zero,4(r4)
  80a628:	8805883a 	mov	r2,r17
  80a62c:	dfc00117 	ldw	ra,4(sp)
  80a630:	dc400017 	ldw	r17,0(sp)
  80a634:	dec00204 	addi	sp,sp,8
  80a638:	f800283a 	ret
  80a63c:	008006c4 	movi	r2,27
  80a640:	88000015 	stw	zero,0(r17)
  80a644:	88000115 	stw	zero,4(r17)
  80a648:	89000204 	addi	r4,r17,8
  80a64c:	10fff32e 	bgeu	r2,r3,80a61c <_calloc_r+0x5c>
  80a650:	88000215 	stw	zero,8(r17)
  80a654:	88000315 	stw	zero,12(r17)
  80a658:	89000404 	addi	r4,r17,16
  80a65c:	19ffef1e 	bne	r3,r7,80a61c <_calloc_r+0x5c>
  80a660:	89000604 	addi	r4,r17,24
  80a664:	88000415 	stw	zero,16(r17)
  80a668:	88000515 	stw	zero,20(r17)
  80a66c:	003feb06 	br	80a61c <_calloc_r+0x5c>
  80a670:	080285c0 	call	80285c <memset>
  80a674:	8805883a 	mov	r2,r17
  80a678:	dfc00117 	ldw	ra,4(sp)
  80a67c:	dc400017 	ldw	r17,0(sp)
  80a680:	dec00204 	addi	sp,sp,8
  80a684:	f800283a 	ret

0080a688 <_close_r>:
  80a688:	defffd04 	addi	sp,sp,-12
  80a68c:	dc000015 	stw	r16,0(sp)
  80a690:	040020b4 	movhi	r16,130
  80a694:	84296f04 	addi	r16,r16,-23108
  80a698:	dc400115 	stw	r17,4(sp)
  80a69c:	80000015 	stw	zero,0(r16)
  80a6a0:	2023883a 	mov	r17,r4
  80a6a4:	2809883a 	mov	r4,r5
  80a6a8:	dfc00215 	stw	ra,8(sp)
  80a6ac:	080c4880 	call	80c488 <close>
  80a6b0:	1007883a 	mov	r3,r2
  80a6b4:	00bfffc4 	movi	r2,-1
  80a6b8:	18800626 	beq	r3,r2,80a6d4 <_close_r+0x4c>
  80a6bc:	1805883a 	mov	r2,r3
  80a6c0:	dfc00217 	ldw	ra,8(sp)
  80a6c4:	dc400117 	ldw	r17,4(sp)
  80a6c8:	dc000017 	ldw	r16,0(sp)
  80a6cc:	dec00304 	addi	sp,sp,12
  80a6d0:	f800283a 	ret
  80a6d4:	80800017 	ldw	r2,0(r16)
  80a6d8:	103ff826 	beq	r2,zero,80a6bc <_close_r+0x34>
  80a6dc:	88800015 	stw	r2,0(r17)
  80a6e0:	1805883a 	mov	r2,r3
  80a6e4:	dfc00217 	ldw	ra,8(sp)
  80a6e8:	dc400117 	ldw	r17,4(sp)
  80a6ec:	dc000017 	ldw	r16,0(sp)
  80a6f0:	dec00304 	addi	sp,sp,12
  80a6f4:	f800283a 	ret

0080a6f8 <_fclose_r>:
  80a6f8:	defffc04 	addi	sp,sp,-16
  80a6fc:	dc400115 	stw	r17,4(sp)
  80a700:	dc000015 	stw	r16,0(sp)
  80a704:	dfc00315 	stw	ra,12(sp)
  80a708:	dc800215 	stw	r18,8(sp)
  80a70c:	2821883a 	mov	r16,r5
  80a710:	2023883a 	mov	r17,r4
  80a714:	28002926 	beq	r5,zero,80a7bc <_fclose_r+0xc4>
  80a718:	0806e400 	call	806e40 <__sfp_lock_acquire>
  80a71c:	88000226 	beq	r17,zero,80a728 <_fclose_r+0x30>
  80a720:	88800e17 	ldw	r2,56(r17)
  80a724:	10002d26 	beq	r2,zero,80a7dc <_fclose_r+0xe4>
  80a728:	8080030f 	ldh	r2,12(r16)
  80a72c:	10002226 	beq	r2,zero,80a7b8 <_fclose_r+0xc0>
  80a730:	8809883a 	mov	r4,r17
  80a734:	800b883a 	mov	r5,r16
  80a738:	0806bb80 	call	806bb8 <_fflush_r>
  80a73c:	1025883a 	mov	r18,r2
  80a740:	80800b17 	ldw	r2,44(r16)
  80a744:	10000426 	beq	r2,zero,80a758 <_fclose_r+0x60>
  80a748:	81400717 	ldw	r5,28(r16)
  80a74c:	8809883a 	mov	r4,r17
  80a750:	103ee83a 	callr	r2
  80a754:	10002a16 	blt	r2,zero,80a800 <_fclose_r+0x108>
  80a758:	8080030b 	ldhu	r2,12(r16)
  80a75c:	1080200c 	andi	r2,r2,128
  80a760:	1000231e 	bne	r2,zero,80a7f0 <_fclose_r+0xf8>
  80a764:	81400c17 	ldw	r5,48(r16)
  80a768:	28000526 	beq	r5,zero,80a780 <_fclose_r+0x88>
  80a76c:	80801004 	addi	r2,r16,64
  80a770:	28800226 	beq	r5,r2,80a77c <_fclose_r+0x84>
  80a774:	8809883a 	mov	r4,r17
  80a778:	08072080 	call	807208 <_free_r>
  80a77c:	80000c15 	stw	zero,48(r16)
  80a780:	81401117 	ldw	r5,68(r16)
  80a784:	28000326 	beq	r5,zero,80a794 <_fclose_r+0x9c>
  80a788:	8809883a 	mov	r4,r17
  80a78c:	08072080 	call	807208 <_free_r>
  80a790:	80001115 	stw	zero,68(r16)
  80a794:	8000030d 	sth	zero,12(r16)
  80a798:	0806e440 	call	806e44 <__sfp_lock_release>
  80a79c:	9005883a 	mov	r2,r18
  80a7a0:	dfc00317 	ldw	ra,12(sp)
  80a7a4:	dc800217 	ldw	r18,8(sp)
  80a7a8:	dc400117 	ldw	r17,4(sp)
  80a7ac:	dc000017 	ldw	r16,0(sp)
  80a7b0:	dec00404 	addi	sp,sp,16
  80a7b4:	f800283a 	ret
  80a7b8:	0806e440 	call	806e44 <__sfp_lock_release>
  80a7bc:	0025883a 	mov	r18,zero
  80a7c0:	9005883a 	mov	r2,r18
  80a7c4:	dfc00317 	ldw	ra,12(sp)
  80a7c8:	dc800217 	ldw	r18,8(sp)
  80a7cc:	dc400117 	ldw	r17,4(sp)
  80a7d0:	dc000017 	ldw	r16,0(sp)
  80a7d4:	dec00404 	addi	sp,sp,16
  80a7d8:	f800283a 	ret
  80a7dc:	8809883a 	mov	r4,r17
  80a7e0:	0806e500 	call	806e50 <__sinit>
  80a7e4:	8080030f 	ldh	r2,12(r16)
  80a7e8:	103fd11e 	bne	r2,zero,80a730 <_fclose_r+0x38>
  80a7ec:	003ff206 	br	80a7b8 <_fclose_r+0xc0>
  80a7f0:	81400417 	ldw	r5,16(r16)
  80a7f4:	8809883a 	mov	r4,r17
  80a7f8:	08072080 	call	807208 <_free_r>
  80a7fc:	003fd906 	br	80a764 <_fclose_r+0x6c>
  80a800:	04bfffc4 	movi	r18,-1
  80a804:	003fd406 	br	80a758 <_fclose_r+0x60>

0080a808 <fclose>:
  80a808:	008020b4 	movhi	r2,130
  80a80c:	10a93c04 	addi	r2,r2,-23312
  80a810:	200b883a 	mov	r5,r4
  80a814:	11000017 	ldw	r4,0(r2)
  80a818:	080a6f81 	jmpi	80a6f8 <_fclose_r>

0080a81c <_fstat_r>:
  80a81c:	defffd04 	addi	sp,sp,-12
  80a820:	dc000015 	stw	r16,0(sp)
  80a824:	040020b4 	movhi	r16,130
  80a828:	84296f04 	addi	r16,r16,-23108
  80a82c:	dc400115 	stw	r17,4(sp)
  80a830:	80000015 	stw	zero,0(r16)
  80a834:	2023883a 	mov	r17,r4
  80a838:	2809883a 	mov	r4,r5
  80a83c:	300b883a 	mov	r5,r6
  80a840:	dfc00215 	stw	ra,8(sp)
  80a844:	080c6800 	call	80c680 <fstat>
  80a848:	1007883a 	mov	r3,r2
  80a84c:	00bfffc4 	movi	r2,-1
  80a850:	18800626 	beq	r3,r2,80a86c <_fstat_r+0x50>
  80a854:	1805883a 	mov	r2,r3
  80a858:	dfc00217 	ldw	ra,8(sp)
  80a85c:	dc400117 	ldw	r17,4(sp)
  80a860:	dc000017 	ldw	r16,0(sp)
  80a864:	dec00304 	addi	sp,sp,12
  80a868:	f800283a 	ret
  80a86c:	80800017 	ldw	r2,0(r16)
  80a870:	103ff826 	beq	r2,zero,80a854 <_fstat_r+0x38>
  80a874:	88800015 	stw	r2,0(r17)
  80a878:	1805883a 	mov	r2,r3
  80a87c:	dfc00217 	ldw	ra,8(sp)
  80a880:	dc400117 	ldw	r17,4(sp)
  80a884:	dc000017 	ldw	r16,0(sp)
  80a888:	dec00304 	addi	sp,sp,12
  80a88c:	f800283a 	ret

0080a890 <_isatty_r>:
  80a890:	defffd04 	addi	sp,sp,-12
  80a894:	dc000015 	stw	r16,0(sp)
  80a898:	040020b4 	movhi	r16,130
  80a89c:	84296f04 	addi	r16,r16,-23108
  80a8a0:	dc400115 	stw	r17,4(sp)
  80a8a4:	80000015 	stw	zero,0(r16)
  80a8a8:	2023883a 	mov	r17,r4
  80a8ac:	2809883a 	mov	r4,r5
  80a8b0:	dfc00215 	stw	ra,8(sp)
  80a8b4:	080c7d80 	call	80c7d8 <isatty>
  80a8b8:	1007883a 	mov	r3,r2
  80a8bc:	00bfffc4 	movi	r2,-1
  80a8c0:	18800626 	beq	r3,r2,80a8dc <_isatty_r+0x4c>
  80a8c4:	1805883a 	mov	r2,r3
  80a8c8:	dfc00217 	ldw	ra,8(sp)
  80a8cc:	dc400117 	ldw	r17,4(sp)
  80a8d0:	dc000017 	ldw	r16,0(sp)
  80a8d4:	dec00304 	addi	sp,sp,12
  80a8d8:	f800283a 	ret
  80a8dc:	80800017 	ldw	r2,0(r16)
  80a8e0:	103ff826 	beq	r2,zero,80a8c4 <_isatty_r+0x34>
  80a8e4:	88800015 	stw	r2,0(r17)
  80a8e8:	1805883a 	mov	r2,r3
  80a8ec:	dfc00217 	ldw	ra,8(sp)
  80a8f0:	dc400117 	ldw	r17,4(sp)
  80a8f4:	dc000017 	ldw	r16,0(sp)
  80a8f8:	dec00304 	addi	sp,sp,12
  80a8fc:	f800283a 	ret

0080a900 <_lseek_r>:
  80a900:	defffd04 	addi	sp,sp,-12
  80a904:	dc000015 	stw	r16,0(sp)
  80a908:	040020b4 	movhi	r16,130
  80a90c:	84296f04 	addi	r16,r16,-23108
  80a910:	dc400115 	stw	r17,4(sp)
  80a914:	80000015 	stw	zero,0(r16)
  80a918:	2023883a 	mov	r17,r4
  80a91c:	2809883a 	mov	r4,r5
  80a920:	300b883a 	mov	r5,r6
  80a924:	380d883a 	mov	r6,r7
  80a928:	dfc00215 	stw	ra,8(sp)
  80a92c:	080ca9c0 	call	80ca9c <lseek>
  80a930:	1007883a 	mov	r3,r2
  80a934:	00bfffc4 	movi	r2,-1
  80a938:	18800626 	beq	r3,r2,80a954 <_lseek_r+0x54>
  80a93c:	1805883a 	mov	r2,r3
  80a940:	dfc00217 	ldw	ra,8(sp)
  80a944:	dc400117 	ldw	r17,4(sp)
  80a948:	dc000017 	ldw	r16,0(sp)
  80a94c:	dec00304 	addi	sp,sp,12
  80a950:	f800283a 	ret
  80a954:	80800017 	ldw	r2,0(r16)
  80a958:	103ff826 	beq	r2,zero,80a93c <_lseek_r+0x3c>
  80a95c:	88800015 	stw	r2,0(r17)
  80a960:	1805883a 	mov	r2,r3
  80a964:	dfc00217 	ldw	ra,8(sp)
  80a968:	dc400117 	ldw	r17,4(sp)
  80a96c:	dc000017 	ldw	r16,0(sp)
  80a970:	dec00304 	addi	sp,sp,12
  80a974:	f800283a 	ret

0080a978 <_read_r>:
  80a978:	defffd04 	addi	sp,sp,-12
  80a97c:	dc000015 	stw	r16,0(sp)
  80a980:	040020b4 	movhi	r16,130
  80a984:	84296f04 	addi	r16,r16,-23108
  80a988:	dc400115 	stw	r17,4(sp)
  80a98c:	80000015 	stw	zero,0(r16)
  80a990:	2023883a 	mov	r17,r4
  80a994:	2809883a 	mov	r4,r5
  80a998:	300b883a 	mov	r5,r6
  80a99c:	380d883a 	mov	r6,r7
  80a9a0:	dfc00215 	stw	ra,8(sp)
  80a9a4:	080ccb80 	call	80ccb8 <read>
  80a9a8:	1007883a 	mov	r3,r2
  80a9ac:	00bfffc4 	movi	r2,-1
  80a9b0:	18800626 	beq	r3,r2,80a9cc <_read_r+0x54>
  80a9b4:	1805883a 	mov	r2,r3
  80a9b8:	dfc00217 	ldw	ra,8(sp)
  80a9bc:	dc400117 	ldw	r17,4(sp)
  80a9c0:	dc000017 	ldw	r16,0(sp)
  80a9c4:	dec00304 	addi	sp,sp,12
  80a9c8:	f800283a 	ret
  80a9cc:	80800017 	ldw	r2,0(r16)
  80a9d0:	103ff826 	beq	r2,zero,80a9b4 <_read_r+0x3c>
  80a9d4:	88800015 	stw	r2,0(r17)
  80a9d8:	1805883a 	mov	r2,r3
  80a9dc:	dfc00217 	ldw	ra,8(sp)
  80a9e0:	dc400117 	ldw	r17,4(sp)
  80a9e4:	dc000017 	ldw	r16,0(sp)
  80a9e8:	dec00304 	addi	sp,sp,12
  80a9ec:	f800283a 	ret

0080a9f0 <__udivdi3>:
  80a9f0:	defff104 	addi	sp,sp,-60
  80a9f4:	0015883a 	mov	r10,zero
  80a9f8:	2005883a 	mov	r2,r4
  80a9fc:	3011883a 	mov	r8,r6
  80aa00:	df000d15 	stw	fp,52(sp)
  80aa04:	dd400a15 	stw	r21,40(sp)
  80aa08:	dcc00815 	stw	r19,32(sp)
  80aa0c:	dfc00e15 	stw	ra,56(sp)
  80aa10:	ddc00c15 	stw	r23,48(sp)
  80aa14:	dd800b15 	stw	r22,44(sp)
  80aa18:	dd000915 	stw	r20,36(sp)
  80aa1c:	dc800715 	stw	r18,28(sp)
  80aa20:	dc400615 	stw	r17,24(sp)
  80aa24:	dc000515 	stw	r16,20(sp)
  80aa28:	da800315 	stw	r10,12(sp)
  80aa2c:	4027883a 	mov	r19,r8
  80aa30:	1039883a 	mov	fp,r2
  80aa34:	282b883a 	mov	r21,r5
  80aa38:	da800415 	stw	r10,16(sp)
  80aa3c:	3800401e 	bne	r7,zero,80ab40 <__udivdi3+0x150>
  80aa40:	2a006536 	bltu	r5,r8,80abd8 <__udivdi3+0x1e8>
  80aa44:	4000b526 	beq	r8,zero,80ad1c <__udivdi3+0x32c>
  80aa48:	00bfffd4 	movui	r2,65535
  80aa4c:	14c0ad36 	bltu	r2,r19,80ad04 <__udivdi3+0x314>
  80aa50:	00803fc4 	movi	r2,255
  80aa54:	14c15e36 	bltu	r2,r19,80afd0 <__udivdi3+0x5e0>
  80aa58:	000b883a 	mov	r5,zero
  80aa5c:	0005883a 	mov	r2,zero
  80aa60:	9884d83a 	srl	r2,r19,r2
  80aa64:	010020b4 	movhi	r4,130
  80aa68:	2121fb04 	addi	r4,r4,-30740
  80aa6c:	01800804 	movi	r6,32
  80aa70:	1105883a 	add	r2,r2,r4
  80aa74:	10c00003 	ldbu	r3,0(r2)
  80aa78:	28c7883a 	add	r3,r5,r3
  80aa7c:	30e9c83a 	sub	r20,r6,r3
  80aa80:	a0010a1e 	bne	r20,zero,80aeac <__udivdi3+0x4bc>
  80aa84:	982ed43a 	srli	r23,r19,16
  80aa88:	acebc83a 	sub	r21,r21,r19
  80aa8c:	9dbfffcc 	andi	r22,r19,65535
  80aa90:	05000044 	movi	r20,1
  80aa94:	a809883a 	mov	r4,r21
  80aa98:	b80b883a 	mov	r5,r23
  80aa9c:	08019340 	call	801934 <__udivsi3>
  80aaa0:	100b883a 	mov	r5,r2
  80aaa4:	b009883a 	mov	r4,r22
  80aaa8:	1021883a 	mov	r16,r2
  80aaac:	08019440 	call	801944 <__mulsi3>
  80aab0:	a809883a 	mov	r4,r21
  80aab4:	b80b883a 	mov	r5,r23
  80aab8:	1023883a 	mov	r17,r2
  80aabc:	080193c0 	call	80193c <__umodsi3>
  80aac0:	1004943a 	slli	r2,r2,16
  80aac4:	e006d43a 	srli	r3,fp,16
  80aac8:	10c4b03a 	or	r2,r2,r3
  80aacc:	1440042e 	bgeu	r2,r17,80aae0 <__udivdi3+0xf0>
  80aad0:	14c5883a 	add	r2,r2,r19
  80aad4:	843fffc4 	addi	r16,r16,-1
  80aad8:	14c00136 	bltu	r2,r19,80aae0 <__udivdi3+0xf0>
  80aadc:	14415c36 	bltu	r2,r17,80b050 <__udivdi3+0x660>
  80aae0:	1463c83a 	sub	r17,r2,r17
  80aae4:	8809883a 	mov	r4,r17
  80aae8:	b80b883a 	mov	r5,r23
  80aaec:	08019340 	call	801934 <__udivsi3>
  80aaf0:	100b883a 	mov	r5,r2
  80aaf4:	b009883a 	mov	r4,r22
  80aaf8:	102b883a 	mov	r21,r2
  80aafc:	08019440 	call	801944 <__mulsi3>
  80ab00:	8809883a 	mov	r4,r17
  80ab04:	b80b883a 	mov	r5,r23
  80ab08:	1025883a 	mov	r18,r2
  80ab0c:	080193c0 	call	80193c <__umodsi3>
  80ab10:	1004943a 	slli	r2,r2,16
  80ab14:	e0ffffcc 	andi	r3,fp,65535
  80ab18:	10c4b03a 	or	r2,r2,r3
  80ab1c:	1480042e 	bgeu	r2,r18,80ab30 <__udivdi3+0x140>
  80ab20:	9885883a 	add	r2,r19,r2
  80ab24:	ad7fffc4 	addi	r21,r21,-1
  80ab28:	14c00136 	bltu	r2,r19,80ab30 <__udivdi3+0x140>
  80ab2c:	14813c36 	bltu	r2,r18,80b020 <__udivdi3+0x630>
  80ab30:	8004943a 	slli	r2,r16,16
  80ab34:	a009883a 	mov	r4,r20
  80ab38:	a884b03a 	or	r2,r21,r2
  80ab3c:	00001506 	br	80ab94 <__udivdi3+0x1a4>
  80ab40:	380d883a 	mov	r6,r7
  80ab44:	29c06c36 	bltu	r5,r7,80acf8 <__udivdi3+0x308>
  80ab48:	00bfffd4 	movui	r2,65535
  80ab4c:	11c06436 	bltu	r2,r7,80ace0 <__udivdi3+0x2f0>
  80ab50:	00803fc4 	movi	r2,255
  80ab54:	11c11836 	bltu	r2,r7,80afb8 <__udivdi3+0x5c8>
  80ab58:	000b883a 	mov	r5,zero
  80ab5c:	0005883a 	mov	r2,zero
  80ab60:	3084d83a 	srl	r2,r6,r2
  80ab64:	010020b4 	movhi	r4,130
  80ab68:	2121fb04 	addi	r4,r4,-30740
  80ab6c:	01c00804 	movi	r7,32
  80ab70:	1105883a 	add	r2,r2,r4
  80ab74:	10c00003 	ldbu	r3,0(r2)
  80ab78:	28c7883a 	add	r3,r5,r3
  80ab7c:	38edc83a 	sub	r22,r7,r3
  80ab80:	b000731e 	bne	r22,zero,80ad50 <__udivdi3+0x360>
  80ab84:	35400136 	bltu	r6,r21,80ab8c <__udivdi3+0x19c>
  80ab88:	e4c05b36 	bltu	fp,r19,80acf8 <__udivdi3+0x308>
  80ab8c:	00800044 	movi	r2,1
  80ab90:	0009883a 	mov	r4,zero
  80ab94:	d8800315 	stw	r2,12(sp)
  80ab98:	d9400317 	ldw	r5,12(sp)
  80ab9c:	2007883a 	mov	r3,r4
  80aba0:	d9000415 	stw	r4,16(sp)
  80aba4:	2805883a 	mov	r2,r5
  80aba8:	dfc00e17 	ldw	ra,56(sp)
  80abac:	df000d17 	ldw	fp,52(sp)
  80abb0:	ddc00c17 	ldw	r23,48(sp)
  80abb4:	dd800b17 	ldw	r22,44(sp)
  80abb8:	dd400a17 	ldw	r21,40(sp)
  80abbc:	dd000917 	ldw	r20,36(sp)
  80abc0:	dcc00817 	ldw	r19,32(sp)
  80abc4:	dc800717 	ldw	r18,28(sp)
  80abc8:	dc400617 	ldw	r17,24(sp)
  80abcc:	dc000517 	ldw	r16,20(sp)
  80abd0:	dec00f04 	addi	sp,sp,60
  80abd4:	f800283a 	ret
  80abd8:	00bfffd4 	movui	r2,65535
  80abdc:	12005636 	bltu	r2,r8,80ad38 <__udivdi3+0x348>
  80abe0:	00803fc4 	movi	r2,255
  80abe4:	12010036 	bltu	r2,r8,80afe8 <__udivdi3+0x5f8>
  80abe8:	000b883a 	mov	r5,zero
  80abec:	0005883a 	mov	r2,zero
  80abf0:	9884d83a 	srl	r2,r19,r2
  80abf4:	010020b4 	movhi	r4,130
  80abf8:	2121fb04 	addi	r4,r4,-30740
  80abfc:	01800804 	movi	r6,32
  80ac00:	1105883a 	add	r2,r2,r4
  80ac04:	10c00003 	ldbu	r3,0(r2)
  80ac08:	28c7883a 	add	r3,r5,r3
  80ac0c:	30cbc83a 	sub	r5,r6,r3
  80ac10:	28000626 	beq	r5,zero,80ac2c <__udivdi3+0x23c>
  80ac14:	3145c83a 	sub	r2,r6,r5
  80ac18:	e084d83a 	srl	r2,fp,r2
  80ac1c:	a946983a 	sll	r3,r21,r5
  80ac20:	e178983a 	sll	fp,fp,r5
  80ac24:	9966983a 	sll	r19,r19,r5
  80ac28:	18aab03a 	or	r21,r3,r2
  80ac2c:	982ed43a 	srli	r23,r19,16
  80ac30:	a809883a 	mov	r4,r21
  80ac34:	9cbfffcc 	andi	r18,r19,65535
  80ac38:	b80b883a 	mov	r5,r23
  80ac3c:	08019340 	call	801934 <__udivsi3>
  80ac40:	100b883a 	mov	r5,r2
  80ac44:	9009883a 	mov	r4,r18
  80ac48:	1021883a 	mov	r16,r2
  80ac4c:	08019440 	call	801944 <__mulsi3>
  80ac50:	a809883a 	mov	r4,r21
  80ac54:	b80b883a 	mov	r5,r23
  80ac58:	1023883a 	mov	r17,r2
  80ac5c:	080193c0 	call	80193c <__umodsi3>
  80ac60:	1004943a 	slli	r2,r2,16
  80ac64:	e006d43a 	srli	r3,fp,16
  80ac68:	10c4b03a 	or	r2,r2,r3
  80ac6c:	1440042e 	bgeu	r2,r17,80ac80 <__udivdi3+0x290>
  80ac70:	14c5883a 	add	r2,r2,r19
  80ac74:	843fffc4 	addi	r16,r16,-1
  80ac78:	14c00136 	bltu	r2,r19,80ac80 <__udivdi3+0x290>
  80ac7c:	1440ea36 	bltu	r2,r17,80b028 <__udivdi3+0x638>
  80ac80:	1463c83a 	sub	r17,r2,r17
  80ac84:	8809883a 	mov	r4,r17
  80ac88:	b80b883a 	mov	r5,r23
  80ac8c:	08019340 	call	801934 <__udivsi3>
  80ac90:	100b883a 	mov	r5,r2
  80ac94:	9009883a 	mov	r4,r18
  80ac98:	102b883a 	mov	r21,r2
  80ac9c:	08019440 	call	801944 <__mulsi3>
  80aca0:	8809883a 	mov	r4,r17
  80aca4:	b80b883a 	mov	r5,r23
  80aca8:	1025883a 	mov	r18,r2
  80acac:	080193c0 	call	80193c <__umodsi3>
  80acb0:	1004943a 	slli	r2,r2,16
  80acb4:	e0ffffcc 	andi	r3,fp,65535
  80acb8:	10c4b03a 	or	r2,r2,r3
  80acbc:	1480042e 	bgeu	r2,r18,80acd0 <__udivdi3+0x2e0>
  80acc0:	9885883a 	add	r2,r19,r2
  80acc4:	ad7fffc4 	addi	r21,r21,-1
  80acc8:	14c00136 	bltu	r2,r19,80acd0 <__udivdi3+0x2e0>
  80accc:	1480d936 	bltu	r2,r18,80b034 <__udivdi3+0x644>
  80acd0:	8004943a 	slli	r2,r16,16
  80acd4:	0009883a 	mov	r4,zero
  80acd8:	a884b03a 	or	r2,r21,r2
  80acdc:	003fad06 	br	80ab94 <__udivdi3+0x1a4>
  80ace0:	00804034 	movhi	r2,256
  80ace4:	10bfffc4 	addi	r2,r2,-1
  80ace8:	11c0b636 	bltu	r2,r7,80afc4 <__udivdi3+0x5d4>
  80acec:	01400404 	movi	r5,16
  80acf0:	2805883a 	mov	r2,r5
  80acf4:	003f9a06 	br	80ab60 <__udivdi3+0x170>
  80acf8:	0005883a 	mov	r2,zero
  80acfc:	0009883a 	mov	r4,zero
  80ad00:	003fa406 	br	80ab94 <__udivdi3+0x1a4>
  80ad04:	00804034 	movhi	r2,256
  80ad08:	10bfffc4 	addi	r2,r2,-1
  80ad0c:	14c0b336 	bltu	r2,r19,80afdc <__udivdi3+0x5ec>
  80ad10:	01400404 	movi	r5,16
  80ad14:	2805883a 	mov	r2,r5
  80ad18:	003f5106 	br	80aa60 <__udivdi3+0x70>
  80ad1c:	01000044 	movi	r4,1
  80ad20:	000b883a 	mov	r5,zero
  80ad24:	08019340 	call	801934 <__udivsi3>
  80ad28:	1027883a 	mov	r19,r2
  80ad2c:	00bfffd4 	movui	r2,65535
  80ad30:	14fff436 	bltu	r2,r19,80ad04 <__udivdi3+0x314>
  80ad34:	003f4606 	br	80aa50 <__udivdi3+0x60>
  80ad38:	00804034 	movhi	r2,256
  80ad3c:	10bfffc4 	addi	r2,r2,-1
  80ad40:	1200ac36 	bltu	r2,r8,80aff4 <__udivdi3+0x604>
  80ad44:	01400404 	movi	r5,16
  80ad48:	2805883a 	mov	r2,r5
  80ad4c:	003fa806 	br	80abf0 <__udivdi3+0x200>
  80ad50:	3d85c83a 	sub	r2,r7,r22
  80ad54:	3588983a 	sll	r4,r6,r22
  80ad58:	9886d83a 	srl	r3,r19,r2
  80ad5c:	a8a2d83a 	srl	r17,r21,r2
  80ad60:	e084d83a 	srl	r2,fp,r2
  80ad64:	20eeb03a 	or	r23,r4,r3
  80ad68:	b824d43a 	srli	r18,r23,16
  80ad6c:	ad86983a 	sll	r3,r21,r22
  80ad70:	8809883a 	mov	r4,r17
  80ad74:	900b883a 	mov	r5,r18
  80ad78:	1886b03a 	or	r3,r3,r2
  80ad7c:	d8c00115 	stw	r3,4(sp)
  80ad80:	bc3fffcc 	andi	r16,r23,65535
  80ad84:	08019340 	call	801934 <__udivsi3>
  80ad88:	100b883a 	mov	r5,r2
  80ad8c:	8009883a 	mov	r4,r16
  80ad90:	1029883a 	mov	r20,r2
  80ad94:	08019440 	call	801944 <__mulsi3>
  80ad98:	900b883a 	mov	r5,r18
  80ad9c:	8809883a 	mov	r4,r17
  80ada0:	102b883a 	mov	r21,r2
  80ada4:	080193c0 	call	80193c <__umodsi3>
  80ada8:	d9400117 	ldw	r5,4(sp)
  80adac:	1004943a 	slli	r2,r2,16
  80adb0:	9da6983a 	sll	r19,r19,r22
  80adb4:	2806d43a 	srli	r3,r5,16
  80adb8:	10c4b03a 	or	r2,r2,r3
  80adbc:	1540032e 	bgeu	r2,r21,80adcc <__udivdi3+0x3dc>
  80adc0:	15c5883a 	add	r2,r2,r23
  80adc4:	a53fffc4 	addi	r20,r20,-1
  80adc8:	15c0912e 	bgeu	r2,r23,80b010 <__udivdi3+0x620>
  80adcc:	1563c83a 	sub	r17,r2,r21
  80add0:	8809883a 	mov	r4,r17
  80add4:	900b883a 	mov	r5,r18
  80add8:	08019340 	call	801934 <__udivsi3>
  80addc:	100b883a 	mov	r5,r2
  80ade0:	8009883a 	mov	r4,r16
  80ade4:	102b883a 	mov	r21,r2
  80ade8:	08019440 	call	801944 <__mulsi3>
  80adec:	8809883a 	mov	r4,r17
  80adf0:	900b883a 	mov	r5,r18
  80adf4:	1021883a 	mov	r16,r2
  80adf8:	080193c0 	call	80193c <__umodsi3>
  80adfc:	da800117 	ldw	r10,4(sp)
  80ae00:	1004943a 	slli	r2,r2,16
  80ae04:	50ffffcc 	andi	r3,r10,65535
  80ae08:	10c6b03a 	or	r3,r2,r3
  80ae0c:	1c00032e 	bgeu	r3,r16,80ae1c <__udivdi3+0x42c>
  80ae10:	1dc7883a 	add	r3,r3,r23
  80ae14:	ad7fffc4 	addi	r21,r21,-1
  80ae18:	1dc0792e 	bgeu	r3,r23,80b000 <__udivdi3+0x610>
  80ae1c:	a004943a 	slli	r2,r20,16
  80ae20:	982ed43a 	srli	r23,r19,16
  80ae24:	9cffffcc 	andi	r19,r19,65535
  80ae28:	a8a4b03a 	or	r18,r21,r2
  80ae2c:	947fffcc 	andi	r17,r18,65535
  80ae30:	902ad43a 	srli	r21,r18,16
  80ae34:	8809883a 	mov	r4,r17
  80ae38:	980b883a 	mov	r5,r19
  80ae3c:	1c21c83a 	sub	r16,r3,r16
  80ae40:	08019440 	call	801944 <__mulsi3>
  80ae44:	8809883a 	mov	r4,r17
  80ae48:	b80b883a 	mov	r5,r23
  80ae4c:	1029883a 	mov	r20,r2
  80ae50:	08019440 	call	801944 <__mulsi3>
  80ae54:	980b883a 	mov	r5,r19
  80ae58:	a809883a 	mov	r4,r21
  80ae5c:	1023883a 	mov	r17,r2
  80ae60:	08019440 	call	801944 <__mulsi3>
  80ae64:	a809883a 	mov	r4,r21
  80ae68:	b80b883a 	mov	r5,r23
  80ae6c:	1027883a 	mov	r19,r2
  80ae70:	08019440 	call	801944 <__mulsi3>
  80ae74:	1009883a 	mov	r4,r2
  80ae78:	a004d43a 	srli	r2,r20,16
  80ae7c:	8ce3883a 	add	r17,r17,r19
  80ae80:	1447883a 	add	r3,r2,r17
  80ae84:	1cc0022e 	bgeu	r3,r19,80ae90 <__udivdi3+0x4a0>
  80ae88:	00800074 	movhi	r2,1
  80ae8c:	2089883a 	add	r4,r4,r2
  80ae90:	1804d43a 	srli	r2,r3,16
  80ae94:	2085883a 	add	r2,r4,r2
  80ae98:	80804436 	bltu	r16,r2,80afac <__udivdi3+0x5bc>
  80ae9c:	80803e26 	beq	r16,r2,80af98 <__udivdi3+0x5a8>
  80aea0:	9005883a 	mov	r2,r18
  80aea4:	0009883a 	mov	r4,zero
  80aea8:	003f3a06 	br	80ab94 <__udivdi3+0x1a4>
  80aeac:	9d26983a 	sll	r19,r19,r20
  80aeb0:	3505c83a 	sub	r2,r6,r20
  80aeb4:	a8a2d83a 	srl	r17,r21,r2
  80aeb8:	982ed43a 	srli	r23,r19,16
  80aebc:	e084d83a 	srl	r2,fp,r2
  80aec0:	ad06983a 	sll	r3,r21,r20
  80aec4:	8809883a 	mov	r4,r17
  80aec8:	b80b883a 	mov	r5,r23
  80aecc:	1886b03a 	or	r3,r3,r2
  80aed0:	d8c00015 	stw	r3,0(sp)
  80aed4:	9dbfffcc 	andi	r22,r19,65535
  80aed8:	08019340 	call	801934 <__udivsi3>
  80aedc:	100b883a 	mov	r5,r2
  80aee0:	b009883a 	mov	r4,r22
  80aee4:	d8800215 	stw	r2,8(sp)
  80aee8:	08019440 	call	801944 <__mulsi3>
  80aeec:	8809883a 	mov	r4,r17
  80aef0:	b80b883a 	mov	r5,r23
  80aef4:	102b883a 	mov	r21,r2
  80aef8:	080193c0 	call	80193c <__umodsi3>
  80aefc:	d9000017 	ldw	r4,0(sp)
  80af00:	1004943a 	slli	r2,r2,16
  80af04:	2006d43a 	srli	r3,r4,16
  80af08:	10c4b03a 	or	r2,r2,r3
  80af0c:	1540052e 	bgeu	r2,r21,80af24 <__udivdi3+0x534>
  80af10:	d9400217 	ldw	r5,8(sp)
  80af14:	14c5883a 	add	r2,r2,r19
  80af18:	297fffc4 	addi	r5,r5,-1
  80af1c:	d9400215 	stw	r5,8(sp)
  80af20:	14c0462e 	bgeu	r2,r19,80b03c <__udivdi3+0x64c>
  80af24:	1563c83a 	sub	r17,r2,r21
  80af28:	8809883a 	mov	r4,r17
  80af2c:	b80b883a 	mov	r5,r23
  80af30:	08019340 	call	801934 <__udivsi3>
  80af34:	100b883a 	mov	r5,r2
  80af38:	b009883a 	mov	r4,r22
  80af3c:	1025883a 	mov	r18,r2
  80af40:	08019440 	call	801944 <__mulsi3>
  80af44:	8809883a 	mov	r4,r17
  80af48:	b80b883a 	mov	r5,r23
  80af4c:	1021883a 	mov	r16,r2
  80af50:	080193c0 	call	80193c <__umodsi3>
  80af54:	da800017 	ldw	r10,0(sp)
  80af58:	1004943a 	slli	r2,r2,16
  80af5c:	50ffffcc 	andi	r3,r10,65535
  80af60:	10c6b03a 	or	r3,r2,r3
  80af64:	1c00062e 	bgeu	r3,r16,80af80 <__udivdi3+0x590>
  80af68:	1cc7883a 	add	r3,r3,r19
  80af6c:	94bfffc4 	addi	r18,r18,-1
  80af70:	1cc00336 	bltu	r3,r19,80af80 <__udivdi3+0x590>
  80af74:	1c00022e 	bgeu	r3,r16,80af80 <__udivdi3+0x590>
  80af78:	94bfffc4 	addi	r18,r18,-1
  80af7c:	1cc7883a 	add	r3,r3,r19
  80af80:	d9000217 	ldw	r4,8(sp)
  80af84:	e538983a 	sll	fp,fp,r20
  80af88:	1c2bc83a 	sub	r21,r3,r16
  80af8c:	2004943a 	slli	r2,r4,16
  80af90:	90a8b03a 	or	r20,r18,r2
  80af94:	003ebf06 	br	80aa94 <__udivdi3+0xa4>
  80af98:	1804943a 	slli	r2,r3,16
  80af9c:	e588983a 	sll	r4,fp,r22
  80afa0:	a0ffffcc 	andi	r3,r20,65535
  80afa4:	10c5883a 	add	r2,r2,r3
  80afa8:	20bfbd2e 	bgeu	r4,r2,80aea0 <__udivdi3+0x4b0>
  80afac:	90bfffc4 	addi	r2,r18,-1
  80afb0:	0009883a 	mov	r4,zero
  80afb4:	003ef706 	br	80ab94 <__udivdi3+0x1a4>
  80afb8:	01400204 	movi	r5,8
  80afbc:	2805883a 	mov	r2,r5
  80afc0:	003ee706 	br	80ab60 <__udivdi3+0x170>
  80afc4:	01400604 	movi	r5,24
  80afc8:	2805883a 	mov	r2,r5
  80afcc:	003ee406 	br	80ab60 <__udivdi3+0x170>
  80afd0:	01400204 	movi	r5,8
  80afd4:	2805883a 	mov	r2,r5
  80afd8:	003ea106 	br	80aa60 <__udivdi3+0x70>
  80afdc:	01400604 	movi	r5,24
  80afe0:	2805883a 	mov	r2,r5
  80afe4:	003e9e06 	br	80aa60 <__udivdi3+0x70>
  80afe8:	01400204 	movi	r5,8
  80afec:	2805883a 	mov	r2,r5
  80aff0:	003eff06 	br	80abf0 <__udivdi3+0x200>
  80aff4:	01400604 	movi	r5,24
  80aff8:	2805883a 	mov	r2,r5
  80affc:	003efc06 	br	80abf0 <__udivdi3+0x200>
  80b000:	1c3f862e 	bgeu	r3,r16,80ae1c <__udivdi3+0x42c>
  80b004:	1dc7883a 	add	r3,r3,r23
  80b008:	ad7fffc4 	addi	r21,r21,-1
  80b00c:	003f8306 	br	80ae1c <__udivdi3+0x42c>
  80b010:	157f6e2e 	bgeu	r2,r21,80adcc <__udivdi3+0x3dc>
  80b014:	a53fffc4 	addi	r20,r20,-1
  80b018:	15c5883a 	add	r2,r2,r23
  80b01c:	003f6b06 	br	80adcc <__udivdi3+0x3dc>
  80b020:	ad7fffc4 	addi	r21,r21,-1
  80b024:	003ec206 	br	80ab30 <__udivdi3+0x140>
  80b028:	843fffc4 	addi	r16,r16,-1
  80b02c:	14c5883a 	add	r2,r2,r19
  80b030:	003f1306 	br	80ac80 <__udivdi3+0x290>
  80b034:	ad7fffc4 	addi	r21,r21,-1
  80b038:	003f2506 	br	80acd0 <__udivdi3+0x2e0>
  80b03c:	157fb92e 	bgeu	r2,r21,80af24 <__udivdi3+0x534>
  80b040:	297fffc4 	addi	r5,r5,-1
  80b044:	14c5883a 	add	r2,r2,r19
  80b048:	d9400215 	stw	r5,8(sp)
  80b04c:	003fb506 	br	80af24 <__udivdi3+0x534>
  80b050:	843fffc4 	addi	r16,r16,-1
  80b054:	14c5883a 	add	r2,r2,r19
  80b058:	003ea106 	br	80aae0 <__udivdi3+0xf0>

0080b05c <__umoddi3>:
  80b05c:	defff004 	addi	sp,sp,-64
  80b060:	3011883a 	mov	r8,r6
  80b064:	000d883a 	mov	r6,zero
  80b068:	dd400b15 	stw	r21,44(sp)
  80b06c:	dcc00915 	stw	r19,36(sp)
  80b070:	dc000615 	stw	r16,24(sp)
  80b074:	dfc00f15 	stw	ra,60(sp)
  80b078:	df000e15 	stw	fp,56(sp)
  80b07c:	ddc00d15 	stw	r23,52(sp)
  80b080:	dd800c15 	stw	r22,48(sp)
  80b084:	dd000a15 	stw	r20,40(sp)
  80b088:	dc800815 	stw	r18,32(sp)
  80b08c:	dc400715 	stw	r17,28(sp)
  80b090:	2817883a 	mov	r11,r5
  80b094:	d9800415 	stw	r6,16(sp)
  80b098:	4027883a 	mov	r19,r8
  80b09c:	d9800515 	stw	r6,20(sp)
  80b0a0:	2021883a 	mov	r16,r4
  80b0a4:	282b883a 	mov	r21,r5
  80b0a8:	38002c1e 	bne	r7,zero,80b15c <__umoddi3+0x100>
  80b0ac:	2a005636 	bltu	r5,r8,80b208 <__umoddi3+0x1ac>
  80b0b0:	40009a26 	beq	r8,zero,80b31c <__umoddi3+0x2c0>
  80b0b4:	00bfffd4 	movui	r2,65535
  80b0b8:	14c09236 	bltu	r2,r19,80b304 <__umoddi3+0x2a8>
  80b0bc:	00803fc4 	movi	r2,255
  80b0c0:	14c15c36 	bltu	r2,r19,80b634 <__umoddi3+0x5d8>
  80b0c4:	000b883a 	mov	r5,zero
  80b0c8:	0005883a 	mov	r2,zero
  80b0cc:	9884d83a 	srl	r2,r19,r2
  80b0d0:	010020b4 	movhi	r4,130
  80b0d4:	2121fb04 	addi	r4,r4,-30740
  80b0d8:	01800804 	movi	r6,32
  80b0dc:	1105883a 	add	r2,r2,r4
  80b0e0:	10c00003 	ldbu	r3,0(r2)
  80b0e4:	28c7883a 	add	r3,r5,r3
  80b0e8:	30e5c83a 	sub	r18,r6,r3
  80b0ec:	9000a41e 	bne	r18,zero,80b380 <__umoddi3+0x324>
  80b0f0:	982ed43a 	srli	r23,r19,16
  80b0f4:	acebc83a 	sub	r21,r21,r19
  80b0f8:	9d3fffcc 	andi	r20,r19,65535
  80b0fc:	002d883a 	mov	r22,zero
  80b100:	a809883a 	mov	r4,r21
  80b104:	b80b883a 	mov	r5,r23
  80b108:	08019340 	call	801934 <__udivsi3>
  80b10c:	100b883a 	mov	r5,r2
  80b110:	a009883a 	mov	r4,r20
  80b114:	08019440 	call	801944 <__mulsi3>
  80b118:	a809883a 	mov	r4,r21
  80b11c:	b80b883a 	mov	r5,r23
  80b120:	1023883a 	mov	r17,r2
  80b124:	080193c0 	call	80193c <__umodsi3>
  80b128:	1004943a 	slli	r2,r2,16
  80b12c:	8006d43a 	srli	r3,r16,16
  80b130:	10c4b03a 	or	r2,r2,r3
  80b134:	1440032e 	bgeu	r2,r17,80b144 <__umoddi3+0xe8>
  80b138:	14c5883a 	add	r2,r2,r19
  80b13c:	14c00136 	bltu	r2,r19,80b144 <__umoddi3+0xe8>
  80b140:	14415836 	bltu	r2,r17,80b6a4 <__umoddi3+0x648>
  80b144:	1463c83a 	sub	r17,r2,r17
  80b148:	8809883a 	mov	r4,r17
  80b14c:	b80b883a 	mov	r5,r23
  80b150:	08019340 	call	801934 <__udivsi3>
  80b154:	a009883a 	mov	r4,r20
  80b158:	00005306 	br	80b2a8 <__umoddi3+0x24c>
  80b15c:	380d883a 	mov	r6,r7
  80b160:	29c0132e 	bgeu	r5,r7,80b1b0 <__umoddi3+0x154>
  80b164:	d9000415 	stw	r4,16(sp)
  80b168:	d9400515 	stw	r5,20(sp)
  80b16c:	d9400417 	ldw	r5,16(sp)
  80b170:	5813883a 	mov	r9,r11
  80b174:	2811883a 	mov	r8,r5
  80b178:	4005883a 	mov	r2,r8
  80b17c:	4807883a 	mov	r3,r9
  80b180:	dfc00f17 	ldw	ra,60(sp)
  80b184:	df000e17 	ldw	fp,56(sp)
  80b188:	ddc00d17 	ldw	r23,52(sp)
  80b18c:	dd800c17 	ldw	r22,48(sp)
  80b190:	dd400b17 	ldw	r21,44(sp)
  80b194:	dd000a17 	ldw	r20,40(sp)
  80b198:	dcc00917 	ldw	r19,36(sp)
  80b19c:	dc800817 	ldw	r18,32(sp)
  80b1a0:	dc400717 	ldw	r17,28(sp)
  80b1a4:	dc000617 	ldw	r16,24(sp)
  80b1a8:	dec01004 	addi	sp,sp,64
  80b1ac:	f800283a 	ret
  80b1b0:	00bfffd4 	movui	r2,65535
  80b1b4:	11c06636 	bltu	r2,r7,80b350 <__umoddi3+0x2f4>
  80b1b8:	00803fc4 	movi	r2,255
  80b1bc:	11c12036 	bltu	r2,r7,80b640 <__umoddi3+0x5e4>
  80b1c0:	000b883a 	mov	r5,zero
  80b1c4:	0005883a 	mov	r2,zero
  80b1c8:	3084d83a 	srl	r2,r6,r2
  80b1cc:	010020b4 	movhi	r4,130
  80b1d0:	2121fb04 	addi	r4,r4,-30740
  80b1d4:	01c00804 	movi	r7,32
  80b1d8:	1105883a 	add	r2,r2,r4
  80b1dc:	10c00003 	ldbu	r3,0(r2)
  80b1e0:	28c7883a 	add	r3,r5,r3
  80b1e4:	38e5c83a 	sub	r18,r7,r3
  80b1e8:	9000941e 	bne	r18,zero,80b43c <__umoddi3+0x3e0>
  80b1ec:	35405e36 	bltu	r6,r21,80b368 <__umoddi3+0x30c>
  80b1f0:	84c05d2e 	bgeu	r16,r19,80b368 <__umoddi3+0x30c>
  80b1f4:	8011883a 	mov	r8,r16
  80b1f8:	a813883a 	mov	r9,r21
  80b1fc:	dc000415 	stw	r16,16(sp)
  80b200:	dd400515 	stw	r21,20(sp)
  80b204:	003fdc06 	br	80b178 <__umoddi3+0x11c>
  80b208:	00bfffd4 	movui	r2,65535
  80b20c:	12004a36 	bltu	r2,r8,80b338 <__umoddi3+0x2dc>
  80b210:	00803fc4 	movi	r2,255
  80b214:	12010d36 	bltu	r2,r8,80b64c <__umoddi3+0x5f0>
  80b218:	000b883a 	mov	r5,zero
  80b21c:	0005883a 	mov	r2,zero
  80b220:	9884d83a 	srl	r2,r19,r2
  80b224:	010020b4 	movhi	r4,130
  80b228:	2121fb04 	addi	r4,r4,-30740
  80b22c:	01800804 	movi	r6,32
  80b230:	1105883a 	add	r2,r2,r4
  80b234:	10c00003 	ldbu	r3,0(r2)
  80b238:	28c7883a 	add	r3,r5,r3
  80b23c:	30c7c83a 	sub	r3,r6,r3
  80b240:	1800dc1e 	bne	r3,zero,80b5b4 <__umoddi3+0x558>
  80b244:	002d883a 	mov	r22,zero
  80b248:	982ed43a 	srli	r23,r19,16
  80b24c:	a809883a 	mov	r4,r21
  80b250:	9cbfffcc 	andi	r18,r19,65535
  80b254:	b80b883a 	mov	r5,r23
  80b258:	08019340 	call	801934 <__udivsi3>
  80b25c:	100b883a 	mov	r5,r2
  80b260:	9009883a 	mov	r4,r18
  80b264:	08019440 	call	801944 <__mulsi3>
  80b268:	a809883a 	mov	r4,r21
  80b26c:	b80b883a 	mov	r5,r23
  80b270:	1023883a 	mov	r17,r2
  80b274:	080193c0 	call	80193c <__umodsi3>
  80b278:	1004943a 	slli	r2,r2,16
  80b27c:	8006d43a 	srli	r3,r16,16
  80b280:	10c4b03a 	or	r2,r2,r3
  80b284:	1440032e 	bgeu	r2,r17,80b294 <__umoddi3+0x238>
  80b288:	14c5883a 	add	r2,r2,r19
  80b28c:	14c00136 	bltu	r2,r19,80b294 <__umoddi3+0x238>
  80b290:	14410236 	bltu	r2,r17,80b69c <__umoddi3+0x640>
  80b294:	1463c83a 	sub	r17,r2,r17
  80b298:	8809883a 	mov	r4,r17
  80b29c:	b80b883a 	mov	r5,r23
  80b2a0:	08019340 	call	801934 <__udivsi3>
  80b2a4:	9009883a 	mov	r4,r18
  80b2a8:	100b883a 	mov	r5,r2
  80b2ac:	08019440 	call	801944 <__mulsi3>
  80b2b0:	8809883a 	mov	r4,r17
  80b2b4:	b80b883a 	mov	r5,r23
  80b2b8:	102b883a 	mov	r21,r2
  80b2bc:	080193c0 	call	80193c <__umodsi3>
  80b2c0:	1004943a 	slli	r2,r2,16
  80b2c4:	80ffffcc 	andi	r3,r16,65535
  80b2c8:	10c4b03a 	or	r2,r2,r3
  80b2cc:	1540042e 	bgeu	r2,r21,80b2e0 <__umoddi3+0x284>
  80b2d0:	14c5883a 	add	r2,r2,r19
  80b2d4:	14c00236 	bltu	r2,r19,80b2e0 <__umoddi3+0x284>
  80b2d8:	1540012e 	bgeu	r2,r21,80b2e0 <__umoddi3+0x284>
  80b2dc:	14c5883a 	add	r2,r2,r19
  80b2e0:	1545c83a 	sub	r2,r2,r21
  80b2e4:	1584d83a 	srl	r2,r2,r22
  80b2e8:	0013883a 	mov	r9,zero
  80b2ec:	d8800415 	stw	r2,16(sp)
  80b2f0:	d8c00417 	ldw	r3,16(sp)
  80b2f4:	0005883a 	mov	r2,zero
  80b2f8:	d8800515 	stw	r2,20(sp)
  80b2fc:	1811883a 	mov	r8,r3
  80b300:	003f9d06 	br	80b178 <__umoddi3+0x11c>
  80b304:	00804034 	movhi	r2,256
  80b308:	10bfffc4 	addi	r2,r2,-1
  80b30c:	14c0c636 	bltu	r2,r19,80b628 <__umoddi3+0x5cc>
  80b310:	01400404 	movi	r5,16
  80b314:	2805883a 	mov	r2,r5
  80b318:	003f6c06 	br	80b0cc <__umoddi3+0x70>
  80b31c:	01000044 	movi	r4,1
  80b320:	000b883a 	mov	r5,zero
  80b324:	08019340 	call	801934 <__udivsi3>
  80b328:	1027883a 	mov	r19,r2
  80b32c:	00bfffd4 	movui	r2,65535
  80b330:	14fff436 	bltu	r2,r19,80b304 <__umoddi3+0x2a8>
  80b334:	003f6106 	br	80b0bc <__umoddi3+0x60>
  80b338:	00804034 	movhi	r2,256
  80b33c:	10bfffc4 	addi	r2,r2,-1
  80b340:	1200c536 	bltu	r2,r8,80b658 <__umoddi3+0x5fc>
  80b344:	01400404 	movi	r5,16
  80b348:	2805883a 	mov	r2,r5
  80b34c:	003fb406 	br	80b220 <__umoddi3+0x1c4>
  80b350:	00804034 	movhi	r2,256
  80b354:	10bfffc4 	addi	r2,r2,-1
  80b358:	11c0c236 	bltu	r2,r7,80b664 <__umoddi3+0x608>
  80b35c:	01400404 	movi	r5,16
  80b360:	2805883a 	mov	r2,r5
  80b364:	003f9806 	br	80b1c8 <__umoddi3+0x16c>
  80b368:	84c9c83a 	sub	r4,r16,r19
  80b36c:	8105803a 	cmpltu	r2,r16,r4
  80b370:	a987c83a 	sub	r3,r21,r6
  80b374:	18abc83a 	sub	r21,r3,r2
  80b378:	2021883a 	mov	r16,r4
  80b37c:	003f9d06 	br	80b1f4 <__umoddi3+0x198>
  80b380:	9ca6983a 	sll	r19,r19,r18
  80b384:	3485c83a 	sub	r2,r6,r18
  80b388:	a8a2d83a 	srl	r17,r21,r2
  80b38c:	982ed43a 	srli	r23,r19,16
  80b390:	ac86983a 	sll	r3,r21,r18
  80b394:	8084d83a 	srl	r2,r16,r2
  80b398:	8809883a 	mov	r4,r17
  80b39c:	b80b883a 	mov	r5,r23
  80b3a0:	18b8b03a 	or	fp,r3,r2
  80b3a4:	9d3fffcc 	andi	r20,r19,65535
  80b3a8:	08019340 	call	801934 <__udivsi3>
  80b3ac:	100b883a 	mov	r5,r2
  80b3b0:	a009883a 	mov	r4,r20
  80b3b4:	08019440 	call	801944 <__mulsi3>
  80b3b8:	8809883a 	mov	r4,r17
  80b3bc:	b80b883a 	mov	r5,r23
  80b3c0:	102b883a 	mov	r21,r2
  80b3c4:	080193c0 	call	80193c <__umodsi3>
  80b3c8:	1004943a 	slli	r2,r2,16
  80b3cc:	e006d43a 	srli	r3,fp,16
  80b3d0:	902d883a 	mov	r22,r18
  80b3d4:	10c4b03a 	or	r2,r2,r3
  80b3d8:	1540022e 	bgeu	r2,r21,80b3e4 <__umoddi3+0x388>
  80b3dc:	14c5883a 	add	r2,r2,r19
  80b3e0:	14c0ab2e 	bgeu	r2,r19,80b690 <__umoddi3+0x634>
  80b3e4:	1563c83a 	sub	r17,r2,r21
  80b3e8:	8809883a 	mov	r4,r17
  80b3ec:	b80b883a 	mov	r5,r23
  80b3f0:	08019340 	call	801934 <__udivsi3>
  80b3f4:	100b883a 	mov	r5,r2
  80b3f8:	a009883a 	mov	r4,r20
  80b3fc:	08019440 	call	801944 <__mulsi3>
  80b400:	8809883a 	mov	r4,r17
  80b404:	b80b883a 	mov	r5,r23
  80b408:	102b883a 	mov	r21,r2
  80b40c:	080193c0 	call	80193c <__umodsi3>
  80b410:	1004943a 	slli	r2,r2,16
  80b414:	e0ffffcc 	andi	r3,fp,65535
  80b418:	10c4b03a 	or	r2,r2,r3
  80b41c:	1540042e 	bgeu	r2,r21,80b430 <__umoddi3+0x3d4>
  80b420:	14c5883a 	add	r2,r2,r19
  80b424:	14c00236 	bltu	r2,r19,80b430 <__umoddi3+0x3d4>
  80b428:	1540012e 	bgeu	r2,r21,80b430 <__umoddi3+0x3d4>
  80b42c:	14c5883a 	add	r2,r2,r19
  80b430:	84a0983a 	sll	r16,r16,r18
  80b434:	156bc83a 	sub	r21,r2,r21
  80b438:	003f3106 	br	80b100 <__umoddi3+0xa4>
  80b43c:	3c8fc83a 	sub	r7,r7,r18
  80b440:	3486983a 	sll	r3,r6,r18
  80b444:	99c4d83a 	srl	r2,r19,r7
  80b448:	a9e2d83a 	srl	r17,r21,r7
  80b44c:	ac8c983a 	sll	r6,r21,r18
  80b450:	18acb03a 	or	r22,r3,r2
  80b454:	b02ed43a 	srli	r23,r22,16
  80b458:	81c4d83a 	srl	r2,r16,r7
  80b45c:	8809883a 	mov	r4,r17
  80b460:	b80b883a 	mov	r5,r23
  80b464:	308cb03a 	or	r6,r6,r2
  80b468:	d9c00315 	stw	r7,12(sp)
  80b46c:	d9800215 	stw	r6,8(sp)
  80b470:	b53fffcc 	andi	r20,r22,65535
  80b474:	08019340 	call	801934 <__udivsi3>
  80b478:	100b883a 	mov	r5,r2
  80b47c:	a009883a 	mov	r4,r20
  80b480:	1039883a 	mov	fp,r2
  80b484:	08019440 	call	801944 <__mulsi3>
  80b488:	8809883a 	mov	r4,r17
  80b48c:	b80b883a 	mov	r5,r23
  80b490:	102b883a 	mov	r21,r2
  80b494:	080193c0 	call	80193c <__umodsi3>
  80b498:	d9000217 	ldw	r4,8(sp)
  80b49c:	1004943a 	slli	r2,r2,16
  80b4a0:	9ca6983a 	sll	r19,r19,r18
  80b4a4:	2006d43a 	srli	r3,r4,16
  80b4a8:	84a0983a 	sll	r16,r16,r18
  80b4ac:	dcc00015 	stw	r19,0(sp)
  80b4b0:	10c4b03a 	or	r2,r2,r3
  80b4b4:	dc000115 	stw	r16,4(sp)
  80b4b8:	1540032e 	bgeu	r2,r21,80b4c8 <__umoddi3+0x46c>
  80b4bc:	1585883a 	add	r2,r2,r22
  80b4c0:	e73fffc4 	addi	fp,fp,-1
  80b4c4:	15806e2e 	bgeu	r2,r22,80b680 <__umoddi3+0x624>
  80b4c8:	1563c83a 	sub	r17,r2,r21
  80b4cc:	8809883a 	mov	r4,r17
  80b4d0:	b80b883a 	mov	r5,r23
  80b4d4:	08019340 	call	801934 <__udivsi3>
  80b4d8:	100b883a 	mov	r5,r2
  80b4dc:	a009883a 	mov	r4,r20
  80b4e0:	1021883a 	mov	r16,r2
  80b4e4:	08019440 	call	801944 <__mulsi3>
  80b4e8:	b80b883a 	mov	r5,r23
  80b4ec:	8809883a 	mov	r4,r17
  80b4f0:	1029883a 	mov	r20,r2
  80b4f4:	080193c0 	call	80193c <__umodsi3>
  80b4f8:	d9400217 	ldw	r5,8(sp)
  80b4fc:	1004943a 	slli	r2,r2,16
  80b500:	28ffffcc 	andi	r3,r5,65535
  80b504:	10c4b03a 	or	r2,r2,r3
  80b508:	1500032e 	bgeu	r2,r20,80b518 <__umoddi3+0x4bc>
  80b50c:	1585883a 	add	r2,r2,r22
  80b510:	843fffc4 	addi	r16,r16,-1
  80b514:	1580562e 	bgeu	r2,r22,80b670 <__umoddi3+0x614>
  80b518:	d9800017 	ldw	r6,0(sp)
  80b51c:	e022943a 	slli	r17,fp,16
  80b520:	302ed43a 	srli	r23,r6,16
  80b524:	8462b03a 	or	r17,r16,r17
  80b528:	34ffffcc 	andi	r19,r6,65535
  80b52c:	882ad43a 	srli	r21,r17,16
  80b530:	8c7fffcc 	andi	r17,r17,65535
  80b534:	8809883a 	mov	r4,r17
  80b538:	980b883a 	mov	r5,r19
  80b53c:	1521c83a 	sub	r16,r2,r20
  80b540:	08019440 	call	801944 <__mulsi3>
  80b544:	8809883a 	mov	r4,r17
  80b548:	b80b883a 	mov	r5,r23
  80b54c:	1029883a 	mov	r20,r2
  80b550:	08019440 	call	801944 <__mulsi3>
  80b554:	980b883a 	mov	r5,r19
  80b558:	a809883a 	mov	r4,r21
  80b55c:	1023883a 	mov	r17,r2
  80b560:	08019440 	call	801944 <__mulsi3>
  80b564:	a809883a 	mov	r4,r21
  80b568:	b80b883a 	mov	r5,r23
  80b56c:	1027883a 	mov	r19,r2
  80b570:	08019440 	call	801944 <__mulsi3>
  80b574:	100b883a 	mov	r5,r2
  80b578:	a004d43a 	srli	r2,r20,16
  80b57c:	8ce3883a 	add	r17,r17,r19
  80b580:	1449883a 	add	r4,r2,r17
  80b584:	24c0022e 	bgeu	r4,r19,80b590 <__umoddi3+0x534>
  80b588:	00800074 	movhi	r2,1
  80b58c:	288b883a 	add	r5,r5,r2
  80b590:	2004d43a 	srli	r2,r4,16
  80b594:	2008943a 	slli	r4,r4,16
  80b598:	a0ffffcc 	andi	r3,r20,65535
  80b59c:	288d883a 	add	r6,r5,r2
  80b5a0:	20c9883a 	add	r4,r4,r3
  80b5a4:	81800b36 	bltu	r16,r6,80b5d4 <__umoddi3+0x578>
  80b5a8:	81804026 	beq	r16,r6,80b6ac <__umoddi3+0x650>
  80b5ac:	818dc83a 	sub	r6,r16,r6
  80b5b0:	00000f06 	br	80b5f0 <__umoddi3+0x594>
  80b5b4:	30c5c83a 	sub	r2,r6,r3
  80b5b8:	182d883a 	mov	r22,r3
  80b5bc:	8084d83a 	srl	r2,r16,r2
  80b5c0:	a8c6983a 	sll	r3,r21,r3
  80b5c4:	9da6983a 	sll	r19,r19,r22
  80b5c8:	85a0983a 	sll	r16,r16,r22
  80b5cc:	18aab03a 	or	r21,r3,r2
  80b5d0:	003f1d06 	br	80b248 <__umoddi3+0x1ec>
  80b5d4:	d8c00017 	ldw	r3,0(sp)
  80b5d8:	20c5c83a 	sub	r2,r4,r3
  80b5dc:	2089803a 	cmpltu	r4,r4,r2
  80b5e0:	3587c83a 	sub	r3,r6,r22
  80b5e4:	1907c83a 	sub	r3,r3,r4
  80b5e8:	80cdc83a 	sub	r6,r16,r3
  80b5ec:	1009883a 	mov	r4,r2
  80b5f0:	d9400117 	ldw	r5,4(sp)
  80b5f4:	2905c83a 	sub	r2,r5,r4
  80b5f8:	2887803a 	cmpltu	r3,r5,r2
  80b5fc:	30c7c83a 	sub	r3,r6,r3
  80b600:	d9800317 	ldw	r6,12(sp)
  80b604:	1484d83a 	srl	r2,r2,r18
  80b608:	1988983a 	sll	r4,r3,r6
  80b60c:	1c86d83a 	srl	r3,r3,r18
  80b610:	2088b03a 	or	r4,r4,r2
  80b614:	2011883a 	mov	r8,r4
  80b618:	1813883a 	mov	r9,r3
  80b61c:	d9000415 	stw	r4,16(sp)
  80b620:	d8c00515 	stw	r3,20(sp)
  80b624:	003ed406 	br	80b178 <__umoddi3+0x11c>
  80b628:	01400604 	movi	r5,24
  80b62c:	2805883a 	mov	r2,r5
  80b630:	003ea606 	br	80b0cc <__umoddi3+0x70>
  80b634:	01400204 	movi	r5,8
  80b638:	2805883a 	mov	r2,r5
  80b63c:	003ea306 	br	80b0cc <__umoddi3+0x70>
  80b640:	01400204 	movi	r5,8
  80b644:	2805883a 	mov	r2,r5
  80b648:	003edf06 	br	80b1c8 <__umoddi3+0x16c>
  80b64c:	01400204 	movi	r5,8
  80b650:	2805883a 	mov	r2,r5
  80b654:	003ef206 	br	80b220 <__umoddi3+0x1c4>
  80b658:	01400604 	movi	r5,24
  80b65c:	2805883a 	mov	r2,r5
  80b660:	003eef06 	br	80b220 <__umoddi3+0x1c4>
  80b664:	01400604 	movi	r5,24
  80b668:	2805883a 	mov	r2,r5
  80b66c:	003ed606 	br	80b1c8 <__umoddi3+0x16c>
  80b670:	153fa92e 	bgeu	r2,r20,80b518 <__umoddi3+0x4bc>
  80b674:	843fffc4 	addi	r16,r16,-1
  80b678:	1585883a 	add	r2,r2,r22
  80b67c:	003fa606 	br	80b518 <__umoddi3+0x4bc>
  80b680:	157f912e 	bgeu	r2,r21,80b4c8 <__umoddi3+0x46c>
  80b684:	e73fffc4 	addi	fp,fp,-1
  80b688:	1585883a 	add	r2,r2,r22
  80b68c:	003f8e06 	br	80b4c8 <__umoddi3+0x46c>
  80b690:	157f542e 	bgeu	r2,r21,80b3e4 <__umoddi3+0x388>
  80b694:	14c5883a 	add	r2,r2,r19
  80b698:	003f5206 	br	80b3e4 <__umoddi3+0x388>
  80b69c:	14c5883a 	add	r2,r2,r19
  80b6a0:	003efc06 	br	80b294 <__umoddi3+0x238>
  80b6a4:	14c5883a 	add	r2,r2,r19
  80b6a8:	003ea606 	br	80b144 <__umoddi3+0xe8>
  80b6ac:	d8800117 	ldw	r2,4(sp)
  80b6b0:	113fc836 	bltu	r2,r4,80b5d4 <__umoddi3+0x578>
  80b6b4:	000d883a 	mov	r6,zero
  80b6b8:	003fcd06 	br	80b5f0 <__umoddi3+0x594>

0080b6bc <__muldf3>:
  80b6bc:	deffe004 	addi	sp,sp,-128
  80b6c0:	dc401815 	stw	r17,96(sp)
  80b6c4:	dc400404 	addi	r17,sp,16
  80b6c8:	2011883a 	mov	r8,r4
  80b6cc:	2813883a 	mov	r9,r5
  80b6d0:	dc001715 	stw	r16,92(sp)
  80b6d4:	d809883a 	mov	r4,sp
  80b6d8:	880b883a 	mov	r5,r17
  80b6dc:	dc000904 	addi	r16,sp,36
  80b6e0:	dfc01f15 	stw	ra,124(sp)
  80b6e4:	da400115 	stw	r9,4(sp)
  80b6e8:	d9c00315 	stw	r7,12(sp)
  80b6ec:	da000015 	stw	r8,0(sp)
  80b6f0:	d9800215 	stw	r6,8(sp)
  80b6f4:	ddc01e15 	stw	r23,120(sp)
  80b6f8:	dd801d15 	stw	r22,116(sp)
  80b6fc:	dd401c15 	stw	r21,112(sp)
  80b700:	dd001b15 	stw	r20,108(sp)
  80b704:	dcc01a15 	stw	r19,104(sp)
  80b708:	dc801915 	stw	r18,100(sp)
  80b70c:	0801c900 	call	801c90 <__unpack_d>
  80b710:	d9000204 	addi	r4,sp,8
  80b714:	800b883a 	mov	r5,r16
  80b718:	0801c900 	call	801c90 <__unpack_d>
  80b71c:	d9000417 	ldw	r4,16(sp)
  80b720:	00800044 	movi	r2,1
  80b724:	1100102e 	bgeu	r2,r4,80b768 <__muldf3+0xac>
  80b728:	d8c00917 	ldw	r3,36(sp)
  80b72c:	10c0062e 	bgeu	r2,r3,80b748 <__muldf3+0x8c>
  80b730:	00800104 	movi	r2,4
  80b734:	20800a26 	beq	r4,r2,80b760 <__muldf3+0xa4>
  80b738:	1880cc26 	beq	r3,r2,80ba6c <__muldf3+0x3b0>
  80b73c:	00800084 	movi	r2,2
  80b740:	20800926 	beq	r4,r2,80b768 <__muldf3+0xac>
  80b744:	1880191e 	bne	r3,r2,80b7ac <__muldf3+0xf0>
  80b748:	d8c00a17 	ldw	r3,40(sp)
  80b74c:	d8800517 	ldw	r2,20(sp)
  80b750:	8009883a 	mov	r4,r16
  80b754:	10c4c03a 	cmpne	r2,r2,r3
  80b758:	d8800a15 	stw	r2,40(sp)
  80b75c:	00000706 	br	80b77c <__muldf3+0xc0>
  80b760:	00800084 	movi	r2,2
  80b764:	1880c326 	beq	r3,r2,80ba74 <__muldf3+0x3b8>
  80b768:	d8800517 	ldw	r2,20(sp)
  80b76c:	d8c00a17 	ldw	r3,40(sp)
  80b770:	8809883a 	mov	r4,r17
  80b774:	10c4c03a 	cmpne	r2,r2,r3
  80b778:	d8800515 	stw	r2,20(sp)
  80b77c:	080197c0 	call	80197c <__pack_d>
  80b780:	dfc01f17 	ldw	ra,124(sp)
  80b784:	ddc01e17 	ldw	r23,120(sp)
  80b788:	dd801d17 	ldw	r22,116(sp)
  80b78c:	dd401c17 	ldw	r21,112(sp)
  80b790:	dd001b17 	ldw	r20,108(sp)
  80b794:	dcc01a17 	ldw	r19,104(sp)
  80b798:	dc801917 	ldw	r18,100(sp)
  80b79c:	dc401817 	ldw	r17,96(sp)
  80b7a0:	dc001717 	ldw	r16,92(sp)
  80b7a4:	dec02004 	addi	sp,sp,128
  80b7a8:	f800283a 	ret
  80b7ac:	dd800717 	ldw	r22,28(sp)
  80b7b0:	dc800c17 	ldw	r18,48(sp)
  80b7b4:	002b883a 	mov	r21,zero
  80b7b8:	0023883a 	mov	r17,zero
  80b7bc:	a80b883a 	mov	r5,r21
  80b7c0:	b00d883a 	mov	r6,r22
  80b7c4:	880f883a 	mov	r7,r17
  80b7c8:	ddc00817 	ldw	r23,32(sp)
  80b7cc:	dcc00d17 	ldw	r19,52(sp)
  80b7d0:	9009883a 	mov	r4,r18
  80b7d4:	080c2e40 	call	80c2e4 <__muldi3>
  80b7d8:	001b883a 	mov	r13,zero
  80b7dc:	680f883a 	mov	r7,r13
  80b7e0:	b009883a 	mov	r4,r22
  80b7e4:	000b883a 	mov	r5,zero
  80b7e8:	980d883a 	mov	r6,r19
  80b7ec:	b82d883a 	mov	r22,r23
  80b7f0:	002f883a 	mov	r23,zero
  80b7f4:	db401615 	stw	r13,88(sp)
  80b7f8:	d8801315 	stw	r2,76(sp)
  80b7fc:	d8c01415 	stw	r3,80(sp)
  80b800:	dcc01515 	stw	r19,84(sp)
  80b804:	080c2e40 	call	80c2e4 <__muldi3>
  80b808:	b00d883a 	mov	r6,r22
  80b80c:	000b883a 	mov	r5,zero
  80b810:	9009883a 	mov	r4,r18
  80b814:	b80f883a 	mov	r7,r23
  80b818:	1021883a 	mov	r16,r2
  80b81c:	1823883a 	mov	r17,r3
  80b820:	080c2e40 	call	80c2e4 <__muldi3>
  80b824:	8085883a 	add	r2,r16,r2
  80b828:	140d803a 	cmpltu	r6,r2,r16
  80b82c:	88c7883a 	add	r3,r17,r3
  80b830:	30cd883a 	add	r6,r6,r3
  80b834:	1029883a 	mov	r20,r2
  80b838:	302b883a 	mov	r21,r6
  80b83c:	da801317 	ldw	r10,76(sp)
  80b840:	dac01417 	ldw	r11,80(sp)
  80b844:	db001517 	ldw	r12,84(sp)
  80b848:	db401617 	ldw	r13,88(sp)
  80b84c:	3440612e 	bgeu	r6,r17,80b9d4 <__muldf3+0x318>
  80b850:	0009883a 	mov	r4,zero
  80b854:	5105883a 	add	r2,r10,r4
  80b858:	128d803a 	cmpltu	r6,r2,r10
  80b85c:	5d07883a 	add	r3,r11,r20
  80b860:	30cd883a 	add	r6,r6,r3
  80b864:	0021883a 	mov	r16,zero
  80b868:	04400044 	movi	r17,1
  80b86c:	1025883a 	mov	r18,r2
  80b870:	3027883a 	mov	r19,r6
  80b874:	32c06236 	bltu	r6,r11,80ba00 <__muldf3+0x344>
  80b878:	59807a26 	beq	r11,r6,80ba64 <__muldf3+0x3a8>
  80b87c:	680b883a 	mov	r5,r13
  80b880:	b80f883a 	mov	r7,r23
  80b884:	6009883a 	mov	r4,r12
  80b888:	b00d883a 	mov	r6,r22
  80b88c:	080c2e40 	call	80c2e4 <__muldi3>
  80b890:	1009883a 	mov	r4,r2
  80b894:	000f883a 	mov	r7,zero
  80b898:	1545883a 	add	r2,r2,r21
  80b89c:	1111803a 	cmpltu	r8,r2,r4
  80b8a0:	19c7883a 	add	r3,r3,r7
  80b8a4:	40c7883a 	add	r3,r8,r3
  80b8a8:	88cb883a 	add	r5,r17,r3
  80b8ac:	d8c00617 	ldw	r3,24(sp)
  80b8b0:	8089883a 	add	r4,r16,r2
  80b8b4:	d8800b17 	ldw	r2,44(sp)
  80b8b8:	18c00104 	addi	r3,r3,4
  80b8bc:	240d803a 	cmpltu	r6,r4,r16
  80b8c0:	10c7883a 	add	r3,r2,r3
  80b8c4:	2013883a 	mov	r9,r4
  80b8c8:	d8800a17 	ldw	r2,40(sp)
  80b8cc:	d9000517 	ldw	r4,20(sp)
  80b8d0:	314d883a 	add	r6,r6,r5
  80b8d4:	3015883a 	mov	r10,r6
  80b8d8:	2088c03a 	cmpne	r4,r4,r2
  80b8dc:	00880034 	movhi	r2,8192
  80b8e0:	10bfffc4 	addi	r2,r2,-1
  80b8e4:	d9000f15 	stw	r4,60(sp)
  80b8e8:	d8c01015 	stw	r3,64(sp)
  80b8ec:	1180162e 	bgeu	r2,r6,80b948 <__muldf3+0x28c>
  80b8f0:	1811883a 	mov	r8,r3
  80b8f4:	101f883a 	mov	r15,r2
  80b8f8:	980497fa 	slli	r2,r19,31
  80b8fc:	9016d07a 	srli	r11,r18,1
  80b900:	500697fa 	slli	r3,r10,31
  80b904:	480cd07a 	srli	r6,r9,1
  80b908:	500ed07a 	srli	r7,r10,1
  80b90c:	12d6b03a 	or	r11,r2,r11
  80b910:	00800044 	movi	r2,1
  80b914:	198cb03a 	or	r6,r3,r6
  80b918:	4888703a 	and	r4,r9,r2
  80b91c:	9818d07a 	srli	r12,r19,1
  80b920:	001b883a 	mov	r13,zero
  80b924:	03a00034 	movhi	r14,32768
  80b928:	3013883a 	mov	r9,r6
  80b92c:	3815883a 	mov	r10,r7
  80b930:	4091883a 	add	r8,r8,r2
  80b934:	20000226 	beq	r4,zero,80b940 <__muldf3+0x284>
  80b938:	5b64b03a 	or	r18,r11,r13
  80b93c:	63a6b03a 	or	r19,r12,r14
  80b940:	7abfed36 	bltu	r15,r10,80b8f8 <__muldf3+0x23c>
  80b944:	da001015 	stw	r8,64(sp)
  80b948:	00840034 	movhi	r2,4096
  80b94c:	10bfffc4 	addi	r2,r2,-1
  80b950:	12801436 	bltu	r2,r10,80b9a4 <__muldf3+0x2e8>
  80b954:	da001017 	ldw	r8,64(sp)
  80b958:	101f883a 	mov	r15,r2
  80b95c:	4a45883a 	add	r2,r9,r9
  80b960:	124d803a 	cmpltu	r6,r2,r9
  80b964:	5287883a 	add	r3,r10,r10
  80b968:	9497883a 	add	r11,r18,r18
  80b96c:	5c8f803a 	cmpltu	r7,r11,r18
  80b970:	9cd9883a 	add	r12,r19,r19
  80b974:	01000044 	movi	r4,1
  80b978:	30cd883a 	add	r6,r6,r3
  80b97c:	3b0f883a 	add	r7,r7,r12
  80b980:	423fffc4 	addi	r8,r8,-1
  80b984:	1013883a 	mov	r9,r2
  80b988:	3015883a 	mov	r10,r6
  80b98c:	111ab03a 	or	r13,r2,r4
  80b990:	98003016 	blt	r19,zero,80ba54 <__muldf3+0x398>
  80b994:	5825883a 	mov	r18,r11
  80b998:	3827883a 	mov	r19,r7
  80b99c:	7abfef2e 	bgeu	r15,r10,80b95c <__muldf3+0x2a0>
  80b9a0:	da001015 	stw	r8,64(sp)
  80b9a4:	00803fc4 	movi	r2,255
  80b9a8:	488e703a 	and	r7,r9,r2
  80b9ac:	00802004 	movi	r2,128
  80b9b0:	0007883a 	mov	r3,zero
  80b9b4:	0011883a 	mov	r8,zero
  80b9b8:	38801826 	beq	r7,r2,80ba1c <__muldf3+0x360>
  80b9bc:	008000c4 	movi	r2,3
  80b9c0:	d9000e04 	addi	r4,sp,56
  80b9c4:	da801215 	stw	r10,72(sp)
  80b9c8:	d8800e15 	stw	r2,56(sp)
  80b9cc:	da401115 	stw	r9,68(sp)
  80b9d0:	003f6a06 	br	80b77c <__muldf3+0xc0>
  80b9d4:	89802126 	beq	r17,r6,80ba5c <__muldf3+0x3a0>
  80b9d8:	0009883a 	mov	r4,zero
  80b9dc:	5105883a 	add	r2,r10,r4
  80b9e0:	128d803a 	cmpltu	r6,r2,r10
  80b9e4:	5d07883a 	add	r3,r11,r20
  80b9e8:	30cd883a 	add	r6,r6,r3
  80b9ec:	0021883a 	mov	r16,zero
  80b9f0:	0023883a 	mov	r17,zero
  80b9f4:	1025883a 	mov	r18,r2
  80b9f8:	3027883a 	mov	r19,r6
  80b9fc:	32ff9e2e 	bgeu	r6,r11,80b878 <__muldf3+0x1bc>
  80ba00:	00800044 	movi	r2,1
  80ba04:	8089883a 	add	r4,r16,r2
  80ba08:	240d803a 	cmpltu	r6,r4,r16
  80ba0c:	344d883a 	add	r6,r6,r17
  80ba10:	2021883a 	mov	r16,r4
  80ba14:	3023883a 	mov	r17,r6
  80ba18:	003f9806 	br	80b87c <__muldf3+0x1c0>
  80ba1c:	403fe71e 	bne	r8,zero,80b9bc <__muldf3+0x300>
  80ba20:	01004004 	movi	r4,256
  80ba24:	4904703a 	and	r2,r9,r4
  80ba28:	10c4b03a 	or	r2,r2,r3
  80ba2c:	103fe31e 	bne	r2,zero,80b9bc <__muldf3+0x300>
  80ba30:	94c4b03a 	or	r2,r18,r19
  80ba34:	103fe126 	beq	r2,zero,80b9bc <__muldf3+0x300>
  80ba38:	49c5883a 	add	r2,r9,r7
  80ba3c:	1251803a 	cmpltu	r8,r2,r9
  80ba40:	4291883a 	add	r8,r8,r10
  80ba44:	013fc004 	movi	r4,-256
  80ba48:	1112703a 	and	r9,r2,r4
  80ba4c:	4015883a 	mov	r10,r8
  80ba50:	003fda06 	br	80b9bc <__muldf3+0x300>
  80ba54:	6813883a 	mov	r9,r13
  80ba58:	003fce06 	br	80b994 <__muldf3+0x2d8>
  80ba5c:	143f7c36 	bltu	r2,r16,80b850 <__muldf3+0x194>
  80ba60:	003fdd06 	br	80b9d8 <__muldf3+0x31c>
  80ba64:	12bf852e 	bgeu	r2,r10,80b87c <__muldf3+0x1c0>
  80ba68:	003fe506 	br	80ba00 <__muldf3+0x344>
  80ba6c:	00800084 	movi	r2,2
  80ba70:	20bf351e 	bne	r4,r2,80b748 <__muldf3+0x8c>
  80ba74:	010020b4 	movhi	r4,130
  80ba78:	21216004 	addi	r4,r4,-31360
  80ba7c:	003f3f06 	br	80b77c <__muldf3+0xc0>

0080ba80 <__divdf3>:
  80ba80:	deffed04 	addi	sp,sp,-76
  80ba84:	dcc01115 	stw	r19,68(sp)
  80ba88:	dcc00404 	addi	r19,sp,16
  80ba8c:	2011883a 	mov	r8,r4
  80ba90:	2813883a 	mov	r9,r5
  80ba94:	dc000e15 	stw	r16,56(sp)
  80ba98:	d809883a 	mov	r4,sp
  80ba9c:	980b883a 	mov	r5,r19
  80baa0:	dc000904 	addi	r16,sp,36
  80baa4:	dfc01215 	stw	ra,72(sp)
  80baa8:	da400115 	stw	r9,4(sp)
  80baac:	d9c00315 	stw	r7,12(sp)
  80bab0:	da000015 	stw	r8,0(sp)
  80bab4:	d9800215 	stw	r6,8(sp)
  80bab8:	dc801015 	stw	r18,64(sp)
  80babc:	dc400f15 	stw	r17,60(sp)
  80bac0:	0801c900 	call	801c90 <__unpack_d>
  80bac4:	d9000204 	addi	r4,sp,8
  80bac8:	800b883a 	mov	r5,r16
  80bacc:	0801c900 	call	801c90 <__unpack_d>
  80bad0:	d9000417 	ldw	r4,16(sp)
  80bad4:	00800044 	movi	r2,1
  80bad8:	11000b2e 	bgeu	r2,r4,80bb08 <__divdf3+0x88>
  80badc:	d9400917 	ldw	r5,36(sp)
  80bae0:	1140762e 	bgeu	r2,r5,80bcbc <__divdf3+0x23c>
  80bae4:	d8800517 	ldw	r2,20(sp)
  80bae8:	d8c00a17 	ldw	r3,40(sp)
  80baec:	01800104 	movi	r6,4
  80baf0:	10c4f03a 	xor	r2,r2,r3
  80baf4:	d8800515 	stw	r2,20(sp)
  80baf8:	21800226 	beq	r4,r6,80bb04 <__divdf3+0x84>
  80bafc:	00800084 	movi	r2,2
  80bb00:	2080141e 	bne	r4,r2,80bb54 <__divdf3+0xd4>
  80bb04:	29000926 	beq	r5,r4,80bb2c <__divdf3+0xac>
  80bb08:	9809883a 	mov	r4,r19
  80bb0c:	080197c0 	call	80197c <__pack_d>
  80bb10:	dfc01217 	ldw	ra,72(sp)
  80bb14:	dcc01117 	ldw	r19,68(sp)
  80bb18:	dc801017 	ldw	r18,64(sp)
  80bb1c:	dc400f17 	ldw	r17,60(sp)
  80bb20:	dc000e17 	ldw	r16,56(sp)
  80bb24:	dec01304 	addi	sp,sp,76
  80bb28:	f800283a 	ret
  80bb2c:	010020b4 	movhi	r4,130
  80bb30:	21216004 	addi	r4,r4,-31360
  80bb34:	080197c0 	call	80197c <__pack_d>
  80bb38:	dfc01217 	ldw	ra,72(sp)
  80bb3c:	dcc01117 	ldw	r19,68(sp)
  80bb40:	dc801017 	ldw	r18,64(sp)
  80bb44:	dc400f17 	ldw	r17,60(sp)
  80bb48:	dc000e17 	ldw	r16,56(sp)
  80bb4c:	dec01304 	addi	sp,sp,76
  80bb50:	f800283a 	ret
  80bb54:	29805b26 	beq	r5,r6,80bcc4 <__divdf3+0x244>
  80bb58:	28802d26 	beq	r5,r2,80bc10 <__divdf3+0x190>
  80bb5c:	d8c00617 	ldw	r3,24(sp)
  80bb60:	d8800b17 	ldw	r2,44(sp)
  80bb64:	d9c00817 	ldw	r7,32(sp)
  80bb68:	dc400d17 	ldw	r17,52(sp)
  80bb6c:	188bc83a 	sub	r5,r3,r2
  80bb70:	d9800717 	ldw	r6,28(sp)
  80bb74:	dc000c17 	ldw	r16,48(sp)
  80bb78:	d9400615 	stw	r5,24(sp)
  80bb7c:	3c403836 	bltu	r7,r17,80bc60 <__divdf3+0x1e0>
  80bb80:	89c03626 	beq	r17,r7,80bc5c <__divdf3+0x1dc>
  80bb84:	0015883a 	mov	r10,zero
  80bb88:	001d883a 	mov	r14,zero
  80bb8c:	02c40034 	movhi	r11,4096
  80bb90:	001f883a 	mov	r15,zero
  80bb94:	003f883a 	mov	ra,zero
  80bb98:	04800f44 	movi	r18,61
  80bb9c:	00000f06 	br	80bbdc <__divdf3+0x15c>
  80bba0:	601d883a 	mov	r14,r12
  80bba4:	681f883a 	mov	r15,r13
  80bba8:	400d883a 	mov	r6,r8
  80bbac:	100f883a 	mov	r7,r2
  80bbb0:	3191883a 	add	r8,r6,r6
  80bbb4:	5808d07a 	srli	r4,r11,1
  80bbb8:	4185803a 	cmpltu	r2,r8,r6
  80bbbc:	39d3883a 	add	r9,r7,r7
  80bbc0:	28c6b03a 	or	r3,r5,r3
  80bbc4:	1245883a 	add	r2,r2,r9
  80bbc8:	1815883a 	mov	r10,r3
  80bbcc:	2017883a 	mov	r11,r4
  80bbd0:	400d883a 	mov	r6,r8
  80bbd4:	100f883a 	mov	r7,r2
  80bbd8:	fc801726 	beq	ra,r18,80bc38 <__divdf3+0x1b8>
  80bbdc:	580a97fa 	slli	r5,r11,31
  80bbe0:	5006d07a 	srli	r3,r10,1
  80bbe4:	ffc00044 	addi	ra,ra,1
  80bbe8:	3c7ff136 	bltu	r7,r17,80bbb0 <__divdf3+0x130>
  80bbec:	3411c83a 	sub	r8,r6,r16
  80bbf0:	3205803a 	cmpltu	r2,r6,r8
  80bbf4:	3c53c83a 	sub	r9,r7,r17
  80bbf8:	7298b03a 	or	r12,r14,r10
  80bbfc:	7adab03a 	or	r13,r15,r11
  80bc00:	4885c83a 	sub	r2,r9,r2
  80bc04:	89ffe61e 	bne	r17,r7,80bba0 <__divdf3+0x120>
  80bc08:	343fe936 	bltu	r6,r16,80bbb0 <__divdf3+0x130>
  80bc0c:	003fe406 	br	80bba0 <__divdf3+0x120>
  80bc10:	9809883a 	mov	r4,r19
  80bc14:	d9800415 	stw	r6,16(sp)
  80bc18:	080197c0 	call	80197c <__pack_d>
  80bc1c:	dfc01217 	ldw	ra,72(sp)
  80bc20:	dcc01117 	ldw	r19,68(sp)
  80bc24:	dc801017 	ldw	r18,64(sp)
  80bc28:	dc400f17 	ldw	r17,60(sp)
  80bc2c:	dc000e17 	ldw	r16,56(sp)
  80bc30:	dec01304 	addi	sp,sp,76
  80bc34:	f800283a 	ret
  80bc38:	00803fc4 	movi	r2,255
  80bc3c:	7090703a 	and	r8,r14,r2
  80bc40:	00802004 	movi	r2,128
  80bc44:	0007883a 	mov	r3,zero
  80bc48:	0013883a 	mov	r9,zero
  80bc4c:	40800d26 	beq	r8,r2,80bc84 <__divdf3+0x204>
  80bc50:	dbc00815 	stw	r15,32(sp)
  80bc54:	db800715 	stw	r14,28(sp)
  80bc58:	003fab06 	br	80bb08 <__divdf3+0x88>
  80bc5c:	343fc92e 	bgeu	r6,r16,80bb84 <__divdf3+0x104>
  80bc60:	3185883a 	add	r2,r6,r6
  80bc64:	1189803a 	cmpltu	r4,r2,r6
  80bc68:	39c7883a 	add	r3,r7,r7
  80bc6c:	20c9883a 	add	r4,r4,r3
  80bc70:	297fffc4 	addi	r5,r5,-1
  80bc74:	100d883a 	mov	r6,r2
  80bc78:	200f883a 	mov	r7,r4
  80bc7c:	d9400615 	stw	r5,24(sp)
  80bc80:	003fc006 	br	80bb84 <__divdf3+0x104>
  80bc84:	483ff21e 	bne	r9,zero,80bc50 <__divdf3+0x1d0>
  80bc88:	01004004 	movi	r4,256
  80bc8c:	7104703a 	and	r2,r14,r4
  80bc90:	10c4b03a 	or	r2,r2,r3
  80bc94:	103fee1e 	bne	r2,zero,80bc50 <__divdf3+0x1d0>
  80bc98:	31c4b03a 	or	r2,r6,r7
  80bc9c:	103fec26 	beq	r2,zero,80bc50 <__divdf3+0x1d0>
  80bca0:	7205883a 	add	r2,r14,r8
  80bca4:	1391803a 	cmpltu	r8,r2,r14
  80bca8:	43d1883a 	add	r8,r8,r15
  80bcac:	013fc004 	movi	r4,-256
  80bcb0:	111c703a 	and	r14,r2,r4
  80bcb4:	401f883a 	mov	r15,r8
  80bcb8:	003fe506 	br	80bc50 <__divdf3+0x1d0>
  80bcbc:	8009883a 	mov	r4,r16
  80bcc0:	003f9206 	br	80bb0c <__divdf3+0x8c>
  80bcc4:	9809883a 	mov	r4,r19
  80bcc8:	d8000715 	stw	zero,28(sp)
  80bccc:	d8000815 	stw	zero,32(sp)
  80bcd0:	d8000615 	stw	zero,24(sp)
  80bcd4:	003f8d06 	br	80bb0c <__divdf3+0x8c>

0080bcd8 <__eqdf2>:
  80bcd8:	deffef04 	addi	sp,sp,-68
  80bcdc:	dc400f15 	stw	r17,60(sp)
  80bce0:	dc400404 	addi	r17,sp,16
  80bce4:	2005883a 	mov	r2,r4
  80bce8:	2807883a 	mov	r3,r5
  80bcec:	dc000e15 	stw	r16,56(sp)
  80bcf0:	d809883a 	mov	r4,sp
  80bcf4:	880b883a 	mov	r5,r17
  80bcf8:	dc000904 	addi	r16,sp,36
  80bcfc:	d8c00115 	stw	r3,4(sp)
  80bd00:	d8800015 	stw	r2,0(sp)
  80bd04:	d9800215 	stw	r6,8(sp)
  80bd08:	dfc01015 	stw	ra,64(sp)
  80bd0c:	d9c00315 	stw	r7,12(sp)
  80bd10:	0801c900 	call	801c90 <__unpack_d>
  80bd14:	d9000204 	addi	r4,sp,8
  80bd18:	800b883a 	mov	r5,r16
  80bd1c:	0801c900 	call	801c90 <__unpack_d>
  80bd20:	d8800417 	ldw	r2,16(sp)
  80bd24:	00c00044 	movi	r3,1
  80bd28:	180d883a 	mov	r6,r3
  80bd2c:	1880062e 	bgeu	r3,r2,80bd48 <__eqdf2+0x70>
  80bd30:	d8800917 	ldw	r2,36(sp)
  80bd34:	8809883a 	mov	r4,r17
  80bd38:	800b883a 	mov	r5,r16
  80bd3c:	1880022e 	bgeu	r3,r2,80bd48 <__eqdf2+0x70>
  80bd40:	0801dc80 	call	801dc8 <__fpcmp_parts_d>
  80bd44:	100d883a 	mov	r6,r2
  80bd48:	3005883a 	mov	r2,r6
  80bd4c:	dfc01017 	ldw	ra,64(sp)
  80bd50:	dc400f17 	ldw	r17,60(sp)
  80bd54:	dc000e17 	ldw	r16,56(sp)
  80bd58:	dec01104 	addi	sp,sp,68
  80bd5c:	f800283a 	ret

0080bd60 <__nedf2>:
  80bd60:	deffef04 	addi	sp,sp,-68
  80bd64:	dc400f15 	stw	r17,60(sp)
  80bd68:	dc400404 	addi	r17,sp,16
  80bd6c:	2005883a 	mov	r2,r4
  80bd70:	2807883a 	mov	r3,r5
  80bd74:	dc000e15 	stw	r16,56(sp)
  80bd78:	d809883a 	mov	r4,sp
  80bd7c:	880b883a 	mov	r5,r17
  80bd80:	dc000904 	addi	r16,sp,36
  80bd84:	d8c00115 	stw	r3,4(sp)
  80bd88:	d8800015 	stw	r2,0(sp)
  80bd8c:	d9800215 	stw	r6,8(sp)
  80bd90:	dfc01015 	stw	ra,64(sp)
  80bd94:	d9c00315 	stw	r7,12(sp)
  80bd98:	0801c900 	call	801c90 <__unpack_d>
  80bd9c:	d9000204 	addi	r4,sp,8
  80bda0:	800b883a 	mov	r5,r16
  80bda4:	0801c900 	call	801c90 <__unpack_d>
  80bda8:	d8800417 	ldw	r2,16(sp)
  80bdac:	00c00044 	movi	r3,1
  80bdb0:	180d883a 	mov	r6,r3
  80bdb4:	1880062e 	bgeu	r3,r2,80bdd0 <__nedf2+0x70>
  80bdb8:	d8800917 	ldw	r2,36(sp)
  80bdbc:	8809883a 	mov	r4,r17
  80bdc0:	800b883a 	mov	r5,r16
  80bdc4:	1880022e 	bgeu	r3,r2,80bdd0 <__nedf2+0x70>
  80bdc8:	0801dc80 	call	801dc8 <__fpcmp_parts_d>
  80bdcc:	100d883a 	mov	r6,r2
  80bdd0:	3005883a 	mov	r2,r6
  80bdd4:	dfc01017 	ldw	ra,64(sp)
  80bdd8:	dc400f17 	ldw	r17,60(sp)
  80bddc:	dc000e17 	ldw	r16,56(sp)
  80bde0:	dec01104 	addi	sp,sp,68
  80bde4:	f800283a 	ret

0080bde8 <__gtdf2>:
  80bde8:	deffef04 	addi	sp,sp,-68
  80bdec:	dc400f15 	stw	r17,60(sp)
  80bdf0:	dc400404 	addi	r17,sp,16
  80bdf4:	2005883a 	mov	r2,r4
  80bdf8:	2807883a 	mov	r3,r5
  80bdfc:	dc000e15 	stw	r16,56(sp)
  80be00:	d809883a 	mov	r4,sp
  80be04:	880b883a 	mov	r5,r17
  80be08:	dc000904 	addi	r16,sp,36
  80be0c:	d8c00115 	stw	r3,4(sp)
  80be10:	d8800015 	stw	r2,0(sp)
  80be14:	d9800215 	stw	r6,8(sp)
  80be18:	dfc01015 	stw	ra,64(sp)
  80be1c:	d9c00315 	stw	r7,12(sp)
  80be20:	0801c900 	call	801c90 <__unpack_d>
  80be24:	d9000204 	addi	r4,sp,8
  80be28:	800b883a 	mov	r5,r16
  80be2c:	0801c900 	call	801c90 <__unpack_d>
  80be30:	d8800417 	ldw	r2,16(sp)
  80be34:	00c00044 	movi	r3,1
  80be38:	01bfffc4 	movi	r6,-1
  80be3c:	1880062e 	bgeu	r3,r2,80be58 <__gtdf2+0x70>
  80be40:	d8800917 	ldw	r2,36(sp)
  80be44:	8809883a 	mov	r4,r17
  80be48:	800b883a 	mov	r5,r16
  80be4c:	1880022e 	bgeu	r3,r2,80be58 <__gtdf2+0x70>
  80be50:	0801dc80 	call	801dc8 <__fpcmp_parts_d>
  80be54:	100d883a 	mov	r6,r2
  80be58:	3005883a 	mov	r2,r6
  80be5c:	dfc01017 	ldw	ra,64(sp)
  80be60:	dc400f17 	ldw	r17,60(sp)
  80be64:	dc000e17 	ldw	r16,56(sp)
  80be68:	dec01104 	addi	sp,sp,68
  80be6c:	f800283a 	ret

0080be70 <__gedf2>:
  80be70:	deffef04 	addi	sp,sp,-68
  80be74:	dc400f15 	stw	r17,60(sp)
  80be78:	dc400404 	addi	r17,sp,16
  80be7c:	2005883a 	mov	r2,r4
  80be80:	2807883a 	mov	r3,r5
  80be84:	dc000e15 	stw	r16,56(sp)
  80be88:	d809883a 	mov	r4,sp
  80be8c:	880b883a 	mov	r5,r17
  80be90:	dc000904 	addi	r16,sp,36
  80be94:	d8c00115 	stw	r3,4(sp)
  80be98:	d8800015 	stw	r2,0(sp)
  80be9c:	d9800215 	stw	r6,8(sp)
  80bea0:	dfc01015 	stw	ra,64(sp)
  80bea4:	d9c00315 	stw	r7,12(sp)
  80bea8:	0801c900 	call	801c90 <__unpack_d>
  80beac:	d9000204 	addi	r4,sp,8
  80beb0:	800b883a 	mov	r5,r16
  80beb4:	0801c900 	call	801c90 <__unpack_d>
  80beb8:	d8800417 	ldw	r2,16(sp)
  80bebc:	00c00044 	movi	r3,1
  80bec0:	01bfffc4 	movi	r6,-1
  80bec4:	1880062e 	bgeu	r3,r2,80bee0 <__gedf2+0x70>
  80bec8:	d8800917 	ldw	r2,36(sp)
  80becc:	8809883a 	mov	r4,r17
  80bed0:	800b883a 	mov	r5,r16
  80bed4:	1880022e 	bgeu	r3,r2,80bee0 <__gedf2+0x70>
  80bed8:	0801dc80 	call	801dc8 <__fpcmp_parts_d>
  80bedc:	100d883a 	mov	r6,r2
  80bee0:	3005883a 	mov	r2,r6
  80bee4:	dfc01017 	ldw	ra,64(sp)
  80bee8:	dc400f17 	ldw	r17,60(sp)
  80beec:	dc000e17 	ldw	r16,56(sp)
  80bef0:	dec01104 	addi	sp,sp,68
  80bef4:	f800283a 	ret

0080bef8 <__ltdf2>:
  80bef8:	deffef04 	addi	sp,sp,-68
  80befc:	dc400f15 	stw	r17,60(sp)
  80bf00:	dc400404 	addi	r17,sp,16
  80bf04:	2005883a 	mov	r2,r4
  80bf08:	2807883a 	mov	r3,r5
  80bf0c:	dc000e15 	stw	r16,56(sp)
  80bf10:	d809883a 	mov	r4,sp
  80bf14:	880b883a 	mov	r5,r17
  80bf18:	dc000904 	addi	r16,sp,36
  80bf1c:	d8c00115 	stw	r3,4(sp)
  80bf20:	d8800015 	stw	r2,0(sp)
  80bf24:	d9800215 	stw	r6,8(sp)
  80bf28:	dfc01015 	stw	ra,64(sp)
  80bf2c:	d9c00315 	stw	r7,12(sp)
  80bf30:	0801c900 	call	801c90 <__unpack_d>
  80bf34:	d9000204 	addi	r4,sp,8
  80bf38:	800b883a 	mov	r5,r16
  80bf3c:	0801c900 	call	801c90 <__unpack_d>
  80bf40:	d8800417 	ldw	r2,16(sp)
  80bf44:	00c00044 	movi	r3,1
  80bf48:	180d883a 	mov	r6,r3
  80bf4c:	1880062e 	bgeu	r3,r2,80bf68 <__ltdf2+0x70>
  80bf50:	d8800917 	ldw	r2,36(sp)
  80bf54:	8809883a 	mov	r4,r17
  80bf58:	800b883a 	mov	r5,r16
  80bf5c:	1880022e 	bgeu	r3,r2,80bf68 <__ltdf2+0x70>
  80bf60:	0801dc80 	call	801dc8 <__fpcmp_parts_d>
  80bf64:	100d883a 	mov	r6,r2
  80bf68:	3005883a 	mov	r2,r6
  80bf6c:	dfc01017 	ldw	ra,64(sp)
  80bf70:	dc400f17 	ldw	r17,60(sp)
  80bf74:	dc000e17 	ldw	r16,56(sp)
  80bf78:	dec01104 	addi	sp,sp,68
  80bf7c:	f800283a 	ret

0080bf80 <__floatsidf>:
  80bf80:	2006d7fa 	srli	r3,r4,31
  80bf84:	defff604 	addi	sp,sp,-40
  80bf88:	008000c4 	movi	r2,3
  80bf8c:	dfc00915 	stw	ra,36(sp)
  80bf90:	dcc00815 	stw	r19,32(sp)
  80bf94:	dc800715 	stw	r18,28(sp)
  80bf98:	dc400615 	stw	r17,24(sp)
  80bf9c:	dc000515 	stw	r16,20(sp)
  80bfa0:	d8800015 	stw	r2,0(sp)
  80bfa4:	d8c00115 	stw	r3,4(sp)
  80bfa8:	20000f1e 	bne	r4,zero,80bfe8 <__floatsidf+0x68>
  80bfac:	00800084 	movi	r2,2
  80bfb0:	d8800015 	stw	r2,0(sp)
  80bfb4:	d809883a 	mov	r4,sp
  80bfb8:	080197c0 	call	80197c <__pack_d>
  80bfbc:	1009883a 	mov	r4,r2
  80bfc0:	180b883a 	mov	r5,r3
  80bfc4:	2005883a 	mov	r2,r4
  80bfc8:	2807883a 	mov	r3,r5
  80bfcc:	dfc00917 	ldw	ra,36(sp)
  80bfd0:	dcc00817 	ldw	r19,32(sp)
  80bfd4:	dc800717 	ldw	r18,28(sp)
  80bfd8:	dc400617 	ldw	r17,24(sp)
  80bfdc:	dc000517 	ldw	r16,20(sp)
  80bfe0:	dec00a04 	addi	sp,sp,40
  80bfe4:	f800283a 	ret
  80bfe8:	00800f04 	movi	r2,60
  80bfec:	1807003a 	cmpeq	r3,r3,zero
  80bff0:	d8800215 	stw	r2,8(sp)
  80bff4:	18001126 	beq	r3,zero,80c03c <__floatsidf+0xbc>
  80bff8:	0027883a 	mov	r19,zero
  80bffc:	2025883a 	mov	r18,r4
  80c000:	d9000315 	stw	r4,12(sp)
  80c004:	dcc00415 	stw	r19,16(sp)
  80c008:	080c4080 	call	80c408 <__clzsi2>
  80c00c:	11000744 	addi	r4,r2,29
  80c010:	013fe80e 	bge	zero,r4,80bfb4 <__floatsidf+0x34>
  80c014:	10bfff44 	addi	r2,r2,-3
  80c018:	10000c16 	blt	r2,zero,80c04c <__floatsidf+0xcc>
  80c01c:	90a2983a 	sll	r17,r18,r2
  80c020:	0021883a 	mov	r16,zero
  80c024:	d8800217 	ldw	r2,8(sp)
  80c028:	dc400415 	stw	r17,16(sp)
  80c02c:	dc000315 	stw	r16,12(sp)
  80c030:	1105c83a 	sub	r2,r2,r4
  80c034:	d8800215 	stw	r2,8(sp)
  80c038:	003fde06 	br	80bfb4 <__floatsidf+0x34>
  80c03c:	00a00034 	movhi	r2,32768
  80c040:	20800a26 	beq	r4,r2,80c06c <__floatsidf+0xec>
  80c044:	0109c83a 	sub	r4,zero,r4
  80c048:	003feb06 	br	80bff8 <__floatsidf+0x78>
  80c04c:	9006d07a 	srli	r3,r18,1
  80c050:	008007c4 	movi	r2,31
  80c054:	1105c83a 	sub	r2,r2,r4
  80c058:	1886d83a 	srl	r3,r3,r2
  80c05c:	9922983a 	sll	r17,r19,r4
  80c060:	9120983a 	sll	r16,r18,r4
  80c064:	1c62b03a 	or	r17,r3,r17
  80c068:	003fee06 	br	80c024 <__floatsidf+0xa4>
  80c06c:	0009883a 	mov	r4,zero
  80c070:	01707834 	movhi	r5,49632
  80c074:	003fd306 	br	80bfc4 <__floatsidf+0x44>

0080c078 <__fixdfsi>:
  80c078:	defff804 	addi	sp,sp,-32
  80c07c:	2005883a 	mov	r2,r4
  80c080:	2807883a 	mov	r3,r5
  80c084:	d809883a 	mov	r4,sp
  80c088:	d9400204 	addi	r5,sp,8
  80c08c:	d8c00115 	stw	r3,4(sp)
  80c090:	d8800015 	stw	r2,0(sp)
  80c094:	dfc00715 	stw	ra,28(sp)
  80c098:	0801c900 	call	801c90 <__unpack_d>
  80c09c:	d8c00217 	ldw	r3,8(sp)
  80c0a0:	00800084 	movi	r2,2
  80c0a4:	1880051e 	bne	r3,r2,80c0bc <__fixdfsi+0x44>
  80c0a8:	0007883a 	mov	r3,zero
  80c0ac:	1805883a 	mov	r2,r3
  80c0b0:	dfc00717 	ldw	ra,28(sp)
  80c0b4:	dec00804 	addi	sp,sp,32
  80c0b8:	f800283a 	ret
  80c0bc:	00800044 	movi	r2,1
  80c0c0:	10fff92e 	bgeu	r2,r3,80c0a8 <__fixdfsi+0x30>
  80c0c4:	00800104 	movi	r2,4
  80c0c8:	18800426 	beq	r3,r2,80c0dc <__fixdfsi+0x64>
  80c0cc:	d8c00417 	ldw	r3,16(sp)
  80c0d0:	183ff516 	blt	r3,zero,80c0a8 <__fixdfsi+0x30>
  80c0d4:	00800784 	movi	r2,30
  80c0d8:	10c0080e 	bge	r2,r3,80c0fc <__fixdfsi+0x84>
  80c0dc:	d8800317 	ldw	r2,12(sp)
  80c0e0:	1000121e 	bne	r2,zero,80c12c <__fixdfsi+0xb4>
  80c0e4:	00e00034 	movhi	r3,32768
  80c0e8:	18ffffc4 	addi	r3,r3,-1
  80c0ec:	1805883a 	mov	r2,r3
  80c0f0:	dfc00717 	ldw	ra,28(sp)
  80c0f4:	dec00804 	addi	sp,sp,32
  80c0f8:	f800283a 	ret
  80c0fc:	00800f04 	movi	r2,60
  80c100:	10d1c83a 	sub	r8,r2,r3
  80c104:	40bff804 	addi	r2,r8,-32
  80c108:	d9800517 	ldw	r6,20(sp)
  80c10c:	d9c00617 	ldw	r7,24(sp)
  80c110:	10000816 	blt	r2,zero,80c134 <__fixdfsi+0xbc>
  80c114:	3888d83a 	srl	r4,r7,r2
  80c118:	d8800317 	ldw	r2,12(sp)
  80c11c:	2007883a 	mov	r3,r4
  80c120:	103fe226 	beq	r2,zero,80c0ac <__fixdfsi+0x34>
  80c124:	0107c83a 	sub	r3,zero,r4
  80c128:	003fe006 	br	80c0ac <__fixdfsi+0x34>
  80c12c:	00e00034 	movhi	r3,32768
  80c130:	003fde06 	br	80c0ac <__fixdfsi+0x34>
  80c134:	39c7883a 	add	r3,r7,r7
  80c138:	008007c4 	movi	r2,31
  80c13c:	1205c83a 	sub	r2,r2,r8
  80c140:	1886983a 	sll	r3,r3,r2
  80c144:	3208d83a 	srl	r4,r6,r8
  80c148:	1908b03a 	or	r4,r3,r4
  80c14c:	003ff206 	br	80c118 <__fixdfsi+0xa0>

0080c150 <__floatunsidf>:
  80c150:	defff204 	addi	sp,sp,-56
  80c154:	dfc00d15 	stw	ra,52(sp)
  80c158:	ddc00c15 	stw	r23,48(sp)
  80c15c:	dd800b15 	stw	r22,44(sp)
  80c160:	dd400a15 	stw	r21,40(sp)
  80c164:	dd000915 	stw	r20,36(sp)
  80c168:	dcc00815 	stw	r19,32(sp)
  80c16c:	dc800715 	stw	r18,28(sp)
  80c170:	dc400615 	stw	r17,24(sp)
  80c174:	dc000515 	stw	r16,20(sp)
  80c178:	d8000115 	stw	zero,4(sp)
  80c17c:	20000f1e 	bne	r4,zero,80c1bc <__floatunsidf+0x6c>
  80c180:	00800084 	movi	r2,2
  80c184:	d8800015 	stw	r2,0(sp)
  80c188:	d809883a 	mov	r4,sp
  80c18c:	080197c0 	call	80197c <__pack_d>
  80c190:	dfc00d17 	ldw	ra,52(sp)
  80c194:	ddc00c17 	ldw	r23,48(sp)
  80c198:	dd800b17 	ldw	r22,44(sp)
  80c19c:	dd400a17 	ldw	r21,40(sp)
  80c1a0:	dd000917 	ldw	r20,36(sp)
  80c1a4:	dcc00817 	ldw	r19,32(sp)
  80c1a8:	dc800717 	ldw	r18,28(sp)
  80c1ac:	dc400617 	ldw	r17,24(sp)
  80c1b0:	dc000517 	ldw	r16,20(sp)
  80c1b4:	dec00e04 	addi	sp,sp,56
  80c1b8:	f800283a 	ret
  80c1bc:	008000c4 	movi	r2,3
  80c1c0:	00c00f04 	movi	r3,60
  80c1c4:	002f883a 	mov	r23,zero
  80c1c8:	202d883a 	mov	r22,r4
  80c1cc:	d8800015 	stw	r2,0(sp)
  80c1d0:	d8c00215 	stw	r3,8(sp)
  80c1d4:	d9000315 	stw	r4,12(sp)
  80c1d8:	ddc00415 	stw	r23,16(sp)
  80c1dc:	080c4080 	call	80c408 <__clzsi2>
  80c1e0:	12400744 	addi	r9,r2,29
  80c1e4:	48000b16 	blt	r9,zero,80c214 <__floatunsidf+0xc4>
  80c1e8:	483fe726 	beq	r9,zero,80c188 <__floatunsidf+0x38>
  80c1ec:	10bfff44 	addi	r2,r2,-3
  80c1f0:	10002e16 	blt	r2,zero,80c2ac <__floatunsidf+0x15c>
  80c1f4:	b0a2983a 	sll	r17,r22,r2
  80c1f8:	0021883a 	mov	r16,zero
  80c1fc:	d8800217 	ldw	r2,8(sp)
  80c200:	dc400415 	stw	r17,16(sp)
  80c204:	dc000315 	stw	r16,12(sp)
  80c208:	1245c83a 	sub	r2,r2,r9
  80c20c:	d8800215 	stw	r2,8(sp)
  80c210:	003fdd06 	br	80c188 <__floatunsidf+0x38>
  80c214:	0255c83a 	sub	r10,zero,r9
  80c218:	51bff804 	addi	r6,r10,-32
  80c21c:	30001b16 	blt	r6,zero,80c28c <__floatunsidf+0x13c>
  80c220:	b9a8d83a 	srl	r20,r23,r6
  80c224:	002b883a 	mov	r21,zero
  80c228:	000f883a 	mov	r7,zero
  80c22c:	01000044 	movi	r4,1
  80c230:	0011883a 	mov	r8,zero
  80c234:	30002516 	blt	r6,zero,80c2cc <__floatunsidf+0x17c>
  80c238:	21a6983a 	sll	r19,r4,r6
  80c23c:	0025883a 	mov	r18,zero
  80c240:	00bfffc4 	movi	r2,-1
  80c244:	9089883a 	add	r4,r18,r2
  80c248:	988b883a 	add	r5,r19,r2
  80c24c:	248d803a 	cmpltu	r6,r4,r18
  80c250:	314b883a 	add	r5,r6,r5
  80c254:	b104703a 	and	r2,r22,r4
  80c258:	b946703a 	and	r3,r23,r5
  80c25c:	10c4b03a 	or	r2,r2,r3
  80c260:	10000226 	beq	r2,zero,80c26c <__floatunsidf+0x11c>
  80c264:	01c00044 	movi	r7,1
  80c268:	0011883a 	mov	r8,zero
  80c26c:	d9000217 	ldw	r4,8(sp)
  80c270:	a1c4b03a 	or	r2,r20,r7
  80c274:	aa06b03a 	or	r3,r21,r8
  80c278:	2249c83a 	sub	r4,r4,r9
  80c27c:	d8c00415 	stw	r3,16(sp)
  80c280:	d9000215 	stw	r4,8(sp)
  80c284:	d8800315 	stw	r2,12(sp)
  80c288:	003fbf06 	br	80c188 <__floatunsidf+0x38>
  80c28c:	bdc7883a 	add	r3,r23,r23
  80c290:	008007c4 	movi	r2,31
  80c294:	1285c83a 	sub	r2,r2,r10
  80c298:	1886983a 	sll	r3,r3,r2
  80c29c:	b2a8d83a 	srl	r20,r22,r10
  80c2a0:	baaad83a 	srl	r21,r23,r10
  80c2a4:	1d28b03a 	or	r20,r3,r20
  80c2a8:	003fdf06 	br	80c228 <__floatunsidf+0xd8>
  80c2ac:	b006d07a 	srli	r3,r22,1
  80c2b0:	008007c4 	movi	r2,31
  80c2b4:	1245c83a 	sub	r2,r2,r9
  80c2b8:	1886d83a 	srl	r3,r3,r2
  80c2bc:	ba62983a 	sll	r17,r23,r9
  80c2c0:	b260983a 	sll	r16,r22,r9
  80c2c4:	1c62b03a 	or	r17,r3,r17
  80c2c8:	003fcc06 	br	80c1fc <__floatunsidf+0xac>
  80c2cc:	2006d07a 	srli	r3,r4,1
  80c2d0:	008007c4 	movi	r2,31
  80c2d4:	1285c83a 	sub	r2,r2,r10
  80c2d8:	18a6d83a 	srl	r19,r3,r2
  80c2dc:	22a4983a 	sll	r18,r4,r10
  80c2e0:	003fd706 	br	80c240 <__floatunsidf+0xf0>

0080c2e4 <__muldi3>:
  80c2e4:	defff204 	addi	sp,sp,-56
  80c2e8:	df000c15 	stw	fp,48(sp)
  80c2ec:	3038d43a 	srli	fp,r6,16
  80c2f0:	dd000815 	stw	r20,32(sp)
  80c2f4:	dc400515 	stw	r17,20(sp)
  80c2f8:	2028d43a 	srli	r20,r4,16
  80c2fc:	247fffcc 	andi	r17,r4,65535
  80c300:	dc000415 	stw	r16,16(sp)
  80c304:	343fffcc 	andi	r16,r6,65535
  80c308:	dcc00715 	stw	r19,28(sp)
  80c30c:	d9000015 	stw	r4,0(sp)
  80c310:	2827883a 	mov	r19,r5
  80c314:	8809883a 	mov	r4,r17
  80c318:	d9400115 	stw	r5,4(sp)
  80c31c:	800b883a 	mov	r5,r16
  80c320:	d9800215 	stw	r6,8(sp)
  80c324:	dfc00d15 	stw	ra,52(sp)
  80c328:	d9c00315 	stw	r7,12(sp)
  80c32c:	dd800a15 	stw	r22,40(sp)
  80c330:	dd400915 	stw	r21,36(sp)
  80c334:	302d883a 	mov	r22,r6
  80c338:	ddc00b15 	stw	r23,44(sp)
  80c33c:	dc800615 	stw	r18,24(sp)
  80c340:	08019440 	call	801944 <__mulsi3>
  80c344:	8809883a 	mov	r4,r17
  80c348:	e00b883a 	mov	r5,fp
  80c34c:	102b883a 	mov	r21,r2
  80c350:	08019440 	call	801944 <__mulsi3>
  80c354:	800b883a 	mov	r5,r16
  80c358:	a009883a 	mov	r4,r20
  80c35c:	1023883a 	mov	r17,r2
  80c360:	08019440 	call	801944 <__mulsi3>
  80c364:	a009883a 	mov	r4,r20
  80c368:	e00b883a 	mov	r5,fp
  80c36c:	1021883a 	mov	r16,r2
  80c370:	08019440 	call	801944 <__mulsi3>
  80c374:	a8ffffcc 	andi	r3,r21,65535
  80c378:	a82ad43a 	srli	r21,r21,16
  80c37c:	8c23883a 	add	r17,r17,r16
  80c380:	1011883a 	mov	r8,r2
  80c384:	ac6b883a 	add	r21,r21,r17
  80c388:	a804943a 	slli	r2,r21,16
  80c38c:	b009883a 	mov	r4,r22
  80c390:	980b883a 	mov	r5,r19
  80c394:	10c7883a 	add	r3,r2,r3
  80c398:	a812d43a 	srli	r9,r21,16
  80c39c:	180d883a 	mov	r6,r3
  80c3a0:	ac00022e 	bgeu	r21,r16,80c3ac <__muldi3+0xc8>
  80c3a4:	00800074 	movhi	r2,1
  80c3a8:	4091883a 	add	r8,r8,r2
  80c3ac:	4267883a 	add	r19,r8,r9
  80c3b0:	302d883a 	mov	r22,r6
  80c3b4:	08019440 	call	801944 <__mulsi3>
  80c3b8:	d9400317 	ldw	r5,12(sp)
  80c3bc:	d9000017 	ldw	r4,0(sp)
  80c3c0:	1023883a 	mov	r17,r2
  80c3c4:	08019440 	call	801944 <__mulsi3>
  80c3c8:	14cb883a 	add	r5,r2,r19
  80c3cc:	894b883a 	add	r5,r17,r5
  80c3d0:	b005883a 	mov	r2,r22
  80c3d4:	2807883a 	mov	r3,r5
  80c3d8:	dfc00d17 	ldw	ra,52(sp)
  80c3dc:	df000c17 	ldw	fp,48(sp)
  80c3e0:	ddc00b17 	ldw	r23,44(sp)
  80c3e4:	dd800a17 	ldw	r22,40(sp)
  80c3e8:	dd400917 	ldw	r21,36(sp)
  80c3ec:	dd000817 	ldw	r20,32(sp)
  80c3f0:	dcc00717 	ldw	r19,28(sp)
  80c3f4:	dc800617 	ldw	r18,24(sp)
  80c3f8:	dc400517 	ldw	r17,20(sp)
  80c3fc:	dc000417 	ldw	r16,16(sp)
  80c400:	dec00e04 	addi	sp,sp,56
  80c404:	f800283a 	ret

0080c408 <__clzsi2>:
  80c408:	00bfffd4 	movui	r2,65535
  80c40c:	11000e36 	bltu	r2,r4,80c448 <__clzsi2+0x40>
  80c410:	00803fc4 	movi	r2,255
  80c414:	01400204 	movi	r5,8
  80c418:	0007883a 	mov	r3,zero
  80c41c:	11001036 	bltu	r2,r4,80c460 <__clzsi2+0x58>
  80c420:	000b883a 	mov	r5,zero
  80c424:	20c6d83a 	srl	r3,r4,r3
  80c428:	008020b4 	movhi	r2,130
  80c42c:	10a1fb04 	addi	r2,r2,-30740
  80c430:	1887883a 	add	r3,r3,r2
  80c434:	18800003 	ldbu	r2,0(r3)
  80c438:	00c00804 	movi	r3,32
  80c43c:	2885883a 	add	r2,r5,r2
  80c440:	1885c83a 	sub	r2,r3,r2
  80c444:	f800283a 	ret
  80c448:	01400404 	movi	r5,16
  80c44c:	00804034 	movhi	r2,256
  80c450:	10bfffc4 	addi	r2,r2,-1
  80c454:	2807883a 	mov	r3,r5
  80c458:	113ff22e 	bgeu	r2,r4,80c424 <__clzsi2+0x1c>
  80c45c:	01400604 	movi	r5,24
  80c460:	2807883a 	mov	r3,r5
  80c464:	20c6d83a 	srl	r3,r4,r3
  80c468:	008020b4 	movhi	r2,130
  80c46c:	10a1fb04 	addi	r2,r2,-30740
  80c470:	1887883a 	add	r3,r3,r2
  80c474:	18800003 	ldbu	r2,0(r3)
  80c478:	00c00804 	movi	r3,32
  80c47c:	2885883a 	add	r2,r5,r2
  80c480:	1885c83a 	sub	r2,r3,r2
  80c484:	f800283a 	ret

0080c488 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80c488:	defff804 	addi	sp,sp,-32
  80c48c:	dfc00715 	stw	ra,28(sp)
  80c490:	df000615 	stw	fp,24(sp)
  80c494:	df000604 	addi	fp,sp,24
  80c498:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80c49c:	e0bffc17 	ldw	r2,-16(fp)
  80c4a0:	1004803a 	cmplt	r2,r2,zero
  80c4a4:	1000091e 	bne	r2,zero,80c4cc <close+0x44>
  80c4a8:	e13ffc17 	ldw	r4,-16(fp)
  80c4ac:	01400304 	movi	r5,12
  80c4b0:	08019440 	call	801944 <__mulsi3>
  80c4b4:	1007883a 	mov	r3,r2
  80c4b8:	008020b4 	movhi	r2,130
  80c4bc:	10a4ab04 	addi	r2,r2,-27988
  80c4c0:	1887883a 	add	r3,r3,r2
  80c4c4:	e0ffff15 	stw	r3,-4(fp)
  80c4c8:	00000106 	br	80c4d0 <close+0x48>
  80c4cc:	e03fff15 	stw	zero,-4(fp)
  80c4d0:	e0bfff17 	ldw	r2,-4(fp)
  80c4d4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
  80c4d8:	e0bffb17 	ldw	r2,-20(fp)
  80c4dc:	1005003a 	cmpeq	r2,r2,zero
  80c4e0:	10001d1e 	bne	r2,zero,80c558 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80c4e4:	e0bffb17 	ldw	r2,-20(fp)
  80c4e8:	10800017 	ldw	r2,0(r2)
  80c4ec:	10800417 	ldw	r2,16(r2)
  80c4f0:	1005003a 	cmpeq	r2,r2,zero
  80c4f4:	1000071e 	bne	r2,zero,80c514 <close+0x8c>
  80c4f8:	e0bffb17 	ldw	r2,-20(fp)
  80c4fc:	10800017 	ldw	r2,0(r2)
  80c500:	10800417 	ldw	r2,16(r2)
  80c504:	e13ffb17 	ldw	r4,-20(fp)
  80c508:	103ee83a 	callr	r2
  80c50c:	e0bffe15 	stw	r2,-8(fp)
  80c510:	00000106 	br	80c518 <close+0x90>
  80c514:	e03ffe15 	stw	zero,-8(fp)
  80c518:	e0bffe17 	ldw	r2,-8(fp)
  80c51c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80c520:	e13ffc17 	ldw	r4,-16(fp)
  80c524:	080ce3c0 	call	80ce3c <alt_release_fd>
    if (rval < 0)
  80c528:	e0bffa17 	ldw	r2,-24(fp)
  80c52c:	1004403a 	cmpge	r2,r2,zero
  80c530:	1000071e 	bne	r2,zero,80c550 <close+0xc8>
    {
      ALT_ERRNO = -rval;
  80c534:	080c5880 	call	80c588 <alt_get_errno>
  80c538:	e0fffa17 	ldw	r3,-24(fp)
  80c53c:	00c7c83a 	sub	r3,zero,r3
  80c540:	10c00015 	stw	r3,0(r2)
      return -1;
  80c544:	00bfffc4 	movi	r2,-1
  80c548:	e0bffd15 	stw	r2,-12(fp)
  80c54c:	00000806 	br	80c570 <close+0xe8>
    }
    return 0;
  80c550:	e03ffd15 	stw	zero,-12(fp)
  80c554:	00000606 	br	80c570 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c558:	080c5880 	call	80c588 <alt_get_errno>
  80c55c:	1007883a 	mov	r3,r2
  80c560:	00801444 	movi	r2,81
  80c564:	18800015 	stw	r2,0(r3)
    return -1;
  80c568:	00bfffc4 	movi	r2,-1
  80c56c:	e0bffd15 	stw	r2,-12(fp)
  80c570:	e0bffd17 	ldw	r2,-12(fp)
  }
}
  80c574:	e037883a 	mov	sp,fp
  80c578:	dfc00117 	ldw	ra,4(sp)
  80c57c:	df000017 	ldw	fp,0(sp)
  80c580:	dec00204 	addi	sp,sp,8
  80c584:	f800283a 	ret

0080c588 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c588:	defffd04 	addi	sp,sp,-12
  80c58c:	dfc00215 	stw	ra,8(sp)
  80c590:	df000115 	stw	fp,4(sp)
  80c594:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c598:	008020b4 	movhi	r2,130
  80c59c:	10a94704 	addi	r2,r2,-23268
  80c5a0:	10800017 	ldw	r2,0(r2)
  80c5a4:	1005003a 	cmpeq	r2,r2,zero
  80c5a8:	1000061e 	bne	r2,zero,80c5c4 <alt_get_errno+0x3c>
  80c5ac:	008020b4 	movhi	r2,130
  80c5b0:	10a94704 	addi	r2,r2,-23268
  80c5b4:	10800017 	ldw	r2,0(r2)
  80c5b8:	103ee83a 	callr	r2
  80c5bc:	e0bfff15 	stw	r2,-4(fp)
  80c5c0:	00000306 	br	80c5d0 <alt_get_errno+0x48>
  80c5c4:	008020b4 	movhi	r2,130
  80c5c8:	10a96f04 	addi	r2,r2,-23108
  80c5cc:	e0bfff15 	stw	r2,-4(fp)
  80c5d0:	e0bfff17 	ldw	r2,-4(fp)
}
  80c5d4:	e037883a 	mov	sp,fp
  80c5d8:	dfc00117 	ldw	ra,4(sp)
  80c5dc:	df000017 	ldw	fp,0(sp)
  80c5e0:	dec00204 	addi	sp,sp,8
  80c5e4:	f800283a 	ret

0080c5e8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80c5e8:	defffc04 	addi	sp,sp,-16
  80c5ec:	df000315 	stw	fp,12(sp)
  80c5f0:	df000304 	addi	fp,sp,12
  80c5f4:	e13ffd15 	stw	r4,-12(fp)
  80c5f8:	e17ffe15 	stw	r5,-8(fp)
  80c5fc:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80c600:	e0bfff17 	ldw	r2,-4(fp)
}
  80c604:	e037883a 	mov	sp,fp
  80c608:	df000017 	ldw	fp,0(sp)
  80c60c:	dec00104 	addi	sp,sp,4
  80c610:	f800283a 	ret

0080c614 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  80c614:	defffd04 	addi	sp,sp,-12
  80c618:	df000215 	stw	fp,8(sp)
  80c61c:	df000204 	addi	fp,sp,8
  80c620:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
  80c624:	e0bfff17 	ldw	r2,-4(fp)
  80c628:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  80c62c:	e0bffe17 	ldw	r2,-8(fp)
  80c630:	1005003a 	cmpeq	r2,r2,zero
  80c634:	1000021e 	bne	r2,zero,80c640 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
  80c638:	002af070 	cmpltui	zero,zero,43969
  80c63c:	00000106 	br	80c644 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
  80c640:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
  80c644:	e037883a 	mov	sp,fp
  80c648:	df000017 	ldw	fp,0(sp)
  80c64c:	dec00104 	addi	sp,sp,4
  80c650:	f800283a 	ret

0080c654 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  80c654:	defffd04 	addi	sp,sp,-12
  80c658:	dfc00215 	stw	ra,8(sp)
  80c65c:	df000115 	stw	fp,4(sp)
  80c660:	df000104 	addi	fp,sp,4
  80c664:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  80c668:	008020b4 	movhi	r2,130
  80c66c:	10a97b44 	addi	r2,r2,-23059
  80c670:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
  80c674:	e13fff17 	ldw	r4,-4(fp)
  80c678:	080c6140 	call	80c614 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  80c67c:	003fff06 	br	80c67c <_exit+0x28>

0080c680 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80c680:	defff904 	addi	sp,sp,-28
  80c684:	dfc00615 	stw	ra,24(sp)
  80c688:	df000515 	stw	fp,20(sp)
  80c68c:	df000504 	addi	fp,sp,20
  80c690:	e13ffc15 	stw	r4,-16(fp)
  80c694:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c698:	e0bffc17 	ldw	r2,-16(fp)
  80c69c:	1004803a 	cmplt	r2,r2,zero
  80c6a0:	1000091e 	bne	r2,zero,80c6c8 <fstat+0x48>
  80c6a4:	e13ffc17 	ldw	r4,-16(fp)
  80c6a8:	01400304 	movi	r5,12
  80c6ac:	08019440 	call	801944 <__mulsi3>
  80c6b0:	1007883a 	mov	r3,r2
  80c6b4:	008020b4 	movhi	r2,130
  80c6b8:	10a4ab04 	addi	r2,r2,-27988
  80c6bc:	1887883a 	add	r3,r3,r2
  80c6c0:	e0ffff15 	stw	r3,-4(fp)
  80c6c4:	00000106 	br	80c6cc <fstat+0x4c>
  80c6c8:	e03fff15 	stw	zero,-4(fp)
  80c6cc:	e0bfff17 	ldw	r2,-4(fp)
  80c6d0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80c6d4:	e0bffb17 	ldw	r2,-20(fp)
  80c6d8:	1005003a 	cmpeq	r2,r2,zero
  80c6dc:	1000121e 	bne	r2,zero,80c728 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80c6e0:	e0bffb17 	ldw	r2,-20(fp)
  80c6e4:	10800017 	ldw	r2,0(r2)
  80c6e8:	10800817 	ldw	r2,32(r2)
  80c6ec:	1005003a 	cmpeq	r2,r2,zero
  80c6f0:	1000081e 	bne	r2,zero,80c714 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
  80c6f4:	e0bffb17 	ldw	r2,-20(fp)
  80c6f8:	10800017 	ldw	r2,0(r2)
  80c6fc:	10800817 	ldw	r2,32(r2)
  80c700:	e13ffb17 	ldw	r4,-20(fp)
  80c704:	e17ffd17 	ldw	r5,-12(fp)
  80c708:	103ee83a 	callr	r2
  80c70c:	e0bffe15 	stw	r2,-8(fp)
  80c710:	00000b06 	br	80c740 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80c714:	e0fffd17 	ldw	r3,-12(fp)
  80c718:	00880004 	movi	r2,8192
  80c71c:	18800115 	stw	r2,4(r3)
      return 0;
  80c720:	e03ffe15 	stw	zero,-8(fp)
  80c724:	00000606 	br	80c740 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c728:	080c7580 	call	80c758 <alt_get_errno>
  80c72c:	1007883a 	mov	r3,r2
  80c730:	00801444 	movi	r2,81
  80c734:	18800015 	stw	r2,0(r3)
    return -1;
  80c738:	00bfffc4 	movi	r2,-1
  80c73c:	e0bffe15 	stw	r2,-8(fp)
  80c740:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80c744:	e037883a 	mov	sp,fp
  80c748:	dfc00117 	ldw	ra,4(sp)
  80c74c:	df000017 	ldw	fp,0(sp)
  80c750:	dec00204 	addi	sp,sp,8
  80c754:	f800283a 	ret

0080c758 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c758:	defffd04 	addi	sp,sp,-12
  80c75c:	dfc00215 	stw	ra,8(sp)
  80c760:	df000115 	stw	fp,4(sp)
  80c764:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c768:	008020b4 	movhi	r2,130
  80c76c:	10a94704 	addi	r2,r2,-23268
  80c770:	10800017 	ldw	r2,0(r2)
  80c774:	1005003a 	cmpeq	r2,r2,zero
  80c778:	1000061e 	bne	r2,zero,80c794 <alt_get_errno+0x3c>
  80c77c:	008020b4 	movhi	r2,130
  80c780:	10a94704 	addi	r2,r2,-23268
  80c784:	10800017 	ldw	r2,0(r2)
  80c788:	103ee83a 	callr	r2
  80c78c:	e0bfff15 	stw	r2,-4(fp)
  80c790:	00000306 	br	80c7a0 <alt_get_errno+0x48>
  80c794:	008020b4 	movhi	r2,130
  80c798:	10a96f04 	addi	r2,r2,-23108
  80c79c:	e0bfff15 	stw	r2,-4(fp)
  80c7a0:	e0bfff17 	ldw	r2,-4(fp)
}
  80c7a4:	e037883a 	mov	sp,fp
  80c7a8:	dfc00117 	ldw	ra,4(sp)
  80c7ac:	df000017 	ldw	fp,0(sp)
  80c7b0:	dec00204 	addi	sp,sp,8
  80c7b4:	f800283a 	ret

0080c7b8 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
  80c7b8:	deffff04 	addi	sp,sp,-4
  80c7bc:	df000015 	stw	fp,0(sp)
  80c7c0:	d839883a 	mov	fp,sp
  return 0;
  80c7c4:	0005883a 	mov	r2,zero
}
  80c7c8:	e037883a 	mov	sp,fp
  80c7cc:	df000017 	ldw	fp,0(sp)
  80c7d0:	dec00104 	addi	sp,sp,4
  80c7d4:	f800283a 	ret

0080c7d8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80c7d8:	deffeb04 	addi	sp,sp,-84
  80c7dc:	dfc01415 	stw	ra,80(sp)
  80c7e0:	df001315 	stw	fp,76(sp)
  80c7e4:	df001304 	addi	fp,sp,76
  80c7e8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80c7ec:	e0bffd17 	ldw	r2,-12(fp)
  80c7f0:	1004803a 	cmplt	r2,r2,zero
  80c7f4:	1000091e 	bne	r2,zero,80c81c <isatty+0x44>
  80c7f8:	e13ffd17 	ldw	r4,-12(fp)
  80c7fc:	01400304 	movi	r5,12
  80c800:	08019440 	call	801944 <__mulsi3>
  80c804:	1007883a 	mov	r3,r2
  80c808:	008020b4 	movhi	r2,130
  80c80c:	10a4ab04 	addi	r2,r2,-27988
  80c810:	1887883a 	add	r3,r3,r2
  80c814:	e0ffff15 	stw	r3,-4(fp)
  80c818:	00000106 	br	80c820 <isatty+0x48>
  80c81c:	e03fff15 	stw	zero,-4(fp)
  80c820:	e0bfff17 	ldw	r2,-4(fp)
  80c824:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
  80c828:	e0bfed17 	ldw	r2,-76(fp)
  80c82c:	1005003a 	cmpeq	r2,r2,zero
  80c830:	10000f1e 	bne	r2,zero,80c870 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80c834:	e0bfed17 	ldw	r2,-76(fp)
  80c838:	10800017 	ldw	r2,0(r2)
  80c83c:	10800817 	ldw	r2,32(r2)
  80c840:	1004c03a 	cmpne	r2,r2,zero
  80c844:	1000031e 	bne	r2,zero,80c854 <isatty+0x7c>
    {
      return 1;
  80c848:	00800044 	movi	r2,1
  80c84c:	e0bffe15 	stw	r2,-8(fp)
  80c850:	00000c06 	br	80c884 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80c854:	e17fee04 	addi	r5,fp,-72
  80c858:	e13ffd17 	ldw	r4,-12(fp)
  80c85c:	080c6800 	call	80c680 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80c860:	e0bfef17 	ldw	r2,-68(fp)
  80c864:	10880020 	cmpeqi	r2,r2,8192
  80c868:	e0bffe15 	stw	r2,-8(fp)
  80c86c:	00000506 	br	80c884 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80c870:	080c89c0 	call	80c89c <alt_get_errno>
  80c874:	1007883a 	mov	r3,r2
  80c878:	00801444 	movi	r2,81
  80c87c:	18800015 	stw	r2,0(r3)
    return 0;
  80c880:	e03ffe15 	stw	zero,-8(fp)
  80c884:	e0bffe17 	ldw	r2,-8(fp)
  }
}
  80c888:	e037883a 	mov	sp,fp
  80c88c:	dfc00117 	ldw	ra,4(sp)
  80c890:	df000017 	ldw	fp,0(sp)
  80c894:	dec00204 	addi	sp,sp,8
  80c898:	f800283a 	ret

0080c89c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80c89c:	defffd04 	addi	sp,sp,-12
  80c8a0:	dfc00215 	stw	ra,8(sp)
  80c8a4:	df000115 	stw	fp,4(sp)
  80c8a8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80c8ac:	008020b4 	movhi	r2,130
  80c8b0:	10a94704 	addi	r2,r2,-23268
  80c8b4:	10800017 	ldw	r2,0(r2)
  80c8b8:	1005003a 	cmpeq	r2,r2,zero
  80c8bc:	1000061e 	bne	r2,zero,80c8d8 <alt_get_errno+0x3c>
  80c8c0:	008020b4 	movhi	r2,130
  80c8c4:	10a94704 	addi	r2,r2,-23268
  80c8c8:	10800017 	ldw	r2,0(r2)
  80c8cc:	103ee83a 	callr	r2
  80c8d0:	e0bfff15 	stw	r2,-4(fp)
  80c8d4:	00000306 	br	80c8e4 <alt_get_errno+0x48>
  80c8d8:	008020b4 	movhi	r2,130
  80c8dc:	10a96f04 	addi	r2,r2,-23108
  80c8e0:	e0bfff15 	stw	r2,-4(fp)
  80c8e4:	e0bfff17 	ldw	r2,-4(fp)
}
  80c8e8:	e037883a 	mov	sp,fp
  80c8ec:	dfc00117 	ldw	ra,4(sp)
  80c8f0:	df000017 	ldw	fp,0(sp)
  80c8f4:	dec00204 	addi	sp,sp,8
  80c8f8:	f800283a 	ret

0080c8fc <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
  80c8fc:	defffa04 	addi	sp,sp,-24
  80c900:	dfc00515 	stw	ra,20(sp)
  80c904:	df000415 	stw	fp,16(sp)
  80c908:	df000404 	addi	fp,sp,16
  80c90c:	e13ffd15 	stw	r4,-12(fp)
  80c910:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
  80c914:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
  80c918:	e0bffd17 	ldw	r2,-12(fp)
  80c91c:	10800048 	cmpgei	r2,r2,1
  80c920:	1000301e 	bne	r2,zero,80c9e4 <kill+0xe8>
  {
    switch (sig)
  80c924:	e0bffe17 	ldw	r2,-8(fp)
  80c928:	10800828 	cmpgeui	r2,r2,32
  80c92c:	10002a1e 	bne	r2,zero,80c9d8 <kill+0xdc>
  80c930:	e0bffe17 	ldw	r2,-8(fp)
  80c934:	1085883a 	add	r2,r2,r2
  80c938:	1087883a 	add	r3,r2,r2
  80c93c:	00802074 	movhi	r2,129
  80c940:	10b25404 	addi	r2,r2,-14000
  80c944:	1885883a 	add	r2,r3,r2
  80c948:	10800017 	ldw	r2,0(r2)
  80c94c:	1000683a 	jmp	r2
  80c950:	0080c9f8 	rdprs	r2,zero,807
  80c954:	0080c9d8 	cmpnei	r2,zero,807
  80c958:	0080c9d8 	cmpnei	r2,zero,807
  80c95c:	0080c9d0 	cmplti	r2,zero,807
  80c960:	0080c9d0 	cmplti	r2,zero,807
  80c964:	0080c9d0 	cmplti	r2,zero,807
  80c968:	0080c9d0 	cmplti	r2,zero,807
  80c96c:	0080c9d8 	cmpnei	r2,zero,807
  80c970:	0080c9d0 	cmplti	r2,zero,807
  80c974:	0080c9d0 	cmplti	r2,zero,807
  80c978:	0080c9d0 	cmplti	r2,zero,807
  80c97c:	0080c9d0 	cmplti	r2,zero,807
  80c980:	0080c9d0 	cmplti	r2,zero,807
  80c984:	0080c9d0 	cmplti	r2,zero,807
  80c988:	0080c9d0 	cmplti	r2,zero,807
  80c98c:	0080c9d0 	cmplti	r2,zero,807
  80c990:	0080c9f8 	rdprs	r2,zero,807
  80c994:	0080c9d8 	cmpnei	r2,zero,807
  80c998:	0080c9d8 	cmpnei	r2,zero,807
  80c99c:	0080c9d8 	cmpnei	r2,zero,807
  80c9a0:	0080c9f8 	rdprs	r2,zero,807
  80c9a4:	0080c9d8 	cmpnei	r2,zero,807
  80c9a8:	0080c9d8 	cmpnei	r2,zero,807
  80c9ac:	0080c9d0 	cmplti	r2,zero,807
  80c9b0:	0080c9d0 	cmplti	r2,zero,807
  80c9b4:	0080c9d0 	cmplti	r2,zero,807
  80c9b8:	0080c9d0 	cmplti	r2,zero,807
  80c9bc:	0080c9d0 	cmplti	r2,zero,807
  80c9c0:	0080c9d8 	cmpnei	r2,zero,807
  80c9c4:	0080c9d8 	cmpnei	r2,zero,807
  80c9c8:	0080c9d0 	cmplti	r2,zero,807
  80c9cc:	0080c9d0 	cmplti	r2,zero,807
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
  80c9d0:	0009883a 	mov	r4,zero
  80c9d4:	080c6540 	call	80c654 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
  80c9d8:	00800584 	movi	r2,22
  80c9dc:	e0bffc15 	stw	r2,-16(fp)
  80c9e0:	00000506 	br	80c9f8 <kill+0xfc>
    }
  }

  else if (pid > 0)
  80c9e4:	e0bffd17 	ldw	r2,-12(fp)
  80c9e8:	10800050 	cmplti	r2,r2,1
  80c9ec:	1000021e 	bne	r2,zero,80c9f8 <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  80c9f0:	008000c4 	movi	r2,3
  80c9f4:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
  80c9f8:	e0bffc17 	ldw	r2,-16(fp)
  80c9fc:	1005003a 	cmpeq	r2,r2,zero
  80ca00:	1000071e 	bne	r2,zero,80ca20 <kill+0x124>
  {
    ALT_ERRNO = status;
  80ca04:	080ca3c0 	call	80ca3c <alt_get_errno>
  80ca08:	1007883a 	mov	r3,r2
  80ca0c:	e0bffc17 	ldw	r2,-16(fp)
  80ca10:	18800015 	stw	r2,0(r3)
    return -1;
  80ca14:	00bfffc4 	movi	r2,-1
  80ca18:	e0bfff15 	stw	r2,-4(fp)
  80ca1c:	00000106 	br	80ca24 <kill+0x128>
  }

  return 0;
  80ca20:	e03fff15 	stw	zero,-4(fp)
  80ca24:	e0bfff17 	ldw	r2,-4(fp)
}
  80ca28:	e037883a 	mov	sp,fp
  80ca2c:	dfc00117 	ldw	ra,4(sp)
  80ca30:	df000017 	ldw	fp,0(sp)
  80ca34:	dec00204 	addi	sp,sp,8
  80ca38:	f800283a 	ret

0080ca3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80ca3c:	defffd04 	addi	sp,sp,-12
  80ca40:	dfc00215 	stw	ra,8(sp)
  80ca44:	df000115 	stw	fp,4(sp)
  80ca48:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80ca4c:	008020b4 	movhi	r2,130
  80ca50:	10a94704 	addi	r2,r2,-23268
  80ca54:	10800017 	ldw	r2,0(r2)
  80ca58:	1005003a 	cmpeq	r2,r2,zero
  80ca5c:	1000061e 	bne	r2,zero,80ca78 <alt_get_errno+0x3c>
  80ca60:	008020b4 	movhi	r2,130
  80ca64:	10a94704 	addi	r2,r2,-23268
  80ca68:	10800017 	ldw	r2,0(r2)
  80ca6c:	103ee83a 	callr	r2
  80ca70:	e0bfff15 	stw	r2,-4(fp)
  80ca74:	00000306 	br	80ca84 <alt_get_errno+0x48>
  80ca78:	008020b4 	movhi	r2,130
  80ca7c:	10a96f04 	addi	r2,r2,-23108
  80ca80:	e0bfff15 	stw	r2,-4(fp)
  80ca84:	e0bfff17 	ldw	r2,-4(fp)
}
  80ca88:	e037883a 	mov	sp,fp
  80ca8c:	dfc00117 	ldw	ra,4(sp)
  80ca90:	df000017 	ldw	fp,0(sp)
  80ca94:	dec00204 	addi	sp,sp,8
  80ca98:	f800283a 	ret

0080ca9c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80ca9c:	defff804 	addi	sp,sp,-32
  80caa0:	dfc00715 	stw	ra,28(sp)
  80caa4:	df000615 	stw	fp,24(sp)
  80caa8:	df000604 	addi	fp,sp,24
  80caac:	e13ffc15 	stw	r4,-16(fp)
  80cab0:	e17ffd15 	stw	r5,-12(fp)
  80cab4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80cab8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80cabc:	e0bffc17 	ldw	r2,-16(fp)
  80cac0:	1004803a 	cmplt	r2,r2,zero
  80cac4:	1000091e 	bne	r2,zero,80caec <lseek+0x50>
  80cac8:	e13ffc17 	ldw	r4,-16(fp)
  80cacc:	01400304 	movi	r5,12
  80cad0:	08019440 	call	801944 <__mulsi3>
  80cad4:	1007883a 	mov	r3,r2
  80cad8:	008020b4 	movhi	r2,130
  80cadc:	10a4ab04 	addi	r2,r2,-27988
  80cae0:	1887883a 	add	r3,r3,r2
  80cae4:	e0ffff15 	stw	r3,-4(fp)
  80cae8:	00000106 	br	80caf0 <lseek+0x54>
  80caec:	e03fff15 	stw	zero,-4(fp)
  80caf0:	e0bfff17 	ldw	r2,-4(fp)
  80caf4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
  80caf8:	e0bffb17 	ldw	r2,-20(fp)
  80cafc:	1005003a 	cmpeq	r2,r2,zero
  80cb00:	1000111e 	bne	r2,zero,80cb48 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80cb04:	e0bffb17 	ldw	r2,-20(fp)
  80cb08:	10800017 	ldw	r2,0(r2)
  80cb0c:	10800717 	ldw	r2,28(r2)
  80cb10:	1005003a 	cmpeq	r2,r2,zero
  80cb14:	1000091e 	bne	r2,zero,80cb3c <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80cb18:	e0bffb17 	ldw	r2,-20(fp)
  80cb1c:	10800017 	ldw	r2,0(r2)
  80cb20:	10800717 	ldw	r2,28(r2)
  80cb24:	e13ffb17 	ldw	r4,-20(fp)
  80cb28:	e17ffd17 	ldw	r5,-12(fp)
  80cb2c:	e1bffe17 	ldw	r6,-8(fp)
  80cb30:	103ee83a 	callr	r2
  80cb34:	e0bffa15 	stw	r2,-24(fp)
  80cb38:	00000506 	br	80cb50 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80cb3c:	00bfde84 	movi	r2,-134
  80cb40:	e0bffa15 	stw	r2,-24(fp)
  80cb44:	00000206 	br	80cb50 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
  80cb48:	00bfebc4 	movi	r2,-81
  80cb4c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
  80cb50:	e0bffa17 	ldw	r2,-24(fp)
  80cb54:	1004403a 	cmpge	r2,r2,zero
  80cb58:	1000071e 	bne	r2,zero,80cb78 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
  80cb5c:	080cb900 	call	80cb90 <alt_get_errno>
  80cb60:	1007883a 	mov	r3,r2
  80cb64:	e0bffa17 	ldw	r2,-24(fp)
  80cb68:	0085c83a 	sub	r2,zero,r2
  80cb6c:	18800015 	stw	r2,0(r3)
    rc = -1;
  80cb70:	00bfffc4 	movi	r2,-1
  80cb74:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
  80cb78:	e0bffa17 	ldw	r2,-24(fp)
}
  80cb7c:	e037883a 	mov	sp,fp
  80cb80:	dfc00117 	ldw	ra,4(sp)
  80cb84:	df000017 	ldw	fp,0(sp)
  80cb88:	dec00204 	addi	sp,sp,8
  80cb8c:	f800283a 	ret

0080cb90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cb90:	defffd04 	addi	sp,sp,-12
  80cb94:	dfc00215 	stw	ra,8(sp)
  80cb98:	df000115 	stw	fp,4(sp)
  80cb9c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80cba0:	008020b4 	movhi	r2,130
  80cba4:	10a94704 	addi	r2,r2,-23268
  80cba8:	10800017 	ldw	r2,0(r2)
  80cbac:	1005003a 	cmpeq	r2,r2,zero
  80cbb0:	1000061e 	bne	r2,zero,80cbcc <alt_get_errno+0x3c>
  80cbb4:	008020b4 	movhi	r2,130
  80cbb8:	10a94704 	addi	r2,r2,-23268
  80cbbc:	10800017 	ldw	r2,0(r2)
  80cbc0:	103ee83a 	callr	r2
  80cbc4:	e0bfff15 	stw	r2,-4(fp)
  80cbc8:	00000306 	br	80cbd8 <alt_get_errno+0x48>
  80cbcc:	008020b4 	movhi	r2,130
  80cbd0:	10a96f04 	addi	r2,r2,-23108
  80cbd4:	e0bfff15 	stw	r2,-4(fp)
  80cbd8:	e0bfff17 	ldw	r2,-4(fp)
}
  80cbdc:	e037883a 	mov	sp,fp
  80cbe0:	dfc00117 	ldw	ra,4(sp)
  80cbe4:	df000017 	ldw	fp,0(sp)
  80cbe8:	dec00204 	addi	sp,sp,8
  80cbec:	f800283a 	ret

0080cbf0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80cbf0:	defffb04 	addi	sp,sp,-20
  80cbf4:	dfc00415 	stw	ra,16(sp)
  80cbf8:	df000315 	stw	fp,12(sp)
  80cbfc:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80cc00:	0009883a 	mov	r4,zero
  80cc04:	08156c00 	call	8156c0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80cc08:	080dcfc0 	call	80dcfc <OSInit>
  80cc0c:	01000044 	movi	r4,1
  80cc10:	0812bc40 	call	812bc4 <OSSemCreate>
  80cc14:	1007883a 	mov	r3,r2
  80cc18:	008020b4 	movhi	r2,130
  80cc1c:	10a97804 	addi	r2,r2,-23072
  80cc20:	10c00015 	stw	r3,0(r2)
  80cc24:	01000044 	movi	r4,1
  80cc28:	0812bc40 	call	812bc4 <OSSemCreate>
  80cc2c:	1007883a 	mov	r3,r2
  80cc30:	008020b4 	movhi	r2,130
  80cc34:	10a97a04 	addi	r2,r2,-23064
  80cc38:	10c00015 	stw	r3,0(r2)
  80cc3c:	008020b4 	movhi	r2,130
  80cc40:	10a97304 	addi	r2,r2,-23092
  80cc44:	e0bffd15 	stw	r2,-12(fp)
  80cc48:	00800044 	movi	r2,1
  80cc4c:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
  80cc50:	e13ffe0b 	ldhu	r4,-8(fp)
  80cc54:	0812bc40 	call	812bc4 <OSSemCreate>
  80cc58:	1007883a 	mov	r3,r2
  80cc5c:	e0bffd17 	ldw	r2,-12(fp)
  80cc60:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80cc64:	08156f40 	call	8156f4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80cc68:	010020b4 	movhi	r4,130
  80cc6c:	21223e04 	addi	r4,r4,-30472
  80cc70:	014020b4 	movhi	r5,130
  80cc74:	29623e04 	addi	r5,r5,-30472
  80cc78:	018020b4 	movhi	r6,130
  80cc7c:	31a23e04 	addi	r6,r6,-30472
  80cc80:	08174200 	call	817420 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80cc84:	0816f200 	call	816f20 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80cc88:	01002074 	movhi	r4,129
  80cc8c:	211be104 	addi	r4,r4,28548
  80cc90:	08180500 	call	818050 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80cc94:	d1203817 	ldw	r4,-32544(gp)
  80cc98:	d1603917 	ldw	r5,-32540(gp)
  80cc9c:	d1a03a17 	ldw	r6,-32536(gp)
  80cca0:	08000f40 	call	8000f4 <main>
  80cca4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80cca8:	01000044 	movi	r4,1
  80ccac:	080c4880 	call	80c488 <close>
  exit (result);
  80ccb0:	e13fff17 	ldw	r4,-4(fp)
  80ccb4:	08180640 	call	818064 <exit>

0080ccb8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80ccb8:	defff704 	addi	sp,sp,-36
  80ccbc:	dfc00815 	stw	ra,32(sp)
  80ccc0:	df000715 	stw	fp,28(sp)
  80ccc4:	df000704 	addi	fp,sp,28
  80ccc8:	e13ffb15 	stw	r4,-20(fp)
  80cccc:	e17ffc15 	stw	r5,-16(fp)
  80ccd0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80ccd4:	e0bffb17 	ldw	r2,-20(fp)
  80ccd8:	1004803a 	cmplt	r2,r2,zero
  80ccdc:	1000091e 	bne	r2,zero,80cd04 <read+0x4c>
  80cce0:	e13ffb17 	ldw	r4,-20(fp)
  80cce4:	01400304 	movi	r5,12
  80cce8:	08019440 	call	801944 <__mulsi3>
  80ccec:	1007883a 	mov	r3,r2
  80ccf0:	008020b4 	movhi	r2,130
  80ccf4:	10a4ab04 	addi	r2,r2,-27988
  80ccf8:	1887883a 	add	r3,r3,r2
  80ccfc:	e0ffff15 	stw	r3,-4(fp)
  80cd00:	00000106 	br	80cd08 <read+0x50>
  80cd04:	e03fff15 	stw	zero,-4(fp)
  80cd08:	e0bfff17 	ldw	r2,-4(fp)
  80cd0c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80cd10:	e0bffa17 	ldw	r2,-24(fp)
  80cd14:	1005003a 	cmpeq	r2,r2,zero
  80cd18:	1000241e 	bne	r2,zero,80cdac <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80cd1c:	e0bffa17 	ldw	r2,-24(fp)
  80cd20:	10800217 	ldw	r2,8(r2)
  80cd24:	108000cc 	andi	r2,r2,3
  80cd28:	10800060 	cmpeqi	r2,r2,1
  80cd2c:	10001a1e 	bne	r2,zero,80cd98 <read+0xe0>
  80cd30:	e0bffa17 	ldw	r2,-24(fp)
  80cd34:	10800017 	ldw	r2,0(r2)
  80cd38:	10800517 	ldw	r2,20(r2)
  80cd3c:	1005003a 	cmpeq	r2,r2,zero
  80cd40:	1000151e 	bne	r2,zero,80cd98 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80cd44:	e0bffa17 	ldw	r2,-24(fp)
  80cd48:	10800017 	ldw	r2,0(r2)
  80cd4c:	10800517 	ldw	r2,20(r2)
  80cd50:	e17ffc17 	ldw	r5,-16(fp)
  80cd54:	e1bffd17 	ldw	r6,-12(fp)
  80cd58:	e13ffa17 	ldw	r4,-24(fp)
  80cd5c:	103ee83a 	callr	r2
  80cd60:	e0bff915 	stw	r2,-28(fp)
  80cd64:	e0bff917 	ldw	r2,-28(fp)
  80cd68:	1004403a 	cmpge	r2,r2,zero
  80cd6c:	1000071e 	bne	r2,zero,80cd8c <read+0xd4>
        {
          ALT_ERRNO = -rval;
  80cd70:	080cddc0 	call	80cddc <alt_get_errno>
  80cd74:	e0fff917 	ldw	r3,-28(fp)
  80cd78:	00c7c83a 	sub	r3,zero,r3
  80cd7c:	10c00015 	stw	r3,0(r2)
          return -1;
  80cd80:	00bfffc4 	movi	r2,-1
  80cd84:	e0bffe15 	stw	r2,-8(fp)
  80cd88:	00000e06 	br	80cdc4 <read+0x10c>
        }
        return rval;
  80cd8c:	e0bff917 	ldw	r2,-28(fp)
  80cd90:	e0bffe15 	stw	r2,-8(fp)
  80cd94:	00000b06 	br	80cdc4 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80cd98:	080cddc0 	call	80cddc <alt_get_errno>
  80cd9c:	1007883a 	mov	r3,r2
  80cda0:	00800344 	movi	r2,13
  80cda4:	18800015 	stw	r2,0(r3)
  80cda8:	00000406 	br	80cdbc <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80cdac:	080cddc0 	call	80cddc <alt_get_errno>
  80cdb0:	1007883a 	mov	r3,r2
  80cdb4:	00801444 	movi	r2,81
  80cdb8:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80cdbc:	00bfffc4 	movi	r2,-1
  80cdc0:	e0bffe15 	stw	r2,-8(fp)
  80cdc4:	e0bffe17 	ldw	r2,-8(fp)
}
  80cdc8:	e037883a 	mov	sp,fp
  80cdcc:	dfc00117 	ldw	ra,4(sp)
  80cdd0:	df000017 	ldw	fp,0(sp)
  80cdd4:	dec00204 	addi	sp,sp,8
  80cdd8:	f800283a 	ret

0080cddc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80cddc:	defffd04 	addi	sp,sp,-12
  80cde0:	dfc00215 	stw	ra,8(sp)
  80cde4:	df000115 	stw	fp,4(sp)
  80cde8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80cdec:	008020b4 	movhi	r2,130
  80cdf0:	10a94704 	addi	r2,r2,-23268
  80cdf4:	10800017 	ldw	r2,0(r2)
  80cdf8:	1005003a 	cmpeq	r2,r2,zero
  80cdfc:	1000061e 	bne	r2,zero,80ce18 <alt_get_errno+0x3c>
  80ce00:	008020b4 	movhi	r2,130
  80ce04:	10a94704 	addi	r2,r2,-23268
  80ce08:	10800017 	ldw	r2,0(r2)
  80ce0c:	103ee83a 	callr	r2
  80ce10:	e0bfff15 	stw	r2,-4(fp)
  80ce14:	00000306 	br	80ce24 <alt_get_errno+0x48>
  80ce18:	008020b4 	movhi	r2,130
  80ce1c:	10a96f04 	addi	r2,r2,-23108
  80ce20:	e0bfff15 	stw	r2,-4(fp)
  80ce24:	e0bfff17 	ldw	r2,-4(fp)
}
  80ce28:	e037883a 	mov	sp,fp
  80ce2c:	dfc00117 	ldw	ra,4(sp)
  80ce30:	df000017 	ldw	fp,0(sp)
  80ce34:	dec00204 	addi	sp,sp,8
  80ce38:	f800283a 	ret

0080ce3c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80ce3c:	defffc04 	addi	sp,sp,-16
  80ce40:	dfc00315 	stw	ra,12(sp)
  80ce44:	df000215 	stw	fp,8(sp)
  80ce48:	dc000115 	stw	r16,4(sp)
  80ce4c:	df000104 	addi	fp,sp,4
  80ce50:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80ce54:	e0bfff17 	ldw	r2,-4(fp)
  80ce58:	108000d0 	cmplti	r2,r2,3
  80ce5c:	10000f1e 	bne	r2,zero,80ce9c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
  80ce60:	e13fff17 	ldw	r4,-4(fp)
  80ce64:	040020b4 	movhi	r16,130
  80ce68:	8424ab04 	addi	r16,r16,-27988
  80ce6c:	01400304 	movi	r5,12
  80ce70:	08019440 	call	801944 <__mulsi3>
  80ce74:	1405883a 	add	r2,r2,r16
  80ce78:	10800204 	addi	r2,r2,8
  80ce7c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80ce80:	e13fff17 	ldw	r4,-4(fp)
  80ce84:	040020b4 	movhi	r16,130
  80ce88:	8424ab04 	addi	r16,r16,-27988
  80ce8c:	01400304 	movi	r5,12
  80ce90:	08019440 	call	801944 <__mulsi3>
  80ce94:	1405883a 	add	r2,r2,r16
  80ce98:	10000015 	stw	zero,0(r2)
  }
}
  80ce9c:	e037883a 	mov	sp,fp
  80cea0:	dfc00217 	ldw	ra,8(sp)
  80cea4:	df000117 	ldw	fp,4(sp)
  80cea8:	dc000017 	ldw	r16,0(sp)
  80ceac:	dec00304 	addi	sp,sp,12
  80ceb0:	f800283a 	ret

0080ceb4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80ceb4:	defff804 	addi	sp,sp,-32
  80ceb8:	df000715 	stw	fp,28(sp)
  80cebc:	df000704 	addi	fp,sp,28
  80cec0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80cec4:	0005303a 	rdctl	r2,status
  80cec8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80cecc:	e0fffb17 	ldw	r3,-20(fp)
  80ced0:	00bfff84 	movi	r2,-2
  80ced4:	1884703a 	and	r2,r3,r2
  80ced8:	1001703a 	wrctl	status,r2
  
  return context;
  80cedc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80cee0:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80cee4:	d0a00c17 	ldw	r2,-32720(gp)
  80cee8:	10c000c4 	addi	r3,r2,3
  80ceec:	00bfff04 	movi	r2,-4
  80cef0:	1884703a 	and	r2,r3,r2
  80cef4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80cef8:	d0e00c17 	ldw	r3,-32720(gp)
  80cefc:	e0bffe17 	ldw	r2,-8(fp)
  80cf00:	1887883a 	add	r3,r3,r2
  80cf04:	00804034 	movhi	r2,256
  80cf08:	10800004 	addi	r2,r2,0
  80cf0c:	10c0072e 	bgeu	r2,r3,80cf2c <sbrk+0x78>
  80cf10:	e0bffd17 	ldw	r2,-12(fp)
  80cf14:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80cf18:	e0bffa17 	ldw	r2,-24(fp)
  80cf1c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80cf20:	00bfffc4 	movi	r2,-1
  80cf24:	e0bfff15 	stw	r2,-4(fp)
  80cf28:	00000c06 	br	80cf5c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
  80cf2c:	d0a00c17 	ldw	r2,-32720(gp)
  80cf30:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
  80cf34:	d0e00c17 	ldw	r3,-32720(gp)
  80cf38:	e0bffe17 	ldw	r2,-8(fp)
  80cf3c:	1885883a 	add	r2,r3,r2
  80cf40:	d0a00c15 	stw	r2,-32720(gp)
  80cf44:	e0bffd17 	ldw	r2,-12(fp)
  80cf48:	e0bff915 	stw	r2,-28(fp)
  80cf4c:	e0bff917 	ldw	r2,-28(fp)
  80cf50:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80cf54:	e0bffc17 	ldw	r2,-16(fp)
  80cf58:	e0bfff15 	stw	r2,-4(fp)
  80cf5c:	e0bfff17 	ldw	r2,-4(fp)
} 
  80cf60:	e037883a 	mov	sp,fp
  80cf64:	df000017 	ldw	fp,0(sp)
  80cf68:	dec00104 	addi	sp,sp,4
  80cf6c:	f800283a 	ret

0080cf70 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80cf70:	defff704 	addi	sp,sp,-36
  80cf74:	dfc00815 	stw	ra,32(sp)
  80cf78:	df000715 	stw	fp,28(sp)
  80cf7c:	df000704 	addi	fp,sp,28
  80cf80:	e13ffb15 	stw	r4,-20(fp)
  80cf84:	e17ffc15 	stw	r5,-16(fp)
  80cf88:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80cf8c:	e0bffb17 	ldw	r2,-20(fp)
  80cf90:	1004803a 	cmplt	r2,r2,zero
  80cf94:	1000091e 	bne	r2,zero,80cfbc <write+0x4c>
  80cf98:	e13ffb17 	ldw	r4,-20(fp)
  80cf9c:	01400304 	movi	r5,12
  80cfa0:	08019440 	call	801944 <__mulsi3>
  80cfa4:	1007883a 	mov	r3,r2
  80cfa8:	008020b4 	movhi	r2,130
  80cfac:	10a4ab04 	addi	r2,r2,-27988
  80cfb0:	1887883a 	add	r3,r3,r2
  80cfb4:	e0ffff15 	stw	r3,-4(fp)
  80cfb8:	00000106 	br	80cfc0 <write+0x50>
  80cfbc:	e03fff15 	stw	zero,-4(fp)
  80cfc0:	e0bfff17 	ldw	r2,-4(fp)
  80cfc4:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
  80cfc8:	e0bffa17 	ldw	r2,-24(fp)
  80cfcc:	1005003a 	cmpeq	r2,r2,zero
  80cfd0:	1000241e 	bne	r2,zero,80d064 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80cfd4:	e0bffa17 	ldw	r2,-24(fp)
  80cfd8:	10800217 	ldw	r2,8(r2)
  80cfdc:	108000cc 	andi	r2,r2,3
  80cfe0:	1005003a 	cmpeq	r2,r2,zero
  80cfe4:	10001a1e 	bne	r2,zero,80d050 <write+0xe0>
  80cfe8:	e0bffa17 	ldw	r2,-24(fp)
  80cfec:	10800017 	ldw	r2,0(r2)
  80cff0:	10800617 	ldw	r2,24(r2)
  80cff4:	1005003a 	cmpeq	r2,r2,zero
  80cff8:	1000151e 	bne	r2,zero,80d050 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80cffc:	e0bffa17 	ldw	r2,-24(fp)
  80d000:	10800017 	ldw	r2,0(r2)
  80d004:	10800617 	ldw	r2,24(r2)
  80d008:	e17ffc17 	ldw	r5,-16(fp)
  80d00c:	e1bffd17 	ldw	r6,-12(fp)
  80d010:	e13ffa17 	ldw	r4,-24(fp)
  80d014:	103ee83a 	callr	r2
  80d018:	e0bff915 	stw	r2,-28(fp)
  80d01c:	e0bff917 	ldw	r2,-28(fp)
  80d020:	1004403a 	cmpge	r2,r2,zero
  80d024:	1000071e 	bne	r2,zero,80d044 <write+0xd4>
      {
        ALT_ERRNO = -rval;
  80d028:	080d0940 	call	80d094 <alt_get_errno>
  80d02c:	e0fff917 	ldw	r3,-28(fp)
  80d030:	00c7c83a 	sub	r3,zero,r3
  80d034:	10c00015 	stw	r3,0(r2)
        return -1;
  80d038:	00bfffc4 	movi	r2,-1
  80d03c:	e0bffe15 	stw	r2,-8(fp)
  80d040:	00000e06 	br	80d07c <write+0x10c>
      }
      return rval;
  80d044:	e0bff917 	ldw	r2,-28(fp)
  80d048:	e0bffe15 	stw	r2,-8(fp)
  80d04c:	00000b06 	br	80d07c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80d050:	080d0940 	call	80d094 <alt_get_errno>
  80d054:	1007883a 	mov	r3,r2
  80d058:	00800344 	movi	r2,13
  80d05c:	18800015 	stw	r2,0(r3)
  80d060:	00000406 	br	80d074 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80d064:	080d0940 	call	80d094 <alt_get_errno>
  80d068:	1007883a 	mov	r3,r2
  80d06c:	00801444 	movi	r2,81
  80d070:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80d074:	00bfffc4 	movi	r2,-1
  80d078:	e0bffe15 	stw	r2,-8(fp)
  80d07c:	e0bffe17 	ldw	r2,-8(fp)
}
  80d080:	e037883a 	mov	sp,fp
  80d084:	dfc00117 	ldw	ra,4(sp)
  80d088:	df000017 	ldw	fp,0(sp)
  80d08c:	dec00204 	addi	sp,sp,8
  80d090:	f800283a 	ret

0080d094 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d094:	defffd04 	addi	sp,sp,-12
  80d098:	dfc00215 	stw	ra,8(sp)
  80d09c:	df000115 	stw	fp,4(sp)
  80d0a0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  80d0a4:	008020b4 	movhi	r2,130
  80d0a8:	10a94704 	addi	r2,r2,-23268
  80d0ac:	10800017 	ldw	r2,0(r2)
  80d0b0:	1005003a 	cmpeq	r2,r2,zero
  80d0b4:	1000061e 	bne	r2,zero,80d0d0 <alt_get_errno+0x3c>
  80d0b8:	008020b4 	movhi	r2,130
  80d0bc:	10a94704 	addi	r2,r2,-23268
  80d0c0:	10800017 	ldw	r2,0(r2)
  80d0c4:	103ee83a 	callr	r2
  80d0c8:	e0bfff15 	stw	r2,-4(fp)
  80d0cc:	00000306 	br	80d0dc <alt_get_errno+0x48>
  80d0d0:	008020b4 	movhi	r2,130
  80d0d4:	10a96f04 	addi	r2,r2,-23108
  80d0d8:	e0bfff15 	stw	r2,-4(fp)
  80d0dc:	e0bfff17 	ldw	r2,-4(fp)
}
  80d0e0:	e037883a 	mov	sp,fp
  80d0e4:	dfc00117 	ldw	ra,4(sp)
  80d0e8:	df000017 	ldw	fp,0(sp)
  80d0ec:	dec00204 	addi	sp,sp,8
  80d0f0:	f800283a 	ret

0080d0f4 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
  80d0f4:	deffdf04 	addi	sp,sp,-132
  80d0f8:	dfc02015 	stw	ra,128(sp)
  80d0fc:	df001f15 	stw	fp,124(sp)
  80d100:	df001f04 	addi	fp,sp,124
  80d104:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80d108:	e17fe204 	addi	r5,fp,-120
  80d10c:	01003fc4 	movi	r4,255
  80d110:	0814f4c0 	call	814f4c <OSTaskQuery>
  80d114:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80d118:	e0bffe83 	ldbu	r2,-6(fp)
  80d11c:	10803fcc 	andi	r2,r2,255
  80d120:	1004c03a 	cmpne	r2,r2,zero
  80d124:	1000191e 	bne	r2,zero,80d18c <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
  80d128:	e0bfee83 	ldbu	r2,-70(fp)
  80d12c:	10803fcc 	andi	r2,r2,255
  80d130:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  80d134:	d1203c17 	ldw	r4,-32528(gp)
  80d138:	e17ffd04 	addi	r5,fp,-12
  80d13c:	08134980 	call	813498 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
  80d140:	e0bffe43 	ldbu	r2,-7(fp)
  80d144:	10803fcc 	andi	r2,r2,255
  80d148:	1005003a 	cmpeq	r2,r2,zero
  80d14c:	1000071e 	bne	r2,zero,80d16c <__env_lock+0x78>
  80d150:	d0e00d17 	ldw	r3,-32716(gp)
  80d154:	e0bfe117 	ldw	r2,-124(fp)
  80d158:	10c0041e 	bne	r2,r3,80d16c <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
  80d15c:	d0a03b17 	ldw	r2,-32532(gp)
  80d160:	10800044 	addi	r2,r2,1
  80d164:	d0a03b15 	stw	r2,-32532(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
  80d168:	00000806 	br	80d18c <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
  80d16c:	d1203c17 	ldw	r4,-32528(gp)
  80d170:	e1bffe84 	addi	r6,fp,-6
  80d174:	000b883a 	mov	r5,zero
  80d178:	0812f780 	call	812f78 <OSSemPend>
    locks  = 1;
  80d17c:	00800044 	movi	r2,1
  80d180:	d0a03b15 	stw	r2,-32532(gp)
    lockid = id;
  80d184:	e0bfe117 	ldw	r2,-124(fp)
  80d188:	d0a00d15 	stw	r2,-32716(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80d18c:	e037883a 	mov	sp,fp
  80d190:	dfc00117 	ldw	ra,4(sp)
  80d194:	df000017 	ldw	fp,0(sp)
  80d198:	dec00204 	addi	sp,sp,8
  80d19c:	f800283a 	ret

0080d1a0 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
  80d1a0:	defffd04 	addi	sp,sp,-12
  80d1a4:	dfc00215 	stw	ra,8(sp)
  80d1a8:	df000115 	stw	fp,4(sp)
  80d1ac:	df000104 	addi	fp,sp,4
  80d1b0:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
  80d1b4:	d0a03b17 	ldw	r2,-32532(gp)
  80d1b8:	1005003a 	cmpeq	r2,r2,zero
  80d1bc:	10000a1e 	bne	r2,zero,80d1e8 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
  80d1c0:	d0a03b17 	ldw	r2,-32532(gp)
  80d1c4:	10bfffc4 	addi	r2,r2,-1
  80d1c8:	d0a03b15 	stw	r2,-32532(gp)
  80d1cc:	d0a03b17 	ldw	r2,-32532(gp)
  80d1d0:	1004c03a 	cmpne	r2,r2,zero
  80d1d4:	1000041e 	bne	r2,zero,80d1e8 <__env_unlock+0x48>
  {
    lockid = -1;
  80d1d8:	00bfffc4 	movi	r2,-1
  80d1dc:	d0a00d15 	stw	r2,-32716(gp)
    OSSemPost( alt_envsem );
  80d1e0:	d1203c17 	ldw	r4,-32528(gp)
  80d1e4:	08133700 	call	813370 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80d1e8:	e037883a 	mov	sp,fp
  80d1ec:	dfc00117 	ldw	ra,4(sp)
  80d1f0:	df000017 	ldw	fp,0(sp)
  80d1f4:	dec00204 	addi	sp,sp,8
  80d1f8:	f800283a 	ret

0080d1fc <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
  80d1fc:	deffdb04 	addi	sp,sp,-148
  80d200:	dfc02415 	stw	ra,144(sp)
  80d204:	df002315 	stw	fp,140(sp)
  80d208:	df002304 	addi	fp,sp,140
  80d20c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d210:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
  80d214:	008020b4 	movhi	r2,130
  80d218:	10a97b44 	addi	r2,r2,-23059
  80d21c:	10800003 	ldbu	r2,0(r2)
  80d220:	10803fcc 	andi	r2,r2,255
  80d224:	10800058 	cmpnei	r2,r2,1
  80d228:	1000311e 	bne	r2,zero,80d2f0 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  80d22c:	e17fe204 	addi	r5,fp,-120
  80d230:	01003fc4 	movi	r4,255
  80d234:	0814f4c0 	call	814f4c <OSTaskQuery>
  80d238:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
  80d23c:	e0bffe83 	ldbu	r2,-6(fp)
  80d240:	10803fcc 	andi	r2,r2,255
  80d244:	1004c03a 	cmpne	r2,r2,zero
  80d248:	1000291e 	bne	r2,zero,80d2f0 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
  80d24c:	e0bfee83 	ldbu	r2,-70(fp)
  80d250:	10803fcc 	andi	r2,r2,255
  80d254:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
  80d258:	d1203e17 	ldw	r4,-32520(gp)
  80d25c:	e17ffd04 	addi	r5,fp,-12
  80d260:	08134980 	call	813498 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d264:	0005303a 	rdctl	r2,status
  80d268:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d26c:	e0ffdf17 	ldw	r3,-132(fp)
  80d270:	00bfff84 	movi	r2,-2
  80d274:	1884703a 	and	r2,r3,r2
  80d278:	1001703a 	wrctl	status,r2
  
  return context;
  80d27c:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
  80d280:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
  80d284:	e0bffd0b 	ldhu	r2,-12(fp)
  80d288:	10bfffcc 	andi	r2,r2,65535
  80d28c:	1004c03a 	cmpne	r2,r2,zero
  80d290:	10000b1e 	bne	r2,zero,80d2c0 <__malloc_lock+0xc4>
  80d294:	d0e00e17 	ldw	r3,-32712(gp)
  80d298:	e0bfe117 	ldw	r2,-124(fp)
  80d29c:	10c0081e 	bne	r2,r3,80d2c0 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
  80d2a0:	d0a03d17 	ldw	r2,-32524(gp)
  80d2a4:	10800044 	addi	r2,r2,1
  80d2a8:	d0a03d15 	stw	r2,-32524(gp)
  80d2ac:	e0bfe017 	ldw	r2,-128(fp)
  80d2b0:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d2b4:	e0bfde17 	ldw	r2,-136(fp)
  80d2b8:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
  80d2bc:	00000c06 	br	80d2f0 <__malloc_lock+0xf4>
  80d2c0:	e0bfe017 	ldw	r2,-128(fp)
  80d2c4:	e0bfdd15 	stw	r2,-140(fp)
  80d2c8:	e0bfdd17 	ldw	r2,-140(fp)
  80d2cc:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
  80d2d0:	d1203e17 	ldw	r4,-32520(gp)
  80d2d4:	e1bffe84 	addi	r6,fp,-6
  80d2d8:	000b883a 	mov	r5,zero
  80d2dc:	0812f780 	call	812f78 <OSSemPend>
    locks  = 1;
  80d2e0:	00800044 	movi	r2,1
  80d2e4:	d0a03d15 	stw	r2,-32524(gp)
    lockid = id;
  80d2e8:	e0bfe117 	ldw	r2,-124(fp)
  80d2ec:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
  80d2f0:	e037883a 	mov	sp,fp
  80d2f4:	dfc00117 	ldw	ra,4(sp)
  80d2f8:	df000017 	ldw	fp,0(sp)
  80d2fc:	dec00204 	addi	sp,sp,8
  80d300:	f800283a 	ret

0080d304 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80d304:	defff804 	addi	sp,sp,-32
  80d308:	dfc00715 	stw	ra,28(sp)
  80d30c:	df000615 	stw	fp,24(sp)
  80d310:	df000604 	addi	fp,sp,24
  80d314:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d318:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
  80d31c:	008020b4 	movhi	r2,130
  80d320:	10a97b44 	addi	r2,r2,-23059
  80d324:	10800003 	ldbu	r2,0(r2)
  80d328:	10803fcc 	andi	r2,r2,255
  80d32c:	10800058 	cmpnei	r2,r2,1
  80d330:	1000231e 	bne	r2,zero,80d3c0 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d334:	0005303a 	rdctl	r2,status
  80d338:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d33c:	e0fffd17 	ldw	r3,-12(fp)
  80d340:	00bfff84 	movi	r2,-2
  80d344:	1884703a 	and	r2,r3,r2
  80d348:	1001703a 	wrctl	status,r2
  
  return context;
  80d34c:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
  80d350:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
  80d354:	d0a03d17 	ldw	r2,-32524(gp)
  80d358:	1004c03a 	cmpne	r2,r2,zero
  80d35c:	1000051e 	bne	r2,zero,80d374 <__malloc_unlock+0x70>
  80d360:	e0bffe17 	ldw	r2,-8(fp)
  80d364:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d368:	e0bffc17 	ldw	r2,-16(fp)
  80d36c:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
  80d370:	00001306 	br	80d3c0 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
  80d374:	d0a03d17 	ldw	r2,-32524(gp)
  80d378:	10bfffc4 	addi	r2,r2,-1
  80d37c:	d0a03d15 	stw	r2,-32524(gp)
  80d380:	d0a03d17 	ldw	r2,-32524(gp)
  80d384:	1004c03a 	cmpne	r2,r2,zero
  80d388:	1000091e 	bne	r2,zero,80d3b0 <__malloc_unlock+0xac>
  {
    lockid = -1;
  80d38c:	00bfffc4 	movi	r2,-1
  80d390:	d0a00e15 	stw	r2,-32712(gp)
  80d394:	e0bffe17 	ldw	r2,-8(fp)
  80d398:	e0bffb15 	stw	r2,-20(fp)
  80d39c:	e0bffb17 	ldw	r2,-20(fp)
  80d3a0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
  80d3a4:	d1203e17 	ldw	r4,-32520(gp)
  80d3a8:	08133700 	call	813370 <OSSemPost>
  80d3ac:	00000406 	br	80d3c0 <__malloc_unlock+0xbc>
  80d3b0:	e0bffe17 	ldw	r2,-8(fp)
  80d3b4:	e0bffa15 	stw	r2,-24(fp)
  80d3b8:	e0bffa17 	ldw	r2,-24(fp)
  80d3bc:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
  80d3c0:	e037883a 	mov	sp,fp
  80d3c4:	dfc00117 	ldw	ra,4(sp)
  80d3c8:	df000017 	ldw	fp,0(sp)
  80d3cc:	dec00204 	addi	sp,sp,8
  80d3d0:	f800283a 	ret

0080d3d4 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80d3d4:	defff604 	addi	sp,sp,-40
  80d3d8:	dfc00915 	stw	ra,36(sp)
  80d3dc:	df000815 	stw	fp,32(sp)
  80d3e0:	df000804 	addi	fp,sp,32
  80d3e4:	e13ffc15 	stw	r4,-16(fp)
  80d3e8:	e17ffd15 	stw	r5,-12(fp)
  80d3ec:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d3f0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80d3f4:	e0bffe17 	ldw	r2,-8(fp)
  80d3f8:	1004c03a 	cmpne	r2,r2,zero
  80d3fc:	1000021e 	bne	r2,zero,80d408 <OSEventNameGet+0x34>
        return (0);
  80d400:	e03fff15 	stw	zero,-4(fp)
  80d404:	00003906 	br	80d4ec <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80d408:	e0bffc17 	ldw	r2,-16(fp)
  80d40c:	1004c03a 	cmpne	r2,r2,zero
  80d410:	1000051e 	bne	r2,zero,80d428 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  80d414:	e0fffe17 	ldw	r3,-8(fp)
  80d418:	00800104 	movi	r2,4
  80d41c:	18800005 	stb	r2,0(r3)
        return (0);
  80d420:	e03fff15 	stw	zero,-4(fp)
  80d424:	00003106 	br	80d4ec <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80d428:	e0bffd17 	ldw	r2,-12(fp)
  80d42c:	1004c03a 	cmpne	r2,r2,zero
  80d430:	1000051e 	bne	r2,zero,80d448 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80d434:	e0fffe17 	ldw	r3,-8(fp)
  80d438:	00800304 	movi	r2,12
  80d43c:	18800005 	stb	r2,0(r3)
        return (0);
  80d440:	e03fff15 	stw	zero,-4(fp)
  80d444:	00002906 	br	80d4ec <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80d448:	d0a04d03 	ldbu	r2,-32460(gp)
  80d44c:	10803fcc 	andi	r2,r2,255
  80d450:	1005003a 	cmpeq	r2,r2,zero
  80d454:	1000051e 	bne	r2,zero,80d46c <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
  80d458:	e0fffe17 	ldw	r3,-8(fp)
  80d45c:	00800444 	movi	r2,17
  80d460:	18800005 	stb	r2,0(r3)
        return (0);
  80d464:	e03fff15 	stw	zero,-4(fp)
  80d468:	00002006 	br	80d4ec <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
  80d46c:	e0bffc17 	ldw	r2,-16(fp)
  80d470:	10800003 	ldbu	r2,0(r2)
  80d474:	10803fcc 	andi	r2,r2,255
  80d478:	10bfffc4 	addi	r2,r2,-1
  80d47c:	10800128 	cmpgeui	r2,r2,4
  80d480:	1000161e 	bne	r2,zero,80d4dc <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d484:	0005303a 	rdctl	r2,status
  80d488:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d48c:	e0fff917 	ldw	r3,-28(fp)
  80d490:	00bfff84 	movi	r2,-2
  80d494:	1884703a 	and	r2,r3,r2
  80d498:	1001703a 	wrctl	status,r2
  
  return context;
  80d49c:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
  80d4a0:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
  80d4a4:	e0bffc17 	ldw	r2,-16(fp)
  80d4a8:	11400384 	addi	r5,r2,14
  80d4ac:	e13ffd17 	ldw	r4,-12(fp)
  80d4b0:	080ef580 	call	80ef58 <OS_StrCopy>
  80d4b4:	e0bffb05 	stb	r2,-20(fp)
  80d4b8:	e0bffa17 	ldw	r2,-24(fp)
  80d4bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d4c0:	e0bff817 	ldw	r2,-32(fp)
  80d4c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80d4c8:	e0bffe17 	ldw	r2,-8(fp)
  80d4cc:	10000005 	stb	zero,0(r2)
    return (len);
  80d4d0:	e0bffb03 	ldbu	r2,-20(fp)
  80d4d4:	e0bfff15 	stw	r2,-4(fp)
  80d4d8:	00000406 	br	80d4ec <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80d4dc:	e0fffe17 	ldw	r3,-8(fp)
  80d4e0:	00800044 	movi	r2,1
  80d4e4:	18800005 	stb	r2,0(r3)
             return (0);
  80d4e8:	e03fff15 	stw	zero,-4(fp)
  80d4ec:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
  80d4f0:	e037883a 	mov	sp,fp
  80d4f4:	dfc00117 	ldw	ra,4(sp)
  80d4f8:	df000017 	ldw	fp,0(sp)
  80d4fc:	dec00204 	addi	sp,sp,8
  80d500:	f800283a 	ret

0080d504 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
  80d504:	defff604 	addi	sp,sp,-40
  80d508:	dfc00915 	stw	ra,36(sp)
  80d50c:	df000815 	stw	fp,32(sp)
  80d510:	df000804 	addi	fp,sp,32
  80d514:	e13ffd15 	stw	r4,-12(fp)
  80d518:	e17ffe15 	stw	r5,-8(fp)
  80d51c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80d520:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80d524:	e0bfff17 	ldw	r2,-4(fp)
  80d528:	1005003a 	cmpeq	r2,r2,zero
  80d52c:	1000411e 	bne	r2,zero,80d634 <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
  80d530:	e0bffd17 	ldw	r2,-12(fp)
  80d534:	1004c03a 	cmpne	r2,r2,zero
  80d538:	1000041e 	bne	r2,zero,80d54c <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  80d53c:	e0ffff17 	ldw	r3,-4(fp)
  80d540:	00800104 	movi	r2,4
  80d544:	18800005 	stb	r2,0(r3)
        return;
  80d548:	00003a06 	br	80d634 <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80d54c:	e0bffe17 	ldw	r2,-8(fp)
  80d550:	1004c03a 	cmpne	r2,r2,zero
  80d554:	1000041e 	bne	r2,zero,80d568 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80d558:	e0ffff17 	ldw	r3,-4(fp)
  80d55c:	00800304 	movi	r2,12
  80d560:	18800005 	stb	r2,0(r3)
        return;
  80d564:	00003306 	br	80d634 <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80d568:	d0a04d03 	ldbu	r2,-32460(gp)
  80d56c:	10803fcc 	andi	r2,r2,255
  80d570:	1005003a 	cmpeq	r2,r2,zero
  80d574:	1000041e 	bne	r2,zero,80d588 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
  80d578:	e0ffff17 	ldw	r3,-4(fp)
  80d57c:	00800484 	movi	r2,18
  80d580:	18800005 	stb	r2,0(r3)
        return;
  80d584:	00002b06 	br	80d634 <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
  80d588:	e0bffd17 	ldw	r2,-12(fp)
  80d58c:	10800003 	ldbu	r2,0(r2)
  80d590:	10803fcc 	andi	r2,r2,255
  80d594:	10bfffc4 	addi	r2,r2,-1
  80d598:	10800128 	cmpgeui	r2,r2,4
  80d59c:	10000f1e 	bne	r2,zero,80d5dc <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d5a0:	0005303a 	rdctl	r2,status
  80d5a4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d5a8:	e0fffa17 	ldw	r3,-24(fp)
  80d5ac:	00bfff84 	movi	r2,-2
  80d5b0:	1884703a 	and	r2,r3,r2
  80d5b4:	1001703a 	wrctl	status,r2
  
  return context;
  80d5b8:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
  80d5bc:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
  80d5c0:	e13ffe17 	ldw	r4,-8(fp)
  80d5c4:	080efd80 	call	80efd8 <OS_StrLen>
  80d5c8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
  80d5cc:	e0bffc03 	ldbu	r2,-16(fp)
  80d5d0:	10800828 	cmpgeui	r2,r2,32
  80d5d4:	1000051e 	bne	r2,zero,80d5ec <OSEventNameSet+0xe8>
  80d5d8:	00000c06 	br	80d60c <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
  80d5dc:	e0ffff17 	ldw	r3,-4(fp)
  80d5e0:	00800044 	movi	r2,1
  80d5e4:	18800005 	stb	r2,0(r3)
             return;
  80d5e8:	00001206 	br	80d634 <OSEventNameSet+0x130>
  80d5ec:	e0bffb17 	ldw	r2,-20(fp)
  80d5f0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d5f4:	e0bff917 	ldw	r2,-28(fp)
  80d5f8:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
  80d5fc:	e0ffff17 	ldw	r3,-4(fp)
  80d600:	008002c4 	movi	r2,11
  80d604:	18800005 	stb	r2,0(r3)
        return;
  80d608:	00000a06 	br	80d634 <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
  80d60c:	e0bffd17 	ldw	r2,-12(fp)
  80d610:	11000384 	addi	r4,r2,14
  80d614:	e17ffe17 	ldw	r5,-8(fp)
  80d618:	080ef580 	call	80ef58 <OS_StrCopy>
  80d61c:	e0bffb17 	ldw	r2,-20(fp)
  80d620:	e0bff815 	stw	r2,-32(fp)
  80d624:	e0bff817 	ldw	r2,-32(fp)
  80d628:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80d62c:	e0bfff17 	ldw	r2,-4(fp)
  80d630:	10000005 	stb	zero,0(r2)
}
  80d634:	e037883a 	mov	sp,fp
  80d638:	dfc00117 	ldw	ra,4(sp)
  80d63c:	df000017 	ldw	fp,0(sp)
  80d640:	dec00204 	addi	sp,sp,8
  80d644:	f800283a 	ret

0080d648 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
  80d648:	deffe704 	addi	sp,sp,-100
  80d64c:	dfc01815 	stw	ra,96(sp)
  80d650:	df001715 	stw	fp,92(sp)
  80d654:	df001704 	addi	fp,sp,92
  80d658:	e13ff615 	stw	r4,-40(fp)
  80d65c:	e17ff715 	stw	r5,-36(fp)
  80d660:	e1bff815 	stw	r6,-32(fp)
  80d664:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
  80d668:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
  80d66c:	e0800217 	ldw	r2,8(fp)
  80d670:	1004c03a 	cmpne	r2,r2,zero
  80d674:	1000021e 	bne	r2,zero,80d680 <OSEventPendMulti+0x38>
        return (0);
  80d678:	e03fff15 	stw	zero,-4(fp)
  80d67c:	00019906 	br	80dce4 <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
  80d680:	e0bff617 	ldw	r2,-40(fp)
  80d684:	1004c03a 	cmpne	r2,r2,zero
  80d688:	1000051e 	bne	r2,zero,80d6a0 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
  80d68c:	e0c00217 	ldw	r3,8(fp)
  80d690:	00800104 	movi	r2,4
  80d694:	18800005 	stb	r2,0(r3)
        return (0);
  80d698:	e03fff15 	stw	zero,-4(fp)
  80d69c:	00019106 	br	80dce4 <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
  80d6a0:	e0bff717 	ldw	r2,-36(fp)
  80d6a4:	1004c03a 	cmpne	r2,r2,zero
  80d6a8:	1000051e 	bne	r2,zero,80d6c0 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
  80d6ac:	e0c00217 	ldw	r3,8(fp)
  80d6b0:	00800104 	movi	r2,4
  80d6b4:	18800005 	stb	r2,0(r3)
        return (0);
  80d6b8:	e03fff15 	stw	zero,-4(fp)
  80d6bc:	00018906 	br	80dce4 <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
  80d6c0:	e0bff817 	ldw	r2,-32(fp)
  80d6c4:	1004c03a 	cmpne	r2,r2,zero
  80d6c8:	1000051e 	bne	r2,zero,80d6e0 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
  80d6cc:	e0c00217 	ldw	r3,8(fp)
  80d6d0:	00800104 	movi	r2,4
  80d6d4:	18800005 	stb	r2,0(r3)
        return (0);
  80d6d8:	e03fff15 	stw	zero,-4(fp)
  80d6dc:	00018106 	br	80dce4 <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
  80d6e0:	e0bff717 	ldw	r2,-36(fp)
  80d6e4:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
  80d6e8:	e0bff617 	ldw	r2,-40(fp)
  80d6ec:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
  80d6f0:	e0bff517 	ldw	r2,-44(fp)
  80d6f4:	10800017 	ldw	r2,0(r2)
  80d6f8:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
  80d6fc:	00001806 	br	80d760 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
  80d700:	e0bff417 	ldw	r2,-48(fp)
  80d704:	10800003 	ldbu	r2,0(r2)
  80d708:	10803fcc 	andi	r2,r2,255
  80d70c:	e0bffe15 	stw	r2,-8(fp)
  80d710:	e0fffe17 	ldw	r3,-8(fp)
  80d714:	188000a0 	cmpeqi	r2,r3,2
  80d718:	10000b1e 	bne	r2,zero,80d748 <OSEventPendMulti+0x100>
  80d71c:	e0fffe17 	ldw	r3,-8(fp)
  80d720:	188000e0 	cmpeqi	r2,r3,3
  80d724:	1000081e 	bne	r2,zero,80d748 <OSEventPendMulti+0x100>
  80d728:	e0fffe17 	ldw	r3,-8(fp)
  80d72c:	18800060 	cmpeqi	r2,r3,1
  80d730:	1000051e 	bne	r2,zero,80d748 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
  80d734:	e0c00217 	ldw	r3,8(fp)
  80d738:	00800044 	movi	r2,1
  80d73c:	18800005 	stb	r2,0(r3)
                 return (0);
  80d740:	e03fff15 	stw	zero,-4(fp)
  80d744:	00016706 	br	80dce4 <OSEventPendMulti+0x69c>
        }
        pevents++;
  80d748:	e0bff517 	ldw	r2,-44(fp)
  80d74c:	10800104 	addi	r2,r2,4
  80d750:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80d754:	e0bff517 	ldw	r2,-44(fp)
  80d758:	10800017 	ldw	r2,0(r2)
  80d75c:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
  80d760:	e0bff417 	ldw	r2,-48(fp)
  80d764:	1004c03a 	cmpne	r2,r2,zero
  80d768:	103fe51e 	bne	r2,zero,80d700 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
  80d76c:	d0a04d03 	ldbu	r2,-32460(gp)
  80d770:	10803fcc 	andi	r2,r2,255
  80d774:	1005003a 	cmpeq	r2,r2,zero
  80d778:	1000051e 	bne	r2,zero,80d790 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
  80d77c:	e0c00217 	ldw	r3,8(fp)
  80d780:	00800084 	movi	r2,2
  80d784:	18800005 	stb	r2,0(r3)
        return (0);
  80d788:	e03fff15 	stw	zero,-4(fp)
  80d78c:	00015506 	br	80dce4 <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
  80d790:	d0a03f03 	ldbu	r2,-32516(gp)
  80d794:	10803fcc 	andi	r2,r2,255
  80d798:	1005003a 	cmpeq	r2,r2,zero
  80d79c:	1000051e 	bne	r2,zero,80d7b4 <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
  80d7a0:	e0c00217 	ldw	r3,8(fp)
  80d7a4:	00800344 	movi	r2,13
  80d7a8:	18800005 	stb	r2,0(r3)
        return (0);
  80d7ac:	e03fff15 	stw	zero,-4(fp)
  80d7b0:	00014c06 	br	80dce4 <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80d7b4:	0005303a 	rdctl	r2,status
  80d7b8:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80d7bc:	e0ffef17 	ldw	r3,-68(fp)
  80d7c0:	00bfff84 	movi	r2,-2
  80d7c4:	1884703a 	and	r2,r3,r2
  80d7c8:	1001703a 	wrctl	status,r2
  
  return context;
  80d7cc:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
  80d7d0:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
  80d7d4:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
  80d7d8:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
  80d7dc:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
  80d7e0:	e0bff617 	ldw	r2,-40(fp)
  80d7e4:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
  80d7e8:	e0bff517 	ldw	r2,-44(fp)
  80d7ec:	10800017 	ldw	r2,0(r2)
  80d7f0:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80d7f4:	00008f06 	br	80da34 <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
  80d7f8:	e0bff417 	ldw	r2,-48(fp)
  80d7fc:	10800003 	ldbu	r2,0(r2)
  80d800:	10803fcc 	andi	r2,r2,255
  80d804:	e0bffd15 	stw	r2,-12(fp)
  80d808:	e0fffd17 	ldw	r3,-12(fp)
  80d80c:	188000a0 	cmpeqi	r2,r3,2
  80d810:	1000441e 	bne	r2,zero,80d924 <OSEventPendMulti+0x2dc>
  80d814:	e0fffd17 	ldw	r3,-12(fp)
  80d818:	188000e0 	cmpeqi	r2,r3,3
  80d81c:	1000041e 	bne	r2,zero,80d830 <OSEventPendMulti+0x1e8>
  80d820:	e0fffd17 	ldw	r3,-12(fp)
  80d824:	18800060 	cmpeqi	r2,r3,1
  80d828:	1000211e 	bne	r2,zero,80d8b0 <OSEventPendMulti+0x268>
  80d82c:	00006f06 	br	80d9ec <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
  80d830:	e0bff417 	ldw	r2,-48(fp)
  80d834:	1080020b 	ldhu	r2,8(r2)
  80d838:	10bfffcc 	andi	r2,r2,65535
  80d83c:	1005003a 	cmpeq	r2,r2,zero
  80d840:	1000171e 	bne	r2,zero,80d8a0 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
  80d844:	e0bff417 	ldw	r2,-48(fp)
  80d848:	1080020b 	ldhu	r2,8(r2)
  80d84c:	10bfffc4 	addi	r2,r2,-1
  80d850:	1007883a 	mov	r3,r2
  80d854:	e0bff417 	ldw	r2,-48(fp)
  80d858:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
  80d85c:	e0fff717 	ldw	r3,-36(fp)
  80d860:	e0bff417 	ldw	r2,-48(fp)
  80d864:	18800015 	stw	r2,0(r3)
  80d868:	e0bff717 	ldw	r2,-36(fp)
  80d86c:	10800104 	addi	r2,r2,4
  80d870:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
  80d874:	00800044 	movi	r2,1
  80d878:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
  80d87c:	e0bff817 	ldw	r2,-32(fp)
  80d880:	10000015 	stw	zero,0(r2)
  80d884:	e0bff817 	ldw	r2,-32(fp)
  80d888:	10800104 	addi	r2,r2,4
  80d88c:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
  80d890:	e0bff18b 	ldhu	r2,-58(fp)
  80d894:	10800044 	addi	r2,r2,1
  80d898:	e0bff18d 	sth	r2,-58(fp)
  80d89c:	00005f06 	br	80da1c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
  80d8a0:	e0bff103 	ldbu	r2,-60(fp)
  80d8a4:	10800054 	ori	r2,r2,1
  80d8a8:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80d8ac:	00005b06 	br	80da1c <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
  80d8b0:	e0bff417 	ldw	r2,-48(fp)
  80d8b4:	10800117 	ldw	r2,4(r2)
  80d8b8:	1005003a 	cmpeq	r2,r2,zero
  80d8bc:	1000151e 	bne	r2,zero,80d914 <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
  80d8c0:	e0bff417 	ldw	r2,-48(fp)
  80d8c4:	10c00117 	ldw	r3,4(r2)
  80d8c8:	e0bff817 	ldw	r2,-32(fp)
  80d8cc:	10c00015 	stw	r3,0(r2)
  80d8d0:	e0bff817 	ldw	r2,-32(fp)
  80d8d4:	10800104 	addi	r2,r2,4
  80d8d8:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
  80d8dc:	e0bff417 	ldw	r2,-48(fp)
  80d8e0:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
  80d8e4:	e0fff717 	ldw	r3,-36(fp)
  80d8e8:	e0bff417 	ldw	r2,-48(fp)
  80d8ec:	18800015 	stw	r2,0(r3)
  80d8f0:	e0bff717 	ldw	r2,-36(fp)
  80d8f4:	10800104 	addi	r2,r2,4
  80d8f8:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
  80d8fc:	00800044 	movi	r2,1
  80d900:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80d904:	e0bff18b 	ldhu	r2,-58(fp)
  80d908:	10800044 	addi	r2,r2,1
  80d90c:	e0bff18d 	sth	r2,-58(fp)
  80d910:	00004206 	br	80da1c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
  80d914:	e0bff103 	ldbu	r2,-60(fp)
  80d918:	10800094 	ori	r2,r2,2
  80d91c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80d920:	00003e06 	br	80da1c <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
  80d924:	e0bff417 	ldw	r2,-48(fp)
  80d928:	10800117 	ldw	r2,4(r2)
  80d92c:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
  80d930:	e0bff317 	ldw	r2,-52(fp)
  80d934:	1080058b 	ldhu	r2,22(r2)
  80d938:	10bfffcc 	andi	r2,r2,65535
  80d93c:	1005003a 	cmpeq	r2,r2,zero
  80d940:	1000261e 	bne	r2,zero,80d9dc <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
  80d944:	e0bff317 	ldw	r2,-52(fp)
  80d948:	11000417 	ldw	r4,16(r2)
  80d94c:	20c00017 	ldw	r3,0(r4)
  80d950:	e0bff817 	ldw	r2,-32(fp)
  80d954:	10c00015 	stw	r3,0(r2)
  80d958:	e0bff817 	ldw	r2,-32(fp)
  80d95c:	10800104 	addi	r2,r2,4
  80d960:	e0bff815 	stw	r2,-32(fp)
  80d964:	20c00104 	addi	r3,r4,4
  80d968:	e0bff317 	ldw	r2,-52(fp)
  80d96c:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
  80d970:	e0bff317 	ldw	r2,-52(fp)
  80d974:	10c00417 	ldw	r3,16(r2)
  80d978:	e0bff317 	ldw	r2,-52(fp)
  80d97c:	10800217 	ldw	r2,8(r2)
  80d980:	1880041e 	bne	r3,r2,80d994 <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
  80d984:	e0bff317 	ldw	r2,-52(fp)
  80d988:	10c00117 	ldw	r3,4(r2)
  80d98c:	e0bff317 	ldw	r2,-52(fp)
  80d990:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
  80d994:	e0bff317 	ldw	r2,-52(fp)
  80d998:	1080058b 	ldhu	r2,22(r2)
  80d99c:	10bfffc4 	addi	r2,r2,-1
  80d9a0:	1007883a 	mov	r3,r2
  80d9a4:	e0bff317 	ldw	r2,-52(fp)
  80d9a8:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
  80d9ac:	e0fff717 	ldw	r3,-36(fp)
  80d9b0:	e0bff417 	ldw	r2,-48(fp)
  80d9b4:	18800015 	stw	r2,0(r3)
  80d9b8:	e0bff717 	ldw	r2,-36(fp)
  80d9bc:	10800104 	addi	r2,r2,4
  80d9c0:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
  80d9c4:	00800044 	movi	r2,1
  80d9c8:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
  80d9cc:	e0bff18b 	ldhu	r2,-58(fp)
  80d9d0:	10800044 	addi	r2,r2,1
  80d9d4:	e0bff18d 	sth	r2,-58(fp)
  80d9d8:	00001006 	br	80da1c <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
  80d9dc:	e0bff103 	ldbu	r2,-60(fp)
  80d9e0:	10800114 	ori	r2,r2,4
  80d9e4:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
  80d9e8:	00000c06 	br	80da1c <OSEventPendMulti+0x3d4>
  80d9ec:	e0bff017 	ldw	r2,-64(fp)
  80d9f0:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80d9f4:	e0bfee17 	ldw	r2,-72(fp)
  80d9f8:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
  80d9fc:	e0bff717 	ldw	r2,-36(fp)
  80da00:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
  80da04:	e0c00217 	ldw	r3,8(fp)
  80da08:	00800044 	movi	r2,1
  80da0c:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
  80da10:	e0bff18b 	ldhu	r2,-58(fp)
  80da14:	e0bfff15 	stw	r2,-4(fp)
  80da18:	0000b206 	br	80dce4 <OSEventPendMulti+0x69c>
        }
        pevents++;
  80da1c:	e0bff517 	ldw	r2,-44(fp)
  80da20:	10800104 	addi	r2,r2,4
  80da24:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
  80da28:	e0bff517 	ldw	r2,-44(fp)
  80da2c:	10800017 	ldw	r2,0(r2)
  80da30:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
  80da34:	e0bff417 	ldw	r2,-48(fp)
  80da38:	1004c03a 	cmpne	r2,r2,zero
  80da3c:	103f6e1e 	bne	r2,zero,80d7f8 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
  80da40:	e0bff203 	ldbu	r2,-56(fp)
  80da44:	10800058 	cmpnei	r2,r2,1
  80da48:	10000b1e 	bne	r2,zero,80da78 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
  80da4c:	e0bff717 	ldw	r2,-36(fp)
  80da50:	10000015 	stw	zero,0(r2)
  80da54:	e0bff017 	ldw	r2,-64(fp)
  80da58:	e0bfed15 	stw	r2,-76(fp)
  80da5c:	e0bfed17 	ldw	r2,-76(fp)
  80da60:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
  80da64:	e0800217 	ldw	r2,8(fp)
  80da68:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
  80da6c:	e0fff18b 	ldhu	r3,-58(fp)
  80da70:	e0ffff15 	stw	r3,-4(fp)
  80da74:	00009b06 	br	80dce4 <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
  80da78:	d1204e17 	ldw	r4,-32456(gp)
  80da7c:	d0a04e17 	ldw	r2,-32456(gp)
  80da80:	10c00c03 	ldbu	r3,48(r2)
  80da84:	e0bff103 	ldbu	r2,-60(fp)
  80da88:	1884b03a 	or	r2,r3,r2
  80da8c:	1007883a 	mov	r3,r2
  80da90:	00bfe004 	movi	r2,-128
  80da94:	1884b03a 	or	r2,r3,r2
  80da98:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  80da9c:	d0a04e17 	ldw	r2,-32456(gp)
  80daa0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
  80daa4:	d0e04e17 	ldw	r3,-32456(gp)
  80daa8:	e0bff90b 	ldhu	r2,-28(fp)
  80daac:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
  80dab0:	e13ff617 	ldw	r4,-40(fp)
  80dab4:	080e6780 	call	80e678 <OS_EventTaskWaitMulti>
  80dab8:	e0bff017 	ldw	r2,-64(fp)
  80dabc:	e0bfec15 	stw	r2,-80(fp)
  80dac0:	e0bfec17 	ldw	r2,-80(fp)
  80dac4:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
  80dac8:	080ee140 	call	80ee14 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dacc:	0005303a 	rdctl	r2,status
  80dad0:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dad4:	e0ffeb17 	ldw	r3,-84(fp)
  80dad8:	00bfff84 	movi	r2,-2
  80dadc:	1884703a 	and	r2,r3,r2
  80dae0:	1001703a 	wrctl	status,r2
  
  return context;
  80dae4:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
  80dae8:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
  80daec:	d0a04e17 	ldw	r2,-32456(gp)
  80daf0:	10800c43 	ldbu	r2,49(r2)
  80daf4:	10803fcc 	andi	r2,r2,255
  80daf8:	e0bffc15 	stw	r2,-16(fp)
  80dafc:	e0fffc17 	ldw	r3,-16(fp)
  80db00:	1805003a 	cmpeq	r2,r3,zero
  80db04:	1000041e 	bne	r2,zero,80db18 <OSEventPendMulti+0x4d0>
  80db08:	e0fffc17 	ldw	r3,-16(fp)
  80db0c:	188000a0 	cmpeqi	r2,r3,2
  80db10:	1000011e 	bne	r2,zero,80db18 <OSEventPendMulti+0x4d0>
  80db14:	00001906 	br	80db7c <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
  80db18:	d0a04e17 	ldw	r2,-32456(gp)
  80db1c:	10800717 	ldw	r2,28(r2)
  80db20:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
  80db24:	e0bff417 	ldw	r2,-48(fp)
  80db28:	1005003a 	cmpeq	r2,r2,zero
  80db2c:	10000c1e 	bne	r2,zero,80db60 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
  80db30:	e0fff717 	ldw	r3,-36(fp)
  80db34:	e0bff417 	ldw	r2,-48(fp)
  80db38:	18800015 	stw	r2,0(r3)
  80db3c:	e0bff717 	ldw	r2,-36(fp)
  80db40:	10800104 	addi	r2,r2,4
  80db44:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
  80db48:	e0bff717 	ldw	r2,-36(fp)
  80db4c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
  80db50:	e0bff18b 	ldhu	r2,-58(fp)
  80db54:	10800044 	addi	r2,r2,1
  80db58:	e0bff18d 	sth	r2,-58(fp)
  80db5c:	00000a06 	br	80db88 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
  80db60:	d0a04e17 	ldw	r2,-32456(gp)
  80db64:	00c00044 	movi	r3,1
  80db68:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80db6c:	d1204e17 	ldw	r4,-32456(gp)
  80db70:	e17ff617 	ldw	r5,-40(fp)
  80db74:	080e8840 	call	80e884 <OS_EventTaskRemoveMulti>
             }
			 break;
  80db78:	00000306 	br	80db88 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
  80db7c:	d1204e17 	ldw	r4,-32456(gp)
  80db80:	e17ff617 	ldw	r5,-40(fp)
  80db84:	080e8840 	call	80e884 <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
  80db88:	d0a04e17 	ldw	r2,-32456(gp)
  80db8c:	10800c43 	ldbu	r2,49(r2)
  80db90:	10803fcc 	andi	r2,r2,255
  80db94:	e0bffb15 	stw	r2,-20(fp)
  80db98:	e0fffb17 	ldw	r3,-20(fp)
  80db9c:	1805003a 	cmpeq	r2,r3,zero
  80dba0:	1000041e 	bne	r2,zero,80dbb4 <OSEventPendMulti+0x56c>
  80dba4:	e0fffb17 	ldw	r3,-20(fp)
  80dba8:	188000a0 	cmpeqi	r2,r3,2
  80dbac:	10002c1e 	bne	r2,zero,80dc60 <OSEventPendMulti+0x618>
  80dbb0:	00003406 	br	80dc84 <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
  80dbb4:	e0bff417 	ldw	r2,-48(fp)
  80dbb8:	10800003 	ldbu	r2,0(r2)
  80dbbc:	10803fcc 	andi	r2,r2,255
  80dbc0:	e0bffa15 	stw	r2,-24(fp)
  80dbc4:	e0fffa17 	ldw	r3,-24(fp)
  80dbc8:	18800050 	cmplti	r2,r3,1
  80dbcc:	1000151e 	bne	r2,zero,80dc24 <OSEventPendMulti+0x5dc>
  80dbd0:	e0fffa17 	ldw	r3,-24(fp)
  80dbd4:	188000d0 	cmplti	r2,r3,3
  80dbd8:	10000a1e 	bne	r2,zero,80dc04 <OSEventPendMulti+0x5bc>
  80dbdc:	e0fffa17 	ldw	r3,-24(fp)
  80dbe0:	188000e0 	cmpeqi	r2,r3,3
  80dbe4:	1000011e 	bne	r2,zero,80dbec <OSEventPendMulti+0x5a4>
  80dbe8:	00000e06 	br	80dc24 <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
  80dbec:	e0bff817 	ldw	r2,-32(fp)
  80dbf0:	10000015 	stw	zero,0(r2)
  80dbf4:	e0bff817 	ldw	r2,-32(fp)
  80dbf8:	10800104 	addi	r2,r2,4
  80dbfc:	e0bff815 	stw	r2,-32(fp)
                      break;
  80dc00:	00001406 	br	80dc54 <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
  80dc04:	d0a04e17 	ldw	r2,-32456(gp)
  80dc08:	10c00917 	ldw	r3,36(r2)
  80dc0c:	e0bff817 	ldw	r2,-32(fp)
  80dc10:	10c00015 	stw	r3,0(r2)
  80dc14:	e0bff817 	ldw	r2,-32(fp)
  80dc18:	10800104 	addi	r2,r2,4
  80dc1c:	e0bff815 	stw	r2,-32(fp)
                      break;
  80dc20:	00000c06 	br	80dc54 <OSEventPendMulti+0x60c>
  80dc24:	e0bff017 	ldw	r2,-64(fp)
  80dc28:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dc2c:	e0bfea17 	ldw	r2,-88(fp)
  80dc30:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
  80dc34:	e0bff717 	ldw	r2,-36(fp)
  80dc38:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
  80dc3c:	e0c00217 	ldw	r3,8(fp)
  80dc40:	00800044 	movi	r2,1
  80dc44:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
  80dc48:	e0bff18b 	ldhu	r2,-58(fp)
  80dc4c:	e0bfff15 	stw	r2,-4(fp)
  80dc50:	00002406 	br	80dce4 <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
  80dc54:	e0800217 	ldw	r2,8(fp)
  80dc58:	10000005 	stb	zero,0(r2)
             break;
  80dc5c:	00001106 	br	80dca4 <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
  80dc60:	e0bff817 	ldw	r2,-32(fp)
  80dc64:	10000015 	stw	zero,0(r2)
  80dc68:	e0bff817 	ldw	r2,-32(fp)
  80dc6c:	10800104 	addi	r2,r2,4
  80dc70:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
  80dc74:	e0c00217 	ldw	r3,8(fp)
  80dc78:	00800384 	movi	r2,14
  80dc7c:	18800005 	stb	r2,0(r3)
             break;
  80dc80:	00000806 	br	80dca4 <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
  80dc84:	e0bff817 	ldw	r2,-32(fp)
  80dc88:	10000015 	stw	zero,0(r2)
  80dc8c:	e0bff817 	ldw	r2,-32(fp)
  80dc90:	10800104 	addi	r2,r2,4
  80dc94:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
  80dc98:	e0c00217 	ldw	r3,8(fp)
  80dc9c:	00800284 	movi	r2,10
  80dca0:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
  80dca4:	d0a04e17 	ldw	r2,-32456(gp)
  80dca8:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
  80dcac:	d0a04e17 	ldw	r2,-32456(gp)
  80dcb0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
  80dcb4:	d0a04e17 	ldw	r2,-32456(gp)
  80dcb8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  80dcbc:	d0a04e17 	ldw	r2,-32456(gp)
  80dcc0:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
  80dcc4:	d0a04e17 	ldw	r2,-32456(gp)
  80dcc8:	10000915 	stw	zero,36(r2)
  80dccc:	e0bff017 	ldw	r2,-64(fp)
  80dcd0:	e0bfe915 	stw	r2,-92(fp)
  80dcd4:	e0bfe917 	ldw	r2,-92(fp)
  80dcd8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
  80dcdc:	e0fff18b 	ldhu	r3,-58(fp)
  80dce0:	e0ffff15 	stw	r3,-4(fp)
  80dce4:	e0bfff17 	ldw	r2,-4(fp)
}
  80dce8:	e037883a 	mov	sp,fp
  80dcec:	dfc00117 	ldw	ra,4(sp)
  80dcf0:	df000017 	ldw	fp,0(sp)
  80dcf4:	dec00204 	addi	sp,sp,8
  80dcf8:	f800283a 	ret

0080dcfc <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
  80dcfc:	defffe04 	addi	sp,sp,-8
  80dd00:	dfc00115 	stw	ra,4(sp)
  80dd04:	df000015 	stw	fp,0(sp)
  80dd08:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
  80dd0c:	0817db80 	call	817db8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
  80dd10:	080eacc0 	call	80eacc <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
  80dd14:	080eb100 	call	80eb10 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
  80dd18:	080ec740 	call	80ec74 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
  80dd1c:	080e9f00 	call	80e9f0 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
  80dd20:	0810d240 	call	810d24 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
  80dd24:	08116fc0 	call	8116fc <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
  80dd28:	0812a580 	call	812a58 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
  80dd2c:	080eb7c0 	call	80eb7c <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
  80dd30:	080ebf80 	call	80ebf8 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
  80dd34:	0817dd40 	call	817dd4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
  80dd38:	080f4fc0 	call	80f4fc <OSDebugInit>
#endif
}
  80dd3c:	e037883a 	mov	sp,fp
  80dd40:	dfc00117 	ldw	ra,4(sp)
  80dd44:	df000017 	ldw	fp,0(sp)
  80dd48:	dec00204 	addi	sp,sp,8
  80dd4c:	f800283a 	ret

0080dd50 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
  80dd50:	defffc04 	addi	sp,sp,-16
  80dd54:	df000315 	stw	fp,12(sp)
  80dd58:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80dd5c:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
  80dd60:	d0a03f43 	ldbu	r2,-32515(gp)
  80dd64:	10803fcc 	andi	r2,r2,255
  80dd68:	10800058 	cmpnei	r2,r2,1
  80dd6c:	1000131e 	bne	r2,zero,80ddbc <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80dd70:	0005303a 	rdctl	r2,status
  80dd74:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80dd78:	e0fffe17 	ldw	r3,-8(fp)
  80dd7c:	00bfff84 	movi	r2,-2
  80dd80:	1884703a 	and	r2,r3,r2
  80dd84:	1001703a 	wrctl	status,r2
  
  return context;
  80dd88:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80dd8c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
  80dd90:	d0a04d03 	ldbu	r2,-32460(gp)
  80dd94:	10803fcc 	andi	r2,r2,255
  80dd98:	10803fe0 	cmpeqi	r2,r2,255
  80dd9c:	1000031e 	bne	r2,zero,80ddac <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
  80dda0:	d0a04d03 	ldbu	r2,-32460(gp)
  80dda4:	10800044 	addi	r2,r2,1
  80dda8:	d0a04d05 	stb	r2,-32460(gp)
  80ddac:	e0bfff17 	ldw	r2,-4(fp)
  80ddb0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ddb4:	e0bffd17 	ldw	r2,-12(fp)
  80ddb8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
  80ddbc:	e037883a 	mov	sp,fp
  80ddc0:	df000017 	ldw	fp,0(sp)
  80ddc4:	dec00104 	addi	sp,sp,4
  80ddc8:	f800283a 	ret

0080ddcc <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
  80ddcc:	defffb04 	addi	sp,sp,-20
  80ddd0:	dfc00415 	stw	ra,16(sp)
  80ddd4:	df000315 	stw	fp,12(sp)
  80ddd8:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80dddc:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
  80dde0:	d0a03f43 	ldbu	r2,-32515(gp)
  80dde4:	10803fcc 	andi	r2,r2,255
  80dde8:	10800058 	cmpnei	r2,r2,1
  80ddec:	1000321e 	bne	r2,zero,80deb8 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ddf0:	0005303a 	rdctl	r2,status
  80ddf4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ddf8:	e0fffe17 	ldw	r3,-8(fp)
  80ddfc:	00bfff84 	movi	r2,-2
  80de00:	1884703a 	and	r2,r3,r2
  80de04:	1001703a 	wrctl	status,r2
  
  return context;
  80de08:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80de0c:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
  80de10:	d0a04d03 	ldbu	r2,-32460(gp)
  80de14:	10803fcc 	andi	r2,r2,255
  80de18:	1005003a 	cmpeq	r2,r2,zero
  80de1c:	1000031e 	bne	r2,zero,80de2c <OSIntExit+0x60>
            OSIntNesting--;
  80de20:	d0a04d03 	ldbu	r2,-32460(gp)
  80de24:	10bfffc4 	addi	r2,r2,-1
  80de28:	d0a04d05 	stb	r2,-32460(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
  80de2c:	d0a04d03 	ldbu	r2,-32460(gp)
  80de30:	10803fcc 	andi	r2,r2,255
  80de34:	1004c03a 	cmpne	r2,r2,zero
  80de38:	10001b1e 	bne	r2,zero,80dea8 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
  80de3c:	d0a03f03 	ldbu	r2,-32516(gp)
  80de40:	10803fcc 	andi	r2,r2,255
  80de44:	1004c03a 	cmpne	r2,r2,zero
  80de48:	1000171e 	bne	r2,zero,80dea8 <OSIntExit+0xdc>
                OS_SchedNew();
  80de4c:	080eee80 	call	80eee8 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
  80de50:	d0a04103 	ldbu	r2,-32508(gp)
  80de54:	d0e04143 	ldbu	r3,-32507(gp)
  80de58:	11003fcc 	andi	r4,r2,255
  80de5c:	18803fcc 	andi	r2,r3,255
  80de60:	20801126 	beq	r4,r2,80dea8 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
  80de64:	d0a04103 	ldbu	r2,-32508(gp)
  80de68:	10803fcc 	andi	r2,r2,255
  80de6c:	00c020b4 	movhi	r3,130
  80de70:	18fe1004 	addi	r3,r3,-1984
  80de74:	1085883a 	add	r2,r2,r2
  80de78:	1085883a 	add	r2,r2,r2
  80de7c:	10c5883a 	add	r2,r2,r3
  80de80:	10800017 	ldw	r2,0(r2)
  80de84:	d0a04915 	stw	r2,-32476(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
  80de88:	d0e04917 	ldw	r3,-32476(gp)
  80de8c:	18800e17 	ldw	r2,56(r3)
  80de90:	10800044 	addi	r2,r2,1
  80de94:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
  80de98:	d0a04417 	ldw	r2,-32496(gp)
  80de9c:	10800044 	addi	r2,r2,1
  80dea0:	d0a04415 	stw	r2,-32496(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
  80dea4:	08179440 	call	817944 <OSCtxSw>
  80dea8:	e0bfff17 	ldw	r2,-4(fp)
  80deac:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80deb0:	e0bffd17 	ldw	r2,-12(fp)
  80deb4:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80deb8:	e037883a 	mov	sp,fp
  80debc:	dfc00117 	ldw	ra,4(sp)
  80dec0:	df000017 	ldw	fp,0(sp)
  80dec4:	dec00204 	addi	sp,sp,8
  80dec8:	f800283a 	ret

0080decc <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
  80decc:	defffc04 	addi	sp,sp,-16
  80ded0:	df000315 	stw	fp,12(sp)
  80ded4:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ded8:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
  80dedc:	d0a03f43 	ldbu	r2,-32515(gp)
  80dee0:	10803fcc 	andi	r2,r2,255
  80dee4:	10800058 	cmpnei	r2,r2,1
  80dee8:	1000171e 	bne	r2,zero,80df48 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80deec:	0005303a 	rdctl	r2,status
  80def0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80def4:	e0fffe17 	ldw	r3,-8(fp)
  80def8:	00bfff84 	movi	r2,-2
  80defc:	1884703a 	and	r2,r3,r2
  80df00:	1001703a 	wrctl	status,r2
  
  return context;
  80df04:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80df08:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
  80df0c:	d0a04d03 	ldbu	r2,-32460(gp)
  80df10:	10803fcc 	andi	r2,r2,255
  80df14:	1004c03a 	cmpne	r2,r2,zero
  80df18:	1000071e 	bne	r2,zero,80df38 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
  80df1c:	d0a03f03 	ldbu	r2,-32516(gp)
  80df20:	10803fcc 	andi	r2,r2,255
  80df24:	10803fe0 	cmpeqi	r2,r2,255
  80df28:	1000031e 	bne	r2,zero,80df38 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
  80df2c:	d0a03f03 	ldbu	r2,-32516(gp)
  80df30:	10800044 	addi	r2,r2,1
  80df34:	d0a03f05 	stb	r2,-32516(gp)
  80df38:	e0bfff17 	ldw	r2,-4(fp)
  80df3c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80df40:	e0bffd17 	ldw	r2,-12(fp)
  80df44:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
  80df48:	e037883a 	mov	sp,fp
  80df4c:	df000017 	ldw	fp,0(sp)
  80df50:	dec00104 	addi	sp,sp,4
  80df54:	f800283a 	ret

0080df58 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
  80df58:	defff804 	addi	sp,sp,-32
  80df5c:	dfc00715 	stw	ra,28(sp)
  80df60:	df000615 	stw	fp,24(sp)
  80df64:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80df68:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
  80df6c:	d0a03f43 	ldbu	r2,-32515(gp)
  80df70:	10803fcc 	andi	r2,r2,255
  80df74:	10800058 	cmpnei	r2,r2,1
  80df78:	10002b1e 	bne	r2,zero,80e028 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80df7c:	0005303a 	rdctl	r2,status
  80df80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80df84:	e0fffe17 	ldw	r3,-8(fp)
  80df88:	00bfff84 	movi	r2,-2
  80df8c:	1884703a 	and	r2,r3,r2
  80df90:	1001703a 	wrctl	status,r2
  
  return context;
  80df94:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
  80df98:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
  80df9c:	d0a03f03 	ldbu	r2,-32516(gp)
  80dfa0:	10803fcc 	andi	r2,r2,255
  80dfa4:	1005003a 	cmpeq	r2,r2,zero
  80dfa8:	10001b1e 	bne	r2,zero,80e018 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
  80dfac:	d0a03f03 	ldbu	r2,-32516(gp)
  80dfb0:	10bfffc4 	addi	r2,r2,-1
  80dfb4:	d0a03f05 	stb	r2,-32516(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
  80dfb8:	d0a03f03 	ldbu	r2,-32516(gp)
  80dfbc:	10803fcc 	andi	r2,r2,255
  80dfc0:	1004c03a 	cmpne	r2,r2,zero
  80dfc4:	10000f1e 	bne	r2,zero,80e004 <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
  80dfc8:	d0a04d03 	ldbu	r2,-32460(gp)
  80dfcc:	10803fcc 	andi	r2,r2,255
  80dfd0:	1004c03a 	cmpne	r2,r2,zero
  80dfd4:	1000061e 	bne	r2,zero,80dff0 <OSSchedUnlock+0x98>
  80dfd8:	e0bfff17 	ldw	r2,-4(fp)
  80dfdc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80dfe0:	e0bffd17 	ldw	r2,-12(fp)
  80dfe4:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
  80dfe8:	080ee140 	call	80ee14 <OS_Sched>
  80dfec:	00000e06 	br	80e028 <OSSchedUnlock+0xd0>
  80dff0:	e0bfff17 	ldw	r2,-4(fp)
  80dff4:	e0bffc15 	stw	r2,-16(fp)
  80dff8:	e0bffc17 	ldw	r2,-16(fp)
  80dffc:	1001703a 	wrctl	status,r2
  80e000:	00000906 	br	80e028 <OSSchedUnlock+0xd0>
  80e004:	e0bfff17 	ldw	r2,-4(fp)
  80e008:	e0bffb15 	stw	r2,-20(fp)
  80e00c:	e0bffb17 	ldw	r2,-20(fp)
  80e010:	1001703a 	wrctl	status,r2
  80e014:	00000406 	br	80e028 <OSSchedUnlock+0xd0>
  80e018:	e0bfff17 	ldw	r2,-4(fp)
  80e01c:	e0bffa15 	stw	r2,-24(fp)
  80e020:	e0bffa17 	ldw	r2,-24(fp)
  80e024:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
  80e028:	e037883a 	mov	sp,fp
  80e02c:	dfc00117 	ldw	ra,4(sp)
  80e030:	df000017 	ldw	fp,0(sp)
  80e034:	dec00204 	addi	sp,sp,8
  80e038:	f800283a 	ret

0080e03c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
  80e03c:	defffe04 	addi	sp,sp,-8
  80e040:	dfc00115 	stw	ra,4(sp)
  80e044:	df000015 	stw	fp,0(sp)
  80e048:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
  80e04c:	d0a03f43 	ldbu	r2,-32515(gp)
  80e050:	10803fcc 	andi	r2,r2,255
  80e054:	1004c03a 	cmpne	r2,r2,zero
  80e058:	10000f1e 	bne	r2,zero,80e098 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
  80e05c:	080eee80 	call	80eee8 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
  80e060:	d0a04103 	ldbu	r2,-32508(gp)
  80e064:	d0a04145 	stb	r2,-32507(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
  80e068:	d0a04103 	ldbu	r2,-32508(gp)
  80e06c:	10803fcc 	andi	r2,r2,255
  80e070:	00c020b4 	movhi	r3,130
  80e074:	18fe1004 	addi	r3,r3,-1984
  80e078:	1085883a 	add	r2,r2,r2
  80e07c:	1085883a 	add	r2,r2,r2
  80e080:	10c5883a 	add	r2,r2,r3
  80e084:	10800017 	ldw	r2,0(r2)
  80e088:	d0a04915 	stw	r2,-32476(gp)
        OSTCBCur      = OSTCBHighRdy;
  80e08c:	d0a04917 	ldw	r2,-32476(gp)
  80e090:	d0a04e15 	stw	r2,-32456(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
  80e094:	08179d00 	call	8179d0 <OSStartHighRdy>
    }
}
  80e098:	e037883a 	mov	sp,fp
  80e09c:	dfc00117 	ldw	ra,4(sp)
  80e0a0:	df000017 	ldw	fp,0(sp)
  80e0a4:	dec00204 	addi	sp,sp,8
  80e0a8:	f800283a 	ret

0080e0ac <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
  80e0ac:	defff904 	addi	sp,sp,-28
  80e0b0:	dfc00615 	stw	ra,24(sp)
  80e0b4:	df000515 	stw	fp,20(sp)
  80e0b8:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80e0bc:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
  80e0c0:	01000084 	movi	r4,2
  80e0c4:	081510c0 	call	81510c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e0c8:	0005303a 	rdctl	r2,status
  80e0cc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e0d0:	e0fffe17 	ldw	r3,-8(fp)
  80e0d4:	00bfff84 	movi	r2,-2
  80e0d8:	1884703a 	and	r2,r3,r2
  80e0dc:	1001703a 	wrctl	status,r2
  
  return context;
  80e0e0:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
  80e0e4:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
  80e0e8:	d0204015 	stw	zero,-32512(gp)
  80e0ec:	e0bfff17 	ldw	r2,-4(fp)
  80e0f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e0f4:	e0bffd17 	ldw	r2,-12(fp)
  80e0f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
  80e0fc:	01001904 	movi	r4,100
  80e100:	081510c0 	call	81510c <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e104:	0005303a 	rdctl	r2,status
  80e108:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e10c:	e0fffc17 	ldw	r3,-16(fp)
  80e110:	00bfff84 	movi	r2,-2
  80e114:	1884703a 	and	r2,r3,r2
  80e118:	1001703a 	wrctl	status,r2
  
  return context;
  80e11c:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
  80e120:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
  80e124:	d0a04017 	ldw	r2,-32512(gp)
  80e128:	d0a04515 	stw	r2,-32492(gp)
    OSStatRdy    = OS_TRUE;
  80e12c:	00800044 	movi	r2,1
  80e130:	d0a05105 	stb	r2,-32444(gp)
  80e134:	e0bfff17 	ldw	r2,-4(fp)
  80e138:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e13c:	e0bffb17 	ldw	r2,-20(fp)
  80e140:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  80e144:	e037883a 	mov	sp,fp
  80e148:	dfc00117 	ldw	ra,4(sp)
  80e14c:	df000017 	ldw	fp,0(sp)
  80e150:	dec00204 	addi	sp,sp,8
  80e154:	f800283a 	ret

0080e158 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
  80e158:	defff604 	addi	sp,sp,-40
  80e15c:	dfc00915 	stw	ra,36(sp)
  80e160:	df000815 	stw	fp,32(sp)
  80e164:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80e168:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
  80e16c:	0817d9c0 	call	817d9c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e170:	0005303a 	rdctl	r2,status
  80e174:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e178:	e0fffb17 	ldw	r3,-20(fp)
  80e17c:	00bfff84 	movi	r2,-2
  80e180:	1884703a 	and	r2,r3,r2
  80e184:	1001703a 	wrctl	status,r2
  
  return context;
  80e188:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
  80e18c:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
  80e190:	d0a04f17 	ldw	r2,-32452(gp)
  80e194:	10800044 	addi	r2,r2,1
  80e198:	d0a04f15 	stw	r2,-32452(gp)
  80e19c:	e0bffc17 	ldw	r2,-16(fp)
  80e1a0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e1a4:	e0bffa17 	ldw	r2,-24(fp)
  80e1a8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
  80e1ac:	d0a03f43 	ldbu	r2,-32515(gp)
  80e1b0:	10803fcc 	andi	r2,r2,255
  80e1b4:	10800058 	cmpnei	r2,r2,1
  80e1b8:	1000721e 	bne	r2,zero,80e384 <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
  80e1bc:	d0a04303 	ldbu	r2,-32500(gp)
  80e1c0:	10803fcc 	andi	r2,r2,255
  80e1c4:	e0bfff15 	stw	r2,-4(fp)
  80e1c8:	e0ffff17 	ldw	r3,-4(fp)
  80e1cc:	18800060 	cmpeqi	r2,r3,1
  80e1d0:	10000a1e 	bne	r2,zero,80e1fc <OSTimeTick+0xa4>
  80e1d4:	e0ffff17 	ldw	r3,-4(fp)
  80e1d8:	188000a0 	cmpeqi	r2,r3,2
  80e1dc:	1000091e 	bne	r2,zero,80e204 <OSTimeTick+0xac>
  80e1e0:	e0ffff17 	ldw	r3,-4(fp)
  80e1e4:	1805003a 	cmpeq	r2,r3,zero
  80e1e8:	1000011e 	bne	r2,zero,80e1f0 <OSTimeTick+0x98>
  80e1ec:	00000a06 	br	80e218 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
  80e1f0:	00800044 	movi	r2,1
  80e1f4:	e0bffd05 	stb	r2,-12(fp)
                 break;
  80e1f8:	00000a06 	br	80e224 <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
  80e1fc:	e03ffd05 	stb	zero,-12(fp)
                 break;
  80e200:	00000806 	br	80e224 <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
  80e204:	00800044 	movi	r2,1
  80e208:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
  80e20c:	00800044 	movi	r2,1
  80e210:	d0a04305 	stb	r2,-32500(gp)
                 break;
  80e214:	00000306 	br	80e224 <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
  80e218:	00800044 	movi	r2,1
  80e21c:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
  80e220:	d0204305 	stb	zero,-32500(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
  80e224:	e0bffd03 	ldbu	r2,-12(fp)
  80e228:	1005003a 	cmpeq	r2,r2,zero
  80e22c:	1000551e 	bne	r2,zero,80e384 <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
  80e230:	d0a04217 	ldw	r2,-32504(gp)
  80e234:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80e238:	00004d06 	br	80e370 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e23c:	0005303a 	rdctl	r2,status
  80e240:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e244:	e0fff917 	ldw	r3,-28(fp)
  80e248:	00bfff84 	movi	r2,-2
  80e24c:	1884703a 	and	r2,r3,r2
  80e250:	1001703a 	wrctl	status,r2
  
  return context;
  80e254:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
  80e258:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
  80e25c:	e0bffe17 	ldw	r2,-8(fp)
  80e260:	10800b8b 	ldhu	r2,46(r2)
  80e264:	10bfffcc 	andi	r2,r2,65535
  80e268:	1005003a 	cmpeq	r2,r2,zero
  80e26c:	1000391e 	bne	r2,zero,80e354 <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
  80e270:	e0bffe17 	ldw	r2,-8(fp)
  80e274:	10800b8b 	ldhu	r2,46(r2)
  80e278:	10bfffc4 	addi	r2,r2,-1
  80e27c:	1007883a 	mov	r3,r2
  80e280:	e0bffe17 	ldw	r2,-8(fp)
  80e284:	10c00b8d 	sth	r3,46(r2)
  80e288:	e0bffe17 	ldw	r2,-8(fp)
  80e28c:	10800b8b 	ldhu	r2,46(r2)
  80e290:	10bfffcc 	andi	r2,r2,65535
  80e294:	1004c03a 	cmpne	r2,r2,zero
  80e298:	10002e1e 	bne	r2,zero,80e354 <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  80e29c:	e0bffe17 	ldw	r2,-8(fp)
  80e2a0:	10800c03 	ldbu	r2,48(r2)
  80e2a4:	10803fcc 	andi	r2,r2,255
  80e2a8:	10800dcc 	andi	r2,r2,55
  80e2ac:	1005003a 	cmpeq	r2,r2,zero
  80e2b0:	10000b1e 	bne	r2,zero,80e2e0 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
  80e2b4:	e0bffe17 	ldw	r2,-8(fp)
  80e2b8:	10c00c03 	ldbu	r3,48(r2)
  80e2bc:	00bff204 	movi	r2,-56
  80e2c0:	1884703a 	and	r2,r3,r2
  80e2c4:	1007883a 	mov	r3,r2
  80e2c8:	e0bffe17 	ldw	r2,-8(fp)
  80e2cc:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
  80e2d0:	e0fffe17 	ldw	r3,-8(fp)
  80e2d4:	00800044 	movi	r2,1
  80e2d8:	18800c45 	stb	r2,49(r3)
  80e2dc:	00000206 	br	80e2e8 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  80e2e0:	e0bffe17 	ldw	r2,-8(fp)
  80e2e4:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
  80e2e8:	e0bffe17 	ldw	r2,-8(fp)
  80e2ec:	10800c03 	ldbu	r2,48(r2)
  80e2f0:	10803fcc 	andi	r2,r2,255
  80e2f4:	1080020c 	andi	r2,r2,8
  80e2f8:	1004c03a 	cmpne	r2,r2,zero
  80e2fc:	1000151e 	bne	r2,zero,80e354 <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
  80e300:	e0bffe17 	ldw	r2,-8(fp)
  80e304:	10c00d83 	ldbu	r3,54(r2)
  80e308:	d0a04b03 	ldbu	r2,-32468(gp)
  80e30c:	1884b03a 	or	r2,r3,r2
  80e310:	d0a04b05 	stb	r2,-32468(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80e314:	e0bffe17 	ldw	r2,-8(fp)
  80e318:	10800d03 	ldbu	r2,52(r2)
  80e31c:	11003fcc 	andi	r4,r2,255
  80e320:	e0bffe17 	ldw	r2,-8(fp)
  80e324:	10800d03 	ldbu	r2,52(r2)
  80e328:	10c03fcc 	andi	r3,r2,255
  80e32c:	d0a04b44 	addi	r2,gp,-32467
  80e330:	1885883a 	add	r2,r3,r2
  80e334:	10c00003 	ldbu	r3,0(r2)
  80e338:	e0bffe17 	ldw	r2,-8(fp)
  80e33c:	10800d43 	ldbu	r2,53(r2)
  80e340:	1884b03a 	or	r2,r3,r2
  80e344:	1007883a 	mov	r3,r2
  80e348:	d0a04b44 	addi	r2,gp,-32467
  80e34c:	2085883a 	add	r2,r4,r2
  80e350:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
  80e354:	e0bffe17 	ldw	r2,-8(fp)
  80e358:	10800517 	ldw	r2,20(r2)
  80e35c:	e0bffe15 	stw	r2,-8(fp)
  80e360:	e0bffc17 	ldw	r2,-16(fp)
  80e364:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e368:	e0bff817 	ldw	r2,-32(fp)
  80e36c:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
  80e370:	e0bffe17 	ldw	r2,-8(fp)
  80e374:	10800c83 	ldbu	r2,50(r2)
  80e378:	10803fcc 	andi	r2,r2,255
  80e37c:	10800518 	cmpnei	r2,r2,20
  80e380:	103fae1e 	bne	r2,zero,80e23c <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
  80e384:	e037883a 	mov	sp,fp
  80e388:	dfc00117 	ldw	ra,4(sp)
  80e38c:	df000017 	ldw	fp,0(sp)
  80e390:	dec00204 	addi	sp,sp,8
  80e394:	f800283a 	ret

0080e398 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
  80e398:	deffff04 	addi	sp,sp,-4
  80e39c:	df000015 	stw	fp,0(sp)
  80e3a0:	d839883a 	mov	fp,sp
    return (OS_VERSION);
  80e3a4:	00804784 	movi	r2,286
}
  80e3a8:	e037883a 	mov	sp,fp
  80e3ac:	df000017 	ldw	fp,0(sp)
  80e3b0:	dec00104 	addi	sp,sp,4
  80e3b4:	f800283a 	ret

0080e3b8 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
  80e3b8:	deffff04 	addi	sp,sp,-4
  80e3bc:	df000015 	stw	fp,0(sp)
  80e3c0:	d839883a 	mov	fp,sp
}
  80e3c4:	e037883a 	mov	sp,fp
  80e3c8:	df000017 	ldw	fp,0(sp)
  80e3cc:	dec00104 	addi	sp,sp,4
  80e3d0:	f800283a 	ret

0080e3d4 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
  80e3d4:	defff804 	addi	sp,sp,-32
  80e3d8:	dfc00715 	stw	ra,28(sp)
  80e3dc:	df000615 	stw	fp,24(sp)
  80e3e0:	df000604 	addi	fp,sp,24
  80e3e4:	e13ffc15 	stw	r4,-16(fp)
  80e3e8:	e17ffd15 	stw	r5,-12(fp)
  80e3ec:	e1bffe05 	stb	r6,-8(fp)
  80e3f0:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
  80e3f4:	e0bffc17 	ldw	r2,-16(fp)
  80e3f8:	10800283 	ldbu	r2,10(r2)
  80e3fc:	10c03fcc 	andi	r3,r2,255
  80e400:	008020b4 	movhi	r2,130
  80e404:	10a24304 	addi	r2,r2,-30452
  80e408:	10c5883a 	add	r2,r2,r3
  80e40c:	10800003 	ldbu	r2,0(r2)
  80e410:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
  80e414:	e0fffa83 	ldbu	r3,-22(fp)
  80e418:	e0bffc17 	ldw	r2,-16(fp)
  80e41c:	1885883a 	add	r2,r3,r2
  80e420:	10800204 	addi	r2,r2,8
  80e424:	108000c3 	ldbu	r2,3(r2)
  80e428:	10c03fcc 	andi	r3,r2,255
  80e42c:	008020b4 	movhi	r2,130
  80e430:	10a24304 	addi	r2,r2,-30452
  80e434:	10c5883a 	add	r2,r2,r3
  80e438:	10800003 	ldbu	r2,0(r2)
  80e43c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
  80e440:	e0bffa83 	ldbu	r2,-22(fp)
  80e444:	100490fa 	slli	r2,r2,3
  80e448:	1007883a 	mov	r3,r2
  80e44c:	e0bffa43 	ldbu	r2,-23(fp)
  80e450:	1885883a 	add	r2,r3,r2
  80e454:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
  80e458:	e0bffa03 	ldbu	r2,-24(fp)
  80e45c:	00c020b4 	movhi	r3,130
  80e460:	18fe1004 	addi	r3,r3,-1984
  80e464:	1085883a 	add	r2,r2,r2
  80e468:	1085883a 	add	r2,r2,r2
  80e46c:	10c5883a 	add	r2,r2,r3
  80e470:	10800017 	ldw	r2,0(r2)
  80e474:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
  80e478:	e0bffb17 	ldw	r2,-20(fp)
  80e47c:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
  80e480:	e0fffb17 	ldw	r3,-20(fp)
  80e484:	e0bffd17 	ldw	r2,-12(fp)
  80e488:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
  80e48c:	e0bffb17 	ldw	r2,-20(fp)
  80e490:	10800c03 	ldbu	r2,48(r2)
  80e494:	1007883a 	mov	r3,r2
  80e498:	e0bffe03 	ldbu	r2,-8(fp)
  80e49c:	0084303a 	nor	r2,zero,r2
  80e4a0:	1884703a 	and	r2,r3,r2
  80e4a4:	1007883a 	mov	r3,r2
  80e4a8:	e0bffb17 	ldw	r2,-20(fp)
  80e4ac:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
  80e4b0:	e0fffb17 	ldw	r3,-20(fp)
  80e4b4:	e0bfff03 	ldbu	r2,-4(fp)
  80e4b8:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
  80e4bc:	e0bffb17 	ldw	r2,-20(fp)
  80e4c0:	10800c03 	ldbu	r2,48(r2)
  80e4c4:	10803fcc 	andi	r2,r2,255
  80e4c8:	1080020c 	andi	r2,r2,8
  80e4cc:	1004c03a 	cmpne	r2,r2,zero
  80e4d0:	1000111e 	bne	r2,zero,80e518 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
  80e4d4:	e0bffb17 	ldw	r2,-20(fp)
  80e4d8:	10c00d83 	ldbu	r3,54(r2)
  80e4dc:	d0a04b03 	ldbu	r2,-32468(gp)
  80e4e0:	1884b03a 	or	r2,r3,r2
  80e4e4:	d0a04b05 	stb	r2,-32468(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
  80e4e8:	e13ffa83 	ldbu	r4,-22(fp)
  80e4ec:	e0fffa83 	ldbu	r3,-22(fp)
  80e4f0:	d0a04b44 	addi	r2,gp,-32467
  80e4f4:	1885883a 	add	r2,r3,r2
  80e4f8:	10c00003 	ldbu	r3,0(r2)
  80e4fc:	e0bffb17 	ldw	r2,-20(fp)
  80e500:	10800d43 	ldbu	r2,53(r2)
  80e504:	1884b03a 	or	r2,r3,r2
  80e508:	1007883a 	mov	r3,r2
  80e50c:	d0a04b44 	addi	r2,gp,-32467
  80e510:	2085883a 	add	r2,r4,r2
  80e514:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
  80e518:	e13ffb17 	ldw	r4,-20(fp)
  80e51c:	e17ffc17 	ldw	r5,-16(fp)
  80e520:	080e7cc0 	call	80e7cc <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
  80e524:	e0bffb17 	ldw	r2,-20(fp)
  80e528:	10800817 	ldw	r2,32(r2)
  80e52c:	1005003a 	cmpeq	r2,r2,zero
  80e530:	1000071e 	bne	r2,zero,80e550 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  80e534:	e0bffb17 	ldw	r2,-20(fp)
  80e538:	11400817 	ldw	r5,32(r2)
  80e53c:	e13ffb17 	ldw	r4,-20(fp)
  80e540:	080e8840 	call	80e884 <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
  80e544:	e0fffb17 	ldw	r3,-20(fp)
  80e548:	e0bffc17 	ldw	r2,-16(fp)
  80e54c:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
  80e550:	e0bffa03 	ldbu	r2,-24(fp)
}
  80e554:	e037883a 	mov	sp,fp
  80e558:	dfc00117 	ldw	ra,4(sp)
  80e55c:	df000017 	ldw	fp,0(sp)
  80e560:	dec00204 	addi	sp,sp,8
  80e564:	f800283a 	ret

0080e568 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
  80e568:	defffd04 	addi	sp,sp,-12
  80e56c:	df000215 	stw	fp,8(sp)
  80e570:	df000204 	addi	fp,sp,8
  80e574:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
  80e578:	d0e04e17 	ldw	r3,-32456(gp)
  80e57c:	e0bfff17 	ldw	r2,-4(fp)
  80e580:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
  80e584:	d0a04e17 	ldw	r2,-32456(gp)
  80e588:	10800d03 	ldbu	r2,52(r2)
  80e58c:	11003fcc 	andi	r4,r2,255
  80e590:	d0a04e17 	ldw	r2,-32456(gp)
  80e594:	10800d03 	ldbu	r2,52(r2)
  80e598:	10c03fcc 	andi	r3,r2,255
  80e59c:	e0bfff17 	ldw	r2,-4(fp)
  80e5a0:	1885883a 	add	r2,r3,r2
  80e5a4:	10800204 	addi	r2,r2,8
  80e5a8:	10c000c3 	ldbu	r3,3(r2)
  80e5ac:	d0a04e17 	ldw	r2,-32456(gp)
  80e5b0:	10800d43 	ldbu	r2,53(r2)
  80e5b4:	1884b03a 	or	r2,r3,r2
  80e5b8:	1007883a 	mov	r3,r2
  80e5bc:	e0bfff17 	ldw	r2,-4(fp)
  80e5c0:	2085883a 	add	r2,r4,r2
  80e5c4:	10800204 	addi	r2,r2,8
  80e5c8:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80e5cc:	e0bfff17 	ldw	r2,-4(fp)
  80e5d0:	10c00283 	ldbu	r3,10(r2)
  80e5d4:	d0a04e17 	ldw	r2,-32456(gp)
  80e5d8:	10800d83 	ldbu	r2,54(r2)
  80e5dc:	1884b03a 	or	r2,r3,r2
  80e5e0:	1007883a 	mov	r3,r2
  80e5e4:	e0bfff17 	ldw	r2,-4(fp)
  80e5e8:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80e5ec:	d0a04e17 	ldw	r2,-32456(gp)
  80e5f0:	10800d03 	ldbu	r2,52(r2)
  80e5f4:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80e5f8:	e13ffe03 	ldbu	r4,-8(fp)
  80e5fc:	e0fffe03 	ldbu	r3,-8(fp)
  80e600:	d0a04b44 	addi	r2,gp,-32467
  80e604:	1885883a 	add	r2,r3,r2
  80e608:	10800003 	ldbu	r2,0(r2)
  80e60c:	1007883a 	mov	r3,r2
  80e610:	d0a04e17 	ldw	r2,-32456(gp)
  80e614:	10800d43 	ldbu	r2,53(r2)
  80e618:	0084303a 	nor	r2,zero,r2
  80e61c:	1884703a 	and	r2,r3,r2
  80e620:	1007883a 	mov	r3,r2
  80e624:	d0a04b44 	addi	r2,gp,-32467
  80e628:	2085883a 	add	r2,r4,r2
  80e62c:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80e630:	e0fffe03 	ldbu	r3,-8(fp)
  80e634:	d0a04b44 	addi	r2,gp,-32467
  80e638:	1885883a 	add	r2,r3,r2
  80e63c:	10800003 	ldbu	r2,0(r2)
  80e640:	10803fcc 	andi	r2,r2,255
  80e644:	1004c03a 	cmpne	r2,r2,zero
  80e648:	1000071e 	bne	r2,zero,80e668 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80e64c:	d0a04e17 	ldw	r2,-32456(gp)
  80e650:	10800d83 	ldbu	r2,54(r2)
  80e654:	0084303a 	nor	r2,zero,r2
  80e658:	1007883a 	mov	r3,r2
  80e65c:	d0a04b03 	ldbu	r2,-32468(gp)
  80e660:	1884703a 	and	r2,r3,r2
  80e664:	d0a04b05 	stb	r2,-32468(gp)
    }
}
  80e668:	e037883a 	mov	sp,fp
  80e66c:	df000017 	ldw	fp,0(sp)
  80e670:	dec00104 	addi	sp,sp,4
  80e674:	f800283a 	ret

0080e678 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
  80e678:	defffb04 	addi	sp,sp,-20
  80e67c:	df000415 	stw	fp,16(sp)
  80e680:	df000404 	addi	fp,sp,16
  80e684:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
  80e688:	d0a04e17 	ldw	r2,-32456(gp)
  80e68c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
  80e690:	d0e04e17 	ldw	r3,-32456(gp)
  80e694:	e0bfff17 	ldw	r2,-4(fp)
  80e698:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
  80e69c:	e0bfff17 	ldw	r2,-4(fp)
  80e6a0:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
  80e6a4:	e0bffe17 	ldw	r2,-8(fp)
  80e6a8:	10800017 	ldw	r2,0(r2)
  80e6ac:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80e6b0:	00002006 	br	80e734 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
  80e6b4:	d0a04e17 	ldw	r2,-32456(gp)
  80e6b8:	10800d03 	ldbu	r2,52(r2)
  80e6bc:	11003fcc 	andi	r4,r2,255
  80e6c0:	d0a04e17 	ldw	r2,-32456(gp)
  80e6c4:	10800d03 	ldbu	r2,52(r2)
  80e6c8:	10c03fcc 	andi	r3,r2,255
  80e6cc:	e0bffd17 	ldw	r2,-12(fp)
  80e6d0:	1885883a 	add	r2,r3,r2
  80e6d4:	10800204 	addi	r2,r2,8
  80e6d8:	10c000c3 	ldbu	r3,3(r2)
  80e6dc:	d0a04e17 	ldw	r2,-32456(gp)
  80e6e0:	10800d43 	ldbu	r2,53(r2)
  80e6e4:	1884b03a 	or	r2,r3,r2
  80e6e8:	1007883a 	mov	r3,r2
  80e6ec:	e0bffd17 	ldw	r2,-12(fp)
  80e6f0:	2085883a 	add	r2,r4,r2
  80e6f4:	10800204 	addi	r2,r2,8
  80e6f8:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
  80e6fc:	e0bffd17 	ldw	r2,-12(fp)
  80e700:	10c00283 	ldbu	r3,10(r2)
  80e704:	d0a04e17 	ldw	r2,-32456(gp)
  80e708:	10800d83 	ldbu	r2,54(r2)
  80e70c:	1884b03a 	or	r2,r3,r2
  80e710:	1007883a 	mov	r3,r2
  80e714:	e0bffd17 	ldw	r2,-12(fp)
  80e718:	10c00285 	stb	r3,10(r2)
        pevents++;
  80e71c:	e0bffe17 	ldw	r2,-8(fp)
  80e720:	10800104 	addi	r2,r2,4
  80e724:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
  80e728:	e0bffe17 	ldw	r2,-8(fp)
  80e72c:	10800017 	ldw	r2,0(r2)
  80e730:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
  80e734:	e0bffd17 	ldw	r2,-12(fp)
  80e738:	1004c03a 	cmpne	r2,r2,zero
  80e73c:	103fdd1e 	bne	r2,zero,80e6b4 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
  80e740:	d0a04e17 	ldw	r2,-32456(gp)
  80e744:	10800d03 	ldbu	r2,52(r2)
  80e748:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
  80e74c:	e13ffc03 	ldbu	r4,-16(fp)
  80e750:	e0fffc03 	ldbu	r3,-16(fp)
  80e754:	d0a04b44 	addi	r2,gp,-32467
  80e758:	1885883a 	add	r2,r3,r2
  80e75c:	10800003 	ldbu	r2,0(r2)
  80e760:	1007883a 	mov	r3,r2
  80e764:	d0a04e17 	ldw	r2,-32456(gp)
  80e768:	10800d43 	ldbu	r2,53(r2)
  80e76c:	0084303a 	nor	r2,zero,r2
  80e770:	1884703a 	and	r2,r3,r2
  80e774:	1007883a 	mov	r3,r2
  80e778:	d0a04b44 	addi	r2,gp,-32467
  80e77c:	2085883a 	add	r2,r4,r2
  80e780:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  80e784:	e0fffc03 	ldbu	r3,-16(fp)
  80e788:	d0a04b44 	addi	r2,gp,-32467
  80e78c:	1885883a 	add	r2,r3,r2
  80e790:	10800003 	ldbu	r2,0(r2)
  80e794:	10803fcc 	andi	r2,r2,255
  80e798:	1004c03a 	cmpne	r2,r2,zero
  80e79c:	1000071e 	bne	r2,zero,80e7bc <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
  80e7a0:	d0a04e17 	ldw	r2,-32456(gp)
  80e7a4:	10800d83 	ldbu	r2,54(r2)
  80e7a8:	0084303a 	nor	r2,zero,r2
  80e7ac:	1007883a 	mov	r3,r2
  80e7b0:	d0a04b03 	ldbu	r2,-32468(gp)
  80e7b4:	1884703a 	and	r2,r3,r2
  80e7b8:	d0a04b05 	stb	r2,-32468(gp)
    }
}
  80e7bc:	e037883a 	mov	sp,fp
  80e7c0:	df000017 	ldw	fp,0(sp)
  80e7c4:	dec00104 	addi	sp,sp,4
  80e7c8:	f800283a 	ret

0080e7cc <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
  80e7cc:	defffc04 	addi	sp,sp,-16
  80e7d0:	df000315 	stw	fp,12(sp)
  80e7d4:	df000304 	addi	fp,sp,12
  80e7d8:	e13ffe15 	stw	r4,-8(fp)
  80e7dc:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
  80e7e0:	e0bffe17 	ldw	r2,-8(fp)
  80e7e4:	10800d03 	ldbu	r2,52(r2)
  80e7e8:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
  80e7ec:	e13ffd03 	ldbu	r4,-12(fp)
  80e7f0:	e0fffd03 	ldbu	r3,-12(fp)
  80e7f4:	e0bfff17 	ldw	r2,-4(fp)
  80e7f8:	1885883a 	add	r2,r3,r2
  80e7fc:	10800204 	addi	r2,r2,8
  80e800:	108000c3 	ldbu	r2,3(r2)
  80e804:	1007883a 	mov	r3,r2
  80e808:	e0bffe17 	ldw	r2,-8(fp)
  80e80c:	10800d43 	ldbu	r2,53(r2)
  80e810:	0084303a 	nor	r2,zero,r2
  80e814:	1884703a 	and	r2,r3,r2
  80e818:	1007883a 	mov	r3,r2
  80e81c:	e0bfff17 	ldw	r2,-4(fp)
  80e820:	2085883a 	add	r2,r4,r2
  80e824:	10800204 	addi	r2,r2,8
  80e828:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
  80e82c:	e0fffd03 	ldbu	r3,-12(fp)
  80e830:	e0bfff17 	ldw	r2,-4(fp)
  80e834:	1885883a 	add	r2,r3,r2
  80e838:	10800204 	addi	r2,r2,8
  80e83c:	108000c3 	ldbu	r2,3(r2)
  80e840:	10803fcc 	andi	r2,r2,255
  80e844:	1004c03a 	cmpne	r2,r2,zero
  80e848:	10000a1e 	bne	r2,zero,80e874 <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
  80e84c:	e0bfff17 	ldw	r2,-4(fp)
  80e850:	10800283 	ldbu	r2,10(r2)
  80e854:	1007883a 	mov	r3,r2
  80e858:	e0bffe17 	ldw	r2,-8(fp)
  80e85c:	10800d83 	ldbu	r2,54(r2)
  80e860:	0084303a 	nor	r2,zero,r2
  80e864:	1884703a 	and	r2,r3,r2
  80e868:	1007883a 	mov	r3,r2
  80e86c:	e0bfff17 	ldw	r2,-4(fp)
  80e870:	10c00285 	stb	r3,10(r2)
    }
}
  80e874:	e037883a 	mov	sp,fp
  80e878:	df000017 	ldw	fp,0(sp)
  80e87c:	dec00104 	addi	sp,sp,4
  80e880:	f800283a 	ret

0080e884 <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
  80e884:	defffa04 	addi	sp,sp,-24
  80e888:	df000515 	stw	fp,20(sp)
  80e88c:	df000504 	addi	fp,sp,20
  80e890:	e13ffe15 	stw	r4,-8(fp)
  80e894:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
  80e898:	e0bffe17 	ldw	r2,-8(fp)
  80e89c:	10800d03 	ldbu	r2,52(r2)
  80e8a0:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
  80e8a4:	e0bffe17 	ldw	r2,-8(fp)
  80e8a8:	10800d83 	ldbu	r2,54(r2)
  80e8ac:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
  80e8b0:	e0bffe17 	ldw	r2,-8(fp)
  80e8b4:	10800d43 	ldbu	r2,53(r2)
  80e8b8:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
  80e8bc:	e0bfff17 	ldw	r2,-4(fp)
  80e8c0:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
  80e8c4:	e0bffd17 	ldw	r2,-12(fp)
  80e8c8:	10800017 	ldw	r2,0(r2)
  80e8cc:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80e8d0:	00002606 	br	80e96c <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
  80e8d4:	e13ffb83 	ldbu	r4,-18(fp)
  80e8d8:	e0fffb83 	ldbu	r3,-18(fp)
  80e8dc:	e0bffc17 	ldw	r2,-16(fp)
  80e8e0:	1885883a 	add	r2,r3,r2
  80e8e4:	10800204 	addi	r2,r2,8
  80e8e8:	108000c3 	ldbu	r2,3(r2)
  80e8ec:	1007883a 	mov	r3,r2
  80e8f0:	e0bffb03 	ldbu	r2,-20(fp)
  80e8f4:	0084303a 	nor	r2,zero,r2
  80e8f8:	1884703a 	and	r2,r3,r2
  80e8fc:	1007883a 	mov	r3,r2
  80e900:	e0bffc17 	ldw	r2,-16(fp)
  80e904:	2085883a 	add	r2,r4,r2
  80e908:	10800204 	addi	r2,r2,8
  80e90c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
  80e910:	e0fffb83 	ldbu	r3,-18(fp)
  80e914:	e0bffc17 	ldw	r2,-16(fp)
  80e918:	1885883a 	add	r2,r3,r2
  80e91c:	10800204 	addi	r2,r2,8
  80e920:	108000c3 	ldbu	r2,3(r2)
  80e924:	10803fcc 	andi	r2,r2,255
  80e928:	1004c03a 	cmpne	r2,r2,zero
  80e92c:	1000091e 	bne	r2,zero,80e954 <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
  80e930:	e0bffc17 	ldw	r2,-16(fp)
  80e934:	10800283 	ldbu	r2,10(r2)
  80e938:	1007883a 	mov	r3,r2
  80e93c:	e0bffb43 	ldbu	r2,-19(fp)
  80e940:	0084303a 	nor	r2,zero,r2
  80e944:	1884703a 	and	r2,r3,r2
  80e948:	1007883a 	mov	r3,r2
  80e94c:	e0bffc17 	ldw	r2,-16(fp)
  80e950:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
  80e954:	e0bffd17 	ldw	r2,-12(fp)
  80e958:	10800104 	addi	r2,r2,4
  80e95c:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
  80e960:	e0bffd17 	ldw	r2,-12(fp)
  80e964:	10800017 	ldw	r2,0(r2)
  80e968:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
  80e96c:	e0bffc17 	ldw	r2,-16(fp)
  80e970:	1004c03a 	cmpne	r2,r2,zero
  80e974:	103fd71e 	bne	r2,zero,80e8d4 <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
  80e978:	e037883a 	mov	sp,fp
  80e97c:	df000017 	ldw	fp,0(sp)
  80e980:	dec00104 	addi	sp,sp,4
  80e984:	f800283a 	ret

0080e988 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
  80e988:	defffc04 	addi	sp,sp,-16
  80e98c:	df000315 	stw	fp,12(sp)
  80e990:	df000304 	addi	fp,sp,12
  80e994:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
  80e998:	e0bfff17 	ldw	r2,-4(fp)
  80e99c:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
  80e9a0:	e0bfff17 	ldw	r2,-4(fp)
  80e9a4:	108002c4 	addi	r2,r2,11
  80e9a8:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80e9ac:	e03ffd05 	stb	zero,-12(fp)
  80e9b0:	00000806 	br	80e9d4 <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
  80e9b4:	e0bffe17 	ldw	r2,-8(fp)
  80e9b8:	10000005 	stb	zero,0(r2)
  80e9bc:	e0bffe17 	ldw	r2,-8(fp)
  80e9c0:	10800044 	addi	r2,r2,1
  80e9c4:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  80e9c8:	e0bffd03 	ldbu	r2,-12(fp)
  80e9cc:	10800044 	addi	r2,r2,1
  80e9d0:	e0bffd05 	stb	r2,-12(fp)
  80e9d4:	e0bffd03 	ldbu	r2,-12(fp)
  80e9d8:	108000f0 	cmpltui	r2,r2,3
  80e9dc:	103ff51e 	bne	r2,zero,80e9b4 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
  80e9e0:	e037883a 	mov	sp,fp
  80e9e4:	df000017 	ldw	fp,0(sp)
  80e9e8:	dec00104 	addi	sp,sp,4
  80e9ec:	f800283a 	ret

0080e9f0 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
  80e9f0:	defffb04 	addi	sp,sp,-20
  80e9f4:	dfc00415 	stw	ra,16(sp)
  80e9f8:	df000315 	stw	fp,12(sp)
  80e9fc:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
  80ea00:	010020b4 	movhi	r4,130
  80ea04:	2139fc04 	addi	r4,r4,-6160
  80ea08:	0142d004 	movi	r5,2880
  80ea0c:	080ed540 	call	80ed54 <OS_MemClr>
    pevent1 = &OSEventTbl[0];
  80ea10:	008020b4 	movhi	r2,130
  80ea14:	10b9fc04 	addi	r2,r2,-6160
  80ea18:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
  80ea1c:	008020b4 	movhi	r2,130
  80ea20:	10ba0804 	addi	r2,r2,-6112
  80ea24:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80ea28:	e03fff0d 	sth	zero,-4(fp)
  80ea2c:	00001306 	br	80ea7c <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
  80ea30:	e0bffe17 	ldw	r2,-8(fp)
  80ea34:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
  80ea38:	e0fffe17 	ldw	r3,-8(fp)
  80ea3c:	e0bffd17 	ldw	r2,-12(fp)
  80ea40:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
  80ea44:	e0fffe17 	ldw	r3,-8(fp)
  80ea48:	00800fc4 	movi	r2,63
  80ea4c:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
  80ea50:	e0bffe17 	ldw	r2,-8(fp)
  80ea54:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
  80ea58:	e0bffe17 	ldw	r2,-8(fp)
  80ea5c:	10800c04 	addi	r2,r2,48
  80ea60:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
  80ea64:	e0bffd17 	ldw	r2,-12(fp)
  80ea68:	10800c04 	addi	r2,r2,48
  80ea6c:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
  80ea70:	e0bfff0b 	ldhu	r2,-4(fp)
  80ea74:	10800044 	addi	r2,r2,1
  80ea78:	e0bfff0d 	sth	r2,-4(fp)
  80ea7c:	e0bfff0b 	ldhu	r2,-4(fp)
  80ea80:	10800ef0 	cmpltui	r2,r2,59
  80ea84:	103fea1e 	bne	r2,zero,80ea30 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
  80ea88:	e0bffe17 	ldw	r2,-8(fp)
  80ea8c:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
  80ea90:	e0bffe17 	ldw	r2,-8(fp)
  80ea94:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
  80ea98:	e0fffe17 	ldw	r3,-8(fp)
  80ea9c:	00800fc4 	movi	r2,63
  80eaa0:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
  80eaa4:	e0bffe17 	ldw	r2,-8(fp)
  80eaa8:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
  80eaac:	008020b4 	movhi	r2,130
  80eab0:	10b9fc04 	addi	r2,r2,-6160
  80eab4:	d0a04c15 	stw	r2,-32464(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
  80eab8:	e037883a 	mov	sp,fp
  80eabc:	dfc00117 	ldw	ra,4(sp)
  80eac0:	df000017 	ldw	fp,0(sp)
  80eac4:	dec00204 	addi	sp,sp,8
  80eac8:	f800283a 	ret

0080eacc <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
  80eacc:	deffff04 	addi	sp,sp,-4
  80ead0:	df000015 	stw	fp,0(sp)
  80ead4:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
  80ead8:	d0204f15 	stw	zero,-32452(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
  80eadc:	d0204d05 	stb	zero,-32460(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
  80eae0:	d0203f05 	stb	zero,-32516(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
  80eae4:	d0204745 	stb	zero,-32483(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
  80eae8:	d0203f45 	stb	zero,-32515(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
  80eaec:	d0204415 	stw	zero,-32496(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
  80eaf0:	d0204015 	stw	zero,-32512(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
  80eaf4:	d0205215 	stw	zero,-32440(gp)
    OSIdleCtrMax  = 0L;
  80eaf8:	d0204515 	stw	zero,-32492(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
  80eafc:	d0205105 	stb	zero,-32444(gp)
#endif
}
  80eb00:	e037883a 	mov	sp,fp
  80eb04:	df000017 	ldw	fp,0(sp)
  80eb08:	dec00104 	addi	sp,sp,4
  80eb0c:	f800283a 	ret

0080eb10 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
  80eb10:	defffd04 	addi	sp,sp,-12
  80eb14:	df000215 	stw	fp,8(sp)
  80eb18:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
  80eb1c:	d0204b05 	stb	zero,-32468(gp)
    prdytbl       = &OSRdyTbl[0];
  80eb20:	d0a04b44 	addi	r2,gp,-32467
  80eb24:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80eb28:	e03fff05 	stb	zero,-4(fp)
  80eb2c:	00000806 	br	80eb50 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
  80eb30:	e0bffe17 	ldw	r2,-8(fp)
  80eb34:	10000005 	stb	zero,0(r2)
  80eb38:	e0bffe17 	ldw	r2,-8(fp)
  80eb3c:	10800044 	addi	r2,r2,1
  80eb40:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
  80eb44:	e0bfff03 	ldbu	r2,-4(fp)
  80eb48:	10800044 	addi	r2,r2,1
  80eb4c:	e0bfff05 	stb	r2,-4(fp)
  80eb50:	e0bfff03 	ldbu	r2,-4(fp)
  80eb54:	108000f0 	cmpltui	r2,r2,3
  80eb58:	103ff51e 	bne	r2,zero,80eb30 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
  80eb5c:	d0204145 	stb	zero,-32507(gp)
    OSPrioHighRdy = 0;
  80eb60:	d0204105 	stb	zero,-32508(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
  80eb64:	d0204915 	stw	zero,-32476(gp)
    OSTCBCur      = (OS_TCB *)0;
  80eb68:	d0204e15 	stw	zero,-32456(gp)
}
  80eb6c:	e037883a 	mov	sp,fp
  80eb70:	df000017 	ldw	fp,0(sp)
  80eb74:	dec00104 	addi	sp,sp,4
  80eb78:	f800283a 	ret

0080eb7c <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
  80eb7c:	defff804 	addi	sp,sp,-32
  80eb80:	dfc00715 	stw	ra,28(sp)
  80eb84:	df000615 	stw	fp,24(sp)
  80eb88:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
  80eb8c:	018020b4 	movhi	r6,130
  80eb90:	31b9fb04 	addi	r6,r6,-6164
  80eb94:	00bfffd4 	movui	r2,65535
  80eb98:	d8800015 	stw	r2,0(sp)
  80eb9c:	008020b4 	movhi	r2,130
  80eba0:	10b7fc04 	addi	r2,r2,-8208
  80eba4:	d8800115 	stw	r2,4(sp)
  80eba8:	00808004 	movi	r2,512
  80ebac:	d8800215 	stw	r2,8(sp)
  80ebb0:	d8000315 	stw	zero,12(sp)
  80ebb4:	008000c4 	movi	r2,3
  80ebb8:	d8800415 	stw	r2,16(sp)
  80ebbc:	01002074 	movhi	r4,129
  80ebc0:	213c0c04 	addi	r4,r4,-4048
  80ebc4:	000b883a 	mov	r5,zero
  80ebc8:	01c00504 	movi	r7,20
  80ebcc:	0813e140 	call	813e14 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
  80ebd0:	014020b4 	movhi	r5,130
  80ebd4:	29628304 	addi	r5,r5,-30196
  80ebd8:	01000504 	movi	r4,20
  80ebdc:	e1bfff04 	addi	r6,fp,-4
  80ebe0:	08147480 	call	814748 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
  80ebe4:	e037883a 	mov	sp,fp
  80ebe8:	dfc00117 	ldw	ra,4(sp)
  80ebec:	df000017 	ldw	fp,0(sp)
  80ebf0:	dec00204 	addi	sp,sp,8
  80ebf4:	f800283a 	ret

0080ebf8 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
  80ebf8:	defff804 	addi	sp,sp,-32
  80ebfc:	dfc00715 	stw	ra,28(sp)
  80ec00:	df000615 	stw	fp,24(sp)
  80ec04:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
  80ec08:	018020b4 	movhi	r6,130
  80ec0c:	31b78304 	addi	r6,r6,-8692
  80ec10:	00bfff94 	movui	r2,65534
  80ec14:	d8800015 	stw	r2,0(sp)
  80ec18:	008020b4 	movhi	r2,130
  80ec1c:	10b58404 	addi	r2,r2,-10736
  80ec20:	d8800115 	stw	r2,4(sp)
  80ec24:	00808004 	movi	r2,512
  80ec28:	d8800215 	stw	r2,8(sp)
  80ec2c:	d8000315 	stw	zero,12(sp)
  80ec30:	008000c4 	movi	r2,3
  80ec34:	d8800415 	stw	r2,16(sp)
  80ec38:	01002074 	movhi	r4,129
  80ec3c:	213c2304 	addi	r4,r4,-3956
  80ec40:	000b883a 	mov	r5,zero
  80ec44:	01c004c4 	movi	r7,19
  80ec48:	0813e140 	call	813e14 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
  80ec4c:	014020b4 	movhi	r5,130
  80ec50:	29628704 	addi	r5,r5,-30180
  80ec54:	010004c4 	movi	r4,19
  80ec58:	e1bfff04 	addi	r6,fp,-4
  80ec5c:	08147480 	call	814748 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
  80ec60:	e037883a 	mov	sp,fp
  80ec64:	dfc00117 	ldw	ra,4(sp)
  80ec68:	df000017 	ldw	fp,0(sp)
  80ec6c:	dec00204 	addi	sp,sp,8
  80ec70:	f800283a 	ret

0080ec74 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
  80ec74:	defffb04 	addi	sp,sp,-20
  80ec78:	dfc00415 	stw	ra,16(sp)
  80ec7c:	df000315 	stw	fp,12(sp)
  80ec80:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
  80ec84:	010020b4 	movhi	r4,130
  80ec88:	213ccc04 	addi	r4,r4,-3280
  80ec8c:	01414404 	movi	r5,1296
  80ec90:	080ed540 	call	80ed54 <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
  80ec94:	010020b4 	movhi	r4,130
  80ec98:	213e1004 	addi	r4,r4,-1984
  80ec9c:	01401504 	movi	r5,84
  80eca0:	080ed540 	call	80ed54 <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
  80eca4:	008020b4 	movhi	r2,130
  80eca8:	10bccc04 	addi	r2,r2,-3280
  80ecac:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
  80ecb0:	008020b4 	movhi	r2,130
  80ecb4:	10bce704 	addi	r2,r2,-3172
  80ecb8:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80ecbc:	e03fff05 	stb	zero,-4(fp)
  80ecc0:	00001106 	br	80ed08 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
  80ecc4:	e0fffe17 	ldw	r3,-8(fp)
  80ecc8:	e0bffd17 	ldw	r2,-12(fp)
  80eccc:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
  80ecd0:	e0fffe17 	ldw	r3,-8(fp)
  80ecd4:	00800fc4 	movi	r2,63
  80ecd8:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80ecdc:	e0bffe17 	ldw	r2,-8(fp)
  80ece0:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
  80ece4:	e0bffe17 	ldw	r2,-8(fp)
  80ece8:	10801b04 	addi	r2,r2,108
  80ecec:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
  80ecf0:	e0bffd17 	ldw	r2,-12(fp)
  80ecf4:	10801b04 	addi	r2,r2,108
  80ecf8:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
  80ecfc:	e0bfff03 	ldbu	r2,-4(fp)
  80ed00:	10800044 	addi	r2,r2,1
  80ed04:	e0bfff05 	stb	r2,-4(fp)
  80ed08:	e0bfff03 	ldbu	r2,-4(fp)
  80ed0c:	108002f0 	cmpltui	r2,r2,11
  80ed10:	103fec1e 	bne	r2,zero,80ecc4 <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
  80ed14:	e0bffe17 	ldw	r2,-8(fp)
  80ed18:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
  80ed1c:	e0fffe17 	ldw	r3,-8(fp)
  80ed20:	00800fc4 	movi	r2,63
  80ed24:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
  80ed28:	e0bffe17 	ldw	r2,-8(fp)
  80ed2c:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
  80ed30:	d0204215 	stw	zero,-32504(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
  80ed34:	008020b4 	movhi	r2,130
  80ed38:	10bccc04 	addi	r2,r2,-3280
  80ed3c:	d0a04615 	stw	r2,-32488(gp)
}
  80ed40:	e037883a 	mov	sp,fp
  80ed44:	dfc00117 	ldw	ra,4(sp)
  80ed48:	df000017 	ldw	fp,0(sp)
  80ed4c:	dec00204 	addi	sp,sp,8
  80ed50:	f800283a 	ret

0080ed54 <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
  80ed54:	defffd04 	addi	sp,sp,-12
  80ed58:	df000215 	stw	fp,8(sp)
  80ed5c:	df000204 	addi	fp,sp,8
  80ed60:	e13ffe15 	stw	r4,-8(fp)
  80ed64:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
  80ed68:	00000806 	br	80ed8c <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
  80ed6c:	e0bffe17 	ldw	r2,-8(fp)
  80ed70:	10000005 	stb	zero,0(r2)
  80ed74:	e0bffe17 	ldw	r2,-8(fp)
  80ed78:	10800044 	addi	r2,r2,1
  80ed7c:	e0bffe15 	stw	r2,-8(fp)
        size--;
  80ed80:	e0bfff0b 	ldhu	r2,-4(fp)
  80ed84:	10bfffc4 	addi	r2,r2,-1
  80ed88:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
  80ed8c:	e0bfff0b 	ldhu	r2,-4(fp)
  80ed90:	1004c03a 	cmpne	r2,r2,zero
  80ed94:	103ff51e 	bne	r2,zero,80ed6c <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
  80ed98:	e037883a 	mov	sp,fp
  80ed9c:	df000017 	ldw	fp,0(sp)
  80eda0:	dec00104 	addi	sp,sp,4
  80eda4:	f800283a 	ret

0080eda8 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
  80eda8:	defffc04 	addi	sp,sp,-16
  80edac:	df000315 	stw	fp,12(sp)
  80edb0:	df000304 	addi	fp,sp,12
  80edb4:	e13ffd15 	stw	r4,-12(fp)
  80edb8:	e17ffe15 	stw	r5,-8(fp)
  80edbc:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
  80edc0:	00000d06 	br	80edf8 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
  80edc4:	e0bffe17 	ldw	r2,-8(fp)
  80edc8:	10c00003 	ldbu	r3,0(r2)
  80edcc:	e0bffd17 	ldw	r2,-12(fp)
  80edd0:	10c00005 	stb	r3,0(r2)
  80edd4:	e0bffd17 	ldw	r2,-12(fp)
  80edd8:	10800044 	addi	r2,r2,1
  80eddc:	e0bffd15 	stw	r2,-12(fp)
  80ede0:	e0bffe17 	ldw	r2,-8(fp)
  80ede4:	10800044 	addi	r2,r2,1
  80ede8:	e0bffe15 	stw	r2,-8(fp)
        size--;
  80edec:	e0bfff0b 	ldhu	r2,-4(fp)
  80edf0:	10bfffc4 	addi	r2,r2,-1
  80edf4:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
  80edf8:	e0bfff0b 	ldhu	r2,-4(fp)
  80edfc:	1004c03a 	cmpne	r2,r2,zero
  80ee00:	103ff01e 	bne	r2,zero,80edc4 <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
  80ee04:	e037883a 	mov	sp,fp
  80ee08:	df000017 	ldw	fp,0(sp)
  80ee0c:	dec00104 	addi	sp,sp,4
  80ee10:	f800283a 	ret

0080ee14 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
  80ee14:	defffb04 	addi	sp,sp,-20
  80ee18:	dfc00415 	stw	ra,16(sp)
  80ee1c:	df000315 	stw	fp,12(sp)
  80ee20:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  80ee24:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ee28:	0005303a 	rdctl	r2,status
  80ee2c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ee30:	e0fffe17 	ldw	r3,-8(fp)
  80ee34:	00bfff84 	movi	r2,-2
  80ee38:	1884703a 	and	r2,r3,r2
  80ee3c:	1001703a 	wrctl	status,r2
  
  return context;
  80ee40:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
  80ee44:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
  80ee48:	d0a04d03 	ldbu	r2,-32460(gp)
  80ee4c:	10803fcc 	andi	r2,r2,255
  80ee50:	1004c03a 	cmpne	r2,r2,zero
  80ee54:	10001b1e 	bne	r2,zero,80eec4 <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
  80ee58:	d0a03f03 	ldbu	r2,-32516(gp)
  80ee5c:	10803fcc 	andi	r2,r2,255
  80ee60:	1004c03a 	cmpne	r2,r2,zero
  80ee64:	1000171e 	bne	r2,zero,80eec4 <OS_Sched+0xb0>
            OS_SchedNew();
  80ee68:	080eee80 	call	80eee8 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
  80ee6c:	d0a04103 	ldbu	r2,-32508(gp)
  80ee70:	d0e04143 	ldbu	r3,-32507(gp)
  80ee74:	11003fcc 	andi	r4,r2,255
  80ee78:	18803fcc 	andi	r2,r3,255
  80ee7c:	20801126 	beq	r4,r2,80eec4 <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
  80ee80:	d0a04103 	ldbu	r2,-32508(gp)
  80ee84:	10803fcc 	andi	r2,r2,255
  80ee88:	00c020b4 	movhi	r3,130
  80ee8c:	18fe1004 	addi	r3,r3,-1984
  80ee90:	1085883a 	add	r2,r2,r2
  80ee94:	1085883a 	add	r2,r2,r2
  80ee98:	10c5883a 	add	r2,r2,r3
  80ee9c:	10800017 	ldw	r2,0(r2)
  80eea0:	d0a04915 	stw	r2,-32476(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
  80eea4:	d0e04917 	ldw	r3,-32476(gp)
  80eea8:	18800e17 	ldw	r2,56(r3)
  80eeac:	10800044 	addi	r2,r2,1
  80eeb0:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
  80eeb4:	d0a04417 	ldw	r2,-32496(gp)
  80eeb8:	10800044 	addi	r2,r2,1
  80eebc:	d0a04415 	stw	r2,-32496(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
  80eec0:	08179440 	call	817944 <OSCtxSw>
  80eec4:	e0bfff17 	ldw	r2,-4(fp)
  80eec8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80eecc:	e0bffd17 	ldw	r2,-12(fp)
  80eed0:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
  80eed4:	e037883a 	mov	sp,fp
  80eed8:	dfc00117 	ldw	ra,4(sp)
  80eedc:	df000017 	ldw	fp,0(sp)
  80eee0:	dec00204 	addi	sp,sp,8
  80eee4:	f800283a 	ret

0080eee8 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
  80eee8:	defffe04 	addi	sp,sp,-8
  80eeec:	df000115 	stw	fp,4(sp)
  80eef0:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
  80eef4:	d0a04b03 	ldbu	r2,-32468(gp)
  80eef8:	10c03fcc 	andi	r3,r2,255
  80eefc:	008020b4 	movhi	r2,130
  80ef00:	10a24304 	addi	r2,r2,-30452
  80ef04:	10c5883a 	add	r2,r2,r3
  80ef08:	10800003 	ldbu	r2,0(r2)
  80ef0c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
  80ef10:	e0bfff03 	ldbu	r2,-4(fp)
  80ef14:	100490fa 	slli	r2,r2,3
  80ef18:	1009883a 	mov	r4,r2
  80ef1c:	e0ffff03 	ldbu	r3,-4(fp)
  80ef20:	d0a04b44 	addi	r2,gp,-32467
  80ef24:	1885883a 	add	r2,r3,r2
  80ef28:	10800003 	ldbu	r2,0(r2)
  80ef2c:	10c03fcc 	andi	r3,r2,255
  80ef30:	008020b4 	movhi	r2,130
  80ef34:	10a24304 	addi	r2,r2,-30452
  80ef38:	10c5883a 	add	r2,r2,r3
  80ef3c:	10800003 	ldbu	r2,0(r2)
  80ef40:	2085883a 	add	r2,r4,r2
  80ef44:	d0a04105 	stb	r2,-32508(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
  80ef48:	e037883a 	mov	sp,fp
  80ef4c:	df000017 	ldw	fp,0(sp)
  80ef50:	dec00104 	addi	sp,sp,4
  80ef54:	f800283a 	ret

0080ef58 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
  80ef58:	defffc04 	addi	sp,sp,-16
  80ef5c:	df000315 	stw	fp,12(sp)
  80ef60:	df000304 	addi	fp,sp,12
  80ef64:	e13ffe15 	stw	r4,-8(fp)
  80ef68:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
  80ef6c:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
  80ef70:	00000d06 	br	80efa8 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
  80ef74:	e0bfff17 	ldw	r2,-4(fp)
  80ef78:	10c00003 	ldbu	r3,0(r2)
  80ef7c:	e0bffe17 	ldw	r2,-8(fp)
  80ef80:	10c00005 	stb	r3,0(r2)
  80ef84:	e0bffe17 	ldw	r2,-8(fp)
  80ef88:	10800044 	addi	r2,r2,1
  80ef8c:	e0bffe15 	stw	r2,-8(fp)
  80ef90:	e0bfff17 	ldw	r2,-4(fp)
  80ef94:	10800044 	addi	r2,r2,1
  80ef98:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80ef9c:	e0bffd03 	ldbu	r2,-12(fp)
  80efa0:	10800044 	addi	r2,r2,1
  80efa4:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80efa8:	e0bfff17 	ldw	r2,-4(fp)
  80efac:	10800003 	ldbu	r2,0(r2)
  80efb0:	10803fcc 	andi	r2,r2,255
  80efb4:	1004c03a 	cmpne	r2,r2,zero
  80efb8:	103fee1e 	bne	r2,zero,80ef74 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
  80efbc:	e0bffe17 	ldw	r2,-8(fp)
  80efc0:	10000005 	stb	zero,0(r2)
    return (len);
  80efc4:	e0bffd03 	ldbu	r2,-12(fp)
}
  80efc8:	e037883a 	mov	sp,fp
  80efcc:	df000017 	ldw	fp,0(sp)
  80efd0:	dec00104 	addi	sp,sp,4
  80efd4:	f800283a 	ret

0080efd8 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
  80efd8:	defffd04 	addi	sp,sp,-12
  80efdc:	df000215 	stw	fp,8(sp)
  80efe0:	df000204 	addi	fp,sp,8
  80efe4:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
  80efe8:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
  80efec:	00000606 	br	80f008 <OS_StrLen+0x30>
        psrc++;
  80eff0:	e0bfff17 	ldw	r2,-4(fp)
  80eff4:	10800044 	addi	r2,r2,1
  80eff8:	e0bfff15 	stw	r2,-4(fp)
        len++;
  80effc:	e0bffe03 	ldbu	r2,-8(fp)
  80f000:	10800044 	addi	r2,r2,1
  80f004:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
  80f008:	e0bfff17 	ldw	r2,-4(fp)
  80f00c:	10800003 	ldbu	r2,0(r2)
  80f010:	10803fcc 	andi	r2,r2,255
  80f014:	1004c03a 	cmpne	r2,r2,zero
  80f018:	103ff51e 	bne	r2,zero,80eff0 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
  80f01c:	e0bffe03 	ldbu	r2,-8(fp)
}
  80f020:	e037883a 	mov	sp,fp
  80f024:	df000017 	ldw	fp,0(sp)
  80f028:	dec00104 	addi	sp,sp,4
  80f02c:	f800283a 	ret

0080f030 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
  80f030:	defffa04 	addi	sp,sp,-24
  80f034:	dfc00515 	stw	ra,20(sp)
  80f038:	df000415 	stw	fp,16(sp)
  80f03c:	df000404 	addi	fp,sp,16
  80f040:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f044:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f048:	0005303a 	rdctl	r2,status
  80f04c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f050:	e0fffd17 	ldw	r3,-12(fp)
  80f054:	00bfff84 	movi	r2,-2
  80f058:	1884703a 	and	r2,r3,r2
  80f05c:	1001703a 	wrctl	status,r2
  
  return context;
  80f060:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
  80f064:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
  80f068:	d0a04017 	ldw	r2,-32512(gp)
  80f06c:	10800044 	addi	r2,r2,1
  80f070:	d0a04015 	stw	r2,-32512(gp)
  80f074:	e0bffe17 	ldw	r2,-8(fp)
  80f078:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f07c:	e0bffc17 	ldw	r2,-16(fp)
  80f080:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
  80f084:	0817df00 	call	817df0 <OSTaskIdleHook>
    }
  80f088:	003fef06 	br	80f048 <OS_TaskIdle+0x18>

0080f08c <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
  80f08c:	defffa04 	addi	sp,sp,-24
  80f090:	dfc00515 	stw	ra,20(sp)
  80f094:	df000415 	stw	fp,16(sp)
  80f098:	df000404 	addi	fp,sp,16
  80f09c:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80f0a0:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80f0a4:	00000206 	br	80f0b0 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
  80f0a8:	01003204 	movi	r4,200
  80f0ac:	081510c0 	call	81510c <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
  80f0b0:	d0a05103 	ldbu	r2,-32444(gp)
  80f0b4:	10803fcc 	andi	r2,r2,255
  80f0b8:	1005003a 	cmpeq	r2,r2,zero
  80f0bc:	103ffa1e 	bne	r2,zero,80f0a8 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
  80f0c0:	d1204517 	ldw	r4,-32492(gp)
  80f0c4:	01401904 	movi	r5,100
  80f0c8:	08019340 	call	801934 <__udivsi3>
  80f0cc:	d0a04515 	stw	r2,-32492(gp)
    if (OSIdleCtrMax == 0L) {
  80f0d0:	d0a04517 	ldw	r2,-32492(gp)
  80f0d4:	1004c03a 	cmpne	r2,r2,zero
  80f0d8:	1000031e 	bne	r2,zero,80f0e8 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
  80f0dc:	d0204705 	stb	zero,-32484(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
  80f0e0:	01003fc4 	movi	r4,255
  80f0e4:	0814d200 	call	814d20 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f0e8:	0005303a 	rdctl	r2,status
  80f0ec:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f0f0:	e0fffd17 	ldw	r3,-12(fp)
  80f0f4:	00bfff84 	movi	r2,-2
  80f0f8:	1884703a 	and	r2,r3,r2
  80f0fc:	1001703a 	wrctl	status,r2
  
  return context;
  80f100:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
  80f104:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
  80f108:	d0a04017 	ldw	r2,-32512(gp)
  80f10c:	d0a05215 	stw	r2,-32440(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
  80f110:	d0204015 	stw	zero,-32512(gp)
  80f114:	e0bffe17 	ldw	r2,-8(fp)
  80f118:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f11c:	e0bffc17 	ldw	r2,-16(fp)
  80f120:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
  80f124:	d1205217 	ldw	r4,-32440(gp)
  80f128:	d1604517 	ldw	r5,-32492(gp)
  80f12c:	08019340 	call	801934 <__udivsi3>
  80f130:	1007883a 	mov	r3,r2
  80f134:	00801904 	movi	r2,100
  80f138:	10c5c83a 	sub	r2,r2,r3
  80f13c:	d0a04705 	stb	r2,-32484(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
  80f140:	0817d800 	call	817d80 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
  80f144:	080f1540 	call	80f154 <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
  80f148:	01001904 	movi	r4,100
  80f14c:	081510c0 	call	81510c <OSTimeDly>
    }
  80f150:	003fe506 	br	80f0e8 <OS_TaskStat+0x5c>

0080f154 <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
  80f154:	defffa04 	addi	sp,sp,-24
  80f158:	dfc00515 	stw	ra,20(sp)
  80f15c:	df000415 	stw	fp,16(sp)
  80f160:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80f164:	e03ffc05 	stb	zero,-16(fp)
  80f168:	00002406 	br	80f1fc <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
  80f16c:	e13ffc03 	ldbu	r4,-16(fp)
  80f170:	e17ffe04 	addi	r5,fp,-8
  80f174:	0814b240 	call	814b24 <OSTaskStkChk>
  80f178:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
  80f17c:	e0bffc43 	ldbu	r2,-15(fp)
  80f180:	1004c03a 	cmpne	r2,r2,zero
  80f184:	10001a1e 	bne	r2,zero,80f1f0 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
  80f188:	e0bffc03 	ldbu	r2,-16(fp)
  80f18c:	00c020b4 	movhi	r3,130
  80f190:	18fe1004 	addi	r3,r3,-1984
  80f194:	1085883a 	add	r2,r2,r2
  80f198:	1085883a 	add	r2,r2,r2
  80f19c:	10c5883a 	add	r2,r2,r3
  80f1a0:	10800017 	ldw	r2,0(r2)
  80f1a4:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
  80f1a8:	e0bffd17 	ldw	r2,-12(fp)
  80f1ac:	1005003a 	cmpeq	r2,r2,zero
  80f1b0:	10000f1e 	bne	r2,zero,80f1f0 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
  80f1b4:	e0bffd17 	ldw	r2,-12(fp)
  80f1b8:	10800060 	cmpeqi	r2,r2,1
  80f1bc:	10000c1e 	bne	r2,zero,80f1f0 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
  80f1c0:	e0bffd17 	ldw	r2,-12(fp)
  80f1c4:	10c00217 	ldw	r3,8(r2)
  80f1c8:	e0bffd17 	ldw	r2,-12(fp)
  80f1cc:	10800317 	ldw	r2,12(r2)
  80f1d0:	1085883a 	add	r2,r2,r2
  80f1d4:	1085883a 	add	r2,r2,r2
  80f1d8:	1887883a 	add	r3,r3,r2
  80f1dc:	e0bffd17 	ldw	r2,-12(fp)
  80f1e0:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
  80f1e4:	e0ffff17 	ldw	r3,-4(fp)
  80f1e8:	e0bffd17 	ldw	r2,-12(fp)
  80f1ec:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
  80f1f0:	e0bffc03 	ldbu	r2,-16(fp)
  80f1f4:	10800044 	addi	r2,r2,1
  80f1f8:	e0bffc05 	stb	r2,-16(fp)
  80f1fc:	e0bffc03 	ldbu	r2,-16(fp)
  80f200:	10800570 	cmpltui	r2,r2,21
  80f204:	103fd91e 	bne	r2,zero,80f16c <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
  80f208:	e037883a 	mov	sp,fp
  80f20c:	dfc00117 	ldw	ra,4(sp)
  80f210:	df000017 	ldw	fp,0(sp)
  80f214:	dec00204 	addi	sp,sp,8
  80f218:	f800283a 	ret

0080f21c <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
  80f21c:	defff104 	addi	sp,sp,-60
  80f220:	dfc00e15 	stw	ra,56(sp)
  80f224:	df000d15 	stw	fp,52(sp)
  80f228:	df000d04 	addi	fp,sp,52
  80f22c:	e17ffb15 	stw	r5,-20(fp)
  80f230:	e1bffc15 	stw	r6,-16(fp)
  80f234:	e0800417 	ldw	r2,16(fp)
  80f238:	e13ffa05 	stb	r4,-24(fp)
  80f23c:	e1fffd0d 	sth	r7,-12(fp)
  80f240:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  80f244:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f248:	0005303a 	rdctl	r2,status
  80f24c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f250:	e0fff717 	ldw	r3,-36(fp)
  80f254:	00bfff84 	movi	r2,-2
  80f258:	1884703a 	and	r2,r3,r2
  80f25c:	1001703a 	wrctl	status,r2
  
  return context;
  80f260:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
  80f264:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
  80f268:	d0a04617 	ldw	r2,-32488(gp)
  80f26c:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
  80f270:	e0bff917 	ldw	r2,-28(fp)
  80f274:	1005003a 	cmpeq	r2,r2,zero
  80f278:	1000941e 	bne	r2,zero,80f4cc <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
  80f27c:	e0bff917 	ldw	r2,-28(fp)
  80f280:	10800517 	ldw	r2,20(r2)
  80f284:	d0a04615 	stw	r2,-32488(gp)
  80f288:	e0bff817 	ldw	r2,-32(fp)
  80f28c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f290:	e0bff617 	ldw	r2,-40(fp)
  80f294:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
  80f298:	e0fff917 	ldw	r3,-28(fp)
  80f29c:	e0bffb17 	ldw	r2,-20(fp)
  80f2a0:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
  80f2a4:	e0fff917 	ldw	r3,-28(fp)
  80f2a8:	e0bffa03 	ldbu	r2,-24(fp)
  80f2ac:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
  80f2b0:	e0bff917 	ldw	r2,-28(fp)
  80f2b4:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
  80f2b8:	e0bff917 	ldw	r2,-28(fp)
  80f2bc:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
  80f2c0:	e0bff917 	ldw	r2,-28(fp)
  80f2c4:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
  80f2c8:	e0fff917 	ldw	r3,-28(fp)
  80f2cc:	e0800317 	ldw	r2,12(fp)
  80f2d0:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
  80f2d4:	e0fff917 	ldw	r3,-28(fp)
  80f2d8:	e0800217 	ldw	r2,8(fp)
  80f2dc:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
  80f2e0:	e0fff917 	ldw	r3,-28(fp)
  80f2e4:	e0bffc17 	ldw	r2,-16(fp)
  80f2e8:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
  80f2ec:	e0fff917 	ldw	r3,-28(fp)
  80f2f0:	e0bffe0b 	ldhu	r2,-8(fp)
  80f2f4:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
  80f2f8:	e0fff917 	ldw	r3,-28(fp)
  80f2fc:	e0bffd0b 	ldhu	r2,-12(fp)
  80f300:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
  80f304:	e0bff917 	ldw	r2,-28(fp)
  80f308:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
  80f30c:	e0bffa03 	ldbu	r2,-24(fp)
  80f310:	1004d0fa 	srli	r2,r2,3
  80f314:	1007883a 	mov	r3,r2
  80f318:	e0bff917 	ldw	r2,-28(fp)
  80f31c:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
  80f320:	e0bffa03 	ldbu	r2,-24(fp)
  80f324:	108001cc 	andi	r2,r2,7
  80f328:	1007883a 	mov	r3,r2
  80f32c:	e0bff917 	ldw	r2,-28(fp)
  80f330:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
  80f334:	e0bff917 	ldw	r2,-28(fp)
  80f338:	10800d03 	ldbu	r2,52(r2)
  80f33c:	10c03fcc 	andi	r3,r2,255
  80f340:	00800044 	movi	r2,1
  80f344:	10c4983a 	sll	r2,r2,r3
  80f348:	1007883a 	mov	r3,r2
  80f34c:	e0bff917 	ldw	r2,-28(fp)
  80f350:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
  80f354:	e0bff917 	ldw	r2,-28(fp)
  80f358:	10800cc3 	ldbu	r2,51(r2)
  80f35c:	10c03fcc 	andi	r3,r2,255
  80f360:	00800044 	movi	r2,1
  80f364:	10c4983a 	sll	r2,r2,r3
  80f368:	1007883a 	mov	r3,r2
  80f36c:	e0bff917 	ldw	r2,-28(fp)
  80f370:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
  80f374:	e0bff917 	ldw	r2,-28(fp)
  80f378:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
  80f37c:	e0bff917 	ldw	r2,-28(fp)
  80f380:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
  80f384:	e0bff917 	ldw	r2,-28(fp)
  80f388:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
  80f38c:	e0bff917 	ldw	r2,-28(fp)
  80f390:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
  80f394:	e0bff917 	ldw	r2,-28(fp)
  80f398:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
  80f39c:	e0bff917 	ldw	r2,-28(fp)
  80f3a0:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
  80f3a4:	e0bff917 	ldw	r2,-28(fp)
  80f3a8:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
  80f3ac:	e0bff917 	ldw	r2,-28(fp)
  80f3b0:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
  80f3b4:	e0bff917 	ldw	r2,-28(fp)
  80f3b8:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
  80f3bc:	e0fff917 	ldw	r3,-28(fp)
  80f3c0:	00800fc4 	movi	r2,63
  80f3c4:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  80f3c8:	e0bff917 	ldw	r2,-28(fp)
  80f3cc:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
  80f3d0:	e13ff917 	ldw	r4,-28(fp)
  80f3d4:	0817e0c0 	call	817e0c <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
  80f3d8:	e13ff917 	ldw	r4,-28(fp)
  80f3dc:	0817d240 	call	817d24 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f3e0:	0005303a 	rdctl	r2,status
  80f3e4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f3e8:	e0fff517 	ldw	r3,-44(fp)
  80f3ec:	00bfff84 	movi	r2,-2
  80f3f0:	1884703a 	and	r2,r3,r2
  80f3f4:	1001703a 	wrctl	status,r2
  
  return context;
  80f3f8:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
  80f3fc:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
  80f400:	e0bffa03 	ldbu	r2,-24(fp)
  80f404:	00c020b4 	movhi	r3,130
  80f408:	18fe1004 	addi	r3,r3,-1984
  80f40c:	1085883a 	add	r2,r2,r2
  80f410:	1085883a 	add	r2,r2,r2
  80f414:	10c7883a 	add	r3,r2,r3
  80f418:	e0bff917 	ldw	r2,-28(fp)
  80f41c:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
  80f420:	d0e04217 	ldw	r3,-32504(gp)
  80f424:	e0bff917 	ldw	r2,-28(fp)
  80f428:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
  80f42c:	e0bff917 	ldw	r2,-28(fp)
  80f430:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
  80f434:	d0a04217 	ldw	r2,-32504(gp)
  80f438:	1005003a 	cmpeq	r2,r2,zero
  80f43c:	1000031e 	bne	r2,zero,80f44c <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
  80f440:	d0e04217 	ldw	r3,-32504(gp)
  80f444:	e0bff917 	ldw	r2,-28(fp)
  80f448:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
  80f44c:	e0bff917 	ldw	r2,-28(fp)
  80f450:	d0a04215 	stw	r2,-32504(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
  80f454:	e0bff917 	ldw	r2,-28(fp)
  80f458:	10c00d83 	ldbu	r3,54(r2)
  80f45c:	d0a04b03 	ldbu	r2,-32468(gp)
  80f460:	1884b03a 	or	r2,r3,r2
  80f464:	d0a04b05 	stb	r2,-32468(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  80f468:	e0bff917 	ldw	r2,-28(fp)
  80f46c:	10800d03 	ldbu	r2,52(r2)
  80f470:	11003fcc 	andi	r4,r2,255
  80f474:	e0bff917 	ldw	r2,-28(fp)
  80f478:	10800d03 	ldbu	r2,52(r2)
  80f47c:	10c03fcc 	andi	r3,r2,255
  80f480:	d0a04b44 	addi	r2,gp,-32467
  80f484:	1885883a 	add	r2,r3,r2
  80f488:	10c00003 	ldbu	r3,0(r2)
  80f48c:	e0bff917 	ldw	r2,-28(fp)
  80f490:	10800d43 	ldbu	r2,53(r2)
  80f494:	1884b03a 	or	r2,r3,r2
  80f498:	1007883a 	mov	r3,r2
  80f49c:	d0a04b44 	addi	r2,gp,-32467
  80f4a0:	2085883a 	add	r2,r4,r2
  80f4a4:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
  80f4a8:	d0a04743 	ldbu	r2,-32483(gp)
  80f4ac:	10800044 	addi	r2,r2,1
  80f4b0:	d0a04745 	stb	r2,-32483(gp)
  80f4b4:	e0bff817 	ldw	r2,-32(fp)
  80f4b8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f4bc:	e0bff417 	ldw	r2,-48(fp)
  80f4c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  80f4c4:	e03fff15 	stw	zero,-4(fp)
  80f4c8:	00000606 	br	80f4e4 <OS_TCBInit+0x2c8>
  80f4cc:	e0bff817 	ldw	r2,-32(fp)
  80f4d0:	e0bff315 	stw	r2,-52(fp)
  80f4d4:	e0bff317 	ldw	r2,-52(fp)
  80f4d8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
  80f4dc:	00801084 	movi	r2,66
  80f4e0:	e0bfff15 	stw	r2,-4(fp)
  80f4e4:	e0bfff17 	ldw	r2,-4(fp)
}
  80f4e8:	e037883a 	mov	sp,fp
  80f4ec:	dfc00117 	ldw	ra,4(sp)
  80f4f0:	df000017 	ldw	fp,0(sp)
  80f4f4:	dec00204 	addi	sp,sp,8
  80f4f8:	f800283a 	ret

0080f4fc <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
  80f4fc:	defffe04 	addi	sp,sp,-8
  80f500:	df000115 	stw	fp,4(sp)
  80f504:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
  80f508:	d0a00f04 	addi	r2,gp,-32708
  80f50c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
  80f510:	d0a01004 	addi	r2,gp,-32704
  80f514:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
  80f518:	d0a01184 	addi	r2,gp,-32698
  80f51c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
  80f520:	d0a01204 	addi	r2,gp,-32696
  80f524:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
  80f528:	d0a01104 	addi	r2,gp,-32700
  80f52c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
  80f530:	d0a01284 	addi	r2,gp,-32694
  80f534:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
  80f538:	d0a01304 	addi	r2,gp,-32692
  80f53c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
  80f540:	d0a01384 	addi	r2,gp,-32690
  80f544:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
  80f548:	d0a01404 	addi	r2,gp,-32688
  80f54c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
  80f550:	d0a01484 	addi	r2,gp,-32686
  80f554:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
  80f558:	d0a01504 	addi	r2,gp,-32684
  80f55c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
  80f560:	d0a01584 	addi	r2,gp,-32682
  80f564:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
  80f568:	d0a01604 	addi	r2,gp,-32680
  80f56c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
  80f570:	d0a01684 	addi	r2,gp,-32678
  80f574:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
  80f578:	d0a01704 	addi	r2,gp,-32676
  80f57c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
  80f580:	d0a01784 	addi	r2,gp,-32674
  80f584:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
  80f588:	d0a01804 	addi	r2,gp,-32672
  80f58c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
  80f590:	d0a01884 	addi	r2,gp,-32670
  80f594:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
  80f598:	d0a01904 	addi	r2,gp,-32668
  80f59c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
  80f5a0:	d0a01984 	addi	r2,gp,-32666
  80f5a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
  80f5a8:	d0a01a04 	addi	r2,gp,-32664
  80f5ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
  80f5b0:	d0a01a84 	addi	r2,gp,-32662
  80f5b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
  80f5b8:	d0a01b04 	addi	r2,gp,-32660
  80f5bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
  80f5c0:	d0a01b84 	addi	r2,gp,-32658
  80f5c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
  80f5c8:	d0a01c04 	addi	r2,gp,-32656
  80f5cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
  80f5d0:	d0a01c84 	addi	r2,gp,-32654
  80f5d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
  80f5d8:	d0a01d04 	addi	r2,gp,-32652
  80f5dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
  80f5e0:	d0a01d84 	addi	r2,gp,-32650
  80f5e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
  80f5e8:	d0a01e04 	addi	r2,gp,-32648
  80f5ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
  80f5f0:	d0a01e84 	addi	r2,gp,-32646
  80f5f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
  80f5f8:	d0a01f04 	addi	r2,gp,-32644
  80f5fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
  80f600:	d0a01f84 	addi	r2,gp,-32642
  80f604:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
  80f608:	d0a02004 	addi	r2,gp,-32640
  80f60c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
  80f610:	d0a02084 	addi	r2,gp,-32638
  80f614:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
  80f618:	d0a02104 	addi	r2,gp,-32636
  80f61c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
  80f620:	d0a02184 	addi	r2,gp,-32634
  80f624:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
  80f628:	d0a02204 	addi	r2,gp,-32632
  80f62c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
  80f630:	d0a02284 	addi	r2,gp,-32630
  80f634:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
  80f638:	d0a02304 	addi	r2,gp,-32628
  80f63c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
  80f640:	d0a02384 	addi	r2,gp,-32626
  80f644:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
  80f648:	d0a02404 	addi	r2,gp,-32624
  80f64c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
  80f650:	d0a02484 	addi	r2,gp,-32622
  80f654:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
  80f658:	d0a02504 	addi	r2,gp,-32620
  80f65c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
  80f660:	d0a02584 	addi	r2,gp,-32618
  80f664:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
  80f668:	d0a02604 	addi	r2,gp,-32616
  80f66c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
  80f670:	d0a02b04 	addi	r2,gp,-32596
  80f674:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
  80f678:	e037883a 	mov	sp,fp
  80f67c:	df000017 	ldw	fp,0(sp)
  80f680:	dec00104 	addi	sp,sp,4
  80f684:	f800283a 	ret

0080f688 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
  80f688:	defff104 	addi	sp,sp,-60
  80f68c:	df000e15 	stw	fp,56(sp)
  80f690:	df000e04 	addi	fp,sp,56
  80f694:	e13ffa15 	stw	r4,-24(fp)
  80f698:	e1fffd15 	stw	r7,-12(fp)
  80f69c:	e17ffb0d 	sth	r5,-20(fp)
  80f6a0:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80f6a4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80f6a8:	e0bffd17 	ldw	r2,-12(fp)
  80f6ac:	1004c03a 	cmpne	r2,r2,zero
  80f6b0:	1000021e 	bne	r2,zero,80f6bc <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
  80f6b4:	e03fff15 	stw	zero,-4(fp)
  80f6b8:	0000bb06 	br	80f9a8 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80f6bc:	e0bffa17 	ldw	r2,-24(fp)
  80f6c0:	1004c03a 	cmpne	r2,r2,zero
  80f6c4:	1000051e 	bne	r2,zero,80f6dc <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80f6c8:	e0fffd17 	ldw	r3,-12(fp)
  80f6cc:	00801b84 	movi	r2,110
  80f6d0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80f6d4:	e03fff15 	stw	zero,-4(fp)
  80f6d8:	0000b306 	br	80f9a8 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  80f6dc:	e0bffa17 	ldw	r2,-24(fp)
  80f6e0:	10800003 	ldbu	r2,0(r2)
  80f6e4:	10803fcc 	andi	r2,r2,255
  80f6e8:	10800160 	cmpeqi	r2,r2,5
  80f6ec:	1000051e 	bne	r2,zero,80f704 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  80f6f0:	e0fffd17 	ldw	r3,-12(fp)
  80f6f4:	00800044 	movi	r2,1
  80f6f8:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  80f6fc:	e03fff15 	stw	zero,-4(fp)
  80f700:	0000a906 	br	80f9a8 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  80f704:	e0fffc03 	ldbu	r3,-16(fp)
  80f708:	00bfe004 	movi	r2,-128
  80f70c:	1884703a 	and	r2,r3,r2
  80f710:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
  80f714:	e0bff943 	ldbu	r2,-27(fp)
  80f718:	1005003a 	cmpeq	r2,r2,zero
  80f71c:	1000061e 	bne	r2,zero,80f738 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
  80f720:	e0bffc03 	ldbu	r2,-16(fp)
  80f724:	10801fcc 	andi	r2,r2,127
  80f728:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
  80f72c:	00800044 	movi	r2,1
  80f730:	e0bff905 	stb	r2,-28(fp)
  80f734:	00000106 	br	80f73c <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
  80f738:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
  80f73c:	e0bffd17 	ldw	r2,-12(fp)
  80f740:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f744:	0005303a 	rdctl	r2,status
  80f748:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f74c:	e0fff717 	ldw	r3,-36(fp)
  80f750:	00bfff84 	movi	r2,-2
  80f754:	1884703a 	and	r2,r3,r2
  80f758:	1001703a 	wrctl	status,r2
  
  return context;
  80f75c:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  80f760:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
  80f764:	e0bffc03 	ldbu	r2,-16(fp)
  80f768:	e0bffe15 	stw	r2,-8(fp)
  80f76c:	e0fffe17 	ldw	r3,-8(fp)
  80f770:	18800060 	cmpeqi	r2,r3,1
  80f774:	1000651e 	bne	r2,zero,80f90c <OSFlagAccept+0x284>
  80f778:	e0fffe17 	ldw	r3,-8(fp)
  80f77c:	18800088 	cmpgei	r2,r3,2
  80f780:	1000041e 	bne	r2,zero,80f794 <OSFlagAccept+0x10c>
  80f784:	e0fffe17 	ldw	r3,-8(fp)
  80f788:	1805003a 	cmpeq	r2,r3,zero
  80f78c:	1000421e 	bne	r2,zero,80f898 <OSFlagAccept+0x210>
  80f790:	00007b06 	br	80f980 <OSFlagAccept+0x2f8>
  80f794:	e0fffe17 	ldw	r3,-8(fp)
  80f798:	188000a0 	cmpeqi	r2,r3,2
  80f79c:	1000041e 	bne	r2,zero,80f7b0 <OSFlagAccept+0x128>
  80f7a0:	e0fffe17 	ldw	r3,-8(fp)
  80f7a4:	188000e0 	cmpeqi	r2,r3,3
  80f7a8:	10001e1e 	bne	r2,zero,80f824 <OSFlagAccept+0x19c>
  80f7ac:	00007406 	br	80f980 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80f7b0:	e0bffa17 	ldw	r2,-24(fp)
  80f7b4:	10c0020b 	ldhu	r3,8(r2)
  80f7b8:	e0bffb0b 	ldhu	r2,-20(fp)
  80f7bc:	1884703a 	and	r2,r3,r2
  80f7c0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80f7c4:	e0fff98b 	ldhu	r3,-26(fp)
  80f7c8:	e0bffb0b 	ldhu	r2,-20(fp)
  80f7cc:	18800d1e 	bne	r3,r2,80f804 <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80f7d0:	e0bff903 	ldbu	r2,-28(fp)
  80f7d4:	10800058 	cmpnei	r2,r2,1
  80f7d8:	10000d1e 	bne	r2,zero,80f810 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  80f7dc:	e0bffa17 	ldw	r2,-24(fp)
  80f7e0:	1080020b 	ldhu	r2,8(r2)
  80f7e4:	1007883a 	mov	r3,r2
  80f7e8:	e0bff98b 	ldhu	r2,-26(fp)
  80f7ec:	0084303a 	nor	r2,zero,r2
  80f7f0:	1884703a 	and	r2,r3,r2
  80f7f4:	1007883a 	mov	r3,r2
  80f7f8:	e0bffa17 	ldw	r2,-24(fp)
  80f7fc:	10c0020d 	sth	r3,8(r2)
  80f800:	00000306 	br	80f810 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80f804:	e0fffd17 	ldw	r3,-12(fp)
  80f808:	00801c04 	movi	r2,112
  80f80c:	18800005 	stb	r2,0(r3)
  80f810:	e0bff817 	ldw	r2,-32(fp)
  80f814:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f818:	e0bff617 	ldw	r2,-40(fp)
  80f81c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80f820:	00005f06 	br	80f9a0 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
  80f824:	e0bffa17 	ldw	r2,-24(fp)
  80f828:	10c0020b 	ldhu	r3,8(r2)
  80f82c:	e0bffb0b 	ldhu	r2,-20(fp)
  80f830:	1884703a 	and	r2,r3,r2
  80f834:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  80f838:	e0bff98b 	ldhu	r2,-26(fp)
  80f83c:	1005003a 	cmpeq	r2,r2,zero
  80f840:	10000d1e 	bne	r2,zero,80f878 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80f844:	e0bff903 	ldbu	r2,-28(fp)
  80f848:	10800058 	cmpnei	r2,r2,1
  80f84c:	10000d1e 	bne	r2,zero,80f884 <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  80f850:	e0bffa17 	ldw	r2,-24(fp)
  80f854:	1080020b 	ldhu	r2,8(r2)
  80f858:	1007883a 	mov	r3,r2
  80f85c:	e0bff98b 	ldhu	r2,-26(fp)
  80f860:	0084303a 	nor	r2,zero,r2
  80f864:	1884703a 	and	r2,r3,r2
  80f868:	1007883a 	mov	r3,r2
  80f86c:	e0bffa17 	ldw	r2,-24(fp)
  80f870:	10c0020d 	sth	r3,8(r2)
  80f874:	00000306 	br	80f884 <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80f878:	e0fffd17 	ldw	r3,-12(fp)
  80f87c:	00801c04 	movi	r2,112
  80f880:	18800005 	stb	r2,0(r3)
  80f884:	e0bff817 	ldw	r2,-32(fp)
  80f888:	e0bff515 	stw	r2,-44(fp)
  80f88c:	e0bff517 	ldw	r2,-44(fp)
  80f890:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80f894:	00004206 	br	80f9a0 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  80f898:	e0bffa17 	ldw	r2,-24(fp)
  80f89c:	1080020b 	ldhu	r2,8(r2)
  80f8a0:	0084303a 	nor	r2,zero,r2
  80f8a4:	1007883a 	mov	r3,r2
  80f8a8:	e0bffb0b 	ldhu	r2,-20(fp)
  80f8ac:	1884703a 	and	r2,r3,r2
  80f8b0:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  80f8b4:	e0fff98b 	ldhu	r3,-26(fp)
  80f8b8:	e0bffb0b 	ldhu	r2,-20(fp)
  80f8bc:	18800b1e 	bne	r3,r2,80f8ec <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80f8c0:	e0bff903 	ldbu	r2,-28(fp)
  80f8c4:	10800058 	cmpnei	r2,r2,1
  80f8c8:	10000b1e 	bne	r2,zero,80f8f8 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  80f8cc:	e0bffa17 	ldw	r2,-24(fp)
  80f8d0:	10c0020b 	ldhu	r3,8(r2)
  80f8d4:	e0bff98b 	ldhu	r2,-26(fp)
  80f8d8:	1884b03a 	or	r2,r3,r2
  80f8dc:	1007883a 	mov	r3,r2
  80f8e0:	e0bffa17 	ldw	r2,-24(fp)
  80f8e4:	10c0020d 	sth	r3,8(r2)
  80f8e8:	00000306 	br	80f8f8 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80f8ec:	e0fffd17 	ldw	r3,-12(fp)
  80f8f0:	00801c04 	movi	r2,112
  80f8f4:	18800005 	stb	r2,0(r3)
  80f8f8:	e0bff817 	ldw	r2,-32(fp)
  80f8fc:	e0bff415 	stw	r2,-48(fp)
  80f900:	e0bff417 	ldw	r2,-48(fp)
  80f904:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80f908:	00002506 	br	80f9a0 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  80f90c:	e0bffa17 	ldw	r2,-24(fp)
  80f910:	1080020b 	ldhu	r2,8(r2)
  80f914:	0084303a 	nor	r2,zero,r2
  80f918:	1007883a 	mov	r3,r2
  80f91c:	e0bffb0b 	ldhu	r2,-20(fp)
  80f920:	1884703a 	and	r2,r3,r2
  80f924:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  80f928:	e0bff98b 	ldhu	r2,-26(fp)
  80f92c:	1005003a 	cmpeq	r2,r2,zero
  80f930:	10000b1e 	bne	r2,zero,80f960 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  80f934:	e0bff903 	ldbu	r2,-28(fp)
  80f938:	10800058 	cmpnei	r2,r2,1
  80f93c:	10000b1e 	bne	r2,zero,80f96c <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  80f940:	e0bffa17 	ldw	r2,-24(fp)
  80f944:	10c0020b 	ldhu	r3,8(r2)
  80f948:	e0bff98b 	ldhu	r2,-26(fp)
  80f94c:	1884b03a 	or	r2,r3,r2
  80f950:	1007883a 	mov	r3,r2
  80f954:	e0bffa17 	ldw	r2,-24(fp)
  80f958:	10c0020d 	sth	r3,8(r2)
  80f95c:	00000306 	br	80f96c <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
  80f960:	e0fffd17 	ldw	r3,-12(fp)
  80f964:	00801c04 	movi	r2,112
  80f968:	18800005 	stb	r2,0(r3)
  80f96c:	e0bff817 	ldw	r2,-32(fp)
  80f970:	e0bff315 	stw	r2,-52(fp)
  80f974:	e0bff317 	ldw	r2,-52(fp)
  80f978:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
  80f97c:	00000806 	br	80f9a0 <OSFlagAccept+0x318>
  80f980:	e0bff817 	ldw	r2,-32(fp)
  80f984:	e0bff215 	stw	r2,-56(fp)
  80f988:	e0bff217 	ldw	r2,-56(fp)
  80f98c:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  80f990:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
  80f994:	e0fffd17 	ldw	r3,-12(fp)
  80f998:	00801bc4 	movi	r2,111
  80f99c:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
  80f9a0:	e0bff98b 	ldhu	r2,-26(fp)
  80f9a4:	e0bfff15 	stw	r2,-4(fp)
  80f9a8:	e0bfff17 	ldw	r2,-4(fp)
}
  80f9ac:	e037883a 	mov	sp,fp
  80f9b0:	df000017 	ldw	fp,0(sp)
  80f9b4:	dec00104 	addi	sp,sp,4
  80f9b8:	f800283a 	ret

0080f9bc <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
  80f9bc:	defff704 	addi	sp,sp,-36
  80f9c0:	df000815 	stw	fp,32(sp)
  80f9c4:	df000804 	addi	fp,sp,32
  80f9c8:	e17ffe15 	stw	r5,-8(fp)
  80f9cc:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
  80f9d0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
  80f9d4:	e0bffe17 	ldw	r2,-8(fp)
  80f9d8:	1004c03a 	cmpne	r2,r2,zero
  80f9dc:	1000021e 	bne	r2,zero,80f9e8 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
  80f9e0:	e03fff15 	stw	zero,-4(fp)
  80f9e4:	00003f06 	br	80fae4 <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
  80f9e8:	008020b4 	movhi	r2,130
  80f9ec:	10a98904 	addi	r2,r2,-23004
  80f9f0:	10800003 	ldbu	r2,0(r2)
  80f9f4:	10803fcc 	andi	r2,r2,255
  80f9f8:	1005003a 	cmpeq	r2,r2,zero
  80f9fc:	1000051e 	bne	r2,zero,80fa14 <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
  80fa00:	e0fffe17 	ldw	r3,-8(fp)
  80fa04:	00800404 	movi	r2,16
  80fa08:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
  80fa0c:	e03fff15 	stw	zero,-4(fp)
  80fa10:	00003406 	br	80fae4 <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fa14:	0005303a 	rdctl	r2,status
  80fa18:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fa1c:	e0fffa17 	ldw	r3,-24(fp)
  80fa20:	00bfff84 	movi	r2,-2
  80fa24:	1884703a 	and	r2,r3,r2
  80fa28:	1001703a 	wrctl	status,r2
  
  return context;
  80fa2c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80fa30:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
  80fa34:	008020b4 	movhi	r2,130
  80fa38:	10a98c04 	addi	r2,r2,-22992
  80fa3c:	10800017 	ldw	r2,0(r2)
  80fa40:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
  80fa44:	e0bffc17 	ldw	r2,-16(fp)
  80fa48:	1005003a 	cmpeq	r2,r2,zero
  80fa4c:	10001c1e 	bne	r2,zero,80fac0 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
  80fa50:	008020b4 	movhi	r2,130
  80fa54:	10a98c04 	addi	r2,r2,-22992
  80fa58:	10800017 	ldw	r2,0(r2)
  80fa5c:	10800117 	ldw	r2,4(r2)
  80fa60:	1007883a 	mov	r3,r2
  80fa64:	008020b4 	movhi	r2,130
  80fa68:	10a98c04 	addi	r2,r2,-22992
  80fa6c:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
  80fa70:	e0fffc17 	ldw	r3,-16(fp)
  80fa74:	00800144 	movi	r2,5
  80fa78:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
  80fa7c:	e0fffc17 	ldw	r3,-16(fp)
  80fa80:	e0bffd0b 	ldhu	r2,-12(fp)
  80fa84:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
  80fa88:	e0bffc17 	ldw	r2,-16(fp)
  80fa8c:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
  80fa90:	e0fffc17 	ldw	r3,-16(fp)
  80fa94:	00800fc4 	movi	r2,63
  80fa98:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80fa9c:	e0bffc17 	ldw	r2,-16(fp)
  80faa0:	100002c5 	stb	zero,11(r2)
  80faa4:	e0bffb17 	ldw	r2,-20(fp)
  80faa8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80faac:	e0bff917 	ldw	r2,-28(fp)
  80fab0:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
  80fab4:	e0bffe17 	ldw	r2,-8(fp)
  80fab8:	10000005 	stb	zero,0(r2)
  80fabc:	00000706 	br	80fadc <OSFlagCreate+0x120>
  80fac0:	e0bffb17 	ldw	r2,-20(fp)
  80fac4:	e0bff815 	stw	r2,-32(fp)
  80fac8:	e0bff817 	ldw	r2,-32(fp)
  80facc:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
  80fad0:	e0fffe17 	ldw	r3,-8(fp)
  80fad4:	00801c84 	movi	r2,114
  80fad8:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
  80fadc:	e0bffc17 	ldw	r2,-16(fp)
  80fae0:	e0bfff15 	stw	r2,-4(fp)
  80fae4:	e0bfff17 	ldw	r2,-4(fp)
}
  80fae8:	e037883a 	mov	sp,fp
  80faec:	df000017 	ldw	fp,0(sp)
  80faf0:	dec00104 	addi	sp,sp,4
  80faf4:	f800283a 	ret

0080faf8 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
  80faf8:	defff004 	addi	sp,sp,-64
  80fafc:	dfc00f15 	stw	ra,60(sp)
  80fb00:	df000e15 	stw	fp,56(sp)
  80fb04:	df000e04 	addi	fp,sp,56
  80fb08:	e13ffb15 	stw	r4,-20(fp)
  80fb0c:	e1bffd15 	stw	r6,-12(fp)
  80fb10:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  80fb14:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  80fb18:	e0bffd17 	ldw	r2,-12(fp)
  80fb1c:	1004c03a 	cmpne	r2,r2,zero
  80fb20:	1000031e 	bne	r2,zero,80fb30 <OSFlagDel+0x38>
        return (pgrp);
  80fb24:	e0bffb17 	ldw	r2,-20(fp)
  80fb28:	e0bfff15 	stw	r2,-4(fp)
  80fb2c:	00009606 	br	80fd88 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  80fb30:	e0bffb17 	ldw	r2,-20(fp)
  80fb34:	1004c03a 	cmpne	r2,r2,zero
  80fb38:	1000061e 	bne	r2,zero,80fb54 <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80fb3c:	e0fffd17 	ldw	r3,-12(fp)
  80fb40:	00801b84 	movi	r2,110
  80fb44:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80fb48:	e0fffb17 	ldw	r3,-20(fp)
  80fb4c:	e0ffff15 	stw	r3,-4(fp)
  80fb50:	00008d06 	br	80fd88 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  80fb54:	008020b4 	movhi	r2,130
  80fb58:	10a98904 	addi	r2,r2,-23004
  80fb5c:	10800003 	ldbu	r2,0(r2)
  80fb60:	10803fcc 	andi	r2,r2,255
  80fb64:	1005003a 	cmpeq	r2,r2,zero
  80fb68:	1000061e 	bne	r2,zero,80fb84 <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  80fb6c:	e0fffd17 	ldw	r3,-12(fp)
  80fb70:	008003c4 	movi	r2,15
  80fb74:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80fb78:	e0bffb17 	ldw	r2,-20(fp)
  80fb7c:	e0bfff15 	stw	r2,-4(fp)
  80fb80:	00008106 	br	80fd88 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
  80fb84:	e0bffb17 	ldw	r2,-20(fp)
  80fb88:	10800003 	ldbu	r2,0(r2)
  80fb8c:	10803fcc 	andi	r2,r2,255
  80fb90:	10800160 	cmpeqi	r2,r2,5
  80fb94:	1000061e 	bne	r2,zero,80fbb0 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
  80fb98:	e0fffd17 	ldw	r3,-12(fp)
  80fb9c:	00800044 	movi	r2,1
  80fba0:	18800005 	stb	r2,0(r3)
        return (pgrp);
  80fba4:	e0fffb17 	ldw	r3,-20(fp)
  80fba8:	e0ffff15 	stw	r3,-4(fp)
  80fbac:	00007606 	br	80fd88 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fbb0:	0005303a 	rdctl	r2,status
  80fbb4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fbb8:	e0fff617 	ldw	r3,-40(fp)
  80fbbc:	00bfff84 	movi	r2,-2
  80fbc0:	1884703a 	and	r2,r3,r2
  80fbc4:	1001703a 	wrctl	status,r2
  
  return context;
  80fbc8:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  80fbcc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
  80fbd0:	e0bffb17 	ldw	r2,-20(fp)
  80fbd4:	10800117 	ldw	r2,4(r2)
  80fbd8:	1005003a 	cmpeq	r2,r2,zero
  80fbdc:	1000031e 	bne	r2,zero,80fbec <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  80fbe0:	00800044 	movi	r2,1
  80fbe4:	e0bffa05 	stb	r2,-24(fp)
  80fbe8:	00000106 	br	80fbf0 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  80fbec:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  80fbf0:	e0bffc03 	ldbu	r2,-16(fp)
  80fbf4:	e0bffe15 	stw	r2,-8(fp)
  80fbf8:	e0fffe17 	ldw	r3,-8(fp)
  80fbfc:	1805003a 	cmpeq	r2,r3,zero
  80fc00:	1000041e 	bne	r2,zero,80fc14 <OSFlagDel+0x11c>
  80fc04:	e0fffe17 	ldw	r3,-8(fp)
  80fc08:	18800060 	cmpeqi	r2,r3,1
  80fc0c:	1000281e 	bne	r2,zero,80fcb0 <OSFlagDel+0x1b8>
  80fc10:	00005206 	br	80fd5c <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
  80fc14:	e0bffa03 	ldbu	r2,-24(fp)
  80fc18:	1004c03a 	cmpne	r2,r2,zero
  80fc1c:	10001a1e 	bne	r2,zero,80fc88 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
  80fc20:	e0fffb17 	ldw	r3,-20(fp)
  80fc24:	00800fc4 	movi	r2,63
  80fc28:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80fc2c:	e0bffb17 	ldw	r2,-20(fp)
  80fc30:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80fc34:	e0bffb17 	ldw	r2,-20(fp)
  80fc38:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
  80fc3c:	008020b4 	movhi	r2,130
  80fc40:	10a98c04 	addi	r2,r2,-22992
  80fc44:	10c00017 	ldw	r3,0(r2)
  80fc48:	e0bffb17 	ldw	r2,-20(fp)
  80fc4c:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80fc50:	e0bffb17 	ldw	r2,-20(fp)
  80fc54:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
  80fc58:	00c020b4 	movhi	r3,130
  80fc5c:	18e98c04 	addi	r3,r3,-22992
  80fc60:	e0bffb17 	ldw	r2,-20(fp)
  80fc64:	18800015 	stw	r2,0(r3)
  80fc68:	e0bff717 	ldw	r2,-36(fp)
  80fc6c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fc70:	e0bff517 	ldw	r2,-44(fp)
  80fc74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
  80fc78:	e0bffd17 	ldw	r2,-12(fp)
  80fc7c:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
  80fc80:	e03ff815 	stw	zero,-32(fp)
  80fc84:	00003e06 	br	80fd80 <OSFlagDel+0x288>
  80fc88:	e0bff717 	ldw	r2,-36(fp)
  80fc8c:	e0bff415 	stw	r2,-48(fp)
  80fc90:	e0bff417 	ldw	r2,-48(fp)
  80fc94:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
  80fc98:	e0fffd17 	ldw	r3,-12(fp)
  80fc9c:	00801244 	movi	r2,73
  80fca0:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
  80fca4:	e0bffb17 	ldw	r2,-20(fp)
  80fca8:	e0bff815 	stw	r2,-32(fp)
             }
             break;
  80fcac:	00003406 	br	80fd80 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  80fcb0:	e0bffb17 	ldw	r2,-20(fp)
  80fcb4:	10800117 	ldw	r2,4(r2)
  80fcb8:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80fcbc:	00000606 	br	80fcd8 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
  80fcc0:	e13ff917 	ldw	r4,-28(fp)
  80fcc4:	000b883a 	mov	r5,zero
  80fcc8:	0810e080 	call	810e08 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  80fccc:	e0bff917 	ldw	r2,-28(fp)
  80fcd0:	10800017 	ldw	r2,0(r2)
  80fcd4:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
  80fcd8:	e0bff917 	ldw	r2,-28(fp)
  80fcdc:	1004c03a 	cmpne	r2,r2,zero
  80fce0:	103ff71e 	bne	r2,zero,80fcc0 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
  80fce4:	e0fffb17 	ldw	r3,-20(fp)
  80fce8:	00800fc4 	movi	r2,63
  80fcec:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
  80fcf0:	e0bffb17 	ldw	r2,-20(fp)
  80fcf4:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  80fcf8:	e0bffb17 	ldw	r2,-20(fp)
  80fcfc:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
  80fd00:	008020b4 	movhi	r2,130
  80fd04:	10a98c04 	addi	r2,r2,-22992
  80fd08:	10c00017 	ldw	r3,0(r2)
  80fd0c:	e0bffb17 	ldw	r2,-20(fp)
  80fd10:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
  80fd14:	e0bffb17 	ldw	r2,-20(fp)
  80fd18:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
  80fd1c:	00c020b4 	movhi	r3,130
  80fd20:	18e98c04 	addi	r3,r3,-22992
  80fd24:	e0bffb17 	ldw	r2,-20(fp)
  80fd28:	18800015 	stw	r2,0(r3)
  80fd2c:	e0bff717 	ldw	r2,-36(fp)
  80fd30:	e0bff315 	stw	r2,-52(fp)
  80fd34:	e0bff317 	ldw	r2,-52(fp)
  80fd38:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  80fd3c:	e0bffa03 	ldbu	r2,-24(fp)
  80fd40:	10800058 	cmpnei	r2,r2,1
  80fd44:	1000011e 	bne	r2,zero,80fd4c <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  80fd48:	080ee140 	call	80ee14 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
  80fd4c:	e0bffd17 	ldw	r2,-12(fp)
  80fd50:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
  80fd54:	e03ff815 	stw	zero,-32(fp)
             break;
  80fd58:	00000906 	br	80fd80 <OSFlagDel+0x288>
  80fd5c:	e0bff717 	ldw	r2,-36(fp)
  80fd60:	e0bff215 	stw	r2,-56(fp)
  80fd64:	e0bff217 	ldw	r2,-56(fp)
  80fd68:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
  80fd6c:	e0fffd17 	ldw	r3,-12(fp)
  80fd70:	008001c4 	movi	r2,7
  80fd74:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
  80fd78:	e0bffb17 	ldw	r2,-20(fp)
  80fd7c:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
  80fd80:	e0bff817 	ldw	r2,-32(fp)
  80fd84:	e0bfff15 	stw	r2,-4(fp)
  80fd88:	e0bfff17 	ldw	r2,-4(fp)
}
  80fd8c:	e037883a 	mov	sp,fp
  80fd90:	dfc00117 	ldw	ra,4(sp)
  80fd94:	df000017 	ldw	fp,0(sp)
  80fd98:	dec00204 	addi	sp,sp,8
  80fd9c:	f800283a 	ret

0080fda0 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80fda0:	defff504 	addi	sp,sp,-44
  80fda4:	dfc00a15 	stw	ra,40(sp)
  80fda8:	df000915 	stw	fp,36(sp)
  80fdac:	df000904 	addi	fp,sp,36
  80fdb0:	e13ffc15 	stw	r4,-16(fp)
  80fdb4:	e17ffd15 	stw	r5,-12(fp)
  80fdb8:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80fdbc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80fdc0:	e0bffe17 	ldw	r2,-8(fp)
  80fdc4:	1004c03a 	cmpne	r2,r2,zero
  80fdc8:	1000021e 	bne	r2,zero,80fdd4 <OSFlagNameGet+0x34>
        return (0);
  80fdcc:	e03fff15 	stw	zero,-4(fp)
  80fdd0:	00003e06 	br	80fecc <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80fdd4:	e0bffc17 	ldw	r2,-16(fp)
  80fdd8:	1004c03a 	cmpne	r2,r2,zero
  80fddc:	1000051e 	bne	r2,zero,80fdf4 <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80fde0:	e0fffe17 	ldw	r3,-8(fp)
  80fde4:	00801b84 	movi	r2,110
  80fde8:	18800005 	stb	r2,0(r3)
        return (0);
  80fdec:	e03fff15 	stw	zero,-4(fp)
  80fdf0:	00003606 	br	80fecc <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80fdf4:	e0bffd17 	ldw	r2,-12(fp)
  80fdf8:	1004c03a 	cmpne	r2,r2,zero
  80fdfc:	1000051e 	bne	r2,zero,80fe14 <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  80fe00:	e0fffe17 	ldw	r3,-8(fp)
  80fe04:	00800304 	movi	r2,12
  80fe08:	18800005 	stb	r2,0(r3)
        return (0);
  80fe0c:	e03fff15 	stw	zero,-4(fp)
  80fe10:	00002e06 	br	80fecc <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80fe14:	008020b4 	movhi	r2,130
  80fe18:	10a98904 	addi	r2,r2,-23004
  80fe1c:	10800003 	ldbu	r2,0(r2)
  80fe20:	10803fcc 	andi	r2,r2,255
  80fe24:	1005003a 	cmpeq	r2,r2,zero
  80fe28:	1000051e 	bne	r2,zero,80fe40 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  80fe2c:	e0fffe17 	ldw	r3,-8(fp)
  80fe30:	00800444 	movi	r2,17
  80fe34:	18800005 	stb	r2,0(r3)
        return (0);
  80fe38:	e03fff15 	stw	zero,-4(fp)
  80fe3c:	00002306 	br	80fecc <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fe40:	0005303a 	rdctl	r2,status
  80fe44:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fe48:	e0fff917 	ldw	r3,-28(fp)
  80fe4c:	00bfff84 	movi	r2,-2
  80fe50:	1884703a 	and	r2,r3,r2
  80fe54:	1001703a 	wrctl	status,r2
  
  return context;
  80fe58:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  80fe5c:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80fe60:	e0bffc17 	ldw	r2,-16(fp)
  80fe64:	10800003 	ldbu	r2,0(r2)
  80fe68:	10803fcc 	andi	r2,r2,255
  80fe6c:	10800160 	cmpeqi	r2,r2,5
  80fe70:	1000091e 	bne	r2,zero,80fe98 <OSFlagNameGet+0xf8>
  80fe74:	e0bffa17 	ldw	r2,-24(fp)
  80fe78:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fe7c:	e0bff817 	ldw	r2,-32(fp)
  80fe80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80fe84:	e0fffe17 	ldw	r3,-8(fp)
  80fe88:	00800044 	movi	r2,1
  80fe8c:	18800005 	stb	r2,0(r3)
        return (0);
  80fe90:	e03fff15 	stw	zero,-4(fp)
  80fe94:	00000d06 	br	80fecc <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
  80fe98:	e0bffc17 	ldw	r2,-16(fp)
  80fe9c:	11400284 	addi	r5,r2,10
  80fea0:	e13ffd17 	ldw	r4,-12(fp)
  80fea4:	080ef580 	call	80ef58 <OS_StrCopy>
  80fea8:	e0bffb05 	stb	r2,-20(fp)
  80feac:	e0bffa17 	ldw	r2,-24(fp)
  80feb0:	e0bff715 	stw	r2,-36(fp)
  80feb4:	e0bff717 	ldw	r2,-36(fp)
  80feb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  80febc:	e0bffe17 	ldw	r2,-8(fp)
  80fec0:	10000005 	stb	zero,0(r2)
    return (len);
  80fec4:	e0bffb03 	ldbu	r2,-20(fp)
  80fec8:	e0bfff15 	stw	r2,-4(fp)
  80fecc:	e0bfff17 	ldw	r2,-4(fp)
}
  80fed0:	e037883a 	mov	sp,fp
  80fed4:	dfc00117 	ldw	ra,4(sp)
  80fed8:	df000017 	ldw	fp,0(sp)
  80fedc:	dec00204 	addi	sp,sp,8
  80fee0:	f800283a 	ret

0080fee4 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
  80fee4:	defff504 	addi	sp,sp,-44
  80fee8:	dfc00a15 	stw	ra,40(sp)
  80feec:	df000915 	stw	fp,36(sp)
  80fef0:	df000904 	addi	fp,sp,36
  80fef4:	e13ffd15 	stw	r4,-12(fp)
  80fef8:	e17ffe15 	stw	r5,-8(fp)
  80fefc:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  80ff00:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  80ff04:	e0bfff17 	ldw	r2,-4(fp)
  80ff08:	1005003a 	cmpeq	r2,r2,zero
  80ff0c:	1000451e 	bne	r2,zero,810024 <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
  80ff10:	e0bffd17 	ldw	r2,-12(fp)
  80ff14:	1004c03a 	cmpne	r2,r2,zero
  80ff18:	1000041e 	bne	r2,zero,80ff2c <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  80ff1c:	e0ffff17 	ldw	r3,-4(fp)
  80ff20:	00801b84 	movi	r2,110
  80ff24:	18800005 	stb	r2,0(r3)
        return;
  80ff28:	00003e06 	br	810024 <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  80ff2c:	e0bffe17 	ldw	r2,-8(fp)
  80ff30:	1004c03a 	cmpne	r2,r2,zero
  80ff34:	1000041e 	bne	r2,zero,80ff48 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  80ff38:	e0ffff17 	ldw	r3,-4(fp)
  80ff3c:	00800304 	movi	r2,12
  80ff40:	18800005 	stb	r2,0(r3)
        return;
  80ff44:	00003706 	br	810024 <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  80ff48:	008020b4 	movhi	r2,130
  80ff4c:	10a98904 	addi	r2,r2,-23004
  80ff50:	10800003 	ldbu	r2,0(r2)
  80ff54:	10803fcc 	andi	r2,r2,255
  80ff58:	1005003a 	cmpeq	r2,r2,zero
  80ff5c:	1000041e 	bne	r2,zero,80ff70 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  80ff60:	e0ffff17 	ldw	r3,-4(fp)
  80ff64:	00800484 	movi	r2,18
  80ff68:	18800005 	stb	r2,0(r3)
        return;
  80ff6c:	00002d06 	br	810024 <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ff70:	0005303a 	rdctl	r2,status
  80ff74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ff78:	e0fffa17 	ldw	r3,-24(fp)
  80ff7c:	00bfff84 	movi	r2,-2
  80ff80:	1884703a 	and	r2,r3,r2
  80ff84:	1001703a 	wrctl	status,r2
  
  return context;
  80ff88:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  80ff8c:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
  80ff90:	e0bffd17 	ldw	r2,-12(fp)
  80ff94:	10800003 	ldbu	r2,0(r2)
  80ff98:	10803fcc 	andi	r2,r2,255
  80ff9c:	10800160 	cmpeqi	r2,r2,5
  80ffa0:	1000081e 	bne	r2,zero,80ffc4 <OSFlagNameSet+0xe0>
  80ffa4:	e0bffb17 	ldw	r2,-20(fp)
  80ffa8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ffac:	e0bff917 	ldw	r2,-28(fp)
  80ffb0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
  80ffb4:	e0ffff17 	ldw	r3,-4(fp)
  80ffb8:	00800044 	movi	r2,1
  80ffbc:	18800005 	stb	r2,0(r3)
        return;
  80ffc0:	00001806 	br	810024 <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  80ffc4:	e13ffe17 	ldw	r4,-8(fp)
  80ffc8:	080efd80 	call	80efd8 <OS_StrLen>
  80ffcc:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
  80ffd0:	e0bffc03 	ldbu	r2,-16(fp)
  80ffd4:	10800830 	cmpltui	r2,r2,32
  80ffd8:	1000081e 	bne	r2,zero,80fffc <OSFlagNameSet+0x118>
  80ffdc:	e0bffb17 	ldw	r2,-20(fp)
  80ffe0:	e0bff815 	stw	r2,-32(fp)
  80ffe4:	e0bff817 	ldw	r2,-32(fp)
  80ffe8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
  80ffec:	e0ffff17 	ldw	r3,-4(fp)
  80fff0:	00801cc4 	movi	r2,115
  80fff4:	18800005 	stb	r2,0(r3)
        return;
  80fff8:	00000a06 	br	810024 <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
  80fffc:	e0bffd17 	ldw	r2,-12(fp)
  810000:	11000284 	addi	r4,r2,10
  810004:	e17ffe17 	ldw	r5,-8(fp)
  810008:	080ef580 	call	80ef58 <OS_StrCopy>
  81000c:	e0bffb17 	ldw	r2,-20(fp)
  810010:	e0bff715 	stw	r2,-36(fp)
  810014:	e0bff717 	ldw	r2,-36(fp)
  810018:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81001c:	e0bfff17 	ldw	r2,-4(fp)
  810020:	10000005 	stb	zero,0(r2)
    return;
}
  810024:	e037883a 	mov	sp,fp
  810028:	dfc00117 	ldw	ra,4(sp)
  81002c:	df000017 	ldw	fp,0(sp)
  810030:	dec00204 	addi	sp,sp,8
  810034:	f800283a 	ret

00810038 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
  810038:	deffe004 	addi	sp,sp,-128
  81003c:	dfc01f15 	stw	ra,124(sp)
  810040:	df001e15 	stw	fp,120(sp)
  810044:	df001e04 	addi	fp,sp,120
  810048:	e13ff915 	stw	r4,-28(fp)
  81004c:	e17ffa0d 	sth	r5,-24(fp)
  810050:	e1bffb05 	stb	r6,-20(fp)
  810054:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  810058:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  81005c:	e0800217 	ldw	r2,8(fp)
  810060:	1004c03a 	cmpne	r2,r2,zero
  810064:	1000021e 	bne	r2,zero,810070 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
  810068:	e03fff15 	stw	zero,-4(fp)
  81006c:	00017d06 	br	810664 <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
  810070:	e0bff917 	ldw	r2,-28(fp)
  810074:	1004c03a 	cmpne	r2,r2,zero
  810078:	1000051e 	bne	r2,zero,810090 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  81007c:	e0c00217 	ldw	r3,8(fp)
  810080:	00801b84 	movi	r2,110
  810084:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  810088:	e03fff15 	stw	zero,-4(fp)
  81008c:	00017506 	br	810664 <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  810090:	008020b4 	movhi	r2,130
  810094:	10a98904 	addi	r2,r2,-23004
  810098:	10800003 	ldbu	r2,0(r2)
  81009c:	10803fcc 	andi	r2,r2,255
  8100a0:	1005003a 	cmpeq	r2,r2,zero
  8100a4:	1000051e 	bne	r2,zero,8100bc <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
  8100a8:	e0c00217 	ldw	r3,8(fp)
  8100ac:	00800084 	movi	r2,2
  8100b0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8100b4:	e03fff15 	stw	zero,-4(fp)
  8100b8:	00016a06 	br	810664 <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
  8100bc:	008020b4 	movhi	r2,130
  8100c0:	10a97b04 	addi	r2,r2,-23060
  8100c4:	10800003 	ldbu	r2,0(r2)
  8100c8:	10803fcc 	andi	r2,r2,255
  8100cc:	1005003a 	cmpeq	r2,r2,zero
  8100d0:	1000051e 	bne	r2,zero,8100e8 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
  8100d4:	e0c00217 	ldw	r3,8(fp)
  8100d8:	00800344 	movi	r2,13
  8100dc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  8100e0:	e03fff15 	stw	zero,-4(fp)
  8100e4:	00015f06 	br	810664 <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
  8100e8:	e0bff917 	ldw	r2,-28(fp)
  8100ec:	10800003 	ldbu	r2,0(r2)
  8100f0:	10803fcc 	andi	r2,r2,255
  8100f4:	10800160 	cmpeqi	r2,r2,5
  8100f8:	1000051e 	bne	r2,zero,810110 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
  8100fc:	e0c00217 	ldw	r3,8(fp)
  810100:	00800044 	movi	r2,1
  810104:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  810108:	e03fff15 	stw	zero,-4(fp)
  81010c:	00015506 	br	810664 <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
  810110:	e0fffb03 	ldbu	r3,-20(fp)
  810114:	00bfe004 	movi	r2,-128
  810118:	1884703a 	and	r2,r3,r2
  81011c:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
  810120:	e0bff283 	ldbu	r2,-54(fp)
  810124:	1005003a 	cmpeq	r2,r2,zero
  810128:	1000071e 	bne	r2,zero,810148 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
  81012c:	00c01fc4 	movi	r3,127
  810130:	e0bffb03 	ldbu	r2,-20(fp)
  810134:	10c4703a 	and	r2,r2,r3
  810138:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
  81013c:	00800044 	movi	r2,1
  810140:	e0bff205 	stb	r2,-56(fp)
  810144:	00000106 	br	81014c <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
  810148:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81014c:	0005303a 	rdctl	r2,status
  810150:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810154:	e0fff017 	ldw	r3,-64(fp)
  810158:	00bfff84 	movi	r2,-2
  81015c:	1884703a 	and	r2,r3,r2
  810160:	1001703a 	wrctl	status,r2
  
  return context;
  810164:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  810168:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
  81016c:	e0bffb03 	ldbu	r2,-20(fp)
  810170:	e0bffe15 	stw	r2,-8(fp)
  810174:	e0fffe17 	ldw	r3,-8(fp)
  810178:	18800060 	cmpeqi	r2,r3,1
  81017c:	1000981e 	bne	r2,zero,8103e0 <OSFlagPend+0x3a8>
  810180:	e0fffe17 	ldw	r3,-8(fp)
  810184:	18800088 	cmpgei	r2,r3,2
  810188:	1000041e 	bne	r2,zero,81019c <OSFlagPend+0x164>
  81018c:	e0fffe17 	ldw	r3,-8(fp)
  810190:	1805003a 	cmpeq	r2,r3,zero
  810194:	1000641e 	bne	r2,zero,810328 <OSFlagPend+0x2f0>
  810198:	0000bf06 	br	810498 <OSFlagPend+0x460>
  81019c:	e0fffe17 	ldw	r3,-8(fp)
  8101a0:	188000a0 	cmpeqi	r2,r3,2
  8101a4:	1000041e 	bne	r2,zero,8101b8 <OSFlagPend+0x180>
  8101a8:	e0fffe17 	ldw	r3,-8(fp)
  8101ac:	188000e0 	cmpeqi	r2,r3,3
  8101b0:	10002f1e 	bne	r2,zero,810270 <OSFlagPend+0x238>
  8101b4:	0000b806 	br	810498 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
  8101b8:	e0bff917 	ldw	r2,-28(fp)
  8101bc:	10c0020b 	ldhu	r3,8(r2)
  8101c0:	e0bffa0b 	ldhu	r2,-24(fp)
  8101c4:	1884703a 	and	r2,r3,r2
  8101c8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  8101cc:	e0fff30b 	ldhu	r3,-52(fp)
  8101d0:	e0bffa0b 	ldhu	r2,-24(fp)
  8101d4:	18801a1e 	bne	r3,r2,810240 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  8101d8:	e0bff203 	ldbu	r2,-56(fp)
  8101dc:	10800058 	cmpnei	r2,r2,1
  8101e0:	1000091e 	bne	r2,zero,810208 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
  8101e4:	e0bff917 	ldw	r2,-28(fp)
  8101e8:	1080020b 	ldhu	r2,8(r2)
  8101ec:	1007883a 	mov	r3,r2
  8101f0:	e0bff30b 	ldhu	r2,-52(fp)
  8101f4:	0084303a 	nor	r2,zero,r2
  8101f8:	1884703a 	and	r2,r3,r2
  8101fc:	1007883a 	mov	r3,r2
  810200:	e0bff917 	ldw	r2,-28(fp)
  810204:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  810208:	008020b4 	movhi	r2,130
  81020c:	10a98a04 	addi	r2,r2,-23000
  810210:	10c00017 	ldw	r3,0(r2)
  810214:	e0bff30b 	ldhu	r2,-52(fp)
  810218:	18800b0d 	sth	r2,44(r3)
  81021c:	e0bff117 	ldw	r2,-60(fp)
  810220:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810224:	e0bfef17 	ldw	r2,-68(fp)
  810228:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  81022c:	e0800217 	ldw	r2,8(fp)
  810230:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  810234:	e0bff30b 	ldhu	r2,-52(fp)
  810238:	e0bfff15 	stw	r2,-4(fp)
  81023c:	00010906 	br	810664 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  810240:	e1bffa0b 	ldhu	r6,-24(fp)
  810244:	e1fffb03 	ldbu	r7,-20(fp)
  810248:	e0bffc0b 	ldhu	r2,-16(fp)
  81024c:	e17ff404 	addi	r5,fp,-48
  810250:	d8800015 	stw	r2,0(sp)
  810254:	e13ff917 	ldw	r4,-28(fp)
  810258:	0810b600 	call	810b60 <OS_FlagBlock>
  81025c:	e0bff117 	ldw	r2,-60(fp)
  810260:	e0bfee15 	stw	r2,-72(fp)
  810264:	e0bfee17 	ldw	r2,-72(fp)
  810268:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  81026c:	00009506 	br	8104c4 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
  810270:	e0bff917 	ldw	r2,-28(fp)
  810274:	10c0020b 	ldhu	r3,8(r2)
  810278:	e0bffa0b 	ldhu	r2,-24(fp)
  81027c:	1884703a 	and	r2,r3,r2
  810280:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
  810284:	e0bff30b 	ldhu	r2,-52(fp)
  810288:	1005003a 	cmpeq	r2,r2,zero
  81028c:	10001a1e 	bne	r2,zero,8102f8 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  810290:	e0bff203 	ldbu	r2,-56(fp)
  810294:	10800058 	cmpnei	r2,r2,1
  810298:	1000091e 	bne	r2,zero,8102c0 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
  81029c:	e0bff917 	ldw	r2,-28(fp)
  8102a0:	1080020b 	ldhu	r2,8(r2)
  8102a4:	1007883a 	mov	r3,r2
  8102a8:	e0bff30b 	ldhu	r2,-52(fp)
  8102ac:	0084303a 	nor	r2,zero,r2
  8102b0:	1884703a 	and	r2,r3,r2
  8102b4:	1007883a 	mov	r3,r2
  8102b8:	e0bff917 	ldw	r2,-28(fp)
  8102bc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  8102c0:	008020b4 	movhi	r2,130
  8102c4:	10a98a04 	addi	r2,r2,-23000
  8102c8:	10c00017 	ldw	r3,0(r2)
  8102cc:	e0bff30b 	ldhu	r2,-52(fp)
  8102d0:	18800b0d 	sth	r2,44(r3)
  8102d4:	e0bff117 	ldw	r2,-60(fp)
  8102d8:	e0bfed15 	stw	r2,-76(fp)
  8102dc:	e0bfed17 	ldw	r2,-76(fp)
  8102e0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  8102e4:	e0800217 	ldw	r2,8(fp)
  8102e8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8102ec:	e0fff30b 	ldhu	r3,-52(fp)
  8102f0:	e0ffff15 	stw	r3,-4(fp)
  8102f4:	0000db06 	br	810664 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8102f8:	e1bffa0b 	ldhu	r6,-24(fp)
  8102fc:	e1fffb03 	ldbu	r7,-20(fp)
  810300:	e0bffc0b 	ldhu	r2,-16(fp)
  810304:	e17ff404 	addi	r5,fp,-48
  810308:	d8800015 	stw	r2,0(sp)
  81030c:	e13ff917 	ldw	r4,-28(fp)
  810310:	0810b600 	call	810b60 <OS_FlagBlock>
  810314:	e0bff117 	ldw	r2,-60(fp)
  810318:	e0bfec15 	stw	r2,-80(fp)
  81031c:	e0bfec17 	ldw	r2,-80(fp)
  810320:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  810324:	00006706 	br	8104c4 <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
  810328:	e0bff917 	ldw	r2,-28(fp)
  81032c:	1080020b 	ldhu	r2,8(r2)
  810330:	0084303a 	nor	r2,zero,r2
  810334:	1007883a 	mov	r3,r2
  810338:	e0bffa0b 	ldhu	r2,-24(fp)
  81033c:	1884703a 	and	r2,r3,r2
  810340:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
  810344:	e0fff30b 	ldhu	r3,-52(fp)
  810348:	e0bffa0b 	ldhu	r2,-24(fp)
  81034c:	1880181e 	bne	r3,r2,8103b0 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  810350:	e0bff203 	ldbu	r2,-56(fp)
  810354:	10800058 	cmpnei	r2,r2,1
  810358:	1000071e 	bne	r2,zero,810378 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
  81035c:	e0bff917 	ldw	r2,-28(fp)
  810360:	10c0020b 	ldhu	r3,8(r2)
  810364:	e0bff30b 	ldhu	r2,-52(fp)
  810368:	1884b03a 	or	r2,r3,r2
  81036c:	1007883a 	mov	r3,r2
  810370:	e0bff917 	ldw	r2,-28(fp)
  810374:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  810378:	008020b4 	movhi	r2,130
  81037c:	10a98a04 	addi	r2,r2,-23000
  810380:	10c00017 	ldw	r3,0(r2)
  810384:	e0bff30b 	ldhu	r2,-52(fp)
  810388:	18800b0d 	sth	r2,44(r3)
  81038c:	e0bff117 	ldw	r2,-60(fp)
  810390:	e0bfeb15 	stw	r2,-84(fp)
  810394:	e0bfeb17 	ldw	r2,-84(fp)
  810398:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  81039c:	e0800217 	ldw	r2,8(fp)
  8103a0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  8103a4:	e0bff30b 	ldhu	r2,-52(fp)
  8103a8:	e0bfff15 	stw	r2,-4(fp)
  8103ac:	0000ad06 	br	810664 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  8103b0:	e1bffa0b 	ldhu	r6,-24(fp)
  8103b4:	e1fffb03 	ldbu	r7,-20(fp)
  8103b8:	e0bffc0b 	ldhu	r2,-16(fp)
  8103bc:	e17ff404 	addi	r5,fp,-48
  8103c0:	d8800015 	stw	r2,0(sp)
  8103c4:	e13ff917 	ldw	r4,-28(fp)
  8103c8:	0810b600 	call	810b60 <OS_FlagBlock>
  8103cc:	e0bff117 	ldw	r2,-60(fp)
  8103d0:	e0bfea15 	stw	r2,-88(fp)
  8103d4:	e0bfea17 	ldw	r2,-88(fp)
  8103d8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  8103dc:	00003906 	br	8104c4 <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
  8103e0:	e0bff917 	ldw	r2,-28(fp)
  8103e4:	1080020b 	ldhu	r2,8(r2)
  8103e8:	0084303a 	nor	r2,zero,r2
  8103ec:	1007883a 	mov	r3,r2
  8103f0:	e0bffa0b 	ldhu	r2,-24(fp)
  8103f4:	1884703a 	and	r2,r3,r2
  8103f8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
  8103fc:	e0bff30b 	ldhu	r2,-52(fp)
  810400:	1005003a 	cmpeq	r2,r2,zero
  810404:	1000181e 	bne	r2,zero,810468 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
  810408:	e0bff203 	ldbu	r2,-56(fp)
  81040c:	10800058 	cmpnei	r2,r2,1
  810410:	1000071e 	bne	r2,zero,810430 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
  810414:	e0bff917 	ldw	r2,-28(fp)
  810418:	10c0020b 	ldhu	r3,8(r2)
  81041c:	e0bff30b 	ldhu	r2,-52(fp)
  810420:	1884b03a 	or	r2,r3,r2
  810424:	1007883a 	mov	r3,r2
  810428:	e0bff917 	ldw	r2,-28(fp)
  81042c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
  810430:	008020b4 	movhi	r2,130
  810434:	10a98a04 	addi	r2,r2,-23000
  810438:	10c00017 	ldw	r3,0(r2)
  81043c:	e0bff30b 	ldhu	r2,-52(fp)
  810440:	18800b0d 	sth	r2,44(r3)
  810444:	e0bff117 	ldw	r2,-60(fp)
  810448:	e0bfe915 	stw	r2,-92(fp)
  81044c:	e0bfe917 	ldw	r2,-92(fp)
  810450:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
  810454:	e0800217 	ldw	r2,8(fp)
  810458:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
  81045c:	e0fff30b 	ldhu	r3,-52(fp)
  810460:	e0ffff15 	stw	r3,-4(fp)
  810464:	00007f06 	br	810664 <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
  810468:	e1bffa0b 	ldhu	r6,-24(fp)
  81046c:	e1fffb03 	ldbu	r7,-20(fp)
  810470:	e0bffc0b 	ldhu	r2,-16(fp)
  810474:	e17ff404 	addi	r5,fp,-48
  810478:	d8800015 	stw	r2,0(sp)
  81047c:	e13ff917 	ldw	r4,-28(fp)
  810480:	0810b600 	call	810b60 <OS_FlagBlock>
  810484:	e0bff117 	ldw	r2,-60(fp)
  810488:	e0bfe815 	stw	r2,-96(fp)
  81048c:	e0bfe817 	ldw	r2,-96(fp)
  810490:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
  810494:	00000b06 	br	8104c4 <OSFlagPend+0x48c>
  810498:	e0bff117 	ldw	r2,-60(fp)
  81049c:	e0bfe715 	stw	r2,-100(fp)
  8104a0:	e0bfe717 	ldw	r2,-100(fp)
  8104a4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
  8104a8:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
  8104ac:	e0c00217 	ldw	r3,8(fp)
  8104b0:	00801bc4 	movi	r2,111
  8104b4:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
  8104b8:	e0bff30b 	ldhu	r2,-52(fp)
  8104bc:	e0bfff15 	stw	r2,-4(fp)
  8104c0:	00006806 	br	810664 <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
  8104c4:	080ee140 	call	80ee14 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8104c8:	0005303a 	rdctl	r2,status
  8104cc:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8104d0:	e0ffe617 	ldw	r3,-104(fp)
  8104d4:	00bfff84 	movi	r2,-2
  8104d8:	1884703a 	and	r2,r3,r2
  8104dc:	1001703a 	wrctl	status,r2
  
  return context;
  8104e0:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
  8104e4:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
  8104e8:	008020b4 	movhi	r2,130
  8104ec:	10a98a04 	addi	r2,r2,-23000
  8104f0:	10800017 	ldw	r2,0(r2)
  8104f4:	10800c43 	ldbu	r2,49(r2)
  8104f8:	10803fcc 	andi	r2,r2,255
  8104fc:	1005003a 	cmpeq	r2,r2,zero
  810500:	1000221e 	bne	r2,zero,81058c <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
  810504:	008020b4 	movhi	r2,130
  810508:	10a98a04 	addi	r2,r2,-23000
  81050c:	10800017 	ldw	r2,0(r2)
  810510:	10800c43 	ldbu	r2,49(r2)
  810514:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  810518:	008020b4 	movhi	r2,130
  81051c:	10a98a04 	addi	r2,r2,-23000
  810520:	10800017 	ldw	r2,0(r2)
  810524:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
  810528:	e13ff404 	addi	r4,fp,-48
  81052c:	0810f180 	call	810f18 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
  810530:	008020b4 	movhi	r2,130
  810534:	10a98a04 	addi	r2,r2,-23000
  810538:	10800017 	ldw	r2,0(r2)
  81053c:	10000c05 	stb	zero,48(r2)
  810540:	e0bff117 	ldw	r2,-60(fp)
  810544:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810548:	e0bfe517 	ldw	r2,-108(fp)
  81054c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
  810550:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
  810554:	e0bff243 	ldbu	r2,-55(fp)
  810558:	108000a0 	cmpeqi	r2,r2,2
  81055c:	1000011e 	bne	r2,zero,810564 <OSFlagPend+0x52c>
  810560:	00000406 	br	810574 <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
  810564:	e0c00217 	ldw	r3,8(fp)
  810568:	00800384 	movi	r2,14
  81056c:	18800005 	stb	r2,0(r3)
                 break;
  810570:	00000306 	br	810580 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
  810574:	e0c00217 	ldw	r3,8(fp)
  810578:	00800284 	movi	r2,10
  81057c:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
  810580:	e0fff30b 	ldhu	r3,-52(fp)
  810584:	e0ffff15 	stw	r3,-4(fp)
  810588:	00003606 	br	810664 <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
  81058c:	008020b4 	movhi	r2,130
  810590:	10a98a04 	addi	r2,r2,-23000
  810594:	10800017 	ldw	r2,0(r2)
  810598:	10800b0b 	ldhu	r2,44(r2)
  81059c:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
  8105a0:	e0bff203 	ldbu	r2,-56(fp)
  8105a4:	10800058 	cmpnei	r2,r2,1
  8105a8:	1000261e 	bne	r2,zero,810644 <OSFlagPend+0x60c>
        switch (wait_type) {
  8105ac:	e0bffb03 	ldbu	r2,-20(fp)
  8105b0:	e0bffd15 	stw	r2,-12(fp)
  8105b4:	e0fffd17 	ldw	r3,-12(fp)
  8105b8:	1804803a 	cmplt	r2,r3,zero
  8105bc:	1000181e 	bne	r2,zero,810620 <OSFlagPend+0x5e8>
  8105c0:	e0fffd17 	ldw	r3,-12(fp)
  8105c4:	18800090 	cmplti	r2,r3,2
  8105c8:	10000d1e 	bne	r2,zero,810600 <OSFlagPend+0x5c8>
  8105cc:	e0fffd17 	ldw	r3,-12(fp)
  8105d0:	18800108 	cmpgei	r2,r3,4
  8105d4:	1000121e 	bne	r2,zero,810620 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
  8105d8:	e0bff917 	ldw	r2,-28(fp)
  8105dc:	1080020b 	ldhu	r2,8(r2)
  8105e0:	1007883a 	mov	r3,r2
  8105e4:	e0bff30b 	ldhu	r2,-52(fp)
  8105e8:	0084303a 	nor	r2,zero,r2
  8105ec:	1884703a 	and	r2,r3,r2
  8105f0:	1007883a 	mov	r3,r2
  8105f4:	e0bff917 	ldw	r2,-28(fp)
  8105f8:	10c0020d 	sth	r3,8(r2)
                 break;
  8105fc:	00001106 	br	810644 <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
  810600:	e0bff917 	ldw	r2,-28(fp)
  810604:	10c0020b 	ldhu	r3,8(r2)
  810608:	e0bff30b 	ldhu	r2,-52(fp)
  81060c:	1884b03a 	or	r2,r3,r2
  810610:	1007883a 	mov	r3,r2
  810614:	e0bff917 	ldw	r2,-28(fp)
  810618:	10c0020d 	sth	r3,8(r2)
                 break;
  81061c:	00000906 	br	810644 <OSFlagPend+0x60c>
  810620:	e0bff117 	ldw	r2,-60(fp)
  810624:	e0bfe415 	stw	r2,-112(fp)
  810628:	e0bfe417 	ldw	r2,-112(fp)
  81062c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  810630:	e0c00217 	ldw	r3,8(fp)
  810634:	00801bc4 	movi	r2,111
  810638:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  81063c:	e03fff15 	stw	zero,-4(fp)
  810640:	00000806 	br	810664 <OSFlagPend+0x62c>
  810644:	e0bff117 	ldw	r2,-60(fp)
  810648:	e0bfe315 	stw	r2,-116(fp)
  81064c:	e0bfe317 	ldw	r2,-116(fp)
  810650:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
  810654:	e0800217 	ldw	r2,8(fp)
  810658:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
  81065c:	e0bff30b 	ldhu	r2,-52(fp)
  810660:	e0bfff15 	stw	r2,-4(fp)
  810664:	e0bfff17 	ldw	r2,-4(fp)
}
  810668:	e037883a 	mov	sp,fp
  81066c:	dfc00117 	ldw	ra,4(sp)
  810670:	df000017 	ldw	fp,0(sp)
  810674:	dec00204 	addi	sp,sp,8
  810678:	f800283a 	ret

0081067c <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
  81067c:	defffb04 	addi	sp,sp,-20
  810680:	df000415 	stw	fp,16(sp)
  810684:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
  810688:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81068c:	0005303a 	rdctl	r2,status
  810690:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810694:	e0fffd17 	ldw	r3,-12(fp)
  810698:	00bfff84 	movi	r2,-2
  81069c:	1884703a 	and	r2,r3,r2
  8106a0:	1001703a 	wrctl	status,r2
  
  return context;
  8106a4:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  8106a8:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
  8106ac:	008020b4 	movhi	r2,130
  8106b0:	10a98a04 	addi	r2,r2,-23000
  8106b4:	10800017 	ldw	r2,0(r2)
  8106b8:	10800b0b 	ldhu	r2,44(r2)
  8106bc:	e0bfff0d 	sth	r2,-4(fp)
  8106c0:	e0bffe17 	ldw	r2,-8(fp)
  8106c4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8106c8:	e0bffc17 	ldw	r2,-16(fp)
  8106cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
  8106d0:	e0bfff0b 	ldhu	r2,-4(fp)
}
  8106d4:	e037883a 	mov	sp,fp
  8106d8:	df000017 	ldw	fp,0(sp)
  8106dc:	dec00104 	addi	sp,sp,4
  8106e0:	f800283a 	ret

008106e4 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
  8106e4:	deffed04 	addi	sp,sp,-76
  8106e8:	dfc01215 	stw	ra,72(sp)
  8106ec:	df001115 	stw	fp,68(sp)
  8106f0:	df001104 	addi	fp,sp,68
  8106f4:	e13ff915 	stw	r4,-28(fp)
  8106f8:	e1fffc15 	stw	r7,-16(fp)
  8106fc:	e17ffa0d 	sth	r5,-24(fp)
  810700:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
  810704:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  810708:	e0bffc17 	ldw	r2,-16(fp)
  81070c:	1004c03a 	cmpne	r2,r2,zero
  810710:	1000021e 	bne	r2,zero,81071c <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
  810714:	e03fff15 	stw	zero,-4(fp)
  810718:	0000d606 	br	810a74 <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
  81071c:	e0bff917 	ldw	r2,-28(fp)
  810720:	1004c03a 	cmpne	r2,r2,zero
  810724:	1000051e 	bne	r2,zero,81073c <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  810728:	e0fffc17 	ldw	r3,-16(fp)
  81072c:	00801b84 	movi	r2,110
  810730:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  810734:	e03fff15 	stw	zero,-4(fp)
  810738:	0000ce06 	br	810a74 <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
  81073c:	e0bff917 	ldw	r2,-28(fp)
  810740:	10800003 	ldbu	r2,0(r2)
  810744:	10803fcc 	andi	r2,r2,255
  810748:	10800160 	cmpeqi	r2,r2,5
  81074c:	1000051e 	bne	r2,zero,810764 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
  810750:	e0fffc17 	ldw	r3,-16(fp)
  810754:	00800044 	movi	r2,1
  810758:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  81075c:	e03fff15 	stw	zero,-4(fp)
  810760:	0000c406 	br	810a74 <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810764:	0005303a 	rdctl	r2,status
  810768:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81076c:	e0fff417 	ldw	r3,-48(fp)
  810770:	00bfff84 	movi	r2,-2
  810774:	1884703a 	and	r2,r3,r2
  810778:	1001703a 	wrctl	status,r2
  
  return context;
  81077c:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
  810780:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
  810784:	e0bffb03 	ldbu	r2,-20(fp)
  810788:	e0bffe15 	stw	r2,-8(fp)
  81078c:	e0fffe17 	ldw	r3,-8(fp)
  810790:	1805003a 	cmpeq	r2,r3,zero
  810794:	1000041e 	bne	r2,zero,8107a8 <OSFlagPost+0xc4>
  810798:	e0fffe17 	ldw	r3,-8(fp)
  81079c:	18800060 	cmpeqi	r2,r3,1
  8107a0:	10000b1e 	bne	r2,zero,8107d0 <OSFlagPost+0xec>
  8107a4:	00001206 	br	8107f0 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
  8107a8:	e0bff917 	ldw	r2,-28(fp)
  8107ac:	1080020b 	ldhu	r2,8(r2)
  8107b0:	1007883a 	mov	r3,r2
  8107b4:	e0bffa0b 	ldhu	r2,-24(fp)
  8107b8:	0084303a 	nor	r2,zero,r2
  8107bc:	1884703a 	and	r2,r3,r2
  8107c0:	1007883a 	mov	r3,r2
  8107c4:	e0bff917 	ldw	r2,-28(fp)
  8107c8:	10c0020d 	sth	r3,8(r2)
             break;
  8107cc:	00001106 	br	810814 <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
  8107d0:	e0bff917 	ldw	r2,-28(fp)
  8107d4:	10c0020b 	ldhu	r3,8(r2)
  8107d8:	e0bffa0b 	ldhu	r2,-24(fp)
  8107dc:	1884b03a 	or	r2,r3,r2
  8107e0:	1007883a 	mov	r3,r2
  8107e4:	e0bff917 	ldw	r2,-28(fp)
  8107e8:	10c0020d 	sth	r3,8(r2)
             break;
  8107ec:	00000906 	br	810814 <OSFlagPost+0x130>
  8107f0:	e0bff517 	ldw	r2,-44(fp)
  8107f4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8107f8:	e0bff317 	ldw	r2,-52(fp)
  8107fc:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
  810800:	e0fffc17 	ldw	r3,-16(fp)
  810804:	00801c44 	movi	r2,113
  810808:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
  81080c:	e03fff15 	stw	zero,-4(fp)
  810810:	00009806 	br	810a74 <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
  810814:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  810818:	e0bff917 	ldw	r2,-28(fp)
  81081c:	10800117 	ldw	r2,4(r2)
  810820:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  810824:	00007506 	br	8109fc <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
  810828:	e0bff817 	ldw	r2,-32(fp)
  81082c:	10800483 	ldbu	r2,18(r2)
  810830:	10803fcc 	andi	r2,r2,255
  810834:	e0bffd15 	stw	r2,-12(fp)
  810838:	e0fffd17 	ldw	r3,-12(fp)
  81083c:	18800060 	cmpeqi	r2,r3,1
  810840:	10004d1e 	bne	r2,zero,810978 <OSFlagPost+0x294>
  810844:	e0fffd17 	ldw	r3,-12(fp)
  810848:	18800088 	cmpgei	r2,r3,2
  81084c:	1000041e 	bne	r2,zero,810860 <OSFlagPost+0x17c>
  810850:	e0fffd17 	ldw	r3,-12(fp)
  810854:	1805003a 	cmpeq	r2,r3,zero
  810858:	1000301e 	bne	r2,zero,81091c <OSFlagPost+0x238>
  81085c:	00005b06 	br	8109cc <OSFlagPost+0x2e8>
  810860:	e0fffd17 	ldw	r3,-12(fp)
  810864:	188000a0 	cmpeqi	r2,r3,2
  810868:	1000041e 	bne	r2,zero,81087c <OSFlagPost+0x198>
  81086c:	e0fffd17 	ldw	r3,-12(fp)
  810870:	188000e0 	cmpeqi	r2,r3,3
  810874:	1000161e 	bne	r2,zero,8108d0 <OSFlagPost+0x1ec>
  810878:	00005406 	br	8109cc <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  81087c:	e0bff917 	ldw	r2,-28(fp)
  810880:	10c0020b 	ldhu	r3,8(r2)
  810884:	e0bff817 	ldw	r2,-32(fp)
  810888:	1080040b 	ldhu	r2,16(r2)
  81088c:	1884703a 	and	r2,r3,r2
  810890:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  810894:	e0bff817 	ldw	r2,-32(fp)
  810898:	1080040b 	ldhu	r2,16(r2)
  81089c:	10ffffcc 	andi	r3,r2,65535
  8108a0:	e0bff68b 	ldhu	r2,-38(fp)
  8108a4:	1880521e 	bne	r3,r2,8109f0 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8108a8:	e17ff68b 	ldhu	r5,-38(fp)
  8108ac:	e13ff817 	ldw	r4,-32(fp)
  8108b0:	0810e080 	call	810e08 <OS_FlagTaskRdy>
  8108b4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  8108b8:	e0bff603 	ldbu	r2,-40(fp)
  8108bc:	10800058 	cmpnei	r2,r2,1
  8108c0:	10004b1e 	bne	r2,zero,8109f0 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8108c4:	00800044 	movi	r2,1
  8108c8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  8108cc:	00004806 	br	8109f0 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  8108d0:	e0bff917 	ldw	r2,-28(fp)
  8108d4:	10c0020b 	ldhu	r3,8(r2)
  8108d8:	e0bff817 	ldw	r2,-32(fp)
  8108dc:	1080040b 	ldhu	r2,16(r2)
  8108e0:	1884703a 	and	r2,r3,r2
  8108e4:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  8108e8:	e0bff68b 	ldhu	r2,-38(fp)
  8108ec:	1005003a 	cmpeq	r2,r2,zero
  8108f0:	10003f1e 	bne	r2,zero,8109f0 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8108f4:	e17ff68b 	ldhu	r5,-38(fp)
  8108f8:	e13ff817 	ldw	r4,-32(fp)
  8108fc:	0810e080 	call	810e08 <OS_FlagTaskRdy>
  810900:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  810904:	e0bff603 	ldbu	r2,-40(fp)
  810908:	10800058 	cmpnei	r2,r2,1
  81090c:	1000381e 	bne	r2,zero,8109f0 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  810910:	00800044 	movi	r2,1
  810914:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  810918:	00003506 	br	8109f0 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  81091c:	e0bff917 	ldw	r2,-28(fp)
  810920:	1080020b 	ldhu	r2,8(r2)
  810924:	0084303a 	nor	r2,zero,r2
  810928:	1007883a 	mov	r3,r2
  81092c:	e0bff817 	ldw	r2,-32(fp)
  810930:	1080040b 	ldhu	r2,16(r2)
  810934:	1884703a 	and	r2,r3,r2
  810938:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
  81093c:	e0bff817 	ldw	r2,-32(fp)
  810940:	1080040b 	ldhu	r2,16(r2)
  810944:	10ffffcc 	andi	r3,r2,65535
  810948:	e0bff68b 	ldhu	r2,-38(fp)
  81094c:	1880281e 	bne	r3,r2,8109f0 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  810950:	e17ff68b 	ldhu	r5,-38(fp)
  810954:	e13ff817 	ldw	r4,-32(fp)
  810958:	0810e080 	call	810e08 <OS_FlagTaskRdy>
  81095c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  810960:	e0bff603 	ldbu	r2,-40(fp)
  810964:	10800058 	cmpnei	r2,r2,1
  810968:	1000211e 	bne	r2,zero,8109f0 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  81096c:	00800044 	movi	r2,1
  810970:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  810974:	00001e06 	br	8109f0 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
  810978:	e0bff917 	ldw	r2,-28(fp)
  81097c:	1080020b 	ldhu	r2,8(r2)
  810980:	0084303a 	nor	r2,zero,r2
  810984:	1007883a 	mov	r3,r2
  810988:	e0bff817 	ldw	r2,-32(fp)
  81098c:	1080040b 	ldhu	r2,16(r2)
  810990:	1884703a 	and	r2,r3,r2
  810994:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
  810998:	e0bff68b 	ldhu	r2,-38(fp)
  81099c:	1005003a 	cmpeq	r2,r2,zero
  8109a0:	1000131e 	bne	r2,zero,8109f0 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
  8109a4:	e17ff68b 	ldhu	r5,-38(fp)
  8109a8:	e13ff817 	ldw	r4,-32(fp)
  8109ac:	0810e080 	call	810e08 <OS_FlagTaskRdy>
  8109b0:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
  8109b4:	e0bff603 	ldbu	r2,-40(fp)
  8109b8:	10800058 	cmpnei	r2,r2,1
  8109bc:	10000c1e 	bne	r2,zero,8109f0 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
  8109c0:	00800044 	movi	r2,1
  8109c4:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
  8109c8:	00000906 	br	8109f0 <OSFlagPost+0x30c>
  8109cc:	e0bff517 	ldw	r2,-44(fp)
  8109d0:	e0bff215 	stw	r2,-56(fp)
  8109d4:	e0bff217 	ldw	r2,-56(fp)
  8109d8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
  8109dc:	e0fffc17 	ldw	r3,-16(fp)
  8109e0:	00801bc4 	movi	r2,111
  8109e4:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
  8109e8:	e03fff15 	stw	zero,-4(fp)
  8109ec:	00002106 	br	810a74 <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
  8109f0:	e0bff817 	ldw	r2,-32(fp)
  8109f4:	10800017 	ldw	r2,0(r2)
  8109f8:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
  8109fc:	e0bff817 	ldw	r2,-32(fp)
  810a00:	1004c03a 	cmpne	r2,r2,zero
  810a04:	103f881e 	bne	r2,zero,810828 <OSFlagPost+0x144>
  810a08:	e0bff517 	ldw	r2,-44(fp)
  810a0c:	e0bff115 	stw	r2,-60(fp)
  810a10:	e0bff117 	ldw	r2,-60(fp)
  810a14:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
  810a18:	e0bff783 	ldbu	r2,-34(fp)
  810a1c:	10800058 	cmpnei	r2,r2,1
  810a20:	1000011e 	bne	r2,zero,810a28 <OSFlagPost+0x344>
        OS_Sched();
  810a24:	080ee140 	call	80ee14 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810a28:	0005303a 	rdctl	r2,status
  810a2c:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810a30:	e0fff017 	ldw	r3,-64(fp)
  810a34:	00bfff84 	movi	r2,-2
  810a38:	1884703a 	and	r2,r3,r2
  810a3c:	1001703a 	wrctl	status,r2
  
  return context;
  810a40:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
  810a44:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
  810a48:	e0bff917 	ldw	r2,-28(fp)
  810a4c:	1080020b 	ldhu	r2,8(r2)
  810a50:	e0bff70d 	sth	r2,-36(fp)
  810a54:	e0bff517 	ldw	r2,-44(fp)
  810a58:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810a5c:	e0bfef17 	ldw	r2,-68(fp)
  810a60:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
  810a64:	e0bffc17 	ldw	r2,-16(fp)
  810a68:	10000005 	stb	zero,0(r2)
    return (flags_cur);
  810a6c:	e0bff70b 	ldhu	r2,-36(fp)
  810a70:	e0bfff15 	stw	r2,-4(fp)
  810a74:	e0bfff17 	ldw	r2,-4(fp)
}
  810a78:	e037883a 	mov	sp,fp
  810a7c:	dfc00117 	ldw	ra,4(sp)
  810a80:	df000017 	ldw	fp,0(sp)
  810a84:	dec00204 	addi	sp,sp,8
  810a88:	f800283a 	ret

00810a8c <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
  810a8c:	defff804 	addi	sp,sp,-32
  810a90:	df000715 	stw	fp,28(sp)
  810a94:	df000704 	addi	fp,sp,28
  810a98:	e13ffd15 	stw	r4,-12(fp)
  810a9c:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
  810aa0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
  810aa4:	e0bffe17 	ldw	r2,-8(fp)
  810aa8:	1004c03a 	cmpne	r2,r2,zero
  810aac:	1000021e 	bne	r2,zero,810ab8 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
  810ab0:	e03fff15 	stw	zero,-4(fp)
  810ab4:	00002506 	br	810b4c <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
  810ab8:	e0bffd17 	ldw	r2,-12(fp)
  810abc:	1004c03a 	cmpne	r2,r2,zero
  810ac0:	1000051e 	bne	r2,zero,810ad8 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
  810ac4:	e0fffe17 	ldw	r3,-8(fp)
  810ac8:	00801b84 	movi	r2,110
  810acc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  810ad0:	e03fff15 	stw	zero,-4(fp)
  810ad4:	00001d06 	br	810b4c <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
  810ad8:	e0bffd17 	ldw	r2,-12(fp)
  810adc:	10800003 	ldbu	r2,0(r2)
  810ae0:	10803fcc 	andi	r2,r2,255
  810ae4:	10800160 	cmpeqi	r2,r2,5
  810ae8:	1000051e 	bne	r2,zero,810b00 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  810aec:	e0fffe17 	ldw	r3,-8(fp)
  810af0:	00800044 	movi	r2,1
  810af4:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
  810af8:	e03fff15 	stw	zero,-4(fp)
  810afc:	00001306 	br	810b4c <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810b00:	0005303a 	rdctl	r2,status
  810b04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810b08:	e0fffa17 	ldw	r3,-24(fp)
  810b0c:	00bfff84 	movi	r2,-2
  810b10:	1884703a 	and	r2,r3,r2
  810b14:	1001703a 	wrctl	status,r2
  
  return context;
  810b18:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  810b1c:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
  810b20:	e0bffd17 	ldw	r2,-12(fp)
  810b24:	1080020b 	ldhu	r2,8(r2)
  810b28:	e0bffc0d 	sth	r2,-16(fp)
  810b2c:	e0bffb17 	ldw	r2,-20(fp)
  810b30:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810b34:	e0bff917 	ldw	r2,-28(fp)
  810b38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  810b3c:	e0bffe17 	ldw	r2,-8(fp)
  810b40:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
  810b44:	e0bffc0b 	ldhu	r2,-16(fp)
  810b48:	e0bfff15 	stw	r2,-4(fp)
  810b4c:	e0bfff17 	ldw	r2,-4(fp)
}
  810b50:	e037883a 	mov	sp,fp
  810b54:	df000017 	ldw	fp,0(sp)
  810b58:	dec00104 	addi	sp,sp,4
  810b5c:	f800283a 	ret

00810b60 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
  810b60:	defff804 	addi	sp,sp,-32
  810b64:	df000715 	stw	fp,28(sp)
  810b68:	df000704 	addi	fp,sp,28
  810b6c:	e13ffb15 	stw	r4,-20(fp)
  810b70:	e17ffc15 	stw	r5,-16(fp)
  810b74:	e0800117 	ldw	r2,4(fp)
  810b78:	e1bffd0d 	sth	r6,-12(fp)
  810b7c:	e1fffe05 	stb	r7,-8(fp)
  810b80:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
  810b84:	008020b4 	movhi	r2,130
  810b88:	10a98a04 	addi	r2,r2,-23000
  810b8c:	10c00017 	ldw	r3,0(r2)
  810b90:	008020b4 	movhi	r2,130
  810b94:	10a98a04 	addi	r2,r2,-23000
  810b98:	10800017 	ldw	r2,0(r2)
  810b9c:	10800c03 	ldbu	r2,48(r2)
  810ba0:	10800814 	ori	r2,r2,32
  810ba4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
  810ba8:	008020b4 	movhi	r2,130
  810bac:	10a98a04 	addi	r2,r2,-23000
  810bb0:	10800017 	ldw	r2,0(r2)
  810bb4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
  810bb8:	008020b4 	movhi	r2,130
  810bbc:	10a98a04 	addi	r2,r2,-23000
  810bc0:	10c00017 	ldw	r3,0(r2)
  810bc4:	e0bfff0b 	ldhu	r2,-4(fp)
  810bc8:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
  810bcc:	008020b4 	movhi	r2,130
  810bd0:	10a98a04 	addi	r2,r2,-23000
  810bd4:	10c00017 	ldw	r3,0(r2)
  810bd8:	e0bffc17 	ldw	r2,-16(fp)
  810bdc:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
  810be0:	e0fffc17 	ldw	r3,-16(fp)
  810be4:	e0bffd0b 	ldhu	r2,-12(fp)
  810be8:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
  810bec:	e0fffc17 	ldw	r3,-16(fp)
  810bf0:	e0bffe03 	ldbu	r2,-8(fp)
  810bf4:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
  810bf8:	008020b4 	movhi	r2,130
  810bfc:	10a98a04 	addi	r2,r2,-23000
  810c00:	10c00017 	ldw	r3,0(r2)
  810c04:	e0bffc17 	ldw	r2,-16(fp)
  810c08:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
  810c0c:	e0bffb17 	ldw	r2,-20(fp)
  810c10:	10c00117 	ldw	r3,4(r2)
  810c14:	e0bffc17 	ldw	r2,-16(fp)
  810c18:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
  810c1c:	e0bffc17 	ldw	r2,-16(fp)
  810c20:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
  810c24:	e0fffc17 	ldw	r3,-16(fp)
  810c28:	e0bffb17 	ldw	r2,-20(fp)
  810c2c:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
  810c30:	e0bffb17 	ldw	r2,-20(fp)
  810c34:	10800117 	ldw	r2,4(r2)
  810c38:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
  810c3c:	e0bffa17 	ldw	r2,-24(fp)
  810c40:	1005003a 	cmpeq	r2,r2,zero
  810c44:	1000031e 	bne	r2,zero,810c54 <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
  810c48:	e0fffa17 	ldw	r3,-24(fp)
  810c4c:	e0bffc17 	ldw	r2,-16(fp)
  810c50:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
  810c54:	e0fffb17 	ldw	r3,-20(fp)
  810c58:	e0bffc17 	ldw	r2,-16(fp)
  810c5c:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
  810c60:	008020b4 	movhi	r2,130
  810c64:	10a98a04 	addi	r2,r2,-23000
  810c68:	10800017 	ldw	r2,0(r2)
  810c6c:	10800d03 	ldbu	r2,52(r2)
  810c70:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  810c74:	e13ff903 	ldbu	r4,-28(fp)
  810c78:	e0fff903 	ldbu	r3,-28(fp)
  810c7c:	008020b4 	movhi	r2,130
  810c80:	10a98744 	addi	r2,r2,-23011
  810c84:	10c5883a 	add	r2,r2,r3
  810c88:	10800003 	ldbu	r2,0(r2)
  810c8c:	1007883a 	mov	r3,r2
  810c90:	008020b4 	movhi	r2,130
  810c94:	10a98a04 	addi	r2,r2,-23000
  810c98:	10800017 	ldw	r2,0(r2)
  810c9c:	10800d43 	ldbu	r2,53(r2)
  810ca0:	0084303a 	nor	r2,zero,r2
  810ca4:	1884703a 	and	r2,r3,r2
  810ca8:	1007883a 	mov	r3,r2
  810cac:	008020b4 	movhi	r2,130
  810cb0:	10a98744 	addi	r2,r2,-23011
  810cb4:	1105883a 	add	r2,r2,r4
  810cb8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
  810cbc:	e0fff903 	ldbu	r3,-28(fp)
  810cc0:	008020b4 	movhi	r2,130
  810cc4:	10a98744 	addi	r2,r2,-23011
  810cc8:	10c5883a 	add	r2,r2,r3
  810ccc:	10800003 	ldbu	r2,0(r2)
  810cd0:	10803fcc 	andi	r2,r2,255
  810cd4:	1004c03a 	cmpne	r2,r2,zero
  810cd8:	10000e1e 	bne	r2,zero,810d14 <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  810cdc:	008020b4 	movhi	r2,130
  810ce0:	10a98a04 	addi	r2,r2,-23000
  810ce4:	10800017 	ldw	r2,0(r2)
  810ce8:	10800d83 	ldbu	r2,54(r2)
  810cec:	0084303a 	nor	r2,zero,r2
  810cf0:	1007883a 	mov	r3,r2
  810cf4:	008020b4 	movhi	r2,130
  810cf8:	10a98704 	addi	r2,r2,-23012
  810cfc:	10800003 	ldbu	r2,0(r2)
  810d00:	1884703a 	and	r2,r3,r2
  810d04:	1007883a 	mov	r3,r2
  810d08:	008020b4 	movhi	r2,130
  810d0c:	10a98704 	addi	r2,r2,-23012
  810d10:	10c00005 	stb	r3,0(r2)
    }
}
  810d14:	e037883a 	mov	sp,fp
  810d18:	df000017 	ldw	fp,0(sp)
  810d1c:	dec00104 	addi	sp,sp,4
  810d20:	f800283a 	ret

00810d24 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
  810d24:	defffb04 	addi	sp,sp,-20
  810d28:	dfc00415 	stw	ra,16(sp)
  810d2c:	df000315 	stw	fp,12(sp)
  810d30:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
  810d34:	010020b4 	movhi	r4,130
  810d38:	21319c04 	addi	r4,r4,-14736
  810d3c:	0140dc04 	movi	r5,880
  810d40:	080ed540 	call	80ed54 <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
  810d44:	008020b4 	movhi	r2,130
  810d48:	10b19c04 	addi	r2,r2,-14736
  810d4c:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
  810d50:	008020b4 	movhi	r2,130
  810d54:	10b1a704 	addi	r2,r2,-14692
  810d58:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  810d5c:	e03fff0d 	sth	zero,-4(fp)
  810d60:	00001306 	br	810db0 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  810d64:	e0bffe17 	ldw	r2,-8(fp)
  810d68:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
  810d6c:	e0fffe17 	ldw	r3,-8(fp)
  810d70:	e0bffd17 	ldw	r2,-12(fp)
  810d74:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
  810d78:	e0fffe17 	ldw	r3,-8(fp)
  810d7c:	00800fc4 	movi	r2,63
  810d80:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  810d84:	e0bffe17 	ldw	r2,-8(fp)
  810d88:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
  810d8c:	e0bffe17 	ldw	r2,-8(fp)
  810d90:	10800b04 	addi	r2,r2,44
  810d94:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
  810d98:	e0bffd17 	ldw	r2,-12(fp)
  810d9c:	10800b04 	addi	r2,r2,44
  810da0:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
  810da4:	e0bfff0b 	ldhu	r2,-4(fp)
  810da8:	10800044 	addi	r2,r2,1
  810dac:	e0bfff0d 	sth	r2,-4(fp)
  810db0:	e0bfff0b 	ldhu	r2,-4(fp)
  810db4:	108004f0 	cmpltui	r2,r2,19
  810db8:	103fea1e 	bne	r2,zero,810d64 <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
  810dbc:	e0bffe17 	ldw	r2,-8(fp)
  810dc0:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
  810dc4:	e0bffe17 	ldw	r2,-8(fp)
  810dc8:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
  810dcc:	e0fffe17 	ldw	r3,-8(fp)
  810dd0:	00800fc4 	movi	r2,63
  810dd4:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
  810dd8:	e0bffe17 	ldw	r2,-8(fp)
  810ddc:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
  810de0:	00c020b4 	movhi	r3,130
  810de4:	18e98c04 	addi	r3,r3,-22992
  810de8:	008020b4 	movhi	r2,130
  810dec:	10b19c04 	addi	r2,r2,-14736
  810df0:	18800015 	stw	r2,0(r3)
#endif
}
  810df4:	e037883a 	mov	sp,fp
  810df8:	dfc00117 	ldw	ra,4(sp)
  810dfc:	df000017 	ldw	fp,0(sp)
  810e00:	dec00204 	addi	sp,sp,8
  810e04:	f800283a 	ret

00810e08 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
  810e08:	defffa04 	addi	sp,sp,-24
  810e0c:	dfc00515 	stw	ra,20(sp)
  810e10:	df000415 	stw	fp,16(sp)
  810e14:	df000404 	addi	fp,sp,16
  810e18:	e13ffe15 	stw	r4,-8(fp)
  810e1c:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
  810e20:	e0bffe17 	ldw	r2,-8(fp)
  810e24:	10800217 	ldw	r2,8(r2)
  810e28:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
  810e2c:	e0bffd17 	ldw	r2,-12(fp)
  810e30:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
  810e34:	e0fffd17 	ldw	r3,-12(fp)
  810e38:	e0bfff0b 	ldhu	r2,-4(fp)
  810e3c:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
  810e40:	e0bffd17 	ldw	r2,-12(fp)
  810e44:	10c00c03 	ldbu	r3,48(r2)
  810e48:	00bff7c4 	movi	r2,-33
  810e4c:	1884703a 	and	r2,r3,r2
  810e50:	1007883a 	mov	r3,r2
  810e54:	e0bffd17 	ldw	r2,-12(fp)
  810e58:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
  810e5c:	e0bffd17 	ldw	r2,-12(fp)
  810e60:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
  810e64:	e0bffd17 	ldw	r2,-12(fp)
  810e68:	10800c03 	ldbu	r2,48(r2)
  810e6c:	10803fcc 	andi	r2,r2,255
  810e70:	1004c03a 	cmpne	r2,r2,zero
  810e74:	10001f1e 	bne	r2,zero,810ef4 <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
  810e78:	e0bffd17 	ldw	r2,-12(fp)
  810e7c:	10c00d83 	ldbu	r3,54(r2)
  810e80:	008020b4 	movhi	r2,130
  810e84:	10a98704 	addi	r2,r2,-23012
  810e88:	10800003 	ldbu	r2,0(r2)
  810e8c:	1884b03a 	or	r2,r3,r2
  810e90:	1007883a 	mov	r3,r2
  810e94:	008020b4 	movhi	r2,130
  810e98:	10a98704 	addi	r2,r2,-23012
  810e9c:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  810ea0:	e0bffd17 	ldw	r2,-12(fp)
  810ea4:	10800d03 	ldbu	r2,52(r2)
  810ea8:	11003fcc 	andi	r4,r2,255
  810eac:	e0bffd17 	ldw	r2,-12(fp)
  810eb0:	10800d03 	ldbu	r2,52(r2)
  810eb4:	10c03fcc 	andi	r3,r2,255
  810eb8:	008020b4 	movhi	r2,130
  810ebc:	10a98744 	addi	r2,r2,-23011
  810ec0:	10c5883a 	add	r2,r2,r3
  810ec4:	10c00003 	ldbu	r3,0(r2)
  810ec8:	e0bffd17 	ldw	r2,-12(fp)
  810ecc:	10800d43 	ldbu	r2,53(r2)
  810ed0:	1884b03a 	or	r2,r3,r2
  810ed4:	1007883a 	mov	r3,r2
  810ed8:	008020b4 	movhi	r2,130
  810edc:	10a98744 	addi	r2,r2,-23011
  810ee0:	1105883a 	add	r2,r2,r4
  810ee4:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
  810ee8:	00800044 	movi	r2,1
  810eec:	e0bffc05 	stb	r2,-16(fp)
  810ef0:	00000106 	br	810ef8 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
  810ef4:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
  810ef8:	e13ffe17 	ldw	r4,-8(fp)
  810efc:	0810f180 	call	810f18 <OS_FlagUnlink>
    return (sched);
  810f00:	e0bffc03 	ldbu	r2,-16(fp)
}
  810f04:	e037883a 	mov	sp,fp
  810f08:	dfc00117 	ldw	ra,4(sp)
  810f0c:	df000017 	ldw	fp,0(sp)
  810f10:	dec00204 	addi	sp,sp,8
  810f14:	f800283a 	ret

00810f18 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
  810f18:	defffa04 	addi	sp,sp,-24
  810f1c:	df000515 	stw	fp,20(sp)
  810f20:	df000504 	addi	fp,sp,20
  810f24:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
  810f28:	e0bfff17 	ldw	r2,-4(fp)
  810f2c:	10800117 	ldw	r2,4(r2)
  810f30:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
  810f34:	e0bfff17 	ldw	r2,-4(fp)
  810f38:	10800017 	ldw	r2,0(r2)
  810f3c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
  810f40:	e0bffc17 	ldw	r2,-16(fp)
  810f44:	1004c03a 	cmpne	r2,r2,zero
  810f48:	10000c1e 	bne	r2,zero,810f7c <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
  810f4c:	e0bfff17 	ldw	r2,-4(fp)
  810f50:	10800317 	ldw	r2,12(r2)
  810f54:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
  810f58:	e0fffd17 	ldw	r3,-12(fp)
  810f5c:	e0bffb17 	ldw	r2,-20(fp)
  810f60:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
  810f64:	e0bffb17 	ldw	r2,-20(fp)
  810f68:	1005003a 	cmpeq	r2,r2,zero
  810f6c:	10000c1e 	bne	r2,zero,810fa0 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
  810f70:	e0bffb17 	ldw	r2,-20(fp)
  810f74:	10000115 	stw	zero,4(r2)
  810f78:	00000906 	br	810fa0 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
  810f7c:	e0fffc17 	ldw	r3,-16(fp)
  810f80:	e0bffb17 	ldw	r2,-20(fp)
  810f84:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
  810f88:	e0bffb17 	ldw	r2,-20(fp)
  810f8c:	1005003a 	cmpeq	r2,r2,zero
  810f90:	1000031e 	bne	r2,zero,810fa0 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
  810f94:	e0fffb17 	ldw	r3,-20(fp)
  810f98:	e0bffc17 	ldw	r2,-16(fp)
  810f9c:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
  810fa0:	e0bfff17 	ldw	r2,-4(fp)
  810fa4:	10800217 	ldw	r2,8(r2)
  810fa8:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
  810fac:	e0bffe17 	ldw	r2,-8(fp)
  810fb0:	10000a15 	stw	zero,40(r2)
#endif
}
  810fb4:	e037883a 	mov	sp,fp
  810fb8:	df000017 	ldw	fp,0(sp)
  810fbc:	dec00104 	addi	sp,sp,4
  810fc0:	f800283a 	ret

00810fc4 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
  810fc4:	defff304 	addi	sp,sp,-52
  810fc8:	df000c15 	stw	fp,48(sp)
  810fcc:	df000c04 	addi	fp,sp,48
  810fd0:	e13ffb15 	stw	r4,-20(fp)
  810fd4:	e17ffc15 	stw	r5,-16(fp)
  810fd8:	e1bffd15 	stw	r6,-12(fp)
  810fdc:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  810fe0:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  810fe4:	e0bffe17 	ldw	r2,-8(fp)
  810fe8:	1004c03a 	cmpne	r2,r2,zero
  810fec:	1000021e 	bne	r2,zero,810ff8 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
  810ff0:	e03fff15 	stw	zero,-4(fp)
  810ff4:	00007506 	br	8111cc <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
  810ff8:	e0bffb17 	ldw	r2,-20(fp)
  810ffc:	1004c03a 	cmpne	r2,r2,zero
  811000:	1000051e 	bne	r2,zero,811018 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  811004:	e0fffe17 	ldw	r3,-8(fp)
  811008:	00801884 	movi	r2,98
  81100c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  811010:	e03fff15 	stw	zero,-4(fp)
  811014:	00006d06 	br	8111cc <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
  811018:	e0bffb17 	ldw	r2,-20(fp)
  81101c:	108000cc 	andi	r2,r2,3
  811020:	1005003a 	cmpeq	r2,r2,zero
  811024:	1000051e 	bne	r2,zero,81103c <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
  811028:	e0fffe17 	ldw	r3,-8(fp)
  81102c:	00801884 	movi	r2,98
  811030:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  811034:	e03fff15 	stw	zero,-4(fp)
  811038:	00006406 	br	8111cc <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
  81103c:	e0bffc17 	ldw	r2,-16(fp)
  811040:	108000a8 	cmpgeui	r2,r2,2
  811044:	1000051e 	bne	r2,zero,81105c <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
  811048:	e0fffe17 	ldw	r3,-8(fp)
  81104c:	008016c4 	movi	r2,91
  811050:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  811054:	e03fff15 	stw	zero,-4(fp)
  811058:	00005c06 	br	8111cc <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
  81105c:	e0bffd17 	ldw	r2,-12(fp)
  811060:	10800128 	cmpgeui	r2,r2,4
  811064:	1000051e 	bne	r2,zero,81107c <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
  811068:	e0fffe17 	ldw	r3,-8(fp)
  81106c:	00801704 	movi	r2,92
  811070:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  811074:	e03fff15 	stw	zero,-4(fp)
  811078:	00005406 	br	8111cc <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81107c:	0005303a 	rdctl	r2,status
  811080:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811084:	e0fff517 	ldw	r3,-44(fp)
  811088:	00bfff84 	movi	r2,-2
  81108c:	1884703a 	and	r2,r3,r2
  811090:	1001703a 	wrctl	status,r2
  
  return context;
  811094:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811098:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
  81109c:	008020b4 	movhi	r2,130
  8110a0:	10a98404 	addi	r2,r2,-23024
  8110a4:	10800017 	ldw	r2,0(r2)
  8110a8:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
  8110ac:	008020b4 	movhi	r2,130
  8110b0:	10a98404 	addi	r2,r2,-23024
  8110b4:	10800017 	ldw	r2,0(r2)
  8110b8:	1005003a 	cmpeq	r2,r2,zero
  8110bc:	1000081e 	bne	r2,zero,8110e0 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
  8110c0:	008020b4 	movhi	r2,130
  8110c4:	10a98404 	addi	r2,r2,-23024
  8110c8:	10800017 	ldw	r2,0(r2)
  8110cc:	10800117 	ldw	r2,4(r2)
  8110d0:	1007883a 	mov	r3,r2
  8110d4:	008020b4 	movhi	r2,130
  8110d8:	10a98404 	addi	r2,r2,-23024
  8110dc:	10c00015 	stw	r3,0(r2)
  8110e0:	e0bff617 	ldw	r2,-40(fp)
  8110e4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8110e8:	e0bff417 	ldw	r2,-48(fp)
  8110ec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
  8110f0:	e0bffa17 	ldw	r2,-24(fp)
  8110f4:	1004c03a 	cmpne	r2,r2,zero
  8110f8:	1000051e 	bne	r2,zero,811110 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
  8110fc:	e0fffe17 	ldw	r3,-8(fp)
  811100:	00801684 	movi	r2,90
  811104:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
  811108:	e03fff15 	stw	zero,-4(fp)
  81110c:	00002f06 	br	8111cc <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
  811110:	e0bffb17 	ldw	r2,-20(fp)
  811114:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
  811118:	e0bffb17 	ldw	r2,-20(fp)
  81111c:	1007883a 	mov	r3,r2
  811120:	e0bffd17 	ldw	r2,-12(fp)
  811124:	1885883a 	add	r2,r3,r2
  811128:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
  81112c:	e03ff715 	stw	zero,-36(fp)
  811130:	00000d06 	br	811168 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
  811134:	e0fff817 	ldw	r3,-32(fp)
  811138:	e0bff917 	ldw	r2,-28(fp)
  81113c:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
  811140:	e0bff917 	ldw	r2,-28(fp)
  811144:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
  811148:	e0bff917 	ldw	r2,-28(fp)
  81114c:	1007883a 	mov	r3,r2
  811150:	e0bffd17 	ldw	r2,-12(fp)
  811154:	1885883a 	add	r2,r3,r2
  811158:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
  81115c:	e0bff717 	ldw	r2,-36(fp)
  811160:	10800044 	addi	r2,r2,1
  811164:	e0bff715 	stw	r2,-36(fp)
  811168:	e0bffc17 	ldw	r2,-16(fp)
  81116c:	10ffffc4 	addi	r3,r2,-1
  811170:	e0bff717 	ldw	r2,-36(fp)
  811174:	10ffef36 	bltu	r2,r3,811134 <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
  811178:	e0bff817 	ldw	r2,-32(fp)
  81117c:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
  811180:	e0fffa17 	ldw	r3,-24(fp)
  811184:	e0bffb17 	ldw	r2,-20(fp)
  811188:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
  81118c:	e0fffa17 	ldw	r3,-24(fp)
  811190:	e0bffb17 	ldw	r2,-20(fp)
  811194:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
  811198:	e0fffa17 	ldw	r3,-24(fp)
  81119c:	e0bffc17 	ldw	r2,-16(fp)
  8111a0:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
  8111a4:	e0fffa17 	ldw	r3,-24(fp)
  8111a8:	e0bffc17 	ldw	r2,-16(fp)
  8111ac:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
  8111b0:	e0fffa17 	ldw	r3,-24(fp)
  8111b4:	e0bffd17 	ldw	r2,-12(fp)
  8111b8:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
  8111bc:	e0bffe17 	ldw	r2,-8(fp)
  8111c0:	10000005 	stb	zero,0(r2)
    return (pmem);
  8111c4:	e0bffa17 	ldw	r2,-24(fp)
  8111c8:	e0bfff15 	stw	r2,-4(fp)
  8111cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8111d0:	e037883a 	mov	sp,fp
  8111d4:	df000017 	ldw	fp,0(sp)
  8111d8:	dec00104 	addi	sp,sp,4
  8111dc:	f800283a 	ret

008111e0 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
  8111e0:	defff704 	addi	sp,sp,-36
  8111e4:	df000815 	stw	fp,32(sp)
  8111e8:	df000804 	addi	fp,sp,32
  8111ec:	e13ffd15 	stw	r4,-12(fp)
  8111f0:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8111f4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8111f8:	e0bffe17 	ldw	r2,-8(fp)
  8111fc:	1004c03a 	cmpne	r2,r2,zero
  811200:	1000021e 	bne	r2,zero,81120c <OSMemGet+0x2c>
        return ((void *)0);
  811204:	e03fff15 	stw	zero,-4(fp)
  811208:	00003106 	br	8112d0 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
  81120c:	e0bffd17 	ldw	r2,-12(fp)
  811210:	1004c03a 	cmpne	r2,r2,zero
  811214:	1000051e 	bne	r2,zero,81122c <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  811218:	e0fffe17 	ldw	r3,-8(fp)
  81121c:	00801804 	movi	r2,96
  811220:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  811224:	e03fff15 	stw	zero,-4(fp)
  811228:	00002906 	br	8112d0 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81122c:	0005303a 	rdctl	r2,status
  811230:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811234:	e0fffa17 	ldw	r3,-24(fp)
  811238:	00bfff84 	movi	r2,-2
  81123c:	1884703a 	and	r2,r3,r2
  811240:	1001703a 	wrctl	status,r2
  
  return context;
  811244:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811248:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
  81124c:	e0bffd17 	ldw	r2,-12(fp)
  811250:	10800417 	ldw	r2,16(r2)
  811254:	1005003a 	cmpeq	r2,r2,zero
  811258:	1000151e 	bne	r2,zero,8112b0 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
  81125c:	e0bffd17 	ldw	r2,-12(fp)
  811260:	10800117 	ldw	r2,4(r2)
  811264:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
  811268:	e0bffc17 	ldw	r2,-16(fp)
  81126c:	10c00017 	ldw	r3,0(r2)
  811270:	e0bffd17 	ldw	r2,-12(fp)
  811274:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
  811278:	e0bffd17 	ldw	r2,-12(fp)
  81127c:	10800417 	ldw	r2,16(r2)
  811280:	10ffffc4 	addi	r3,r2,-1
  811284:	e0bffd17 	ldw	r2,-12(fp)
  811288:	10c00415 	stw	r3,16(r2)
  81128c:	e0bffb17 	ldw	r2,-20(fp)
  811290:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811294:	e0bff917 	ldw	r2,-28(fp)
  811298:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
  81129c:	e0bffe17 	ldw	r2,-8(fp)
  8112a0:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
  8112a4:	e0bffc17 	ldw	r2,-16(fp)
  8112a8:	e0bfff15 	stw	r2,-4(fp)
  8112ac:	00000806 	br	8112d0 <OSMemGet+0xf0>
  8112b0:	e0bffb17 	ldw	r2,-20(fp)
  8112b4:	e0bff815 	stw	r2,-32(fp)
  8112b8:	e0bff817 	ldw	r2,-32(fp)
  8112bc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
  8112c0:	e0fffe17 	ldw	r3,-8(fp)
  8112c4:	00801744 	movi	r2,93
  8112c8:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
  8112cc:	e03fff15 	stw	zero,-4(fp)
  8112d0:	e0bfff17 	ldw	r2,-4(fp)
}
  8112d4:	e037883a 	mov	sp,fp
  8112d8:	df000017 	ldw	fp,0(sp)
  8112dc:	dec00104 	addi	sp,sp,4
  8112e0:	f800283a 	ret

008112e4 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  8112e4:	defff604 	addi	sp,sp,-40
  8112e8:	dfc00915 	stw	ra,36(sp)
  8112ec:	df000815 	stw	fp,32(sp)
  8112f0:	df000804 	addi	fp,sp,32
  8112f4:	e13ffc15 	stw	r4,-16(fp)
  8112f8:	e17ffd15 	stw	r5,-12(fp)
  8112fc:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811300:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  811304:	e0bffe17 	ldw	r2,-8(fp)
  811308:	1004c03a 	cmpne	r2,r2,zero
  81130c:	1000021e 	bne	r2,zero,811318 <OSMemNameGet+0x34>
        return (0);
  811310:	e03fff15 	stw	zero,-4(fp)
  811314:	00003006 	br	8113d8 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  811318:	e0bffc17 	ldw	r2,-16(fp)
  81131c:	1004c03a 	cmpne	r2,r2,zero
  811320:	1000051e 	bne	r2,zero,811338 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  811324:	e0fffe17 	ldw	r3,-8(fp)
  811328:	00801804 	movi	r2,96
  81132c:	18800005 	stb	r2,0(r3)
        return (0);
  811330:	e03fff15 	stw	zero,-4(fp)
  811334:	00002806 	br	8113d8 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  811338:	e0bffd17 	ldw	r2,-12(fp)
  81133c:	1004c03a 	cmpne	r2,r2,zero
  811340:	1000051e 	bne	r2,zero,811358 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
  811344:	e0fffe17 	ldw	r3,-8(fp)
  811348:	00800304 	movi	r2,12
  81134c:	18800005 	stb	r2,0(r3)
        return (0);
  811350:	e03fff15 	stw	zero,-4(fp)
  811354:	00002006 	br	8113d8 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  811358:	008020b4 	movhi	r2,130
  81135c:	10a98904 	addi	r2,r2,-23004
  811360:	10800003 	ldbu	r2,0(r2)
  811364:	10803fcc 	andi	r2,r2,255
  811368:	1005003a 	cmpeq	r2,r2,zero
  81136c:	1000051e 	bne	r2,zero,811384 <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
  811370:	e0fffe17 	ldw	r3,-8(fp)
  811374:	00800444 	movi	r2,17
  811378:	18800005 	stb	r2,0(r3)
        return (0);
  81137c:	e03fff15 	stw	zero,-4(fp)
  811380:	00001506 	br	8113d8 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811384:	0005303a 	rdctl	r2,status
  811388:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81138c:	e0fff917 	ldw	r3,-28(fp)
  811390:	00bfff84 	movi	r2,-2
  811394:	1884703a 	and	r2,r3,r2
  811398:	1001703a 	wrctl	status,r2
  
  return context;
  81139c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8113a0:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
  8113a4:	e0bffc17 	ldw	r2,-16(fp)
  8113a8:	11400504 	addi	r5,r2,20
  8113ac:	e13ffd17 	ldw	r4,-12(fp)
  8113b0:	080ef580 	call	80ef58 <OS_StrCopy>
  8113b4:	e0bffb05 	stb	r2,-20(fp)
  8113b8:	e0bffa17 	ldw	r2,-24(fp)
  8113bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8113c0:	e0bff817 	ldw	r2,-32(fp)
  8113c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8113c8:	e0bffe17 	ldw	r2,-8(fp)
  8113cc:	10000005 	stb	zero,0(r2)
    return (len);
  8113d0:	e0bffb03 	ldbu	r2,-20(fp)
  8113d4:	e0bfff15 	stw	r2,-4(fp)
  8113d8:	e0bfff17 	ldw	r2,-4(fp)
}
  8113dc:	e037883a 	mov	sp,fp
  8113e0:	dfc00117 	ldw	ra,4(sp)
  8113e4:	df000017 	ldw	fp,0(sp)
  8113e8:	dec00204 	addi	sp,sp,8
  8113ec:	f800283a 	ret

008113f0 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
  8113f0:	defff604 	addi	sp,sp,-40
  8113f4:	dfc00915 	stw	ra,36(sp)
  8113f8:	df000815 	stw	fp,32(sp)
  8113fc:	df000804 	addi	fp,sp,32
  811400:	e13ffd15 	stw	r4,-12(fp)
  811404:	e17ffe15 	stw	r5,-8(fp)
  811408:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81140c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  811410:	e0bfff17 	ldw	r2,-4(fp)
  811414:	1005003a 	cmpeq	r2,r2,zero
  811418:	1000381e 	bne	r2,zero,8114fc <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
  81141c:	e0bffd17 	ldw	r2,-12(fp)
  811420:	1004c03a 	cmpne	r2,r2,zero
  811424:	1000041e 	bne	r2,zero,811438 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
  811428:	e0ffff17 	ldw	r3,-4(fp)
  81142c:	00801804 	movi	r2,96
  811430:	18800005 	stb	r2,0(r3)
        return;
  811434:	00003106 	br	8114fc <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
  811438:	e0bffe17 	ldw	r2,-8(fp)
  81143c:	1004c03a 	cmpne	r2,r2,zero
  811440:	1000041e 	bne	r2,zero,811454 <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
  811444:	e0ffff17 	ldw	r3,-4(fp)
  811448:	00800304 	movi	r2,12
  81144c:	18800005 	stb	r2,0(r3)
        return;
  811450:	00002a06 	br	8114fc <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  811454:	008020b4 	movhi	r2,130
  811458:	10a98904 	addi	r2,r2,-23004
  81145c:	10800003 	ldbu	r2,0(r2)
  811460:	10803fcc 	andi	r2,r2,255
  811464:	1005003a 	cmpeq	r2,r2,zero
  811468:	1000041e 	bne	r2,zero,81147c <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
  81146c:	e0ffff17 	ldw	r3,-4(fp)
  811470:	00800484 	movi	r2,18
  811474:	18800005 	stb	r2,0(r3)
        return;
  811478:	00002006 	br	8114fc <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81147c:	0005303a 	rdctl	r2,status
  811480:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811484:	e0fffa17 	ldw	r3,-24(fp)
  811488:	00bfff84 	movi	r2,-2
  81148c:	1884703a 	and	r2,r3,r2
  811490:	1001703a 	wrctl	status,r2
  
  return context;
  811494:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  811498:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
  81149c:	e13ffe17 	ldw	r4,-8(fp)
  8114a0:	080efd80 	call	80efd8 <OS_StrLen>
  8114a4:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
  8114a8:	e0bffc03 	ldbu	r2,-16(fp)
  8114ac:	10800830 	cmpltui	r2,r2,32
  8114b0:	1000081e 	bne	r2,zero,8114d4 <OSMemNameSet+0xe4>
  8114b4:	e0bffb17 	ldw	r2,-20(fp)
  8114b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8114bc:	e0bff917 	ldw	r2,-28(fp)
  8114c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
  8114c4:	e0ffff17 	ldw	r3,-4(fp)
  8114c8:	008018c4 	movi	r2,99
  8114cc:	18800005 	stb	r2,0(r3)
        return;
  8114d0:	00000a06 	br	8114fc <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
  8114d4:	e0bffd17 	ldw	r2,-12(fp)
  8114d8:	11000504 	addi	r4,r2,20
  8114dc:	e17ffe17 	ldw	r5,-8(fp)
  8114e0:	080ef580 	call	80ef58 <OS_StrCopy>
  8114e4:	e0bffb17 	ldw	r2,-20(fp)
  8114e8:	e0bff815 	stw	r2,-32(fp)
  8114ec:	e0bff817 	ldw	r2,-32(fp)
  8114f0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8114f4:	e0bfff17 	ldw	r2,-4(fp)
  8114f8:	10000005 	stb	zero,0(r2)
}
  8114fc:	e037883a 	mov	sp,fp
  811500:	dfc00117 	ldw	ra,4(sp)
  811504:	df000017 	ldw	fp,0(sp)
  811508:	dec00204 	addi	sp,sp,8
  81150c:	f800283a 	ret

00811510 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
  811510:	defff804 	addi	sp,sp,-32
  811514:	df000715 	stw	fp,28(sp)
  811518:	df000704 	addi	fp,sp,28
  81151c:	e13ffd15 	stw	r4,-12(fp)
  811520:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811524:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  811528:	e0bffd17 	ldw	r2,-12(fp)
  81152c:	1004c03a 	cmpne	r2,r2,zero
  811530:	1000031e 	bne	r2,zero,811540 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  811534:	00801804 	movi	r2,96
  811538:	e0bfff15 	stw	r2,-4(fp)
  81153c:	00002b06 	br	8115ec <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
  811540:	e0bffe17 	ldw	r2,-8(fp)
  811544:	1004c03a 	cmpne	r2,r2,zero
  811548:	1000031e 	bne	r2,zero,811558 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
  81154c:	008017c4 	movi	r2,95
  811550:	e0bfff15 	stw	r2,-4(fp)
  811554:	00002506 	br	8115ec <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811558:	0005303a 	rdctl	r2,status
  81155c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811560:	e0fffb17 	ldw	r3,-20(fp)
  811564:	00bfff84 	movi	r2,-2
  811568:	1884703a 	and	r2,r3,r2
  81156c:	1001703a 	wrctl	status,r2
  
  return context;
  811570:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811574:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
  811578:	e0bffd17 	ldw	r2,-12(fp)
  81157c:	10c00417 	ldw	r3,16(r2)
  811580:	e0bffd17 	ldw	r2,-12(fp)
  811584:	10800317 	ldw	r2,12(r2)
  811588:	18800736 	bltu	r3,r2,8115a8 <OSMemPut+0x98>
  81158c:	e0bffc17 	ldw	r2,-16(fp)
  811590:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811594:	e0bffa17 	ldw	r2,-24(fp)
  811598:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
  81159c:	00801784 	movi	r2,94
  8115a0:	e0bfff15 	stw	r2,-4(fp)
  8115a4:	00001106 	br	8115ec <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
  8115a8:	e0fffe17 	ldw	r3,-8(fp)
  8115ac:	e0bffd17 	ldw	r2,-12(fp)
  8115b0:	10800117 	ldw	r2,4(r2)
  8115b4:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
  8115b8:	e0fffd17 	ldw	r3,-12(fp)
  8115bc:	e0bffe17 	ldw	r2,-8(fp)
  8115c0:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
  8115c4:	e0bffd17 	ldw	r2,-12(fp)
  8115c8:	10800417 	ldw	r2,16(r2)
  8115cc:	10c00044 	addi	r3,r2,1
  8115d0:	e0bffd17 	ldw	r2,-12(fp)
  8115d4:	10c00415 	stw	r3,16(r2)
  8115d8:	e0bffc17 	ldw	r2,-16(fp)
  8115dc:	e0bff915 	stw	r2,-28(fp)
  8115e0:	e0bff917 	ldw	r2,-28(fp)
  8115e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
  8115e8:	e03fff15 	stw	zero,-4(fp)
  8115ec:	e0bfff17 	ldw	r2,-4(fp)
}
  8115f0:	e037883a 	mov	sp,fp
  8115f4:	df000017 	ldw	fp,0(sp)
  8115f8:	dec00104 	addi	sp,sp,4
  8115fc:	f800283a 	ret

00811600 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
  811600:	defff904 	addi	sp,sp,-28
  811604:	df000615 	stw	fp,24(sp)
  811608:	df000604 	addi	fp,sp,24
  81160c:	e13ffd15 	stw	r4,-12(fp)
  811610:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811614:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
  811618:	e0bffd17 	ldw	r2,-12(fp)
  81161c:	1004c03a 	cmpne	r2,r2,zero
  811620:	1000031e 	bne	r2,zero,811630 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
  811624:	00801804 	movi	r2,96
  811628:	e0bfff15 	stw	r2,-4(fp)
  81162c:	00002e06 	br	8116e8 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
  811630:	e0bffe17 	ldw	r2,-8(fp)
  811634:	1004c03a 	cmpne	r2,r2,zero
  811638:	1000031e 	bne	r2,zero,811648 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
  81163c:	00801844 	movi	r2,97
  811640:	e0bfff15 	stw	r2,-4(fp)
  811644:	00002806 	br	8116e8 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811648:	0005303a 	rdctl	r2,status
  81164c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811650:	e0fffb17 	ldw	r3,-20(fp)
  811654:	00bfff84 	movi	r2,-2
  811658:	1884703a 	and	r2,r3,r2
  81165c:	1001703a 	wrctl	status,r2
  
  return context;
  811660:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811664:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
  811668:	e0bffd17 	ldw	r2,-12(fp)
  81166c:	10c00017 	ldw	r3,0(r2)
  811670:	e0bffe17 	ldw	r2,-8(fp)
  811674:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
  811678:	e0bffd17 	ldw	r2,-12(fp)
  81167c:	10c00117 	ldw	r3,4(r2)
  811680:	e0bffe17 	ldw	r2,-8(fp)
  811684:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
  811688:	e0bffd17 	ldw	r2,-12(fp)
  81168c:	10c00217 	ldw	r3,8(r2)
  811690:	e0bffe17 	ldw	r2,-8(fp)
  811694:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
  811698:	e0bffd17 	ldw	r2,-12(fp)
  81169c:	10c00317 	ldw	r3,12(r2)
  8116a0:	e0bffe17 	ldw	r2,-8(fp)
  8116a4:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
  8116a8:	e0bffd17 	ldw	r2,-12(fp)
  8116ac:	10c00417 	ldw	r3,16(r2)
  8116b0:	e0bffe17 	ldw	r2,-8(fp)
  8116b4:	10c00415 	stw	r3,16(r2)
  8116b8:	e0bffc17 	ldw	r2,-16(fp)
  8116bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8116c0:	e0bffa17 	ldw	r2,-24(fp)
  8116c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
  8116c8:	e0bffe17 	ldw	r2,-8(fp)
  8116cc:	10c00317 	ldw	r3,12(r2)
  8116d0:	e0bffe17 	ldw	r2,-8(fp)
  8116d4:	10800417 	ldw	r2,16(r2)
  8116d8:	1887c83a 	sub	r3,r3,r2
  8116dc:	e0bffe17 	ldw	r2,-8(fp)
  8116e0:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
  8116e4:	e03fff15 	stw	zero,-4(fp)
  8116e8:	e0bfff17 	ldw	r2,-4(fp)
}
  8116ec:	e037883a 	mov	sp,fp
  8116f0:	df000017 	ldw	fp,0(sp)
  8116f4:	dec00104 	addi	sp,sp,4
  8116f8:	f800283a 	ret

008116fc <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
  8116fc:	defffc04 	addi	sp,sp,-16
  811700:	dfc00315 	stw	ra,12(sp)
  811704:	df000215 	stw	fp,8(sp)
  811708:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
  81170c:	010020b4 	movhi	r4,130
  811710:	21327804 	addi	r4,r4,-13856
  811714:	01430c04 	movi	r5,3120
  811718:	080ed540 	call	80ed54 <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
  81171c:	008020b4 	movhi	r2,130
  811720:	10b27804 	addi	r2,r2,-13856
  811724:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  811728:	e03ffe0d 	sth	zero,-8(fp)
  81172c:	00001406 	br	811780 <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
  811730:	e13ffe0b 	ldhu	r4,-8(fp)
  811734:	01400d04 	movi	r5,52
  811738:	08019440 	call	801944 <__mulsi3>
  81173c:	1007883a 	mov	r3,r2
  811740:	008020b4 	movhi	r2,130
  811744:	10b28504 	addi	r2,r2,-13804
  811748:	1887883a 	add	r3,r3,r2
  81174c:	e0bfff17 	ldw	r2,-4(fp)
  811750:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
  811754:	e0ffff17 	ldw	r3,-4(fp)
  811758:	00800fc4 	movi	r2,63
  81175c:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
  811760:	e0bfff17 	ldw	r2,-4(fp)
  811764:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
  811768:	e0bfff17 	ldw	r2,-4(fp)
  81176c:	10800d04 	addi	r2,r2,52
  811770:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
  811774:	e0bffe0b 	ldhu	r2,-8(fp)
  811778:	10800044 	addi	r2,r2,1
  81177c:	e0bffe0d 	sth	r2,-8(fp)
  811780:	e0bffe0b 	ldhu	r2,-8(fp)
  811784:	10800ef0 	cmpltui	r2,r2,59
  811788:	103fe91e 	bne	r2,zero,811730 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
  81178c:	e0bfff17 	ldw	r2,-4(fp)
  811790:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
  811794:	e0ffff17 	ldw	r3,-4(fp)
  811798:	00800fc4 	movi	r2,63
  81179c:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
  8117a0:	e0bfff17 	ldw	r2,-4(fp)
  8117a4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
  8117a8:	00c020b4 	movhi	r3,130
  8117ac:	18e98404 	addi	r3,r3,-23024
  8117b0:	008020b4 	movhi	r2,130
  8117b4:	10b27804 	addi	r2,r2,-13856
  8117b8:	18800015 	stw	r2,0(r3)
#endif
}
  8117bc:	e037883a 	mov	sp,fp
  8117c0:	dfc00117 	ldw	ra,4(sp)
  8117c4:	df000017 	ldw	fp,0(sp)
  8117c8:	dec00204 	addi	sp,sp,8
  8117cc:	f800283a 	ret

008117d0 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
  8117d0:	defff704 	addi	sp,sp,-36
  8117d4:	df000815 	stw	fp,32(sp)
  8117d8:	df000804 	addi	fp,sp,32
  8117dc:	e13ffd15 	stw	r4,-12(fp)
  8117e0:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  8117e4:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  8117e8:	e0bffe17 	ldw	r2,-8(fp)
  8117ec:	1004c03a 	cmpne	r2,r2,zero
  8117f0:	1000021e 	bne	r2,zero,8117fc <OSQAccept+0x2c>
        return ((void *)0);
  8117f4:	e03fff15 	stw	zero,-4(fp)
  8117f8:	00004506 	br	811910 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  8117fc:	e0bffd17 	ldw	r2,-12(fp)
  811800:	1004c03a 	cmpne	r2,r2,zero
  811804:	1000051e 	bne	r2,zero,81181c <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
  811808:	e0fffe17 	ldw	r3,-8(fp)
  81180c:	00800104 	movi	r2,4
  811810:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  811814:	e03fff15 	stw	zero,-4(fp)
  811818:	00003d06 	br	811910 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  81181c:	e0bffd17 	ldw	r2,-12(fp)
  811820:	10800003 	ldbu	r2,0(r2)
  811824:	10803fcc 	andi	r2,r2,255
  811828:	108000a0 	cmpeqi	r2,r2,2
  81182c:	1000051e 	bne	r2,zero,811844 <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
  811830:	e0fffe17 	ldw	r3,-8(fp)
  811834:	00800044 	movi	r2,1
  811838:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  81183c:	e03fff15 	stw	zero,-4(fp)
  811840:	00003306 	br	811910 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811844:	0005303a 	rdctl	r2,status
  811848:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81184c:	e0fff917 	ldw	r3,-28(fp)
  811850:	00bfff84 	movi	r2,-2
  811854:	1884703a 	and	r2,r3,r2
  811858:	1001703a 	wrctl	status,r2
  
  return context;
  81185c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  811860:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  811864:	e0bffd17 	ldw	r2,-12(fp)
  811868:	10800117 	ldw	r2,4(r2)
  81186c:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  811870:	e0bffb17 	ldw	r2,-20(fp)
  811874:	1080058b 	ldhu	r2,22(r2)
  811878:	10bfffcc 	andi	r2,r2,65535
  81187c:	1005003a 	cmpeq	r2,r2,zero
  811880:	1000191e 	bne	r2,zero,8118e8 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  811884:	e0bffb17 	ldw	r2,-20(fp)
  811888:	10c00417 	ldw	r3,16(r2)
  81188c:	18800017 	ldw	r2,0(r3)
  811890:	e0bffc15 	stw	r2,-16(fp)
  811894:	18c00104 	addi	r3,r3,4
  811898:	e0bffb17 	ldw	r2,-20(fp)
  81189c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  8118a0:	e0bffb17 	ldw	r2,-20(fp)
  8118a4:	1080058b 	ldhu	r2,22(r2)
  8118a8:	10bfffc4 	addi	r2,r2,-1
  8118ac:	1007883a 	mov	r3,r2
  8118b0:	e0bffb17 	ldw	r2,-20(fp)
  8118b4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  8118b8:	e0bffb17 	ldw	r2,-20(fp)
  8118bc:	10c00417 	ldw	r3,16(r2)
  8118c0:	e0bffb17 	ldw	r2,-20(fp)
  8118c4:	10800217 	ldw	r2,8(r2)
  8118c8:	1880041e 	bne	r3,r2,8118dc <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
  8118cc:	e0bffb17 	ldw	r2,-20(fp)
  8118d0:	10c00117 	ldw	r3,4(r2)
  8118d4:	e0bffb17 	ldw	r2,-20(fp)
  8118d8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
  8118dc:	e0bffe17 	ldw	r2,-8(fp)
  8118e0:	10000005 	stb	zero,0(r2)
  8118e4:	00000406 	br	8118f8 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
  8118e8:	e0fffe17 	ldw	r3,-8(fp)
  8118ec:	008007c4 	movi	r2,31
  8118f0:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
  8118f4:	e03ffc15 	stw	zero,-16(fp)
  8118f8:	e0bffa17 	ldw	r2,-24(fp)
  8118fc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811900:	e0bff817 	ldw	r2,-32(fp)
  811904:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
  811908:	e0bffc17 	ldw	r2,-16(fp)
  81190c:	e0bfff15 	stw	r2,-4(fp)
  811910:	e0bfff17 	ldw	r2,-4(fp)
}
  811914:	e037883a 	mov	sp,fp
  811918:	df000017 	ldw	fp,0(sp)
  81191c:	dec00104 	addi	sp,sp,4
  811920:	f800283a 	ret

00811924 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
  811924:	defff304 	addi	sp,sp,-52
  811928:	dfc00c15 	stw	ra,48(sp)
  81192c:	df000b15 	stw	fp,44(sp)
  811930:	df000b04 	addi	fp,sp,44
  811934:	e13ffd15 	stw	r4,-12(fp)
  811938:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81193c:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  811940:	008020b4 	movhi	r2,130
  811944:	10a98904 	addi	r2,r2,-23004
  811948:	10800003 	ldbu	r2,0(r2)
  81194c:	10803fcc 	andi	r2,r2,255
  811950:	1005003a 	cmpeq	r2,r2,zero
  811954:	1000021e 	bne	r2,zero,811960 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
  811958:	e03fff15 	stw	zero,-4(fp)
  81195c:	00007006 	br	811b20 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811960:	0005303a 	rdctl	r2,status
  811964:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811968:	e0fff917 	ldw	r3,-28(fp)
  81196c:	00bfff84 	movi	r2,-2
  811970:	1884703a 	and	r2,r3,r2
  811974:	1001703a 	wrctl	status,r2
  
  return context;
  811978:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81197c:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
  811980:	008020b4 	movhi	r2,130
  811984:	10a98804 	addi	r2,r2,-23008
  811988:	10800017 	ldw	r2,0(r2)
  81198c:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
  811990:	008020b4 	movhi	r2,130
  811994:	10a98804 	addi	r2,r2,-23008
  811998:	10800017 	ldw	r2,0(r2)
  81199c:	1005003a 	cmpeq	r2,r2,zero
  8119a0:	1000081e 	bne	r2,zero,8119c4 <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  8119a4:	008020b4 	movhi	r2,130
  8119a8:	10a98804 	addi	r2,r2,-23008
  8119ac:	10800017 	ldw	r2,0(r2)
  8119b0:	10800117 	ldw	r2,4(r2)
  8119b4:	1007883a 	mov	r3,r2
  8119b8:	008020b4 	movhi	r2,130
  8119bc:	10a98804 	addi	r2,r2,-23008
  8119c0:	10c00015 	stw	r3,0(r2)
  8119c4:	e0bffa17 	ldw	r2,-24(fp)
  8119c8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8119cc:	e0bff817 	ldw	r2,-32(fp)
  8119d0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
  8119d4:	e0bffc17 	ldw	r2,-16(fp)
  8119d8:	1005003a 	cmpeq	r2,r2,zero
  8119dc:	10004e1e 	bne	r2,zero,811b18 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8119e0:	0005303a 	rdctl	r2,status
  8119e4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8119e8:	e0fff717 	ldw	r3,-36(fp)
  8119ec:	00bfff84 	movi	r2,-2
  8119f0:	1884703a 	and	r2,r3,r2
  8119f4:	1001703a 	wrctl	status,r2
  
  return context;
  8119f8:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
  8119fc:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
  811a00:	008020b4 	movhi	r2,130
  811a04:	10a98604 	addi	r2,r2,-23016
  811a08:	10800017 	ldw	r2,0(r2)
  811a0c:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
  811a10:	e0bffb17 	ldw	r2,-20(fp)
  811a14:	1005003a 	cmpeq	r2,r2,zero
  811a18:	1000311e 	bne	r2,zero,811ae0 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
  811a1c:	008020b4 	movhi	r2,130
  811a20:	10a98604 	addi	r2,r2,-23016
  811a24:	10800017 	ldw	r2,0(r2)
  811a28:	10c00017 	ldw	r3,0(r2)
  811a2c:	008020b4 	movhi	r2,130
  811a30:	10a98604 	addi	r2,r2,-23016
  811a34:	10c00015 	stw	r3,0(r2)
  811a38:	e0bffa17 	ldw	r2,-24(fp)
  811a3c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811a40:	e0bff617 	ldw	r2,-40(fp)
  811a44:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
  811a48:	e0fffb17 	ldw	r3,-20(fp)
  811a4c:	e0bffd17 	ldw	r2,-12(fp)
  811a50:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
  811a54:	e0bffe0b 	ldhu	r2,-8(fp)
  811a58:	1085883a 	add	r2,r2,r2
  811a5c:	1085883a 	add	r2,r2,r2
  811a60:	1007883a 	mov	r3,r2
  811a64:	e0bffd17 	ldw	r2,-12(fp)
  811a68:	1887883a 	add	r3,r3,r2
  811a6c:	e0bffb17 	ldw	r2,-20(fp)
  811a70:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
  811a74:	e0fffb17 	ldw	r3,-20(fp)
  811a78:	e0bffd17 	ldw	r2,-12(fp)
  811a7c:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
  811a80:	e0fffb17 	ldw	r3,-20(fp)
  811a84:	e0bffd17 	ldw	r2,-12(fp)
  811a88:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
  811a8c:	e0fffb17 	ldw	r3,-20(fp)
  811a90:	e0bffe0b 	ldhu	r2,-8(fp)
  811a94:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
  811a98:	e0bffb17 	ldw	r2,-20(fp)
  811a9c:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
  811aa0:	e0fffc17 	ldw	r3,-16(fp)
  811aa4:	00800084 	movi	r2,2
  811aa8:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
  811aac:	e0bffc17 	ldw	r2,-16(fp)
  811ab0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
  811ab4:	e0fffc17 	ldw	r3,-16(fp)
  811ab8:	e0bffb17 	ldw	r2,-20(fp)
  811abc:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
  811ac0:	e0fffc17 	ldw	r3,-16(fp)
  811ac4:	00800fc4 	movi	r2,63
  811ac8:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
  811acc:	e0bffc17 	ldw	r2,-16(fp)
  811ad0:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
  811ad4:	e13ffc17 	ldw	r4,-16(fp)
  811ad8:	080e9880 	call	80e988 <OS_EventWaitListInit>
  811adc:	00000e06 	br	811b18 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
  811ae0:	008020b4 	movhi	r2,130
  811ae4:	10a98804 	addi	r2,r2,-23008
  811ae8:	10c00017 	ldw	r3,0(r2)
  811aec:	e0bffc17 	ldw	r2,-16(fp)
  811af0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
  811af4:	00c020b4 	movhi	r3,130
  811af8:	18e98804 	addi	r3,r3,-23008
  811afc:	e0bffc17 	ldw	r2,-16(fp)
  811b00:	18800015 	stw	r2,0(r3)
  811b04:	e0bffa17 	ldw	r2,-24(fp)
  811b08:	e0bff515 	stw	r2,-44(fp)
  811b0c:	e0bff517 	ldw	r2,-44(fp)
  811b10:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
  811b14:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
  811b18:	e0bffc17 	ldw	r2,-16(fp)
  811b1c:	e0bfff15 	stw	r2,-4(fp)
  811b20:	e0bfff17 	ldw	r2,-4(fp)
}
  811b24:	e037883a 	mov	sp,fp
  811b28:	dfc00117 	ldw	ra,4(sp)
  811b2c:	df000017 	ldw	fp,0(sp)
  811b30:	dec00204 	addi	sp,sp,8
  811b34:	f800283a 	ret

00811b38 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  811b38:	defff004 	addi	sp,sp,-64
  811b3c:	dfc00f15 	stw	ra,60(sp)
  811b40:	df000e15 	stw	fp,56(sp)
  811b44:	df000e04 	addi	fp,sp,56
  811b48:	e13ffb15 	stw	r4,-20(fp)
  811b4c:	e1bffd15 	stw	r6,-12(fp)
  811b50:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  811b54:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  811b58:	e0bffd17 	ldw	r2,-12(fp)
  811b5c:	1004c03a 	cmpne	r2,r2,zero
  811b60:	1000031e 	bne	r2,zero,811b70 <OSQDel+0x38>
        return (pevent);
  811b64:	e0bffb17 	ldw	r2,-20(fp)
  811b68:	e0bfff15 	stw	r2,-4(fp)
  811b6c:	0000ac06 	br	811e20 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  811b70:	e0bffb17 	ldw	r2,-20(fp)
  811b74:	1004c03a 	cmpne	r2,r2,zero
  811b78:	1000061e 	bne	r2,zero,811b94 <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  811b7c:	e0fffd17 	ldw	r3,-12(fp)
  811b80:	00800104 	movi	r2,4
  811b84:	18800005 	stb	r2,0(r3)
        return (pevent);
  811b88:	e0fffb17 	ldw	r3,-20(fp)
  811b8c:	e0ffff15 	stw	r3,-4(fp)
  811b90:	0000a306 	br	811e20 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  811b94:	e0bffb17 	ldw	r2,-20(fp)
  811b98:	10800003 	ldbu	r2,0(r2)
  811b9c:	10803fcc 	andi	r2,r2,255
  811ba0:	108000a0 	cmpeqi	r2,r2,2
  811ba4:	1000061e 	bne	r2,zero,811bc0 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  811ba8:	e0fffd17 	ldw	r3,-12(fp)
  811bac:	00800044 	movi	r2,1
  811bb0:	18800005 	stb	r2,0(r3)
        return (pevent);
  811bb4:	e0bffb17 	ldw	r2,-20(fp)
  811bb8:	e0bfff15 	stw	r2,-4(fp)
  811bbc:	00009806 	br	811e20 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  811bc0:	008020b4 	movhi	r2,130
  811bc4:	10a98904 	addi	r2,r2,-23004
  811bc8:	10800003 	ldbu	r2,0(r2)
  811bcc:	10803fcc 	andi	r2,r2,255
  811bd0:	1005003a 	cmpeq	r2,r2,zero
  811bd4:	1000061e 	bne	r2,zero,811bf0 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
  811bd8:	e0fffd17 	ldw	r3,-12(fp)
  811bdc:	008003c4 	movi	r2,15
  811be0:	18800005 	stb	r2,0(r3)
        return (pevent);
  811be4:	e0fffb17 	ldw	r3,-20(fp)
  811be8:	e0ffff15 	stw	r3,-4(fp)
  811bec:	00008c06 	br	811e20 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811bf0:	0005303a 	rdctl	r2,status
  811bf4:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811bf8:	e0fff617 	ldw	r3,-40(fp)
  811bfc:	00bfff84 	movi	r2,-2
  811c00:	1884703a 	and	r2,r3,r2
  811c04:	1001703a 	wrctl	status,r2
  
  return context;
  811c08:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
  811c0c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
  811c10:	e0bffb17 	ldw	r2,-20(fp)
  811c14:	10800283 	ldbu	r2,10(r2)
  811c18:	10803fcc 	andi	r2,r2,255
  811c1c:	1005003a 	cmpeq	r2,r2,zero
  811c20:	1000031e 	bne	r2,zero,811c30 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  811c24:	00800044 	movi	r2,1
  811c28:	e0bffa05 	stb	r2,-24(fp)
  811c2c:	00000106 	br	811c34 <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  811c30:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  811c34:	e0bffc03 	ldbu	r2,-16(fp)
  811c38:	e0bffe15 	stw	r2,-8(fp)
  811c3c:	e0fffe17 	ldw	r3,-8(fp)
  811c40:	1805003a 	cmpeq	r2,r3,zero
  811c44:	1000041e 	bne	r2,zero,811c58 <OSQDel+0x120>
  811c48:	e0fffe17 	ldw	r3,-8(fp)
  811c4c:	18800060 	cmpeqi	r2,r3,1
  811c50:	1000391e 	bne	r2,zero,811d38 <OSQDel+0x200>
  811c54:	00006706 	br	811df4 <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
  811c58:	e0bffa03 	ldbu	r2,-24(fp)
  811c5c:	1004c03a 	cmpne	r2,r2,zero
  811c60:	1000261e 	bne	r2,zero,811cfc <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  811c64:	e0fffb17 	ldw	r3,-20(fp)
  811c68:	00800fc4 	movi	r2,63
  811c6c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  811c70:	e0bffb17 	ldw	r2,-20(fp)
  811c74:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
  811c78:	e0bffb17 	ldw	r2,-20(fp)
  811c7c:	10800117 	ldw	r2,4(r2)
  811c80:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
  811c84:	008020b4 	movhi	r2,130
  811c88:	10a98604 	addi	r2,r2,-23016
  811c8c:	10c00017 	ldw	r3,0(r2)
  811c90:	e0bff817 	ldw	r2,-32(fp)
  811c94:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
  811c98:	00c020b4 	movhi	r3,130
  811c9c:	18e98604 	addi	r3,r3,-23016
  811ca0:	e0bff817 	ldw	r2,-32(fp)
  811ca4:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  811ca8:	e0bffb17 	ldw	r2,-20(fp)
  811cac:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  811cb0:	008020b4 	movhi	r2,130
  811cb4:	10a98804 	addi	r2,r2,-23008
  811cb8:	10c00017 	ldw	r3,0(r2)
  811cbc:	e0bffb17 	ldw	r2,-20(fp)
  811cc0:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  811cc4:	e0bffb17 	ldw	r2,-20(fp)
  811cc8:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  811ccc:	00c020b4 	movhi	r3,130
  811cd0:	18e98804 	addi	r3,r3,-23008
  811cd4:	e0bffb17 	ldw	r2,-20(fp)
  811cd8:	18800015 	stw	r2,0(r3)
  811cdc:	e0bff717 	ldw	r2,-36(fp)
  811ce0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811ce4:	e0bff517 	ldw	r2,-44(fp)
  811ce8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  811cec:	e0bffd17 	ldw	r2,-12(fp)
  811cf0:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
  811cf4:	e03ff915 	stw	zero,-28(fp)
  811cf8:	00004706 	br	811e18 <OSQDel+0x2e0>
  811cfc:	e0bff717 	ldw	r2,-36(fp)
  811d00:	e0bff415 	stw	r2,-48(fp)
  811d04:	e0bff417 	ldw	r2,-48(fp)
  811d08:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  811d0c:	e0fffd17 	ldw	r3,-12(fp)
  811d10:	00801244 	movi	r2,73
  811d14:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  811d18:	e0bffb17 	ldw	r2,-20(fp)
  811d1c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  811d20:	00003d06 	br	811e18 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
  811d24:	e13ffb17 	ldw	r4,-20(fp)
  811d28:	000b883a 	mov	r5,zero
  811d2c:	01800104 	movi	r6,4
  811d30:	000f883a 	mov	r7,zero
  811d34:	080e3d40 	call	80e3d4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
  811d38:	e0bffb17 	ldw	r2,-20(fp)
  811d3c:	10800283 	ldbu	r2,10(r2)
  811d40:	10803fcc 	andi	r2,r2,255
  811d44:	1004c03a 	cmpne	r2,r2,zero
  811d48:	103ff61e 	bne	r2,zero,811d24 <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  811d4c:	e0fffb17 	ldw	r3,-20(fp)
  811d50:	00800fc4 	movi	r2,63
  811d54:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  811d58:	e0bffb17 	ldw	r2,-20(fp)
  811d5c:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
  811d60:	e0bffb17 	ldw	r2,-20(fp)
  811d64:	10800117 	ldw	r2,4(r2)
  811d68:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
  811d6c:	008020b4 	movhi	r2,130
  811d70:	10a98604 	addi	r2,r2,-23016
  811d74:	10c00017 	ldw	r3,0(r2)
  811d78:	e0bff817 	ldw	r2,-32(fp)
  811d7c:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
  811d80:	00c020b4 	movhi	r3,130
  811d84:	18e98604 	addi	r3,r3,-23016
  811d88:	e0bff817 	ldw	r2,-32(fp)
  811d8c:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  811d90:	e0bffb17 	ldw	r2,-20(fp)
  811d94:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  811d98:	008020b4 	movhi	r2,130
  811d9c:	10a98804 	addi	r2,r2,-23008
  811da0:	10c00017 	ldw	r3,0(r2)
  811da4:	e0bffb17 	ldw	r2,-20(fp)
  811da8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  811dac:	e0bffb17 	ldw	r2,-20(fp)
  811db0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  811db4:	00c020b4 	movhi	r3,130
  811db8:	18e98804 	addi	r3,r3,-23008
  811dbc:	e0bffb17 	ldw	r2,-20(fp)
  811dc0:	18800015 	stw	r2,0(r3)
  811dc4:	e0bff717 	ldw	r2,-36(fp)
  811dc8:	e0bff315 	stw	r2,-52(fp)
  811dcc:	e0bff317 	ldw	r2,-52(fp)
  811dd0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  811dd4:	e0bffa03 	ldbu	r2,-24(fp)
  811dd8:	10800058 	cmpnei	r2,r2,1
  811ddc:	1000011e 	bne	r2,zero,811de4 <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  811de0:	080ee140 	call	80ee14 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  811de4:	e0bffd17 	ldw	r2,-12(fp)
  811de8:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
  811dec:	e03ff915 	stw	zero,-28(fp)
             break;
  811df0:	00000906 	br	811e18 <OSQDel+0x2e0>
  811df4:	e0bff717 	ldw	r2,-36(fp)
  811df8:	e0bff215 	stw	r2,-56(fp)
  811dfc:	e0bff217 	ldw	r2,-56(fp)
  811e00:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  811e04:	e0fffd17 	ldw	r3,-12(fp)
  811e08:	008001c4 	movi	r2,7
  811e0c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  811e10:	e0bffb17 	ldw	r2,-20(fp)
  811e14:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  811e18:	e0bff917 	ldw	r2,-28(fp)
  811e1c:	e0bfff15 	stw	r2,-4(fp)
  811e20:	e0bfff17 	ldw	r2,-4(fp)
}
  811e24:	e037883a 	mov	sp,fp
  811e28:	dfc00117 	ldw	ra,4(sp)
  811e2c:	df000017 	ldw	fp,0(sp)
  811e30:	dec00204 	addi	sp,sp,8
  811e34:	f800283a 	ret

00811e38 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
  811e38:	defff904 	addi	sp,sp,-28
  811e3c:	df000615 	stw	fp,24(sp)
  811e40:	df000604 	addi	fp,sp,24
  811e44:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  811e48:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  811e4c:	e0bffe17 	ldw	r2,-8(fp)
  811e50:	1004c03a 	cmpne	r2,r2,zero
  811e54:	1000031e 	bne	r2,zero,811e64 <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
  811e58:	00800104 	movi	r2,4
  811e5c:	e0bfff15 	stw	r2,-4(fp)
  811e60:	00002206 	br	811eec <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  811e64:	e0bffe17 	ldw	r2,-8(fp)
  811e68:	10800003 	ldbu	r2,0(r2)
  811e6c:	10803fcc 	andi	r2,r2,255
  811e70:	108000a0 	cmpeqi	r2,r2,2
  811e74:	1000031e 	bne	r2,zero,811e84 <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
  811e78:	00800044 	movi	r2,1
  811e7c:	e0bfff15 	stw	r2,-4(fp)
  811e80:	00001a06 	br	811eec <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811e84:	0005303a 	rdctl	r2,status
  811e88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811e8c:	e0fffb17 	ldw	r3,-20(fp)
  811e90:	00bfff84 	movi	r2,-2
  811e94:	1884703a 	and	r2,r3,r2
  811e98:	1001703a 	wrctl	status,r2
  
  return context;
  811e9c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  811ea0:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
  811ea4:	e0bffe17 	ldw	r2,-8(fp)
  811ea8:	10800117 	ldw	r2,4(r2)
  811eac:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
  811eb0:	e0bffd17 	ldw	r2,-12(fp)
  811eb4:	10c00117 	ldw	r3,4(r2)
  811eb8:	e0bffd17 	ldw	r2,-12(fp)
  811ebc:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
  811ec0:	e0bffd17 	ldw	r2,-12(fp)
  811ec4:	10c00117 	ldw	r3,4(r2)
  811ec8:	e0bffd17 	ldw	r2,-12(fp)
  811ecc:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
  811ed0:	e0bffd17 	ldw	r2,-12(fp)
  811ed4:	1000058d 	sth	zero,22(r2)
  811ed8:	e0bffc17 	ldw	r2,-16(fp)
  811edc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811ee0:	e0bffa17 	ldw	r2,-24(fp)
  811ee4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  811ee8:	e03fff15 	stw	zero,-4(fp)
  811eec:	e0bfff17 	ldw	r2,-4(fp)
}
  811ef0:	e037883a 	mov	sp,fp
  811ef4:	df000017 	ldw	fp,0(sp)
  811ef8:	dec00104 	addi	sp,sp,4
  811efc:	f800283a 	ret

00811f00 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  811f00:	defff104 	addi	sp,sp,-60
  811f04:	dfc00e15 	stw	ra,56(sp)
  811f08:	df000d15 	stw	fp,52(sp)
  811f0c:	df000d04 	addi	fp,sp,52
  811f10:	e13ffb15 	stw	r4,-20(fp)
  811f14:	e1bffd15 	stw	r6,-12(fp)
  811f18:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  811f1c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
  811f20:	e0bffd17 	ldw	r2,-12(fp)
  811f24:	1004c03a 	cmpne	r2,r2,zero
  811f28:	1000021e 	bne	r2,zero,811f34 <OSQPend+0x34>
        return ((void *)0);
  811f2c:	e03fff15 	stw	zero,-4(fp)
  811f30:	0000b506 	br	812208 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
  811f34:	e0bffb17 	ldw	r2,-20(fp)
  811f38:	1004c03a 	cmpne	r2,r2,zero
  811f3c:	1000051e 	bne	r2,zero,811f54 <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  811f40:	e0fffd17 	ldw	r3,-12(fp)
  811f44:	00800104 	movi	r2,4
  811f48:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  811f4c:	e03fff15 	stw	zero,-4(fp)
  811f50:	0000ad06 	br	812208 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
  811f54:	e0bffb17 	ldw	r2,-20(fp)
  811f58:	10800003 	ldbu	r2,0(r2)
  811f5c:	10803fcc 	andi	r2,r2,255
  811f60:	108000a0 	cmpeqi	r2,r2,2
  811f64:	1000051e 	bne	r2,zero,811f7c <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  811f68:	e0fffd17 	ldw	r3,-12(fp)
  811f6c:	00800044 	movi	r2,1
  811f70:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  811f74:	e03fff15 	stw	zero,-4(fp)
  811f78:	0000a306 	br	812208 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
  811f7c:	008020b4 	movhi	r2,130
  811f80:	10a98904 	addi	r2,r2,-23004
  811f84:	10800003 	ldbu	r2,0(r2)
  811f88:	10803fcc 	andi	r2,r2,255
  811f8c:	1005003a 	cmpeq	r2,r2,zero
  811f90:	1000051e 	bne	r2,zero,811fa8 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
  811f94:	e0fffd17 	ldw	r3,-12(fp)
  811f98:	00800084 	movi	r2,2
  811f9c:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  811fa0:	e03fff15 	stw	zero,-4(fp)
  811fa4:	00009806 	br	812208 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
  811fa8:	008020b4 	movhi	r2,130
  811fac:	10a97b04 	addi	r2,r2,-23060
  811fb0:	10800003 	ldbu	r2,0(r2)
  811fb4:	10803fcc 	andi	r2,r2,255
  811fb8:	1005003a 	cmpeq	r2,r2,zero
  811fbc:	1000051e 	bne	r2,zero,811fd4 <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
  811fc0:	e0fffd17 	ldw	r3,-12(fp)
  811fc4:	00800344 	movi	r2,13
  811fc8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
  811fcc:	e03fff15 	stw	zero,-4(fp)
  811fd0:	00008d06 	br	812208 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811fd4:	0005303a 	rdctl	r2,status
  811fd8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811fdc:	e0fff717 	ldw	r3,-36(fp)
  811fe0:	00bfff84 	movi	r2,-2
  811fe4:	1884703a 	and	r2,r3,r2
  811fe8:	1001703a 	wrctl	status,r2
  
  return context;
  811fec:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  811ff0:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
  811ff4:	e0bffb17 	ldw	r2,-20(fp)
  811ff8:	10800117 	ldw	r2,4(r2)
  811ffc:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
  812000:	e0bff917 	ldw	r2,-28(fp)
  812004:	1080058b 	ldhu	r2,22(r2)
  812008:	10bfffcc 	andi	r2,r2,65535
  81200c:	1005003a 	cmpeq	r2,r2,zero
  812010:	10001f1e 	bne	r2,zero,812090 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
  812014:	e0bff917 	ldw	r2,-28(fp)
  812018:	10c00417 	ldw	r3,16(r2)
  81201c:	18800017 	ldw	r2,0(r3)
  812020:	e0bffa15 	stw	r2,-24(fp)
  812024:	18c00104 	addi	r3,r3,4
  812028:	e0bff917 	ldw	r2,-28(fp)
  81202c:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
  812030:	e0bff917 	ldw	r2,-28(fp)
  812034:	1080058b 	ldhu	r2,22(r2)
  812038:	10bfffc4 	addi	r2,r2,-1
  81203c:	1007883a 	mov	r3,r2
  812040:	e0bff917 	ldw	r2,-28(fp)
  812044:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
  812048:	e0bff917 	ldw	r2,-28(fp)
  81204c:	10c00417 	ldw	r3,16(r2)
  812050:	e0bff917 	ldw	r2,-28(fp)
  812054:	10800217 	ldw	r2,8(r2)
  812058:	1880041e 	bne	r3,r2,81206c <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
  81205c:	e0bff917 	ldw	r2,-28(fp)
  812060:	10c00117 	ldw	r3,4(r2)
  812064:	e0bff917 	ldw	r2,-28(fp)
  812068:	10c00415 	stw	r3,16(r2)
  81206c:	e0bff817 	ldw	r2,-32(fp)
  812070:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812074:	e0bff617 	ldw	r2,-40(fp)
  812078:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  81207c:	e0bffd17 	ldw	r2,-12(fp)
  812080:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
  812084:	e0bffa17 	ldw	r2,-24(fp)
  812088:	e0bfff15 	stw	r2,-4(fp)
  81208c:	00005e06 	br	812208 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
  812090:	008020b4 	movhi	r2,130
  812094:	10a98a04 	addi	r2,r2,-23000
  812098:	10c00017 	ldw	r3,0(r2)
  81209c:	008020b4 	movhi	r2,130
  8120a0:	10a98a04 	addi	r2,r2,-23000
  8120a4:	10800017 	ldw	r2,0(r2)
  8120a8:	10800c03 	ldbu	r2,48(r2)
  8120ac:	10800114 	ori	r2,r2,4
  8120b0:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8120b4:	008020b4 	movhi	r2,130
  8120b8:	10a98a04 	addi	r2,r2,-23000
  8120bc:	10800017 	ldw	r2,0(r2)
  8120c0:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
  8120c4:	008020b4 	movhi	r2,130
  8120c8:	10a98a04 	addi	r2,r2,-23000
  8120cc:	10c00017 	ldw	r3,0(r2)
  8120d0:	e0bffc0b 	ldhu	r2,-16(fp)
  8120d4:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
  8120d8:	e13ffb17 	ldw	r4,-20(fp)
  8120dc:	080e5680 	call	80e568 <OS_EventTaskWait>
  8120e0:	e0bff817 	ldw	r2,-32(fp)
  8120e4:	e0bff515 	stw	r2,-44(fp)
  8120e8:	e0bff517 	ldw	r2,-44(fp)
  8120ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
  8120f0:	080ee140 	call	80ee14 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8120f4:	0005303a 	rdctl	r2,status
  8120f8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8120fc:	e0fff417 	ldw	r3,-48(fp)
  812100:	00bfff84 	movi	r2,-2
  812104:	1884703a 	and	r2,r3,r2
  812108:	1001703a 	wrctl	status,r2
  
  return context;
  81210c:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
  812110:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  812114:	008020b4 	movhi	r2,130
  812118:	10a98a04 	addi	r2,r2,-23000
  81211c:	10800017 	ldw	r2,0(r2)
  812120:	10800c43 	ldbu	r2,49(r2)
  812124:	10803fcc 	andi	r2,r2,255
  812128:	e0bffe15 	stw	r2,-8(fp)
  81212c:	e0fffe17 	ldw	r3,-8(fp)
  812130:	1805003a 	cmpeq	r2,r3,zero
  812134:	1000041e 	bne	r2,zero,812148 <OSQPend+0x248>
  812138:	e0fffe17 	ldw	r3,-8(fp)
  81213c:	188000a0 	cmpeqi	r2,r3,2
  812140:	1000091e 	bne	r2,zero,812168 <OSQPend+0x268>
  812144:	00000d06 	br	81217c <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
  812148:	008020b4 	movhi	r2,130
  81214c:	10a98a04 	addi	r2,r2,-23000
  812150:	10800017 	ldw	r2,0(r2)
  812154:	10800917 	ldw	r2,36(r2)
  812158:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
  81215c:	e0bffd17 	ldw	r2,-12(fp)
  812160:	10000005 	stb	zero,0(r2)
             break;
  812164:	00000e06 	br	8121a0 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
  812168:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  81216c:	e0fffd17 	ldw	r3,-12(fp)
  812170:	00800384 	movi	r2,14
  812174:	18800005 	stb	r2,0(r3)
             break;
  812178:	00000906 	br	8121a0 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
  81217c:	008020b4 	movhi	r2,130
  812180:	10a98a04 	addi	r2,r2,-23000
  812184:	11000017 	ldw	r4,0(r2)
  812188:	e17ffb17 	ldw	r5,-20(fp)
  81218c:	080e7cc0 	call	80e7cc <OS_EventTaskRemove>
             pmsg = (void *)0;
  812190:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  812194:	e0fffd17 	ldw	r3,-12(fp)
  812198:	00800284 	movi	r2,10
  81219c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  8121a0:	008020b4 	movhi	r2,130
  8121a4:	10a98a04 	addi	r2,r2,-23000
  8121a8:	10800017 	ldw	r2,0(r2)
  8121ac:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  8121b0:	008020b4 	movhi	r2,130
  8121b4:	10a98a04 	addi	r2,r2,-23000
  8121b8:	10800017 	ldw	r2,0(r2)
  8121bc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  8121c0:	008020b4 	movhi	r2,130
  8121c4:	10a98a04 	addi	r2,r2,-23000
  8121c8:	10800017 	ldw	r2,0(r2)
  8121cc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8121d0:	008020b4 	movhi	r2,130
  8121d4:	10a98a04 	addi	r2,r2,-23000
  8121d8:	10800017 	ldw	r2,0(r2)
  8121dc:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
  8121e0:	008020b4 	movhi	r2,130
  8121e4:	10a98a04 	addi	r2,r2,-23000
  8121e8:	10800017 	ldw	r2,0(r2)
  8121ec:	10000915 	stw	zero,36(r2)
  8121f0:	e0bff817 	ldw	r2,-32(fp)
  8121f4:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8121f8:	e0bff317 	ldw	r2,-52(fp)
  8121fc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
  812200:	e0bffa17 	ldw	r2,-24(fp)
  812204:	e0bfff15 	stw	r2,-4(fp)
  812208:	e0bfff17 	ldw	r2,-4(fp)
}
  81220c:	e037883a 	mov	sp,fp
  812210:	dfc00117 	ldw	ra,4(sp)
  812214:	df000017 	ldw	fp,0(sp)
  812218:	dec00204 	addi	sp,sp,8
  81221c:	f800283a 	ret

00812220 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  812220:	defff504 	addi	sp,sp,-44
  812224:	dfc00a15 	stw	ra,40(sp)
  812228:	df000915 	stw	fp,36(sp)
  81222c:	df000904 	addi	fp,sp,36
  812230:	e13ffc15 	stw	r4,-16(fp)
  812234:	e1bffe15 	stw	r6,-8(fp)
  812238:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  81223c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  812240:	e0bffe17 	ldw	r2,-8(fp)
  812244:	1004c03a 	cmpne	r2,r2,zero
  812248:	1000021e 	bne	r2,zero,812254 <OSQPendAbort+0x34>
        return (0);
  81224c:	e03fff15 	stw	zero,-4(fp)
  812250:	00004c06 	br	812384 <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  812254:	e0bffc17 	ldw	r2,-16(fp)
  812258:	1004c03a 	cmpne	r2,r2,zero
  81225c:	1000051e 	bne	r2,zero,812274 <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  812260:	e0fffe17 	ldw	r3,-8(fp)
  812264:	00800104 	movi	r2,4
  812268:	18800005 	stb	r2,0(r3)
        return (0);
  81226c:	e03fff15 	stw	zero,-4(fp)
  812270:	00004406 	br	812384 <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
  812274:	e0bffc17 	ldw	r2,-16(fp)
  812278:	10800003 	ldbu	r2,0(r2)
  81227c:	10803fcc 	andi	r2,r2,255
  812280:	108000a0 	cmpeqi	r2,r2,2
  812284:	1000051e 	bne	r2,zero,81229c <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  812288:	e0fffe17 	ldw	r3,-8(fp)
  81228c:	00800044 	movi	r2,1
  812290:	18800005 	stb	r2,0(r3)
        return (0);
  812294:	e03fff15 	stw	zero,-4(fp)
  812298:	00003a06 	br	812384 <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81229c:	0005303a 	rdctl	r2,status
  8122a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8122a4:	e0fff917 	ldw	r3,-28(fp)
  8122a8:	00bfff84 	movi	r2,-2
  8122ac:	1884703a 	and	r2,r3,r2
  8122b0:	1001703a 	wrctl	status,r2
  
  return context;
  8122b4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8122b8:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
  8122bc:	e0bffc17 	ldw	r2,-16(fp)
  8122c0:	10800283 	ldbu	r2,10(r2)
  8122c4:	10803fcc 	andi	r2,r2,255
  8122c8:	1005003a 	cmpeq	r2,r2,zero
  8122cc:	1000261e 	bne	r2,zero,812368 <OSQPendAbort+0x148>
        nbr_tasks = 0;
  8122d0:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  8122d4:	e0bffd03 	ldbu	r2,-12(fp)
  8122d8:	10800060 	cmpeqi	r2,r2,1
  8122dc:	1000091e 	bne	r2,zero,812304 <OSQPendAbort+0xe4>
  8122e0:	00000e06 	br	81231c <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  8122e4:	e13ffc17 	ldw	r4,-16(fp)
  8122e8:	000b883a 	mov	r5,zero
  8122ec:	01800104 	movi	r6,4
  8122f0:	01c00084 	movi	r7,2
  8122f4:	080e3d40 	call	80e3d4 <OS_EventTaskRdy>
                     nbr_tasks++;
  8122f8:	e0bffb03 	ldbu	r2,-20(fp)
  8122fc:	10800044 	addi	r2,r2,1
  812300:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
  812304:	e0bffc17 	ldw	r2,-16(fp)
  812308:	10800283 	ldbu	r2,10(r2)
  81230c:	10803fcc 	andi	r2,r2,255
  812310:	1004c03a 	cmpne	r2,r2,zero
  812314:	103ff31e 	bne	r2,zero,8122e4 <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  812318:	00000806 	br	81233c <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
  81231c:	e13ffc17 	ldw	r4,-16(fp)
  812320:	000b883a 	mov	r5,zero
  812324:	01800104 	movi	r6,4
  812328:	01c00084 	movi	r7,2
  81232c:	080e3d40 	call	80e3d4 <OS_EventTaskRdy>
                 nbr_tasks++;
  812330:	e0bffb03 	ldbu	r2,-20(fp)
  812334:	10800044 	addi	r2,r2,1
  812338:	e0bffb05 	stb	r2,-20(fp)
  81233c:	e0bffa17 	ldw	r2,-24(fp)
  812340:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812344:	e0bff817 	ldw	r2,-32(fp)
  812348:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
  81234c:	080ee140 	call	80ee14 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  812350:	e0fffe17 	ldw	r3,-8(fp)
  812354:	00800384 	movi	r2,14
  812358:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  81235c:	e0bffb03 	ldbu	r2,-20(fp)
  812360:	e0bfff15 	stw	r2,-4(fp)
  812364:	00000706 	br	812384 <OSQPendAbort+0x164>
  812368:	e0bffa17 	ldw	r2,-24(fp)
  81236c:	e0bff715 	stw	r2,-36(fp)
  812370:	e0bff717 	ldw	r2,-36(fp)
  812374:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  812378:	e0bffe17 	ldw	r2,-8(fp)
  81237c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
  812380:	e03fff15 	stw	zero,-4(fp)
  812384:	e0bfff17 	ldw	r2,-4(fp)
}
  812388:	e037883a 	mov	sp,fp
  81238c:	dfc00117 	ldw	ra,4(sp)
  812390:	df000017 	ldw	fp,0(sp)
  812394:	dec00204 	addi	sp,sp,8
  812398:	f800283a 	ret

0081239c <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
  81239c:	defff504 	addi	sp,sp,-44
  8123a0:	dfc00a15 	stw	ra,40(sp)
  8123a4:	df000915 	stw	fp,36(sp)
  8123a8:	df000904 	addi	fp,sp,36
  8123ac:	e13ffd15 	stw	r4,-12(fp)
  8123b0:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8123b4:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  8123b8:	e0bffd17 	ldw	r2,-12(fp)
  8123bc:	1004c03a 	cmpne	r2,r2,zero
  8123c0:	1000031e 	bne	r2,zero,8123d0 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
  8123c4:	00800104 	movi	r2,4
  8123c8:	e0bfff15 	stw	r2,-4(fp)
  8123cc:	00004d06 	br	812504 <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  8123d0:	e0bffd17 	ldw	r2,-12(fp)
  8123d4:	10800003 	ldbu	r2,0(r2)
  8123d8:	10803fcc 	andi	r2,r2,255
  8123dc:	108000a0 	cmpeqi	r2,r2,2
  8123e0:	1000031e 	bne	r2,zero,8123f0 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
  8123e4:	00800044 	movi	r2,1
  8123e8:	e0bfff15 	stw	r2,-4(fp)
  8123ec:	00004506 	br	812504 <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8123f0:	0005303a 	rdctl	r2,status
  8123f4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8123f8:	e0fffa17 	ldw	r3,-24(fp)
  8123fc:	00bfff84 	movi	r2,-2
  812400:	1884703a 	and	r2,r3,r2
  812404:	1001703a 	wrctl	status,r2
  
  return context;
  812408:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81240c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
  812410:	e0bffd17 	ldw	r2,-12(fp)
  812414:	10800283 	ldbu	r2,10(r2)
  812418:	10803fcc 	andi	r2,r2,255
  81241c:	1005003a 	cmpeq	r2,r2,zero
  812420:	10000c1e 	bne	r2,zero,812454 <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  812424:	e13ffd17 	ldw	r4,-12(fp)
  812428:	e17ffe17 	ldw	r5,-8(fp)
  81242c:	01800104 	movi	r6,4
  812430:	000f883a 	mov	r7,zero
  812434:	080e3d40 	call	80e3d4 <OS_EventTaskRdy>
  812438:	e0bffb17 	ldw	r2,-20(fp)
  81243c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812440:	e0bff917 	ldw	r2,-28(fp)
  812444:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
  812448:	080ee140 	call	80ee14 <OS_Sched>
        return (OS_ERR_NONE);
  81244c:	e03fff15 	stw	zero,-4(fp)
  812450:	00002c06 	br	812504 <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
  812454:	e0bffd17 	ldw	r2,-12(fp)
  812458:	10800117 	ldw	r2,4(r2)
  81245c:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
  812460:	e0bffc17 	ldw	r2,-16(fp)
  812464:	10c0058b 	ldhu	r3,22(r2)
  812468:	e0bffc17 	ldw	r2,-16(fp)
  81246c:	1080050b 	ldhu	r2,20(r2)
  812470:	18ffffcc 	andi	r3,r3,65535
  812474:	10bfffcc 	andi	r2,r2,65535
  812478:	18800736 	bltu	r3,r2,812498 <OSQPost+0xfc>
  81247c:	e0bffb17 	ldw	r2,-20(fp)
  812480:	e0bff815 	stw	r2,-32(fp)
  812484:	e0bff817 	ldw	r2,-32(fp)
  812488:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  81248c:	00800784 	movi	r2,30
  812490:	e0bfff15 	stw	r2,-4(fp)
  812494:	00001b06 	br	812504 <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
  812498:	e0bffc17 	ldw	r2,-16(fp)
  81249c:	10c00317 	ldw	r3,12(r2)
  8124a0:	e0bffe17 	ldw	r2,-8(fp)
  8124a4:	18800015 	stw	r2,0(r3)
  8124a8:	18c00104 	addi	r3,r3,4
  8124ac:	e0bffc17 	ldw	r2,-16(fp)
  8124b0:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
  8124b4:	e0bffc17 	ldw	r2,-16(fp)
  8124b8:	1080058b 	ldhu	r2,22(r2)
  8124bc:	10800044 	addi	r2,r2,1
  8124c0:	1007883a 	mov	r3,r2
  8124c4:	e0bffc17 	ldw	r2,-16(fp)
  8124c8:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
  8124cc:	e0bffc17 	ldw	r2,-16(fp)
  8124d0:	10c00317 	ldw	r3,12(r2)
  8124d4:	e0bffc17 	ldw	r2,-16(fp)
  8124d8:	10800217 	ldw	r2,8(r2)
  8124dc:	1880041e 	bne	r3,r2,8124f0 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
  8124e0:	e0bffc17 	ldw	r2,-16(fp)
  8124e4:	10c00117 	ldw	r3,4(r2)
  8124e8:	e0bffc17 	ldw	r2,-16(fp)
  8124ec:	10c00315 	stw	r3,12(r2)
  8124f0:	e0bffb17 	ldw	r2,-20(fp)
  8124f4:	e0bff715 	stw	r2,-36(fp)
  8124f8:	e0bff717 	ldw	r2,-36(fp)
  8124fc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  812500:	e03fff15 	stw	zero,-4(fp)
  812504:	e0bfff17 	ldw	r2,-4(fp)
}
  812508:	e037883a 	mov	sp,fp
  81250c:	dfc00117 	ldw	ra,4(sp)
  812510:	df000017 	ldw	fp,0(sp)
  812514:	dec00204 	addi	sp,sp,8
  812518:	f800283a 	ret

0081251c <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
  81251c:	defff504 	addi	sp,sp,-44
  812520:	dfc00a15 	stw	ra,40(sp)
  812524:	df000915 	stw	fp,36(sp)
  812528:	df000904 	addi	fp,sp,36
  81252c:	e13ffd15 	stw	r4,-12(fp)
  812530:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812534:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  812538:	e0bffd17 	ldw	r2,-12(fp)
  81253c:	1004c03a 	cmpne	r2,r2,zero
  812540:	1000031e 	bne	r2,zero,812550 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
  812544:	00800104 	movi	r2,4
  812548:	e0bfff15 	stw	r2,-4(fp)
  81254c:	00004f06 	br	81268c <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  812550:	e0bffd17 	ldw	r2,-12(fp)
  812554:	10800003 	ldbu	r2,0(r2)
  812558:	10803fcc 	andi	r2,r2,255
  81255c:	108000a0 	cmpeqi	r2,r2,2
  812560:	1000031e 	bne	r2,zero,812570 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
  812564:	00800044 	movi	r2,1
  812568:	e0bfff15 	stw	r2,-4(fp)
  81256c:	00004706 	br	81268c <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812570:	0005303a 	rdctl	r2,status
  812574:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812578:	e0fffa17 	ldw	r3,-24(fp)
  81257c:	00bfff84 	movi	r2,-2
  812580:	1884703a 	and	r2,r3,r2
  812584:	1001703a 	wrctl	status,r2
  
  return context;
  812588:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  81258c:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
  812590:	e0bffd17 	ldw	r2,-12(fp)
  812594:	10800283 	ldbu	r2,10(r2)
  812598:	10803fcc 	andi	r2,r2,255
  81259c:	1005003a 	cmpeq	r2,r2,zero
  8125a0:	10000c1e 	bne	r2,zero,8125d4 <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  8125a4:	e13ffd17 	ldw	r4,-12(fp)
  8125a8:	e17ffe17 	ldw	r5,-8(fp)
  8125ac:	01800104 	movi	r6,4
  8125b0:	000f883a 	mov	r7,zero
  8125b4:	080e3d40 	call	80e3d4 <OS_EventTaskRdy>
  8125b8:	e0bffb17 	ldw	r2,-20(fp)
  8125bc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8125c0:	e0bff917 	ldw	r2,-28(fp)
  8125c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
  8125c8:	080ee140 	call	80ee14 <OS_Sched>
        return (OS_ERR_NONE);
  8125cc:	e03fff15 	stw	zero,-4(fp)
  8125d0:	00002e06 	br	81268c <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  8125d4:	e0bffd17 	ldw	r2,-12(fp)
  8125d8:	10800117 	ldw	r2,4(r2)
  8125dc:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  8125e0:	e0bffc17 	ldw	r2,-16(fp)
  8125e4:	10c0058b 	ldhu	r3,22(r2)
  8125e8:	e0bffc17 	ldw	r2,-16(fp)
  8125ec:	1080050b 	ldhu	r2,20(r2)
  8125f0:	18ffffcc 	andi	r3,r3,65535
  8125f4:	10bfffcc 	andi	r2,r2,65535
  8125f8:	18800736 	bltu	r3,r2,812618 <OSQPostFront+0xfc>
  8125fc:	e0bffb17 	ldw	r2,-20(fp)
  812600:	e0bff815 	stw	r2,-32(fp)
  812604:	e0bff817 	ldw	r2,-32(fp)
  812608:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  81260c:	00800784 	movi	r2,30
  812610:	e0bfff15 	stw	r2,-4(fp)
  812614:	00001d06 	br	81268c <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
  812618:	e0bffc17 	ldw	r2,-16(fp)
  81261c:	10c00417 	ldw	r3,16(r2)
  812620:	e0bffc17 	ldw	r2,-16(fp)
  812624:	10800117 	ldw	r2,4(r2)
  812628:	1880041e 	bne	r3,r2,81263c <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
  81262c:	e0bffc17 	ldw	r2,-16(fp)
  812630:	10c00217 	ldw	r3,8(r2)
  812634:	e0bffc17 	ldw	r2,-16(fp)
  812638:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
  81263c:	e0bffc17 	ldw	r2,-16(fp)
  812640:	10800417 	ldw	r2,16(r2)
  812644:	10ffff04 	addi	r3,r2,-4
  812648:	e0bffc17 	ldw	r2,-16(fp)
  81264c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
  812650:	e0bffc17 	ldw	r2,-16(fp)
  812654:	10c00417 	ldw	r3,16(r2)
  812658:	e0bffe17 	ldw	r2,-8(fp)
  81265c:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  812660:	e0bffc17 	ldw	r2,-16(fp)
  812664:	1080058b 	ldhu	r2,22(r2)
  812668:	10800044 	addi	r2,r2,1
  81266c:	1007883a 	mov	r3,r2
  812670:	e0bffc17 	ldw	r2,-16(fp)
  812674:	10c0058d 	sth	r3,22(r2)
  812678:	e0bffb17 	ldw	r2,-20(fp)
  81267c:	e0bff715 	stw	r2,-36(fp)
  812680:	e0bff717 	ldw	r2,-36(fp)
  812684:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  812688:	e03fff15 	stw	zero,-4(fp)
  81268c:	e0bfff17 	ldw	r2,-4(fp)
}
  812690:	e037883a 	mov	sp,fp
  812694:	dfc00117 	ldw	ra,4(sp)
  812698:	df000017 	ldw	fp,0(sp)
  81269c:	dec00204 	addi	sp,sp,8
  8126a0:	f800283a 	ret

008126a4 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
  8126a4:	defff404 	addi	sp,sp,-48
  8126a8:	dfc00b15 	stw	ra,44(sp)
  8126ac:	df000a15 	stw	fp,40(sp)
  8126b0:	df000a04 	addi	fp,sp,40
  8126b4:	e13ffc15 	stw	r4,-16(fp)
  8126b8:	e17ffd15 	stw	r5,-12(fp)
  8126bc:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8126c0:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8126c4:	e0bffc17 	ldw	r2,-16(fp)
  8126c8:	1004c03a 	cmpne	r2,r2,zero
  8126cc:	1000031e 	bne	r2,zero,8126dc <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
  8126d0:	00800104 	movi	r2,4
  8126d4:	e0bfff15 	stw	r2,-4(fp)
  8126d8:	00007906 	br	8128c0 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
  8126dc:	e0bffc17 	ldw	r2,-16(fp)
  8126e0:	10800003 	ldbu	r2,0(r2)
  8126e4:	10803fcc 	andi	r2,r2,255
  8126e8:	108000a0 	cmpeqi	r2,r2,2
  8126ec:	1000031e 	bne	r2,zero,8126fc <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
  8126f0:	00800044 	movi	r2,1
  8126f4:	e0bfff15 	stw	r2,-4(fp)
  8126f8:	00007106 	br	8128c0 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8126fc:	0005303a 	rdctl	r2,status
  812700:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812704:	e0fff917 	ldw	r3,-28(fp)
  812708:	00bfff84 	movi	r2,-2
  81270c:	1884703a 	and	r2,r3,r2
  812710:	1001703a 	wrctl	status,r2
  
  return context;
  812714:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  812718:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
  81271c:	e0bffc17 	ldw	r2,-16(fp)
  812720:	10800283 	ldbu	r2,10(r2)
  812724:	10803fcc 	andi	r2,r2,255
  812728:	1005003a 	cmpeq	r2,r2,zero
  81272c:	1000211e 	bne	r2,zero,8127b4 <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
  812730:	e0bffe03 	ldbu	r2,-8(fp)
  812734:	1080004c 	andi	r2,r2,1
  812738:	10803fcc 	andi	r2,r2,255
  81273c:	1005003a 	cmpeq	r2,r2,zero
  812740:	10000c1e 	bne	r2,zero,812774 <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  812744:	00000506 	br	81275c <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  812748:	e13ffc17 	ldw	r4,-16(fp)
  81274c:	e17ffd17 	ldw	r5,-12(fp)
  812750:	01800104 	movi	r6,4
  812754:	000f883a 	mov	r7,zero
  812758:	080e3d40 	call	80e3d4 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
  81275c:	e0bffc17 	ldw	r2,-16(fp)
  812760:	10800283 	ldbu	r2,10(r2)
  812764:	10803fcc 	andi	r2,r2,255
  812768:	1004c03a 	cmpne	r2,r2,zero
  81276c:	103ff61e 	bne	r2,zero,812748 <OSQPostOpt+0xa4>
  812770:	00000506 	br	812788 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
  812774:	e13ffc17 	ldw	r4,-16(fp)
  812778:	e17ffd17 	ldw	r5,-12(fp)
  81277c:	01800104 	movi	r6,4
  812780:	000f883a 	mov	r7,zero
  812784:	080e3d40 	call	80e3d4 <OS_EventTaskRdy>
  812788:	e0bffa17 	ldw	r2,-24(fp)
  81278c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812790:	e0bff817 	ldw	r2,-32(fp)
  812794:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
  812798:	e0bffe03 	ldbu	r2,-8(fp)
  81279c:	1080010c 	andi	r2,r2,4
  8127a0:	1004c03a 	cmpne	r2,r2,zero
  8127a4:	1000011e 	bne	r2,zero,8127ac <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
  8127a8:	080ee140 	call	80ee14 <OS_Sched>
        }
        return (OS_ERR_NONE);
  8127ac:	e03fff15 	stw	zero,-4(fp)
  8127b0:	00004306 	br	8128c0 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
  8127b4:	e0bffc17 	ldw	r2,-16(fp)
  8127b8:	10800117 	ldw	r2,4(r2)
  8127bc:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
  8127c0:	e0bffb17 	ldw	r2,-20(fp)
  8127c4:	10c0058b 	ldhu	r3,22(r2)
  8127c8:	e0bffb17 	ldw	r2,-20(fp)
  8127cc:	1080050b 	ldhu	r2,20(r2)
  8127d0:	18ffffcc 	andi	r3,r3,65535
  8127d4:	10bfffcc 	andi	r2,r2,65535
  8127d8:	18800736 	bltu	r3,r2,8127f8 <OSQPostOpt+0x154>
  8127dc:	e0bffa17 	ldw	r2,-24(fp)
  8127e0:	e0bff715 	stw	r2,-36(fp)
  8127e4:	e0bff717 	ldw	r2,-36(fp)
  8127e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
  8127ec:	00800784 	movi	r2,30
  8127f0:	e0bfff15 	stw	r2,-4(fp)
  8127f4:	00003206 	br	8128c0 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
  8127f8:	e0bffe03 	ldbu	r2,-8(fp)
  8127fc:	1080008c 	andi	r2,r2,2
  812800:	1005003a 	cmpeq	r2,r2,zero
  812804:	1000131e 	bne	r2,zero,812854 <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
  812808:	e0bffb17 	ldw	r2,-20(fp)
  81280c:	10c00417 	ldw	r3,16(r2)
  812810:	e0bffb17 	ldw	r2,-20(fp)
  812814:	10800117 	ldw	r2,4(r2)
  812818:	1880041e 	bne	r3,r2,81282c <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
  81281c:	e0bffb17 	ldw	r2,-20(fp)
  812820:	10c00217 	ldw	r3,8(r2)
  812824:	e0bffb17 	ldw	r2,-20(fp)
  812828:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
  81282c:	e0bffb17 	ldw	r2,-20(fp)
  812830:	10800417 	ldw	r2,16(r2)
  812834:	10ffff04 	addi	r3,r2,-4
  812838:	e0bffb17 	ldw	r2,-20(fp)
  81283c:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
  812840:	e0bffb17 	ldw	r2,-20(fp)
  812844:	10c00417 	ldw	r3,16(r2)
  812848:	e0bffd17 	ldw	r2,-12(fp)
  81284c:	18800015 	stw	r2,0(r3)
  812850:	00001006 	br	812894 <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
  812854:	e0bffb17 	ldw	r2,-20(fp)
  812858:	10c00317 	ldw	r3,12(r2)
  81285c:	e0bffd17 	ldw	r2,-12(fp)
  812860:	18800015 	stw	r2,0(r3)
  812864:	18c00104 	addi	r3,r3,4
  812868:	e0bffb17 	ldw	r2,-20(fp)
  81286c:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
  812870:	e0bffb17 	ldw	r2,-20(fp)
  812874:	10c00317 	ldw	r3,12(r2)
  812878:	e0bffb17 	ldw	r2,-20(fp)
  81287c:	10800217 	ldw	r2,8(r2)
  812880:	1880041e 	bne	r3,r2,812894 <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
  812884:	e0bffb17 	ldw	r2,-20(fp)
  812888:	10c00117 	ldw	r3,4(r2)
  81288c:	e0bffb17 	ldw	r2,-20(fp)
  812890:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
  812894:	e0bffb17 	ldw	r2,-20(fp)
  812898:	1080058b 	ldhu	r2,22(r2)
  81289c:	10800044 	addi	r2,r2,1
  8128a0:	1007883a 	mov	r3,r2
  8128a4:	e0bffb17 	ldw	r2,-20(fp)
  8128a8:	10c0058d 	sth	r3,22(r2)
  8128ac:	e0bffa17 	ldw	r2,-24(fp)
  8128b0:	e0bff615 	stw	r2,-40(fp)
  8128b4:	e0bff617 	ldw	r2,-40(fp)
  8128b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8128bc:	e03fff15 	stw	zero,-4(fp)
  8128c0:	e0bfff17 	ldw	r2,-4(fp)
}
  8128c4:	e037883a 	mov	sp,fp
  8128c8:	dfc00117 	ldw	ra,4(sp)
  8128cc:	df000017 	ldw	fp,0(sp)
  8128d0:	dec00204 	addi	sp,sp,8
  8128d4:	f800283a 	ret

008128d8 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
  8128d8:	defff504 	addi	sp,sp,-44
  8128dc:	df000a15 	stw	fp,40(sp)
  8128e0:	df000a04 	addi	fp,sp,40
  8128e4:	e13ffd15 	stw	r4,-12(fp)
  8128e8:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  8128ec:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
  8128f0:	e0bffd17 	ldw	r2,-12(fp)
  8128f4:	1004c03a 	cmpne	r2,r2,zero
  8128f8:	1000031e 	bne	r2,zero,812908 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  8128fc:	00800104 	movi	r2,4
  812900:	e0bfff15 	stw	r2,-4(fp)
  812904:	00004f06 	br	812a44 <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
  812908:	e0bffe17 	ldw	r2,-8(fp)
  81290c:	1004c03a 	cmpne	r2,r2,zero
  812910:	1000031e 	bne	r2,zero,812920 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  812914:	00800244 	movi	r2,9
  812918:	e0bfff15 	stw	r2,-4(fp)
  81291c:	00004906 	br	812a44 <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
  812920:	e0bffd17 	ldw	r2,-12(fp)
  812924:	10800003 	ldbu	r2,0(r2)
  812928:	10803fcc 	andi	r2,r2,255
  81292c:	108000a0 	cmpeqi	r2,r2,2
  812930:	1000031e 	bne	r2,zero,812940 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  812934:	00800044 	movi	r2,1
  812938:	e0bfff15 	stw	r2,-4(fp)
  81293c:	00004106 	br	812a44 <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812940:	0005303a 	rdctl	r2,status
  812944:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812948:	e0fff717 	ldw	r3,-36(fp)
  81294c:	00bfff84 	movi	r2,-2
  812950:	1884703a 	and	r2,r3,r2
  812954:	1001703a 	wrctl	status,r2
  
  return context;
  812958:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  81295c:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
  812960:	e0bffd17 	ldw	r2,-12(fp)
  812964:	10c00283 	ldbu	r3,10(r2)
  812968:	e0bffe17 	ldw	r2,-8(fp)
  81296c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
  812970:	e0bffd17 	ldw	r2,-12(fp)
  812974:	108002c4 	addi	r2,r2,11
  812978:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
  81297c:	e0bffe17 	ldw	r2,-8(fp)
  812980:	10800204 	addi	r2,r2,8
  812984:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  812988:	e03ffb05 	stb	zero,-20(fp)
  81298c:	00000d06 	br	8129c4 <OSQQuery+0xec>
        *pdest++ = *psrc++;
  812990:	e0bffa17 	ldw	r2,-24(fp)
  812994:	10c00003 	ldbu	r3,0(r2)
  812998:	e0bff917 	ldw	r2,-28(fp)
  81299c:	10c00005 	stb	r3,0(r2)
  8129a0:	e0bff917 	ldw	r2,-28(fp)
  8129a4:	10800044 	addi	r2,r2,1
  8129a8:	e0bff915 	stw	r2,-28(fp)
  8129ac:	e0bffa17 	ldw	r2,-24(fp)
  8129b0:	10800044 	addi	r2,r2,1
  8129b4:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  8129b8:	e0bffb03 	ldbu	r2,-20(fp)
  8129bc:	10800044 	addi	r2,r2,1
  8129c0:	e0bffb05 	stb	r2,-20(fp)
  8129c4:	e0bffb03 	ldbu	r2,-20(fp)
  8129c8:	108000f0 	cmpltui	r2,r2,3
  8129cc:	103ff01e 	bne	r2,zero,812990 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
  8129d0:	e0bffd17 	ldw	r2,-12(fp)
  8129d4:	10800117 	ldw	r2,4(r2)
  8129d8:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
  8129dc:	e0bffc17 	ldw	r2,-16(fp)
  8129e0:	1080058b 	ldhu	r2,22(r2)
  8129e4:	10bfffcc 	andi	r2,r2,65535
  8129e8:	1005003a 	cmpeq	r2,r2,zero
  8129ec:	1000061e 	bne	r2,zero,812a08 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
  8129f0:	e0bffc17 	ldw	r2,-16(fp)
  8129f4:	10800417 	ldw	r2,16(r2)
  8129f8:	10c00017 	ldw	r3,0(r2)
  8129fc:	e0bffe17 	ldw	r2,-8(fp)
  812a00:	10c00015 	stw	r3,0(r2)
  812a04:	00000206 	br	812a10 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
  812a08:	e0bffe17 	ldw	r2,-8(fp)
  812a0c:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
  812a10:	e0bffc17 	ldw	r2,-16(fp)
  812a14:	10c0058b 	ldhu	r3,22(r2)
  812a18:	e0bffe17 	ldw	r2,-8(fp)
  812a1c:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
  812a20:	e0bffc17 	ldw	r2,-16(fp)
  812a24:	10c0050b 	ldhu	r3,20(r2)
  812a28:	e0bffe17 	ldw	r2,-8(fp)
  812a2c:	10c0018d 	sth	r3,6(r2)
  812a30:	e0bff817 	ldw	r2,-32(fp)
  812a34:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812a38:	e0bff617 	ldw	r2,-40(fp)
  812a3c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  812a40:	e03fff15 	stw	zero,-4(fp)
  812a44:	e0bfff17 	ldw	r2,-4(fp)
}
  812a48:	e037883a 	mov	sp,fp
  812a4c:	df000017 	ldw	fp,0(sp)
  812a50:	dec00104 	addi	sp,sp,4
  812a54:	f800283a 	ret

00812a58 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
  812a58:	defffb04 	addi	sp,sp,-20
  812a5c:	dfc00415 	stw	ra,16(sp)
  812a60:	df000315 	stw	fp,12(sp)
  812a64:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
  812a68:	010020b4 	movhi	r4,130
  812a6c:	21378404 	addi	r4,r4,-8688
  812a70:	01407804 	movi	r5,480
  812a74:	080ed540 	call	80ed54 <OS_MemClr>
    pq1 = &OSQTbl[0];
  812a78:	008020b4 	movhi	r2,130
  812a7c:	10b78404 	addi	r2,r2,-8688
  812a80:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
  812a84:	008020b4 	movhi	r2,130
  812a88:	10b78a04 	addi	r2,r2,-8664
  812a8c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  812a90:	e03fff0d 	sth	zero,-4(fp)
  812a94:	00000c06 	br	812ac8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
  812a98:	e0fffe17 	ldw	r3,-8(fp)
  812a9c:	e0bffd17 	ldw	r2,-12(fp)
  812aa0:	18800015 	stw	r2,0(r3)
        pq1++;
  812aa4:	e0bffe17 	ldw	r2,-8(fp)
  812aa8:	10800604 	addi	r2,r2,24
  812aac:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
  812ab0:	e0bffd17 	ldw	r2,-12(fp)
  812ab4:	10800604 	addi	r2,r2,24
  812ab8:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
  812abc:	e0bfff0b 	ldhu	r2,-4(fp)
  812ac0:	10800044 	addi	r2,r2,1
  812ac4:	e0bfff0d 	sth	r2,-4(fp)
  812ac8:	e0bfff0b 	ldhu	r2,-4(fp)
  812acc:	108004f0 	cmpltui	r2,r2,19
  812ad0:	103ff11e 	bne	r2,zero,812a98 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
  812ad4:	e0bffe17 	ldw	r2,-8(fp)
  812ad8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
  812adc:	00c020b4 	movhi	r3,130
  812ae0:	18e98604 	addi	r3,r3,-23016
  812ae4:	008020b4 	movhi	r2,130
  812ae8:	10b78404 	addi	r2,r2,-8688
  812aec:	18800015 	stw	r2,0(r3)
#endif
}
  812af0:	e037883a 	mov	sp,fp
  812af4:	dfc00117 	ldw	ra,4(sp)
  812af8:	df000017 	ldw	fp,0(sp)
  812afc:	dec00204 	addi	sp,sp,8
  812b00:	f800283a 	ret

00812b04 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
  812b04:	defff904 	addi	sp,sp,-28
  812b08:	df000615 	stw	fp,24(sp)
  812b0c:	df000604 	addi	fp,sp,24
  812b10:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812b14:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  812b18:	e0bffe17 	ldw	r2,-8(fp)
  812b1c:	1004c03a 	cmpne	r2,r2,zero
  812b20:	1000021e 	bne	r2,zero,812b2c <OSSemAccept+0x28>
        return (0);
  812b24:	e03fff15 	stw	zero,-4(fp)
  812b28:	00002106 	br	812bb0 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  812b2c:	e0bffe17 	ldw	r2,-8(fp)
  812b30:	10800003 	ldbu	r2,0(r2)
  812b34:	10803fcc 	andi	r2,r2,255
  812b38:	108000e0 	cmpeqi	r2,r2,3
  812b3c:	1000021e 	bne	r2,zero,812b48 <OSSemAccept+0x44>
        return (0);
  812b40:	e03fff15 	stw	zero,-4(fp)
  812b44:	00001a06 	br	812bb0 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812b48:	0005303a 	rdctl	r2,status
  812b4c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812b50:	e0fffb17 	ldw	r3,-20(fp)
  812b54:	00bfff84 	movi	r2,-2
  812b58:	1884703a 	and	r2,r3,r2
  812b5c:	1001703a 	wrctl	status,r2
  
  return context;
  812b60:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  812b64:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
  812b68:	e0bffe17 	ldw	r2,-8(fp)
  812b6c:	1080020b 	ldhu	r2,8(r2)
  812b70:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
  812b74:	e0bffd0b 	ldhu	r2,-12(fp)
  812b78:	1005003a 	cmpeq	r2,r2,zero
  812b7c:	1000061e 	bne	r2,zero,812b98 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
  812b80:	e0bffe17 	ldw	r2,-8(fp)
  812b84:	1080020b 	ldhu	r2,8(r2)
  812b88:	10bfffc4 	addi	r2,r2,-1
  812b8c:	1007883a 	mov	r3,r2
  812b90:	e0bffe17 	ldw	r2,-8(fp)
  812b94:	10c0020d 	sth	r3,8(r2)
  812b98:	e0bffc17 	ldw	r2,-16(fp)
  812b9c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812ba0:	e0bffa17 	ldw	r2,-24(fp)
  812ba4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
  812ba8:	e0bffd0b 	ldhu	r2,-12(fp)
  812bac:	e0bfff15 	stw	r2,-4(fp)
  812bb0:	e0bfff17 	ldw	r2,-4(fp)
}
  812bb4:	e037883a 	mov	sp,fp
  812bb8:	df000017 	ldw	fp,0(sp)
  812bbc:	dec00104 	addi	sp,sp,4
  812bc0:	f800283a 	ret

00812bc4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
  812bc4:	defff804 	addi	sp,sp,-32
  812bc8:	dfc00715 	stw	ra,28(sp)
  812bcc:	df000615 	stw	fp,24(sp)
  812bd0:	df000604 	addi	fp,sp,24
  812bd4:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  812bd8:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  812bdc:	008020b4 	movhi	r2,130
  812be0:	10a98904 	addi	r2,r2,-23004
  812be4:	10800003 	ldbu	r2,0(r2)
  812be8:	10803fcc 	andi	r2,r2,255
  812bec:	1005003a 	cmpeq	r2,r2,zero
  812bf0:	1000021e 	bne	r2,zero,812bfc <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
  812bf4:	e03fff15 	stw	zero,-4(fp)
  812bf8:	00003106 	br	812cc0 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812bfc:	0005303a 	rdctl	r2,status
  812c00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812c04:	e0fffb17 	ldw	r3,-20(fp)
  812c08:	00bfff84 	movi	r2,-2
  812c0c:	1884703a 	and	r2,r3,r2
  812c10:	1001703a 	wrctl	status,r2
  
  return context;
  812c14:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  812c18:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
  812c1c:	008020b4 	movhi	r2,130
  812c20:	10a98804 	addi	r2,r2,-23008
  812c24:	10800017 	ldw	r2,0(r2)
  812c28:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
  812c2c:	008020b4 	movhi	r2,130
  812c30:	10a98804 	addi	r2,r2,-23008
  812c34:	10800017 	ldw	r2,0(r2)
  812c38:	1005003a 	cmpeq	r2,r2,zero
  812c3c:	1000081e 	bne	r2,zero,812c60 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
  812c40:	008020b4 	movhi	r2,130
  812c44:	10a98804 	addi	r2,r2,-23008
  812c48:	10800017 	ldw	r2,0(r2)
  812c4c:	10800117 	ldw	r2,4(r2)
  812c50:	1007883a 	mov	r3,r2
  812c54:	008020b4 	movhi	r2,130
  812c58:	10a98804 	addi	r2,r2,-23008
  812c5c:	10c00015 	stw	r3,0(r2)
  812c60:	e0bffc17 	ldw	r2,-16(fp)
  812c64:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812c68:	e0bffa17 	ldw	r2,-24(fp)
  812c6c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
  812c70:	e0bffd17 	ldw	r2,-12(fp)
  812c74:	1005003a 	cmpeq	r2,r2,zero
  812c78:	10000f1e 	bne	r2,zero,812cb8 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
  812c7c:	e0fffd17 	ldw	r3,-12(fp)
  812c80:	008000c4 	movi	r2,3
  812c84:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
  812c88:	e0fffd17 	ldw	r3,-12(fp)
  812c8c:	e0bffe0b 	ldhu	r2,-8(fp)
  812c90:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
  812c94:	e0bffd17 	ldw	r2,-12(fp)
  812c98:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
  812c9c:	e0fffd17 	ldw	r3,-12(fp)
  812ca0:	00800fc4 	movi	r2,63
  812ca4:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
  812ca8:	e0bffd17 	ldw	r2,-12(fp)
  812cac:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
  812cb0:	e13ffd17 	ldw	r4,-12(fp)
  812cb4:	080e9880 	call	80e988 <OS_EventWaitListInit>
    }
    return (pevent);
  812cb8:	e0bffd17 	ldw	r2,-12(fp)
  812cbc:	e0bfff15 	stw	r2,-4(fp)
  812cc0:	e0bfff17 	ldw	r2,-4(fp)
}
  812cc4:	e037883a 	mov	sp,fp
  812cc8:	dfc00117 	ldw	ra,4(sp)
  812ccc:	df000017 	ldw	fp,0(sp)
  812cd0:	dec00204 	addi	sp,sp,8
  812cd4:	f800283a 	ret

00812cd8 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  812cd8:	defff104 	addi	sp,sp,-60
  812cdc:	dfc00e15 	stw	ra,56(sp)
  812ce0:	df000d15 	stw	fp,52(sp)
  812ce4:	df000d04 	addi	fp,sp,52
  812ce8:	e13ffb15 	stw	r4,-20(fp)
  812cec:	e1bffd15 	stw	r6,-12(fp)
  812cf0:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  812cf4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
  812cf8:	e0bffd17 	ldw	r2,-12(fp)
  812cfc:	1004c03a 	cmpne	r2,r2,zero
  812d00:	1000031e 	bne	r2,zero,812d10 <OSSemDel+0x38>
        return (pevent);
  812d04:	e0bffb17 	ldw	r2,-20(fp)
  812d08:	e0bfff15 	stw	r2,-4(fp)
  812d0c:	00009406 	br	812f60 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  812d10:	e0bffb17 	ldw	r2,-20(fp)
  812d14:	1004c03a 	cmpne	r2,r2,zero
  812d18:	1000061e 	bne	r2,zero,812d34 <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
  812d1c:	e0fffd17 	ldw	r3,-12(fp)
  812d20:	00800104 	movi	r2,4
  812d24:	18800005 	stb	r2,0(r3)
        return (pevent);
  812d28:	e0fffb17 	ldw	r3,-20(fp)
  812d2c:	e0ffff15 	stw	r3,-4(fp)
  812d30:	00008b06 	br	812f60 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  812d34:	e0bffb17 	ldw	r2,-20(fp)
  812d38:	10800003 	ldbu	r2,0(r2)
  812d3c:	10803fcc 	andi	r2,r2,255
  812d40:	108000e0 	cmpeqi	r2,r2,3
  812d44:	1000061e 	bne	r2,zero,812d60 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
  812d48:	e0fffd17 	ldw	r3,-12(fp)
  812d4c:	00800044 	movi	r2,1
  812d50:	18800005 	stb	r2,0(r3)
        return (pevent);
  812d54:	e0bffb17 	ldw	r2,-20(fp)
  812d58:	e0bfff15 	stw	r2,-4(fp)
  812d5c:	00008006 	br	812f60 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
  812d60:	008020b4 	movhi	r2,130
  812d64:	10a98904 	addi	r2,r2,-23004
  812d68:	10800003 	ldbu	r2,0(r2)
  812d6c:	10803fcc 	andi	r2,r2,255
  812d70:	1005003a 	cmpeq	r2,r2,zero
  812d74:	1000061e 	bne	r2,zero,812d90 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
  812d78:	e0fffd17 	ldw	r3,-12(fp)
  812d7c:	008003c4 	movi	r2,15
  812d80:	18800005 	stb	r2,0(r3)
        return (pevent);
  812d84:	e0fffb17 	ldw	r3,-20(fp)
  812d88:	e0ffff15 	stw	r3,-4(fp)
  812d8c:	00007406 	br	812f60 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812d90:	0005303a 	rdctl	r2,status
  812d94:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812d98:	e0fff717 	ldw	r3,-36(fp)
  812d9c:	00bfff84 	movi	r2,-2
  812da0:	1884703a 	and	r2,r3,r2
  812da4:	1001703a 	wrctl	status,r2
  
  return context;
  812da8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
  812dac:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
  812db0:	e0bffb17 	ldw	r2,-20(fp)
  812db4:	10800283 	ldbu	r2,10(r2)
  812db8:	10803fcc 	andi	r2,r2,255
  812dbc:	1005003a 	cmpeq	r2,r2,zero
  812dc0:	1000031e 	bne	r2,zero,812dd0 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
  812dc4:	00800044 	movi	r2,1
  812dc8:	e0bffa05 	stb	r2,-24(fp)
  812dcc:	00000106 	br	812dd4 <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
  812dd0:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
  812dd4:	e0bffc03 	ldbu	r2,-16(fp)
  812dd8:	e0bffe15 	stw	r2,-8(fp)
  812ddc:	e0fffe17 	ldw	r3,-8(fp)
  812de0:	1805003a 	cmpeq	r2,r3,zero
  812de4:	1000041e 	bne	r2,zero,812df8 <OSSemDel+0x120>
  812de8:	e0fffe17 	ldw	r3,-8(fp)
  812dec:	18800060 	cmpeqi	r2,r3,1
  812df0:	10002d1e 	bne	r2,zero,812ea8 <OSSemDel+0x1d0>
  812df4:	00004f06 	br	812f34 <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
  812df8:	e0bffa03 	ldbu	r2,-24(fp)
  812dfc:	1004c03a 	cmpne	r2,r2,zero
  812e00:	10001a1e 	bne	r2,zero,812e6c <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
  812e04:	e0fffb17 	ldw	r3,-20(fp)
  812e08:	00800fc4 	movi	r2,63
  812e0c:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
  812e10:	e0bffb17 	ldw	r2,-20(fp)
  812e14:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  812e18:	e0bffb17 	ldw	r2,-20(fp)
  812e1c:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
  812e20:	008020b4 	movhi	r2,130
  812e24:	10a98804 	addi	r2,r2,-23008
  812e28:	10c00017 	ldw	r3,0(r2)
  812e2c:	e0bffb17 	ldw	r2,-20(fp)
  812e30:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
  812e34:	e0bffb17 	ldw	r2,-20(fp)
  812e38:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
  812e3c:	00c020b4 	movhi	r3,130
  812e40:	18e98804 	addi	r3,r3,-23008
  812e44:	e0bffb17 	ldw	r2,-20(fp)
  812e48:	18800015 	stw	r2,0(r3)
  812e4c:	e0bff817 	ldw	r2,-32(fp)
  812e50:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812e54:	e0bff617 	ldw	r2,-40(fp)
  812e58:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
  812e5c:	e0bffd17 	ldw	r2,-12(fp)
  812e60:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
  812e64:	e03ff915 	stw	zero,-28(fp)
  812e68:	00003b06 	br	812f58 <OSSemDel+0x280>
  812e6c:	e0bff817 	ldw	r2,-32(fp)
  812e70:	e0bff515 	stw	r2,-44(fp)
  812e74:	e0bff517 	ldw	r2,-44(fp)
  812e78:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
  812e7c:	e0fffd17 	ldw	r3,-12(fp)
  812e80:	00801244 	movi	r2,73
  812e84:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
  812e88:	e0bffb17 	ldw	r2,-20(fp)
  812e8c:	e0bff915 	stw	r2,-28(fp)
             }
             break;
  812e90:	00003106 	br	812f58 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  812e94:	e13ffb17 	ldw	r4,-20(fp)
  812e98:	000b883a 	mov	r5,zero
  812e9c:	01800044 	movi	r6,1
  812ea0:	000f883a 	mov	r7,zero
  812ea4:	080e3d40 	call	80e3d4 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
  812ea8:	e0bffb17 	ldw	r2,-20(fp)
  812eac:	10800283 	ldbu	r2,10(r2)
  812eb0:	10803fcc 	andi	r2,r2,255
  812eb4:	1004c03a 	cmpne	r2,r2,zero
  812eb8:	103ff61e 	bne	r2,zero,812e94 <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
  812ebc:	e0fffb17 	ldw	r3,-20(fp)
  812ec0:	00800fc4 	movi	r2,63
  812ec4:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
  812ec8:	e0bffb17 	ldw	r2,-20(fp)
  812ecc:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
  812ed0:	e0bffb17 	ldw	r2,-20(fp)
  812ed4:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
  812ed8:	008020b4 	movhi	r2,130
  812edc:	10a98804 	addi	r2,r2,-23008
  812ee0:	10c00017 	ldw	r3,0(r2)
  812ee4:	e0bffb17 	ldw	r2,-20(fp)
  812ee8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
  812eec:	e0bffb17 	ldw	r2,-20(fp)
  812ef0:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
  812ef4:	00c020b4 	movhi	r3,130
  812ef8:	18e98804 	addi	r3,r3,-23008
  812efc:	e0bffb17 	ldw	r2,-20(fp)
  812f00:	18800015 	stw	r2,0(r3)
  812f04:	e0bff817 	ldw	r2,-32(fp)
  812f08:	e0bff415 	stw	r2,-48(fp)
  812f0c:	e0bff417 	ldw	r2,-48(fp)
  812f10:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
  812f14:	e0bffa03 	ldbu	r2,-24(fp)
  812f18:	10800058 	cmpnei	r2,r2,1
  812f1c:	1000011e 	bne	r2,zero,812f24 <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
  812f20:	080ee140 	call	80ee14 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
  812f24:	e0bffd17 	ldw	r2,-12(fp)
  812f28:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
  812f2c:	e03ff915 	stw	zero,-28(fp)
             break;
  812f30:	00000906 	br	812f58 <OSSemDel+0x280>
  812f34:	e0bff817 	ldw	r2,-32(fp)
  812f38:	e0bff315 	stw	r2,-52(fp)
  812f3c:	e0bff317 	ldw	r2,-52(fp)
  812f40:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
  812f44:	e0fffd17 	ldw	r3,-12(fp)
  812f48:	008001c4 	movi	r2,7
  812f4c:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
  812f50:	e0bffb17 	ldw	r2,-20(fp)
  812f54:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
  812f58:	e0bff917 	ldw	r2,-28(fp)
  812f5c:	e0bfff15 	stw	r2,-4(fp)
  812f60:	e0bfff17 	ldw	r2,-4(fp)
}
  812f64:	e037883a 	mov	sp,fp
  812f68:	dfc00117 	ldw	ra,4(sp)
  812f6c:	df000017 	ldw	fp,0(sp)
  812f70:	dec00204 	addi	sp,sp,8
  812f74:	f800283a 	ret

00812f78 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
  812f78:	defff404 	addi	sp,sp,-48
  812f7c:	dfc00b15 	stw	ra,44(sp)
  812f80:	df000a15 	stw	fp,40(sp)
  812f84:	df000a04 	addi	fp,sp,40
  812f88:	e13ffc15 	stw	r4,-16(fp)
  812f8c:	e1bffe15 	stw	r6,-8(fp)
  812f90:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  812f94:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  812f98:	e0bffe17 	ldw	r2,-8(fp)
  812f9c:	1005003a 	cmpeq	r2,r2,zero
  812fa0:	10008f1e 	bne	r2,zero,8131e0 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  812fa4:	e0bffc17 	ldw	r2,-16(fp)
  812fa8:	1004c03a 	cmpne	r2,r2,zero
  812fac:	1000041e 	bne	r2,zero,812fc0 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
  812fb0:	e0fffe17 	ldw	r3,-8(fp)
  812fb4:	00800104 	movi	r2,4
  812fb8:	18800005 	stb	r2,0(r3)
        return;
  812fbc:	00008806 	br	8131e0 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  812fc0:	e0bffc17 	ldw	r2,-16(fp)
  812fc4:	10800003 	ldbu	r2,0(r2)
  812fc8:	10803fcc 	andi	r2,r2,255
  812fcc:	108000e0 	cmpeqi	r2,r2,3
  812fd0:	1000041e 	bne	r2,zero,812fe4 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
  812fd4:	e0fffe17 	ldw	r3,-8(fp)
  812fd8:	00800044 	movi	r2,1
  812fdc:	18800005 	stb	r2,0(r3)
        return;
  812fe0:	00007f06 	br	8131e0 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
  812fe4:	008020b4 	movhi	r2,130
  812fe8:	10a98904 	addi	r2,r2,-23004
  812fec:	10800003 	ldbu	r2,0(r2)
  812ff0:	10803fcc 	andi	r2,r2,255
  812ff4:	1005003a 	cmpeq	r2,r2,zero
  812ff8:	1000041e 	bne	r2,zero,81300c <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
  812ffc:	e0fffe17 	ldw	r3,-8(fp)
  813000:	00800084 	movi	r2,2
  813004:	18800005 	stb	r2,0(r3)
        return;
  813008:	00007506 	br	8131e0 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
  81300c:	008020b4 	movhi	r2,130
  813010:	10a97b04 	addi	r2,r2,-23060
  813014:	10800003 	ldbu	r2,0(r2)
  813018:	10803fcc 	andi	r2,r2,255
  81301c:	1005003a 	cmpeq	r2,r2,zero
  813020:	1000041e 	bne	r2,zero,813034 <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
  813024:	e0fffe17 	ldw	r3,-8(fp)
  813028:	00800344 	movi	r2,13
  81302c:	18800005 	stb	r2,0(r3)
        return;
  813030:	00006b06 	br	8131e0 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813034:	0005303a 	rdctl	r2,status
  813038:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81303c:	e0fffa17 	ldw	r3,-24(fp)
  813040:	00bfff84 	movi	r2,-2
  813044:	1884703a 	and	r2,r3,r2
  813048:	1001703a 	wrctl	status,r2
  
  return context;
  81304c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
  813050:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
  813054:	e0bffc17 	ldw	r2,-16(fp)
  813058:	1080020b 	ldhu	r2,8(r2)
  81305c:	10bfffcc 	andi	r2,r2,65535
  813060:	1005003a 	cmpeq	r2,r2,zero
  813064:	10000d1e 	bne	r2,zero,81309c <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
  813068:	e0bffc17 	ldw	r2,-16(fp)
  81306c:	1080020b 	ldhu	r2,8(r2)
  813070:	10bfffc4 	addi	r2,r2,-1
  813074:	1007883a 	mov	r3,r2
  813078:	e0bffc17 	ldw	r2,-16(fp)
  81307c:	10c0020d 	sth	r3,8(r2)
  813080:	e0bffb17 	ldw	r2,-20(fp)
  813084:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813088:	e0bff917 	ldw	r2,-28(fp)
  81308c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
  813090:	e0bffe17 	ldw	r2,-8(fp)
  813094:	10000005 	stb	zero,0(r2)
        return;
  813098:	00005106 	br	8131e0 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
  81309c:	008020b4 	movhi	r2,130
  8130a0:	10a98a04 	addi	r2,r2,-23000
  8130a4:	10c00017 	ldw	r3,0(r2)
  8130a8:	008020b4 	movhi	r2,130
  8130ac:	10a98a04 	addi	r2,r2,-23000
  8130b0:	10800017 	ldw	r2,0(r2)
  8130b4:	10800c03 	ldbu	r2,48(r2)
  8130b8:	10800054 	ori	r2,r2,1
  8130bc:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
  8130c0:	008020b4 	movhi	r2,130
  8130c4:	10a98a04 	addi	r2,r2,-23000
  8130c8:	10800017 	ldw	r2,0(r2)
  8130cc:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
  8130d0:	008020b4 	movhi	r2,130
  8130d4:	10a98a04 	addi	r2,r2,-23000
  8130d8:	10c00017 	ldw	r3,0(r2)
  8130dc:	e0bffd0b 	ldhu	r2,-12(fp)
  8130e0:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
  8130e4:	e13ffc17 	ldw	r4,-16(fp)
  8130e8:	080e5680 	call	80e568 <OS_EventTaskWait>
  8130ec:	e0bffb17 	ldw	r2,-20(fp)
  8130f0:	e0bff815 	stw	r2,-32(fp)
  8130f4:	e0bff817 	ldw	r2,-32(fp)
  8130f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
  8130fc:	080ee140 	call	80ee14 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813100:	0005303a 	rdctl	r2,status
  813104:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813108:	e0fff717 	ldw	r3,-36(fp)
  81310c:	00bfff84 	movi	r2,-2
  813110:	1884703a 	and	r2,r3,r2
  813114:	1001703a 	wrctl	status,r2
  
  return context;
  813118:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  81311c:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
  813120:	008020b4 	movhi	r2,130
  813124:	10a98a04 	addi	r2,r2,-23000
  813128:	10800017 	ldw	r2,0(r2)
  81312c:	10800c43 	ldbu	r2,49(r2)
  813130:	10803fcc 	andi	r2,r2,255
  813134:	e0bfff15 	stw	r2,-4(fp)
  813138:	e0ffff17 	ldw	r3,-4(fp)
  81313c:	1805003a 	cmpeq	r2,r3,zero
  813140:	1000041e 	bne	r2,zero,813154 <OSSemPend+0x1dc>
  813144:	e0ffff17 	ldw	r3,-4(fp)
  813148:	188000a0 	cmpeqi	r2,r3,2
  81314c:	1000041e 	bne	r2,zero,813160 <OSSemPend+0x1e8>
  813150:	00000706 	br	813170 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
  813154:	e0bffe17 	ldw	r2,-8(fp)
  813158:	10000005 	stb	zero,0(r2)
             break;
  81315c:	00000c06 	br	813190 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
  813160:	e0fffe17 	ldw	r3,-8(fp)
  813164:	00800384 	movi	r2,14
  813168:	18800005 	stb	r2,0(r3)
             break;
  81316c:	00000806 	br	813190 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
  813170:	008020b4 	movhi	r2,130
  813174:	10a98a04 	addi	r2,r2,-23000
  813178:	11000017 	ldw	r4,0(r2)
  81317c:	e17ffc17 	ldw	r5,-16(fp)
  813180:	080e7cc0 	call	80e7cc <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
  813184:	e0fffe17 	ldw	r3,-8(fp)
  813188:	00800284 	movi	r2,10
  81318c:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
  813190:	008020b4 	movhi	r2,130
  813194:	10a98a04 	addi	r2,r2,-23000
  813198:	10800017 	ldw	r2,0(r2)
  81319c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
  8131a0:	008020b4 	movhi	r2,130
  8131a4:	10a98a04 	addi	r2,r2,-23000
  8131a8:	10800017 	ldw	r2,0(r2)
  8131ac:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
  8131b0:	008020b4 	movhi	r2,130
  8131b4:	10a98a04 	addi	r2,r2,-23000
  8131b8:	10800017 	ldw	r2,0(r2)
  8131bc:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
  8131c0:	008020b4 	movhi	r2,130
  8131c4:	10a98a04 	addi	r2,r2,-23000
  8131c8:	10800017 	ldw	r2,0(r2)
  8131cc:	10000815 	stw	zero,32(r2)
  8131d0:	e0bffb17 	ldw	r2,-20(fp)
  8131d4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8131d8:	e0bff617 	ldw	r2,-40(fp)
  8131dc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
  8131e0:	e037883a 	mov	sp,fp
  8131e4:	dfc00117 	ldw	ra,4(sp)
  8131e8:	df000017 	ldw	fp,0(sp)
  8131ec:	dec00204 	addi	sp,sp,8
  8131f0:	f800283a 	ret

008131f4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
  8131f4:	defff504 	addi	sp,sp,-44
  8131f8:	dfc00a15 	stw	ra,40(sp)
  8131fc:	df000915 	stw	fp,36(sp)
  813200:	df000904 	addi	fp,sp,36
  813204:	e13ffc15 	stw	r4,-16(fp)
  813208:	e1bffe15 	stw	r6,-8(fp)
  81320c:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  813210:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  813214:	e0bffe17 	ldw	r2,-8(fp)
  813218:	1004c03a 	cmpne	r2,r2,zero
  81321c:	1000021e 	bne	r2,zero,813228 <OSSemPendAbort+0x34>
        return (0);
  813220:	e03fff15 	stw	zero,-4(fp)
  813224:	00004c06 	br	813358 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  813228:	e0bffc17 	ldw	r2,-16(fp)
  81322c:	1004c03a 	cmpne	r2,r2,zero
  813230:	1000051e 	bne	r2,zero,813248 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
  813234:	e0fffe17 	ldw	r3,-8(fp)
  813238:	00800104 	movi	r2,4
  81323c:	18800005 	stb	r2,0(r3)
        return (0);
  813240:	e03fff15 	stw	zero,-4(fp)
  813244:	00004406 	br	813358 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  813248:	e0bffc17 	ldw	r2,-16(fp)
  81324c:	10800003 	ldbu	r2,0(r2)
  813250:	10803fcc 	andi	r2,r2,255
  813254:	108000e0 	cmpeqi	r2,r2,3
  813258:	1000051e 	bne	r2,zero,813270 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
  81325c:	e0fffe17 	ldw	r3,-8(fp)
  813260:	00800044 	movi	r2,1
  813264:	18800005 	stb	r2,0(r3)
        return (0);
  813268:	e03fff15 	stw	zero,-4(fp)
  81326c:	00003a06 	br	813358 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813270:	0005303a 	rdctl	r2,status
  813274:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813278:	e0fff917 	ldw	r3,-28(fp)
  81327c:	00bfff84 	movi	r2,-2
  813280:	1884703a 	and	r2,r3,r2
  813284:	1001703a 	wrctl	status,r2
  
  return context;
  813288:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  81328c:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
  813290:	e0bffc17 	ldw	r2,-16(fp)
  813294:	10800283 	ldbu	r2,10(r2)
  813298:	10803fcc 	andi	r2,r2,255
  81329c:	1005003a 	cmpeq	r2,r2,zero
  8132a0:	1000261e 	bne	r2,zero,81333c <OSSemPendAbort+0x148>
        nbr_tasks = 0;
  8132a4:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
  8132a8:	e0bffd03 	ldbu	r2,-12(fp)
  8132ac:	10800060 	cmpeqi	r2,r2,1
  8132b0:	1000091e 	bne	r2,zero,8132d8 <OSSemPendAbort+0xe4>
  8132b4:	00000e06 	br	8132f0 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  8132b8:	e13ffc17 	ldw	r4,-16(fp)
  8132bc:	000b883a 	mov	r5,zero
  8132c0:	01800044 	movi	r6,1
  8132c4:	01c00084 	movi	r7,2
  8132c8:	080e3d40 	call	80e3d4 <OS_EventTaskRdy>
                     nbr_tasks++;
  8132cc:	e0bffb03 	ldbu	r2,-20(fp)
  8132d0:	10800044 	addi	r2,r2,1
  8132d4:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
  8132d8:	e0bffc17 	ldw	r2,-16(fp)
  8132dc:	10800283 	ldbu	r2,10(r2)
  8132e0:	10803fcc 	andi	r2,r2,255
  8132e4:	1004c03a 	cmpne	r2,r2,zero
  8132e8:	103ff31e 	bne	r2,zero,8132b8 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
  8132ec:	00000806 	br	813310 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
  8132f0:	e13ffc17 	ldw	r4,-16(fp)
  8132f4:	000b883a 	mov	r5,zero
  8132f8:	01800044 	movi	r6,1
  8132fc:	01c00084 	movi	r7,2
  813300:	080e3d40 	call	80e3d4 <OS_EventTaskRdy>
                 nbr_tasks++;
  813304:	e0bffb03 	ldbu	r2,-20(fp)
  813308:	10800044 	addi	r2,r2,1
  81330c:	e0bffb05 	stb	r2,-20(fp)
  813310:	e0bffa17 	ldw	r2,-24(fp)
  813314:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813318:	e0bff817 	ldw	r2,-32(fp)
  81331c:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  813320:	080ee140 	call	80ee14 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
  813324:	e0fffe17 	ldw	r3,-8(fp)
  813328:	00800384 	movi	r2,14
  81332c:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
  813330:	e0bffb03 	ldbu	r2,-20(fp)
  813334:	e0bfff15 	stw	r2,-4(fp)
  813338:	00000706 	br	813358 <OSSemPendAbort+0x164>
  81333c:	e0bffa17 	ldw	r2,-24(fp)
  813340:	e0bff715 	stw	r2,-36(fp)
  813344:	e0bff717 	ldw	r2,-36(fp)
  813348:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  81334c:	e0bffe17 	ldw	r2,-8(fp)
  813350:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
  813354:	e03fff15 	stw	zero,-4(fp)
  813358:	e0bfff17 	ldw	r2,-4(fp)
}
  81335c:	e037883a 	mov	sp,fp
  813360:	dfc00117 	ldw	ra,4(sp)
  813364:	df000017 	ldw	fp,0(sp)
  813368:	dec00204 	addi	sp,sp,8
  81336c:	f800283a 	ret

00813370 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
  813370:	defff704 	addi	sp,sp,-36
  813374:	dfc00815 	stw	ra,32(sp)
  813378:	df000715 	stw	fp,28(sp)
  81337c:	df000704 	addi	fp,sp,28
  813380:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  813384:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  813388:	e0bffe17 	ldw	r2,-8(fp)
  81338c:	1004c03a 	cmpne	r2,r2,zero
  813390:	1000031e 	bne	r2,zero,8133a0 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
  813394:	00800104 	movi	r2,4
  813398:	e0bfff15 	stw	r2,-4(fp)
  81339c:	00003806 	br	813480 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  8133a0:	e0bffe17 	ldw	r2,-8(fp)
  8133a4:	10800003 	ldbu	r2,0(r2)
  8133a8:	10803fcc 	andi	r2,r2,255
  8133ac:	108000e0 	cmpeqi	r2,r2,3
  8133b0:	1000031e 	bne	r2,zero,8133c0 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
  8133b4:	00800044 	movi	r2,1
  8133b8:	e0bfff15 	stw	r2,-4(fp)
  8133bc:	00003006 	br	813480 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8133c0:	0005303a 	rdctl	r2,status
  8133c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8133c8:	e0fffc17 	ldw	r3,-16(fp)
  8133cc:	00bfff84 	movi	r2,-2
  8133d0:	1884703a 	and	r2,r3,r2
  8133d4:	1001703a 	wrctl	status,r2
  
  return context;
  8133d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
  8133dc:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
  8133e0:	e0bffe17 	ldw	r2,-8(fp)
  8133e4:	10800283 	ldbu	r2,10(r2)
  8133e8:	10803fcc 	andi	r2,r2,255
  8133ec:	1005003a 	cmpeq	r2,r2,zero
  8133f0:	10000c1e 	bne	r2,zero,813424 <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
  8133f4:	e13ffe17 	ldw	r4,-8(fp)
  8133f8:	000b883a 	mov	r5,zero
  8133fc:	01800044 	movi	r6,1
  813400:	000f883a 	mov	r7,zero
  813404:	080e3d40 	call	80e3d4 <OS_EventTaskRdy>
  813408:	e0bffd17 	ldw	r2,-12(fp)
  81340c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813410:	e0bffb17 	ldw	r2,-20(fp)
  813414:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
  813418:	080ee140 	call	80ee14 <OS_Sched>
        return (OS_ERR_NONE);
  81341c:	e03fff15 	stw	zero,-4(fp)
  813420:	00001706 	br	813480 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
  813424:	e0bffe17 	ldw	r2,-8(fp)
  813428:	1080020b 	ldhu	r2,8(r2)
  81342c:	10ffffcc 	andi	r3,r2,65535
  813430:	00bfffd4 	movui	r2,65535
  813434:	18800c26 	beq	r3,r2,813468 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
  813438:	e0bffe17 	ldw	r2,-8(fp)
  81343c:	1080020b 	ldhu	r2,8(r2)
  813440:	10800044 	addi	r2,r2,1
  813444:	1007883a 	mov	r3,r2
  813448:	e0bffe17 	ldw	r2,-8(fp)
  81344c:	10c0020d 	sth	r3,8(r2)
  813450:	e0bffd17 	ldw	r2,-12(fp)
  813454:	e0bffa15 	stw	r2,-24(fp)
  813458:	e0bffa17 	ldw	r2,-24(fp)
  81345c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
  813460:	e03fff15 	stw	zero,-4(fp)
  813464:	00000606 	br	813480 <OSSemPost+0x110>
  813468:	e0bffd17 	ldw	r2,-12(fp)
  81346c:	e0bff915 	stw	r2,-28(fp)
  813470:	e0bff917 	ldw	r2,-28(fp)
  813474:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
  813478:	00800c84 	movi	r2,50
  81347c:	e0bfff15 	stw	r2,-4(fp)
  813480:	e0bfff17 	ldw	r2,-4(fp)
}
  813484:	e037883a 	mov	sp,fp
  813488:	dfc00117 	ldw	ra,4(sp)
  81348c:	df000017 	ldw	fp,0(sp)
  813490:	dec00204 	addi	sp,sp,8
  813494:	f800283a 	ret

00813498 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
  813498:	defff604 	addi	sp,sp,-40
  81349c:	df000915 	stw	fp,36(sp)
  8134a0:	df000904 	addi	fp,sp,36
  8134a4:	e13ffd15 	stw	r4,-12(fp)
  8134a8:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
  8134ac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
  8134b0:	e0bffd17 	ldw	r2,-12(fp)
  8134b4:	1004c03a 	cmpne	r2,r2,zero
  8134b8:	1000031e 	bne	r2,zero,8134c8 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
  8134bc:	00800104 	movi	r2,4
  8134c0:	e0bfff15 	stw	r2,-4(fp)
  8134c4:	00003b06 	br	8135b4 <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
  8134c8:	e0bffe17 	ldw	r2,-8(fp)
  8134cc:	1004c03a 	cmpne	r2,r2,zero
  8134d0:	1000031e 	bne	r2,zero,8134e0 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
  8134d4:	00800244 	movi	r2,9
  8134d8:	e0bfff15 	stw	r2,-4(fp)
  8134dc:	00003506 	br	8135b4 <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
  8134e0:	e0bffd17 	ldw	r2,-12(fp)
  8134e4:	10800003 	ldbu	r2,0(r2)
  8134e8:	10803fcc 	andi	r2,r2,255
  8134ec:	108000e0 	cmpeqi	r2,r2,3
  8134f0:	1000031e 	bne	r2,zero,813500 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
  8134f4:	00800044 	movi	r2,1
  8134f8:	e0bfff15 	stw	r2,-4(fp)
  8134fc:	00002d06 	br	8135b4 <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813500:	0005303a 	rdctl	r2,status
  813504:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813508:	e0fff817 	ldw	r3,-32(fp)
  81350c:	00bfff84 	movi	r2,-2
  813510:	1884703a 	and	r2,r3,r2
  813514:	1001703a 	wrctl	status,r2
  
  return context;
  813518:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  81351c:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
  813520:	e0bffd17 	ldw	r2,-12(fp)
  813524:	10c00283 	ldbu	r3,10(r2)
  813528:	e0bffe17 	ldw	r2,-8(fp)
  81352c:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
  813530:	e0bffd17 	ldw	r2,-12(fp)
  813534:	108002c4 	addi	r2,r2,11
  813538:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
  81353c:	e0bffe17 	ldw	r2,-8(fp)
  813540:	10800084 	addi	r2,r2,2
  813544:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  813548:	e03ffa05 	stb	zero,-24(fp)
  81354c:	00000d06 	br	813584 <OSSemQuery+0xec>
        *pdest++ = *psrc++;
  813550:	e0bffc17 	ldw	r2,-16(fp)
  813554:	10c00003 	ldbu	r3,0(r2)
  813558:	e0bffb17 	ldw	r2,-20(fp)
  81355c:	10c00005 	stb	r3,0(r2)
  813560:	e0bffb17 	ldw	r2,-20(fp)
  813564:	10800044 	addi	r2,r2,1
  813568:	e0bffb15 	stw	r2,-20(fp)
  81356c:	e0bffc17 	ldw	r2,-16(fp)
  813570:	10800044 	addi	r2,r2,1
  813574:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
  813578:	e0bffa03 	ldbu	r2,-24(fp)
  81357c:	10800044 	addi	r2,r2,1
  813580:	e0bffa05 	stb	r2,-24(fp)
  813584:	e0bffa03 	ldbu	r2,-24(fp)
  813588:	108000f0 	cmpltui	r2,r2,3
  81358c:	103ff01e 	bne	r2,zero,813550 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
  813590:	e0bffd17 	ldw	r2,-12(fp)
  813594:	10c0020b 	ldhu	r3,8(r2)
  813598:	e0bffe17 	ldw	r2,-8(fp)
  81359c:	10c0000d 	sth	r3,0(r2)
  8135a0:	e0bff917 	ldw	r2,-28(fp)
  8135a4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8135a8:	e0bff717 	ldw	r2,-36(fp)
  8135ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  8135b0:	e03fff15 	stw	zero,-4(fp)
  8135b4:	e0bfff17 	ldw	r2,-4(fp)
}
  8135b8:	e037883a 	mov	sp,fp
  8135bc:	df000017 	ldw	fp,0(sp)
  8135c0:	dec00104 	addi	sp,sp,4
  8135c4:	f800283a 	ret

008135c8 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
  8135c8:	defff904 	addi	sp,sp,-28
  8135cc:	df000615 	stw	fp,24(sp)
  8135d0:	df000604 	addi	fp,sp,24
  8135d4:	e13ffd15 	stw	r4,-12(fp)
  8135d8:	e1bfff15 	stw	r6,-4(fp)
  8135dc:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8135e0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
  8135e4:	e0bfff17 	ldw	r2,-4(fp)
  8135e8:	1005003a 	cmpeq	r2,r2,zero
  8135ec:	1000331e 	bne	r2,zero,8136bc <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
  8135f0:	e0bffd17 	ldw	r2,-12(fp)
  8135f4:	1004c03a 	cmpne	r2,r2,zero
  8135f8:	1000041e 	bne	r2,zero,81360c <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
  8135fc:	e0ffff17 	ldw	r3,-4(fp)
  813600:	00800104 	movi	r2,4
  813604:	18800005 	stb	r2,0(r3)
        return;
  813608:	00002c06 	br	8136bc <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
  81360c:	e0bffd17 	ldw	r2,-12(fp)
  813610:	10800003 	ldbu	r2,0(r2)
  813614:	10803fcc 	andi	r2,r2,255
  813618:	108000e0 	cmpeqi	r2,r2,3
  81361c:	1000041e 	bne	r2,zero,813630 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
  813620:	e0ffff17 	ldw	r3,-4(fp)
  813624:	00800044 	movi	r2,1
  813628:	18800005 	stb	r2,0(r3)
        return;
  81362c:	00002306 	br	8136bc <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813630:	0005303a 	rdctl	r2,status
  813634:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813638:	e0fffb17 	ldw	r3,-20(fp)
  81363c:	00bfff84 	movi	r2,-2
  813640:	1884703a 	and	r2,r3,r2
  813644:	1001703a 	wrctl	status,r2
  
  return context;
  813648:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  81364c:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
  813650:	e0bfff17 	ldw	r2,-4(fp)
  813654:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
  813658:	e0bffd17 	ldw	r2,-12(fp)
  81365c:	1080020b 	ldhu	r2,8(r2)
  813660:	10bfffcc 	andi	r2,r2,65535
  813664:	1005003a 	cmpeq	r2,r2,zero
  813668:	1000041e 	bne	r2,zero,81367c <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
  81366c:	e0fffd17 	ldw	r3,-12(fp)
  813670:	e0bffe0b 	ldhu	r2,-8(fp)
  813674:	1880020d 	sth	r2,8(r3)
  813678:	00000c06 	br	8136ac <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
  81367c:	e0bffd17 	ldw	r2,-12(fp)
  813680:	10800283 	ldbu	r2,10(r2)
  813684:	10803fcc 	andi	r2,r2,255
  813688:	1004c03a 	cmpne	r2,r2,zero
  81368c:	1000041e 	bne	r2,zero,8136a0 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
  813690:	e0fffd17 	ldw	r3,-12(fp)
  813694:	e0bffe0b 	ldhu	r2,-8(fp)
  813698:	1880020d 	sth	r2,8(r3)
  81369c:	00000306 	br	8136ac <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
  8136a0:	e0ffff17 	ldw	r3,-4(fp)
  8136a4:	00801244 	movi	r2,73
  8136a8:	18800005 	stb	r2,0(r3)
  8136ac:	e0bffc17 	ldw	r2,-16(fp)
  8136b0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8136b4:	e0bffa17 	ldw	r2,-24(fp)
  8136b8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
  8136bc:	e037883a 	mov	sp,fp
  8136c0:	df000017 	ldw	fp,0(sp)
  8136c4:	dec00104 	addi	sp,sp,4
  8136c8:	f800283a 	ret

008136cc <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
  8136cc:	defff004 	addi	sp,sp,-64
  8136d0:	dfc00f15 	stw	ra,60(sp)
  8136d4:	df000e15 	stw	fp,56(sp)
  8136d8:	df000e04 	addi	fp,sp,56
  8136dc:	e13ffd05 	stb	r4,-12(fp)
  8136e0:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
  8136e4:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
  8136e8:	e0bffd03 	ldbu	r2,-12(fp)
  8136ec:	10800530 	cmpltui	r2,r2,20
  8136f0:	1000061e 	bne	r2,zero,81370c <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
  8136f4:	e0bffd03 	ldbu	r2,-12(fp)
  8136f8:	10803fe0 	cmpeqi	r2,r2,255
  8136fc:	1000031e 	bne	r2,zero,81370c <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
  813700:	00800a84 	movi	r2,42
  813704:	e0bfff15 	stw	r2,-4(fp)
  813708:	00014706 	br	813c28 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
  81370c:	e0bffe03 	ldbu	r2,-8(fp)
  813710:	10800530 	cmpltui	r2,r2,20
  813714:	1000031e 	bne	r2,zero,813724 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
  813718:	00800a84 	movi	r2,42
  81371c:	e0bfff15 	stw	r2,-4(fp)
  813720:	00014106 	br	813c28 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813724:	0005303a 	rdctl	r2,status
  813728:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81372c:	e0fff617 	ldw	r3,-40(fp)
  813730:	00bfff84 	movi	r2,-2
  813734:	1884703a 	and	r2,r3,r2
  813738:	1001703a 	wrctl	status,r2
  
  return context;
  81373c:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  813740:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
  813744:	e0bffe03 	ldbu	r2,-8(fp)
  813748:	00c020b4 	movhi	r3,130
  81374c:	18fe1004 	addi	r3,r3,-1984
  813750:	1085883a 	add	r2,r2,r2
  813754:	1085883a 	add	r2,r2,r2
  813758:	10c5883a 	add	r2,r2,r3
  81375c:	10800017 	ldw	r2,0(r2)
  813760:	1005003a 	cmpeq	r2,r2,zero
  813764:	1000071e 	bne	r2,zero,813784 <OSTaskChangePrio+0xb8>
  813768:	e0bff717 	ldw	r2,-36(fp)
  81376c:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813770:	e0bff517 	ldw	r2,-44(fp)
  813774:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
  813778:	00800a04 	movi	r2,40
  81377c:	e0bfff15 	stw	r2,-4(fp)
  813780:	00012906 	br	813c28 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
  813784:	e0bffd03 	ldbu	r2,-12(fp)
  813788:	10803fd8 	cmpnei	r2,r2,255
  81378c:	1000051e 	bne	r2,zero,8137a4 <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
  813790:	008020b4 	movhi	r2,130
  813794:	10a98a04 	addi	r2,r2,-23000
  813798:	10800017 	ldw	r2,0(r2)
  81379c:	10800c83 	ldbu	r2,50(r2)
  8137a0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
  8137a4:	e0bffd03 	ldbu	r2,-12(fp)
  8137a8:	00c020b4 	movhi	r3,130
  8137ac:	18fe1004 	addi	r3,r3,-1984
  8137b0:	1085883a 	add	r2,r2,r2
  8137b4:	1085883a 	add	r2,r2,r2
  8137b8:	10c5883a 	add	r2,r2,r3
  8137bc:	10800017 	ldw	r2,0(r2)
  8137c0:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
  8137c4:	e0bffa17 	ldw	r2,-24(fp)
  8137c8:	1004c03a 	cmpne	r2,r2,zero
  8137cc:	1000071e 	bne	r2,zero,8137ec <OSTaskChangePrio+0x120>
  8137d0:	e0bff717 	ldw	r2,-36(fp)
  8137d4:	e0bff415 	stw	r2,-48(fp)
  8137d8:	e0bff417 	ldw	r2,-48(fp)
  8137dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
  8137e0:	00800a44 	movi	r2,41
  8137e4:	e0bfff15 	stw	r2,-4(fp)
  8137e8:	00010f06 	br	813c28 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
  8137ec:	e0bffa17 	ldw	r2,-24(fp)
  8137f0:	10800058 	cmpnei	r2,r2,1
  8137f4:	1000071e 	bne	r2,zero,813814 <OSTaskChangePrio+0x148>
  8137f8:	e0bff717 	ldw	r2,-36(fp)
  8137fc:	e0bff315 	stw	r2,-52(fp)
  813800:	e0bff317 	ldw	r2,-52(fp)
  813804:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
  813808:	008010c4 	movi	r2,67
  81380c:	e0bfff15 	stw	r2,-4(fp)
  813810:	00010506 	br	813c28 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
  813814:	e0bffe03 	ldbu	r2,-8(fp)
  813818:	1004d0fa 	srli	r2,r2,3
  81381c:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
  813820:	e0bffe03 	ldbu	r2,-8(fp)
  813824:	108001cc 	andi	r2,r2,7
  813828:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
  81382c:	e0fff983 	ldbu	r3,-26(fp)
  813830:	00800044 	movi	r2,1
  813834:	10c4983a 	sll	r2,r2,r3
  813838:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
  81383c:	e0fff943 	ldbu	r3,-27(fp)
  813840:	00800044 	movi	r2,1
  813844:	10c4983a 	sll	r2,r2,r3
  813848:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
  81384c:	e0bffd03 	ldbu	r2,-12(fp)
  813850:	00c020b4 	movhi	r3,130
  813854:	18fe1004 	addi	r3,r3,-1984
  813858:	1085883a 	add	r2,r2,r2
  81385c:	1085883a 	add	r2,r2,r2
  813860:	10c5883a 	add	r2,r2,r3
  813864:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
  813868:	e0bffe03 	ldbu	r2,-8(fp)
  81386c:	00c020b4 	movhi	r3,130
  813870:	18fe1004 	addi	r3,r3,-1984
  813874:	1085883a 	add	r2,r2,r2
  813878:	1085883a 	add	r2,r2,r2
  81387c:	10c7883a 	add	r3,r2,r3
  813880:	e0bffa17 	ldw	r2,-24(fp)
  813884:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
  813888:	e0bffa17 	ldw	r2,-24(fp)
  81388c:	10800d03 	ldbu	r2,52(r2)
  813890:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
  813894:	e0bffa17 	ldw	r2,-24(fp)
  813898:	10800d83 	ldbu	r2,54(r2)
  81389c:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
  8138a0:	e0bffa17 	ldw	r2,-24(fp)
  8138a4:	10800d43 	ldbu	r2,53(r2)
  8138a8:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
  8138ac:	e0fff903 	ldbu	r3,-28(fp)
  8138b0:	008020b4 	movhi	r2,130
  8138b4:	10a98744 	addi	r2,r2,-23011
  8138b8:	10c5883a 	add	r2,r2,r3
  8138bc:	10c00003 	ldbu	r3,0(r2)
  8138c0:	e0bff803 	ldbu	r2,-32(fp)
  8138c4:	1884703a 	and	r2,r3,r2
  8138c8:	10803fcc 	andi	r2,r2,255
  8138cc:	1005003a 	cmpeq	r2,r2,zero
  8138d0:	1000381e 	bne	r2,zero,8139b4 <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
  8138d4:	e13ff903 	ldbu	r4,-28(fp)
  8138d8:	e0fff903 	ldbu	r3,-28(fp)
  8138dc:	008020b4 	movhi	r2,130
  8138e0:	10a98744 	addi	r2,r2,-23011
  8138e4:	10c5883a 	add	r2,r2,r3
  8138e8:	10800003 	ldbu	r2,0(r2)
  8138ec:	1007883a 	mov	r3,r2
  8138f0:	e0bff803 	ldbu	r2,-32(fp)
  8138f4:	0084303a 	nor	r2,zero,r2
  8138f8:	1884703a 	and	r2,r3,r2
  8138fc:	1007883a 	mov	r3,r2
  813900:	008020b4 	movhi	r2,130
  813904:	10a98744 	addi	r2,r2,-23011
  813908:	1105883a 	add	r2,r2,r4
  81390c:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
  813910:	e0fff903 	ldbu	r3,-28(fp)
  813914:	008020b4 	movhi	r2,130
  813918:	10a98744 	addi	r2,r2,-23011
  81391c:	10c5883a 	add	r2,r2,r3
  813920:	10800003 	ldbu	r2,0(r2)
  813924:	10803fcc 	andi	r2,r2,255
  813928:	1004c03a 	cmpne	r2,r2,zero
  81392c:	10000b1e 	bne	r2,zero,81395c <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
  813930:	e0bff843 	ldbu	r2,-31(fp)
  813934:	0084303a 	nor	r2,zero,r2
  813938:	1007883a 	mov	r3,r2
  81393c:	008020b4 	movhi	r2,130
  813940:	10a98704 	addi	r2,r2,-23012
  813944:	10800003 	ldbu	r2,0(r2)
  813948:	1884703a 	and	r2,r3,r2
  81394c:	1007883a 	mov	r3,r2
  813950:	008020b4 	movhi	r2,130
  813954:	10a98704 	addi	r2,r2,-23012
  813958:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
  81395c:	008020b4 	movhi	r2,130
  813960:	10a98704 	addi	r2,r2,-23012
  813964:	10c00003 	ldbu	r3,0(r2)
  813968:	e0bff8c3 	ldbu	r2,-29(fp)
  81396c:	1884b03a 	or	r2,r3,r2
  813970:	1007883a 	mov	r3,r2
  813974:	008020b4 	movhi	r2,130
  813978:	10a98704 	addi	r2,r2,-23012
  81397c:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
  813980:	e13ff983 	ldbu	r4,-26(fp)
  813984:	e0fff983 	ldbu	r3,-26(fp)
  813988:	008020b4 	movhi	r2,130
  81398c:	10a98744 	addi	r2,r2,-23011
  813990:	10c5883a 	add	r2,r2,r3
  813994:	10c00003 	ldbu	r3,0(r2)
  813998:	e0bff883 	ldbu	r2,-30(fp)
  81399c:	1884b03a 	or	r2,r3,r2
  8139a0:	1007883a 	mov	r3,r2
  8139a4:	008020b4 	movhi	r2,130
  8139a8:	10a98744 	addi	r2,r2,-23011
  8139ac:	1105883a 	add	r2,r2,r4
  8139b0:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
  8139b4:	e0bffa17 	ldw	r2,-24(fp)
  8139b8:	10800717 	ldw	r2,28(r2)
  8139bc:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
  8139c0:	e0bffc17 	ldw	r2,-16(fp)
  8139c4:	1005003a 	cmpeq	r2,r2,zero
  8139c8:	1000341e 	bne	r2,zero,813a9c <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
  8139cc:	e13ff903 	ldbu	r4,-28(fp)
  8139d0:	e0fff903 	ldbu	r3,-28(fp)
  8139d4:	e0bffc17 	ldw	r2,-16(fp)
  8139d8:	1885883a 	add	r2,r3,r2
  8139dc:	10800204 	addi	r2,r2,8
  8139e0:	108000c3 	ldbu	r2,3(r2)
  8139e4:	1007883a 	mov	r3,r2
  8139e8:	e0bff803 	ldbu	r2,-32(fp)
  8139ec:	0084303a 	nor	r2,zero,r2
  8139f0:	1884703a 	and	r2,r3,r2
  8139f4:	1007883a 	mov	r3,r2
  8139f8:	e0bffc17 	ldw	r2,-16(fp)
  8139fc:	2085883a 	add	r2,r4,r2
  813a00:	10800204 	addi	r2,r2,8
  813a04:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
  813a08:	e0fff903 	ldbu	r3,-28(fp)
  813a0c:	e0bffc17 	ldw	r2,-16(fp)
  813a10:	1885883a 	add	r2,r3,r2
  813a14:	10800204 	addi	r2,r2,8
  813a18:	108000c3 	ldbu	r2,3(r2)
  813a1c:	10803fcc 	andi	r2,r2,255
  813a20:	1004c03a 	cmpne	r2,r2,zero
  813a24:	1000091e 	bne	r2,zero,813a4c <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
  813a28:	e0bffc17 	ldw	r2,-16(fp)
  813a2c:	10800283 	ldbu	r2,10(r2)
  813a30:	1007883a 	mov	r3,r2
  813a34:	e0bff843 	ldbu	r2,-31(fp)
  813a38:	0084303a 	nor	r2,zero,r2
  813a3c:	1884703a 	and	r2,r3,r2
  813a40:	1007883a 	mov	r3,r2
  813a44:	e0bffc17 	ldw	r2,-16(fp)
  813a48:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
  813a4c:	e0bffc17 	ldw	r2,-16(fp)
  813a50:	10c00283 	ldbu	r3,10(r2)
  813a54:	e0bff8c3 	ldbu	r2,-29(fp)
  813a58:	1884b03a 	or	r2,r3,r2
  813a5c:	1007883a 	mov	r3,r2
  813a60:	e0bffc17 	ldw	r2,-16(fp)
  813a64:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
  813a68:	e13ff983 	ldbu	r4,-26(fp)
  813a6c:	e0fff983 	ldbu	r3,-26(fp)
  813a70:	e0bffc17 	ldw	r2,-16(fp)
  813a74:	1885883a 	add	r2,r3,r2
  813a78:	10800204 	addi	r2,r2,8
  813a7c:	10c000c3 	ldbu	r3,3(r2)
  813a80:	e0bff883 	ldbu	r2,-30(fp)
  813a84:	1884b03a 	or	r2,r3,r2
  813a88:	1007883a 	mov	r3,r2
  813a8c:	e0bffc17 	ldw	r2,-16(fp)
  813a90:	2085883a 	add	r2,r4,r2
  813a94:	10800204 	addi	r2,r2,8
  813a98:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
  813a9c:	e0bffa17 	ldw	r2,-24(fp)
  813aa0:	10800817 	ldw	r2,32(r2)
  813aa4:	1005003a 	cmpeq	r2,r2,zero
  813aa8:	1000441e 	bne	r2,zero,813bbc <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
  813aac:	e0bffa17 	ldw	r2,-24(fp)
  813ab0:	10800817 	ldw	r2,32(r2)
  813ab4:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
  813ab8:	e0bffb17 	ldw	r2,-20(fp)
  813abc:	10800017 	ldw	r2,0(r2)
  813ac0:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
  813ac4:	00003a06 	br	813bb0 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
  813ac8:	e13ff903 	ldbu	r4,-28(fp)
  813acc:	e0fff903 	ldbu	r3,-28(fp)
  813ad0:	e0bffc17 	ldw	r2,-16(fp)
  813ad4:	1885883a 	add	r2,r3,r2
  813ad8:	10800204 	addi	r2,r2,8
  813adc:	108000c3 	ldbu	r2,3(r2)
  813ae0:	1007883a 	mov	r3,r2
  813ae4:	e0bff803 	ldbu	r2,-32(fp)
  813ae8:	0084303a 	nor	r2,zero,r2
  813aec:	1884703a 	and	r2,r3,r2
  813af0:	1007883a 	mov	r3,r2
  813af4:	e0bffc17 	ldw	r2,-16(fp)
  813af8:	2085883a 	add	r2,r4,r2
  813afc:	10800204 	addi	r2,r2,8
  813b00:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
  813b04:	e0fff903 	ldbu	r3,-28(fp)
  813b08:	e0bffc17 	ldw	r2,-16(fp)
  813b0c:	1885883a 	add	r2,r3,r2
  813b10:	10800204 	addi	r2,r2,8
  813b14:	108000c3 	ldbu	r2,3(r2)
  813b18:	10803fcc 	andi	r2,r2,255
  813b1c:	1004c03a 	cmpne	r2,r2,zero
  813b20:	1000091e 	bne	r2,zero,813b48 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
  813b24:	e0bffc17 	ldw	r2,-16(fp)
  813b28:	10800283 	ldbu	r2,10(r2)
  813b2c:	1007883a 	mov	r3,r2
  813b30:	e0bff843 	ldbu	r2,-31(fp)
  813b34:	0084303a 	nor	r2,zero,r2
  813b38:	1884703a 	and	r2,r3,r2
  813b3c:	1007883a 	mov	r3,r2
  813b40:	e0bffc17 	ldw	r2,-16(fp)
  813b44:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
  813b48:	e0bffc17 	ldw	r2,-16(fp)
  813b4c:	10c00283 	ldbu	r3,10(r2)
  813b50:	e0bff8c3 	ldbu	r2,-29(fp)
  813b54:	1884b03a 	or	r2,r3,r2
  813b58:	1007883a 	mov	r3,r2
  813b5c:	e0bffc17 	ldw	r2,-16(fp)
  813b60:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
  813b64:	e13ff983 	ldbu	r4,-26(fp)
  813b68:	e0fff983 	ldbu	r3,-26(fp)
  813b6c:	e0bffc17 	ldw	r2,-16(fp)
  813b70:	1885883a 	add	r2,r3,r2
  813b74:	10800204 	addi	r2,r2,8
  813b78:	10c000c3 	ldbu	r3,3(r2)
  813b7c:	e0bff883 	ldbu	r2,-30(fp)
  813b80:	1884b03a 	or	r2,r3,r2
  813b84:	1007883a 	mov	r3,r2
  813b88:	e0bffc17 	ldw	r2,-16(fp)
  813b8c:	2085883a 	add	r2,r4,r2
  813b90:	10800204 	addi	r2,r2,8
  813b94:	10c000c5 	stb	r3,3(r2)
            pevents++;
  813b98:	e0bffb17 	ldw	r2,-20(fp)
  813b9c:	10800104 	addi	r2,r2,4
  813ba0:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
  813ba4:	e0bffb17 	ldw	r2,-20(fp)
  813ba8:	10800017 	ldw	r2,0(r2)
  813bac:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
  813bb0:	e0bffc17 	ldw	r2,-16(fp)
  813bb4:	1004c03a 	cmpne	r2,r2,zero
  813bb8:	103fc31e 	bne	r2,zero,813ac8 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
  813bbc:	e0fffa17 	ldw	r3,-24(fp)
  813bc0:	e0bffe03 	ldbu	r2,-8(fp)
  813bc4:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
  813bc8:	e0fffa17 	ldw	r3,-24(fp)
  813bcc:	e0bff983 	ldbu	r2,-26(fp)
  813bd0:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
  813bd4:	e0fffa17 	ldw	r3,-24(fp)
  813bd8:	e0bff943 	ldbu	r2,-27(fp)
  813bdc:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
  813be0:	e0fffa17 	ldw	r3,-24(fp)
  813be4:	e0bff8c3 	ldbu	r2,-29(fp)
  813be8:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
  813bec:	e0fffa17 	ldw	r3,-24(fp)
  813bf0:	e0bff883 	ldbu	r2,-30(fp)
  813bf4:	18800d45 	stb	r2,53(r3)
  813bf8:	e0bff717 	ldw	r2,-36(fp)
  813bfc:	e0bff215 	stw	r2,-56(fp)
  813c00:	e0bff217 	ldw	r2,-56(fp)
  813c04:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  813c08:	008020b4 	movhi	r2,130
  813c0c:	10a97b44 	addi	r2,r2,-23059
  813c10:	10800003 	ldbu	r2,0(r2)
  813c14:	10803fcc 	andi	r2,r2,255
  813c18:	10800058 	cmpnei	r2,r2,1
  813c1c:	1000011e 	bne	r2,zero,813c24 <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
  813c20:	080ee140 	call	80ee14 <OS_Sched>
    }
    return (OS_ERR_NONE);
  813c24:	e03fff15 	stw	zero,-4(fp)
  813c28:	e0bfff17 	ldw	r2,-4(fp)
}
  813c2c:	e037883a 	mov	sp,fp
  813c30:	dfc00117 	ldw	ra,4(sp)
  813c34:	df000017 	ldw	fp,0(sp)
  813c38:	dec00204 	addi	sp,sp,8
  813c3c:	f800283a 	ret

00813c40 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
  813c40:	deffed04 	addi	sp,sp,-76
  813c44:	dfc01215 	stw	ra,72(sp)
  813c48:	df001115 	stw	fp,68(sp)
  813c4c:	df001104 	addi	fp,sp,68
  813c50:	e13ffb15 	stw	r4,-20(fp)
  813c54:	e17ffc15 	stw	r5,-16(fp)
  813c58:	e1bffd15 	stw	r6,-12(fp)
  813c5c:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  813c60:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  813c64:	e0bffe03 	ldbu	r2,-8(fp)
  813c68:	10800570 	cmpltui	r2,r2,21
  813c6c:	1000031e 	bne	r2,zero,813c7c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
  813c70:	00800a84 	movi	r2,42
  813c74:	e0bfff15 	stw	r2,-4(fp)
  813c78:	00006006 	br	813dfc <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813c7c:	0005303a 	rdctl	r2,status
  813c80:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813c84:	e0fff717 	ldw	r3,-36(fp)
  813c88:	00bfff84 	movi	r2,-2
  813c8c:	1884703a 	and	r2,r3,r2
  813c90:	1001703a 	wrctl	status,r2
  
  return context;
  813c94:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  813c98:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  813c9c:	008020b4 	movhi	r2,130
  813ca0:	10a98904 	addi	r2,r2,-23004
  813ca4:	10800003 	ldbu	r2,0(r2)
  813ca8:	10803fcc 	andi	r2,r2,255
  813cac:	1005003a 	cmpeq	r2,r2,zero
  813cb0:	1000071e 	bne	r2,zero,813cd0 <OSTaskCreate+0x90>
  813cb4:	e0bff817 	ldw	r2,-32(fp)
  813cb8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813cbc:	e0bff617 	ldw	r2,-40(fp)
  813cc0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  813cc4:	00800f04 	movi	r2,60
  813cc8:	e0bfff15 	stw	r2,-4(fp)
  813ccc:	00004b06 	br	813dfc <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  813cd0:	e0bffe03 	ldbu	r2,-8(fp)
  813cd4:	00c020b4 	movhi	r3,130
  813cd8:	18fe1004 	addi	r3,r3,-1984
  813cdc:	1085883a 	add	r2,r2,r2
  813ce0:	1085883a 	add	r2,r2,r2
  813ce4:	10c5883a 	add	r2,r2,r3
  813ce8:	10800017 	ldw	r2,0(r2)
  813cec:	1004c03a 	cmpne	r2,r2,zero
  813cf0:	10003c1e 	bne	r2,zero,813de4 <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  813cf4:	e0bffe03 	ldbu	r2,-8(fp)
  813cf8:	00c020b4 	movhi	r3,130
  813cfc:	18fe1004 	addi	r3,r3,-1984
  813d00:	1085883a 	add	r2,r2,r2
  813d04:	1085883a 	add	r2,r2,r2
  813d08:	10c7883a 	add	r3,r2,r3
  813d0c:	00800044 	movi	r2,1
  813d10:	18800015 	stw	r2,0(r3)
  813d14:	e0bff817 	ldw	r2,-32(fp)
  813d18:	e0bff515 	stw	r2,-44(fp)
  813d1c:	e0bff517 	ldw	r2,-44(fp)
  813d20:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
  813d24:	e13ffb17 	ldw	r4,-20(fp)
  813d28:	e17ffc17 	ldw	r5,-16(fp)
  813d2c:	e1bffd17 	ldw	r6,-12(fp)
  813d30:	000f883a 	mov	r7,zero
  813d34:	0817a140 	call	817a14 <OSTaskStkInit>
  813d38:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
  813d3c:	e13ffe03 	ldbu	r4,-8(fp)
  813d40:	d8000015 	stw	zero,0(sp)
  813d44:	d8000115 	stw	zero,4(sp)
  813d48:	d8000215 	stw	zero,8(sp)
  813d4c:	e17ffa17 	ldw	r5,-24(fp)
  813d50:	000d883a 	mov	r6,zero
  813d54:	000f883a 	mov	r7,zero
  813d58:	080f21c0 	call	80f21c <OS_TCBInit>
  813d5c:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
  813d60:	e0bff903 	ldbu	r2,-28(fp)
  813d64:	1004c03a 	cmpne	r2,r2,zero
  813d68:	1000081e 	bne	r2,zero,813d8c <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
  813d6c:	008020b4 	movhi	r2,130
  813d70:	10a97b44 	addi	r2,r2,-23059
  813d74:	10800003 	ldbu	r2,0(r2)
  813d78:	10803fcc 	andi	r2,r2,255
  813d7c:	10800058 	cmpnei	r2,r2,1
  813d80:	1000151e 	bne	r2,zero,813dd8 <OSTaskCreate+0x198>
                OS_Sched();
  813d84:	080ee140 	call	80ee14 <OS_Sched>
  813d88:	00001306 	br	813dd8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813d8c:	0005303a 	rdctl	r2,status
  813d90:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813d94:	e0fff417 	ldw	r3,-48(fp)
  813d98:	00bfff84 	movi	r2,-2
  813d9c:	1884703a 	and	r2,r3,r2
  813da0:	1001703a 	wrctl	status,r2
  
  return context;
  813da4:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  813da8:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
  813dac:	e0bffe03 	ldbu	r2,-8(fp)
  813db0:	00c020b4 	movhi	r3,130
  813db4:	18fe1004 	addi	r3,r3,-1984
  813db8:	1085883a 	add	r2,r2,r2
  813dbc:	1085883a 	add	r2,r2,r2
  813dc0:	10c5883a 	add	r2,r2,r3
  813dc4:	10000015 	stw	zero,0(r2)
  813dc8:	e0bff817 	ldw	r2,-32(fp)
  813dcc:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813dd0:	e0bff317 	ldw	r2,-52(fp)
  813dd4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  813dd8:	e0bff903 	ldbu	r2,-28(fp)
  813ddc:	e0bfff15 	stw	r2,-4(fp)
  813de0:	00000606 	br	813dfc <OSTaskCreate+0x1bc>
  813de4:	e0bff817 	ldw	r2,-32(fp)
  813de8:	e0bff215 	stw	r2,-56(fp)
  813dec:	e0bff217 	ldw	r2,-56(fp)
  813df0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  813df4:	00800a04 	movi	r2,40
  813df8:	e0bfff15 	stw	r2,-4(fp)
  813dfc:	e0bfff17 	ldw	r2,-4(fp)
}
  813e00:	e037883a 	mov	sp,fp
  813e04:	dfc00117 	ldw	ra,4(sp)
  813e08:	df000017 	ldw	fp,0(sp)
  813e0c:	dec00204 	addi	sp,sp,8
  813e10:	f800283a 	ret

00813e14 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
  813e14:	deffeb04 	addi	sp,sp,-84
  813e18:	dfc01415 	stw	ra,80(sp)
  813e1c:	df001315 	stw	fp,76(sp)
  813e20:	df001304 	addi	fp,sp,76
  813e24:	e13ff915 	stw	r4,-28(fp)
  813e28:	e17ffa15 	stw	r5,-24(fp)
  813e2c:	e1bffb15 	stw	r6,-20(fp)
  813e30:	e0800217 	ldw	r2,8(fp)
  813e34:	e0c00617 	ldw	r3,24(fp)
  813e38:	e1fffc05 	stb	r7,-16(fp)
  813e3c:	e0bffd0d 	sth	r2,-12(fp)
  813e40:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
  813e44:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
  813e48:	e0bffc03 	ldbu	r2,-16(fp)
  813e4c:	10800570 	cmpltui	r2,r2,21
  813e50:	1000031e 	bne	r2,zero,813e60 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
  813e54:	00800a84 	movi	r2,42
  813e58:	e0bfff15 	stw	r2,-4(fp)
  813e5c:	00006706 	br	813ffc <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813e60:	0005303a 	rdctl	r2,status
  813e64:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813e68:	e0fff517 	ldw	r3,-44(fp)
  813e6c:	00bfff84 	movi	r2,-2
  813e70:	1884703a 	and	r2,r3,r2
  813e74:	1001703a 	wrctl	status,r2
  
  return context;
  813e78:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  813e7c:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
  813e80:	008020b4 	movhi	r2,130
  813e84:	10a98904 	addi	r2,r2,-23004
  813e88:	10800003 	ldbu	r2,0(r2)
  813e8c:	10803fcc 	andi	r2,r2,255
  813e90:	1005003a 	cmpeq	r2,r2,zero
  813e94:	1000071e 	bne	r2,zero,813eb4 <OSTaskCreateExt+0xa0>
  813e98:	e0bff617 	ldw	r2,-40(fp)
  813e9c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813ea0:	e0bff417 	ldw	r2,-48(fp)
  813ea4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
  813ea8:	00800f04 	movi	r2,60
  813eac:	e0bfff15 	stw	r2,-4(fp)
  813eb0:	00005206 	br	813ffc <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
  813eb4:	e0bffc03 	ldbu	r2,-16(fp)
  813eb8:	00c020b4 	movhi	r3,130
  813ebc:	18fe1004 	addi	r3,r3,-1984
  813ec0:	1085883a 	add	r2,r2,r2
  813ec4:	1085883a 	add	r2,r2,r2
  813ec8:	10c5883a 	add	r2,r2,r3
  813ecc:	10800017 	ldw	r2,0(r2)
  813ed0:	1004c03a 	cmpne	r2,r2,zero
  813ed4:	1000431e 	bne	r2,zero,813fe4 <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
  813ed8:	e0bffc03 	ldbu	r2,-16(fp)
  813edc:	00c020b4 	movhi	r3,130
  813ee0:	18fe1004 	addi	r3,r3,-1984
  813ee4:	1085883a 	add	r2,r2,r2
  813ee8:	1085883a 	add	r2,r2,r2
  813eec:	10c7883a 	add	r3,r2,r3
  813ef0:	00800044 	movi	r2,1
  813ef4:	18800015 	stw	r2,0(r3)
  813ef8:	e0bff617 	ldw	r2,-40(fp)
  813efc:	e0bff315 	stw	r2,-52(fp)
  813f00:	e0bff317 	ldw	r2,-52(fp)
  813f04:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
  813f08:	e1bffe0b 	ldhu	r6,-8(fp)
  813f0c:	e1000317 	ldw	r4,12(fp)
  813f10:	e1400417 	ldw	r5,16(fp)
  813f14:	08150900 	call	815090 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
  813f18:	e1fffe0b 	ldhu	r7,-8(fp)
  813f1c:	e13ff917 	ldw	r4,-28(fp)
  813f20:	e17ffa17 	ldw	r5,-24(fp)
  813f24:	e1bffb17 	ldw	r6,-20(fp)
  813f28:	0817a140 	call	817a14 <OSTaskStkInit>
  813f2c:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
  813f30:	e13ffc03 	ldbu	r4,-16(fp)
  813f34:	e1fffd0b 	ldhu	r7,-12(fp)
  813f38:	e0fffe0b 	ldhu	r3,-8(fp)
  813f3c:	e0800417 	ldw	r2,16(fp)
  813f40:	d8800015 	stw	r2,0(sp)
  813f44:	e0800517 	ldw	r2,20(fp)
  813f48:	d8800115 	stw	r2,4(sp)
  813f4c:	d8c00215 	stw	r3,8(sp)
  813f50:	e17ff817 	ldw	r5,-32(fp)
  813f54:	e1800317 	ldw	r6,12(fp)
  813f58:	080f21c0 	call	80f21c <OS_TCBInit>
  813f5c:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
  813f60:	e0bff703 	ldbu	r2,-36(fp)
  813f64:	1004c03a 	cmpne	r2,r2,zero
  813f68:	1000081e 	bne	r2,zero,813f8c <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
  813f6c:	008020b4 	movhi	r2,130
  813f70:	10a97b44 	addi	r2,r2,-23059
  813f74:	10800003 	ldbu	r2,0(r2)
  813f78:	10803fcc 	andi	r2,r2,255
  813f7c:	10800058 	cmpnei	r2,r2,1
  813f80:	1000151e 	bne	r2,zero,813fd8 <OSTaskCreateExt+0x1c4>
                OS_Sched();
  813f84:	080ee140 	call	80ee14 <OS_Sched>
  813f88:	00001306 	br	813fd8 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813f8c:	0005303a 	rdctl	r2,status
  813f90:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813f94:	e0fff217 	ldw	r3,-56(fp)
  813f98:	00bfff84 	movi	r2,-2
  813f9c:	1884703a 	and	r2,r3,r2
  813fa0:	1001703a 	wrctl	status,r2
  
  return context;
  813fa4:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
  813fa8:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
  813fac:	e0bffc03 	ldbu	r2,-16(fp)
  813fb0:	00c020b4 	movhi	r3,130
  813fb4:	18fe1004 	addi	r3,r3,-1984
  813fb8:	1085883a 	add	r2,r2,r2
  813fbc:	1085883a 	add	r2,r2,r2
  813fc0:	10c5883a 	add	r2,r2,r3
  813fc4:	10000015 	stw	zero,0(r2)
  813fc8:	e0bff617 	ldw	r2,-40(fp)
  813fcc:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  813fd0:	e0bff117 	ldw	r2,-60(fp)
  813fd4:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
  813fd8:	e0bff703 	ldbu	r2,-36(fp)
  813fdc:	e0bfff15 	stw	r2,-4(fp)
  813fe0:	00000606 	br	813ffc <OSTaskCreateExt+0x1e8>
  813fe4:	e0bff617 	ldw	r2,-40(fp)
  813fe8:	e0bff015 	stw	r2,-64(fp)
  813fec:	e0bff017 	ldw	r2,-64(fp)
  813ff0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
  813ff4:	00800a04 	movi	r2,40
  813ff8:	e0bfff15 	stw	r2,-4(fp)
  813ffc:	e0bfff17 	ldw	r2,-4(fp)
}
  814000:	e037883a 	mov	sp,fp
  814004:	dfc00117 	ldw	ra,4(sp)
  814008:	df000017 	ldw	fp,0(sp)
  81400c:	dec00204 	addi	sp,sp,8
  814010:	f800283a 	ret

00814014 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
  814014:	defff304 	addi	sp,sp,-52
  814018:	dfc00c15 	stw	ra,48(sp)
  81401c:	df000b15 	stw	fp,44(sp)
  814020:	df000b04 	addi	fp,sp,44
  814024:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
  814028:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
  81402c:	008020b4 	movhi	r2,130
  814030:	10a98904 	addi	r2,r2,-23004
  814034:	10800003 	ldbu	r2,0(r2)
  814038:	10803fcc 	andi	r2,r2,255
  81403c:	1005003a 	cmpeq	r2,r2,zero
  814040:	1000031e 	bne	r2,zero,814050 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
  814044:	00801004 	movi	r2,64
  814048:	e0bfff15 	stw	r2,-4(fp)
  81404c:	0000ee06 	br	814408 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
  814050:	e0bffe03 	ldbu	r2,-8(fp)
  814054:	10800518 	cmpnei	r2,r2,20
  814058:	1000031e 	bne	r2,zero,814068 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
  81405c:	00800f84 	movi	r2,62
  814060:	e0bfff15 	stw	r2,-4(fp)
  814064:	0000e806 	br	814408 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
  814068:	e0bffe03 	ldbu	r2,-8(fp)
  81406c:	10800530 	cmpltui	r2,r2,20
  814070:	1000061e 	bne	r2,zero,81408c <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
  814074:	e0bffe03 	ldbu	r2,-8(fp)
  814078:	10803fe0 	cmpeqi	r2,r2,255
  81407c:	1000031e 	bne	r2,zero,81408c <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
  814080:	00800a84 	movi	r2,42
  814084:	e0bfff15 	stw	r2,-4(fp)
  814088:	0000df06 	br	814408 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81408c:	0005303a 	rdctl	r2,status
  814090:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814094:	e0fffa17 	ldw	r3,-24(fp)
  814098:	00bfff84 	movi	r2,-2
  81409c:	1884703a 	and	r2,r3,r2
  8140a0:	1001703a 	wrctl	status,r2
  
  return context;
  8140a4:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
  8140a8:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
  8140ac:	e0bffe03 	ldbu	r2,-8(fp)
  8140b0:	10803fd8 	cmpnei	r2,r2,255
  8140b4:	1000051e 	bne	r2,zero,8140cc <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
  8140b8:	008020b4 	movhi	r2,130
  8140bc:	10a98a04 	addi	r2,r2,-23000
  8140c0:	10800017 	ldw	r2,0(r2)
  8140c4:	10800c83 	ldbu	r2,50(r2)
  8140c8:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  8140cc:	e0bffe03 	ldbu	r2,-8(fp)
  8140d0:	00c020b4 	movhi	r3,130
  8140d4:	18fe1004 	addi	r3,r3,-1984
  8140d8:	1085883a 	add	r2,r2,r2
  8140dc:	1085883a 	add	r2,r2,r2
  8140e0:	10c5883a 	add	r2,r2,r3
  8140e4:	10800017 	ldw	r2,0(r2)
  8140e8:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
  8140ec:	e0bffc17 	ldw	r2,-16(fp)
  8140f0:	1004c03a 	cmpne	r2,r2,zero
  8140f4:	1000071e 	bne	r2,zero,814114 <OSTaskDel+0x100>
  8140f8:	e0bffb17 	ldw	r2,-20(fp)
  8140fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814100:	e0bff917 	ldw	r2,-28(fp)
  814104:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  814108:	008010c4 	movi	r2,67
  81410c:	e0bfff15 	stw	r2,-4(fp)
  814110:	0000bd06 	br	814408 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
  814114:	e0bffc17 	ldw	r2,-16(fp)
  814118:	10800058 	cmpnei	r2,r2,1
  81411c:	1000071e 	bne	r2,zero,81413c <OSTaskDel+0x128>
  814120:	e0bffb17 	ldw	r2,-20(fp)
  814124:	e0bff815 	stw	r2,-32(fp)
  814128:	e0bff817 	ldw	r2,-32(fp)
  81412c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  814130:	00800f44 	movi	r2,61
  814134:	e0bfff15 	stw	r2,-4(fp)
  814138:	0000b306 	br	814408 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
  81413c:	e0bffc17 	ldw	r2,-16(fp)
  814140:	10800d03 	ldbu	r2,52(r2)
  814144:	11003fcc 	andi	r4,r2,255
  814148:	e0bffc17 	ldw	r2,-16(fp)
  81414c:	10800d03 	ldbu	r2,52(r2)
  814150:	10c03fcc 	andi	r3,r2,255
  814154:	008020b4 	movhi	r2,130
  814158:	10a98744 	addi	r2,r2,-23011
  81415c:	10c5883a 	add	r2,r2,r3
  814160:	10800003 	ldbu	r2,0(r2)
  814164:	1007883a 	mov	r3,r2
  814168:	e0bffc17 	ldw	r2,-16(fp)
  81416c:	10800d43 	ldbu	r2,53(r2)
  814170:	0084303a 	nor	r2,zero,r2
  814174:	1884703a 	and	r2,r3,r2
  814178:	1007883a 	mov	r3,r2
  81417c:	008020b4 	movhi	r2,130
  814180:	10a98744 	addi	r2,r2,-23011
  814184:	1105883a 	add	r2,r2,r4
  814188:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
  81418c:	e0bffc17 	ldw	r2,-16(fp)
  814190:	10800d03 	ldbu	r2,52(r2)
  814194:	10c03fcc 	andi	r3,r2,255
  814198:	008020b4 	movhi	r2,130
  81419c:	10a98744 	addi	r2,r2,-23011
  8141a0:	10c5883a 	add	r2,r2,r3
  8141a4:	10800003 	ldbu	r2,0(r2)
  8141a8:	10803fcc 	andi	r2,r2,255
  8141ac:	1004c03a 	cmpne	r2,r2,zero
  8141b0:	10000c1e 	bne	r2,zero,8141e4 <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
  8141b4:	e0bffc17 	ldw	r2,-16(fp)
  8141b8:	10800d83 	ldbu	r2,54(r2)
  8141bc:	0084303a 	nor	r2,zero,r2
  8141c0:	1007883a 	mov	r3,r2
  8141c4:	008020b4 	movhi	r2,130
  8141c8:	10a98704 	addi	r2,r2,-23012
  8141cc:	10800003 	ldbu	r2,0(r2)
  8141d0:	1884703a 	and	r2,r3,r2
  8141d4:	1007883a 	mov	r3,r2
  8141d8:	008020b4 	movhi	r2,130
  8141dc:	10a98704 	addi	r2,r2,-23012
  8141e0:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
  8141e4:	e0bffc17 	ldw	r2,-16(fp)
  8141e8:	10800717 	ldw	r2,28(r2)
  8141ec:	1005003a 	cmpeq	r2,r2,zero
  8141f0:	1000041e 	bne	r2,zero,814204 <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
  8141f4:	e0bffc17 	ldw	r2,-16(fp)
  8141f8:	11400717 	ldw	r5,28(r2)
  8141fc:	e13ffc17 	ldw	r4,-16(fp)
  814200:	080e7cc0 	call	80e7cc <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
  814204:	e0bffc17 	ldw	r2,-16(fp)
  814208:	10800817 	ldw	r2,32(r2)
  81420c:	1005003a 	cmpeq	r2,r2,zero
  814210:	1000041e 	bne	r2,zero,814224 <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
  814214:	e0bffc17 	ldw	r2,-16(fp)
  814218:	11400817 	ldw	r5,32(r2)
  81421c:	e13ffc17 	ldw	r4,-16(fp)
  814220:	080e8840 	call	80e884 <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
  814224:	e0bffc17 	ldw	r2,-16(fp)
  814228:	10800a17 	ldw	r2,40(r2)
  81422c:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
  814230:	e0bffd17 	ldw	r2,-12(fp)
  814234:	1005003a 	cmpeq	r2,r2,zero
  814238:	1000021e 	bne	r2,zero,814244 <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
  81423c:	e13ffd17 	ldw	r4,-12(fp)
  814240:	0810f180 	call	810f18 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
  814244:	e0bffc17 	ldw	r2,-16(fp)
  814248:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
  81424c:	e0bffc17 	ldw	r2,-16(fp)
  814250:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
  814254:	e0bffc17 	ldw	r2,-16(fp)
  814258:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
  81425c:	008020b4 	movhi	r2,130
  814260:	10a97b04 	addi	r2,r2,-23060
  814264:	10800003 	ldbu	r2,0(r2)
  814268:	10803fcc 	andi	r2,r2,255
  81426c:	10803fe0 	cmpeqi	r2,r2,255
  814270:	1000081e 	bne	r2,zero,814294 <OSTaskDel+0x280>
        OSLockNesting++;
  814274:	008020b4 	movhi	r2,130
  814278:	10a97b04 	addi	r2,r2,-23060
  81427c:	10800003 	ldbu	r2,0(r2)
  814280:	10800044 	addi	r2,r2,1
  814284:	1007883a 	mov	r3,r2
  814288:	008020b4 	movhi	r2,130
  81428c:	10a97b04 	addi	r2,r2,-23060
  814290:	10c00005 	stb	r3,0(r2)
  814294:	e0bffb17 	ldw	r2,-20(fp)
  814298:	e0bff715 	stw	r2,-36(fp)
  81429c:	e0bff717 	ldw	r2,-36(fp)
  8142a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
  8142a4:	080e3b80 	call	80e3b8 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8142a8:	0005303a 	rdctl	r2,status
  8142ac:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8142b0:	e0fff617 	ldw	r3,-40(fp)
  8142b4:	00bfff84 	movi	r2,-2
  8142b8:	1884703a 	and	r2,r3,r2
  8142bc:	1001703a 	wrctl	status,r2
  
  return context;
  8142c0:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
  8142c4:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
  8142c8:	008020b4 	movhi	r2,130
  8142cc:	10a97b04 	addi	r2,r2,-23060
  8142d0:	10800003 	ldbu	r2,0(r2)
  8142d4:	10803fcc 	andi	r2,r2,255
  8142d8:	1005003a 	cmpeq	r2,r2,zero
  8142dc:	1000081e 	bne	r2,zero,814300 <OSTaskDel+0x2ec>
        OSLockNesting--;
  8142e0:	008020b4 	movhi	r2,130
  8142e4:	10a97b04 	addi	r2,r2,-23060
  8142e8:	10800003 	ldbu	r2,0(r2)
  8142ec:	10bfffc4 	addi	r2,r2,-1
  8142f0:	1007883a 	mov	r3,r2
  8142f4:	008020b4 	movhi	r2,130
  8142f8:	10a97b04 	addi	r2,r2,-23060
  8142fc:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
  814300:	e13ffc17 	ldw	r4,-16(fp)
  814304:	0817d440 	call	817d44 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
  814308:	008020b4 	movhi	r2,130
  81430c:	10a98344 	addi	r2,r2,-23027
  814310:	10800003 	ldbu	r2,0(r2)
  814314:	10bfffc4 	addi	r2,r2,-1
  814318:	1007883a 	mov	r3,r2
  81431c:	008020b4 	movhi	r2,130
  814320:	10a98344 	addi	r2,r2,-23027
  814324:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
  814328:	e0bffe03 	ldbu	r2,-8(fp)
  81432c:	00c020b4 	movhi	r3,130
  814330:	18fe1004 	addi	r3,r3,-1984
  814334:	1085883a 	add	r2,r2,r2
  814338:	1085883a 	add	r2,r2,r2
  81433c:	10c5883a 	add	r2,r2,r3
  814340:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
  814344:	e0bffc17 	ldw	r2,-16(fp)
  814348:	10800617 	ldw	r2,24(r2)
  81434c:	1004c03a 	cmpne	r2,r2,zero
  814350:	1000091e 	bne	r2,zero,814378 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
  814354:	e0bffc17 	ldw	r2,-16(fp)
  814358:	10800517 	ldw	r2,20(r2)
  81435c:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
  814360:	e0bffc17 	ldw	r2,-16(fp)
  814364:	10c00517 	ldw	r3,20(r2)
  814368:	008020b4 	movhi	r2,130
  81436c:	10a97e04 	addi	r2,r2,-23048
  814370:	10c00015 	stw	r3,0(r2)
  814374:	00000a06 	br	8143a0 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
  814378:	e0bffc17 	ldw	r2,-16(fp)
  81437c:	10c00617 	ldw	r3,24(r2)
  814380:	e0bffc17 	ldw	r2,-16(fp)
  814384:	10800517 	ldw	r2,20(r2)
  814388:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
  81438c:	e0bffc17 	ldw	r2,-16(fp)
  814390:	10c00517 	ldw	r3,20(r2)
  814394:	e0bffc17 	ldw	r2,-16(fp)
  814398:	10800617 	ldw	r2,24(r2)
  81439c:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
  8143a0:	008020b4 	movhi	r2,130
  8143a4:	10a98204 	addi	r2,r2,-23032
  8143a8:	10c00017 	ldw	r3,0(r2)
  8143ac:	e0bffc17 	ldw	r2,-16(fp)
  8143b0:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
  8143b4:	00c020b4 	movhi	r3,130
  8143b8:	18e98204 	addi	r3,r3,-23032
  8143bc:	e0bffc17 	ldw	r2,-16(fp)
  8143c0:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
  8143c4:	e0fffc17 	ldw	r3,-16(fp)
  8143c8:	00800fc4 	movi	r2,63
  8143cc:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
  8143d0:	e0bffc17 	ldw	r2,-16(fp)
  8143d4:	10001345 	stb	zero,77(r2)
  8143d8:	e0bffb17 	ldw	r2,-20(fp)
  8143dc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8143e0:	e0bff517 	ldw	r2,-44(fp)
  8143e4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
  8143e8:	008020b4 	movhi	r2,130
  8143ec:	10a97b44 	addi	r2,r2,-23059
  8143f0:	10800003 	ldbu	r2,0(r2)
  8143f4:	10803fcc 	andi	r2,r2,255
  8143f8:	10800058 	cmpnei	r2,r2,1
  8143fc:	1000011e 	bne	r2,zero,814404 <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
  814400:	080ee140 	call	80ee14 <OS_Sched>
    }
    return (OS_ERR_NONE);
  814404:	e03fff15 	stw	zero,-4(fp)
  814408:	e0bfff17 	ldw	r2,-4(fp)
}
  81440c:	e037883a 	mov	sp,fp
  814410:	dfc00117 	ldw	ra,4(sp)
  814414:	df000017 	ldw	fp,0(sp)
  814418:	dec00204 	addi	sp,sp,8
  81441c:	f800283a 	ret

00814420 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
  814420:	defff404 	addi	sp,sp,-48
  814424:	df000b15 	stw	fp,44(sp)
  814428:	df000b04 	addi	fp,sp,44
  81442c:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  814430:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
  814434:	e0bffe03 	ldbu	r2,-8(fp)
  814438:	10800518 	cmpnei	r2,r2,20
  81443c:	1000031e 	bne	r2,zero,81444c <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
  814440:	00800f84 	movi	r2,62
  814444:	e0bfff15 	stw	r2,-4(fp)
  814448:	00004c06 	br	81457c <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  81444c:	e0bffe03 	ldbu	r2,-8(fp)
  814450:	10800530 	cmpltui	r2,r2,20
  814454:	1000061e 	bne	r2,zero,814470 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
  814458:	e0bffe03 	ldbu	r2,-8(fp)
  81445c:	10803fe0 	cmpeqi	r2,r2,255
  814460:	1000031e 	bne	r2,zero,814470 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
  814464:	00800a84 	movi	r2,42
  814468:	e0bfff15 	stw	r2,-4(fp)
  81446c:	00004306 	br	81457c <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
  814470:	e0bffe03 	ldbu	r2,-8(fp)
  814474:	10803fd8 	cmpnei	r2,r2,255
  814478:	1000141e 	bne	r2,zero,8144cc <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81447c:	0005303a 	rdctl	r2,status
  814480:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814484:	e0fffa17 	ldw	r3,-24(fp)
  814488:	00bfff84 	movi	r2,-2
  81448c:	1884703a 	and	r2,r3,r2
  814490:	1001703a 	wrctl	status,r2
  
  return context;
  814494:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
  814498:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
  81449c:	008020b4 	movhi	r2,130
  8144a0:	10a98a04 	addi	r2,r2,-23000
  8144a4:	10800017 	ldw	r2,0(r2)
  8144a8:	10800dc3 	ldbu	r2,55(r2)
  8144ac:	e0bffd05 	stb	r2,-12(fp)
  8144b0:	e0bffb17 	ldw	r2,-20(fp)
  8144b4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8144b8:	e0bff917 	ldw	r2,-28(fp)
  8144bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
  8144c0:	e0bffd03 	ldbu	r2,-12(fp)
  8144c4:	e0bfff15 	stw	r2,-4(fp)
  8144c8:	00002c06 	br	81457c <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8144cc:	0005303a 	rdctl	r2,status
  8144d0:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8144d4:	e0fff817 	ldw	r3,-32(fp)
  8144d8:	00bfff84 	movi	r2,-2
  8144dc:	1884703a 	and	r2,r3,r2
  8144e0:	1001703a 	wrctl	status,r2
  
  return context;
  8144e4:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  8144e8:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
  8144ec:	e0bffe03 	ldbu	r2,-8(fp)
  8144f0:	00c020b4 	movhi	r3,130
  8144f4:	18fe1004 	addi	r3,r3,-1984
  8144f8:	1085883a 	add	r2,r2,r2
  8144fc:	1085883a 	add	r2,r2,r2
  814500:	10c5883a 	add	r2,r2,r3
  814504:	10800017 	ldw	r2,0(r2)
  814508:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
  81450c:	e0bffc17 	ldw	r2,-16(fp)
  814510:	1004c03a 	cmpne	r2,r2,zero
  814514:	1000071e 	bne	r2,zero,814534 <OSTaskDelReq+0x114>
  814518:	e0bffb17 	ldw	r2,-20(fp)
  81451c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814520:	e0bff717 	ldw	r2,-36(fp)
  814524:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
  814528:	008010c4 	movi	r2,67
  81452c:	e0bfff15 	stw	r2,-4(fp)
  814530:	00001206 	br	81457c <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
  814534:	e0bffc17 	ldw	r2,-16(fp)
  814538:	10800058 	cmpnei	r2,r2,1
  81453c:	1000071e 	bne	r2,zero,81455c <OSTaskDelReq+0x13c>
  814540:	e0bffb17 	ldw	r2,-20(fp)
  814544:	e0bff615 	stw	r2,-40(fp)
  814548:	e0bff617 	ldw	r2,-40(fp)
  81454c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
  814550:	00800f44 	movi	r2,61
  814554:	e0bfff15 	stw	r2,-4(fp)
  814558:	00000806 	br	81457c <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
  81455c:	e0fffc17 	ldw	r3,-16(fp)
  814560:	00800fc4 	movi	r2,63
  814564:	18800dc5 	stb	r2,55(r3)
  814568:	e0bffb17 	ldw	r2,-20(fp)
  81456c:	e0bff515 	stw	r2,-44(fp)
  814570:	e0bff517 	ldw	r2,-44(fp)
  814574:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  814578:	e03fff15 	stw	zero,-4(fp)
  81457c:	e0bfff17 	ldw	r2,-4(fp)
}
  814580:	e037883a 	mov	sp,fp
  814584:	df000017 	ldw	fp,0(sp)
  814588:	dec00104 	addi	sp,sp,4
  81458c:	f800283a 	ret

00814590 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
  814590:	defff304 	addi	sp,sp,-52
  814594:	dfc00c15 	stw	ra,48(sp)
  814598:	df000b15 	stw	fp,44(sp)
  81459c:	df000b04 	addi	fp,sp,44
  8145a0:	e17ffd15 	stw	r5,-12(fp)
  8145a4:	e1bffe15 	stw	r6,-8(fp)
  8145a8:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
  8145ac:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
  8145b0:	e0bffe17 	ldw	r2,-8(fp)
  8145b4:	1004c03a 	cmpne	r2,r2,zero
  8145b8:	1000021e 	bne	r2,zero,8145c4 <OSTaskNameGet+0x34>
        return (0);
  8145bc:	e03fff15 	stw	zero,-4(fp)
  8145c0:	00005b06 	br	814730 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
  8145c4:	e0bffc03 	ldbu	r2,-16(fp)
  8145c8:	10800570 	cmpltui	r2,r2,21
  8145cc:	1000081e 	bne	r2,zero,8145f0 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
  8145d0:	e0bffc03 	ldbu	r2,-16(fp)
  8145d4:	10803fe0 	cmpeqi	r2,r2,255
  8145d8:	1000051e 	bne	r2,zero,8145f0 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
  8145dc:	e0fffe17 	ldw	r3,-8(fp)
  8145e0:	00800a84 	movi	r2,42
  8145e4:	18800005 	stb	r2,0(r3)
            return (0);
  8145e8:	e03fff15 	stw	zero,-4(fp)
  8145ec:	00005006 	br	814730 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
  8145f0:	e0bffd17 	ldw	r2,-12(fp)
  8145f4:	1004c03a 	cmpne	r2,r2,zero
  8145f8:	1000051e 	bne	r2,zero,814610 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
  8145fc:	e0fffe17 	ldw	r3,-8(fp)
  814600:	00800304 	movi	r2,12
  814604:	18800005 	stb	r2,0(r3)
        return (0);
  814608:	e03fff15 	stw	zero,-4(fp)
  81460c:	00004806 	br	814730 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
  814610:	008020b4 	movhi	r2,130
  814614:	10a98904 	addi	r2,r2,-23004
  814618:	10800003 	ldbu	r2,0(r2)
  81461c:	10803fcc 	andi	r2,r2,255
  814620:	1005003a 	cmpeq	r2,r2,zero
  814624:	1000051e 	bne	r2,zero,81463c <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
  814628:	e0fffe17 	ldw	r3,-8(fp)
  81462c:	00800444 	movi	r2,17
  814630:	18800005 	stb	r2,0(r3)
        return (0);
  814634:	e03fff15 	stw	zero,-4(fp)
  814638:	00003d06 	br	814730 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81463c:	0005303a 	rdctl	r2,status
  814640:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814644:	e0fff817 	ldw	r3,-32(fp)
  814648:	00bfff84 	movi	r2,-2
  81464c:	1884703a 	and	r2,r3,r2
  814650:	1001703a 	wrctl	status,r2
  
  return context;
  814654:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
  814658:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
  81465c:	e0bffc03 	ldbu	r2,-16(fp)
  814660:	10803fd8 	cmpnei	r2,r2,255
  814664:	1000051e 	bne	r2,zero,81467c <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
  814668:	008020b4 	movhi	r2,130
  81466c:	10a98a04 	addi	r2,r2,-23000
  814670:	10800017 	ldw	r2,0(r2)
  814674:	10800c83 	ldbu	r2,50(r2)
  814678:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  81467c:	e0bffc03 	ldbu	r2,-16(fp)
  814680:	00c020b4 	movhi	r3,130
  814684:	18fe1004 	addi	r3,r3,-1984
  814688:	1085883a 	add	r2,r2,r2
  81468c:	1085883a 	add	r2,r2,r2
  814690:	10c5883a 	add	r2,r2,r3
  814694:	10800017 	ldw	r2,0(r2)
  814698:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
  81469c:	e0bffb17 	ldw	r2,-20(fp)
  8146a0:	1004c03a 	cmpne	r2,r2,zero
  8146a4:	1000091e 	bne	r2,zero,8146cc <OSTaskNameGet+0x13c>
  8146a8:	e0bff917 	ldw	r2,-28(fp)
  8146ac:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8146b0:	e0bff717 	ldw	r2,-36(fp)
  8146b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8146b8:	e0fffe17 	ldw	r3,-8(fp)
  8146bc:	008010c4 	movi	r2,67
  8146c0:	18800005 	stb	r2,0(r3)
        return (0);
  8146c4:	e03fff15 	stw	zero,-4(fp)
  8146c8:	00001906 	br	814730 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
  8146cc:	e0bffb17 	ldw	r2,-20(fp)
  8146d0:	10800058 	cmpnei	r2,r2,1
  8146d4:	1000091e 	bne	r2,zero,8146fc <OSTaskNameGet+0x16c>
  8146d8:	e0bff917 	ldw	r2,-28(fp)
  8146dc:	e0bff615 	stw	r2,-40(fp)
  8146e0:	e0bff617 	ldw	r2,-40(fp)
  8146e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
  8146e8:	e0fffe17 	ldw	r3,-8(fp)
  8146ec:	008010c4 	movi	r2,67
  8146f0:	18800005 	stb	r2,0(r3)
        return (0);
  8146f4:	e03fff15 	stw	zero,-4(fp)
  8146f8:	00000d06 	br	814730 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
  8146fc:	e0bffb17 	ldw	r2,-20(fp)
  814700:	11401304 	addi	r5,r2,76
  814704:	e13ffd17 	ldw	r4,-12(fp)
  814708:	080ef580 	call	80ef58 <OS_StrCopy>
  81470c:	e0bffa05 	stb	r2,-24(fp)
  814710:	e0bff917 	ldw	r2,-28(fp)
  814714:	e0bff515 	stw	r2,-44(fp)
  814718:	e0bff517 	ldw	r2,-44(fp)
  81471c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  814720:	e0bffe17 	ldw	r2,-8(fp)
  814724:	10000005 	stb	zero,0(r2)
    return (len);
  814728:	e0bffa03 	ldbu	r2,-24(fp)
  81472c:	e0bfff15 	stw	r2,-4(fp)
  814730:	e0bfff17 	ldw	r2,-4(fp)
}
  814734:	e037883a 	mov	sp,fp
  814738:	dfc00117 	ldw	ra,4(sp)
  81473c:	df000017 	ldw	fp,0(sp)
  814740:	dec00204 	addi	sp,sp,8
  814744:	f800283a 	ret

00814748 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
  814748:	defff304 	addi	sp,sp,-52
  81474c:	dfc00c15 	stw	ra,48(sp)
  814750:	df000b15 	stw	fp,44(sp)
  814754:	df000b04 	addi	fp,sp,44
  814758:	e17ffe15 	stw	r5,-8(fp)
  81475c:	e1bfff15 	stw	r6,-4(fp)
  814760:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  814764:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
  814768:	e0bfff17 	ldw	r2,-4(fp)
  81476c:	1005003a 	cmpeq	r2,r2,zero
  814770:	1000611e 	bne	r2,zero,8148f8 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
  814774:	e0bffd03 	ldbu	r2,-12(fp)
  814778:	10800570 	cmpltui	r2,r2,21
  81477c:	1000071e 	bne	r2,zero,81479c <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
  814780:	e0bffd03 	ldbu	r2,-12(fp)
  814784:	10803fe0 	cmpeqi	r2,r2,255
  814788:	1000041e 	bne	r2,zero,81479c <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
  81478c:	e0ffff17 	ldw	r3,-4(fp)
  814790:	00800a84 	movi	r2,42
  814794:	18800005 	stb	r2,0(r3)
            return;
  814798:	00005706 	br	8148f8 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
  81479c:	e0bffe17 	ldw	r2,-8(fp)
  8147a0:	1004c03a 	cmpne	r2,r2,zero
  8147a4:	1000041e 	bne	r2,zero,8147b8 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
  8147a8:	e0ffff17 	ldw	r3,-4(fp)
  8147ac:	00800304 	movi	r2,12
  8147b0:	18800005 	stb	r2,0(r3)
        return;
  8147b4:	00005006 	br	8148f8 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
  8147b8:	008020b4 	movhi	r2,130
  8147bc:	10a98904 	addi	r2,r2,-23004
  8147c0:	10800003 	ldbu	r2,0(r2)
  8147c4:	10803fcc 	andi	r2,r2,255
  8147c8:	1005003a 	cmpeq	r2,r2,zero
  8147cc:	1000041e 	bne	r2,zero,8147e0 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
  8147d0:	e0ffff17 	ldw	r3,-4(fp)
  8147d4:	00800484 	movi	r2,18
  8147d8:	18800005 	stb	r2,0(r3)
        return;
  8147dc:	00004606 	br	8148f8 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8147e0:	0005303a 	rdctl	r2,status
  8147e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8147e8:	e0fff917 	ldw	r3,-28(fp)
  8147ec:	00bfff84 	movi	r2,-2
  8147f0:	1884703a 	and	r2,r3,r2
  8147f4:	1001703a 	wrctl	status,r2
  
  return context;
  8147f8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
  8147fc:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
  814800:	e0bffd03 	ldbu	r2,-12(fp)
  814804:	10803fd8 	cmpnei	r2,r2,255
  814808:	1000051e 	bne	r2,zero,814820 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
  81480c:	008020b4 	movhi	r2,130
  814810:	10a98a04 	addi	r2,r2,-23000
  814814:	10800017 	ldw	r2,0(r2)
  814818:	10800c83 	ldbu	r2,50(r2)
  81481c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  814820:	e0bffd03 	ldbu	r2,-12(fp)
  814824:	00c020b4 	movhi	r3,130
  814828:	18fe1004 	addi	r3,r3,-1984
  81482c:	1085883a 	add	r2,r2,r2
  814830:	1085883a 	add	r2,r2,r2
  814834:	10c5883a 	add	r2,r2,r3
  814838:	10800017 	ldw	r2,0(r2)
  81483c:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
  814840:	e0bffb17 	ldw	r2,-20(fp)
  814844:	1004c03a 	cmpne	r2,r2,zero
  814848:	1000081e 	bne	r2,zero,81486c <OSTaskNameSet+0x124>
  81484c:	e0bffa17 	ldw	r2,-24(fp)
  814850:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814854:	e0bff817 	ldw	r2,-32(fp)
  814858:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
  81485c:	e0ffff17 	ldw	r3,-4(fp)
  814860:	008010c4 	movi	r2,67
  814864:	18800005 	stb	r2,0(r3)
        return;
  814868:	00002306 	br	8148f8 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
  81486c:	e0bffb17 	ldw	r2,-20(fp)
  814870:	10800058 	cmpnei	r2,r2,1
  814874:	1000081e 	bne	r2,zero,814898 <OSTaskNameSet+0x150>
  814878:	e0bffa17 	ldw	r2,-24(fp)
  81487c:	e0bff715 	stw	r2,-36(fp)
  814880:	e0bff717 	ldw	r2,-36(fp)
  814884:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
  814888:	e0ffff17 	ldw	r3,-4(fp)
  81488c:	008010c4 	movi	r2,67
  814890:	18800005 	stb	r2,0(r3)
        return;
  814894:	00001806 	br	8148f8 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
  814898:	e13ffe17 	ldw	r4,-8(fp)
  81489c:	080efd80 	call	80efd8 <OS_StrLen>
  8148a0:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
  8148a4:	e0bffc03 	ldbu	r2,-16(fp)
  8148a8:	10800830 	cmpltui	r2,r2,32
  8148ac:	1000081e 	bne	r2,zero,8148d0 <OSTaskNameSet+0x188>
  8148b0:	e0bffa17 	ldw	r2,-24(fp)
  8148b4:	e0bff615 	stw	r2,-40(fp)
  8148b8:	e0bff617 	ldw	r2,-40(fp)
  8148bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
  8148c0:	e0ffff17 	ldw	r3,-4(fp)
  8148c4:	00801044 	movi	r2,65
  8148c8:	18800005 	stb	r2,0(r3)
        return;
  8148cc:	00000a06 	br	8148f8 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
  8148d0:	e0bffb17 	ldw	r2,-20(fp)
  8148d4:	11001304 	addi	r4,r2,76
  8148d8:	e17ffe17 	ldw	r5,-8(fp)
  8148dc:	080ef580 	call	80ef58 <OS_StrCopy>
  8148e0:	e0bffa17 	ldw	r2,-24(fp)
  8148e4:	e0bff515 	stw	r2,-44(fp)
  8148e8:	e0bff517 	ldw	r2,-44(fp)
  8148ec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
  8148f0:	e0bfff17 	ldw	r2,-4(fp)
  8148f4:	10000005 	stb	zero,0(r2)
}
  8148f8:	e037883a 	mov	sp,fp
  8148fc:	dfc00117 	ldw	ra,4(sp)
  814900:	df000017 	ldw	fp,0(sp)
  814904:	dec00204 	addi	sp,sp,8
  814908:	f800283a 	ret

0081490c <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
  81490c:	defff304 	addi	sp,sp,-52
  814910:	dfc00c15 	stw	ra,48(sp)
  814914:	df000b15 	stw	fp,44(sp)
  814918:	df000b04 	addi	fp,sp,44
  81491c:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
  814920:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
  814924:	e0bffe03 	ldbu	r2,-8(fp)
  814928:	10800530 	cmpltui	r2,r2,20
  81492c:	1000031e 	bne	r2,zero,81493c <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  814930:	00800a84 	movi	r2,42
  814934:	e0bfff15 	stw	r2,-4(fp)
  814938:	00007406 	br	814b0c <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81493c:	0005303a 	rdctl	r2,status
  814940:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814944:	e0fffb17 	ldw	r3,-20(fp)
  814948:	00bfff84 	movi	r2,-2
  81494c:	1884703a 	and	r2,r3,r2
  814950:	1001703a 	wrctl	status,r2
  
  return context;
  814954:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814958:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
  81495c:	e0bffe03 	ldbu	r2,-8(fp)
  814960:	00c020b4 	movhi	r3,130
  814964:	18fe1004 	addi	r3,r3,-1984
  814968:	1085883a 	add	r2,r2,r2
  81496c:	1085883a 	add	r2,r2,r2
  814970:	10c5883a 	add	r2,r2,r3
  814974:	10800017 	ldw	r2,0(r2)
  814978:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
  81497c:	e0bffd17 	ldw	r2,-12(fp)
  814980:	1004c03a 	cmpne	r2,r2,zero
  814984:	1000071e 	bne	r2,zero,8149a4 <OSTaskResume+0x98>
  814988:	e0bffc17 	ldw	r2,-16(fp)
  81498c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814990:	e0bffa17 	ldw	r2,-24(fp)
  814994:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
  814998:	00801184 	movi	r2,70
  81499c:	e0bfff15 	stw	r2,-4(fp)
  8149a0:	00005a06 	br	814b0c <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
  8149a4:	e0bffd17 	ldw	r2,-12(fp)
  8149a8:	10800058 	cmpnei	r2,r2,1
  8149ac:	1000071e 	bne	r2,zero,8149cc <OSTaskResume+0xc0>
  8149b0:	e0bffc17 	ldw	r2,-16(fp)
  8149b4:	e0bff915 	stw	r2,-28(fp)
  8149b8:	e0bff917 	ldw	r2,-28(fp)
  8149bc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  8149c0:	008010c4 	movi	r2,67
  8149c4:	e0bfff15 	stw	r2,-4(fp)
  8149c8:	00005006 	br	814b0c <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
  8149cc:	e0bffd17 	ldw	r2,-12(fp)
  8149d0:	10800c03 	ldbu	r2,48(r2)
  8149d4:	10803fcc 	andi	r2,r2,255
  8149d8:	1080020c 	andi	r2,r2,8
  8149dc:	1005003a 	cmpeq	r2,r2,zero
  8149e0:	1000441e 	bne	r2,zero,814af4 <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
  8149e4:	e0bffd17 	ldw	r2,-12(fp)
  8149e8:	10c00c03 	ldbu	r3,48(r2)
  8149ec:	00bffdc4 	movi	r2,-9
  8149f0:	1884703a 	and	r2,r3,r2
  8149f4:	1007883a 	mov	r3,r2
  8149f8:	e0bffd17 	ldw	r2,-12(fp)
  8149fc:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
  814a00:	e0bffd17 	ldw	r2,-12(fp)
  814a04:	10800c03 	ldbu	r2,48(r2)
  814a08:	10803fcc 	andi	r2,r2,255
  814a0c:	1004c03a 	cmpne	r2,r2,zero
  814a10:	1000321e 	bne	r2,zero,814adc <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
  814a14:	e0bffd17 	ldw	r2,-12(fp)
  814a18:	10800b8b 	ldhu	r2,46(r2)
  814a1c:	10bfffcc 	andi	r2,r2,65535
  814a20:	1004c03a 	cmpne	r2,r2,zero
  814a24:	1000281e 	bne	r2,zero,814ac8 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
  814a28:	e0bffd17 	ldw	r2,-12(fp)
  814a2c:	10c00d83 	ldbu	r3,54(r2)
  814a30:	008020b4 	movhi	r2,130
  814a34:	10a98704 	addi	r2,r2,-23012
  814a38:	10800003 	ldbu	r2,0(r2)
  814a3c:	1884b03a 	or	r2,r3,r2
  814a40:	1007883a 	mov	r3,r2
  814a44:	008020b4 	movhi	r2,130
  814a48:	10a98704 	addi	r2,r2,-23012
  814a4c:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  814a50:	e0bffd17 	ldw	r2,-12(fp)
  814a54:	10800d03 	ldbu	r2,52(r2)
  814a58:	11003fcc 	andi	r4,r2,255
  814a5c:	e0bffd17 	ldw	r2,-12(fp)
  814a60:	10800d03 	ldbu	r2,52(r2)
  814a64:	10c03fcc 	andi	r3,r2,255
  814a68:	008020b4 	movhi	r2,130
  814a6c:	10a98744 	addi	r2,r2,-23011
  814a70:	10c5883a 	add	r2,r2,r3
  814a74:	10c00003 	ldbu	r3,0(r2)
  814a78:	e0bffd17 	ldw	r2,-12(fp)
  814a7c:	10800d43 	ldbu	r2,53(r2)
  814a80:	1884b03a 	or	r2,r3,r2
  814a84:	1007883a 	mov	r3,r2
  814a88:	008020b4 	movhi	r2,130
  814a8c:	10a98744 	addi	r2,r2,-23011
  814a90:	1105883a 	add	r2,r2,r4
  814a94:	10c00005 	stb	r3,0(r2)
  814a98:	e0bffc17 	ldw	r2,-16(fp)
  814a9c:	e0bff815 	stw	r2,-32(fp)
  814aa0:	e0bff817 	ldw	r2,-32(fp)
  814aa4:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
  814aa8:	008020b4 	movhi	r2,130
  814aac:	10a97b44 	addi	r2,r2,-23059
  814ab0:	10800003 	ldbu	r2,0(r2)
  814ab4:	10803fcc 	andi	r2,r2,255
  814ab8:	10800058 	cmpnei	r2,r2,1
  814abc:	10000b1e 	bne	r2,zero,814aec <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
  814ac0:	080ee140 	call	80ee14 <OS_Sched>
  814ac4:	00000906 	br	814aec <OSTaskResume+0x1e0>
  814ac8:	e0bffc17 	ldw	r2,-16(fp)
  814acc:	e0bff715 	stw	r2,-36(fp)
  814ad0:	e0bff717 	ldw	r2,-36(fp)
  814ad4:	1001703a 	wrctl	status,r2
  814ad8:	00000406 	br	814aec <OSTaskResume+0x1e0>
  814adc:	e0bffc17 	ldw	r2,-16(fp)
  814ae0:	e0bff615 	stw	r2,-40(fp)
  814ae4:	e0bff617 	ldw	r2,-40(fp)
  814ae8:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
  814aec:	e03fff15 	stw	zero,-4(fp)
  814af0:	00000606 	br	814b0c <OSTaskResume+0x200>
  814af4:	e0bffc17 	ldw	r2,-16(fp)
  814af8:	e0bff515 	stw	r2,-44(fp)
  814afc:	e0bff517 	ldw	r2,-44(fp)
  814b00:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
  814b04:	00801104 	movi	r2,68
  814b08:	e0bfff15 	stw	r2,-4(fp)
  814b0c:	e0bfff17 	ldw	r2,-4(fp)
}
  814b10:	e037883a 	mov	sp,fp
  814b14:	dfc00117 	ldw	ra,4(sp)
  814b18:	df000017 	ldw	fp,0(sp)
  814b1c:	dec00204 	addi	sp,sp,8
  814b20:	f800283a 	ret

00814b24 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
  814b24:	defff204 	addi	sp,sp,-56
  814b28:	df000d15 	stw	fp,52(sp)
  814b2c:	df000d04 	addi	fp,sp,52
  814b30:	e17ffe15 	stw	r5,-8(fp)
  814b34:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
  814b38:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
  814b3c:	e0bffd03 	ldbu	r2,-12(fp)
  814b40:	10800570 	cmpltui	r2,r2,21
  814b44:	1000061e 	bne	r2,zero,814b60 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
  814b48:	e0bffd03 	ldbu	r2,-12(fp)
  814b4c:	10803fe0 	cmpeqi	r2,r2,255
  814b50:	1000031e 	bne	r2,zero,814b60 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
  814b54:	00800a84 	movi	r2,42
  814b58:	e0bfff15 	stw	r2,-4(fp)
  814b5c:	00006b06 	br	814d0c <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
  814b60:	e0bffe17 	ldw	r2,-8(fp)
  814b64:	1004c03a 	cmpne	r2,r2,zero
  814b68:	1000031e 	bne	r2,zero,814b78 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
  814b6c:	00800244 	movi	r2,9
  814b70:	e0bfff15 	stw	r2,-4(fp)
  814b74:	00006506 	br	814d0c <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
  814b78:	e0bffe17 	ldw	r2,-8(fp)
  814b7c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
  814b80:	e0bffe17 	ldw	r2,-8(fp)
  814b84:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814b88:	0005303a 	rdctl	r2,status
  814b8c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814b90:	e0fff717 	ldw	r3,-36(fp)
  814b94:	00bfff84 	movi	r2,-2
  814b98:	1884703a 	and	r2,r3,r2
  814b9c:	1001703a 	wrctl	status,r2
  
  return context;
  814ba0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
  814ba4:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
  814ba8:	e0bffd03 	ldbu	r2,-12(fp)
  814bac:	10803fd8 	cmpnei	r2,r2,255
  814bb0:	1000051e 	bne	r2,zero,814bc8 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
  814bb4:	008020b4 	movhi	r2,130
  814bb8:	10a98a04 	addi	r2,r2,-23000
  814bbc:	10800017 	ldw	r2,0(r2)
  814bc0:	10800c83 	ldbu	r2,50(r2)
  814bc4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  814bc8:	e0bffd03 	ldbu	r2,-12(fp)
  814bcc:	00c020b4 	movhi	r3,130
  814bd0:	18fe1004 	addi	r3,r3,-1984
  814bd4:	1085883a 	add	r2,r2,r2
  814bd8:	1085883a 	add	r2,r2,r2
  814bdc:	10c5883a 	add	r2,r2,r3
  814be0:	10800017 	ldw	r2,0(r2)
  814be4:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
  814be8:	e0bffc17 	ldw	r2,-16(fp)
  814bec:	1004c03a 	cmpne	r2,r2,zero
  814bf0:	1000071e 	bne	r2,zero,814c10 <OSTaskStkChk+0xec>
  814bf4:	e0bff817 	ldw	r2,-32(fp)
  814bf8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814bfc:	e0bff617 	ldw	r2,-40(fp)
  814c00:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  814c04:	008010c4 	movi	r2,67
  814c08:	e0bfff15 	stw	r2,-4(fp)
  814c0c:	00003f06 	br	814d0c <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  814c10:	e0bffc17 	ldw	r2,-16(fp)
  814c14:	10800058 	cmpnei	r2,r2,1
  814c18:	1000071e 	bne	r2,zero,814c38 <OSTaskStkChk+0x114>
  814c1c:	e0bff817 	ldw	r2,-32(fp)
  814c20:	e0bff515 	stw	r2,-44(fp)
  814c24:	e0bff517 	ldw	r2,-44(fp)
  814c28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  814c2c:	008010c4 	movi	r2,67
  814c30:	e0bfff15 	stw	r2,-4(fp)
  814c34:	00003506 	br	814d0c <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
  814c38:	e0bffc17 	ldw	r2,-16(fp)
  814c3c:	1080040b 	ldhu	r2,16(r2)
  814c40:	10bfffcc 	andi	r2,r2,65535
  814c44:	1080004c 	andi	r2,r2,1
  814c48:	1004c03a 	cmpne	r2,r2,zero
  814c4c:	1000071e 	bne	r2,zero,814c6c <OSTaskStkChk+0x148>
  814c50:	e0bff817 	ldw	r2,-32(fp)
  814c54:	e0bff415 	stw	r2,-48(fp)
  814c58:	e0bff417 	ldw	r2,-48(fp)
  814c5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
  814c60:	00801144 	movi	r2,69
  814c64:	e0bfff15 	stw	r2,-4(fp)
  814c68:	00002806 	br	814d0c <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
  814c6c:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
  814c70:	e0bffc17 	ldw	r2,-16(fp)
  814c74:	10800317 	ldw	r2,12(r2)
  814c78:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
  814c7c:	e0bffc17 	ldw	r2,-16(fp)
  814c80:	10800217 	ldw	r2,8(r2)
  814c84:	e0bffb15 	stw	r2,-20(fp)
  814c88:	e0bff817 	ldw	r2,-32(fp)
  814c8c:	e0bff315 	stw	r2,-52(fp)
  814c90:	e0bff317 	ldw	r2,-52(fp)
  814c94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  814c98:	00000306 	br	814ca8 <OSTaskStkChk+0x184>
        nfree++;
  814c9c:	e0bffa17 	ldw	r2,-24(fp)
  814ca0:	10800044 	addi	r2,r2,1
  814ca4:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
  814ca8:	e0bffb17 	ldw	r2,-20(fp)
  814cac:	10800017 	ldw	r2,0(r2)
  814cb0:	1005003a 	cmpeq	r2,r2,zero
  814cb4:	1007883a 	mov	r3,r2
  814cb8:	e0bffb17 	ldw	r2,-20(fp)
  814cbc:	10800104 	addi	r2,r2,4
  814cc0:	e0bffb15 	stw	r2,-20(fp)
  814cc4:	18803fcc 	andi	r2,r3,255
  814cc8:	1004c03a 	cmpne	r2,r2,zero
  814ccc:	103ff31e 	bne	r2,zero,814c9c <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
  814cd0:	e0bffa17 	ldw	r2,-24(fp)
  814cd4:	1085883a 	add	r2,r2,r2
  814cd8:	1085883a 	add	r2,r2,r2
  814cdc:	1007883a 	mov	r3,r2
  814ce0:	e0bffe17 	ldw	r2,-8(fp)
  814ce4:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
  814ce8:	e0fff917 	ldw	r3,-28(fp)
  814cec:	e0bffa17 	ldw	r2,-24(fp)
  814cf0:	1885c83a 	sub	r2,r3,r2
  814cf4:	1085883a 	add	r2,r2,r2
  814cf8:	1085883a 	add	r2,r2,r2
  814cfc:	1007883a 	mov	r3,r2
  814d00:	e0bffe17 	ldw	r2,-8(fp)
  814d04:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
  814d08:	e03fff15 	stw	zero,-4(fp)
  814d0c:	e0bfff17 	ldw	r2,-4(fp)
}
  814d10:	e037883a 	mov	sp,fp
  814d14:	df000017 	ldw	fp,0(sp)
  814d18:	dec00104 	addi	sp,sp,4
  814d1c:	f800283a 	ret

00814d20 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
  814d20:	defff404 	addi	sp,sp,-48
  814d24:	dfc00b15 	stw	ra,44(sp)
  814d28:	df000a15 	stw	fp,40(sp)
  814d2c:	df000a04 	addi	fp,sp,40
  814d30:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  814d34:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
  814d38:	e0bffe03 	ldbu	r2,-8(fp)
  814d3c:	10800518 	cmpnei	r2,r2,20
  814d40:	1000031e 	bne	r2,zero,814d50 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
  814d44:	008011c4 	movi	r2,71
  814d48:	e0bfff15 	stw	r2,-4(fp)
  814d4c:	00007906 	br	814f34 <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
  814d50:	e0bffe03 	ldbu	r2,-8(fp)
  814d54:	10800530 	cmpltui	r2,r2,20
  814d58:	1000061e 	bne	r2,zero,814d74 <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
  814d5c:	e0bffe03 	ldbu	r2,-8(fp)
  814d60:	10803fe0 	cmpeqi	r2,r2,255
  814d64:	1000031e 	bne	r2,zero,814d74 <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
  814d68:	00800a84 	movi	r2,42
  814d6c:	e0bfff15 	stw	r2,-4(fp)
  814d70:	00007006 	br	814f34 <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814d74:	0005303a 	rdctl	r2,status
  814d78:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814d7c:	e0fff917 	ldw	r3,-28(fp)
  814d80:	00bfff84 	movi	r2,-2
  814d84:	1884703a 	and	r2,r3,r2
  814d88:	1001703a 	wrctl	status,r2
  
  return context;
  814d8c:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
  814d90:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
  814d94:	e0bffe03 	ldbu	r2,-8(fp)
  814d98:	10803fd8 	cmpnei	r2,r2,255
  814d9c:	1000081e 	bne	r2,zero,814dc0 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
  814da0:	008020b4 	movhi	r2,130
  814da4:	10a98a04 	addi	r2,r2,-23000
  814da8:	10800017 	ldw	r2,0(r2)
  814dac:	10800c83 	ldbu	r2,50(r2)
  814db0:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
  814db4:	00800044 	movi	r2,1
  814db8:	e0bffd05 	stb	r2,-12(fp)
  814dbc:	00000b06 	br	814dec <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
  814dc0:	008020b4 	movhi	r2,130
  814dc4:	10a98a04 	addi	r2,r2,-23000
  814dc8:	10800017 	ldw	r2,0(r2)
  814dcc:	10800c83 	ldbu	r2,50(r2)
  814dd0:	10c03fcc 	andi	r3,r2,255
  814dd4:	e0bffe03 	ldbu	r2,-8(fp)
  814dd8:	1880031e 	bne	r3,r2,814de8 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
  814ddc:	00800044 	movi	r2,1
  814de0:	e0bffd05 	stb	r2,-12(fp)
  814de4:	00000106 	br	814dec <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
  814de8:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  814dec:	e0bffe03 	ldbu	r2,-8(fp)
  814df0:	00c020b4 	movhi	r3,130
  814df4:	18fe1004 	addi	r3,r3,-1984
  814df8:	1085883a 	add	r2,r2,r2
  814dfc:	1085883a 	add	r2,r2,r2
  814e00:	10c5883a 	add	r2,r2,r3
  814e04:	10800017 	ldw	r2,0(r2)
  814e08:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
  814e0c:	e0bffc17 	ldw	r2,-16(fp)
  814e10:	1004c03a 	cmpne	r2,r2,zero
  814e14:	1000071e 	bne	r2,zero,814e34 <OSTaskSuspend+0x114>
  814e18:	e0bffa17 	ldw	r2,-24(fp)
  814e1c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  814e20:	e0bff817 	ldw	r2,-32(fp)
  814e24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
  814e28:	00801204 	movi	r2,72
  814e2c:	e0bfff15 	stw	r2,-4(fp)
  814e30:	00004006 	br	814f34 <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
  814e34:	e0bffc17 	ldw	r2,-16(fp)
  814e38:	10800058 	cmpnei	r2,r2,1
  814e3c:	1000071e 	bne	r2,zero,814e5c <OSTaskSuspend+0x13c>
  814e40:	e0bffa17 	ldw	r2,-24(fp)
  814e44:	e0bff715 	stw	r2,-36(fp)
  814e48:	e0bff717 	ldw	r2,-36(fp)
  814e4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  814e50:	008010c4 	movi	r2,67
  814e54:	e0bfff15 	stw	r2,-4(fp)
  814e58:	00003606 	br	814f34 <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
  814e5c:	e0bffc17 	ldw	r2,-16(fp)
  814e60:	10800d03 	ldbu	r2,52(r2)
  814e64:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
  814e68:	e13ffb03 	ldbu	r4,-20(fp)
  814e6c:	e0fffb03 	ldbu	r3,-20(fp)
  814e70:	008020b4 	movhi	r2,130
  814e74:	10a98744 	addi	r2,r2,-23011
  814e78:	10c5883a 	add	r2,r2,r3
  814e7c:	10800003 	ldbu	r2,0(r2)
  814e80:	1007883a 	mov	r3,r2
  814e84:	e0bffc17 	ldw	r2,-16(fp)
  814e88:	10800d43 	ldbu	r2,53(r2)
  814e8c:	0084303a 	nor	r2,zero,r2
  814e90:	1884703a 	and	r2,r3,r2
  814e94:	1007883a 	mov	r3,r2
  814e98:	008020b4 	movhi	r2,130
  814e9c:	10a98744 	addi	r2,r2,-23011
  814ea0:	1105883a 	add	r2,r2,r4
  814ea4:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
  814ea8:	e0fffb03 	ldbu	r3,-20(fp)
  814eac:	008020b4 	movhi	r2,130
  814eb0:	10a98744 	addi	r2,r2,-23011
  814eb4:	10c5883a 	add	r2,r2,r3
  814eb8:	10800003 	ldbu	r2,0(r2)
  814ebc:	10803fcc 	andi	r2,r2,255
  814ec0:	1004c03a 	cmpne	r2,r2,zero
  814ec4:	10000c1e 	bne	r2,zero,814ef8 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
  814ec8:	e0bffc17 	ldw	r2,-16(fp)
  814ecc:	10800d83 	ldbu	r2,54(r2)
  814ed0:	0084303a 	nor	r2,zero,r2
  814ed4:	1007883a 	mov	r3,r2
  814ed8:	008020b4 	movhi	r2,130
  814edc:	10a98704 	addi	r2,r2,-23012
  814ee0:	10800003 	ldbu	r2,0(r2)
  814ee4:	1884703a 	and	r2,r3,r2
  814ee8:	1007883a 	mov	r3,r2
  814eec:	008020b4 	movhi	r2,130
  814ef0:	10a98704 	addi	r2,r2,-23012
  814ef4:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
  814ef8:	e0bffc17 	ldw	r2,-16(fp)
  814efc:	10800c03 	ldbu	r2,48(r2)
  814f00:	10800214 	ori	r2,r2,8
  814f04:	1007883a 	mov	r3,r2
  814f08:	e0bffc17 	ldw	r2,-16(fp)
  814f0c:	10c00c05 	stb	r3,48(r2)
  814f10:	e0bffa17 	ldw	r2,-24(fp)
  814f14:	e0bff615 	stw	r2,-40(fp)
  814f18:	e0bff617 	ldw	r2,-40(fp)
  814f1c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
  814f20:	e0bffd03 	ldbu	r2,-12(fp)
  814f24:	10800058 	cmpnei	r2,r2,1
  814f28:	1000011e 	bne	r2,zero,814f30 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
  814f2c:	080ee140 	call	80ee14 <OS_Sched>
    }
    return (OS_ERR_NONE);
  814f30:	e03fff15 	stw	zero,-4(fp)
  814f34:	e0bfff17 	ldw	r2,-4(fp)
}
  814f38:	e037883a 	mov	sp,fp
  814f3c:	dfc00117 	ldw	ra,4(sp)
  814f40:	df000017 	ldw	fp,0(sp)
  814f44:	dec00204 	addi	sp,sp,8
  814f48:	f800283a 	ret

00814f4c <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
  814f4c:	defff504 	addi	sp,sp,-44
  814f50:	dfc00a15 	stw	ra,40(sp)
  814f54:	df000915 	stw	fp,36(sp)
  814f58:	df000904 	addi	fp,sp,36
  814f5c:	e17ffe15 	stw	r5,-8(fp)
  814f60:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  814f64:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
  814f68:	e0bffd03 	ldbu	r2,-12(fp)
  814f6c:	10800570 	cmpltui	r2,r2,21
  814f70:	1000061e 	bne	r2,zero,814f8c <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
  814f74:	e0bffd03 	ldbu	r2,-12(fp)
  814f78:	10803fe0 	cmpeqi	r2,r2,255
  814f7c:	1000031e 	bne	r2,zero,814f8c <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
  814f80:	00800a84 	movi	r2,42
  814f84:	e0bfff15 	stw	r2,-4(fp)
  814f88:	00003b06 	br	815078 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
  814f8c:	e0bffe17 	ldw	r2,-8(fp)
  814f90:	1004c03a 	cmpne	r2,r2,zero
  814f94:	1000031e 	bne	r2,zero,814fa4 <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
  814f98:	00800244 	movi	r2,9
  814f9c:	e0bfff15 	stw	r2,-4(fp)
  814fa0:	00003506 	br	815078 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  814fa4:	0005303a 	rdctl	r2,status
  814fa8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  814fac:	e0fffa17 	ldw	r3,-24(fp)
  814fb0:	00bfff84 	movi	r2,-2
  814fb4:	1884703a 	and	r2,r3,r2
  814fb8:	1001703a 	wrctl	status,r2
  
  return context;
  814fbc:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
  814fc0:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
  814fc4:	e0bffd03 	ldbu	r2,-12(fp)
  814fc8:	10803fd8 	cmpnei	r2,r2,255
  814fcc:	1000051e 	bne	r2,zero,814fe4 <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
  814fd0:	008020b4 	movhi	r2,130
  814fd4:	10a98a04 	addi	r2,r2,-23000
  814fd8:	10800017 	ldw	r2,0(r2)
  814fdc:	10800c83 	ldbu	r2,50(r2)
  814fe0:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
  814fe4:	e0bffd03 	ldbu	r2,-12(fp)
  814fe8:	00c020b4 	movhi	r3,130
  814fec:	18fe1004 	addi	r3,r3,-1984
  814ff0:	1085883a 	add	r2,r2,r2
  814ff4:	1085883a 	add	r2,r2,r2
  814ff8:	10c5883a 	add	r2,r2,r3
  814ffc:	10800017 	ldw	r2,0(r2)
  815000:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
  815004:	e0bffc17 	ldw	r2,-16(fp)
  815008:	1004c03a 	cmpne	r2,r2,zero
  81500c:	1000071e 	bne	r2,zero,81502c <OSTaskQuery+0xe0>
  815010:	e0bffb17 	ldw	r2,-20(fp)
  815014:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815018:	e0bff917 	ldw	r2,-28(fp)
  81501c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
  815020:	00800a44 	movi	r2,41
  815024:	e0bfff15 	stw	r2,-4(fp)
  815028:	00001306 	br	815078 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
  81502c:	e0bffc17 	ldw	r2,-16(fp)
  815030:	10800058 	cmpnei	r2,r2,1
  815034:	1000071e 	bne	r2,zero,815054 <OSTaskQuery+0x108>
  815038:	e0bffb17 	ldw	r2,-20(fp)
  81503c:	e0bff815 	stw	r2,-32(fp)
  815040:	e0bff817 	ldw	r2,-32(fp)
  815044:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
  815048:	008010c4 	movi	r2,67
  81504c:	e0bfff15 	stw	r2,-4(fp)
  815050:	00000906 	br	815078 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
  815054:	e13ffe17 	ldw	r4,-8(fp)
  815058:	e17ffc17 	ldw	r5,-16(fp)
  81505c:	01801b04 	movi	r6,108
  815060:	080eda80 	call	80eda8 <OS_MemCopy>
  815064:	e0bffb17 	ldw	r2,-20(fp)
  815068:	e0bff715 	stw	r2,-36(fp)
  81506c:	e0bff717 	ldw	r2,-36(fp)
  815070:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
  815074:	e03fff15 	stw	zero,-4(fp)
  815078:	e0bfff17 	ldw	r2,-4(fp)
}
  81507c:	e037883a 	mov	sp,fp
  815080:	dfc00117 	ldw	ra,4(sp)
  815084:	df000017 	ldw	fp,0(sp)
  815088:	dec00204 	addi	sp,sp,8
  81508c:	f800283a 	ret

00815090 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
  815090:	defffc04 	addi	sp,sp,-16
  815094:	df000315 	stw	fp,12(sp)
  815098:	df000304 	addi	fp,sp,12
  81509c:	e13ffd15 	stw	r4,-12(fp)
  8150a0:	e17ffe15 	stw	r5,-8(fp)
  8150a4:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
  8150a8:	e0bfff0b 	ldhu	r2,-4(fp)
  8150ac:	1080004c 	andi	r2,r2,1
  8150b0:	10803fcc 	andi	r2,r2,255
  8150b4:	1005003a 	cmpeq	r2,r2,zero
  8150b8:	1000101e 	bne	r2,zero,8150fc <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
  8150bc:	e0bfff0b 	ldhu	r2,-4(fp)
  8150c0:	1080008c 	andi	r2,r2,2
  8150c4:	1005003a 	cmpeq	r2,r2,zero
  8150c8:	10000c1e 	bne	r2,zero,8150fc <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  8150cc:	00000806 	br	8150f0 <OS_TaskStkClr+0x60>
                size--;
  8150d0:	e0bffe17 	ldw	r2,-8(fp)
  8150d4:	10bfffc4 	addi	r2,r2,-1
  8150d8:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
  8150dc:	e0bffd17 	ldw	r2,-12(fp)
  8150e0:	10000015 	stw	zero,0(r2)
  8150e4:	e0bffd17 	ldw	r2,-12(fp)
  8150e8:	10800104 	addi	r2,r2,4
  8150ec:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
  8150f0:	e0bffe17 	ldw	r2,-8(fp)
  8150f4:	1004c03a 	cmpne	r2,r2,zero
  8150f8:	103ff51e 	bne	r2,zero,8150d0 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
  8150fc:	e037883a 	mov	sp,fp
  815100:	df000017 	ldw	fp,0(sp)
  815104:	dec00104 	addi	sp,sp,4
  815108:	f800283a 	ret

0081510c <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
  81510c:	defff904 	addi	sp,sp,-28
  815110:	dfc00615 	stw	ra,24(sp)
  815114:	df000515 	stw	fp,20(sp)
  815118:	df000504 	addi	fp,sp,20
  81511c:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815120:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  815124:	008020b4 	movhi	r2,130
  815128:	10a98904 	addi	r2,r2,-23004
  81512c:	10800003 	ldbu	r2,0(r2)
  815130:	10803fcc 	andi	r2,r2,255
  815134:	1004c03a 	cmpne	r2,r2,zero
  815138:	1000421e 	bne	r2,zero,815244 <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
  81513c:	e0bfff0b 	ldhu	r2,-4(fp)
  815140:	1005003a 	cmpeq	r2,r2,zero
  815144:	10003f1e 	bne	r2,zero,815244 <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815148:	0005303a 	rdctl	r2,status
  81514c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815150:	e0fffc17 	ldw	r3,-16(fp)
  815154:	00bfff84 	movi	r2,-2
  815158:	1884703a 	and	r2,r3,r2
  81515c:	1001703a 	wrctl	status,r2
  
  return context;
  815160:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
  815164:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
  815168:	008020b4 	movhi	r2,130
  81516c:	10a98a04 	addi	r2,r2,-23000
  815170:	10800017 	ldw	r2,0(r2)
  815174:	10800d03 	ldbu	r2,52(r2)
  815178:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
  81517c:	e13ffe03 	ldbu	r4,-8(fp)
  815180:	e0fffe03 	ldbu	r3,-8(fp)
  815184:	008020b4 	movhi	r2,130
  815188:	10a98744 	addi	r2,r2,-23011
  81518c:	10c5883a 	add	r2,r2,r3
  815190:	10800003 	ldbu	r2,0(r2)
  815194:	1007883a 	mov	r3,r2
  815198:	008020b4 	movhi	r2,130
  81519c:	10a98a04 	addi	r2,r2,-23000
  8151a0:	10800017 	ldw	r2,0(r2)
  8151a4:	10800d43 	ldbu	r2,53(r2)
  8151a8:	0084303a 	nor	r2,zero,r2
  8151ac:	1884703a 	and	r2,r3,r2
  8151b0:	1007883a 	mov	r3,r2
  8151b4:	008020b4 	movhi	r2,130
  8151b8:	10a98744 	addi	r2,r2,-23011
  8151bc:	1105883a 	add	r2,r2,r4
  8151c0:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
  8151c4:	e0fffe03 	ldbu	r3,-8(fp)
  8151c8:	008020b4 	movhi	r2,130
  8151cc:	10a98744 	addi	r2,r2,-23011
  8151d0:	10c5883a 	add	r2,r2,r3
  8151d4:	10800003 	ldbu	r2,0(r2)
  8151d8:	10803fcc 	andi	r2,r2,255
  8151dc:	1004c03a 	cmpne	r2,r2,zero
  8151e0:	10000e1e 	bne	r2,zero,81521c <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
  8151e4:	008020b4 	movhi	r2,130
  8151e8:	10a98a04 	addi	r2,r2,-23000
  8151ec:	10800017 	ldw	r2,0(r2)
  8151f0:	10800d83 	ldbu	r2,54(r2)
  8151f4:	0084303a 	nor	r2,zero,r2
  8151f8:	1007883a 	mov	r3,r2
  8151fc:	008020b4 	movhi	r2,130
  815200:	10a98704 	addi	r2,r2,-23012
  815204:	10800003 	ldbu	r2,0(r2)
  815208:	1884703a 	and	r2,r3,r2
  81520c:	1007883a 	mov	r3,r2
  815210:	008020b4 	movhi	r2,130
  815214:	10a98704 	addi	r2,r2,-23012
  815218:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
  81521c:	008020b4 	movhi	r2,130
  815220:	10a98a04 	addi	r2,r2,-23000
  815224:	10c00017 	ldw	r3,0(r2)
  815228:	e0bfff0b 	ldhu	r2,-4(fp)
  81522c:	18800b8d 	sth	r2,46(r3)
  815230:	e0bffd17 	ldw	r2,-12(fp)
  815234:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815238:	e0bffb17 	ldw	r2,-20(fp)
  81523c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
  815240:	080ee140 	call	80ee14 <OS_Sched>
    }
}
  815244:	e037883a 	mov	sp,fp
  815248:	dfc00117 	ldw	ra,4(sp)
  81524c:	df000017 	ldw	fp,0(sp)
  815250:	dec00204 	addi	sp,sp,8
  815254:	f800283a 	ret

00815258 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
  815258:	defff604 	addi	sp,sp,-40
  81525c:	dfc00915 	stw	ra,36(sp)
  815260:	df000815 	stw	fp,32(sp)
  815264:	dc000715 	stw	r16,28(sp)
  815268:	df000704 	addi	fp,sp,28
  81526c:	e13ffb05 	stb	r4,-20(fp)
  815270:	e17ffc05 	stb	r5,-16(fp)
  815274:	e1bffd05 	stb	r6,-12(fp)
  815278:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
  81527c:	008020b4 	movhi	r2,130
  815280:	10a98904 	addi	r2,r2,-23004
  815284:	10800003 	ldbu	r2,0(r2)
  815288:	10803fcc 	andi	r2,r2,255
  81528c:	1005003a 	cmpeq	r2,r2,zero
  815290:	1000031e 	bne	r2,zero,8152a0 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
  815294:	00801544 	movi	r2,85
  815298:	e0bfff15 	stw	r2,-4(fp)
  81529c:	00004b06 	br	8153cc <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
  8152a0:	e0bffb03 	ldbu	r2,-20(fp)
  8152a4:	1004c03a 	cmpne	r2,r2,zero
  8152a8:	10000c1e 	bne	r2,zero,8152dc <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
  8152ac:	e0bffc03 	ldbu	r2,-16(fp)
  8152b0:	1004c03a 	cmpne	r2,r2,zero
  8152b4:	1000091e 	bne	r2,zero,8152dc <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
  8152b8:	e0bffd03 	ldbu	r2,-12(fp)
  8152bc:	1004c03a 	cmpne	r2,r2,zero
  8152c0:	1000061e 	bne	r2,zero,8152dc <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
  8152c4:	e0bffe0b 	ldhu	r2,-8(fp)
  8152c8:	1004c03a 	cmpne	r2,r2,zero
  8152cc:	1000031e 	bne	r2,zero,8152dc <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
  8152d0:	00801504 	movi	r2,84
  8152d4:	e0bfff15 	stw	r2,-4(fp)
  8152d8:	00003c06 	br	8153cc <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
  8152dc:	e0bffc03 	ldbu	r2,-16(fp)
  8152e0:	10800f30 	cmpltui	r2,r2,60
  8152e4:	1000031e 	bne	r2,zero,8152f4 <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
  8152e8:	00801444 	movi	r2,81
  8152ec:	e0bfff15 	stw	r2,-4(fp)
  8152f0:	00003606 	br	8153cc <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
  8152f4:	e0bffd03 	ldbu	r2,-12(fp)
  8152f8:	10800f30 	cmpltui	r2,r2,60
  8152fc:	1000031e 	bne	r2,zero,81530c <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
  815300:	00801484 	movi	r2,82
  815304:	e0bfff15 	stw	r2,-4(fp)
  815308:	00003006 	br	8153cc <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
  81530c:	e0bffe0b 	ldhu	r2,-8(fp)
  815310:	1080fa30 	cmpltui	r2,r2,1000
  815314:	1000031e 	bne	r2,zero,815324 <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
  815318:	008014c4 	movi	r2,83
  81531c:	e0bfff15 	stw	r2,-4(fp)
  815320:	00002a06 	br	8153cc <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
  815324:	e13ffb03 	ldbu	r4,-20(fp)
  815328:	01438404 	movi	r5,3600
  81532c:	08019440 	call	801944 <__mulsi3>
  815330:	1021883a 	mov	r16,r2
  815334:	e13ffc03 	ldbu	r4,-16(fp)
  815338:	01400f04 	movi	r5,60
  81533c:	08019440 	call	801944 <__mulsi3>
  815340:	8087883a 	add	r3,r16,r2
  815344:	e0bffd03 	ldbu	r2,-12(fp)
  815348:	1889883a 	add	r4,r3,r2
  81534c:	0140fa04 	movi	r5,1000
  815350:	08019440 	call	801944 <__mulsi3>
  815354:	1021883a 	mov	r16,r2
  815358:	e13ffe0b 	ldhu	r4,-8(fp)
  81535c:	0140fa04 	movi	r5,1000
  815360:	08019440 	call	801944 <__mulsi3>
  815364:	1009883a 	mov	r4,r2
  815368:	0140fa04 	movi	r5,1000
  81536c:	08019340 	call	801934 <__udivsi3>
  815370:	8085883a 	add	r2,r16,r2
  815374:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
  815378:	e0bffa17 	ldw	r2,-24(fp)
  81537c:	1004d43a 	srli	r2,r2,16
  815380:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
  815384:	e0bffa17 	ldw	r2,-24(fp)
  815388:	10bfffcc 	andi	r2,r2,65535
  81538c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
  815390:	e0bffa17 	ldw	r2,-24(fp)
  815394:	113fffcc 	andi	r4,r2,65535
  815398:	081510c0 	call	81510c <OSTimeDly>
    while (loops > 0) {
  81539c:	00000706 	br	8153bc <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
  8153a0:	01200014 	movui	r4,32768
  8153a4:	081510c0 	call	81510c <OSTimeDly>
        OSTimeDly((INT16U)32768u);
  8153a8:	01200014 	movui	r4,32768
  8153ac:	081510c0 	call	81510c <OSTimeDly>
        loops--;
  8153b0:	e0bff90b 	ldhu	r2,-28(fp)
  8153b4:	10bfffc4 	addi	r2,r2,-1
  8153b8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
  8153bc:	e0bff90b 	ldhu	r2,-28(fp)
  8153c0:	1004c03a 	cmpne	r2,r2,zero
  8153c4:	103ff61e 	bne	r2,zero,8153a0 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
  8153c8:	e03fff15 	stw	zero,-4(fp)
  8153cc:	e0bfff17 	ldw	r2,-4(fp)
}
  8153d0:	e037883a 	mov	sp,fp
  8153d4:	dfc00217 	ldw	ra,8(sp)
  8153d8:	df000117 	ldw	fp,4(sp)
  8153dc:	dc000017 	ldw	r16,0(sp)
  8153e0:	dec00304 	addi	sp,sp,12
  8153e4:	f800283a 	ret

008153e8 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
  8153e8:	defff404 	addi	sp,sp,-48
  8153ec:	dfc00b15 	stw	ra,44(sp)
  8153f0:	df000a15 	stw	fp,40(sp)
  8153f4:	df000a04 	addi	fp,sp,40
  8153f8:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
  8153fc:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
  815400:	e0bffe03 	ldbu	r2,-8(fp)
  815404:	10800530 	cmpltui	r2,r2,20
  815408:	1000031e 	bne	r2,zero,815418 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
  81540c:	00800a84 	movi	r2,42
  815410:	e0bfff15 	stw	r2,-4(fp)
  815414:	00007206 	br	8155e0 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815418:	0005303a 	rdctl	r2,status
  81541c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815420:	e0fffb17 	ldw	r3,-20(fp)
  815424:	00bfff84 	movi	r2,-2
  815428:	1884703a 	and	r2,r3,r2
  81542c:	1001703a 	wrctl	status,r2
  
  return context;
  815430:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
  815434:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
  815438:	e0bffe03 	ldbu	r2,-8(fp)
  81543c:	00c020b4 	movhi	r3,130
  815440:	18fe1004 	addi	r3,r3,-1984
  815444:	1085883a 	add	r2,r2,r2
  815448:	1085883a 	add	r2,r2,r2
  81544c:	10c5883a 	add	r2,r2,r3
  815450:	10800017 	ldw	r2,0(r2)
  815454:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
  815458:	e0bffd17 	ldw	r2,-12(fp)
  81545c:	1004c03a 	cmpne	r2,r2,zero
  815460:	1000071e 	bne	r2,zero,815480 <OSTimeDlyResume+0x98>
  815464:	e0bffc17 	ldw	r2,-16(fp)
  815468:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81546c:	e0bffa17 	ldw	r2,-24(fp)
  815470:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  815474:	008010c4 	movi	r2,67
  815478:	e0bfff15 	stw	r2,-4(fp)
  81547c:	00005806 	br	8155e0 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
  815480:	e0bffd17 	ldw	r2,-12(fp)
  815484:	10800058 	cmpnei	r2,r2,1
  815488:	1000071e 	bne	r2,zero,8154a8 <OSTimeDlyResume+0xc0>
  81548c:	e0bffc17 	ldw	r2,-16(fp)
  815490:	e0bff915 	stw	r2,-28(fp)
  815494:	e0bff917 	ldw	r2,-28(fp)
  815498:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
  81549c:	008010c4 	movi	r2,67
  8154a0:	e0bfff15 	stw	r2,-4(fp)
  8154a4:	00004e06 	br	8155e0 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
  8154a8:	e0bffd17 	ldw	r2,-12(fp)
  8154ac:	10800b8b 	ldhu	r2,46(r2)
  8154b0:	10bfffcc 	andi	r2,r2,65535
  8154b4:	1004c03a 	cmpne	r2,r2,zero
  8154b8:	1000071e 	bne	r2,zero,8154d8 <OSTimeDlyResume+0xf0>
  8154bc:	e0bffc17 	ldw	r2,-16(fp)
  8154c0:	e0bff815 	stw	r2,-32(fp)
  8154c4:	e0bff817 	ldw	r2,-32(fp)
  8154c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
  8154cc:	00801404 	movi	r2,80
  8154d0:	e0bfff15 	stw	r2,-4(fp)
  8154d4:	00004206 	br	8155e0 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
  8154d8:	e0bffd17 	ldw	r2,-12(fp)
  8154dc:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
  8154e0:	e0bffd17 	ldw	r2,-12(fp)
  8154e4:	10800c03 	ldbu	r2,48(r2)
  8154e8:	10803fcc 	andi	r2,r2,255
  8154ec:	10800dcc 	andi	r2,r2,55
  8154f0:	1005003a 	cmpeq	r2,r2,zero
  8154f4:	10000b1e 	bne	r2,zero,815524 <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
  8154f8:	e0bffd17 	ldw	r2,-12(fp)
  8154fc:	10c00c03 	ldbu	r3,48(r2)
  815500:	00bff204 	movi	r2,-56
  815504:	1884703a 	and	r2,r3,r2
  815508:	1007883a 	mov	r3,r2
  81550c:	e0bffd17 	ldw	r2,-12(fp)
  815510:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
  815514:	e0fffd17 	ldw	r3,-12(fp)
  815518:	00800044 	movi	r2,1
  81551c:	18800c45 	stb	r2,49(r3)
  815520:	00000206 	br	81552c <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
  815524:	e0bffd17 	ldw	r2,-12(fp)
  815528:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
  81552c:	e0bffd17 	ldw	r2,-12(fp)
  815530:	10800c03 	ldbu	r2,48(r2)
  815534:	10803fcc 	andi	r2,r2,255
  815538:	1080020c 	andi	r2,r2,8
  81553c:	1004c03a 	cmpne	r2,r2,zero
  815540:	1000221e 	bne	r2,zero,8155cc <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
  815544:	e0bffd17 	ldw	r2,-12(fp)
  815548:	10c00d83 	ldbu	r3,54(r2)
  81554c:	008020b4 	movhi	r2,130
  815550:	10a98704 	addi	r2,r2,-23012
  815554:	10800003 	ldbu	r2,0(r2)
  815558:	1884b03a 	or	r2,r3,r2
  81555c:	1007883a 	mov	r3,r2
  815560:	008020b4 	movhi	r2,130
  815564:	10a98704 	addi	r2,r2,-23012
  815568:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
  81556c:	e0bffd17 	ldw	r2,-12(fp)
  815570:	10800d03 	ldbu	r2,52(r2)
  815574:	11003fcc 	andi	r4,r2,255
  815578:	e0bffd17 	ldw	r2,-12(fp)
  81557c:	10800d03 	ldbu	r2,52(r2)
  815580:	10c03fcc 	andi	r3,r2,255
  815584:	008020b4 	movhi	r2,130
  815588:	10a98744 	addi	r2,r2,-23011
  81558c:	10c5883a 	add	r2,r2,r3
  815590:	10c00003 	ldbu	r3,0(r2)
  815594:	e0bffd17 	ldw	r2,-12(fp)
  815598:	10800d43 	ldbu	r2,53(r2)
  81559c:	1884b03a 	or	r2,r3,r2
  8155a0:	1007883a 	mov	r3,r2
  8155a4:	008020b4 	movhi	r2,130
  8155a8:	10a98744 	addi	r2,r2,-23011
  8155ac:	1105883a 	add	r2,r2,r4
  8155b0:	10c00005 	stb	r3,0(r2)
  8155b4:	e0bffc17 	ldw	r2,-16(fp)
  8155b8:	e0bff715 	stw	r2,-36(fp)
  8155bc:	e0bff717 	ldw	r2,-36(fp)
  8155c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
  8155c4:	080ee140 	call	80ee14 <OS_Sched>
  8155c8:	00000406 	br	8155dc <OSTimeDlyResume+0x1f4>
  8155cc:	e0bffc17 	ldw	r2,-16(fp)
  8155d0:	e0bff615 	stw	r2,-40(fp)
  8155d4:	e0bff617 	ldw	r2,-40(fp)
  8155d8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
  8155dc:	e03fff15 	stw	zero,-4(fp)
  8155e0:	e0bfff17 	ldw	r2,-4(fp)
}
  8155e4:	e037883a 	mov	sp,fp
  8155e8:	dfc00117 	ldw	ra,4(sp)
  8155ec:	df000017 	ldw	fp,0(sp)
  8155f0:	dec00204 	addi	sp,sp,8
  8155f4:	f800283a 	ret

008155f8 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
  8155f8:	defffb04 	addi	sp,sp,-20
  8155fc:	df000415 	stw	fp,16(sp)
  815600:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  815604:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815608:	0005303a 	rdctl	r2,status
  81560c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815610:	e0fffd17 	ldw	r3,-12(fp)
  815614:	00bfff84 	movi	r2,-2
  815618:	1884703a 	and	r2,r3,r2
  81561c:	1001703a 	wrctl	status,r2
  
  return context;
  815620:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  815624:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
  815628:	008020b4 	movhi	r2,130
  81562c:	10a98b04 	addi	r2,r2,-22996
  815630:	10800017 	ldw	r2,0(r2)
  815634:	e0bfff15 	stw	r2,-4(fp)
  815638:	e0bffe17 	ldw	r2,-8(fp)
  81563c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  815640:	e0bffc17 	ldw	r2,-16(fp)
  815644:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
  815648:	e0bfff17 	ldw	r2,-4(fp)
}
  81564c:	e037883a 	mov	sp,fp
  815650:	df000017 	ldw	fp,0(sp)
  815654:	dec00104 	addi	sp,sp,4
  815658:	f800283a 	ret

0081565c <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
  81565c:	defffb04 	addi	sp,sp,-20
  815660:	df000415 	stw	fp,16(sp)
  815664:	df000404 	addi	fp,sp,16
  815668:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
  81566c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  815670:	0005303a 	rdctl	r2,status
  815674:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  815678:	e0fffd17 	ldw	r3,-12(fp)
  81567c:	00bfff84 	movi	r2,-2
  815680:	1884703a 	and	r2,r3,r2
  815684:	1001703a 	wrctl	status,r2
  
  return context;
  815688:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
  81568c:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
  815690:	00c020b4 	movhi	r3,130
  815694:	18e98b04 	addi	r3,r3,-22996
  815698:	e0bfff17 	ldw	r2,-4(fp)
  81569c:	18800015 	stw	r2,0(r3)
  8156a0:	e0bffe17 	ldw	r2,-8(fp)
  8156a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8156a8:	e0bffc17 	ldw	r2,-16(fp)
  8156ac:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
  8156b0:	e037883a 	mov	sp,fp
  8156b4:	df000017 	ldw	fp,0(sp)
  8156b8:	dec00104 	addi	sp,sp,4
  8156bc:	f800283a 	ret

008156c0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  8156c0:	defffd04 	addi	sp,sp,-12
  8156c4:	dfc00215 	stw	ra,8(sp)
  8156c8:	df000115 	stw	fp,4(sp)
  8156cc:	df000104 	addi	fp,sp,4
  8156d0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_0, nios2_0);
  8156d4:	08179240 	call	817924 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  8156d8:	00800044 	movi	r2,1
  8156dc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  8156e0:	e037883a 	mov	sp,fp
  8156e4:	dfc00117 	ldw	ra,4(sp)
  8156e8:	df000017 	ldw	fp,0(sp)
  8156ec:	dec00204 	addi	sp,sp,8
  8156f0:	f800283a 	ret

008156f4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  8156f4:	defffe04 	addi	sp,sp,-8
  8156f8:	dfc00115 	stw	ra,4(sp)
  8156fc:	df000015 	stw	fp,0(sp)
  815700:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  815704:	01006474 	movhi	r4,401
  815708:	21240804 	addi	r4,r4,-28640
  81570c:	000b883a 	mov	r5,zero
  815710:	000d883a 	mov	r6,zero
  815714:	01c0fa04 	movi	r7,1000
  815718:	08165780 	call	816578 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
  81571c:	010020b4 	movhi	r4,130
  815720:	21251504 	addi	r4,r4,-27564
  815724:	000b883a 	mov	r5,zero
  815728:	01800044 	movi	r6,1
  81572c:	08158f40 	call	8158f4 <altera_avalon_jtag_uart_init>
  815730:	010020b4 	movhi	r4,130
  815734:	21250b04 	addi	r4,r4,-27604
  815738:	08157740 	call	815774 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
  81573c:	010020b4 	movhi	r4,130
  815740:	21292604 	addi	r4,r4,-23400
  815744:	08166b80 	call	8166b8 <alt_up_character_lcd_init>
  815748:	010020b4 	movhi	r4,130
  81574c:	21292604 	addi	r4,r4,-23400
  815750:	08157740 	call	815774 <alt_dev_reg>
    ALTERA_UP_AVALON_DE0_NANO_ADC_INIT ( DE0_NANO_ADC_0, de0_nano_adc_0);
  815754:	010020b4 	movhi	r4,130
  815758:	21293104 	addi	r4,r4,-23356
  81575c:	08157740 	call	815774 <alt_dev_reg>
}
  815760:	e037883a 	mov	sp,fp
  815764:	dfc00117 	ldw	ra,4(sp)
  815768:	df000017 	ldw	fp,0(sp)
  81576c:	dec00204 	addi	sp,sp,8
  815770:	f800283a 	ret

00815774 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  815774:	defffd04 	addi	sp,sp,-12
  815778:	dfc00215 	stw	ra,8(sp)
  81577c:	df000115 	stw	fp,4(sp)
  815780:	df000104 	addi	fp,sp,4
  815784:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  815788:	e13fff17 	ldw	r4,-4(fp)
  81578c:	014020b4 	movhi	r5,130
  815790:	29694404 	addi	r5,r5,-23280
  815794:	0816e0c0 	call	816e0c <alt_dev_llist_insert>
}
  815798:	e037883a 	mov	sp,fp
  81579c:	dfc00117 	ldw	ra,4(sp)
  8157a0:	df000017 	ldw	fp,0(sp)
  8157a4:	dec00204 	addi	sp,sp,8
  8157a8:	f800283a 	ret

008157ac <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  8157ac:	defffa04 	addi	sp,sp,-24
  8157b0:	dfc00515 	stw	ra,20(sp)
  8157b4:	df000415 	stw	fp,16(sp)
  8157b8:	df000404 	addi	fp,sp,16
  8157bc:	e13ffd15 	stw	r4,-12(fp)
  8157c0:	e17ffe15 	stw	r5,-8(fp)
  8157c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  8157c8:	e0bffd17 	ldw	r2,-12(fp)
  8157cc:	10800017 	ldw	r2,0(r2)
  8157d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  8157d4:	e0bffc17 	ldw	r2,-16(fp)
  8157d8:	11000a04 	addi	r4,r2,40
  8157dc:	e0bffd17 	ldw	r2,-12(fp)
  8157e0:	11c00217 	ldw	r7,8(r2)
  8157e4:	e17ffe17 	ldw	r5,-8(fp)
  8157e8:	e1bfff17 	ldw	r6,-4(fp)
  8157ec:	0815f6c0 	call	815f6c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  8157f0:	e037883a 	mov	sp,fp
  8157f4:	dfc00117 	ldw	ra,4(sp)
  8157f8:	df000017 	ldw	fp,0(sp)
  8157fc:	dec00204 	addi	sp,sp,8
  815800:	f800283a 	ret

00815804 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  815804:	defffa04 	addi	sp,sp,-24
  815808:	dfc00515 	stw	ra,20(sp)
  81580c:	df000415 	stw	fp,16(sp)
  815810:	df000404 	addi	fp,sp,16
  815814:	e13ffd15 	stw	r4,-12(fp)
  815818:	e17ffe15 	stw	r5,-8(fp)
  81581c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  815820:	e0bffd17 	ldw	r2,-12(fp)
  815824:	10800017 	ldw	r2,0(r2)
  815828:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  81582c:	e0bffc17 	ldw	r2,-16(fp)
  815830:	11000a04 	addi	r4,r2,40
  815834:	e0bffd17 	ldw	r2,-12(fp)
  815838:	11c00217 	ldw	r7,8(r2)
  81583c:	e17ffe17 	ldw	r5,-8(fp)
  815840:	e1bfff17 	ldw	r6,-4(fp)
  815844:	081622c0 	call	81622c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  815848:	e037883a 	mov	sp,fp
  81584c:	dfc00117 	ldw	ra,4(sp)
  815850:	df000017 	ldw	fp,0(sp)
  815854:	dec00204 	addi	sp,sp,8
  815858:	f800283a 	ret

0081585c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  81585c:	defffc04 	addi	sp,sp,-16
  815860:	dfc00315 	stw	ra,12(sp)
  815864:	df000215 	stw	fp,8(sp)
  815868:	df000204 	addi	fp,sp,8
  81586c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  815870:	e0bfff17 	ldw	r2,-4(fp)
  815874:	10800017 	ldw	r2,0(r2)
  815878:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  81587c:	e0bffe17 	ldw	r2,-8(fp)
  815880:	11000a04 	addi	r4,r2,40
  815884:	e0bfff17 	ldw	r2,-4(fp)
  815888:	11400217 	ldw	r5,8(r2)
  81588c:	0815e040 	call	815e04 <altera_avalon_jtag_uart_close>
}
  815890:	e037883a 	mov	sp,fp
  815894:	dfc00117 	ldw	ra,4(sp)
  815898:	df000017 	ldw	fp,0(sp)
  81589c:	dec00204 	addi	sp,sp,8
  8158a0:	f800283a 	ret

008158a4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  8158a4:	defffa04 	addi	sp,sp,-24
  8158a8:	dfc00515 	stw	ra,20(sp)
  8158ac:	df000415 	stw	fp,16(sp)
  8158b0:	df000404 	addi	fp,sp,16
  8158b4:	e13ffd15 	stw	r4,-12(fp)
  8158b8:	e17ffe15 	stw	r5,-8(fp)
  8158bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  8158c0:	e0bffd17 	ldw	r2,-12(fp)
  8158c4:	10800017 	ldw	r2,0(r2)
  8158c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  8158cc:	e0bffc17 	ldw	r2,-16(fp)
  8158d0:	11000a04 	addi	r4,r2,40
  8158d4:	e17ffe17 	ldw	r5,-8(fp)
  8158d8:	e1bfff17 	ldw	r6,-4(fp)
  8158dc:	0815e780 	call	815e78 <altera_avalon_jtag_uart_ioctl>
}
  8158e0:	e037883a 	mov	sp,fp
  8158e4:	dfc00117 	ldw	ra,4(sp)
  8158e8:	df000017 	ldw	fp,0(sp)
  8158ec:	dec00204 	addi	sp,sp,8
  8158f0:	f800283a 	ret

008158f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  8158f4:	defff404 	addi	sp,sp,-48
  8158f8:	dfc00b15 	stw	ra,44(sp)
  8158fc:	df000a15 	stw	fp,40(sp)
  815900:	df000a04 	addi	fp,sp,40
  815904:	e13ffd15 	stw	r4,-12(fp)
  815908:	e17ffe15 	stw	r5,-8(fp)
  81590c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  815910:	e0bffd17 	ldw	r2,-12(fp)
  815914:	10800c04 	addi	r2,r2,48
  815918:	e0bffb15 	stw	r2,-20(fp)
  81591c:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
  815920:	e13ffc0b 	ldhu	r4,-16(fp)
  815924:	e17ffc84 	addi	r5,fp,-14
  815928:	080f9bc0 	call	80f9bc <OSFlagCreate>
  81592c:	1007883a 	mov	r3,r2
  815930:	e0bffb17 	ldw	r2,-20(fp)
  815934:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
  815938:	e0bffd17 	ldw	r2,-12(fp)
  81593c:	10800a04 	addi	r2,r2,40
  815940:	e0bff915 	stw	r2,-28(fp)
  815944:	00800044 	movi	r2,1
  815948:	e0bffa0d 	sth	r2,-24(fp)
  81594c:	e13ffa0b 	ldhu	r4,-24(fp)
  815950:	0812bc40 	call	812bc4 <OSSemCreate>
  815954:	1007883a 	mov	r3,r2
  815958:	e0bff917 	ldw	r2,-28(fp)
  81595c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
  815960:	e0bffd17 	ldw	r2,-12(fp)
  815964:	10800b04 	addi	r2,r2,44
  815968:	e0bff715 	stw	r2,-36(fp)
  81596c:	00800044 	movi	r2,1
  815970:	e0bff80d 	sth	r2,-32(fp)
  815974:	e13ff80b 	ldhu	r4,-32(fp)
  815978:	0812bc40 	call	812bc4 <OSSemCreate>
  81597c:	1007883a 	mov	r3,r2
  815980:	e0bff717 	ldw	r2,-36(fp)
  815984:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  815988:	e0fffd17 	ldw	r3,-12(fp)
  81598c:	00800044 	movi	r2,1
  815990:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  815994:	e0bffd17 	ldw	r2,-12(fp)
  815998:	10800017 	ldw	r2,0(r2)
  81599c:	11000104 	addi	r4,r2,4
  8159a0:	e0bffd17 	ldw	r2,-12(fp)
  8159a4:	10800817 	ldw	r2,32(r2)
  8159a8:	1007883a 	mov	r3,r2
  8159ac:	2005883a 	mov	r2,r4
  8159b0:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  8159b4:	e13ffe17 	ldw	r4,-8(fp)
  8159b8:	e17fff17 	ldw	r5,-4(fp)
  8159bc:	d8000015 	stw	zero,0(sp)
  8159c0:	01802074 	movhi	r6,129
  8159c4:	31968b04 	addi	r6,r6,23084
  8159c8:	e1fffd17 	ldw	r7,-12(fp)
  8159cc:	081707c0 	call	81707c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  8159d0:	e0bffd17 	ldw	r2,-12(fp)
  8159d4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  8159d8:	e0bffd17 	ldw	r2,-12(fp)
  8159dc:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8159e0:	008020b4 	movhi	r2,130
  8159e4:	10a99004 	addi	r2,r2,-22976
  8159e8:	10800017 	ldw	r2,0(r2)
  8159ec:	100b883a 	mov	r5,r2
  8159f0:	01802074 	movhi	r6,129
  8159f4:	31973c04 	addi	r6,r6,23792
  8159f8:	e1fffd17 	ldw	r7,-12(fp)
  8159fc:	0816cb80 	call	816cb8 <alt_alarm_start>
  815a00:	1004403a 	cmpge	r2,r2,zero
  815a04:	1000041e 	bne	r2,zero,815a18 <altera_avalon_jtag_uart_init+0x124>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  815a08:	e0fffd17 	ldw	r3,-12(fp)
  815a0c:	00a00034 	movhi	r2,32768
  815a10:	10bfffc4 	addi	r2,r2,-1
  815a14:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  815a18:	e037883a 	mov	sp,fp
  815a1c:	dfc00117 	ldw	ra,4(sp)
  815a20:	df000017 	ldw	fp,0(sp)
  815a24:	dec00204 	addi	sp,sp,8
  815a28:	f800283a 	ret

00815a2c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  815a2c:	defff204 	addi	sp,sp,-56
  815a30:	dfc00d15 	stw	ra,52(sp)
  815a34:	df000c15 	stw	fp,48(sp)
  815a38:	df000c04 	addi	fp,sp,48
  815a3c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  815a40:	e0bfff17 	ldw	r2,-4(fp)
  815a44:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
  815a48:	e0bffd17 	ldw	r2,-12(fp)
  815a4c:	10800017 	ldw	r2,0(r2)
  815a50:	e0bffc15 	stw	r2,-16(fp)
  815a54:	00000006 	br	815a58 <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  815a58:	e0bffc17 	ldw	r2,-16(fp)
  815a5c:	10800104 	addi	r2,r2,4
  815a60:	10800037 	ldwio	r2,0(r2)
  815a64:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  815a68:	e0bffb17 	ldw	r2,-20(fp)
  815a6c:	1080c00c 	andi	r2,r2,768
  815a70:	1005003a 	cmpeq	r2,r2,zero
  815a74:	1000991e 	bne	r2,zero,815cdc <altera_avalon_jtag_uart_irq+0x2b0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  815a78:	e0bffb17 	ldw	r2,-20(fp)
  815a7c:	1080400c 	andi	r2,r2,256
  815a80:	1005003a 	cmpeq	r2,r2,zero
  815a84:	1000481e 	bne	r2,zero,815ba8 <altera_avalon_jtag_uart_irq+0x17c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  815a88:	00800074 	movhi	r2,1
  815a8c:	e0bffa15 	stw	r2,-24(fp)
  815a90:	00000006 	br	815a94 <altera_avalon_jtag_uart_irq+0x68>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  815a94:	e0bffd17 	ldw	r2,-12(fp)
  815a98:	10800d17 	ldw	r2,52(r2)
  815a9c:	10800044 	addi	r2,r2,1
  815aa0:	1081ffcc 	andi	r2,r2,2047
  815aa4:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
  815aa8:	e0bffd17 	ldw	r2,-12(fp)
  815aac:	10c00e17 	ldw	r3,56(r2)
  815ab0:	e0bff917 	ldw	r2,-28(fp)
  815ab4:	18802826 	beq	r3,r2,815b58 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  815ab8:	e0bffc17 	ldw	r2,-16(fp)
  815abc:	10800037 	ldwio	r2,0(r2)
  815ac0:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  815ac4:	e0bffa17 	ldw	r2,-24(fp)
  815ac8:	10a0000c 	andi	r2,r2,32768
  815acc:	1005003a 	cmpeq	r2,r2,zero
  815ad0:	1000211e 	bne	r2,zero,815b58 <altera_avalon_jtag_uart_irq+0x12c>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  815ad4:	e0bffd17 	ldw	r2,-12(fp)
  815ad8:	10c00d17 	ldw	r3,52(r2)
  815adc:	e0bffa17 	ldw	r2,-24(fp)
  815ae0:	1009883a 	mov	r4,r2
  815ae4:	e0bffd17 	ldw	r2,-12(fp)
  815ae8:	1885883a 	add	r2,r3,r2
  815aec:	10801104 	addi	r2,r2,68
  815af0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  815af4:	e0bffd17 	ldw	r2,-12(fp)
  815af8:	10800d17 	ldw	r2,52(r2)
  815afc:	10800044 	addi	r2,r2,1
  815b00:	10c1ffcc 	andi	r3,r2,2047
  815b04:	e0bffd17 	ldw	r2,-12(fp)
  815b08:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
  815b0c:	e0bffd17 	ldw	r2,-12(fp)
  815b10:	10800c17 	ldw	r2,48(r2)
  815b14:	e0bff615 	stw	r2,-40(fp)
  815b18:	00800044 	movi	r2,1
  815b1c:	e0bff70d 	sth	r2,-36(fp)
  815b20:	00800044 	movi	r2,1
  815b24:	e0bff785 	stb	r2,-34(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  815b28:	008020b4 	movhi	r2,130
  815b2c:	10a97b44 	addi	r2,r2,-23059
  815b30:	10800003 	ldbu	r2,0(r2)
  815b34:	10803fcc 	andi	r2,r2,255
  815b38:	1005003a 	cmpeq	r2,r2,zero
  815b3c:	103fd51e 	bne	r2,zero,815a94 <altera_avalon_jtag_uart_irq+0x68>
  {
    OSFlagPost (group, flags, opt, &err);
  815b40:	e17ff70b 	ldhu	r5,-36(fp)
  815b44:	e1bff783 	ldbu	r6,-34(fp)
  815b48:	e1fffe04 	addi	r7,fp,-8
  815b4c:	e13ff617 	ldw	r4,-40(fp)
  815b50:	08106e40 	call	8106e4 <OSFlagPost>
    return err;
  815b54:	003fcf06 	br	815a94 <altera_avalon_jtag_uart_irq+0x68>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  815b58:	e0bffa17 	ldw	r2,-24(fp)
  815b5c:	10bfffec 	andhi	r2,r2,65535
  815b60:	1005003a 	cmpeq	r2,r2,zero
  815b64:	1000101e 	bne	r2,zero,815ba8 <altera_avalon_jtag_uart_irq+0x17c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  815b68:	e0bffd17 	ldw	r2,-12(fp)
  815b6c:	10c00817 	ldw	r3,32(r2)
  815b70:	00bfff84 	movi	r2,-2
  815b74:	1886703a 	and	r3,r3,r2
  815b78:	e0bffd17 	ldw	r2,-12(fp)
  815b7c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  815b80:	e0bffc17 	ldw	r2,-16(fp)
  815b84:	11000104 	addi	r4,r2,4
  815b88:	e0bffd17 	ldw	r2,-12(fp)
  815b8c:	10800817 	ldw	r2,32(r2)
  815b90:	1007883a 	mov	r3,r2
  815b94:	2005883a 	mov	r2,r4
  815b98:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  815b9c:	e0bffc17 	ldw	r2,-16(fp)
  815ba0:	10800104 	addi	r2,r2,4
  815ba4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  815ba8:	e0bffb17 	ldw	r2,-20(fp)
  815bac:	1080800c 	andi	r2,r2,512
  815bb0:	1005003a 	cmpeq	r2,r2,zero
  815bb4:	103fa81e 	bne	r2,zero,815a58 <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  815bb8:	e0bffb17 	ldw	r2,-20(fp)
  815bbc:	10bfffec 	andhi	r2,r2,65535
  815bc0:	1004d43a 	srli	r2,r2,16
  815bc4:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  815bc8:	00002706 	br	815c68 <altera_avalon_jtag_uart_irq+0x23c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  815bcc:	e13ffc17 	ldw	r4,-16(fp)
  815bd0:	e0bffd17 	ldw	r2,-12(fp)
  815bd4:	10c01017 	ldw	r3,64(r2)
  815bd8:	e0bffd17 	ldw	r2,-12(fp)
  815bdc:	1885883a 	add	r2,r3,r2
  815be0:	10821104 	addi	r2,r2,2116
  815be4:	10800003 	ldbu	r2,0(r2)
  815be8:	10c03fcc 	andi	r3,r2,255
  815bec:	18c0201c 	xori	r3,r3,128
  815bf0:	18ffe004 	addi	r3,r3,-128
  815bf4:	2005883a 	mov	r2,r4
  815bf8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  815bfc:	e0bffd17 	ldw	r2,-12(fp)
  815c00:	10801017 	ldw	r2,64(r2)
  815c04:	10800044 	addi	r2,r2,1
  815c08:	10c1ffcc 	andi	r3,r2,2047
  815c0c:	e0bffd17 	ldw	r2,-12(fp)
  815c10:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
  815c14:	e0bffd17 	ldw	r2,-12(fp)
  815c18:	10800c17 	ldw	r2,48(r2)
  815c1c:	e0bff415 	stw	r2,-48(fp)
  815c20:	00800084 	movi	r2,2
  815c24:	e0bff50d 	sth	r2,-44(fp)
  815c28:	00800044 	movi	r2,1
  815c2c:	e0bff585 	stb	r2,-42(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  815c30:	008020b4 	movhi	r2,130
  815c34:	10a97b44 	addi	r2,r2,-23059
  815c38:	10800003 	ldbu	r2,0(r2)
  815c3c:	10803fcc 	andi	r2,r2,255
  815c40:	1005003a 	cmpeq	r2,r2,zero
  815c44:	1000051e 	bne	r2,zero,815c5c <altera_avalon_jtag_uart_irq+0x230>
  {
    OSFlagPost (group, flags, opt, &err);
  815c48:	e17ff50b 	ldhu	r5,-44(fp)
  815c4c:	e1bff583 	ldbu	r6,-42(fp)
  815c50:	e1fffe44 	addi	r7,fp,-7
  815c54:	e13ff417 	ldw	r4,-48(fp)
  815c58:	08106e40 	call	8106e4 <OSFlagPost>

        space--;
  815c5c:	e0bff817 	ldw	r2,-32(fp)
  815c60:	10bfffc4 	addi	r2,r2,-1
  815c64:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  815c68:	e0bff817 	ldw	r2,-32(fp)
  815c6c:	1005003a 	cmpeq	r2,r2,zero
  815c70:	1000051e 	bne	r2,zero,815c88 <altera_avalon_jtag_uart_irq+0x25c>
  815c74:	e0bffd17 	ldw	r2,-12(fp)
  815c78:	10c01017 	ldw	r3,64(r2)
  815c7c:	e0bffd17 	ldw	r2,-12(fp)
  815c80:	10800f17 	ldw	r2,60(r2)
  815c84:	18bfd11e 	bne	r3,r2,815bcc <altera_avalon_jtag_uart_irq+0x1a0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  815c88:	e0bff817 	ldw	r2,-32(fp)
  815c8c:	1005003a 	cmpeq	r2,r2,zero
  815c90:	103f711e 	bne	r2,zero,815a58 <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  815c94:	e0bffd17 	ldw	r2,-12(fp)
  815c98:	10c00817 	ldw	r3,32(r2)
  815c9c:	00bfff44 	movi	r2,-3
  815ca0:	1886703a 	and	r3,r3,r2
  815ca4:	e0bffd17 	ldw	r2,-12(fp)
  815ca8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  815cac:	e0bffd17 	ldw	r2,-12(fp)
  815cb0:	10800017 	ldw	r2,0(r2)
  815cb4:	11000104 	addi	r4,r2,4
  815cb8:	e0bffd17 	ldw	r2,-12(fp)
  815cbc:	10800817 	ldw	r2,32(r2)
  815cc0:	1007883a 	mov	r3,r2
  815cc4:	2005883a 	mov	r2,r4
  815cc8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  815ccc:	e0bffc17 	ldw	r2,-16(fp)
  815cd0:	10800104 	addi	r2,r2,4
  815cd4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  815cd8:	003f5f06 	br	815a58 <altera_avalon_jtag_uart_irq+0x2c>
}
  815cdc:	e037883a 	mov	sp,fp
  815ce0:	dfc00117 	ldw	ra,4(sp)
  815ce4:	df000017 	ldw	fp,0(sp)
  815ce8:	dec00204 	addi	sp,sp,8
  815cec:	f800283a 	ret

00815cf0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  815cf0:	defff804 	addi	sp,sp,-32
  815cf4:	dfc00715 	stw	ra,28(sp)
  815cf8:	df000615 	stw	fp,24(sp)
  815cfc:	df000604 	addi	fp,sp,24
  815d00:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  815d04:	e0bfff17 	ldw	r2,-4(fp)
  815d08:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  815d0c:	e0bffd17 	ldw	r2,-12(fp)
  815d10:	10800017 	ldw	r2,0(r2)
  815d14:	10800104 	addi	r2,r2,4
  815d18:	10800037 	ldwio	r2,0(r2)
  815d1c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  815d20:	e0bffc17 	ldw	r2,-16(fp)
  815d24:	1081000c 	andi	r2,r2,1024
  815d28:	1005003a 	cmpeq	r2,r2,zero
  815d2c:	10000c1e 	bne	r2,zero,815d60 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  815d30:	e0bffd17 	ldw	r2,-12(fp)
  815d34:	10800017 	ldw	r2,0(r2)
  815d38:	11000104 	addi	r4,r2,4
  815d3c:	e0bffd17 	ldw	r2,-12(fp)
  815d40:	10800817 	ldw	r2,32(r2)
  815d44:	10810014 	ori	r2,r2,1024
  815d48:	1007883a 	mov	r3,r2
  815d4c:	2005883a 	mov	r2,r4
  815d50:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
  815d54:	e0bffd17 	ldw	r2,-12(fp)
  815d58:	10000915 	stw	zero,36(r2)
  815d5c:	00002106 	br	815de4 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  815d60:	e0bffd17 	ldw	r2,-12(fp)
  815d64:	10c00917 	ldw	r3,36(r2)
  815d68:	00a00034 	movhi	r2,32768
  815d6c:	10bfff04 	addi	r2,r2,-4
  815d70:	10c01c36 	bltu	r2,r3,815de4 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
  815d74:	e0bffd17 	ldw	r2,-12(fp)
  815d78:	10800917 	ldw	r2,36(r2)
  815d7c:	10c00044 	addi	r3,r2,1
  815d80:	e0bffd17 	ldw	r2,-12(fp)
  815d84:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
  815d88:	e0bffd17 	ldw	r2,-12(fp)
  815d8c:	10c00917 	ldw	r3,36(r2)
  815d90:	e0bffd17 	ldw	r2,-12(fp)
  815d94:	10800117 	ldw	r2,4(r2)
  815d98:	18801236 	bltu	r3,r2,815de4 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
  815d9c:	e0bffd17 	ldw	r2,-12(fp)
  815da0:	10800c17 	ldw	r2,48(r2)
  815da4:	e0bffa15 	stw	r2,-24(fp)
  815da8:	00800104 	movi	r2,4
  815dac:	e0bffb0d 	sth	r2,-20(fp)
  815db0:	00800044 	movi	r2,1
  815db4:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
  815db8:	008020b4 	movhi	r2,130
  815dbc:	10a97b44 	addi	r2,r2,-23059
  815dc0:	10800003 	ldbu	r2,0(r2)
  815dc4:	10803fcc 	andi	r2,r2,255
  815dc8:	1005003a 	cmpeq	r2,r2,zero
  815dcc:	1000051e 	bne	r2,zero,815de4 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
  815dd0:	e17ffb0b 	ldhu	r5,-20(fp)
  815dd4:	e1bffb83 	ldbu	r6,-18(fp)
  815dd8:	e1fffe04 	addi	r7,fp,-8
  815ddc:	e13ffa17 	ldw	r4,-24(fp)
  815de0:	08106e40 	call	8106e4 <OSFlagPost>
  815de4:	008020b4 	movhi	r2,130
  815de8:	10a99004 	addi	r2,r2,-22976
  815dec:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
  815df0:	e037883a 	mov	sp,fp
  815df4:	dfc00117 	ldw	ra,4(sp)
  815df8:	df000017 	ldw	fp,0(sp)
  815dfc:	dec00204 	addi	sp,sp,8
  815e00:	f800283a 	ret

00815e04 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  815e04:	defffc04 	addi	sp,sp,-16
  815e08:	df000315 	stw	fp,12(sp)
  815e0c:	df000304 	addi	fp,sp,12
  815e10:	e13ffd15 	stw	r4,-12(fp)
  815e14:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  815e18:	00000706 	br	815e38 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
  815e1c:	e0bffe17 	ldw	r2,-8(fp)
  815e20:	1090000c 	andi	r2,r2,16384
  815e24:	1005003a 	cmpeq	r2,r2,zero
  815e28:	1000031e 	bne	r2,zero,815e38 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
  815e2c:	00bffd44 	movi	r2,-11
  815e30:	e0bfff15 	stw	r2,-4(fp)
  815e34:	00000b06 	br	815e64 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  815e38:	e0bffd17 	ldw	r2,-12(fp)
  815e3c:	10c01017 	ldw	r3,64(r2)
  815e40:	e0bffd17 	ldw	r2,-12(fp)
  815e44:	10800f17 	ldw	r2,60(r2)
  815e48:	18800526 	beq	r3,r2,815e60 <altera_avalon_jtag_uart_close+0x5c>
  815e4c:	e0bffd17 	ldw	r2,-12(fp)
  815e50:	10c00917 	ldw	r3,36(r2)
  815e54:	e0bffd17 	ldw	r2,-12(fp)
  815e58:	10800117 	ldw	r2,4(r2)
  815e5c:	18bfef36 	bltu	r3,r2,815e1c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  815e60:	e03fff15 	stw	zero,-4(fp)
  815e64:	e0bfff17 	ldw	r2,-4(fp)
}
  815e68:	e037883a 	mov	sp,fp
  815e6c:	df000017 	ldw	fp,0(sp)
  815e70:	dec00104 	addi	sp,sp,4
  815e74:	f800283a 	ret

00815e78 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  815e78:	defff804 	addi	sp,sp,-32
  815e7c:	df000715 	stw	fp,28(sp)
  815e80:	df000704 	addi	fp,sp,28
  815e84:	e13ffb15 	stw	r4,-20(fp)
  815e88:	e17ffc15 	stw	r5,-16(fp)
  815e8c:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
  815e90:	00bff9c4 	movi	r2,-25
  815e94:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
  815e98:	e0bffc17 	ldw	r2,-16(fp)
  815e9c:	e0bfff15 	stw	r2,-4(fp)
  815ea0:	e0ffff17 	ldw	r3,-4(fp)
  815ea4:	189a8060 	cmpeqi	r2,r3,27137
  815ea8:	1000041e 	bne	r2,zero,815ebc <altera_avalon_jtag_uart_ioctl+0x44>
  815eac:	e0ffff17 	ldw	r3,-4(fp)
  815eb0:	189a80a0 	cmpeqi	r2,r3,27138
  815eb4:	10001b1e 	bne	r2,zero,815f24 <altera_avalon_jtag_uart_ioctl+0xac>
  815eb8:	00002706 	br	815f58 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  815ebc:	e0bffb17 	ldw	r2,-20(fp)
  815ec0:	10c00117 	ldw	r3,4(r2)
  815ec4:	00a00034 	movhi	r2,32768
  815ec8:	10bfffc4 	addi	r2,r2,-1
  815ecc:	18802226 	beq	r3,r2,815f58 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
  815ed0:	e0bffd17 	ldw	r2,-12(fp)
  815ed4:	10800017 	ldw	r2,0(r2)
  815ed8:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  815edc:	e0bff917 	ldw	r2,-28(fp)
  815ee0:	10800090 	cmplti	r2,r2,2
  815ee4:	1000071e 	bne	r2,zero,815f04 <altera_avalon_jtag_uart_ioctl+0x8c>
  815ee8:	e0fff917 	ldw	r3,-28(fp)
  815eec:	00a00034 	movhi	r2,32768
  815ef0:	10bfffc4 	addi	r2,r2,-1
  815ef4:	18800326 	beq	r3,r2,815f04 <altera_avalon_jtag_uart_ioctl+0x8c>
  815ef8:	e0bff917 	ldw	r2,-28(fp)
  815efc:	e0bffe15 	stw	r2,-8(fp)
  815f00:	00000306 	br	815f10 <altera_avalon_jtag_uart_ioctl+0x98>
  815f04:	00e00034 	movhi	r3,32768
  815f08:	18ffff84 	addi	r3,r3,-2
  815f0c:	e0fffe15 	stw	r3,-8(fp)
  815f10:	e0bffb17 	ldw	r2,-20(fp)
  815f14:	e0fffe17 	ldw	r3,-8(fp)
  815f18:	10c00115 	stw	r3,4(r2)
      rc = 0;
  815f1c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
  815f20:	00000d06 	br	815f58 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  815f24:	e0bffb17 	ldw	r2,-20(fp)
  815f28:	10c00117 	ldw	r3,4(r2)
  815f2c:	00a00034 	movhi	r2,32768
  815f30:	10bfffc4 	addi	r2,r2,-1
  815f34:	18800826 	beq	r3,r2,815f58 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  815f38:	e13ffd17 	ldw	r4,-12(fp)
  815f3c:	e0bffb17 	ldw	r2,-20(fp)
  815f40:	10c00917 	ldw	r3,36(r2)
  815f44:	e0bffb17 	ldw	r2,-20(fp)
  815f48:	10800117 	ldw	r2,4(r2)
  815f4c:	1885803a 	cmpltu	r2,r3,r2
  815f50:	20800015 	stw	r2,0(r4)
      rc = 0;
  815f54:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
  815f58:	e0bffa17 	ldw	r2,-24(fp)
}
  815f5c:	e037883a 	mov	sp,fp
  815f60:	df000017 	ldw	fp,0(sp)
  815f64:	dec00104 	addi	sp,sp,4
  815f68:	f800283a 	ret

00815f6c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  815f6c:	deffeb04 	addi	sp,sp,-84
  815f70:	dfc01415 	stw	ra,80(sp)
  815f74:	df001315 	stw	fp,76(sp)
  815f78:	df001304 	addi	fp,sp,76
  815f7c:	e13ffb15 	stw	r4,-20(fp)
  815f80:	e17ffc15 	stw	r5,-16(fp)
  815f84:	e1bffd15 	stw	r6,-12(fp)
  815f88:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
  815f8c:	e0bffc17 	ldw	r2,-16(fp)
  815f90:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
  815f94:	e0bffb17 	ldw	r2,-20(fp)
  815f98:	10800a17 	ldw	r2,40(r2)
  815f9c:	e0bff315 	stw	r2,-52(fp)
  815fa0:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
  815fa4:	e17ff40b 	ldhu	r5,-48(fp)
  815fa8:	e1bffa44 	addi	r6,fp,-23
  815fac:	e13ff317 	ldw	r4,-52(fp)
  815fb0:	0812f780 	call	812f78 <OSSemPend>

  while (space > 0)
  815fb4:	00006406 	br	816148 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  815fb8:	e0bffb17 	ldw	r2,-20(fp)
  815fbc:	10800d17 	ldw	r2,52(r2)
  815fc0:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
  815fc4:	e0bffb17 	ldw	r2,-20(fp)
  815fc8:	10800e17 	ldw	r2,56(r2)
  815fcc:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
  815fd0:	e0fff617 	ldw	r3,-40(fp)
  815fd4:	e0bff517 	ldw	r2,-44(fp)
  815fd8:	18800536 	bltu	r3,r2,815ff0 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
  815fdc:	e0bff617 	ldw	r2,-40(fp)
  815fe0:	e0fff517 	ldw	r3,-44(fp)
  815fe4:	10c5c83a 	sub	r2,r2,r3
  815fe8:	e0bff715 	stw	r2,-36(fp)
  815fec:	00000406 	br	816000 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  815ff0:	00820004 	movi	r2,2048
  815ff4:	e0fff517 	ldw	r3,-44(fp)
  815ff8:	10c5c83a 	sub	r2,r2,r3
  815ffc:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  816000:	e0bff717 	ldw	r2,-36(fp)
  816004:	1005003a 	cmpeq	r2,r2,zero
  816008:	10001f1e 	bne	r2,zero,816088 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
  81600c:	e0fffd17 	ldw	r3,-12(fp)
  816010:	e0bff717 	ldw	r2,-36(fp)
  816014:	1880022e 	bgeu	r3,r2,816020 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
  816018:	e0bffd17 	ldw	r2,-12(fp)
  81601c:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  816020:	e0bffb17 	ldw	r2,-20(fp)
  816024:	10c01104 	addi	r3,r2,68
  816028:	e0bff517 	ldw	r2,-44(fp)
  81602c:	1887883a 	add	r3,r3,r2
  816030:	e0bff917 	ldw	r2,-28(fp)
  816034:	1009883a 	mov	r4,r2
  816038:	180b883a 	mov	r5,r3
  81603c:	e1bff717 	ldw	r6,-36(fp)
  816040:	08026dc0 	call	8026dc <memcpy>
      ptr   += n;
  816044:	e0fff717 	ldw	r3,-36(fp)
  816048:	e0bff917 	ldw	r2,-28(fp)
  81604c:	10c5883a 	add	r2,r2,r3
  816050:	e0bff915 	stw	r2,-28(fp)
      space -= n;
  816054:	e0fffd17 	ldw	r3,-12(fp)
  816058:	e0bff717 	ldw	r2,-36(fp)
  81605c:	1885c83a 	sub	r2,r3,r2
  816060:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  816064:	e0fff517 	ldw	r3,-44(fp)
  816068:	e0bff717 	ldw	r2,-36(fp)
  81606c:	1885883a 	add	r2,r3,r2
  816070:	10c1ffcc 	andi	r3,r2,2047
  816074:	e0bffb17 	ldw	r2,-20(fp)
  816078:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
  81607c:	e0bffd17 	ldw	r2,-12(fp)
  816080:	10800048 	cmpgei	r2,r2,1
  816084:	103fcc1e 	bne	r2,zero,815fb8 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
  816088:	e0fff917 	ldw	r3,-28(fp)
  81608c:	e0bffc17 	ldw	r2,-16(fp)
  816090:	1880301e 	bne	r3,r2,816154 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  816094:	e0bffe17 	ldw	r2,-8(fp)
  816098:	1090000c 	andi	r2,r2,16384
  81609c:	1004c03a 	cmpne	r2,r2,zero
  8160a0:	10002c1e 	bne	r2,zero,816154 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
  8160a4:	008020b4 	movhi	r2,130
  8160a8:	10a97b44 	addi	r2,r2,-23059
  8160ac:	10800003 	ldbu	r2,0(r2)
  8160b0:	10803fcc 	andi	r2,r2,255
  8160b4:	10800058 	cmpnei	r2,r2,1
  8160b8:	1000161e 	bne	r2,zero,816114 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
  8160bc:	e0bffb17 	ldw	r2,-20(fp)
  8160c0:	10800c17 	ldw	r2,48(r2)
  8160c4:	e0bff015 	stw	r2,-64(fp)
  8160c8:	00800144 	movi	r2,5
  8160cc:	e0bff10d 	sth	r2,-60(fp)
  8160d0:	00bfe0c4 	movi	r2,-125
  8160d4:	e0bff185 	stb	r2,-58(fp)
  8160d8:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  8160dc:	008020b4 	movhi	r2,130
  8160e0:	10a97b44 	addi	r2,r2,-23059
  8160e4:	10800003 	ldbu	r2,0(r2)
  8160e8:	10803fcc 	andi	r2,r2,255
  8160ec:	1005003a 	cmpeq	r2,r2,zero
  8160f0:	1000111e 	bne	r2,zero,816138 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  8160f4:	e17ff10b 	ldhu	r5,-60(fp)
  8160f8:	e1bff183 	ldbu	r6,-58(fp)
  8160fc:	e1fff20b 	ldhu	r7,-56(fp)
  816100:	e0bffa04 	addi	r2,fp,-24
  816104:	d8800015 	stw	r2,0(sp)
  816108:	e13ff017 	ldw	r4,-64(fp)
  81610c:	08100380 	call	810038 <OSFlagPend>
    return err;
  816110:	00000906 	br	816138 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  816114:	e0bffb17 	ldw	r2,-20(fp)
  816118:	10c00d17 	ldw	r3,52(r2)
  81611c:	e0bff617 	ldw	r2,-40(fp)
  816120:	1880051e 	bne	r3,r2,816138 <altera_avalon_jtag_uart_read+0x1cc>
  816124:	e0bffb17 	ldw	r2,-20(fp)
  816128:	10c00917 	ldw	r3,36(r2)
  81612c:	e0bffb17 	ldw	r2,-20(fp)
  816130:	10800117 	ldw	r2,4(r2)
  816134:	18bff736 	bltu	r3,r2,816114 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  816138:	e0bffb17 	ldw	r2,-20(fp)
  81613c:	10c00d17 	ldw	r3,52(r2)
  816140:	e0bff617 	ldw	r2,-40(fp)
  816144:	18800326 	beq	r3,r2,816154 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  816148:	e0bffd17 	ldw	r2,-12(fp)
  81614c:	10800048 	cmpgei	r2,r2,1
  816150:	103f991e 	bne	r2,zero,815fb8 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
  816154:	e0bffb17 	ldw	r2,-20(fp)
  816158:	11000a17 	ldw	r4,40(r2)
  81615c:	08133700 	call	813370 <OSSemPost>

  if (ptr != buffer)
  816160:	e0fff917 	ldw	r3,-28(fp)
  816164:	e0bffc17 	ldw	r2,-16(fp)
  816168:	18801926 	beq	r3,r2,8161d0 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81616c:	0005303a 	rdctl	r2,status
  816170:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816174:	e0ffef17 	ldw	r3,-68(fp)
  816178:	00bfff84 	movi	r2,-2
  81617c:	1884703a 	and	r2,r3,r2
  816180:	1001703a 	wrctl	status,r2
  
  return context;
  816184:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  816188:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  81618c:	e0bffb17 	ldw	r2,-20(fp)
  816190:	10800817 	ldw	r2,32(r2)
  816194:	10c00054 	ori	r3,r2,1
  816198:	e0bffb17 	ldw	r2,-20(fp)
  81619c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8161a0:	e0bffb17 	ldw	r2,-20(fp)
  8161a4:	10800017 	ldw	r2,0(r2)
  8161a8:	11000104 	addi	r4,r2,4
  8161ac:	e0bffb17 	ldw	r2,-20(fp)
  8161b0:	10800817 	ldw	r2,32(r2)
  8161b4:	1007883a 	mov	r3,r2
  8161b8:	2005883a 	mov	r2,r4
  8161bc:	10c00035 	stwio	r3,0(r2)
  8161c0:	e0bff817 	ldw	r2,-32(fp)
  8161c4:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8161c8:	e0bfee17 	ldw	r2,-72(fp)
  8161cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  8161d0:	e0fff917 	ldw	r3,-28(fp)
  8161d4:	e0bffc17 	ldw	r2,-16(fp)
  8161d8:	18800526 	beq	r3,r2,8161f0 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
  8161dc:	e0fff917 	ldw	r3,-28(fp)
  8161e0:	e0bffc17 	ldw	r2,-16(fp)
  8161e4:	1887c83a 	sub	r3,r3,r2
  8161e8:	e0ffff15 	stw	r3,-4(fp)
  8161ec:	00000906 	br	816214 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
  8161f0:	e0bffe17 	ldw	r2,-8(fp)
  8161f4:	1090000c 	andi	r2,r2,16384
  8161f8:	1005003a 	cmpeq	r2,r2,zero
  8161fc:	1000031e 	bne	r2,zero,81620c <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
  816200:	00bffd44 	movi	r2,-11
  816204:	e0bfff15 	stw	r2,-4(fp)
  816208:	00000206 	br	816214 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
  81620c:	00bffec4 	movi	r2,-5
  816210:	e0bfff15 	stw	r2,-4(fp)
  816214:	e0bfff17 	ldw	r2,-4(fp)
}
  816218:	e037883a 	mov	sp,fp
  81621c:	dfc00117 	ldw	ra,4(sp)
  816220:	df000017 	ldw	fp,0(sp)
  816224:	dec00204 	addi	sp,sp,8
  816228:	f800283a 	ret

0081622c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  81622c:	deffeb04 	addi	sp,sp,-84
  816230:	dfc01415 	stw	ra,80(sp)
  816234:	df001315 	stw	fp,76(sp)
  816238:	df001304 	addi	fp,sp,76
  81623c:	e13ffb15 	stw	r4,-20(fp)
  816240:	e17ffc15 	stw	r5,-16(fp)
  816244:	e1bffd15 	stw	r6,-12(fp)
  816248:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  81624c:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  816250:	e0bffc17 	ldw	r2,-16(fp)
  816254:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
  816258:	e0bffb17 	ldw	r2,-20(fp)
  81625c:	10800b17 	ldw	r2,44(r2)
  816260:	e0bff315 	stw	r2,-52(fp)
  816264:	e03ff40d 	sth	zero,-48(fp)
  816268:	e17ff40b 	ldhu	r5,-48(fp)
  81626c:	e1bffa04 	addi	r6,fp,-24
  816270:	e13ff317 	ldw	r4,-52(fp)
  816274:	0812f780 	call	812f78 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  816278:	00003a06 	br	816364 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  81627c:	e0bffb17 	ldw	r2,-20(fp)
  816280:	10800f17 	ldw	r2,60(r2)
  816284:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  816288:	e0bffb17 	ldw	r2,-20(fp)
  81628c:	10801017 	ldw	r2,64(r2)
  816290:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
  816294:	e0fff917 	ldw	r3,-28(fp)
  816298:	e0bff817 	ldw	r2,-32(fp)
  81629c:	1880062e 	bgeu	r3,r2,8162b8 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
  8162a0:	e0fff817 	ldw	r3,-32(fp)
  8162a4:	e0bff917 	ldw	r2,-28(fp)
  8162a8:	1885c83a 	sub	r2,r3,r2
  8162ac:	10bfffc4 	addi	r2,r2,-1
  8162b0:	e0bff715 	stw	r2,-36(fp)
  8162b4:	00000c06 	br	8162e8 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
  8162b8:	e0bff817 	ldw	r2,-32(fp)
  8162bc:	1005003a 	cmpeq	r2,r2,zero
  8162c0:	1000051e 	bne	r2,zero,8162d8 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  8162c4:	00820004 	movi	r2,2048
  8162c8:	e0fff917 	ldw	r3,-28(fp)
  8162cc:	10c5c83a 	sub	r2,r2,r3
  8162d0:	e0bff715 	stw	r2,-36(fp)
  8162d4:	00000406 	br	8162e8 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  8162d8:	0081ffc4 	movi	r2,2047
  8162dc:	e0fff917 	ldw	r3,-28(fp)
  8162e0:	10c5c83a 	sub	r2,r2,r3
  8162e4:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
  8162e8:	e0bff717 	ldw	r2,-36(fp)
  8162ec:	1005003a 	cmpeq	r2,r2,zero
  8162f0:	10001f1e 	bne	r2,zero,816370 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
  8162f4:	e0fffd17 	ldw	r3,-12(fp)
  8162f8:	e0bff717 	ldw	r2,-36(fp)
  8162fc:	1880022e 	bgeu	r3,r2,816308 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
  816300:	e0bffd17 	ldw	r2,-12(fp)
  816304:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  816308:	e0bffb17 	ldw	r2,-20(fp)
  81630c:	10c21104 	addi	r3,r2,2116
  816310:	e0bff917 	ldw	r2,-28(fp)
  816314:	1885883a 	add	r2,r3,r2
  816318:	e0fffc17 	ldw	r3,-16(fp)
  81631c:	1009883a 	mov	r4,r2
  816320:	180b883a 	mov	r5,r3
  816324:	e1bff717 	ldw	r6,-36(fp)
  816328:	08026dc0 	call	8026dc <memcpy>
      ptr   += n;
  81632c:	e0fff717 	ldw	r3,-36(fp)
  816330:	e0bffc17 	ldw	r2,-16(fp)
  816334:	10c5883a 	add	r2,r2,r3
  816338:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
  81633c:	e0fffd17 	ldw	r3,-12(fp)
  816340:	e0bff717 	ldw	r2,-36(fp)
  816344:	1885c83a 	sub	r2,r3,r2
  816348:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  81634c:	e0fff917 	ldw	r3,-28(fp)
  816350:	e0bff717 	ldw	r2,-36(fp)
  816354:	1885883a 	add	r2,r3,r2
  816358:	10c1ffcc 	andi	r3,r2,2047
  81635c:	e0bffb17 	ldw	r2,-20(fp)
  816360:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  816364:	e0bffd17 	ldw	r2,-12(fp)
  816368:	10800048 	cmpgei	r2,r2,1
  81636c:	103fc31e 	bne	r2,zero,81627c <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816370:	0005303a 	rdctl	r2,status
  816374:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816378:	e0fff217 	ldw	r3,-56(fp)
  81637c:	00bfff84 	movi	r2,-2
  816380:	1884703a 	and	r2,r3,r2
  816384:	1001703a 	wrctl	status,r2
  
  return context;
  816388:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  81638c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  816390:	e0bffb17 	ldw	r2,-20(fp)
  816394:	10800817 	ldw	r2,32(r2)
  816398:	10c00094 	ori	r3,r2,2
  81639c:	e0bffb17 	ldw	r2,-20(fp)
  8163a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  8163a4:	e0bffb17 	ldw	r2,-20(fp)
  8163a8:	10800017 	ldw	r2,0(r2)
  8163ac:	11000104 	addi	r4,r2,4
  8163b0:	e0bffb17 	ldw	r2,-20(fp)
  8163b4:	10800817 	ldw	r2,32(r2)
  8163b8:	1007883a 	mov	r3,r2
  8163bc:	2005883a 	mov	r2,r4
  8163c0:	10c00035 	stwio	r3,0(r2)
  8163c4:	e0bff617 	ldw	r2,-40(fp)
  8163c8:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8163cc:	e0bff117 	ldw	r2,-60(fp)
  8163d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  8163d4:	e0bffd17 	ldw	r2,-12(fp)
  8163d8:	10800050 	cmplti	r2,r2,1
  8163dc:	10002d1e 	bne	r2,zero,816494 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
  8163e0:	e0bffe17 	ldw	r2,-8(fp)
  8163e4:	1090000c 	andi	r2,r2,16384
  8163e8:	1004c03a 	cmpne	r2,r2,zero
  8163ec:	10002c1e 	bne	r2,zero,8164a0 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
  8163f0:	008020b4 	movhi	r2,130
  8163f4:	10a97b44 	addi	r2,r2,-23059
  8163f8:	10800003 	ldbu	r2,0(r2)
  8163fc:	10803fcc 	andi	r2,r2,255
  816400:	10800058 	cmpnei	r2,r2,1
  816404:	1000161e 	bne	r2,zero,816460 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
  816408:	e0bffb17 	ldw	r2,-20(fp)
  81640c:	10800c17 	ldw	r2,48(r2)
  816410:	e0bfee15 	stw	r2,-72(fp)
  816414:	00800184 	movi	r2,6
  816418:	e0bfef0d 	sth	r2,-68(fp)
  81641c:	00bfe0c4 	movi	r2,-125
  816420:	e0bfef85 	stb	r2,-66(fp)
  816424:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
  816428:	008020b4 	movhi	r2,130
  81642c:	10a97b44 	addi	r2,r2,-23059
  816430:	10800003 	ldbu	r2,0(r2)
  816434:	10803fcc 	andi	r2,r2,255
  816438:	1005003a 	cmpeq	r2,r2,zero
  81643c:	1000111e 	bne	r2,zero,816484 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
  816440:	e17fef0b 	ldhu	r5,-68(fp)
  816444:	e1bfef83 	ldbu	r6,-66(fp)
  816448:	e1fff00b 	ldhu	r7,-64(fp)
  81644c:	e0bffa44 	addi	r2,fp,-23
  816450:	d8800015 	stw	r2,0(sp)
  816454:	e13fee17 	ldw	r4,-72(fp)
  816458:	08100380 	call	810038 <OSFlagPend>
    return err;
  81645c:	00000906 	br	816484 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  816460:	e0bffb17 	ldw	r2,-20(fp)
  816464:	10c01017 	ldw	r3,64(r2)
  816468:	e0bff817 	ldw	r2,-32(fp)
  81646c:	1880051e 	bne	r3,r2,816484 <altera_avalon_jtag_uart_write+0x258>
  816470:	e0bffb17 	ldw	r2,-20(fp)
  816474:	10c00917 	ldw	r3,36(r2)
  816478:	e0bffb17 	ldw	r2,-20(fp)
  81647c:	10800117 	ldw	r2,4(r2)
  816480:	18bff736 	bltu	r3,r2,816460 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
  816484:	e0bffb17 	ldw	r2,-20(fp)
  816488:	10c01017 	ldw	r3,64(r2)
  81648c:	e0bff817 	ldw	r2,-32(fp)
  816490:	18800326 	beq	r3,r2,8164a0 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
  816494:	e0bffd17 	ldw	r2,-12(fp)
  816498:	10800048 	cmpgei	r2,r2,1
  81649c:	103fb11e 	bne	r2,zero,816364 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
  8164a0:	e0bffb17 	ldw	r2,-20(fp)
  8164a4:	11000b17 	ldw	r4,44(r2)
  8164a8:	08133700 	call	813370 <OSSemPost>

  if (ptr != start)
  8164ac:	e0fffc17 	ldw	r3,-16(fp)
  8164b0:	e0bff517 	ldw	r2,-44(fp)
  8164b4:	18800526 	beq	r3,r2,8164cc <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
  8164b8:	e0fffc17 	ldw	r3,-16(fp)
  8164bc:	e0bff517 	ldw	r2,-44(fp)
  8164c0:	1887c83a 	sub	r3,r3,r2
  8164c4:	e0ffff15 	stw	r3,-4(fp)
  8164c8:	00000906 	br	8164f0 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
  8164cc:	e0bffe17 	ldw	r2,-8(fp)
  8164d0:	1090000c 	andi	r2,r2,16384
  8164d4:	1005003a 	cmpeq	r2,r2,zero
  8164d8:	1000031e 	bne	r2,zero,8164e8 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
  8164dc:	00bffd44 	movi	r2,-11
  8164e0:	e0bfff15 	stw	r2,-4(fp)
  8164e4:	00000206 	br	8164f0 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
  8164e8:	00bffec4 	movi	r2,-5
  8164ec:	e0bfff15 	stw	r2,-4(fp)
  8164f0:	e0bfff17 	ldw	r2,-4(fp)
}
  8164f4:	e037883a 	mov	sp,fp
  8164f8:	dfc00117 	ldw	ra,4(sp)
  8164fc:	df000017 	ldw	fp,0(sp)
  816500:	dec00204 	addi	sp,sp,8
  816504:	f800283a 	ret

00816508 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  816508:	defffa04 	addi	sp,sp,-24
  81650c:	dfc00515 	stw	ra,20(sp)
  816510:	df000415 	stw	fp,16(sp)
  816514:	df000404 	addi	fp,sp,16
  816518:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  81651c:	e0bfff17 	ldw	r2,-4(fp)
  816520:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  816524:	e0bfff17 	ldw	r2,-4(fp)
  816528:	10800104 	addi	r2,r2,4
  81652c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816530:	0005303a 	rdctl	r2,status
  816534:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816538:	e0fffd17 	ldw	r3,-12(fp)
  81653c:	00bfff84 	movi	r2,-2
  816540:	1884703a 	and	r2,r3,r2
  816544:	1001703a 	wrctl	status,r2
  
  return context;
  816548:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  81654c:	e0bffe15 	stw	r2,-8(fp)
  alt_tick ();
  816550:	08178140 	call	817814 <alt_tick>
  816554:	e0bffe17 	ldw	r2,-8(fp)
  816558:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81655c:	e0bffc17 	ldw	r2,-16(fp)
  816560:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  816564:	e037883a 	mov	sp,fp
  816568:	dfc00117 	ldw	ra,4(sp)
  81656c:	df000017 	ldw	fp,0(sp)
  816570:	dec00204 	addi	sp,sp,8
  816574:	f800283a 	ret

00816578 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  816578:	defff804 	addi	sp,sp,-32
  81657c:	dfc00715 	stw	ra,28(sp)
  816580:	df000615 	stw	fp,24(sp)
  816584:	df000604 	addi	fp,sp,24
  816588:	e13ffc15 	stw	r4,-16(fp)
  81658c:	e17ffd15 	stw	r5,-12(fp)
  816590:	e1bffe15 	stw	r6,-8(fp)
  816594:	e1ffff15 	stw	r7,-4(fp)
  816598:	e0bfff17 	ldw	r2,-4(fp)
  81659c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  8165a0:	008020b4 	movhi	r2,130
  8165a4:	10a99004 	addi	r2,r2,-22976
  8165a8:	10800017 	ldw	r2,0(r2)
  8165ac:	1004c03a 	cmpne	r2,r2,zero
  8165b0:	1000041e 	bne	r2,zero,8165c4 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
  8165b4:	00c020b4 	movhi	r3,130
  8165b8:	18e99004 	addi	r3,r3,-22976
  8165bc:	e0bffb17 	ldw	r2,-20(fp)
  8165c0:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  8165c4:	e0bffc17 	ldw	r2,-16(fp)
  8165c8:	10800104 	addi	r2,r2,4
  8165cc:	1007883a 	mov	r3,r2
  8165d0:	008001c4 	movi	r2,7
  8165d4:	18800035 	stwio	r2,0(r3)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  8165d8:	d8000015 	stw	zero,0(sp)
  8165dc:	e13ffd17 	ldw	r4,-12(fp)
  8165e0:	e17ffe17 	ldw	r5,-8(fp)
  8165e4:	01802074 	movhi	r6,129
  8165e8:	31994204 	addi	r6,r6,25864
  8165ec:	e1fffc17 	ldw	r7,-16(fp)
  8165f0:	081707c0 	call	81707c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  8165f4:	e037883a 	mov	sp,fp
  8165f8:	dfc00117 	ldw	ra,4(sp)
  8165fc:	df000017 	ldw	fp,0(sp)
  816600:	dec00204 	addi	sp,sp,8
  816604:	f800283a 	ret

00816608 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
  816608:	defffc04 	addi	sp,sp,-16
  81660c:	df000315 	stw	fp,12(sp)
  816610:	df000304 	addi	fp,sp,12
  816614:	e13ffe15 	stw	r4,-8(fp)
  816618:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
  81661c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
  816620:	e0bfff17 	ldw	r2,-4(fp)
  816624:	1004c03a 	cmpne	r2,r2,zero
  816628:	1000061e 	bne	r2,zero,816644 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
  81662c:	e0bffe17 	ldw	r2,-8(fp)
  816630:	1007883a 	mov	r3,r2
  816634:	e0bffd03 	ldbu	r2,-12(fp)
  816638:	10c4b03a 	or	r2,r2,r3
  81663c:	e0bffd05 	stb	r2,-12(fp)
  816640:	00000806 	br	816664 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
  816644:	e0bffe17 	ldw	r2,-8(fp)
  816648:	1007883a 	mov	r3,r2
  81664c:	e0bffd03 	ldbu	r2,-12(fp)
  816650:	10c4b03a 	or	r2,r2,r3
  816654:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
  816658:	e0bffd03 	ldbu	r2,-12(fp)
  81665c:	10801014 	ori	r2,r2,64
  816660:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  816664:	e0fffd03 	ldbu	r3,-12(fp)
  816668:	00bfe004 	movi	r2,-128
  81666c:	1884b03a 	or	r2,r3,r2
  816670:	10803fcc 	andi	r2,r2,255
}
  816674:	e037883a 	mov	sp,fp
  816678:	df000017 	ldw	fp,0(sp)
  81667c:	dec00104 	addi	sp,sp,4
  816680:	f800283a 	ret

00816684 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
  816684:	defffd04 	addi	sp,sp,-12
  816688:	df000215 	stw	fp,8(sp)
  81668c:	df000204 	addi	fp,sp,8
  816690:	e13ffe15 	stw	r4,-8(fp)
  816694:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  816698:	e0bffe17 	ldw	r2,-8(fp)
  81669c:	10800a17 	ldw	r2,40(r2)
  8166a0:	e0ffff03 	ldbu	r3,-4(fp)
  8166a4:	10c00025 	stbio	r3,0(r2)
}
  8166a8:	e037883a 	mov	sp,fp
  8166ac:	df000017 	ldw	fp,0(sp)
  8166b0:	dec00104 	addi	sp,sp,4
  8166b4:	f800283a 	ret

008166b8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
  8166b8:	defffe04 	addi	sp,sp,-8
  8166bc:	df000115 	stw	fp,4(sp)
  8166c0:	df000104 	addi	fp,sp,4
  8166c4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  8166c8:	e0bfff17 	ldw	r2,-4(fp)
  8166cc:	10800a17 	ldw	r2,40(r2)
  8166d0:	1007883a 	mov	r3,r2
  8166d4:	00800044 	movi	r2,1
  8166d8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
  8166dc:	e037883a 	mov	sp,fp
  8166e0:	df000017 	ldw	fp,0(sp)
  8166e4:	dec00104 	addi	sp,sp,4
  8166e8:	f800283a 	ret

008166ec <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
  8166ec:	defffc04 	addi	sp,sp,-16
  8166f0:	dfc00315 	stw	ra,12(sp)
  8166f4:	df000215 	stw	fp,8(sp)
  8166f8:	df000204 	addi	fp,sp,8
  8166fc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  816700:	e13fff17 	ldw	r4,-4(fp)
  816704:	014020b4 	movhi	r5,130
  816708:	29694404 	addi	r5,r5,-23280
  81670c:	0816fe80 	call	816fe8 <alt_find_dev>
  816710:	e0bffe15 	stw	r2,-8(fp)

  return dev;
  816714:	e0bffe17 	ldw	r2,-8(fp)
}
  816718:	e037883a 	mov	sp,fp
  81671c:	dfc00117 	ldw	ra,4(sp)
  816720:	df000017 	ldw	fp,0(sp)
  816724:	dec00204 	addi	sp,sp,8
  816728:	f800283a 	ret

0081672c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
  81672c:	defffb04 	addi	sp,sp,-20
  816730:	df000415 	stw	fp,16(sp)
  816734:	df000404 	addi	fp,sp,16
  816738:	e13ffd15 	stw	r4,-12(fp)
  81673c:	e17ffe15 	stw	r5,-8(fp)
  816740:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
  816744:	e03ffc15 	stw	zero,-16(fp)
  816748:	00000f06 	br	816788 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  81674c:	e0bffd17 	ldw	r2,-12(fp)
  816750:	10800a17 	ldw	r2,40(r2)
  816754:	11000044 	addi	r4,r2,1
  816758:	e0fffc17 	ldw	r3,-16(fp)
  81675c:	e0bffe17 	ldw	r2,-8(fp)
  816760:	1885883a 	add	r2,r3,r2
  816764:	10800003 	ldbu	r2,0(r2)
  816768:	10c03fcc 	andi	r3,r2,255
  81676c:	18c0201c 	xori	r3,r3,128
  816770:	18ffe004 	addi	r3,r3,-128
  816774:	2005883a 	mov	r2,r4
  816778:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  81677c:	e0bffc17 	ldw	r2,-16(fp)
  816780:	10800044 	addi	r2,r2,1
  816784:	e0bffc15 	stw	r2,-16(fp)
  816788:	e0fffc17 	ldw	r3,-16(fp)
  81678c:	e0bfff17 	ldw	r2,-4(fp)
  816790:	18bfee36 	bltu	r3,r2,81674c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
  816794:	e037883a 	mov	sp,fp
  816798:	df000017 	ldw	fp,0(sp)
  81679c:	dec00104 	addi	sp,sp,4
  8167a0:	f800283a 	ret

008167a4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
  8167a4:	defffd04 	addi	sp,sp,-12
  8167a8:	df000215 	stw	fp,8(sp)
  8167ac:	df000204 	addi	fp,sp,8
  8167b0:	e13ffe15 	stw	r4,-8(fp)
  8167b4:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
  8167b8:	00000d06 	br	8167f0 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  8167bc:	e0bffe17 	ldw	r2,-8(fp)
  8167c0:	10800a17 	ldw	r2,40(r2)
  8167c4:	11000044 	addi	r4,r2,1
  8167c8:	e0bfff17 	ldw	r2,-4(fp)
  8167cc:	10800003 	ldbu	r2,0(r2)
  8167d0:	10c03fcc 	andi	r3,r2,255
  8167d4:	18c0201c 	xori	r3,r3,128
  8167d8:	18ffe004 	addi	r3,r3,-128
  8167dc:	2005883a 	mov	r2,r4
  8167e0:	10c00025 	stbio	r3,0(r2)
		++ptr;
  8167e4:	e0bfff17 	ldw	r2,-4(fp)
  8167e8:	10800044 	addi	r2,r2,1
  8167ec:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  8167f0:	e0bfff17 	ldw	r2,-4(fp)
  8167f4:	10800003 	ldbu	r2,0(r2)
  8167f8:	10803fcc 	andi	r2,r2,255
  8167fc:	1080201c 	xori	r2,r2,128
  816800:	10bfe004 	addi	r2,r2,-128
  816804:	1004c03a 	cmpne	r2,r2,zero
  816808:	103fec1e 	bne	r2,zero,8167bc <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
  81680c:	e037883a 	mov	sp,fp
  816810:	df000017 	ldw	fp,0(sp)
  816814:	dec00104 	addi	sp,sp,4
  816818:	f800283a 	ret

0081681c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
  81681c:	defffb04 	addi	sp,sp,-20
  816820:	dfc00415 	stw	ra,16(sp)
  816824:	df000315 	stw	fp,12(sp)
  816828:	df000304 	addi	fp,sp,12
  81682c:	e13ffd15 	stw	r4,-12(fp)
  816830:	e17ffe15 	stw	r5,-8(fp)
  816834:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  816838:	e0bffd17 	ldw	r2,-12(fp)
  81683c:	10800017 	ldw	r2,0(r2)
  816840:	1009883a 	mov	r4,r2
  816844:	e1bfff17 	ldw	r6,-4(fp)
  816848:	e17ffe17 	ldw	r5,-8(fp)
  81684c:	081672c0 	call	81672c <alt_up_character_lcd_write>
	return 0;
  816850:	0005883a 	mov	r2,zero
}
  816854:	e037883a 	mov	sp,fp
  816858:	dfc00117 	ldw	ra,4(sp)
  81685c:	df000017 	ldw	fp,0(sp)
  816860:	dec00204 	addi	sp,sp,8
  816864:	f800283a 	ret

00816868 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
  816868:	defff904 	addi	sp,sp,-28
  81686c:	dfc00615 	stw	ra,24(sp)
  816870:	df000515 	stw	fp,20(sp)
  816874:	df000504 	addi	fp,sp,20
  816878:	e13ffc15 	stw	r4,-16(fp)
  81687c:	e17ffd15 	stw	r5,-12(fp)
  816880:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  816884:	e0bffd17 	ldw	r2,-12(fp)
  816888:	10800a28 	cmpgeui	r2,r2,40
  81688c:	1000031e 	bne	r2,zero,81689c <alt_up_character_lcd_set_cursor_pos+0x34>
  816890:	e0bffe17 	ldw	r2,-8(fp)
  816894:	108000b0 	cmpltui	r2,r2,2
  816898:	1000031e 	bne	r2,zero,8168a8 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
  81689c:	00bfffc4 	movi	r2,-1
  8168a0:	e0bfff15 	stw	r2,-4(fp)
  8168a4:	00000806 	br	8168c8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  8168a8:	e13ffd17 	ldw	r4,-12(fp)
  8168ac:	e17ffe17 	ldw	r5,-8(fp)
  8168b0:	08166080 	call	816608 <get_DDRAM_addr>
  8168b4:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
  8168b8:	e17ffb03 	ldbu	r5,-20(fp)
  8168bc:	e13ffc17 	ldw	r4,-16(fp)
  8168c0:	08166840 	call	816684 <alt_up_character_lcd_send_cmd>
	return 0;
  8168c4:	e03fff15 	stw	zero,-4(fp)
  8168c8:	e0bfff17 	ldw	r2,-4(fp)
}
  8168cc:	e037883a 	mov	sp,fp
  8168d0:	dfc00117 	ldw	ra,4(sp)
  8168d4:	df000017 	ldw	fp,0(sp)
  8168d8:	dec00204 	addi	sp,sp,8
  8168dc:	f800283a 	ret

008168e0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  8168e0:	defff904 	addi	sp,sp,-28
  8168e4:	dfc00615 	stw	ra,24(sp)
  8168e8:	df000515 	stw	fp,20(sp)
  8168ec:	df000504 	addi	fp,sp,20
  8168f0:	e13ffc15 	stw	r4,-16(fp)
  8168f4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  8168f8:	e0bffd17 	ldw	r2,-12(fp)
  8168fc:	1005003a 	cmpeq	r2,r2,zero
  816900:	10001e1e 	bne	r2,zero,81697c <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
  816904:	e0bffd17 	ldw	r2,-12(fp)
  816908:	10800050 	cmplti	r2,r2,1
  81690c:	1000031e 	bne	r2,zero,81691c <alt_up_character_lcd_shift_cursor+0x3c>
  816910:	00800504 	movi	r2,20
  816914:	e0bfff05 	stb	r2,-4(fp)
  816918:	00000206 	br	816924 <alt_up_character_lcd_shift_cursor+0x44>
  81691c:	00c00404 	movi	r3,16
  816920:	e0ffff05 	stb	r3,-4(fp)
  816924:	e0bfff03 	ldbu	r2,-4(fp)
  816928:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  81692c:	e0fffd17 	ldw	r3,-12(fp)
  816930:	e0fffe15 	stw	r3,-8(fp)
  816934:	e0fffe17 	ldw	r3,-8(fp)
  816938:	1804403a 	cmpge	r2,r3,zero
  81693c:	1000031e 	bne	r2,zero,81694c <alt_up_character_lcd_shift_cursor+0x6c>
  816940:	e0bffe17 	ldw	r2,-8(fp)
  816944:	0085c83a 	sub	r2,zero,r2
  816948:	e0bffe15 	stw	r2,-8(fp)
  81694c:	e0fffe17 	ldw	r3,-8(fp)
  816950:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  816954:	00000306 	br	816964 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  816958:	e17ffb43 	ldbu	r5,-19(fp)
  81695c:	e13ffc17 	ldw	r4,-16(fp)
  816960:	08166840 	call	816684 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  816964:	e0bffb03 	ldbu	r2,-20(fp)
  816968:	10bfffc4 	addi	r2,r2,-1
  81696c:	e0bffb05 	stb	r2,-20(fp)
  816970:	e0bffb03 	ldbu	r2,-20(fp)
  816974:	10803fd8 	cmpnei	r2,r2,255
  816978:	103ff71e 	bne	r2,zero,816958 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  81697c:	e037883a 	mov	sp,fp
  816980:	dfc00117 	ldw	ra,4(sp)
  816984:	df000017 	ldw	fp,0(sp)
  816988:	dec00204 	addi	sp,sp,8
  81698c:	f800283a 	ret

00816990 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
  816990:	defff904 	addi	sp,sp,-28
  816994:	dfc00615 	stw	ra,24(sp)
  816998:	df000515 	stw	fp,20(sp)
  81699c:	df000504 	addi	fp,sp,20
  8169a0:	e13ffc15 	stw	r4,-16(fp)
  8169a4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
  8169a8:	e0bffd17 	ldw	r2,-12(fp)
  8169ac:	1005003a 	cmpeq	r2,r2,zero
  8169b0:	10001e1e 	bne	r2,zero,816a2c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
  8169b4:	e0bffd17 	ldw	r2,-12(fp)
  8169b8:	10800050 	cmplti	r2,r2,1
  8169bc:	1000031e 	bne	r2,zero,8169cc <alt_up_character_lcd_shift_display+0x3c>
  8169c0:	00800704 	movi	r2,28
  8169c4:	e0bfff05 	stb	r2,-4(fp)
  8169c8:	00000206 	br	8169d4 <alt_up_character_lcd_shift_display+0x44>
  8169cc:	00c00604 	movi	r3,24
  8169d0:	e0ffff05 	stb	r3,-4(fp)
  8169d4:	e0bfff03 	ldbu	r2,-4(fp)
  8169d8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
  8169dc:	e0fffd17 	ldw	r3,-12(fp)
  8169e0:	e0fffe15 	stw	r3,-8(fp)
  8169e4:	e0fffe17 	ldw	r3,-8(fp)
  8169e8:	1804403a 	cmpge	r2,r3,zero
  8169ec:	1000031e 	bne	r2,zero,8169fc <alt_up_character_lcd_shift_display+0x6c>
  8169f0:	e0bffe17 	ldw	r2,-8(fp)
  8169f4:	0085c83a 	sub	r2,zero,r2
  8169f8:	e0bffe15 	stw	r2,-8(fp)
  8169fc:	e0fffe17 	ldw	r3,-8(fp)
  816a00:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
  816a04:	00000306 	br	816a14 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
  816a08:	e17ffb43 	ldbu	r5,-19(fp)
  816a0c:	e13ffc17 	ldw	r4,-16(fp)
  816a10:	08166840 	call	816684 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  816a14:	e0bffb03 	ldbu	r2,-20(fp)
  816a18:	10bfffc4 	addi	r2,r2,-1
  816a1c:	e0bffb05 	stb	r2,-20(fp)
  816a20:	e0bffb03 	ldbu	r2,-20(fp)
  816a24:	10803fd8 	cmpnei	r2,r2,255
  816a28:	103ff71e 	bne	r2,zero,816a08 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
  816a2c:	e037883a 	mov	sp,fp
  816a30:	dfc00117 	ldw	ra,4(sp)
  816a34:	df000017 	ldw	fp,0(sp)
  816a38:	dec00204 	addi	sp,sp,8
  816a3c:	f800283a 	ret

00816a40 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
  816a40:	defff904 	addi	sp,sp,-28
  816a44:	dfc00615 	stw	ra,24(sp)
  816a48:	df000515 	stw	fp,20(sp)
  816a4c:	df000504 	addi	fp,sp,20
  816a50:	e13ffc15 	stw	r4,-16(fp)
  816a54:	e17ffd15 	stw	r5,-12(fp)
  816a58:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  816a5c:	e0bffd17 	ldw	r2,-12(fp)
  816a60:	10800a28 	cmpgeui	r2,r2,40
  816a64:	1000031e 	bne	r2,zero,816a74 <alt_up_character_lcd_erase_pos+0x34>
  816a68:	e0bffe17 	ldw	r2,-8(fp)
  816a6c:	108000b0 	cmpltui	r2,r2,2
  816a70:	1000031e 	bne	r2,zero,816a80 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
  816a74:	00bfffc4 	movi	r2,-1
  816a78:	e0bfff15 	stw	r2,-4(fp)
  816a7c:	00000e06 	br	816ab8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
  816a80:	e13ffd17 	ldw	r4,-12(fp)
  816a84:	e17ffe17 	ldw	r5,-8(fp)
  816a88:	08166080 	call	816608 <get_DDRAM_addr>
  816a8c:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
  816a90:	e17ffb03 	ldbu	r5,-20(fp)
  816a94:	e13ffc17 	ldw	r4,-16(fp)
  816a98:	08166840 	call	816684 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  816a9c:	e0bffc17 	ldw	r2,-16(fp)
  816aa0:	10800a17 	ldw	r2,40(r2)
  816aa4:	10800044 	addi	r2,r2,1
  816aa8:	1007883a 	mov	r3,r2
  816aac:	00800084 	movi	r2,2
  816ab0:	18800025 	stbio	r2,0(r3)
	return 0;
  816ab4:	e03fff15 	stw	zero,-4(fp)
  816ab8:	e0bfff17 	ldw	r2,-4(fp)
}
  816abc:	e037883a 	mov	sp,fp
  816ac0:	dfc00117 	ldw	ra,4(sp)
  816ac4:	df000017 	ldw	fp,0(sp)
  816ac8:	dec00204 	addi	sp,sp,8
  816acc:	f800283a 	ret

00816ad0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
  816ad0:	defffd04 	addi	sp,sp,-12
  816ad4:	dfc00215 	stw	ra,8(sp)
  816ad8:	df000115 	stw	fp,4(sp)
  816adc:	df000104 	addi	fp,sp,4
  816ae0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
  816ae4:	e13fff17 	ldw	r4,-4(fp)
  816ae8:	01400304 	movi	r5,12
  816aec:	08166840 	call	816684 <alt_up_character_lcd_send_cmd>
}
  816af0:	e037883a 	mov	sp,fp
  816af4:	dfc00117 	ldw	ra,4(sp)
  816af8:	df000017 	ldw	fp,0(sp)
  816afc:	dec00204 	addi	sp,sp,8
  816b00:	f800283a 	ret

00816b04 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
  816b04:	defffd04 	addi	sp,sp,-12
  816b08:	dfc00215 	stw	ra,8(sp)
  816b0c:	df000115 	stw	fp,4(sp)
  816b10:	df000104 	addi	fp,sp,4
  816b14:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
  816b18:	e13fff17 	ldw	r4,-4(fp)
  816b1c:	014003c4 	movi	r5,15
  816b20:	08166840 	call	816684 <alt_up_character_lcd_send_cmd>
}
  816b24:	e037883a 	mov	sp,fp
  816b28:	dfc00117 	ldw	ra,4(sp)
  816b2c:	df000017 	ldw	fp,0(sp)
  816b30:	dec00204 	addi	sp,sp,8
  816b34:	f800283a 	ret

00816b38 <alt_up_de0_nano_adc_open_dev>:
#define read_ch4(adc)  IORD_ALT_UP_DE0_NANO_ADC_CH_4(((adc)->base))
#define read_ch5(adc)  IORD_ALT_UP_DE0_NANO_ADC_CH_5(((adc)->base))
#define read_ch6(adc)  IORD_ALT_UP_DE0_NANO_ADC_CH_6(((adc)->base))
#define read_ch7(adc)  IORD_ALT_UP_DE0_NANO_ADC_CH_7(((adc)->base))

alt_up_de0_nano_adc_dev* alt_up_de0_nano_adc_open_dev (const char* name){
  816b38:	defffc04 	addi	sp,sp,-16
  816b3c:	dfc00315 	stw	ra,12(sp)
  816b40:	df000215 	stw	fp,8(sp)
  816b44:	df000204 	addi	fp,sp,8
  816b48:	e13fff15 	stw	r4,-4(fp)

	alt_up_de0_nano_adc_dev* dev = (alt_up_de0_nano_adc_dev*) alt_find_dev(name, &alt_dev_list);
  816b4c:	e13fff17 	ldw	r4,-4(fp)
  816b50:	014020b4 	movhi	r5,130
  816b54:	29694404 	addi	r5,r5,-23280
  816b58:	0816fe80 	call	816fe8 <alt_find_dev>
  816b5c:	e0bffe15 	stw	r2,-8(fp)
	
	return dev;
  816b60:	e0bffe17 	ldw	r2,-8(fp)
}
  816b64:	e037883a 	mov	sp,fp
  816b68:	dfc00117 	ldw	ra,4(sp)
  816b6c:	df000017 	ldw	fp,0(sp)
  816b70:	dec00204 	addi	sp,sp,8
  816b74:	f800283a 	ret

00816b78 <alt_up_de0_nano_adc_read>:

unsigned int alt_up_de0_nano_adc_read (alt_up_de0_nano_adc_dev * adc, unsigned channel){
  816b78:	defffb04 	addi	sp,sp,-20
  816b7c:	df000415 	stw	fp,16(sp)
  816b80:	df000404 	addi	fp,sp,16
  816b84:	e13ffd15 	stw	r4,-12(fp)
  816b88:	e17ffe15 	stw	r5,-8(fp)

	unsigned int ch = channel % 8;
  816b8c:	e0bffe17 	ldw	r2,-8(fp)
  816b90:	108001cc 	andi	r2,r2,7
  816b94:	e0bffc15 	stw	r2,-16(fp)
	
	switch (ch){
  816b98:	e0bffc17 	ldw	r2,-16(fp)
  816b9c:	10800228 	cmpgeui	r2,r2,8
  816ba0:	10003f1e 	bne	r2,zero,816ca0 <alt_up_de0_nano_adc_read+0x128>
  816ba4:	e0bffc17 	ldw	r2,-16(fp)
  816ba8:	1085883a 	add	r2,r2,r2
  816bac:	1087883a 	add	r3,r2,r2
  816bb0:	00802074 	movhi	r2,129
  816bb4:	109af104 	addi	r2,r2,27588
  816bb8:	1885883a 	add	r2,r3,r2
  816bbc:	10800017 	ldw	r2,0(r2)
  816bc0:	1000683a 	jmp	r2
  816bc4:	00816be4 	muli	r2,zero,1455
  816bc8:	00816bf8 	rdprs	r2,zero,1455
  816bcc:	00816c10 	cmplti	r2,zero,1456
  816bd0:	00816c28 	cmpgeui	r2,zero,1456
  816bd4:	00816c40 	call	816c4 <OSCtxSw_SWITCH_PC+0x81684>
  816bd8:	00816c58 	cmpnei	r2,zero,1457
  816bdc:	00816c70 	cmpltui	r2,zero,1457
  816be0:	00816c88 	cmpgei	r2,zero,1458
		case 0:
			return read_ch0(adc);
  816be4:	e0bffd17 	ldw	r2,-12(fp)
  816be8:	10800a17 	ldw	r2,40(r2)
  816bec:	10800037 	ldwio	r2,0(r2)
  816bf0:	e0bfff15 	stw	r2,-4(fp)
  816bf4:	00002b06 	br	816ca4 <alt_up_de0_nano_adc_read+0x12c>
		case 1:
			return read_ch1(adc);
  816bf8:	e0bffd17 	ldw	r2,-12(fp)
  816bfc:	10800a17 	ldw	r2,40(r2)
  816c00:	10800104 	addi	r2,r2,4
  816c04:	10800037 	ldwio	r2,0(r2)
  816c08:	e0bfff15 	stw	r2,-4(fp)
  816c0c:	00002506 	br	816ca4 <alt_up_de0_nano_adc_read+0x12c>
		case 2:
			return read_ch2(adc);
  816c10:	e0bffd17 	ldw	r2,-12(fp)
  816c14:	10800a17 	ldw	r2,40(r2)
  816c18:	10800204 	addi	r2,r2,8
  816c1c:	10800037 	ldwio	r2,0(r2)
  816c20:	e0bfff15 	stw	r2,-4(fp)
  816c24:	00001f06 	br	816ca4 <alt_up_de0_nano_adc_read+0x12c>
		case 3:
			return read_ch3(adc);
  816c28:	e0bffd17 	ldw	r2,-12(fp)
  816c2c:	10800a17 	ldw	r2,40(r2)
  816c30:	10800304 	addi	r2,r2,12
  816c34:	10800037 	ldwio	r2,0(r2)
  816c38:	e0bfff15 	stw	r2,-4(fp)
  816c3c:	00001906 	br	816ca4 <alt_up_de0_nano_adc_read+0x12c>
		case 4:
			return read_ch4(adc);
  816c40:	e0bffd17 	ldw	r2,-12(fp)
  816c44:	10800a17 	ldw	r2,40(r2)
  816c48:	10800404 	addi	r2,r2,16
  816c4c:	10800037 	ldwio	r2,0(r2)
  816c50:	e0bfff15 	stw	r2,-4(fp)
  816c54:	00001306 	br	816ca4 <alt_up_de0_nano_adc_read+0x12c>
		case 5:
			return read_ch5(adc);
  816c58:	e0bffd17 	ldw	r2,-12(fp)
  816c5c:	10800a17 	ldw	r2,40(r2)
  816c60:	10800504 	addi	r2,r2,20
  816c64:	10800037 	ldwio	r2,0(r2)
  816c68:	e0bfff15 	stw	r2,-4(fp)
  816c6c:	00000d06 	br	816ca4 <alt_up_de0_nano_adc_read+0x12c>
		case 6:
			return read_ch6(adc);
  816c70:	e0bffd17 	ldw	r2,-12(fp)
  816c74:	10800a17 	ldw	r2,40(r2)
  816c78:	10800604 	addi	r2,r2,24
  816c7c:	10800037 	ldwio	r2,0(r2)
  816c80:	e0bfff15 	stw	r2,-4(fp)
  816c84:	00000706 	br	816ca4 <alt_up_de0_nano_adc_read+0x12c>
		case 7:
			return read_ch7(adc);
  816c88:	e0bffd17 	ldw	r2,-12(fp)
  816c8c:	10800a17 	ldw	r2,40(r2)
  816c90:	10800704 	addi	r2,r2,28
  816c94:	10800037 	ldwio	r2,0(r2)
  816c98:	e0bfff15 	stw	r2,-4(fp)
  816c9c:	00000106 	br	816ca4 <alt_up_de0_nano_adc_read+0x12c>
		default:
			return 0;
  816ca0:	e03fff15 	stw	zero,-4(fp)
  816ca4:	e0bfff17 	ldw	r2,-4(fp)
	}
}
  816ca8:	e037883a 	mov	sp,fp
  816cac:	df000017 	ldw	fp,0(sp)
  816cb0:	dec00104 	addi	sp,sp,4
  816cb4:	f800283a 	ret

00816cb8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  816cb8:	defff404 	addi	sp,sp,-48
  816cbc:	df000b15 	stw	fp,44(sp)
  816cc0:	df000b04 	addi	fp,sp,44
  816cc4:	e13ffb15 	stw	r4,-20(fp)
  816cc8:	e17ffc15 	stw	r5,-16(fp)
  816ccc:	e1bffd15 	stw	r6,-12(fp)
  816cd0:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  816cd4:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  816cd8:	008020b4 	movhi	r2,130
  816cdc:	10a99004 	addi	r2,r2,-22976
  816ce0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
  816ce4:	1005003a 	cmpeq	r2,r2,zero
  816ce8:	1000411e 	bne	r2,zero,816df0 <alt_alarm_start+0x138>
  {
    if (alarm)
  816cec:	e0bffb17 	ldw	r2,-20(fp)
  816cf0:	1005003a 	cmpeq	r2,r2,zero
  816cf4:	10003b1e 	bne	r2,zero,816de4 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
  816cf8:	e0fffb17 	ldw	r3,-20(fp)
  816cfc:	e0bffd17 	ldw	r2,-12(fp)
  816d00:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
  816d04:	e0fffb17 	ldw	r3,-20(fp)
  816d08:	e0bffe17 	ldw	r2,-8(fp)
  816d0c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  816d10:	0005303a 	rdctl	r2,status
  816d14:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  816d18:	e0fff817 	ldw	r3,-32(fp)
  816d1c:	00bfff84 	movi	r2,-2
  816d20:	1884703a 	and	r2,r3,r2
  816d24:	1001703a 	wrctl	status,r2
  
  return context;
  816d28:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
  816d2c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  816d30:	008020b4 	movhi	r2,130
  816d34:	10a99104 	addi	r2,r2,-22972
  816d38:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
  816d3c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  816d40:	e0fffc17 	ldw	r3,-16(fp)
  816d44:	e0bff917 	ldw	r2,-28(fp)
  816d48:	1885883a 	add	r2,r3,r2
  816d4c:	10c00044 	addi	r3,r2,1
  816d50:	e0bffb17 	ldw	r2,-20(fp)
  816d54:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  816d58:	e0bffb17 	ldw	r2,-20(fp)
  816d5c:	10c00217 	ldw	r3,8(r2)
  816d60:	e0bff917 	ldw	r2,-28(fp)
  816d64:	1880042e 	bgeu	r3,r2,816d78 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
  816d68:	e0fffb17 	ldw	r3,-20(fp)
  816d6c:	00800044 	movi	r2,1
  816d70:	18800405 	stb	r2,16(r3)
  816d74:	00000206 	br	816d80 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
  816d78:	e0bffb17 	ldw	r2,-20(fp)
  816d7c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  816d80:	e0fffb17 	ldw	r3,-20(fp)
  816d84:	008020b4 	movhi	r2,130
  816d88:	10a96904 	addi	r2,r2,-23132
  816d8c:	e0bff615 	stw	r2,-40(fp)
  816d90:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  816d94:	e0fff717 	ldw	r3,-36(fp)
  816d98:	e0bff617 	ldw	r2,-40(fp)
  816d9c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  816da0:	e0bff617 	ldw	r2,-40(fp)
  816da4:	10c00017 	ldw	r3,0(r2)
  816da8:	e0bff717 	ldw	r2,-36(fp)
  816dac:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  816db0:	e0bff617 	ldw	r2,-40(fp)
  816db4:	10c00017 	ldw	r3,0(r2)
  816db8:	e0bff717 	ldw	r2,-36(fp)
  816dbc:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  816dc0:	e0fff617 	ldw	r3,-40(fp)
  816dc4:	e0bff717 	ldw	r2,-36(fp)
  816dc8:	18800015 	stw	r2,0(r3)
  816dcc:	e0bffa17 	ldw	r2,-24(fp)
  816dd0:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  816dd4:	e0bff517 	ldw	r2,-44(fp)
  816dd8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  816ddc:	e03fff15 	stw	zero,-4(fp)
  816de0:	00000506 	br	816df8 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
  816de4:	00bffa84 	movi	r2,-22
  816de8:	e0bfff15 	stw	r2,-4(fp)
  816dec:	00000206 	br	816df8 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
  816df0:	00bfde84 	movi	r2,-134
  816df4:	e0bfff15 	stw	r2,-4(fp)
  816df8:	e0bfff17 	ldw	r2,-4(fp)
  }
}
  816dfc:	e037883a 	mov	sp,fp
  816e00:	df000017 	ldw	fp,0(sp)
  816e04:	dec00104 	addi	sp,sp,4
  816e08:	f800283a 	ret

00816e0c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  816e0c:	defff904 	addi	sp,sp,-28
  816e10:	dfc00615 	stw	ra,24(sp)
  816e14:	df000515 	stw	fp,20(sp)
  816e18:	df000504 	addi	fp,sp,20
  816e1c:	e13ffd15 	stw	r4,-12(fp)
  816e20:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  816e24:	e0bffd17 	ldw	r2,-12(fp)
  816e28:	1005003a 	cmpeq	r2,r2,zero
  816e2c:	1000041e 	bne	r2,zero,816e40 <alt_dev_llist_insert+0x34>
  816e30:	e0bffd17 	ldw	r2,-12(fp)
  816e34:	10800217 	ldw	r2,8(r2)
  816e38:	1004c03a 	cmpne	r2,r2,zero
  816e3c:	1000071e 	bne	r2,zero,816e5c <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
  816e40:	0816ec00 	call	816ec0 <alt_get_errno>
  816e44:	1007883a 	mov	r3,r2
  816e48:	00800584 	movi	r2,22
  816e4c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  816e50:	00bffa84 	movi	r2,-22
  816e54:	e0bfff15 	stw	r2,-4(fp)
  816e58:	00001306 	br	816ea8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  816e5c:	e0fffd17 	ldw	r3,-12(fp)
  816e60:	e0bffe17 	ldw	r2,-8(fp)
  816e64:	e0bffb15 	stw	r2,-20(fp)
  816e68:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  816e6c:	e0fffc17 	ldw	r3,-16(fp)
  816e70:	e0bffb17 	ldw	r2,-20(fp)
  816e74:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
  816e78:	e0bffb17 	ldw	r2,-20(fp)
  816e7c:	10c00017 	ldw	r3,0(r2)
  816e80:	e0bffc17 	ldw	r2,-16(fp)
  816e84:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  816e88:	e0bffb17 	ldw	r2,-20(fp)
  816e8c:	10c00017 	ldw	r3,0(r2)
  816e90:	e0bffc17 	ldw	r2,-16(fp)
  816e94:	18800115 	stw	r2,4(r3)
  list->next           = entry;
  816e98:	e0fffb17 	ldw	r3,-20(fp)
  816e9c:	e0bffc17 	ldw	r2,-16(fp)
  816ea0:	18800015 	stw	r2,0(r3)

  return 0;  
  816ea4:	e03fff15 	stw	zero,-4(fp)
  816ea8:	e0bfff17 	ldw	r2,-4(fp)
}
  816eac:	e037883a 	mov	sp,fp
  816eb0:	dfc00117 	ldw	ra,4(sp)
  816eb4:	df000017 	ldw	fp,0(sp)
  816eb8:	dec00204 	addi	sp,sp,8
  816ebc:	f800283a 	ret

00816ec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  816ec0:	defffd04 	addi	sp,sp,-12
  816ec4:	dfc00215 	stw	ra,8(sp)
  816ec8:	df000115 	stw	fp,4(sp)
  816ecc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  816ed0:	008020b4 	movhi	r2,130
  816ed4:	10a94704 	addi	r2,r2,-23268
  816ed8:	10800017 	ldw	r2,0(r2)
  816edc:	1005003a 	cmpeq	r2,r2,zero
  816ee0:	1000061e 	bne	r2,zero,816efc <alt_get_errno+0x3c>
  816ee4:	008020b4 	movhi	r2,130
  816ee8:	10a94704 	addi	r2,r2,-23268
  816eec:	10800017 	ldw	r2,0(r2)
  816ef0:	103ee83a 	callr	r2
  816ef4:	e0bfff15 	stw	r2,-4(fp)
  816ef8:	00000306 	br	816f08 <alt_get_errno+0x48>
  816efc:	008020b4 	movhi	r2,130
  816f00:	10a96f04 	addi	r2,r2,-23108
  816f04:	e0bfff15 	stw	r2,-4(fp)
  816f08:	e0bfff17 	ldw	r2,-4(fp)
}
  816f0c:	e037883a 	mov	sp,fp
  816f10:	dfc00117 	ldw	ra,4(sp)
  816f14:	df000017 	ldw	fp,0(sp)
  816f18:	dec00204 	addi	sp,sp,8
  816f1c:	f800283a 	ret

00816f20 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  816f20:	defffd04 	addi	sp,sp,-12
  816f24:	dfc00215 	stw	ra,8(sp)
  816f28:	df000115 	stw	fp,4(sp)
  816f2c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  816f30:	00bfff04 	movi	r2,-4
  816f34:	00c020b4 	movhi	r3,130
  816f38:	18e0ff04 	addi	r3,r3,-31748
  816f3c:	1885883a 	add	r2,r3,r2
  816f40:	e0bfff15 	stw	r2,-4(fp)
  816f44:	00000606 	br	816f60 <_do_ctors+0x40>
        (*ctor) (); 
  816f48:	e0bfff17 	ldw	r2,-4(fp)
  816f4c:	10800017 	ldw	r2,0(r2)
  816f50:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  816f54:	e0bfff17 	ldw	r2,-4(fp)
  816f58:	10bfff04 	addi	r2,r2,-4
  816f5c:	e0bfff15 	stw	r2,-4(fp)
  816f60:	e0ffff17 	ldw	r3,-4(fp)
  816f64:	008020b4 	movhi	r2,130
  816f68:	10a0fe04 	addi	r2,r2,-31752
  816f6c:	18bff62e 	bgeu	r3,r2,816f48 <_do_ctors+0x28>
        (*ctor) (); 
}
  816f70:	e037883a 	mov	sp,fp
  816f74:	dfc00117 	ldw	ra,4(sp)
  816f78:	df000017 	ldw	fp,0(sp)
  816f7c:	dec00204 	addi	sp,sp,8
  816f80:	f800283a 	ret

00816f84 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  816f84:	defffd04 	addi	sp,sp,-12
  816f88:	dfc00215 	stw	ra,8(sp)
  816f8c:	df000115 	stw	fp,4(sp)
  816f90:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  816f94:	00bfff04 	movi	r2,-4
  816f98:	00c020b4 	movhi	r3,130
  816f9c:	18e0ff04 	addi	r3,r3,-31748
  816fa0:	1885883a 	add	r2,r3,r2
  816fa4:	e0bfff15 	stw	r2,-4(fp)
  816fa8:	00000606 	br	816fc4 <_do_dtors+0x40>
        (*dtor) (); 
  816fac:	e0bfff17 	ldw	r2,-4(fp)
  816fb0:	10800017 	ldw	r2,0(r2)
  816fb4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  816fb8:	e0bfff17 	ldw	r2,-4(fp)
  816fbc:	10bfff04 	addi	r2,r2,-4
  816fc0:	e0bfff15 	stw	r2,-4(fp)
  816fc4:	e0ffff17 	ldw	r3,-4(fp)
  816fc8:	008020b4 	movhi	r2,130
  816fcc:	10a0ff04 	addi	r2,r2,-31748
  816fd0:	18bff62e 	bgeu	r3,r2,816fac <_do_dtors+0x28>
        (*dtor) (); 
}
  816fd4:	e037883a 	mov	sp,fp
  816fd8:	dfc00117 	ldw	ra,4(sp)
  816fdc:	df000017 	ldw	fp,0(sp)
  816fe0:	dec00204 	addi	sp,sp,8
  816fe4:	f800283a 	ret

00816fe8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  816fe8:	defff904 	addi	sp,sp,-28
  816fec:	dfc00615 	stw	ra,24(sp)
  816ff0:	df000515 	stw	fp,20(sp)
  816ff4:	df000504 	addi	fp,sp,20
  816ff8:	e13ffd15 	stw	r4,-12(fp)
  816ffc:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
  817000:	e0bffe17 	ldw	r2,-8(fp)
  817004:	10800017 	ldw	r2,0(r2)
  817008:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  81700c:	e13ffd17 	ldw	r4,-12(fp)
  817010:	080329c0 	call	80329c <strlen>
  817014:	10800044 	addi	r2,r2,1
  817018:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  81701c:	00000d06 	br	817054 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  817020:	e0bffc17 	ldw	r2,-16(fp)
  817024:	11000217 	ldw	r4,8(r2)
  817028:	e1bffb17 	ldw	r6,-20(fp)
  81702c:	e17ffd17 	ldw	r5,-12(fp)
  817030:	081809c0 	call	81809c <memcmp>
  817034:	1004c03a 	cmpne	r2,r2,zero
  817038:	1000031e 	bne	r2,zero,817048 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  81703c:	e0bffc17 	ldw	r2,-16(fp)
  817040:	e0bfff15 	stw	r2,-4(fp)
  817044:	00000706 	br	817064 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  817048:	e0bffc17 	ldw	r2,-16(fp)
  81704c:	10800017 	ldw	r2,0(r2)
  817050:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  817054:	e0fffe17 	ldw	r3,-8(fp)
  817058:	e0bffc17 	ldw	r2,-16(fp)
  81705c:	10fff01e 	bne	r2,r3,817020 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  817060:	e03fff15 	stw	zero,-4(fp)
  817064:	e0bfff17 	ldw	r2,-4(fp)
}
  817068:	e037883a 	mov	sp,fp
  81706c:	dfc00117 	ldw	ra,4(sp)
  817070:	df000017 	ldw	fp,0(sp)
  817074:	dec00204 	addi	sp,sp,8
  817078:	f800283a 	ret

0081707c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  81707c:	defff904 	addi	sp,sp,-28
  817080:	dfc00615 	stw	ra,24(sp)
  817084:	df000515 	stw	fp,20(sp)
  817088:	df000504 	addi	fp,sp,20
  81708c:	e13ffc15 	stw	r4,-16(fp)
  817090:	e17ffd15 	stw	r5,-12(fp)
  817094:	e1bffe15 	stw	r6,-8(fp)
  817098:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  81709c:	e0800217 	ldw	r2,8(fp)
  8170a0:	d8800015 	stw	r2,0(sp)
  8170a4:	e13ffc17 	ldw	r4,-16(fp)
  8170a8:	e17ffd17 	ldw	r5,-12(fp)
  8170ac:	e1bffe17 	ldw	r6,-8(fp)
  8170b0:	e1ffff17 	ldw	r7,-4(fp)
  8170b4:	08172500 	call	817250 <alt_iic_isr_register>
}  
  8170b8:	e037883a 	mov	sp,fp
  8170bc:	dfc00117 	ldw	ra,4(sp)
  8170c0:	df000017 	ldw	fp,0(sp)
  8170c4:	dec00204 	addi	sp,sp,8
  8170c8:	f800283a 	ret

008170cc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  8170cc:	defff904 	addi	sp,sp,-28
  8170d0:	df000615 	stw	fp,24(sp)
  8170d4:	df000604 	addi	fp,sp,24
  8170d8:	e13ffe15 	stw	r4,-8(fp)
  8170dc:	e17fff15 	stw	r5,-4(fp)
  8170e0:	e0bfff17 	ldw	r2,-4(fp)
  8170e4:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8170e8:	0005303a 	rdctl	r2,status
  8170ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8170f0:	e0fffb17 	ldw	r3,-20(fp)
  8170f4:	00bfff84 	movi	r2,-2
  8170f8:	1884703a 	and	r2,r3,r2
  8170fc:	1001703a 	wrctl	status,r2
  
  return context;
  817100:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  817104:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
  817108:	e0fffc17 	ldw	r3,-16(fp)
  81710c:	00800044 	movi	r2,1
  817110:	10c4983a 	sll	r2,r2,r3
  817114:	1007883a 	mov	r3,r2
  817118:	008020b4 	movhi	r2,130
  81711c:	10a98f04 	addi	r2,r2,-22980
  817120:	10800017 	ldw	r2,0(r2)
  817124:	1886b03a 	or	r3,r3,r2
  817128:	008020b4 	movhi	r2,130
  81712c:	10a98f04 	addi	r2,r2,-22980
  817130:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  817134:	008020b4 	movhi	r2,130
  817138:	10a98f04 	addi	r2,r2,-22980
  81713c:	10800017 	ldw	r2,0(r2)
  817140:	100170fa 	wrctl	ienable,r2
  817144:	e0bffd17 	ldw	r2,-12(fp)
  817148:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  81714c:	e0bffa17 	ldw	r2,-24(fp)
  817150:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  817154:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
  817158:	e037883a 	mov	sp,fp
  81715c:	df000017 	ldw	fp,0(sp)
  817160:	dec00104 	addi	sp,sp,4
  817164:	f800283a 	ret

00817168 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  817168:	defff904 	addi	sp,sp,-28
  81716c:	df000615 	stw	fp,24(sp)
  817170:	df000604 	addi	fp,sp,24
  817174:	e13ffe15 	stw	r4,-8(fp)
  817178:	e17fff15 	stw	r5,-4(fp)
  81717c:	e0bfff17 	ldw	r2,-4(fp)
  817180:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  817184:	0005303a 	rdctl	r2,status
  817188:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81718c:	e0fffb17 	ldw	r3,-20(fp)
  817190:	00bfff84 	movi	r2,-2
  817194:	1884703a 	and	r2,r3,r2
  817198:	1001703a 	wrctl	status,r2
  
  return context;
  81719c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  8171a0:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
  8171a4:	e0fffc17 	ldw	r3,-16(fp)
  8171a8:	00800044 	movi	r2,1
  8171ac:	10c4983a 	sll	r2,r2,r3
  8171b0:	0084303a 	nor	r2,zero,r2
  8171b4:	1007883a 	mov	r3,r2
  8171b8:	008020b4 	movhi	r2,130
  8171bc:	10a98f04 	addi	r2,r2,-22980
  8171c0:	10800017 	ldw	r2,0(r2)
  8171c4:	1886703a 	and	r3,r3,r2
  8171c8:	008020b4 	movhi	r2,130
  8171cc:	10a98f04 	addi	r2,r2,-22980
  8171d0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  8171d4:	008020b4 	movhi	r2,130
  8171d8:	10a98f04 	addi	r2,r2,-22980
  8171dc:	10800017 	ldw	r2,0(r2)
  8171e0:	100170fa 	wrctl	ienable,r2
  8171e4:	e0bffd17 	ldw	r2,-12(fp)
  8171e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8171ec:	e0bffa17 	ldw	r2,-24(fp)
  8171f0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  8171f4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
  8171f8:	e037883a 	mov	sp,fp
  8171fc:	df000017 	ldw	fp,0(sp)
  817200:	dec00104 	addi	sp,sp,4
  817204:	f800283a 	ret

00817208 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  817208:	defffc04 	addi	sp,sp,-16
  81720c:	df000315 	stw	fp,12(sp)
  817210:	df000304 	addi	fp,sp,12
  817214:	e13ffe15 	stw	r4,-8(fp)
  817218:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  81721c:	000530fa 	rdctl	r2,ienable
  817220:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  817224:	e0ffff17 	ldw	r3,-4(fp)
  817228:	00800044 	movi	r2,1
  81722c:	10c4983a 	sll	r2,r2,r3
  817230:	1007883a 	mov	r3,r2
  817234:	e0bffd17 	ldw	r2,-12(fp)
  817238:	1884703a 	and	r2,r3,r2
  81723c:	1004c03a 	cmpne	r2,r2,zero
}
  817240:	e037883a 	mov	sp,fp
  817244:	df000017 	ldw	fp,0(sp)
  817248:	dec00104 	addi	sp,sp,4
  81724c:	f800283a 	ret

00817250 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  817250:	defff404 	addi	sp,sp,-48
  817254:	dfc00b15 	stw	ra,44(sp)
  817258:	df000a15 	stw	fp,40(sp)
  81725c:	df000a04 	addi	fp,sp,40
  817260:	e13ffb15 	stw	r4,-20(fp)
  817264:	e17ffc15 	stw	r5,-16(fp)
  817268:	e1bffd15 	stw	r6,-12(fp)
  81726c:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
  817270:	00bffa84 	movi	r2,-22
  817274:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  817278:	e0bffc17 	ldw	r2,-16(fp)
  81727c:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  817280:	e0bff917 	ldw	r2,-28(fp)
  817284:	10800808 	cmpgei	r2,r2,32
  817288:	1000291e 	bne	r2,zero,817330 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81728c:	0005303a 	rdctl	r2,status
  817290:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817294:	e0fff717 	ldw	r3,-36(fp)
  817298:	00bfff84 	movi	r2,-2
  81729c:	1884703a 	and	r2,r3,r2
  8172a0:	1001703a 	wrctl	status,r2
  
  return context;
  8172a4:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  8172a8:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
  8172ac:	e0bff917 	ldw	r2,-28(fp)
  8172b0:	00c020b4 	movhi	r3,130
  8172b4:	18fe2504 	addi	r3,r3,-1900
  8172b8:	100490fa 	slli	r2,r2,3
  8172bc:	10c7883a 	add	r3,r2,r3
  8172c0:	e0bffd17 	ldw	r2,-12(fp)
  8172c4:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
  8172c8:	e0bff917 	ldw	r2,-28(fp)
  8172cc:	00c020b4 	movhi	r3,130
  8172d0:	18fe2504 	addi	r3,r3,-1900
  8172d4:	100490fa 	slli	r2,r2,3
  8172d8:	10c5883a 	add	r2,r2,r3
  8172dc:	10c00104 	addi	r3,r2,4
  8172e0:	e0bffe17 	ldw	r2,-8(fp)
  8172e4:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  8172e8:	e0bffd17 	ldw	r2,-12(fp)
  8172ec:	1005003a 	cmpeq	r2,r2,zero
  8172f0:	1000051e 	bne	r2,zero,817308 <alt_iic_isr_register+0xb8>
  8172f4:	e17ff917 	ldw	r5,-28(fp)
  8172f8:	e13ffb17 	ldw	r4,-20(fp)
  8172fc:	08170cc0 	call	8170cc <alt_ic_irq_enable>
  817300:	e0bfff15 	stw	r2,-4(fp)
  817304:	00000406 	br	817318 <alt_iic_isr_register+0xc8>
  817308:	e17ff917 	ldw	r5,-28(fp)
  81730c:	e13ffb17 	ldw	r4,-20(fp)
  817310:	08171680 	call	817168 <alt_ic_irq_disable>
  817314:	e0bfff15 	stw	r2,-4(fp)
  817318:	e0bfff17 	ldw	r2,-4(fp)
  81731c:	e0bffa15 	stw	r2,-24(fp)
  817320:	e0bff817 	ldw	r2,-32(fp)
  817324:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  817328:	e0bff617 	ldw	r2,-40(fp)
  81732c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  817330:	e0bffa17 	ldw	r2,-24(fp)
}
  817334:	e037883a 	mov	sp,fp
  817338:	dfc00117 	ldw	ra,4(sp)
  81733c:	df000017 	ldw	fp,0(sp)
  817340:	dec00204 	addi	sp,sp,8
  817344:	f800283a 	ret

00817348 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  817348:	defff804 	addi	sp,sp,-32
  81734c:	dfc00715 	stw	ra,28(sp)
  817350:	df000615 	stw	fp,24(sp)
  817354:	dc000515 	stw	r16,20(sp)
  817358:	df000504 	addi	fp,sp,20
  81735c:	e13ffc15 	stw	r4,-16(fp)
  817360:	e17ffd15 	stw	r5,-12(fp)
  817364:	e1bffe15 	stw	r6,-8(fp)
  817368:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  81736c:	e13ffd17 	ldw	r4,-12(fp)
  817370:	e17ffe17 	ldw	r5,-8(fp)
  817374:	e1bfff17 	ldw	r6,-4(fp)
  817378:	08175900 	call	817590 <open>
  81737c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  817380:	e0bffb17 	ldw	r2,-20(fp)
  817384:	1004803a 	cmplt	r2,r2,zero
  817388:	10001f1e 	bne	r2,zero,817408 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
  81738c:	e13ffb17 	ldw	r4,-20(fp)
  817390:	040020b4 	movhi	r16,130
  817394:	8424ab04 	addi	r16,r16,-27988
  817398:	01400304 	movi	r5,12
  81739c:	08019440 	call	801944 <__mulsi3>
  8173a0:	1405883a 	add	r2,r2,r16
  8173a4:	10c00017 	ldw	r3,0(r2)
  8173a8:	e0bffc17 	ldw	r2,-16(fp)
  8173ac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  8173b0:	e13ffb17 	ldw	r4,-20(fp)
  8173b4:	040020b4 	movhi	r16,130
  8173b8:	8424ab04 	addi	r16,r16,-27988
  8173bc:	01400304 	movi	r5,12
  8173c0:	08019440 	call	801944 <__mulsi3>
  8173c4:	1405883a 	add	r2,r2,r16
  8173c8:	10800104 	addi	r2,r2,4
  8173cc:	10c00017 	ldw	r3,0(r2)
  8173d0:	e0bffc17 	ldw	r2,-16(fp)
  8173d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  8173d8:	e13ffb17 	ldw	r4,-20(fp)
  8173dc:	040020b4 	movhi	r16,130
  8173e0:	8424ab04 	addi	r16,r16,-27988
  8173e4:	01400304 	movi	r5,12
  8173e8:	08019440 	call	801944 <__mulsi3>
  8173ec:	1405883a 	add	r2,r2,r16
  8173f0:	10800204 	addi	r2,r2,8
  8173f4:	10c00017 	ldw	r3,0(r2)
  8173f8:	e0bffc17 	ldw	r2,-16(fp)
  8173fc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  817400:	e13ffb17 	ldw	r4,-20(fp)
  817404:	080ce3c0 	call	80ce3c <alt_release_fd>
  }
} 
  817408:	e037883a 	mov	sp,fp
  81740c:	dfc00217 	ldw	ra,8(sp)
  817410:	df000117 	ldw	fp,4(sp)
  817414:	dc000017 	ldw	r16,0(sp)
  817418:	dec00304 	addi	sp,sp,12
  81741c:	f800283a 	ret

00817420 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  817420:	defffb04 	addi	sp,sp,-20
  817424:	dfc00415 	stw	ra,16(sp)
  817428:	df000315 	stw	fp,12(sp)
  81742c:	df000304 	addi	fp,sp,12
  817430:	e13ffd15 	stw	r4,-12(fp)
  817434:	e17ffe15 	stw	r5,-8(fp)
  817438:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  81743c:	010020b4 	movhi	r4,130
  817440:	2124ae04 	addi	r4,r4,-27976
  817444:	e17ffd17 	ldw	r5,-12(fp)
  817448:	01800044 	movi	r6,1
  81744c:	01c07fc4 	movi	r7,511
  817450:	08173480 	call	817348 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  817454:	010020b4 	movhi	r4,130
  817458:	2124ab04 	addi	r4,r4,-27988
  81745c:	e17ffe17 	ldw	r5,-8(fp)
  817460:	000d883a 	mov	r6,zero
  817464:	01c07fc4 	movi	r7,511
  817468:	08173480 	call	817348 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  81746c:	010020b4 	movhi	r4,130
  817470:	2124b104 	addi	r4,r4,-27964
  817474:	e17fff17 	ldw	r5,-4(fp)
  817478:	01800044 	movi	r6,1
  81747c:	01c07fc4 	movi	r7,511
  817480:	08173480 	call	817348 <alt_open_fd>
}  
  817484:	e037883a 	mov	sp,fp
  817488:	dfc00117 	ldw	ra,4(sp)
  81748c:	df000017 	ldw	fp,0(sp)
  817490:	dec00204 	addi	sp,sp,8
  817494:	f800283a 	ret

00817498 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  817498:	defffa04 	addi	sp,sp,-24
  81749c:	dfc00515 	stw	ra,20(sp)
  8174a0:	df000415 	stw	fp,16(sp)
  8174a4:	dc000315 	stw	r16,12(sp)
  8174a8:	df000304 	addi	fp,sp,12
  8174ac:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8174b0:	e0bffe17 	ldw	r2,-8(fp)
  8174b4:	10800217 	ldw	r2,8(r2)
  8174b8:	10d00034 	orhi	r3,r2,16384
  8174bc:	e0bffe17 	ldw	r2,-8(fp)
  8174c0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8174c4:	e03ffd15 	stw	zero,-12(fp)
  8174c8:	00002306 	br	817558 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8174cc:	e13ffd17 	ldw	r4,-12(fp)
  8174d0:	040020b4 	movhi	r16,130
  8174d4:	8424ab04 	addi	r16,r16,-27988
  8174d8:	01400304 	movi	r5,12
  8174dc:	08019440 	call	801944 <__mulsi3>
  8174e0:	1405883a 	add	r2,r2,r16
  8174e4:	10c00017 	ldw	r3,0(r2)
  8174e8:	e0bffe17 	ldw	r2,-8(fp)
  8174ec:	10800017 	ldw	r2,0(r2)
  8174f0:	1880161e 	bne	r3,r2,81754c <alt_file_locked+0xb4>
  8174f4:	e13ffd17 	ldw	r4,-12(fp)
  8174f8:	040020b4 	movhi	r16,130
  8174fc:	8424ab04 	addi	r16,r16,-27988
  817500:	01400304 	movi	r5,12
  817504:	08019440 	call	801944 <__mulsi3>
  817508:	1405883a 	add	r2,r2,r16
  81750c:	10800204 	addi	r2,r2,8
  817510:	10800017 	ldw	r2,0(r2)
  817514:	1004403a 	cmpge	r2,r2,zero
  817518:	10000c1e 	bne	r2,zero,81754c <alt_file_locked+0xb4>
  81751c:	e13ffd17 	ldw	r4,-12(fp)
  817520:	01400304 	movi	r5,12
  817524:	08019440 	call	801944 <__mulsi3>
  817528:	1007883a 	mov	r3,r2
  81752c:	008020b4 	movhi	r2,130
  817530:	10a4ab04 	addi	r2,r2,-27988
  817534:	1887883a 	add	r3,r3,r2
  817538:	e0bffe17 	ldw	r2,-8(fp)
  81753c:	18800326 	beq	r3,r2,81754c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  817540:	00bffcc4 	movi	r2,-13
  817544:	e0bfff15 	stw	r2,-4(fp)
  817548:	00000a06 	br	817574 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  81754c:	e0bffd17 	ldw	r2,-12(fp)
  817550:	10800044 	addi	r2,r2,1
  817554:	e0bffd15 	stw	r2,-12(fp)
  817558:	008020b4 	movhi	r2,130
  81755c:	10a94604 	addi	r2,r2,-23272
  817560:	10800017 	ldw	r2,0(r2)
  817564:	1007883a 	mov	r3,r2
  817568:	e0bffd17 	ldw	r2,-12(fp)
  81756c:	18bfd72e 	bgeu	r3,r2,8174cc <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  817570:	e03fff15 	stw	zero,-4(fp)
  817574:	e0bfff17 	ldw	r2,-4(fp)
}
  817578:	e037883a 	mov	sp,fp
  81757c:	dfc00217 	ldw	ra,8(sp)
  817580:	df000117 	ldw	fp,4(sp)
  817584:	dc000017 	ldw	r16,0(sp)
  817588:	dec00304 	addi	sp,sp,12
  81758c:	f800283a 	ret

00817590 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  817590:	defff404 	addi	sp,sp,-48
  817594:	dfc00b15 	stw	ra,44(sp)
  817598:	df000a15 	stw	fp,40(sp)
  81759c:	df000a04 	addi	fp,sp,40
  8175a0:	e13ffb15 	stw	r4,-20(fp)
  8175a4:	e17ffc15 	stw	r5,-16(fp)
  8175a8:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8175ac:	00bfffc4 	movi	r2,-1
  8175b0:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
  8175b4:	00bffb44 	movi	r2,-19
  8175b8:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
  8175bc:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8175c0:	e13ffb17 	ldw	r4,-20(fp)
  8175c4:	014020b4 	movhi	r5,130
  8175c8:	29694404 	addi	r5,r5,-23280
  8175cc:	0816fe80 	call	816fe8 <alt_find_dev>
  8175d0:	e0bffa15 	stw	r2,-24(fp)
  8175d4:	e0bffa17 	ldw	r2,-24(fp)
  8175d8:	1004c03a 	cmpne	r2,r2,zero
  8175dc:	1000051e 	bne	r2,zero,8175f4 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8175e0:	e13ffb17 	ldw	r4,-20(fp)
  8175e4:	0817e2c0 	call	817e2c <alt_find_file>
  8175e8:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
  8175ec:	00800044 	movi	r2,1
  8175f0:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8175f4:	e0bffa17 	ldw	r2,-24(fp)
  8175f8:	1005003a 	cmpeq	r2,r2,zero
  8175fc:	1000311e 	bne	r2,zero,8176c4 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
  817600:	e13ffa17 	ldw	r4,-24(fp)
  817604:	0817f4c0 	call	817f4c <alt_get_fd>
  817608:	e0bff815 	stw	r2,-32(fp)
  81760c:	e0bff817 	ldw	r2,-32(fp)
  817610:	1004403a 	cmpge	r2,r2,zero
  817614:	1000031e 	bne	r2,zero,817624 <open+0x94>
    {
      status = index;
  817618:	e0bff817 	ldw	r2,-32(fp)
  81761c:	e0bff715 	stw	r2,-36(fp)
  817620:	00002a06 	br	8176cc <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
  817624:	e13ff817 	ldw	r4,-32(fp)
  817628:	01400304 	movi	r5,12
  81762c:	08019440 	call	801944 <__mulsi3>
  817630:	1007883a 	mov	r3,r2
  817634:	008020b4 	movhi	r2,130
  817638:	10a4ab04 	addi	r2,r2,-27988
  81763c:	1885883a 	add	r2,r3,r2
  817640:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  817644:	e0fffc17 	ldw	r3,-16(fp)
  817648:	00900034 	movhi	r2,16384
  81764c:	10bfffc4 	addi	r2,r2,-1
  817650:	1886703a 	and	r3,r3,r2
  817654:	e0bff917 	ldw	r2,-28(fp)
  817658:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  81765c:	e0bff617 	ldw	r2,-40(fp)
  817660:	1004c03a 	cmpne	r2,r2,zero
  817664:	1000061e 	bne	r2,zero,817680 <open+0xf0>
  817668:	e13ff917 	ldw	r4,-28(fp)
  81766c:	08174980 	call	817498 <alt_file_locked>
  817670:	e0bff715 	stw	r2,-36(fp)
  817674:	e0bff717 	ldw	r2,-36(fp)
  817678:	1004803a 	cmplt	r2,r2,zero
  81767c:	1000131e 	bne	r2,zero,8176cc <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  817680:	e0bffa17 	ldw	r2,-24(fp)
  817684:	10800317 	ldw	r2,12(r2)
  817688:	1005003a 	cmpeq	r2,r2,zero
  81768c:	1000091e 	bne	r2,zero,8176b4 <open+0x124>
  817690:	e0bffa17 	ldw	r2,-24(fp)
  817694:	10800317 	ldw	r2,12(r2)
  817698:	e13ff917 	ldw	r4,-28(fp)
  81769c:	e17ffb17 	ldw	r5,-20(fp)
  8176a0:	e1bffc17 	ldw	r6,-16(fp)
  8176a4:	e1fffd17 	ldw	r7,-12(fp)
  8176a8:	103ee83a 	callr	r2
  8176ac:	e0bfff15 	stw	r2,-4(fp)
  8176b0:	00000106 	br	8176b8 <open+0x128>
  8176b4:	e03fff15 	stw	zero,-4(fp)
  8176b8:	e0bfff17 	ldw	r2,-4(fp)
  8176bc:	e0bff715 	stw	r2,-36(fp)
  8176c0:	00000206 	br	8176cc <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
  8176c4:	00bffb44 	movi	r2,-19
  8176c8:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8176cc:	e0bff717 	ldw	r2,-36(fp)
  8176d0:	1004403a 	cmpge	r2,r2,zero
  8176d4:	1000091e 	bne	r2,zero,8176fc <open+0x16c>
  {
    alt_release_fd (index);  
  8176d8:	e13ff817 	ldw	r4,-32(fp)
  8176dc:	080ce3c0 	call	80ce3c <alt_release_fd>
    ALT_ERRNO = -status;
  8176e0:	081771c0 	call	81771c <alt_get_errno>
  8176e4:	e0fff717 	ldw	r3,-36(fp)
  8176e8:	00c7c83a 	sub	r3,zero,r3
  8176ec:	10c00015 	stw	r3,0(r2)
    return -1;
  8176f0:	00bfffc4 	movi	r2,-1
  8176f4:	e0bffe15 	stw	r2,-8(fp)
  8176f8:	00000206 	br	817704 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
  8176fc:	e0bff817 	ldw	r2,-32(fp)
  817700:	e0bffe15 	stw	r2,-8(fp)
  817704:	e0bffe17 	ldw	r2,-8(fp)
}
  817708:	e037883a 	mov	sp,fp
  81770c:	dfc00117 	ldw	ra,4(sp)
  817710:	df000017 	ldw	fp,0(sp)
  817714:	dec00204 	addi	sp,sp,8
  817718:	f800283a 	ret

0081771c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  81771c:	defffd04 	addi	sp,sp,-12
  817720:	dfc00215 	stw	ra,8(sp)
  817724:	df000115 	stw	fp,4(sp)
  817728:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
  81772c:	008020b4 	movhi	r2,130
  817730:	10a94704 	addi	r2,r2,-23268
  817734:	10800017 	ldw	r2,0(r2)
  817738:	1005003a 	cmpeq	r2,r2,zero
  81773c:	1000061e 	bne	r2,zero,817758 <alt_get_errno+0x3c>
  817740:	008020b4 	movhi	r2,130
  817744:	10a94704 	addi	r2,r2,-23268
  817748:	10800017 	ldw	r2,0(r2)
  81774c:	103ee83a 	callr	r2
  817750:	e0bfff15 	stw	r2,-4(fp)
  817754:	00000306 	br	817764 <alt_get_errno+0x48>
  817758:	008020b4 	movhi	r2,130
  81775c:	10a96f04 	addi	r2,r2,-23108
  817760:	e0bfff15 	stw	r2,-4(fp)
  817764:	e0bfff17 	ldw	r2,-4(fp)
}
  817768:	e037883a 	mov	sp,fp
  81776c:	dfc00117 	ldw	ra,4(sp)
  817770:	df000017 	ldw	fp,0(sp)
  817774:	dec00204 	addi	sp,sp,8
  817778:	f800283a 	ret

0081777c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  81777c:	defffa04 	addi	sp,sp,-24
  817780:	df000515 	stw	fp,20(sp)
  817784:	df000504 	addi	fp,sp,20
  817788:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  81778c:	0005303a 	rdctl	r2,status
  817790:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  817794:	e0fffd17 	ldw	r3,-12(fp)
  817798:	00bfff84 	movi	r2,-2
  81779c:	1884703a 	and	r2,r3,r2
  8177a0:	1001703a 	wrctl	status,r2
  
  return context;
  8177a4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  8177a8:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
  8177ac:	e0bfff17 	ldw	r2,-4(fp)
  8177b0:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  8177b4:	e0bffc17 	ldw	r2,-16(fp)
  8177b8:	10c00017 	ldw	r3,0(r2)
  8177bc:	e0bffc17 	ldw	r2,-16(fp)
  8177c0:	10800117 	ldw	r2,4(r2)
  8177c4:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
  8177c8:	e0bffc17 	ldw	r2,-16(fp)
  8177cc:	10c00117 	ldw	r3,4(r2)
  8177d0:	e0bffc17 	ldw	r2,-16(fp)
  8177d4:	10800017 	ldw	r2,0(r2)
  8177d8:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8177dc:	e0fffc17 	ldw	r3,-16(fp)
  8177e0:	e0bffc17 	ldw	r2,-16(fp)
  8177e4:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
  8177e8:	e0fffc17 	ldw	r3,-16(fp)
  8177ec:	e0bffc17 	ldw	r2,-16(fp)
  8177f0:	18800015 	stw	r2,0(r3)
  8177f4:	e0bffe17 	ldw	r2,-8(fp)
  8177f8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8177fc:	e0bffb17 	ldw	r2,-20(fp)
  817800:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  817804:	e037883a 	mov	sp,fp
  817808:	df000017 	ldw	fp,0(sp)
  81780c:	dec00104 	addi	sp,sp,4
  817810:	f800283a 	ret

00817814 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  817814:	defffb04 	addi	sp,sp,-20
  817818:	dfc00415 	stw	ra,16(sp)
  81781c:	df000315 	stw	fp,12(sp)
  817820:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  817824:	d0a02d17 	ldw	r2,-32588(gp)
  817828:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  81782c:	d0a05517 	ldw	r2,-32428(gp)
  817830:	10800044 	addi	r2,r2,1
  817834:	d0a05515 	stw	r2,-32428(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  817838:	00003106 	br	817900 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
  81783c:	e0bffe17 	ldw	r2,-8(fp)
  817840:	10800017 	ldw	r2,0(r2)
  817844:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  817848:	e0bffe17 	ldw	r2,-8(fp)
  81784c:	10800403 	ldbu	r2,16(r2)
  817850:	10803fcc 	andi	r2,r2,255
  817854:	1005003a 	cmpeq	r2,r2,zero
  817858:	1000051e 	bne	r2,zero,817870 <alt_tick+0x5c>
  81785c:	d0a05517 	ldw	r2,-32428(gp)
  817860:	1004c03a 	cmpne	r2,r2,zero
  817864:	1000021e 	bne	r2,zero,817870 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
  817868:	e0bffe17 	ldw	r2,-8(fp)
  81786c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  817870:	e0bffe17 	ldw	r2,-8(fp)
  817874:	10c00217 	ldw	r3,8(r2)
  817878:	d0a05517 	ldw	r2,-32428(gp)
  81787c:	10c01e36 	bltu	r2,r3,8178f8 <alt_tick+0xe4>
  817880:	e0bffe17 	ldw	r2,-8(fp)
  817884:	10800403 	ldbu	r2,16(r2)
  817888:	10803fcc 	andi	r2,r2,255
  81788c:	1004c03a 	cmpne	r2,r2,zero
  817890:	1000191e 	bne	r2,zero,8178f8 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
  817894:	e0bffe17 	ldw	r2,-8(fp)
  817898:	10c00317 	ldw	r3,12(r2)
  81789c:	e0bffe17 	ldw	r2,-8(fp)
  8178a0:	11000517 	ldw	r4,20(r2)
  8178a4:	183ee83a 	callr	r3
  8178a8:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  8178ac:	e0bffd17 	ldw	r2,-12(fp)
  8178b0:	1004c03a 	cmpne	r2,r2,zero
  8178b4:	1000031e 	bne	r2,zero,8178c4 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
  8178b8:	e13ffe17 	ldw	r4,-8(fp)
  8178bc:	081777c0 	call	81777c <alt_alarm_stop>
  8178c0:	00000d06 	br	8178f8 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
  8178c4:	e0bffe17 	ldw	r2,-8(fp)
  8178c8:	10c00217 	ldw	r3,8(r2)
  8178cc:	e0bffd17 	ldw	r2,-12(fp)
  8178d0:	1887883a 	add	r3,r3,r2
  8178d4:	e0bffe17 	ldw	r2,-8(fp)
  8178d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8178dc:	e0bffe17 	ldw	r2,-8(fp)
  8178e0:	10c00217 	ldw	r3,8(r2)
  8178e4:	d0a05517 	ldw	r2,-32428(gp)
  8178e8:	1880032e 	bgeu	r3,r2,8178f8 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
  8178ec:	e0fffe17 	ldw	r3,-8(fp)
  8178f0:	00800044 	movi	r2,1
  8178f4:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
  8178f8:	e0bfff17 	ldw	r2,-4(fp)
  8178fc:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  817900:	d0e02d04 	addi	r3,gp,-32588
  817904:	e0bffe17 	ldw	r2,-8(fp)
  817908:	10ffcc1e 	bne	r2,r3,81783c <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  81790c:	080e1580 	call	80e158 <OSTimeTick>
}
  817910:	e037883a 	mov	sp,fp
  817914:	dfc00117 	ldw	ra,4(sp)
  817918:	df000017 	ldw	fp,0(sp)
  81791c:	dec00204 	addi	sp,sp,8
  817920:	f800283a 	ret

00817924 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
  817924:	deffff04 	addi	sp,sp,-4
  817928:	df000015 	stw	fp,0(sp)
  81792c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  817930:	000170fa 	wrctl	ienable,zero
}
  817934:	e037883a 	mov	sp,fp
  817938:	df000017 	ldw	fp,0(sp)
  81793c:	dec00104 	addi	sp,sp,4
  817940:	f800283a 	ret

00817944 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
  817944:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
  817948:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
  81794c:	d1204e17 	ldw	r4,-32456(gp)

      stw ra,  0(sp)
  817950:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
  817954:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
  817958:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
  81795c:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
  817960:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
  817964:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
  817968:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
  81796c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
  817970:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
  817974:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
  817978:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
  81797c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  817980:	0817d640 	call	817d64 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
  817984:	d1204917 	ldw	r4,-32476(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
  817988:	d1604107 	ldb	r5,-32508(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
  81798c:	d1204e15 	stw	r4,-32456(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
  817990:	d1604145 	stb	r5,-32507(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
  817994:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
  817998:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
  81799c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
  8179a0:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
  8179a4:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
  8179a8:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
  8179ac:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
  8179b0:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
  8179b4:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
  8179b8:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
  8179bc:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
  8179c0:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
  8179c4:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
  8179c8:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
  8179cc:	f800283a 	ret

008179d0 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
  8179d0:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
  8179d4:	047fff84 	movi	r17,-2
      and   r18, r18, r17
  8179d8:	9464703a 	and	r18,r18,r17
      wrctl status, r18
  8179dc:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
  8179e0:	0817d640 	call	817d64 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
  8179e4:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
  8179e8:	d4a03f45 	stb	r18,-32515(gp)

      /*
       * start execution of the new task.
       */

      br 9b
  8179ec:	003fe506 	br	817984 <OSCtxSw+0x40>

008179f0 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
  8179f0:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
  8179f4:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
  8179f8:	10800054 	ori	r2,r2,1
      wrctl status, r2
  8179fc:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
  817a00:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
  817a04:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
  817a08:	dec00204 	addi	sp,sp,8

      callr r2
  817a0c:	103ee83a 	callr	r2

      nop
  817a10:	0001883a 	nop

00817a14 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
  817a14:	defff704 	addi	sp,sp,-36
  817a18:	dfc00815 	stw	ra,32(sp)
  817a1c:	df000715 	stw	fp,28(sp)
  817a20:	df000704 	addi	fp,sp,28
  817a24:	e13ffc15 	stw	r4,-16(fp)
  817a28:	e17ffd15 	stw	r5,-12(fp)
  817a2c:	e1bffe15 	stw	r6,-8(fp)
  817a30:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
  817a34:	e0bffe17 	ldw	r2,-8(fp)
  817a38:	1007883a 	mov	r3,r2
  817a3c:	00bfff04 	movi	r2,-4
  817a40:	1884703a 	and	r2,r3,r2
  817a44:	10bf0004 	addi	r2,r2,-1024
  817a48:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
  817a4c:	e0bff917 	ldw	r2,-28(fp)
  817a50:	10000015 	stw	zero,0(r2)
  817a54:	e0bff917 	ldw	r2,-28(fp)
  817a58:	10c0bb04 	addi	r3,r2,748
  817a5c:	e0bff917 	ldw	r2,-28(fp)
  817a60:	10c00115 	stw	r3,4(r2)
  817a64:	e0bff917 	ldw	r2,-28(fp)
  817a68:	1080bb04 	addi	r2,r2,748
  817a6c:	10c01704 	addi	r3,r2,92
  817a70:	e0bff917 	ldw	r2,-28(fp)
  817a74:	10c00215 	stw	r3,8(r2)
  817a78:	e0bff917 	ldw	r2,-28(fp)
  817a7c:	1080bb04 	addi	r2,r2,748
  817a80:	10c02e04 	addi	r3,r2,184
  817a84:	e0bff917 	ldw	r2,-28(fp)
  817a88:	10c00315 	stw	r3,12(r2)
  817a8c:	e0bff917 	ldw	r2,-28(fp)
  817a90:	10000415 	stw	zero,16(r2)
  817a94:	e0bff917 	ldw	r2,-28(fp)
  817a98:	10800504 	addi	r2,r2,20
  817a9c:	1009883a 	mov	r4,r2
  817aa0:	01800644 	movi	r6,25
  817aa4:	000b883a 	mov	r5,zero
  817aa8:	080285c0 	call	80285c <memset>
  817aac:	e0bff917 	ldw	r2,-28(fp)
  817ab0:	10000c15 	stw	zero,48(r2)
  817ab4:	e0fff917 	ldw	r3,-28(fp)
  817ab8:	008020b4 	movhi	r2,130
  817abc:	10a29b04 	addi	r2,r2,-30100
  817ac0:	18800d15 	stw	r2,52(r3)
  817ac4:	e0bff917 	ldw	r2,-28(fp)
  817ac8:	10000e15 	stw	zero,56(r2)
  817acc:	e0bff917 	ldw	r2,-28(fp)
  817ad0:	10000f15 	stw	zero,60(r2)
  817ad4:	e0bff917 	ldw	r2,-28(fp)
  817ad8:	10001015 	stw	zero,64(r2)
  817adc:	e0bff917 	ldw	r2,-28(fp)
  817ae0:	10001115 	stw	zero,68(r2)
  817ae4:	e0bff917 	ldw	r2,-28(fp)
  817ae8:	10001215 	stw	zero,72(r2)
  817aec:	e0bff917 	ldw	r2,-28(fp)
  817af0:	10001315 	stw	zero,76(r2)
  817af4:	e0bff917 	ldw	r2,-28(fp)
  817af8:	10001415 	stw	zero,80(r2)
  817afc:	e0bff917 	ldw	r2,-28(fp)
  817b00:	10001515 	stw	zero,84(r2)
  817b04:	e0bff917 	ldw	r2,-28(fp)
  817b08:	10001615 	stw	zero,88(r2)
  817b0c:	e0bff917 	ldw	r2,-28(fp)
  817b10:	10001715 	stw	zero,92(r2)
  817b14:	e0bff917 	ldw	r2,-28(fp)
  817b18:	10001805 	stb	zero,96(r2)
  817b1c:	e0bff917 	ldw	r2,-28(fp)
  817b20:	10801f04 	addi	r2,r2,124
  817b24:	10000015 	stw	zero,0(r2)
  817b28:	10000115 	stw	zero,4(r2)
  817b2c:	10000215 	stw	zero,8(r2)
  817b30:	10000315 	stw	zero,12(r2)
  817b34:	10000415 	stw	zero,16(r2)
  817b38:	10000515 	stw	zero,20(r2)
  817b3c:	10000615 	stw	zero,24(r2)
  817b40:	10000715 	stw	zero,28(r2)
  817b44:	10000815 	stw	zero,32(r2)
  817b48:	e0bff917 	ldw	r2,-28(fp)
  817b4c:	10002815 	stw	zero,160(r2)
  817b50:	e0fff917 	ldw	r3,-28(fp)
  817b54:	00800044 	movi	r2,1
  817b58:	18802915 	stw	r2,164(r3)
  817b5c:	18002a15 	stw	zero,168(r3)
  817b60:	e0fff917 	ldw	r3,-28(fp)
  817b64:	008cc384 	movi	r2,13070
  817b68:	18802b0d 	sth	r2,172(r3)
  817b6c:	e0fff917 	ldw	r3,-28(fp)
  817b70:	00aaf344 	movi	r2,-21555
  817b74:	18802b8d 	sth	r2,174(r3)
  817b78:	e0fff917 	ldw	r3,-28(fp)
  817b7c:	00848d04 	movi	r2,4660
  817b80:	18802c0d 	sth	r2,176(r3)
  817b84:	e0fff917 	ldw	r3,-28(fp)
  817b88:	00b99b44 	movi	r2,-6547
  817b8c:	18802c8d 	sth	r2,178(r3)
  817b90:	e0fff917 	ldw	r3,-28(fp)
  817b94:	00b7bb04 	movi	r2,-8468
  817b98:	18802d0d 	sth	r2,180(r3)
  817b9c:	e0fff917 	ldw	r3,-28(fp)
  817ba0:	00800144 	movi	r2,5
  817ba4:	18802d8d 	sth	r2,182(r3)
  817ba8:	e0fff917 	ldw	r3,-28(fp)
  817bac:	008002c4 	movi	r2,11
  817bb0:	18802e0d 	sth	r2,184(r3)
  817bb4:	e0bff917 	ldw	r2,-28(fp)
  817bb8:	10002f15 	stw	zero,188(r2)
  817bbc:	e0bff917 	ldw	r2,-28(fp)
  817bc0:	10003015 	stw	zero,192(r2)
  817bc4:	e0bff917 	ldw	r2,-28(fp)
  817bc8:	10003115 	stw	zero,196(r2)
  817bcc:	e0bff917 	ldw	r2,-28(fp)
  817bd0:	10003215 	stw	zero,200(r2)
  817bd4:	e0bff917 	ldw	r2,-28(fp)
  817bd8:	10003315 	stw	zero,204(r2)
  817bdc:	e0bff917 	ldw	r2,-28(fp)
  817be0:	10003415 	stw	zero,208(r2)
  817be4:	e0bff917 	ldw	r2,-28(fp)
  817be8:	10003e15 	stw	zero,248(r2)
  817bec:	e0bff917 	ldw	r2,-28(fp)
  817bf0:	10003f15 	stw	zero,252(r2)
  817bf4:	e0bff917 	ldw	r2,-28(fp)
  817bf8:	10004015 	stw	zero,256(r2)
  817bfc:	e0bff917 	ldw	r2,-28(fp)
  817c00:	10004115 	stw	zero,260(r2)
  817c04:	e0bff917 	ldw	r2,-28(fp)
  817c08:	10004215 	stw	zero,264(r2)
  817c0c:	e0bff917 	ldw	r2,-28(fp)
  817c10:	10004315 	stw	zero,268(r2)
  817c14:	e0bff917 	ldw	r2,-28(fp)
  817c18:	10004415 	stw	zero,272(r2)
  817c1c:	e0bff917 	ldw	r2,-28(fp)
  817c20:	10004515 	stw	zero,276(r2)
  817c24:	e0bff917 	ldw	r2,-28(fp)
  817c28:	10004615 	stw	zero,280(r2)
  817c2c:	e0bff917 	ldw	r2,-28(fp)
  817c30:	10004715 	stw	zero,284(r2)
  817c34:	e0bff917 	ldw	r2,-28(fp)
  817c38:	10003505 	stb	zero,212(r2)
  817c3c:	e0bff917 	ldw	r2,-28(fp)
  817c40:	10003705 	stb	zero,220(r2)
  817c44:	e0bff917 	ldw	r2,-28(fp)
  817c48:	10003d15 	stw	zero,244(r2)
  817c4c:	e0bff917 	ldw	r2,-28(fp)
  817c50:	10005215 	stw	zero,328(r2)
  817c54:	e0bff917 	ldw	r2,-28(fp)
  817c58:	10005315 	stw	zero,332(r2)
  817c5c:	e0bff917 	ldw	r2,-28(fp)
  817c60:	10005415 	stw	zero,336(r2)
  817c64:	e0bff917 	ldw	r2,-28(fp)
  817c68:	10005515 	stw	zero,340(r2)
  817c6c:	e0bff917 	ldw	r2,-28(fp)
  817c70:	1000b515 	stw	zero,724(r2)
  817c74:	e0bff917 	ldw	r2,-28(fp)
  817c78:	10007515 	stw	zero,468(r2)
  817c7c:	e0bff917 	ldw	r2,-28(fp)
  817c80:	1000b715 	stw	zero,732(r2)
  817c84:	e0bff917 	ldw	r2,-28(fp)
  817c88:	1000b815 	stw	zero,736(r2)
  817c8c:	e0bff917 	ldw	r2,-28(fp)
  817c90:	1000b915 	stw	zero,740(r2)
  817c94:	e0bff917 	ldw	r2,-28(fp)
  817c98:	1000ba15 	stw	zero,744(r2)
  817c9c:	e0bff917 	ldw	r2,-28(fp)
  817ca0:	1080bb04 	addi	r2,r2,748
  817ca4:	1009883a 	mov	r4,r2
  817ca8:	01804504 	movi	r6,276
  817cac:	000b883a 	mov	r5,zero
  817cb0:	080285c0 	call	80285c <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
  817cb4:	e0bff917 	ldw	r2,-28(fp)
  817cb8:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
  817cbc:	e0bffb17 	ldw	r2,-20(fp)
  817cc0:	10bff304 	addi	r2,r2,-52
  817cc4:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
  817cc8:	e0bffa17 	ldw	r2,-24(fp)
  817ccc:	10c00c04 	addi	r3,r2,48
  817cd0:	e0bffc17 	ldw	r2,-16(fp)
  817cd4:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
  817cd8:	e0bffa17 	ldw	r2,-24(fp)
  817cdc:	10c00b04 	addi	r3,r2,44
  817ce0:	e0bffd17 	ldw	r2,-12(fp)
  817ce4:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
  817ce8:	e0bffa17 	ldw	r2,-24(fp)
  817cec:	10c00a04 	addi	r3,r2,40
  817cf0:	e0bff917 	ldw	r2,-28(fp)
  817cf4:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
  817cf8:	00802074 	movhi	r2,129
  817cfc:	109e7c04 	addi	r2,r2,31216
  817d00:	10c00104 	addi	r3,r2,4
  817d04:	e0bffa17 	ldw	r2,-24(fp)
  817d08:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
  817d0c:	e0bffa17 	ldw	r2,-24(fp)
}
  817d10:	e037883a 	mov	sp,fp
  817d14:	dfc00117 	ldw	ra,4(sp)
  817d18:	df000017 	ldw	fp,0(sp)
  817d1c:	dec00204 	addi	sp,sp,8
  817d20:	f800283a 	ret

00817d24 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
  817d24:	defffe04 	addi	sp,sp,-8
  817d28:	df000115 	stw	fp,4(sp)
  817d2c:	df000104 	addi	fp,sp,4
  817d30:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
  817d34:	e037883a 	mov	sp,fp
  817d38:	df000017 	ldw	fp,0(sp)
  817d3c:	dec00104 	addi	sp,sp,4
  817d40:	f800283a 	ret

00817d44 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
  817d44:	defffe04 	addi	sp,sp,-8
  817d48:	df000115 	stw	fp,4(sp)
  817d4c:	df000104 	addi	fp,sp,4
  817d50:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
  817d54:	e037883a 	mov	sp,fp
  817d58:	df000017 	ldw	fp,0(sp)
  817d5c:	dec00104 	addi	sp,sp,4
  817d60:	f800283a 	ret

00817d64 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
  817d64:	deffff04 	addi	sp,sp,-4
  817d68:	df000015 	stw	fp,0(sp)
  817d6c:	d839883a 	mov	fp,sp
}
  817d70:	e037883a 	mov	sp,fp
  817d74:	df000017 	ldw	fp,0(sp)
  817d78:	dec00104 	addi	sp,sp,4
  817d7c:	f800283a 	ret

00817d80 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
  817d80:	deffff04 	addi	sp,sp,-4
  817d84:	df000015 	stw	fp,0(sp)
  817d88:	d839883a 	mov	fp,sp
}
  817d8c:	e037883a 	mov	sp,fp
  817d90:	df000017 	ldw	fp,0(sp)
  817d94:	dec00104 	addi	sp,sp,4
  817d98:	f800283a 	ret

00817d9c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
  817d9c:	deffff04 	addi	sp,sp,-4
  817da0:	df000015 	stw	fp,0(sp)
  817da4:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
  817da8:	e037883a 	mov	sp,fp
  817dac:	df000017 	ldw	fp,0(sp)
  817db0:	dec00104 	addi	sp,sp,4
  817db4:	f800283a 	ret

00817db8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
  817db8:	deffff04 	addi	sp,sp,-4
  817dbc:	df000015 	stw	fp,0(sp)
  817dc0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
  817dc4:	e037883a 	mov	sp,fp
  817dc8:	df000017 	ldw	fp,0(sp)
  817dcc:	dec00104 	addi	sp,sp,4
  817dd0:	f800283a 	ret

00817dd4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
  817dd4:	deffff04 	addi	sp,sp,-4
  817dd8:	df000015 	stw	fp,0(sp)
  817ddc:	d839883a 	mov	fp,sp
}
  817de0:	e037883a 	mov	sp,fp
  817de4:	df000017 	ldw	fp,0(sp)
  817de8:	dec00104 	addi	sp,sp,4
  817dec:	f800283a 	ret

00817df0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
  817df0:	deffff04 	addi	sp,sp,-4
  817df4:	df000015 	stw	fp,0(sp)
  817df8:	d839883a 	mov	fp,sp
}
  817dfc:	e037883a 	mov	sp,fp
  817e00:	df000017 	ldw	fp,0(sp)
  817e04:	dec00104 	addi	sp,sp,4
  817e08:	f800283a 	ret

00817e0c <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
  817e0c:	defffe04 	addi	sp,sp,-8
  817e10:	df000115 	stw	fp,4(sp)
  817e14:	df000104 	addi	fp,sp,4
  817e18:	e13fff15 	stw	r4,-4(fp)
}
  817e1c:	e037883a 	mov	sp,fp
  817e20:	df000017 	ldw	fp,0(sp)
  817e24:	dec00104 	addi	sp,sp,4
  817e28:	f800283a 	ret

00817e2c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  817e2c:	defffa04 	addi	sp,sp,-24
  817e30:	dfc00515 	stw	ra,20(sp)
  817e34:	df000415 	stw	fp,16(sp)
  817e38:	df000404 	addi	fp,sp,16
  817e3c:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  817e40:	008020b4 	movhi	r2,130
  817e44:	10a94204 	addi	r2,r2,-23288
  817e48:	10800017 	ldw	r2,0(r2)
  817e4c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  817e50:	00003306 	br	817f20 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
  817e54:	e0bffd17 	ldw	r2,-12(fp)
  817e58:	11000217 	ldw	r4,8(r2)
  817e5c:	080329c0 	call	80329c <strlen>
  817e60:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
  817e64:	e0bffd17 	ldw	r2,-12(fp)
  817e68:	10c00217 	ldw	r3,8(r2)
  817e6c:	e0bffc17 	ldw	r2,-16(fp)
  817e70:	1885883a 	add	r2,r3,r2
  817e74:	10bfffc4 	addi	r2,r2,-1
  817e78:	10800003 	ldbu	r2,0(r2)
  817e7c:	10803fcc 	andi	r2,r2,255
  817e80:	1080201c 	xori	r2,r2,128
  817e84:	10bfe004 	addi	r2,r2,-128
  817e88:	10800bd8 	cmpnei	r2,r2,47
  817e8c:	1000031e 	bne	r2,zero,817e9c <alt_find_file+0x70>
    {
      len -= 1;
  817e90:	e0bffc17 	ldw	r2,-16(fp)
  817e94:	10bfffc4 	addi	r2,r2,-1
  817e98:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  817e9c:	e0bffc17 	ldw	r2,-16(fp)
  817ea0:	1007883a 	mov	r3,r2
  817ea4:	e0bffe17 	ldw	r2,-8(fp)
  817ea8:	1885883a 	add	r2,r3,r2
  817eac:	10800003 	ldbu	r2,0(r2)
  817eb0:	10803fcc 	andi	r2,r2,255
  817eb4:	1080201c 	xori	r2,r2,128
  817eb8:	10bfe004 	addi	r2,r2,-128
  817ebc:	10800be0 	cmpeqi	r2,r2,47
  817ec0:	10000a1e 	bne	r2,zero,817eec <alt_find_file+0xc0>
  817ec4:	e0bffc17 	ldw	r2,-16(fp)
  817ec8:	1007883a 	mov	r3,r2
  817ecc:	e0bffe17 	ldw	r2,-8(fp)
  817ed0:	1885883a 	add	r2,r3,r2
  817ed4:	10800003 	ldbu	r2,0(r2)
  817ed8:	10803fcc 	andi	r2,r2,255
  817edc:	1080201c 	xori	r2,r2,128
  817ee0:	10bfe004 	addi	r2,r2,-128
  817ee4:	1004c03a 	cmpne	r2,r2,zero
  817ee8:	10000a1e 	bne	r2,zero,817f14 <alt_find_file+0xe8>
  817eec:	e0bffd17 	ldw	r2,-12(fp)
  817ef0:	11000217 	ldw	r4,8(r2)
  817ef4:	e1bffc17 	ldw	r6,-16(fp)
  817ef8:	e17ffe17 	ldw	r5,-8(fp)
  817efc:	081809c0 	call	81809c <memcmp>
  817f00:	1004c03a 	cmpne	r2,r2,zero
  817f04:	1000031e 	bne	r2,zero,817f14 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  817f08:	e0bffd17 	ldw	r2,-12(fp)
  817f0c:	e0bfff15 	stw	r2,-4(fp)
  817f10:	00000806 	br	817f34 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
  817f14:	e0bffd17 	ldw	r2,-12(fp)
  817f18:	10800017 	ldw	r2,0(r2)
  817f1c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  817f20:	00c020b4 	movhi	r3,130
  817f24:	18e94204 	addi	r3,r3,-23288
  817f28:	e0bffd17 	ldw	r2,-12(fp)
  817f2c:	10ffc91e 	bne	r2,r3,817e54 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  817f30:	e03fff15 	stw	zero,-4(fp)
  817f34:	e0bfff17 	ldw	r2,-4(fp)
}
  817f38:	e037883a 	mov	sp,fp
  817f3c:	dfc00117 	ldw	ra,4(sp)
  817f40:	df000017 	ldw	fp,0(sp)
  817f44:	dec00204 	addi	sp,sp,8
  817f48:	f800283a 	ret

00817f4c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  817f4c:	defff704 	addi	sp,sp,-36
  817f50:	dfc00815 	stw	ra,32(sp)
  817f54:	df000715 	stw	fp,28(sp)
  817f58:	dc000615 	stw	r16,24(sp)
  817f5c:	df000604 	addi	fp,sp,24
  817f60:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  817f64:	00bffa04 	movi	r2,-24
  817f68:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
  817f6c:	008020b4 	movhi	r2,130
  817f70:	10a97304 	addi	r2,r2,-23092
  817f74:	10800017 	ldw	r2,0(r2)
  817f78:	e0bffa15 	stw	r2,-24(fp)
  817f7c:	e03ffb0d 	sth	zero,-20(fp)
  817f80:	e17ffb0b 	ldhu	r5,-20(fp)
  817f84:	e1bffe04 	addi	r6,fp,-8
  817f88:	e13ffa17 	ldw	r4,-24(fp)
  817f8c:	0812f780 	call	812f78 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  817f90:	e03ffd15 	stw	zero,-12(fp)
  817f94:	00002006 	br	818018 <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
  817f98:	e13ffd17 	ldw	r4,-12(fp)
  817f9c:	040020b4 	movhi	r16,130
  817fa0:	8424ab04 	addi	r16,r16,-27988
  817fa4:	01400304 	movi	r5,12
  817fa8:	08019440 	call	801944 <__mulsi3>
  817fac:	1405883a 	add	r2,r2,r16
  817fb0:	10800017 	ldw	r2,0(r2)
  817fb4:	1004c03a 	cmpne	r2,r2,zero
  817fb8:	1000141e 	bne	r2,zero,81800c <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
  817fbc:	e13ffd17 	ldw	r4,-12(fp)
  817fc0:	040020b4 	movhi	r16,130
  817fc4:	8424ab04 	addi	r16,r16,-27988
  817fc8:	01400304 	movi	r5,12
  817fcc:	08019440 	call	801944 <__mulsi3>
  817fd0:	1407883a 	add	r3,r2,r16
  817fd4:	e0bfff17 	ldw	r2,-4(fp)
  817fd8:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
  817fdc:	008020b4 	movhi	r2,130
  817fe0:	10a94604 	addi	r2,r2,-23272
  817fe4:	10c00017 	ldw	r3,0(r2)
  817fe8:	e0bffd17 	ldw	r2,-12(fp)
  817fec:	1880040e 	bge	r3,r2,818000 <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
  817ff0:	00c020b4 	movhi	r3,130
  817ff4:	18e94604 	addi	r3,r3,-23272
  817ff8:	e0bffd17 	ldw	r2,-12(fp)
  817ffc:	18800015 	stw	r2,0(r3)
      }
      rc = i;
  818000:	e0bffd17 	ldw	r2,-12(fp)
  818004:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
  818008:	00000606 	br	818024 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  81800c:	e0bffd17 	ldw	r2,-12(fp)
  818010:	10800044 	addi	r2,r2,1
  818014:	e0bffd15 	stw	r2,-12(fp)
  818018:	e0bffd17 	ldw	r2,-12(fp)
  81801c:	10800810 	cmplti	r2,r2,32
  818020:	103fdd1e 	bne	r2,zero,817f98 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
  818024:	008020b4 	movhi	r2,130
  818028:	10a97304 	addi	r2,r2,-23092
  81802c:	11000017 	ldw	r4,0(r2)
  818030:	08133700 	call	813370 <OSSemPost>

  return rc;
  818034:	e0bffc17 	ldw	r2,-16(fp)
}
  818038:	e037883a 	mov	sp,fp
  81803c:	dfc00217 	ldw	ra,8(sp)
  818040:	df000117 	ldw	fp,4(sp)
  818044:	dc000017 	ldw	r16,0(sp)
  818048:	dec00304 	addi	sp,sp,12
  81804c:	f800283a 	ret

00818050 <atexit>:
  818050:	200b883a 	mov	r5,r4
  818054:	000d883a 	mov	r6,zero
  818058:	0009883a 	mov	r4,zero
  81805c:	000f883a 	mov	r7,zero
  818060:	08181101 	jmpi	818110 <__register_exitproc>

00818064 <exit>:
  818064:	defffe04 	addi	sp,sp,-8
  818068:	000b883a 	mov	r5,zero
  81806c:	dc000015 	stw	r16,0(sp)
  818070:	dfc00115 	stw	ra,4(sp)
  818074:	2021883a 	mov	r16,r4
  818078:	08182480 	call	818248 <__call_exitprocs>
  81807c:	008020b4 	movhi	r2,130
  818080:	10a93d04 	addi	r2,r2,-23308
  818084:	11000017 	ldw	r4,0(r2)
  818088:	20800f17 	ldw	r2,60(r4)
  81808c:	10000126 	beq	r2,zero,818094 <exit+0x30>
  818090:	103ee83a 	callr	r2
  818094:	8009883a 	mov	r4,r16
  818098:	080c6540 	call	80c654 <_exit>

0081809c <memcmp>:
  81809c:	00c000c4 	movi	r3,3
  8180a0:	1980032e 	bgeu	r3,r6,8180b0 <memcmp+0x14>
  8180a4:	2144b03a 	or	r2,r4,r5
  8180a8:	10c4703a 	and	r2,r2,r3
  8180ac:	10000f26 	beq	r2,zero,8180ec <memcmp+0x50>
  8180b0:	31ffffc4 	addi	r7,r6,-1
  8180b4:	3000061e 	bne	r6,zero,8180d0 <memcmp+0x34>
  8180b8:	00000a06 	br	8180e4 <memcmp+0x48>
  8180bc:	39ffffc4 	addi	r7,r7,-1
  8180c0:	00bfffc4 	movi	r2,-1
  8180c4:	21000044 	addi	r4,r4,1
  8180c8:	29400044 	addi	r5,r5,1
  8180cc:	38800526 	beq	r7,r2,8180e4 <memcmp+0x48>
  8180d0:	20c00003 	ldbu	r3,0(r4)
  8180d4:	28800003 	ldbu	r2,0(r5)
  8180d8:	18bff826 	beq	r3,r2,8180bc <memcmp+0x20>
  8180dc:	1885c83a 	sub	r2,r3,r2
  8180e0:	f800283a 	ret
  8180e4:	0005883a 	mov	r2,zero
  8180e8:	f800283a 	ret
  8180ec:	180f883a 	mov	r7,r3
  8180f0:	20c00017 	ldw	r3,0(r4)
  8180f4:	28800017 	ldw	r2,0(r5)
  8180f8:	18bfed1e 	bne	r3,r2,8180b0 <memcmp+0x14>
  8180fc:	31bfff04 	addi	r6,r6,-4
  818100:	21000104 	addi	r4,r4,4
  818104:	29400104 	addi	r5,r5,4
  818108:	39bff936 	bltu	r7,r6,8180f0 <memcmp+0x54>
  81810c:	003fe806 	br	8180b0 <memcmp+0x14>

00818110 <__register_exitproc>:
  818110:	defffa04 	addi	sp,sp,-24
  818114:	008020b4 	movhi	r2,130
  818118:	10a93d04 	addi	r2,r2,-23308
  81811c:	dc000015 	stw	r16,0(sp)
  818120:	14000017 	ldw	r16,0(r2)
  818124:	dd000415 	stw	r20,16(sp)
  818128:	2829883a 	mov	r20,r5
  81812c:	81405217 	ldw	r5,328(r16)
  818130:	dcc00315 	stw	r19,12(sp)
  818134:	dc800215 	stw	r18,8(sp)
  818138:	dc400115 	stw	r17,4(sp)
  81813c:	dfc00515 	stw	ra,20(sp)
  818140:	2023883a 	mov	r17,r4
  818144:	3027883a 	mov	r19,r6
  818148:	3825883a 	mov	r18,r7
  81814c:	28002526 	beq	r5,zero,8181e4 <__register_exitproc+0xd4>
  818150:	29000117 	ldw	r4,4(r5)
  818154:	008007c4 	movi	r2,31
  818158:	11002716 	blt	r2,r4,8181f8 <__register_exitproc+0xe8>
  81815c:	8800101e 	bne	r17,zero,8181a0 <__register_exitproc+0x90>
  818160:	2105883a 	add	r2,r4,r4
  818164:	1085883a 	add	r2,r2,r2
  818168:	20c00044 	addi	r3,r4,1
  81816c:	1145883a 	add	r2,r2,r5
  818170:	0009883a 	mov	r4,zero
  818174:	15000215 	stw	r20,8(r2)
  818178:	28c00115 	stw	r3,4(r5)
  81817c:	2005883a 	mov	r2,r4
  818180:	dfc00517 	ldw	ra,20(sp)
  818184:	dd000417 	ldw	r20,16(sp)
  818188:	dcc00317 	ldw	r19,12(sp)
  81818c:	dc800217 	ldw	r18,8(sp)
  818190:	dc400117 	ldw	r17,4(sp)
  818194:	dc000017 	ldw	r16,0(sp)
  818198:	dec00604 	addi	sp,sp,24
  81819c:	f800283a 	ret
  8181a0:	29802204 	addi	r6,r5,136
  8181a4:	00800044 	movi	r2,1
  8181a8:	110e983a 	sll	r7,r2,r4
  8181ac:	30c04017 	ldw	r3,256(r6)
  8181b0:	2105883a 	add	r2,r4,r4
  8181b4:	1085883a 	add	r2,r2,r2
  8181b8:	1185883a 	add	r2,r2,r6
  8181bc:	19c6b03a 	or	r3,r3,r7
  8181c0:	14802015 	stw	r18,128(r2)
  8181c4:	14c00015 	stw	r19,0(r2)
  8181c8:	00800084 	movi	r2,2
  8181cc:	30c04015 	stw	r3,256(r6)
  8181d0:	88bfe31e 	bne	r17,r2,818160 <__register_exitproc+0x50>
  8181d4:	30804117 	ldw	r2,260(r6)
  8181d8:	11c4b03a 	or	r2,r2,r7
  8181dc:	30804115 	stw	r2,260(r6)
  8181e0:	003fdf06 	br	818160 <__register_exitproc+0x50>
  8181e4:	008020b4 	movhi	r2,130
  8181e8:	10be6504 	addi	r2,r2,-1644
  8181ec:	100b883a 	mov	r5,r2
  8181f0:	80805215 	stw	r2,328(r16)
  8181f4:	003fd606 	br	818150 <__register_exitproc+0x40>
  8181f8:	00802034 	movhi	r2,128
  8181fc:	1087e204 	addi	r2,r2,8072
  818200:	1000021e 	bne	r2,zero,81820c <__register_exitproc+0xfc>
  818204:	013fffc4 	movi	r4,-1
  818208:	003fdc06 	br	81817c <__register_exitproc+0x6c>
  81820c:	01006404 	movi	r4,400
  818210:	103ee83a 	callr	r2
  818214:	1007883a 	mov	r3,r2
  818218:	103ffa26 	beq	r2,zero,818204 <__register_exitproc+0xf4>
  81821c:	80805217 	ldw	r2,328(r16)
  818220:	180b883a 	mov	r5,r3
  818224:	18000115 	stw	zero,4(r3)
  818228:	18800015 	stw	r2,0(r3)
  81822c:	80c05215 	stw	r3,328(r16)
  818230:	18006215 	stw	zero,392(r3)
  818234:	18006315 	stw	zero,396(r3)
  818238:	0009883a 	mov	r4,zero
  81823c:	883fc826 	beq	r17,zero,818160 <__register_exitproc+0x50>
  818240:	003fd706 	br	8181a0 <__register_exitproc+0x90>

00818244 <register_fini>:
  818244:	f800283a 	ret

00818248 <__call_exitprocs>:
  818248:	008020b4 	movhi	r2,130
  81824c:	10a93d04 	addi	r2,r2,-23308
  818250:	10800017 	ldw	r2,0(r2)
  818254:	defff304 	addi	sp,sp,-52
  818258:	df000b15 	stw	fp,44(sp)
  81825c:	d8800115 	stw	r2,4(sp)
  818260:	00802034 	movhi	r2,128
  818264:	1087dd04 	addi	r2,r2,8052
  818268:	1005003a 	cmpeq	r2,r2,zero
  81826c:	d8800215 	stw	r2,8(sp)
  818270:	d8800117 	ldw	r2,4(sp)
  818274:	dd400815 	stw	r21,32(sp)
  818278:	dd000715 	stw	r20,28(sp)
  81827c:	10805204 	addi	r2,r2,328
  818280:	dfc00c15 	stw	ra,48(sp)
  818284:	ddc00a15 	stw	r23,40(sp)
  818288:	dd800915 	stw	r22,36(sp)
  81828c:	dcc00615 	stw	r19,24(sp)
  818290:	dc800515 	stw	r18,20(sp)
  818294:	dc400415 	stw	r17,16(sp)
  818298:	dc000315 	stw	r16,12(sp)
  81829c:	282b883a 	mov	r21,r5
  8182a0:	2039883a 	mov	fp,r4
  8182a4:	d8800015 	stw	r2,0(sp)
  8182a8:	2829003a 	cmpeq	r20,r5,zero
  8182ac:	d8800117 	ldw	r2,4(sp)
  8182b0:	14405217 	ldw	r17,328(r2)
  8182b4:	88001026 	beq	r17,zero,8182f8 <__call_exitprocs+0xb0>
  8182b8:	ddc00017 	ldw	r23,0(sp)
  8182bc:	88800117 	ldw	r2,4(r17)
  8182c0:	8c802204 	addi	r18,r17,136
  8182c4:	143fffc4 	addi	r16,r2,-1
  8182c8:	80000916 	blt	r16,zero,8182f0 <__call_exitprocs+0xa8>
  8182cc:	05bfffc4 	movi	r22,-1
  8182d0:	a000151e 	bne	r20,zero,818328 <__call_exitprocs+0xe0>
  8182d4:	8409883a 	add	r4,r16,r16
  8182d8:	2105883a 	add	r2,r4,r4
  8182dc:	1485883a 	add	r2,r2,r18
  8182e0:	10c02017 	ldw	r3,128(r2)
  8182e4:	a8c01126 	beq	r21,r3,81832c <__call_exitprocs+0xe4>
  8182e8:	843fffc4 	addi	r16,r16,-1
  8182ec:	85bff81e 	bne	r16,r22,8182d0 <__call_exitprocs+0x88>
  8182f0:	d8800217 	ldw	r2,8(sp)
  8182f4:	10003126 	beq	r2,zero,8183bc <__call_exitprocs+0x174>
  8182f8:	dfc00c17 	ldw	ra,48(sp)
  8182fc:	df000b17 	ldw	fp,44(sp)
  818300:	ddc00a17 	ldw	r23,40(sp)
  818304:	dd800917 	ldw	r22,36(sp)
  818308:	dd400817 	ldw	r21,32(sp)
  81830c:	dd000717 	ldw	r20,28(sp)
  818310:	dcc00617 	ldw	r19,24(sp)
  818314:	dc800517 	ldw	r18,20(sp)
  818318:	dc400417 	ldw	r17,16(sp)
  81831c:	dc000317 	ldw	r16,12(sp)
  818320:	dec00d04 	addi	sp,sp,52
  818324:	f800283a 	ret
  818328:	8409883a 	add	r4,r16,r16
  81832c:	88c00117 	ldw	r3,4(r17)
  818330:	2105883a 	add	r2,r4,r4
  818334:	1445883a 	add	r2,r2,r17
  818338:	18ffffc4 	addi	r3,r3,-1
  81833c:	11800217 	ldw	r6,8(r2)
  818340:	1c001526 	beq	r3,r16,818398 <__call_exitprocs+0x150>
  818344:	10000215 	stw	zero,8(r2)
  818348:	303fe726 	beq	r6,zero,8182e8 <__call_exitprocs+0xa0>
  81834c:	00c00044 	movi	r3,1
  818350:	1c06983a 	sll	r3,r3,r16
  818354:	90804017 	ldw	r2,256(r18)
  818358:	8cc00117 	ldw	r19,4(r17)
  81835c:	1884703a 	and	r2,r3,r2
  818360:	10001426 	beq	r2,zero,8183b4 <__call_exitprocs+0x16c>
  818364:	90804117 	ldw	r2,260(r18)
  818368:	1884703a 	and	r2,r3,r2
  81836c:	10000c1e 	bne	r2,zero,8183a0 <__call_exitprocs+0x158>
  818370:	2105883a 	add	r2,r4,r4
  818374:	1485883a 	add	r2,r2,r18
  818378:	11400017 	ldw	r5,0(r2)
  81837c:	e009883a 	mov	r4,fp
  818380:	303ee83a 	callr	r6
  818384:	88800117 	ldw	r2,4(r17)
  818388:	98bfc81e 	bne	r19,r2,8182ac <__call_exitprocs+0x64>
  81838c:	b8800017 	ldw	r2,0(r23)
  818390:	147fd526 	beq	r2,r17,8182e8 <__call_exitprocs+0xa0>
  818394:	003fc506 	br	8182ac <__call_exitprocs+0x64>
  818398:	8c000115 	stw	r16,4(r17)
  81839c:	003fea06 	br	818348 <__call_exitprocs+0x100>
  8183a0:	2105883a 	add	r2,r4,r4
  8183a4:	1485883a 	add	r2,r2,r18
  8183a8:	11000017 	ldw	r4,0(r2)
  8183ac:	303ee83a 	callr	r6
  8183b0:	003ff406 	br	818384 <__call_exitprocs+0x13c>
  8183b4:	303ee83a 	callr	r6
  8183b8:	003ff206 	br	818384 <__call_exitprocs+0x13c>
  8183bc:	88800117 	ldw	r2,4(r17)
  8183c0:	1000081e 	bne	r2,zero,8183e4 <__call_exitprocs+0x19c>
  8183c4:	89000017 	ldw	r4,0(r17)
  8183c8:	20000726 	beq	r4,zero,8183e8 <__call_exitprocs+0x1a0>
  8183cc:	b9000015 	stw	r4,0(r23)
  8183d0:	8809883a 	mov	r4,r17
  8183d4:	0801f740 	call	801f74 <free>
  8183d8:	bc400017 	ldw	r17,0(r23)
  8183dc:	883fb71e 	bne	r17,zero,8182bc <__call_exitprocs+0x74>
  8183e0:	003fc506 	br	8182f8 <__call_exitprocs+0xb0>
  8183e4:	89000017 	ldw	r4,0(r17)
  8183e8:	882f883a 	mov	r23,r17
  8183ec:	2023883a 	mov	r17,r4
  8183f0:	883fb21e 	bne	r17,zero,8182bc <__call_exitprocs+0x74>
  8183f4:	003fc006 	br	8182f8 <__call_exitprocs+0xb0>
  8183f8:	00818244 	movi	r2,1545
