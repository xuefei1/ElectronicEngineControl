
electronic_engine_control.elf:     file format elf32-littlenios2
electronic_engine_control.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001a0

Program Header:
    LOAD off    0x00001020 vaddr 0x04004020 paddr 0x02000000 align 2**12
         filesz 0x000001a0 memsz 0x000001a0 flags r-x
    LOAD off    0x000021a0 vaddr 0x020001a0 paddr 0x020001a0 align 2**12
         filesz 0x0001a76c memsz 0x0001a76c flags r-x
    LOAD off    0x0001c90c vaddr 0x0201a90c paddr 0x0201c448 align 2**12
         filesz 0x00001b3c memsz 0x00001b3c flags rw-
    LOAD off    0x0001ef84 vaddr 0x0201df84 paddr 0x0201df84 align 2**12
         filesz 0x00000000 memsz 0x0000bd08 flags rw-
    LOAD off    0x0001f000 vaddr 0x04004000 paddr 0x04004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04004000  04004000  0001f000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000001a0  04004020  02000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019dfc  020001a0  020001a0  000021a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000970  02019f9c  02019f9c  0001bf9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b3c  0201a90c  0201c448  0001c90c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000bd08  0201df84  0201df84  0001ef84  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0001f020  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00001138  00000000  00000000  0001f048  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00002e6b  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0003b9d5  00000000  00000000  00022feb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000b38d  00000000  00000000  0005e9c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00021eac  00000000  00000000  00069d4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003270  00000000  00000000  0008bbfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002b67  00000000  00000000  0008ee6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000f92b  00000000  00000000  000919d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000a1300  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000a48  00000000  00000000  000a1340  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000006  00000000  00000000  000a7c04  2**0
                  CONTENTS, READONLY
 18 .cpu          00000007  00000000  00000000  000a7c0a  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000a7c11  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000a7c12  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000a7c13  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000a7c17  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000a7c1b  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000a7c1f  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000a7c2a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000a7c35  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000d  00000000  00000000  000a7c40  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000043  00000000  00000000  000a7c4d  2**0
                  CONTENTS, READONLY
 29 .jdi          00004d53  00000000  00000000  000a7c90  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     0006d835  00000000  00000000  000ac9e3  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04004000 l    d  .entry	00000000 .entry
04004020 l    d  .exceptions	00000000 .exceptions
020001a0 l    d  .text	00000000 .text
02019f9c l    d  .rodata	00000000 .rodata
0201a90c l    d  .rwdata	00000000 .rwdata
0201df84 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
020001d8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 apps_motor_proc.c
0201df84 l     O .bss	00000002 last_apps_2_reading.3657
0201df86 l     O .bss	00000002 last_apps_1_reading.3656
00000000 l    df *ABS*	00000000 failure_handler_proc.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 pwm_gen.c
0201dfb4 l     O .bss	00000002 period.2168
02000b18 l     F .text	00000040 update_stored_period
0201dfb6 l     O .bss	00000001 duty_cycle.2178
02000b58 l     F .text	00000040 update_stored_duty_cycle
02000b98 l     F .text	0000003c update_pwm_period
02000bd4 l     F .text	00000064 update_pwm_duty
00000000 l    df *ABS*	00000000 solenoid_proc.c
02000fc4 l     F .text	00000044 isr_btn
00000000 l    df *ABS*	00000000 CuTest.c
02001614 l     F .text	0000009c CuFailInternal
0201a24c l     O .rodata	0000000b __func__.3471
00000000 l    df *ABS*	00000000 testbench.c
00000000 l    df *ABS*	00000000 throttle_data.c
00000000 l    df *ABS*	00000000 tps_proc.c
00000000 l    df *ABS*	00000000 util.c
00000000 l    df *ABS*	00000000 dp-bit.c
02002bd4 l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
02003160 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 impure.c
0201a90c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 realloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcat.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 vfprintf.c
02004dbc l     F .text	00000058 __sprint_r
0201a4ea l     O .rodata	00000010 blanks.3452
0201a4da l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 dtoa.c
02006e50 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02008878 l     F .text	00000058 std
02008984 l     F .text	00000008 __fp_lock
0200898c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0201c3a0 l     O .rwdata	00000004 charset
0201a51c l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mprec.c
0201a664 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0200ae9c l     F .text	00000058 __sprint_r
0201a680 l     O .rodata	00000010 blanks.3391
0201a670 l     O .rodata	00000010 zeroes.3392
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
0200e16c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0200e1cc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
0200e1f8 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
0200e33c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0200e640 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0200e7e0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0200e8c0 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0200ea20 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0200ec6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0201c3c0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0200f1ec l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0201c3cc l     O .rwdata	00000004 lockid
0201e008 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0201c3d0 l     O .rwdata	00000004 lockid
0201e010 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
02010c24 l     F .text	00000044 OS_InitMisc
02010c68 l     F .text	0000006c OS_InitRdyList
02010dcc l     F .text	000000e0 OS_InitTCBList
02010b48 l     F .text	000000dc OS_InitEventList
02010cd4 l     F .text	0000007c OS_InitTaskIdle
02010d50 l     F .text	0000007c OS_InitTaskStat
02011040 l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
02012f60 l     F .text	00000110 OS_FlagTaskRdy
02012cb8 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0201b2c8 l     O .rwdata	0000106c jtag_uart_0
0201c334 l     O .rwdata	0000002c de0_nano_adc_0
0201c360 l     O .rwdata	0000002c rs232_0
020178e8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
02017b98 l     F .text	000002c8 altera_avalon_jtag_uart_irq
02017e60 l     F .text	00000114 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
02018678 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 altera_up_avalon_de0_nano_adc.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02018eb8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02019090 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
020191e0 l     F .text	000000f8 alt_file_locked
02019464 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
02019de4 l     F .text	00000004 register_fini
0201dfb8 g     O .bss	00000004 rpm_reached_flag
02004a40 g     F .text	00000000 longjmp
020007c8 g     F .text	00000038 motor_pos_check_callback
02009d10 g     F .text	00000094 _mprec_log10
0201c41e g     O .rwdata	00000002 OSTaskNameSize
02009dfc g     F .text	00000088 __any_on
0200c320 g     F .text	00000070 _isatty_r
0201a63c g     O .rodata	00000028 __mprec_tinytens
0200ea80 g     F .text	000000c8 alt_main
02004ca0 g     F .text	0000008c strcpy
020042d4 g     F .text	000000a0 _puts_r
020299fc g     O .bss	00000100 alt_irq
0200c390 g     F .text	00000078 _lseek_r
02013854 g     F .text	000000d4 OS_MemInit
0200121c g     F .text	00000054 CuStringResize
02004a08 g     F .text	00000000 setjmp
0201c448 g       *ABS*	00000000 __flash_rwdata_start
020177b4 g     F .text	00000064 OSTimeSet
0200d768 g     F .text	00000088 __eqdf2
02001bfc g     F .text	0000007c CuSuiteAddSuite
0200f7a0 g     F .text	000006b4 OSEventPendMulti
02029c8c g       *ABS*	00000000 __alt_heap_start
020198c4 g     F .text	00000020 OSTaskCreateHook
0200acdc g     F .text	00000074 _kill_r
0200425c g     F .text	00000044 printf
02002990 g     F .text	00000020 get_tps_task_failure_resolved_flag
0201c3f6 g     O .rwdata	00000002 OSMboxEn
0200fea8 g     F .text	0000007c OSIntEnter
0200ac1c g     F .text	000000a0 _signal_r
02002158 g     F .text	00000070 CuGetSuite
0200ad58 g     F .text	00000068 __sseek
020088e0 g     F .text	000000a4 __sinit
0201c406 g     O .rwdata	00000002 OSQEn
020095ec g     F .text	00000084 _setlocale_r
02001a98 g     F .text	0000003c CuSuiteNew
020089e0 g     F .text	0000009c __sfmoreglue
0200f45c g     F .text	000000d0 __malloc_unlock
02001100 g     F .text	00000064 CuStringInit
02019920 g     F .text	0000001c OSTaskStatHook
02018b28 g     F .text	00000090 alt_up_rs232_read_fd
0201e018 g     O .bss	00000001 OSLockNesting
02002240 g     F .text	0000003c Test_pwm_gen
0201c444 g     O .rwdata	00000002 OSDataSize
0201e019 g     O .bss	00000001 OSRunning
0201df88 g     O .bss	00000004 failure_msg_q
0201e06c g     O .bss	00000004 altera_avalon_timer_ts_freq
020040e4 g     F .text	000000e0 memmove
02019958 g     F .text	0000001c OSInitHookBegin
0201e098 g     O .bss	00000080 motor_cmd_q_buf
0201c43c g     O .rwdata	00000002 OSTmrSize
020089d0 g     F .text	00000010 _cleanup
02000f1c g     F .text	0000002c shift_up
02009e84 g     F .text	000000bc _Balloc
0201e01c g     O .bss	00000004 OSIdleCtr
0201e318 g     O .bss	00002000 apps_motor_task_stk
0200d878 g     F .text	00000088 __gtdf2
02019590 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
02011374 g     F .text	000002e0 OS_TCBInit
02001518 g     F .text	0000004c CuTestNew
04004000 g     F .entry	0000000c __reset
02000820 g     F .text	00000020 get_apps_motor_task_external_failure_flag
020187b4 g     F .text	00000140 alt_up_de0_nano_adc_read
0201c442 g     O .rwdata	00000002 OSTmrWheelTblSize
0201df8c g     O .bss	00000004 failure_resolved_flag
02000000 g       *ABS*	00000000 __flash_exceptions_start
0201c3e2 g     O .rwdata	00000002 OSEventSize
0201e020 g     O .bss	00000001 OSPrioHighRdy
0200c2ac g     F .text	00000074 _fstat_r
020198e4 g     F .text	00000020 OSTaskDelHook
0201dfdc g     O .bss	00000004 errno
02001790 g     F .text	00000108 CuAssertStrEquals_LineMsg
02019570 g       .text	00000000 OSStartHighRdy
02015f6c g     F .text	00000200 OSTaskCreateExt
02001a48 g     F .text	00000050 CuSuiteInit
020127d4 g     F .text	00000068 OSFlagPendGetFlagsRdy
0201c422 g     O .rwdata	00000002 OSTaskStatStkSize
020117e0 g     F .text	00000334 OSFlagAccept
02013f90 g     F .text	000000c8 OSQFlush
02013928 g     F .text	00000154 OSQAccept
0201dff8 g     O .bss	00000004 alt_argv
0202438c g       *ABS*	00000000 _gp
0200efa8 g     F .text	00000120 usleep
02015d98 g     F .text	000001d4 OSTaskCreate
02015824 g     F .text	00000574 OSTaskChangePrio
0201e014 g     O .bss	00000004 alt_heapsem
0200e39c g     F .text	00000020 getpid
02011654 g     F .text	0000018c OSDebugInit
0201616c g     F .text	0000040c OSTaskDel
0201b148 g     O .rwdata	00000180 alt_fd_list
020267d8 g     O .bss	00000370 OSFlagTbl
02010924 g     F .text	000000b8 OS_EventTaskRemove
02000704 g     F .text	00000038 set_new_motor_position_by_tps
02018fe0 g     F .text	00000094 alt_find_dev
02004044 g     F .text	000000a0 memcpy
0201c40c g     O .rwdata	00000002 OSRdyTblSize
0200190c g     F .text	000000c8 CuAssertDblEquals_LineMsg
02000c70 g     F .text	00000038 set_duty_cycle
020019d4 g     F .text	00000074 CuAssertPtrEquals_LineMsg
020089c4 g     F .text	0000000c _cleanup_r
0200da10 g     F .text	000000f8 __floatsidf
02019168 g     F .text	00000078 alt_io_redirect
0200d988 g     F .text	00000088 __ltdf2
02019f9c g       *ABS*	00000000 __DTOR_END__
02018ab4 g     F .text	00000074 alt_up_rs232_read_data
02004374 g     F .text	00000014 puts
0200f52c g     F .text	00000130 OSEventNameGet
0201c3f0 g     O .rwdata	00000002 OSFlagMax
0201df90 g     O .bss	00000004 expected_tps_value
02009c60 g     F .text	000000b0 __ratio
0200ff24 g     F .text	00000100 OSIntExit
0200bfb4 g     F .text	00000024 __vfiprintf_internal
0201c42a g     O .rwdata	00000002 OSTCBSize
0201e021 g     O .bss	00000001 OSPrioCur
020180dc g     F .text	000002c0 altera_avalon_jtag_uart_read
020038f0 g     F .text	00000014 malloc
020042a0 g     F .text	00000034 _printf_r
04004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0200329c g     F .text	00000008 __udivsi3
0200e57c g     F .text	000000c4 isatty
0200aa00 g     F .text	000000cc _raise_r
0201c410 g     O .rwdata	00000002 OSStkWidth
020037f8 g     F .text	00000064 __assert_func
0201a54c g     O .rodata	000000c8 __mprec_tens
0201c404 g     O .rwdata	00000002 OSPtrSize
0201df94 g     O .bss	00000004 motor_failure_flag
020095c8 g     F .text	00000008 __locale_charset
0201c3e4 g     O .rwdata	00000002 OSEventTblSize
020194e4 g       .text	00000000 OSCtxSw
0201dfd0 g     O .bss	00000004 __malloc_top_pad
0201e024 g     O .bss	00000004 OSTCBList
0200acd8 g     F .text	00000004 _getpid_r
0201dfec g     O .bss	00000004 alt_fd_list_lock
0201c39c g     O .rwdata	00000004 __mb_cur_max
020095d0 g     F .text	0000000c _localeconv_r
0200a5e8 g     F .text	0000003c __i2b
02008fac g     F .text	0000049c __sfvwrite_r
0200ab54 g     F .text	000000b4 __sigtramp_r
02026b48 g     O .bss	00000c30 OSMemTbl
0201e028 g     O .bss	00000001 OSTickStepState
0201dfc8 g     O .bss	00000002 curr_expected_pos
02004998 g     F .text	00000070 _sbrk_r
020014a8 g     F .text	00000070 CuTestInit
02000c38 g     F .text	00000038 set_period
0201c408 g     O .rwdata	00000002 OSQMax
02001dc8 g     F .text	000001cc CuSuiteDetails
02027778 g     O .bss	00000800 OSTaskStatStk
0201343c g     F .text	0000010c OSMemNameGet
0201c3e8 g     O .rwdata	00000002 OSFlagEn
0200c408 g     F .text	00000078 _read_r
0201c42e g     O .rwdata	00000002 OSTimeTickHookEn
02013070 g     F .text	000000ac OS_FlagUnlink
020144f4 g     F .text	00000180 OSQPost
0201b114 g     O .rwdata	0000000c __lc_ctype
0201c3b4 g     O .rwdata	00000004 alt_max_fd
02018a1c g     F .text	00000050 alt_up_rs232_check_parity
02010f00 g     F .text	0000006c OS_MemCopy
02010f6c g     F .text	000000d4 OS_Sched
020035f8 g     F .text	00000138 __unpack_d
0200c188 g     F .text	00000110 _fclose_r
02013338 g     F .text	00000104 OSMemGet
020168a0 g     F .text	000001c4 OSTaskNameSet
02008844 g     F .text	00000034 fflush
0201dfd4 g     O .bss	00000004 __malloc_max_sbrked_mem
020011d4 g     F .text	00000048 CuStringDelete
0201e02c g     O .bss	00000004 OSCtxSwCtr
0201993c g     F .text	0000001c OSTimeTickHook
0200e3bc g     F .text	000001c0 alt_irq_register
0201c3f2 g     O .rwdata	00000002 OSFlagNameSize
020109dc g     F .text	00000104 OS_EventTaskRemoveMulti
02002588 g     F .text	00000070 get_new_RPM_needed
02003064 g     F .text	00000074 __adddf3
020107d0 g     F .text	00000154 OS_EventTaskWaitMulti
02009b40 g     F .text	00000120 __b2d
02000800 g     F .text	00000020 get_motor_failure_flag
0201c40a g     O .rwdata	00000002 OSQSize
0200caec g     F .text	00000660 __umoddi3
0200e92c g     F .text	000000f4 lseek
020150d0 g     F .text	0000027c OSSemPend
02001368 g     F .text	0000002c CuStringAppendFormat
0201c390 g     O .rwdata	00000004 _global_impure_ptr
02000668 g     F .text	00000020 get_expected_motor_pos_q
020043a4 g     F .text	000005f4 _realloc_r
0201c3f4 g     O .rwdata	00000002 OSLowestPrio
02001f94 g     F .text	000000dc Test_int16U_changed_by_threshold
02029c8c g       *ABS*	00000000 __bss_end
020199ac g     F .text	00000020 OSTCBInitHook
0201c43a g     O .rwdata	00000002 OSTmrCfgTicksPerSec
0200ee98 g     F .text	00000110 alt_tick
02026418 g     O .bss	00000100 solenoid_buf
0200c480 g     F .text	0000066c __udivdi3
0201c3dc g     O .rwdata	00000002 OSEventEn
0201a614 g     O .rodata	00000028 __mprec_bigtens
0200a870 g     F .text	00000120 __s2b
0201c436 g     O .rwdata	00000002 OSTmrCfgNameSize
02006e38 g     F .text	00000018 abort
02000860 g     F .text	0000002c signal_exit_shift_matching
0200dbe0 g     F .text	00000194 __floatunsidf
020028ac g     F .text	000000e4 tps_value_comp_callback
02009a60 g     F .text	00000060 __mcmp
02002a58 g     F .text	00000108 int16U_differ_by_percent
020089ac g     F .text	00000018 __fp_lock_all
02001270 g     F .text	000000b4 CuStringAppend
0201dfbc g     O .bss	00000004 alarm
02012e7c g     F .text	000000e4 OS_FlagInit
0200ee00 g     F .text	00000098 alt_alarm_stop
02000840 g     F .text	00000020 get_apps_motor_task_failure_resolved_flag
02001b68 g     F .text	00000094 CuSuiteAdd
020021c8 g     F .text	00000078 run_all_unit_tests
0201c418 g     O .rwdata	00000002 OSTaskIdleStkSize
0201dff0 g     O .bss	00000004 alt_irq_active
02001c78 g     F .text	00000098 CuSuiteRun
02014c5c g     F .text	000000c0 OSSemAccept
02013668 g     F .text	000000f0 OSMemPut
0201311c g     F .text	0000021c OSMemCreate
0201e030 g     O .bss	00000004 OSIdleCtrMax
040040ec g     F .exceptions	000000d4 alt_irq_handler
0201b120 g     O .rwdata	00000028 alt_dev_null
0201c42c g     O .rwdata	00000002 OSTicksPerSec
020022fc g     F .text	000001b0 throttle_data_init
02000cdc g     F .text	00000034 get_duty_cycle
020194e4 g       .text	00000000 OSIntCtxSw
02020318 g     O .bss	00002000 failure_handler_task_stk
020015ac g     F .text	00000068 CuTestRun
02018de8 g     F .text	0000001c alt_dcache_flush_all
0200992c g     F .text	00000070 __hi0bits
0200db08 g     F .text	000000d8 __fixdfsi
0201e034 g     O .bss	00000004 OSTCBFreeList
0201c448 g       *ABS*	00000000 __ram_rwdata_end
0201534c g     F .text	0000017c OSSemPendAbort
02001d10 g     F .text	000000b8 CuSuiteSummary
0201c3ac g     O .rwdata	00000008 alt_dev_list
0200f0c8 g     F .text	00000124 write
0201df98 g     O .bss	00000004 external_failure_flag
0201c430 g     O .rwdata	00000002 OSVersionNbr
02000f48 g     F .text	0000002c shift_down
0201a90c g       *ABS*	00000000 __ram_rodata_end
0200e264 g     F .text	000000d8 fstat
02018bb8 g     F .text	00000094 alt_up_rs232_write_fd
0200e6a0 g     F .text	00000140 kill
02001ad4 g     F .text	00000094 CuSuiteDelete
020030d8 g     F .text	00000088 __ledf2
02004b54 g     F .text	00000090 strcat
0201c3d8 g     O .rwdata	00000004 OSEndiannessTest
0200a750 g     F .text	00000120 __pow5mult
0201dfe0 g     O .bss	00000004 __nlocale_changed
0200aef4 g     F .text	000010c0 ___vfiprintf_internal_r
020032a4 g     F .text	00000008 __umodsi3
0201c3ea g     O .rwdata	00000002 OSFlagGrpSize
02029c8c g       *ABS*	00000000 end
020001dc g     F .text	0000048c apps_motor_task
02017a68 g     F .text	00000130 altera_avalon_jtag_uart_init
020111e4 g     F .text	000000c8 OS_TaskStat
0201dfc0 g     O .bss	00000004 btn_input_q
020006a8 g     F .text	00000024 get_expected_tps_reading
02001164 g     F .text	00000070 CuStringNew
02019f98 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
020186ec g     F .text	00000088 alt_avalon_timer_sc_init
0200de98 g     F .text	00000080 __clzsi2
0201839c g     F .text	000002dc altera_avalon_jtag_uart_write
02001564 g     F .text	00000048 CuTestDelete
02000a98 g     F .text	00000020 get_adc
020088d0 g     F .text	00000004 __sfp_lock_acquire
02009820 g     F .text	000000e4 memchr
02010eac g     F .text	00000054 OS_MemClr
02004e14 g     F .text	00001ec4 ___vfprintf_internal_r
020195b4 g     F .text	00000310 OSTaskStkInit
02004af4 g     F .text	00000060 _sprintf_r
02008c98 g     F .text	00000314 _free_r
020024ac g     F .text	0000004c get_duty_cycle_for_angle
0201052c g     F .text	00000194 OS_EventTaskRdy
0201dfc4 g     O .bss	00000004 free_alarm_flag
02019de8 g     F .text	000001b0 __call_exitprocs
0201e038 g     O .bss	00000001 OSCPUUsage
020010ac g     F .text	00000054 CuStrCopy
0201dfe4 g     O .bss	00000004 __mlocale_changed
0201c398 g     O .rwdata	00000004 __malloc_sbrk_base
020001a0 g     F .text	0000003c _start
0201e000 g     O .bss	00000004 _alt_tick_rate
02014058 g     F .text	00000320 OSQPend
02000ab8 g     F .text	00000040 disp_err
02017264 g     F .text	0000014c OSTimeDly
0200a248 g     F .text	0000014c __lshift
0201e004 g     O .bss	00000004 _alt_nticks
0200acbc g     F .text	0000001c signal
0200eb48 g     F .text	00000124 read
0201784c g     F .text	0000009c alt_sys_init
0200088c g     F .text	00000190 failure_handler_task
02019cb0 g     F .text	00000134 __register_exitproc
0201e039 g     O .bss	00000001 OSTaskCtr
02000af8 g     F .text	00000020 get_failure_msg_q
020189dc g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
0201dfcc g     O .bss	00000004 tps_failure_flag
020173b0 g     F .text	00000190 OSTimeDlyHMSM
0200a394 g     F .text	00000254 __multiply
02017f74 g     F .text	00000074 altera_avalon_jtag_uart_close
020032ac g     F .text	00000038 __mulsi3
0201a90c g       *ABS*	00000000 __ram_rwdata_start
0201df9c g     O .bss	00000004 adc
02019f9c g       *ABS*	00000000 __ram_rodata_start
0201e070 g     O .bss	00000028 __malloc_current_mallinfo
0201c3de g     O .rwdata	00000002 OSEventMax
02009f40 g     F .text	0000017c __d2b
020154c8 g     F .text	00000128 OSSemPost
020100b0 g     F .text	000000e4 OSSchedUnlock
02004388 g     F .text	0000001c realloc
02017920 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
02019aec g     F .text	00000104 alt_get_fd
0201e03c g     O .bss	00000004 OSMemFreeList
02010204 g     F .text	000000ac OSStatInit
02018c8c g     F .text	0000015c alt_busy_sleep
02012be4 g     F .text	000000d4 OSFlagQuery
02003730 g     F .text	000000c8 __fpcmp_parts_d
0201c414 g     O .rwdata	00000002 OSTaskCreateExtEn
0200c118 g     F .text	00000070 _close_r
02019c3c g     F .text	00000074 memcmp
02010510 g     F .text	0000001c OS_Dummy
020179d0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
02029c8c g       *ABS*	00000000 __alt_stack_base
02017a18 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
02006cfc g     F .text	0000013c __swsetup_r
02027f78 g     O .bss	000001e0 OSQTbl
0200d510 g     F .text	00000258 __divdf3
02008a7c g     F .text	000000f0 __sfp
02009da4 g     F .text	00000058 __copybits
0201ad0c g     O .rwdata	00000408 __malloc_av_
020088dc g     F .text	00000004 __sinit_lock_release
02001074 g     F .text	00000038 CuStrAlloc
0201e040 g     O .bss	00000004 OSTCBHighRdy
0200d14c g     F .text	000003c4 __muldf3
0200ae3c g     F .text	00000060 __sread
0201e044 g     O .bss	00000004 OSQFreeList
02018948 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
020199cc g     F .text	00000120 alt_find_file
02018e04 g     F .text	000000b4 alt_dev_llist_insert
0200f354 g     F .text	00000108 __malloc_lock
0200ed44 g     F .text	000000bc sbrk
0200f65c g     F .text	00000144 OSEventNameSet
02008648 g     F .text	000001fc _fflush_r
0200c050 g     F .text	000000c8 _calloc_r
0201e048 g     O .bss	00000001 OSRdyGrp
020016b0 g     F .text	00000084 CuFail_Line
02001324 g     F .text	00000044 CuStringAppendChar
0201df84 g       *ABS*	00000000 __bss_start
020041c4 g     F .text	00000098 memset
02026518 g     O .bss	00000262 RPM_gear_to_throttle_pos
02000a1c g     F .text	0000007c main
0201dffc g     O .bss	00000004 alt_envp
0201dfd8 g     O .bss	00000004 __malloc_max_total_mem
02017978 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
02022318 g     O .bss	00000100 failure_code_buf
0201a7b0 g     O .rodata	00000100 OSUnMapTbl
0201c40e g     O .rwdata	00000002 OSSemEn
02000d10 g     F .text	0000020c solenoid_task
0201283c g     F .text	000003a8 OSFlagPost
0200ad50 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
0200c298 g     F .text	00000014 fclose
020106c0 g     F .text	00000110 OS_EventTaskWait
020112ac g     F .text	000000c8 OS_TaskStatStkChk
02029afc g     O .bss	00000190 _atexit0
02016578 g     F .text	00000170 OSTaskDelReq
02007094 g     F .text	000015b4 _dtoa_r
02003904 g     F .text	00000740 _malloc_r
0201c3b8 g     O .rwdata	00000004 alt_errno
02010194 g     F .text	00000070 OSStart
020038b4 g     F .text	00000028 _fiprintf_r
0200ab44 g     F .text	00000010 _init_signal
0200f2f8 g     F .text	0000005c __env_unlock
02009510 g     F .text	000000b8 _fwalk
02016a64 g     F .text	00000218 OSTaskResume
02013758 g     F .text	000000fc OSMemQuery
0201c420 g     O .rwdata	00000002 OSTaskStatEn
0201c3fa g     O .rwdata	00000002 OSMemMax
02014674 g     F .text	00000188 OSQPostFront
020031dc g     F .text	00000060 __divsi3
0201e049 g     O .bss	00000003 OSRdyTbl
0201c3d4 g     O .rwdata	00000002 OSDebugEn
0201a420 g     O .rodata	00000014 __thenan_df
02008b6c g     F .text	0000012c _malloc_trim_r
0201dfa0 g     O .bss	00000004 expected_tps_reading_q
02019f9c g       *ABS*	00000000 __CTOR_END__
0201dfa4 g     O .bss	00000004 apps_failure_flag
0201c3ec g     O .rwdata	00000002 OSFlagNodeSize
0201c434 g     O .rwdata	00000002 OSTmrCfgMax
02001898 g     F .text	00000074 CuAssertIntEquals_LineMsg
02004be4 g     F .text	000000bc strcmp
02013a7c g     F .text	00000214 OSQCreate
020166e8 g     F .text	000001b8 OSTaskNameGet
02019f9c g       *ABS*	00000000 __flash_rodata_start
020147fc g     F .text	00000234 OSQPostOpt
020102b0 g     F .text	00000240 OSTimeTick
0201c41c g     O .rwdata	00000002 OSTaskMax
02019f9c g       *ABS*	00000000 __DTOR_LIST__
02014d1c g     F .text	00000114 OSSemCreate
0201c440 g     O .rwdata	00000002 OSTmrWheelSize
02018c4c g     F .text	00000040 alt_up_rs232_open_dev
0200d7f0 g     F .text	00000088 __nedf2
0201c416 g     O .rwdata	00000002 OSTaskDelEn
020155f0 g     F .text	00000130 OSSemQuery
02013c90 g     F .text	00000300 OSQDel
02014378 g     F .text	0000017c OSQPendAbort
02017818 g     F .text	00000034 alt_irq_init
0200eccc g     F .text	00000078 alt_release_fd
02004a80 g     F .text	00000074 sprintf
0201a690 g     O .rodata	00000100 __clz_tab
0201dfe8 g     O .bss	00000004 _PathLocale
0202677a g     O .bss	0000005b throttle_angle_to_duty_cycle
02019bf0 g     F .text	00000014 atexit
0200bfd8 g     F .text	00000078 _write_r
020029b0 g     F .text	00000020 get_tps_task_external_failure_flag
02010024 g     F .text	0000008c OSSchedLock
02009670 g     F .text	0000001c setlocale
02011b14 g     F .text	0000013c OSFlagCreate
0201c38c g     O .rwdata	00000004 _impure_ptr
0201dff4 g     O .bss	00000004 alt_argc
0201e068 g     O .bss	00000004 altera_avalon_timer_ts_base
02018f7c g     F .text	00000064 _do_dtors
02000ca8 g     F .text	00000034 get_period
0201c3e6 g     O .rwdata	00000002 OSEventMultiEn
020029d0 g     F .text	00000088 int16U_changed_by_threshold
0201dfb0 g     O .bss	00000004 failure_code_q
02011c50 g     F .text	000002a8 OSFlagDel
02000000 g       *ABS*	00000000 __alt_mem_sdram_0
0201e04c g     O .bss	00000004 OSEventFreeList
04004020 g       .exceptions	00000000 alt_irq_entry
0201dfa8 g     O .bss	00000004 exit_shift_matching_flag
02009ac0 g     F .text	00000080 __ulp
0200a990 g     F .text	00000040 __isinfd
02012190 g     F .text	00000644 OSFlagPend
0201c432 g     O .rwdata	00000002 OSTmrEn
02008994 g     F .text	00000018 __fp_unlock_all
0201c3a4 g     O .rwdata	00000008 alt_fs_list
020110b0 g     F .text	00000080 OS_StrCopy
020188f4 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
02018a6c g     F .text	00000048 alt_up_rs232_write_data
020006cc g     F .text	00000038 set_new_motor_position
0201c3fc g     O .rwdata	00000002 OSMemNameSize
02019974 g     F .text	0000001c OSInitHookEnd
04004020 g       *ABS*	00000000 __ram_exceptions_start
0201c428 g     O .rwdata	00000002 OSTCBPrioTblMax
020095dc g     F .text	00000010 localeconv
0200073c g     F .text	0000008c apps_value_comp_callback
0201c424 g     O .rwdata	00000002 OSTaskStatStkChkEn
02022418 g     O .bss	00002000 tps_task_stk
0201c3f8 g     O .rwdata	00000002 OSMemEn
0201c402 g     O .rwdata	00000002 OSMutexEn
0201e118 g     O .bss	00000200 expected_tps_reading_q_buf
0201c448 g       *ABS*	00000000 _edata
02029c8c g       *ABS*	00000000 _end
0201e050 g     O .bss	00000001 OSIntNesting
040041c0 g       *ABS*	00000000 __ram_exceptions_end
02017fe8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
02017540 g     F .text	00000210 OSTimeDlyResume
02001008 g     F .text	00000020 get_solenoid_task_external_failure_flag
0201203c g     F .text	00000154 OSFlagNameSet
02001048 g     F .text	0000002c signal_shift_start
02001394 g     F .text	00000114 CuStringInsert
02016c7c g     F .text	000001fc OSTaskStkChk
0201c3fe g     O .rwdata	00000002 OSMemSize
0200adc0 g     F .text	0000007c __swrite
0201c394 g     O .rwdata	00000004 __malloc_trim_threshold
020194c4 g     F .text	00000020 altera_nios2_qsys_irq_init
0201e054 g     O .bss	00000004 OSTCBCur
02019c04 g     F .text	00000038 exit
02003870 g     F .text	00000044 fiprintf
02004da0 g     F .text	0000001c _vfiprintf_r
0201c400 g     O .rwdata	00000002 OSMemTblSize
02009448 g     F .text	000000c8 _fwalk_reent
0200a0bc g     F .text	0000018c __mdiff
0200323c g     F .text	00000060 __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
04004020 g     F .exceptions	00000000 alt_exception
020088d4 g     F .text	00000004 __sfp_lock_release
0200fe54 g     F .text	00000054 OSInit
020170a4 g     F .text	00000144 OSTaskQuery
02014bb0 g     F .text	000000ac OS_QInit
02011130 g     F .text	00000058 OS_StrLen
02013548 g     F .text	00000120 OSMemNameSet
02018774 g     F .text	00000040 alt_up_de0_nano_adc_open_dev
0201c41a g     O .rwdata	00000002 OSTaskProfileEn
02024418 g     O .bss	00002000 solenoid_task_stk
0201e058 g     O .bss	00000004 OSTime
02000f74 g     F .text	00000050 solenoid_callback
02028158 g     O .bss	00000800 OSTaskIdleStk
0200e238 g     F .text	0000002c _exit
0200a9d0 g     F .text	00000030 __isnand
02001028 g     F .text	00000020 get_solenoid_task_failure_resolved_flag
02011ef8 g     F .text	00000144 OSFlagNameGet
0200df18 g     F .text	00000154 alt_alarm_start
02017750 g     F .text	00000064 OSTimeGet
0200dd74 g     F .text	00000124 __muldi3
020024f8 g     F .text	00000090 get_throttle_pos_for_RPM_gear
0200968c g     F .text	00000194 __smakebuf_r
02004d2c g     F .text	00000074 strlen
0200aae0 g     F .text	00000064 _init_signal_r
02019904 g     F .text	0000001c OSTaskSwHook
020192d8 g     F .text	0000018c open
02028958 g     O .bss	00000b40 OSEventTbl
02001734 g     F .text	0000005c CuAssert_Line
0200d900 g     F .text	00000088 __gedf2
02029498 g     O .bss	00000510 OSTCBTbl
02015720 g     F .text	00000104 OSSemSet
0200385c g     F .text	00000014 __assert
02019074 g     F .text	0000001c alt_icache_flush_all
0201c3bc g     O .rwdata	00000004 alt_priority_mask
0200227c g     F .text	00000080 Test_pwm_gen_sweep
02014e30 g     F .text	000002a0 OSSemDel
0201e05c g     O .bss	00000004 OSFlagFreeList
0201c3e0 g     O .rwdata	00000002 OSEventNameSize
02006cd8 g     F .text	00000024 __vfprintf_internal
0201e060 g     O .bss	00000001 OSStatRdy
020299a8 g     O .bss	00000054 OSTCBPrioTbl
0200f24c g     F .text	000000ac __env_lock
0201c426 g     O .rwdata	00000002 OSTaskSwHookEn
02002070 g     F .text	000000e8 Test_int16U_differ_by_percent
02002fe4 g     F .text	00000080 __subdf3
0201dfac g     O .bss	00000004 motor_cmd_q
02002b60 g     F .text	00000074 get_gear_ratio
0200999c g     F .text	000000c4 __lo0bits
0201c3c4 g     O .rwdata	00000008 alt_alarm_list
0201c3ee g     O .rwdata	00000002 OSFlagWidth
02018f18 g     F .text	00000064 _do_ctors
0200ac08 g     F .text	00000014 __sigtramp
020189a0 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
0200e06c g     F .text	00000100 close
0201e00c g     O .bss	00000004 alt_envsem
0201e064 g     O .bss	00000004 OSIdleCtrRun
020104f0 g     F .text	00000020 OSVersion
0201c438 g     O .rwdata	00000002 OSTmrCfgWheelSize
0200e840 g     F .text	00000080 alt_load
020171e8 g     F .text	0000007c OS_TaskStkClr
020032e4 g     F .text	00000314 __pack_d
0201c412 g     O .rwdata	00000002 OSTaskCreateEn
02010ae0 g     F .text	00000068 OS_EventWaitListInit
0200aacc g     F .text	00000014 raise
02019990 g     F .text	0000001c OSTaskIdleHook
020038dc g     F .text	00000014 free
020088d8 g     F .text	00000004 __sinit_lock_acquire
020025f8 g     F .text	000002b4 tps_task
0200a624 g     F .text	0000012c __multadd
02016e78 g     F .text	0000022c OSTaskSuspend
02009904 g     F .text	00000028 _Bfree
02011188 g     F .text	0000005c OS_TaskIdle
02000688 g     F .text	00000020 get_motor_cmd_q
0201c43e g     O .rwdata	00000002 OSTmrTblSize
02014a30 g     F .text	00000180 OSQQuery



Disassembly of section .entry:

04004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4004000:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 4004004:	08406814 	ori	at,at,416
    jmp r1
 4004008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04004020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 4004020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 4004024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 4004028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4004030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4004034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4004038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4004040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 4004044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 4004048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4004050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4004054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4004058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4004060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4004064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4004068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4004070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4004074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4004078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400407c:	10000326 	beq	r2,zero,400408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4004080:	20000226 	beq	r4,zero,400408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4004084:	40040ec0 	call	40040ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4004088:	00000306 	br	4004098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 400408c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 4004090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 4004094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 4004098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 400409c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40040a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40040a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40040a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40040ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40040b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40040b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40040b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40040bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40040c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 40040c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40040c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40040cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40040d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40040d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40040d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40040dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40040e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 40040e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40040e8:	ef80083a 	eret

040040ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40040ec:	defff904 	addi	sp,sp,-28
 40040f0:	dfc00615 	stw	ra,24(sp)
 40040f4:	df000515 	stw	fp,20(sp)
 40040f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 40040fc:	200fea80 	call	200fea8 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4004100:	0005313a 	rdctl	r2,ipending
 4004104:	e0bffc15 	stw	r2,-16(fp)

  return active;
 4004108:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400410c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 4004110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4004114:	00800044 	movi	r2,1
 4004118:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400411c:	e0ffff17 	ldw	r3,-4(fp)
 4004120:	e0bffe17 	ldw	r2,-8(fp)
 4004124:	1884703a 	and	r2,r3,r2
 4004128:	1005003a 	cmpeq	r2,r2,zero
 400412c:	1000171e 	bne	r2,zero,400418c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 4004130:	e0bffd17 	ldw	r2,-12(fp)
 4004134:	00c080f4 	movhi	r3,515
 4004138:	18e67f04 	addi	r3,r3,-26116
 400413c:	100490fa 	slli	r2,r2,3
 4004140:	10c5883a 	add	r2,r2,r3
 4004144:	11800017 	ldw	r6,0(r2)
 4004148:	e0bffd17 	ldw	r2,-12(fp)
 400414c:	00c080f4 	movhi	r3,515
 4004150:	18e67f04 	addi	r3,r3,-26116
 4004154:	100490fa 	slli	r2,r2,3
 4004158:	10c5883a 	add	r2,r2,r3
 400415c:	10800104 	addi	r2,r2,4
 4004160:	11000017 	ldw	r4,0(r2)
 4004164:	e17ffd17 	ldw	r5,-12(fp)
 4004168:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400416c:	0005313a 	rdctl	r2,ipending
 4004170:	e0bffb15 	stw	r2,-20(fp)

  return active;
 4004174:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 4004178:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 400417c:	e0bfff17 	ldw	r2,-4(fp)
 4004180:	1004c03a 	cmpne	r2,r2,zero
 4004184:	103fe21e 	bne	r2,zero,4004110 <alt_irq_handler+0x24>
 4004188:	00000706 	br	40041a8 <alt_irq_handler+0xbc>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 400418c:	e0bffe17 	ldw	r2,-8(fp)
 4004190:	1085883a 	add	r2,r2,r2
 4004194:	e0bffe15 	stw	r2,-8(fp)
      i++;
 4004198:	e0bffd17 	ldw	r2,-12(fp)
 400419c:	10800044 	addi	r2,r2,1
 40041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40041a4:	003fdd06 	br	400411c <alt_irq_handler+0x30>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40041a8:	200ff240 	call	200ff24 <OSIntExit>
}
 40041ac:	e037883a 	mov	sp,fp
 40041b0:	dfc00117 	ldw	ra,4(sp)
 40041b4:	df000017 	ldw	fp,0(sp)
 40041b8:	dec00204 	addi	sp,sp,8
 40041bc:	f800283a 	ret

Disassembly of section .text:

020001a0 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001a0:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001a4:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 20001a8:	068080b4 	movhi	gp,514
    ori gp, gp, %lo(_gp)
 20001ac:	d690e314 	ori	gp,gp,17292
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001b0:	00808074 	movhi	r2,513
    ori r2, r2, %lo(__bss_start)
 20001b4:	10b7e114 	ori	r2,r2,57220

    movhi r3, %hi(__bss_end)
 20001b8:	00c080b4 	movhi	r3,514
    ori r3, r3, %lo(__bss_end)
 20001bc:	18e72314 	ori	r3,r3,40076

    beq r2, r3, 1f
 20001c0:	10c00326 	beq	r2,r3,20001d0 <_start+0x30>

0:
    stw zero, (r2)
 20001c4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001c8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001cc:	10fffd36 	bltu	r2,r3,20001c4 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 20001d0:	200e8400 	call	200e840 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001d4:	200ea800 	call	200ea80 <alt_main>

020001d8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 20001d8:	003fff06 	br	20001d8 <alt_after_alt_main>

020001dc <apps_motor_task>:
INT16U *expected_tps_value;

BOOL set_new_motor_position_by_tps(INT16U *tps_reading);

/*  Task routine for pedal position sensor and motor */
void apps_motor_task(void* pdata) {
 20001dc:	defff304 	addi	sp,sp,-52
 20001e0:	dfc00c15 	stw	ra,48(sp)
 20001e4:	df000b15 	stw	fp,44(sp)
 20001e8:	dc000a15 	stw	r16,40(sp)
 20001ec:	df000a04 	addi	fp,sp,40
 20001f0:	e13fff15 	stw	r4,-4(fp)

	adc = get_adc();
 20001f4:	2000a980 	call	2000a98 <get_adc>
 20001f8:	d0a70415 	stw	r2,-25584(gp)

	INT8U err;

	BOOL apps_check_timer_activated = FALSE;
 20001fc:	e03ffd05 	stb	zero,-12(fp)

	alt_alarm* expected_pos_alarm;

	BOOL expected_pos_check_timer_activated = FALSE;
 2000200:	e03ffb45 	stb	zero,-19(fp)

	failure_msg_q = get_failure_msg_q();
 2000204:	2000af80 	call	2000af8 <get_failure_msg_q>
 2000208:	d0a6ff15 	stw	r2,-25604(gp)

	apps_failure_flag = OSSemCreate(SEM_FLAG_NO_ERROR);
 200020c:	0009883a 	mov	r4,zero
 2000210:	2014d1c0 	call	2014d1c <OSSemCreate>
 2000214:	d0a70615 	stw	r2,-25576(gp)

	motor_failure_flag = OSSemCreate(SEM_FLAG_NO_ERROR);
 2000218:	0009883a 	mov	r4,zero
 200021c:	2014d1c0 	call	2014d1c <OSSemCreate>
 2000220:	d0a70215 	stw	r2,-25592(gp)

	external_failure_flag = OSSemCreate(SEM_FLAG_NO_ERROR);
 2000224:	0009883a 	mov	r4,zero
 2000228:	2014d1c0 	call	2014d1c <OSSemCreate>
 200022c:	d0a70315 	stw	r2,-25588(gp)

	failure_resolved_flag = OSSemCreate(SEM_FLAG_ERROR_UNRESOLVED);
 2000230:	0009883a 	mov	r4,zero
 2000234:	2014d1c0 	call	2014d1c <OSSemCreate>
 2000238:	d0a70015 	stw	r2,-25600(gp)

	exit_shift_matching_flag = OSSemCreate(SHIFT_MATCHING_IN_PROGRESS);
 200023c:	0009883a 	mov	r4,zero
 2000240:	2014d1c0 	call	2014d1c <OSSemCreate>
 2000244:	d0a70715 	stw	r2,-25572(gp)

	BOOL shift_matching_mode = FALSE;
 2000248:	e03ffb05 	stb	zero,-20(fp)

	INT16U target_RPM = 0;
 200024c:	e03ffa8d 	sth	zero,-22(fp)

	BOOL slip_control_mode = FALSE;
 2000250:	e03ffa05 	stb	zero,-24(fp)

	static INT16U last_apps_1_reading = 0;
	static INT16U last_apps_2_reading = 0;

	expected_tps_reading_q = OSQCreate((void*) expected_tps_reading_q_buf,
 2000254:	010080b4 	movhi	r4,514
 2000258:	21384604 	addi	r4,r4,-7912
 200025c:	01404004 	movi	r5,256
 2000260:	2013a7c0 	call	2013a7c <OSQCreate>
 2000264:	d0a70515 	stw	r2,-25580(gp)
			EXPECTED_TPS_READING_Q_SIZE_ELEMENTS);
	if (expected_tps_reading_q == NULL) {
 2000268:	d0a70517 	ldw	r2,-25580(gp)
 200026c:	1004c03a 	cmpne	r2,r2,zero
 2000270:	1000041e 	bne	r2,zero,2000284 <apps_motor_task+0xa8>
		printf("failed to init q\n");
 2000274:	010080b4 	movhi	r4,514
 2000278:	2127e704 	addi	r4,r4,-24676
 200027c:	20043740 	call	2004374 <puts>
		return;
 2000280:	0000f306 	br	2000650 <apps_motor_task+0x474>
	}

	motor_cmd_q = OSQCreate((void*) motor_cmd_q_buf,
 2000284:	010080b4 	movhi	r4,514
 2000288:	21382604 	addi	r4,r4,-8040
 200028c:	01401004 	movi	r5,64
 2000290:	2013a7c0 	call	2013a7c <OSQCreate>
 2000294:	d0a70815 	stw	r2,-25568(gp)
			MOTOR_CMD_Q_SIZE_ELEMENTS);
	if (motor_cmd_q == NULL) {
 2000298:	d0a70817 	ldw	r2,-25568(gp)
 200029c:	1004c03a 	cmpne	r2,r2,zero
 20002a0:	1000041e 	bne	r2,zero,20002b4 <apps_motor_task+0xd8>
		printf("failed to init q\n");
 20002a4:	010080b4 	movhi	r4,514
 20002a8:	2127e704 	addi	r4,r4,-24676
 20002ac:	20043740 	call	2004374 <puts>
		return;
 20002b0:	0000e706 	br	2000650 <apps_motor_task+0x474>

	//main loop
	while (1) {
		//failure checking
#if !defined(RUN_AVG_TASK_TIME_TEST)
		if(OSSemAccept(motor_failure_flag) != SEM_FLAG_NO_ERROR){
 20002b4:	d1270217 	ldw	r4,-25592(gp)
 20002b8:	2014c5c0 	call	2014c5c <OSSemAccept>
 20002bc:	10bfffcc 	andi	r2,r2,65535
 20002c0:	1005003a 	cmpeq	r2,r2,zero
 20002c4:	10000b1e 	bne	r2,zero,20002f4 <apps_motor_task+0x118>
			printf("possible motor failure, block tps_task\n");
 20002c8:	010080b4 	movhi	r4,514
 20002cc:	2127ec04 	addi	r4,r4,-24656
 20002d0:	20043740 	call	2004374 <puts>
			expected_pos_check_timer_activated = FALSE;
 20002d4:	e03ffb45 	stb	zero,-19(fp)
			free(expected_pos_alarm);
 20002d8:	e13ffc17 	ldw	r4,-16(fp)
 20002dc:	20038dc0 	call	20038dc <free>
			OSSemPend(failure_resolved_flag, Q_TIMEOUT_WAIT_FOREVER, &err);
 20002e0:	d1270017 	ldw	r4,-25600(gp)
 20002e4:	e1bffd44 	addi	r6,fp,-11
 20002e8:	000b883a 	mov	r5,zero
 20002ec:	20150d00 	call	20150d0 <OSSemPend>
 20002f0:	00001c06 	br	2000364 <apps_motor_task+0x188>
		}else if(OSSemAccept(apps_failure_flag) != SEM_FLAG_NO_ERROR){
 20002f4:	d1270617 	ldw	r4,-25576(gp)
 20002f8:	2014c5c0 	call	2014c5c <OSSemAccept>
 20002fc:	10bfffcc 	andi	r2,r2,65535
 2000300:	1005003a 	cmpeq	r2,r2,zero
 2000304:	10000b1e 	bne	r2,zero,2000334 <apps_motor_task+0x158>
			printf("possible APPS failure, block apps_motor_task\n");
 2000308:	010080b4 	movhi	r4,514
 200030c:	2127f604 	addi	r4,r4,-24616
 2000310:	20043740 	call	2004374 <puts>
			apps_check_timer_activated = FALSE;
 2000314:	e03ffd05 	stb	zero,-12(fp)
			free(alarm);
 2000318:	e13ff917 	ldw	r4,-28(fp)
 200031c:	20038dc0 	call	20038dc <free>
			OSSemPend(failure_resolved_flag, Q_TIMEOUT_WAIT_FOREVER, &err);
 2000320:	d1270017 	ldw	r4,-25600(gp)
 2000324:	e1bffd44 	addi	r6,fp,-11
 2000328:	000b883a 	mov	r5,zero
 200032c:	20150d00 	call	20150d0 <OSSemPend>
 2000330:	00000c06 	br	2000364 <apps_motor_task+0x188>
		}else if(OSSemAccept(external_failure_flag) != SEM_FLAG_NO_ERROR){
 2000334:	d1270317 	ldw	r4,-25588(gp)
 2000338:	2014c5c0 	call	2014c5c <OSSemAccept>
 200033c:	10bfffcc 	andi	r2,r2,65535
 2000340:	1005003a 	cmpeq	r2,r2,zero
 2000344:	1000071e 	bne	r2,zero,2000364 <apps_motor_task+0x188>
			printf("External failure, block apps_motor_task\n");
 2000348:	010080b4 	movhi	r4,514
 200034c:	21280204 	addi	r4,r4,-24568
 2000350:	20043740 	call	2004374 <puts>
			OSSemPend(failure_resolved_flag, Q_TIMEOUT_WAIT_FOREVER, &err);
 2000354:	d1270017 	ldw	r4,-25600(gp)
 2000358:	e1bffd44 	addi	r6,fp,-11
 200035c:	000b883a 	mov	r5,zero
 2000360:	20150d00 	call	20150d0 <OSSemPend>
		}
#endif
		//WSS checking
		alt_up_de0_nano_adc_update(adc);
 2000364:	d0a70417 	ldw	r2,-25584(gp)
 2000368:	10800a17 	ldw	r2,40(r2)
 200036c:	10000035 	stwio	zero,0(r2)
		if(WSS_VALUE_MISMATCH(WSS_1_ADC_CHANNEL, WSS_2_ADC_CHANNEL)){
 2000370:	01000104 	movi	r4,4
 2000374:	01400144 	movi	r5,5
 2000378:	01800784 	movi	r6,30
 200037c:	01d09004 	movi	r7,16960
 2000380:	2002a580 	call	2002a58 <int16U_differ_by_percent>
 2000384:	10803fcc 	andi	r2,r2,255
 2000388:	1005003a 	cmpeq	r2,r2,zero
 200038c:	1000081e 	bne	r2,zero,20003b0 <apps_motor_task+0x1d4>
			if(slip_control_mode == TRUE){
 2000390:	e0bffa03 	ldbu	r2,-24(fp)
 2000394:	10803fe0 	cmpeqi	r2,r2,255
 2000398:	103fc61e 	bne	r2,zero,20002b4 <apps_motor_task+0xd8>
				continue;
			}
			slip_control_mode = TRUE;
 200039c:	00bfffc4 	movi	r2,-1
 20003a0:	e0bffa05 	stb	r2,-24(fp)
			set_new_motor_position_by_tps(SLIP_CONTROL_THROTTLE_POS);
 20003a4:	01000504 	movi	r4,20
 20003a8:	20007040 	call	2000704 <set_new_motor_position_by_tps>
			continue;
 20003ac:	003fc106 	br	20002b4 <apps_motor_task+0xd8>
		}else{
			slip_control_mode = FALSE;
 20003b0:	e03ffa05 	stb	zero,-24(fp)
		}

		//Shift matching
		alt_up_de0_nano_adc_update(adc);
 20003b4:	d0a70417 	ldw	r2,-25584(gp)
 20003b8:	10800a17 	ldw	r2,40(r2)
 20003bc:	10000035 	stwio	zero,0(r2)
		if(shift_matching_mode == TRUE){
 20003c0:	e0bffb03 	ldbu	r2,-20(fp)
 20003c4:	10803fd8 	cmpnei	r2,r2,255
 20003c8:	10000b1e 	bne	r2,zero,20003f8 <apps_motor_task+0x21c>
			if(alt_up_de0_nano_adc_read(adc, RPM_ADC_CHANNEL) == target_RPM){
 20003cc:	d1270417 	ldw	r4,-25584(gp)
 20003d0:	01400184 	movi	r5,6
 20003d4:	20187b40 	call	20187b4 <alt_up_de0_nano_adc_read>
 20003d8:	1007883a 	mov	r3,r2
 20003dc:	e0bffa8b 	ldhu	r2,-22(fp)
 20003e0:	18bfb41e 	bne	r3,r2,20002b4 <apps_motor_task+0xd8>
				signal_shift_start();
 20003e4:	20010480 	call	2001048 <signal_shift_start>
				OSSemPend(exit_shift_matching_flag, Q_TIMEOUT_WAIT_FOREVER, &err);
 20003e8:	d1270717 	ldw	r4,-25572(gp)
 20003ec:	e1bffd44 	addi	r6,fp,-11
 20003f0:	000b883a 	mov	r5,zero
 20003f4:	20150d00 	call	20150d0 <OSSemPend>
			}else{
				continue;
			}
		}
		void* ptr = NULL;
 20003f8:	e03ff815 	stw	zero,-32(fp)
		if(shift_matching_mode == FALSE){
 20003fc:	e0bffb03 	ldbu	r2,-20(fp)
 2000400:	1004c03a 	cmpne	r2,r2,zero
 2000404:	1000041e 	bne	r2,zero,2000418 <apps_motor_task+0x23c>
			ptr = OSQAccept(motor_cmd_q, &err);
 2000408:	d1270817 	ldw	r4,-25568(gp)
 200040c:	e17ffd44 	addi	r5,fp,-11
 2000410:	20139280 	call	2013928 <OSQAccept>
 2000414:	e0bff815 	stw	r2,-32(fp)
		}
		if(ptr != NULL && shift_matching_mode == FALSE){
 2000418:	e0bff817 	ldw	r2,-32(fp)
 200041c:	1005003a 	cmpeq	r2,r2,zero
 2000420:	1000171e 	bne	r2,zero,2000480 <apps_motor_task+0x2a4>
 2000424:	e0bffb03 	ldbu	r2,-20(fp)
 2000428:	1004c03a 	cmpne	r2,r2,zero
 200042c:	1000141e 	bne	r2,zero,2000480 <apps_motor_task+0x2a4>
			shift_matching_mode = TRUE;
 2000430:	00bfffc4 	movi	r2,-1
 2000434:	e0bffb05 	stb	r2,-20(fp)
			INT16U new_gear = *(INT16U*) ptr;
 2000438:	e0bff817 	ldw	r2,-32(fp)
 200043c:	1080000b 	ldhu	r2,0(r2)
 2000440:	e0bff60d 	sth	r2,-40(fp)
			INT16U new_throttle_pos = get_throttle_pos_for_RPM_gear(new_gear, alt_up_de0_nano_adc_read(adc, RPM_ADC_CHANNEL) / RPM_SCALE_FACTOR);
 2000444:	e0bff60b 	ldhu	r2,-40(fp)
 2000448:	14003fcc 	andi	r16,r2,255
 200044c:	d1270417 	ldw	r4,-25584(gp)
 2000450:	01400184 	movi	r5,6
 2000454:	20187b40 	call	20187b4 <alt_up_de0_nano_adc_read>
 2000458:	1009883a 	mov	r4,r2
 200045c:	01401904 	movi	r5,100
 2000460:	200329c0 	call	200329c <__udivsi3>
 2000464:	11403fcc 	andi	r5,r2,255
 2000468:	8009883a 	mov	r4,r16
 200046c:	20024f80 	call	20024f8 <get_throttle_pos_for_RPM_gear>
 2000470:	e0bffd8d 	sth	r2,-10(fp)
			set_new_motor_position_by_tps(&new_throttle_pos);
 2000474:	e13ffd84 	addi	r4,fp,-10
 2000478:	20007040 	call	2000704 <set_new_motor_position_by_tps>
			continue;
 200047c:	003f8d06 	br	20002b4 <apps_motor_task+0xd8>
		}

		//APPS checking
		alt_up_de0_nano_adc_update(adc);
 2000480:	d0a70417 	ldw	r2,-25584(gp)
 2000484:	10800a17 	ldw	r2,40(r2)
 2000488:	10000035 	stwio	zero,0(r2)
		INT16U apps_1_reading = alt_up_de0_nano_adc_read(adc,
				APPS_1_ADC_CHANNEL);
 200048c:	d1270417 	ldw	r4,-25584(gp)
 2000490:	000b883a 	mov	r5,zero
 2000494:	20187b40 	call	20187b4 <alt_up_de0_nano_adc_read>
 2000498:	e0bff70d 	sth	r2,-36(fp)
		//Must accommodate the natural difference in readings
		INT16U apps_2_reading = alt_up_de0_nano_adc_read(adc,
				APPS_2_ADC_CHANNEL) + APPS_SENSOR_OFFSET;
 200049c:	d1270417 	ldw	r4,-25584(gp)
 20004a0:	01400044 	movi	r5,1
 20004a4:	20187b40 	call	20187b4 <alt_up_de0_nano_adc_read>
 20004a8:	1080e104 	addi	r2,r2,900
 20004ac:	e0bff68d 	sth	r2,-38(fp)

		if (APPS_VALUE_CHANGED(apps_1_reading,
 20004b0:	e13ff70b 	ldhu	r4,-36(fp)
 20004b4:	d0a6fe8b 	ldhu	r2,-25606(gp)
 20004b8:	117fffcc 	andi	r5,r2,65535
 20004bc:	01801904 	movi	r6,100
 20004c0:	20029d00 	call	20029d0 <int16U_changed_by_threshold>
 20004c4:	10803fcc 	andi	r2,r2,255
 20004c8:	1004c03a 	cmpne	r2,r2,zero
 20004cc:	1000081e 	bne	r2,zero,20004f0 <apps_motor_task+0x314>
 20004d0:	e13ff68b 	ldhu	r4,-38(fp)
 20004d4:	d0a6fe0b 	ldhu	r2,-25608(gp)
 20004d8:	117fffcc 	andi	r5,r2,65535
 20004dc:	01801904 	movi	r6,100
 20004e0:	20029d00 	call	20029d0 <int16U_changed_by_threshold>
 20004e4:	10803fcc 	andi	r2,r2,255
 20004e8:	1005003a 	cmpeq	r2,r2,zero
 20004ec:	1000521e 	bne	r2,zero,2000638 <apps_motor_task+0x45c>
				last_apps_1_reading)
				|| APPS_VALUE_CHANGED(apps_2_reading, last_apps_2_reading)) {
#if !defined(RUN_AVG_TASK_TIME_TEST)
			printf("apps1 read value:%d\n", apps_1_reading);
 20004f0:	e17ff70b 	ldhu	r5,-36(fp)
 20004f4:	010080b4 	movhi	r4,514
 20004f8:	21280c04 	addi	r4,r4,-24528
 20004fc:	200425c0 	call	200425c <printf>
			printf("apps2 read value:%d\n", apps_2_reading);
 2000500:	e17ff68b 	ldhu	r5,-38(fp)
 2000504:	010080b4 	movhi	r4,514
 2000508:	21281204 	addi	r4,r4,-24504
 200050c:	200425c0 	call	200425c <printf>
#endif
			if (APPS_VALUE_MISMATCH(apps_1_reading, apps_2_reading)) {
 2000510:	e13ff70b 	ldhu	r4,-36(fp)
 2000514:	e17ff68b 	ldhu	r5,-38(fp)
 2000518:	01800284 	movi	r6,10
 200051c:	01d09004 	movi	r7,16960
 2000520:	2002a580 	call	2002a58 <int16U_differ_by_percent>
 2000524:	10803fcc 	andi	r2,r2,255
 2000528:	1005003a 	cmpeq	r2,r2,zero
 200052c:	1000121e 	bne	r2,zero,2000578 <apps_motor_task+0x39c>
				//we have a mismatch, check again after 100 ms
				if(apps_check_timer_activated == FALSE){
 2000530:	e0bffd03 	ldbu	r2,-12(fp)
 2000534:	1004c03a 	cmpne	r2,r2,zero
 2000538:	10003b1e 	bne	r2,zero,2000628 <apps_motor_task+0x44c>
					apps_check_timer_activated = TRUE;
 200053c:	00bfffc4 	movi	r2,-1
 2000540:	e0bffd05 	stb	r2,-12(fp)
					printf("set alarm\n");
 2000544:	010080b4 	movhi	r4,514
 2000548:	21281804 	addi	r4,r4,-24480
 200054c:	20043740 	call	2004374 <puts>
					alarm = (alt_alarm*)malloc(sizeof(alt_alarm));
 2000550:	01000604 	movi	r4,24
 2000554:	20038f00 	call	20038f0 <malloc>
 2000558:	e0bff915 	stw	r2,-28(fp)
					alt_alarm_start(alarm, SENSOR_VAL_COMP_DELAY_TICKS, &apps_value_comp_callback, NULL);
 200055c:	e13ff917 	ldw	r4,-28(fp)
 2000560:	01401904 	movi	r5,100
 2000564:	01808034 	movhi	r6,512
 2000568:	3181cf04 	addi	r6,r6,1852
 200056c:	000f883a 	mov	r7,zero
 2000570:	200df180 	call	200df18 <alt_alarm_start>
 2000574:	00002c06 	br	2000628 <apps_motor_task+0x44c>
				}
			} else {
				if(apps_check_timer_activated == TRUE){
 2000578:	e0bffd03 	ldbu	r2,-12(fp)
 200057c:	10803fd8 	cmpnei	r2,r2,255
 2000580:	1000081e 	bne	r2,zero,20005a4 <apps_motor_task+0x3c8>
					printf("clear alarm\n");
 2000584:	010080b4 	movhi	r4,514
 2000588:	21281b04 	addi	r4,r4,-24468
 200058c:	20043740 	call	2004374 <puts>
					alt_alarm_stop(alarm);
 2000590:	e13ff917 	ldw	r4,-28(fp)
 2000594:	200ee000 	call	200ee00 <alt_alarm_stop>
					free(alarm);
 2000598:	e13ff917 	ldw	r4,-28(fp)
 200059c:	20038dc0 	call	20038dc <free>
					apps_check_timer_activated = FALSE;
 20005a0:	e03ffd05 	stb	zero,-12(fp)
				}
				INT16U final_apps_value = (apps_1_reading + apps_2_reading) / 2;
 20005a4:	e0fff70b 	ldhu	r3,-36(fp)
 20005a8:	e0bff68b 	ldhu	r2,-38(fp)
 20005ac:	1887883a 	add	r3,r3,r2
 20005b0:	1804d7fa 	srli	r2,r3,31
 20005b4:	10c5883a 	add	r2,r2,r3
 20005b8:	1005d07a 	srai	r2,r2,1
 20005bc:	e0bffe0d 	sth	r2,-8(fp)
				set_new_motor_position(&final_apps_value);
 20005c0:	e13ffe04 	addi	r4,fp,-8
 20005c4:	20006cc0 	call	20006cc <set_new_motor_position>
				//activate expected position checker
				if(expected_pos_check_timer_activated == TRUE){
 20005c8:	e0bffb43 	ldbu	r2,-19(fp)
 20005cc:	10803fd8 	cmpnei	r2,r2,255
 20005d0:	1000041e 	bne	r2,zero,20005e4 <apps_motor_task+0x408>
					alt_alarm_stop(expected_pos_alarm);
 20005d4:	e13ffc17 	ldw	r4,-16(fp)
 20005d8:	200ee000 	call	200ee00 <alt_alarm_stop>
					free(expected_pos_alarm);
 20005dc:	e13ffc17 	ldw	r4,-16(fp)
 20005e0:	20038dc0 	call	20038dc <free>
				}
				expected_pos_alarm = (alt_alarm*) malloc(sizeof(alt_alarm));
 20005e4:	01000604 	movi	r4,24
 20005e8:	20038f00 	call	20038f0 <malloc>
 20005ec:	e0bffc15 	stw	r2,-16(fp)
				alt_alarm_start(expected_pos_alarm, MOTOR_DRIVE_DELAY_TICKS, &motor_pos_check_callback, NULL);
 20005f0:	e13ffc17 	ldw	r4,-16(fp)
 20005f4:	0140fa04 	movi	r5,1000
 20005f8:	01808034 	movhi	r6,512
 20005fc:	3181f204 	addi	r6,r6,1992
 2000600:	000f883a 	mov	r7,zero
 2000604:	200df180 	call	200df18 <alt_alarm_start>
				*expected_tps_value = get_expected_tps_reading(
 2000608:	d4270117 	ldw	r16,-25596(gp)
 200060c:	e0bffe0b 	ldhu	r2,-8(fp)
 2000610:	113fffcc 	andi	r4,r2,65535
 2000614:	20006a80 	call	20006a8 <get_expected_tps_reading>
 2000618:	8080000d 	sth	r2,0(r16)
						final_apps_value);
				OSQPost(expected_tps_reading_q, (void*) expected_tps_value);
 200061c:	d1270517 	ldw	r4,-25580(gp)
 2000620:	d1670117 	ldw	r5,-25596(gp)
 2000624:	20144f40 	call	20144f4 <OSQPost>

			}
			last_apps_1_reading = apps_1_reading;
 2000628:	e0bff70b 	ldhu	r2,-36(fp)
 200062c:	d0a6fe8d 	sth	r2,-25606(gp)
			last_apps_2_reading = apps_2_reading;
 2000630:	e0bff68b 	ldhu	r2,-38(fp)
 2000634:	d0a6fe0d 	sth	r2,-25608(gp)
		if(iteration_count % AVG_ITERATION == 0){
			end_tick = alt_timestamp();
			printf("a%d:%d\n", iteration_count, (end_tick - start_tick)/iteration_count);
		}
#endif
		OSTimeDlyHMSM(APPS_MOTOR_TASK_DELAY_HOURS,
 2000638:	0009883a 	mov	r4,zero
 200063c:	000b883a 	mov	r5,zero
 2000640:	000d883a 	mov	r6,zero
 2000644:	01c00284 	movi	r7,10
 2000648:	20173b00 	call	20173b0 <OSTimeDlyHMSM>
				APPS_MOTOR_TASK_DELAY_MINUTES, APPS_MOTOR_TASK_DELAY_SECONDS,
				APPS_MOTOR_TASK_DELAY_MILLISEC);
	}
 200064c:	003f1906 	br	20002b4 <apps_motor_task+0xd8>

}
 2000650:	e037883a 	mov	sp,fp
 2000654:	dfc00217 	ldw	ra,8(sp)
 2000658:	df000117 	ldw	fp,4(sp)
 200065c:	dc000017 	ldw	r16,0(sp)
 2000660:	dec00304 	addi	sp,sp,12
 2000664:	f800283a 	ret

02000668 <get_expected_motor_pos_q>:

/* Getter for expected motor position Q for TPS process to use */
OS_EVENT* get_expected_motor_pos_q() {
 2000668:	deffff04 	addi	sp,sp,-4
 200066c:	df000015 	stw	fp,0(sp)
 2000670:	d839883a 	mov	fp,sp
	return expected_tps_reading_q;
 2000674:	d0a70517 	ldw	r2,-25580(gp)
}
 2000678:	e037883a 	mov	sp,fp
 200067c:	df000017 	ldw	fp,0(sp)
 2000680:	dec00104 	addi	sp,sp,4
 2000684:	f800283a 	ret

02000688 <get_motor_cmd_q>:

/* Getter for motor command Q for other modules to use */
OS_EVENT* get_motor_cmd_q() {
 2000688:	deffff04 	addi	sp,sp,-4
 200068c:	df000015 	stw	fp,0(sp)
 2000690:	d839883a 	mov	fp,sp
	return motor_cmd_q;
 2000694:	d0a70817 	ldw	r2,-25568(gp)
}
 2000698:	e037883a 	mov	sp,fp
 200069c:	df000017 	ldw	fp,0(sp)
 20006a0:	dec00104 	addi	sp,sp,4
 20006a4:	f800283a 	ret

020006a8 <get_expected_tps_reading>:

/* Takes in APPS reading and returns the expected TPS reading */
INT16U get_expected_tps_reading(INT16U apps_reading) {
 20006a8:	defffe04 	addi	sp,sp,-8
 20006ac:	df000115 	stw	fp,4(sp)
 20006b0:	df000104 	addi	fp,sp,4
 20006b4:	e13fff0d 	sth	r4,-4(fp)
	//Not implemented yet, but in the future
	//expected TPS reading will be either computed at run time
	//or acquired from a lookup table

	return apps_reading;
 20006b8:	e0bfff0b 	ldhu	r2,-4(fp)
}
 20006bc:	e037883a 	mov	sp,fp
 20006c0:	df000017 	ldw	fp,0(sp)
 20006c4:	dec00104 	addi	sp,sp,4
 20006c8:	f800283a 	ret

020006cc <set_new_motor_position>:

/* Set motor to reach a new position, return true if no error occurred */
BOOL set_new_motor_position(INT16U *apps_reading) {
 20006cc:	defffd04 	addi	sp,sp,-12
 20006d0:	dfc00215 	stw	ra,8(sp)
 20006d4:	df000115 	stw	fp,4(sp)
 20006d8:	df000104 	addi	fp,sp,4
 20006dc:	e13fff15 	stw	r4,-4(fp)
	OSQPost(expected_tps_reading_q, (void*) apps_reading);
 20006e0:	d1270517 	ldw	r4,-25580(gp)
 20006e4:	e17fff17 	ldw	r5,-4(fp)
 20006e8:	20144f40 	call	20144f4 <OSQPost>
	return TRUE;
 20006ec:	00803fc4 	movi	r2,255
}
 20006f0:	e037883a 	mov	sp,fp
 20006f4:	dfc00117 	ldw	ra,4(sp)
 20006f8:	df000017 	ldw	fp,0(sp)
 20006fc:	dec00204 	addi	sp,sp,8
 2000700:	f800283a 	ret

02000704 <set_new_motor_position_by_tps>:

BOOL set_new_motor_position_by_tps(INT16U *tps_reading) {
 2000704:	defffd04 	addi	sp,sp,-12
 2000708:	dfc00215 	stw	ra,8(sp)
 200070c:	df000115 	stw	fp,4(sp)
 2000710:	df000104 	addi	fp,sp,4
 2000714:	e13fff15 	stw	r4,-4(fp)

	OSQPost(expected_tps_reading_q, (void*) tps_reading);
 2000718:	d1270517 	ldw	r4,-25580(gp)
 200071c:	e17fff17 	ldw	r5,-4(fp)
 2000720:	20144f40 	call	20144f4 <OSQPost>

	return TRUE;
 2000724:	00803fc4 	movi	r2,255
}
 2000728:	e037883a 	mov	sp,fp
 200072c:	dfc00117 	ldw	ra,4(sp)
 2000730:	df000017 	ldw	fp,0(sp)
 2000734:	dec00204 	addi	sp,sp,8
 2000738:	f800283a 	ret

0200073c <apps_value_comp_callback>:

/* Callback function after 100 ms position sensor comparison timeout */
alt_u32 apps_value_comp_callback(void* context){
 200073c:	defffc04 	addi	sp,sp,-16
 2000740:	dfc00315 	stw	ra,12(sp)
 2000744:	df000215 	stw	fp,8(sp)
 2000748:	df000204 	addi	fp,sp,8
 200074c:	e13fff15 	stw	r4,-4(fp)
	alt_up_de0_nano_adc_update(adc);
 2000750:	d0a70417 	ldw	r2,-25584(gp)
 2000754:	10800a17 	ldw	r2,40(r2)
 2000758:	10000035 	stwio	zero,0(r2)
	INT16U apps_1_reading = alt_up_de0_nano_adc_read(adc,
			APPS_1_ADC_CHANNEL);
 200075c:	d1270417 	ldw	r4,-25584(gp)
 2000760:	000b883a 	mov	r5,zero
 2000764:	20187b40 	call	20187b4 <alt_up_de0_nano_adc_read>
 2000768:	e0bffe8d 	sth	r2,-6(fp)
	INT16U apps_2_reading = alt_up_de0_nano_adc_read(adc,
			APPS_2_ADC_CHANNEL);
 200076c:	d1270417 	ldw	r4,-25584(gp)
 2000770:	01400044 	movi	r5,1
 2000774:	20187b40 	call	20187b4 <alt_up_de0_nano_adc_read>
 2000778:	e0bffe0d 	sth	r2,-8(fp)
	if (APPS_VALUE_MISMATCH(apps_1_reading, apps_2_reading)) {
 200077c:	e13ffe8b 	ldhu	r4,-6(fp)
 2000780:	e17ffe0b 	ldhu	r5,-8(fp)
 2000784:	01800284 	movi	r6,10
 2000788:	01d09004 	movi	r7,16960
 200078c:	2002a580 	call	2002a58 <int16U_differ_by_percent>
 2000790:	10803fcc 	andi	r2,r2,255
 2000794:	1005003a 	cmpeq	r2,r2,zero
 2000798:	1000051e 	bne	r2,zero,20007b0 <apps_value_comp_callback+0x74>
		OSSemPost(apps_failure_flag);
 200079c:	d1270617 	ldw	r4,-25576(gp)
 20007a0:	20154c80 	call	20154c8 <OSSemPost>
		OSQPost(failure_msg_q, (void*) ERR_APPS_READING_MISMATCH);
 20007a4:	d126ff17 	ldw	r4,-25604(gp)
 20007a8:	01400084 	movi	r5,2
 20007ac:	20144f40 	call	20144f4 <OSQPost>
	}
	return 0;
 20007b0:	0005883a 	mov	r2,zero
}
 20007b4:	e037883a 	mov	sp,fp
 20007b8:	dfc00117 	ldw	ra,4(sp)
 20007bc:	df000017 	ldw	fp,0(sp)
 20007c0:	dec00204 	addi	sp,sp,8
 20007c4:	f800283a 	ret

020007c8 <motor_pos_check_callback>:

/* Callback function to check motor position */
alt_u32 motor_pos_check_callback(void* context){
 20007c8:	defffd04 	addi	sp,sp,-12
 20007cc:	dfc00215 	stw	ra,8(sp)
 20007d0:	df000115 	stw	fp,4(sp)
 20007d4:	df000104 	addi	fp,sp,4
 20007d8:	e13fff15 	stw	r4,-4(fp)
	OSQPost(expected_tps_reading_q, (void*) expected_tps_value);
 20007dc:	d1270517 	ldw	r4,-25580(gp)
 20007e0:	d1670117 	ldw	r5,-25596(gp)
 20007e4:	20144f40 	call	20144f4 <OSQPost>
	return 0;
 20007e8:	0005883a 	mov	r2,zero
}
 20007ec:	e037883a 	mov	sp,fp
 20007f0:	dfc00117 	ldw	ra,4(sp)
 20007f4:	df000017 	ldw	fp,0(sp)
 20007f8:	dec00204 	addi	sp,sp,8
 20007fc:	f800283a 	ret

02000800 <get_motor_failure_flag>:

OS_EVENT* get_motor_failure_flag(){
 2000800:	deffff04 	addi	sp,sp,-4
 2000804:	df000015 	stw	fp,0(sp)
 2000808:	d839883a 	mov	fp,sp
	return motor_failure_flag;
 200080c:	d0a70217 	ldw	r2,-25592(gp)
}
 2000810:	e037883a 	mov	sp,fp
 2000814:	df000017 	ldw	fp,0(sp)
 2000818:	dec00104 	addi	sp,sp,4
 200081c:	f800283a 	ret

02000820 <get_apps_motor_task_external_failure_flag>:

OS_EVENT* get_apps_motor_task_external_failure_flag(){
 2000820:	deffff04 	addi	sp,sp,-4
 2000824:	df000015 	stw	fp,0(sp)
 2000828:	d839883a 	mov	fp,sp
	return external_failure_flag;
 200082c:	d0a70317 	ldw	r2,-25588(gp)
}
 2000830:	e037883a 	mov	sp,fp
 2000834:	df000017 	ldw	fp,0(sp)
 2000838:	dec00104 	addi	sp,sp,4
 200083c:	f800283a 	ret

02000840 <get_apps_motor_task_failure_resolved_flag>:

OS_EVENT* get_apps_motor_task_failure_resolved_flag(){
 2000840:	deffff04 	addi	sp,sp,-4
 2000844:	df000015 	stw	fp,0(sp)
 2000848:	d839883a 	mov	fp,sp
	return failure_resolved_flag;
 200084c:	d0a70017 	ldw	r2,-25600(gp)
}
 2000850:	e037883a 	mov	sp,fp
 2000854:	df000017 	ldw	fp,0(sp)
 2000858:	dec00104 	addi	sp,sp,4
 200085c:	f800283a 	ret

02000860 <signal_exit_shift_matching>:

void signal_exit_shift_matching(){
 2000860:	defffe04 	addi	sp,sp,-8
 2000864:	dfc00115 	stw	ra,4(sp)
 2000868:	df000015 	stw	fp,0(sp)
 200086c:	d839883a 	mov	fp,sp
	OSSemPost(exit_shift_matching_flag);
 2000870:	d1270717 	ldw	r4,-25572(gp)
 2000874:	20154c80 	call	20154c8 <OSSemPost>
}
 2000878:	e037883a 	mov	sp,fp
 200087c:	dfc00117 	ldw	ra,4(sp)
 2000880:	df000017 	ldw	fp,0(sp)
 2000884:	dec00204 	addi	sp,sp,8
 2000888:	f800283a 	ret

0200088c <failure_handler_task>:
#include "failure_handler_proc.h"

OS_EVENT *failure_resolved_flag;

/*  Task routine for handling any failures motors/sensors */
void failure_handler_task(void* pdata) {
 200088c:	defff904 	addi	sp,sp,-28
 2000890:	dfc00615 	stw	ra,24(sp)
 2000894:	df000515 	stw	fp,20(sp)
 2000898:	df000504 	addi	fp,sp,20
 200089c:	e13ffe15 	stw	r4,-8(fp)

	INT8U err;
	OS_EVENT *failure_code_q = get_failure_msg_q();
 20008a0:	2000af80 	call	2000af8 <get_failure_msg_q>
 20008a4:	e0bffc15 	stw	r2,-16(fp)
	failure_resolved_flag = OSSemCreate(SEM_FLAG_ERROR_UNRESOLVED);
 20008a8:	0009883a 	mov	r4,zero
 20008ac:	2014d1c0 	call	2014d1c <OSSemCreate>
 20008b0:	d0a70015 	stw	r2,-25600(gp)
 20008b4:	00000006 	br	20008b8 <failure_handler_task+0x2c>

	while (1) {
		INT8U msg = (INT8U) OSQPend(failure_code_q, Q_TIMEOUT_WAIT_FOREVER,
				&err);
 20008b8:	e1bffd04 	addi	r6,fp,-12
 20008bc:	e13ffc17 	ldw	r4,-16(fp)
 20008c0:	000b883a 	mov	r5,zero
 20008c4:	20140580 	call	2014058 <OSQPend>
 20008c8:	e0bffb05 	stb	r2,-20(fp)
		if (err)
 20008cc:	e0bffd03 	ldbu	r2,-12(fp)
 20008d0:	10803fcc 	andi	r2,r2,255
 20008d4:	1005003a 	cmpeq	r2,r2,zero
 20008d8:	1000051e 	bne	r2,zero,20008f0 <failure_handler_task+0x64>
			disp_err(err, "Error pending on q");
 20008dc:	e0bffd03 	ldbu	r2,-12(fp)
 20008e0:	11003fcc 	andi	r4,r2,255
 20008e4:	014080b4 	movhi	r5,514
 20008e8:	29681e04 	addi	r5,r5,-24456
 20008ec:	2000ab80 	call	2000ab8 <disp_err>

		//Routing table for all possible errors
		switch (msg) {
 20008f0:	e0bffb03 	ldbu	r2,-20(fp)
 20008f4:	e0bfff15 	stw	r2,-4(fp)
 20008f8:	e0ffff17 	ldw	r3,-4(fp)
 20008fc:	18800060 	cmpeqi	r2,r3,1
 2000900:	10000e1e 	bne	r2,zero,200093c <failure_handler_task+0xb0>
 2000904:	e0ffff17 	ldw	r3,-4(fp)
 2000908:	18800088 	cmpgei	r2,r3,2
 200090c:	1000041e 	bne	r2,zero,2000920 <failure_handler_task+0x94>
 2000910:	e0ffff17 	ldw	r3,-4(fp)
 2000914:	1805003a 	cmpeq	r2,r3,zero
 2000918:	1000261e 	bne	r2,zero,20009b4 <failure_handler_task+0x128>
 200091c:	00003206 	br	20009e8 <failure_handler_task+0x15c>
 2000920:	e0ffff17 	ldw	r3,-4(fp)
 2000924:	188000a0 	cmpeqi	r2,r3,2
 2000928:	10000e1e 	bne	r2,zero,2000964 <failure_handler_task+0xd8>
 200092c:	e0ffff17 	ldw	r3,-4(fp)
 2000930:	188000e0 	cmpeqi	r2,r3,3
 2000934:	1000151e 	bne	r2,zero,200098c <failure_handler_task+0x100>
 2000938:	00002b06 	br	20009e8 <failure_handler_task+0x15c>

		case ERR_EXPECTED_THROTTLE_POS_MISMATCH:
			printf("Possible motor failure detected!\n");
 200093c:	010080b4 	movhi	r4,514
 2000940:	21282304 	addi	r4,r4,-24436
 2000944:	20043740 	call	2004374 <puts>
			OSSemPost(get_tps_task_external_failure_flag());
 2000948:	20029b00 	call	20029b0 <get_tps_task_external_failure_flag>
 200094c:	1009883a 	mov	r4,r2
 2000950:	20154c80 	call	20154c8 <OSSemPost>
			OSSemPost(get_solenoid_task_external_failure_flag());
 2000954:	20010080 	call	2001008 <get_solenoid_task_external_failure_flag>
 2000958:	1009883a 	mov	r4,r2
 200095c:	20154c80 	call	20154c8 <OSSemPost>
			break;
 2000960:	003fd506 	br	20008b8 <failure_handler_task+0x2c>

		case ERR_APPS_READING_MISMATCH:
			printf("Possible APPS failure detected!\n");
 2000964:	010080b4 	movhi	r4,514
 2000968:	21282c04 	addi	r4,r4,-24400
 200096c:	20043740 	call	2004374 <puts>
			OSSemPost(get_tps_task_external_failure_flag());
 2000970:	20029b00 	call	20029b0 <get_tps_task_external_failure_flag>
 2000974:	1009883a 	mov	r4,r2
 2000978:	20154c80 	call	20154c8 <OSSemPost>
			OSSemPost(get_solenoid_task_external_failure_flag());
 200097c:	20010080 	call	2001008 <get_solenoid_task_external_failure_flag>
 2000980:	1009883a 	mov	r4,r2
 2000984:	20154c80 	call	20154c8 <OSSemPost>
			break;
 2000988:	003fcb06 	br	20008b8 <failure_handler_task+0x2c>

		case ERR_TPS_READING_MISMATCH:
			printf("Possible TPS failure detected!\n");
 200098c:	010080b4 	movhi	r4,514
 2000990:	21283404 	addi	r4,r4,-24368
 2000994:	20043740 	call	2004374 <puts>
			OSSemPost(get_apps_motor_task_external_failure_flag());
 2000998:	20008200 	call	2000820 <get_apps_motor_task_external_failure_flag>
 200099c:	1009883a 	mov	r4,r2
 20009a0:	20154c80 	call	20154c8 <OSSemPost>
			OSSemPost(get_solenoid_task_external_failure_flag());
 20009a4:	20010080 	call	2001008 <get_solenoid_task_external_failure_flag>
 20009a8:	1009883a 	mov	r4,r2
 20009ac:	20154c80 	call	20154c8 <OSSemPost>
			break;
 20009b0:	003fc106 	br	20008b8 <failure_handler_task+0x2c>

		case ERR_UNKNOWN:
			printf("Unknown failure detected!\n");
 20009b4:	010080b4 	movhi	r4,514
 20009b8:	21283c04 	addi	r4,r4,-24336
 20009bc:	20043740 	call	2004374 <puts>
			OSSemPost(get_apps_motor_task_external_failure_flag());
 20009c0:	20008200 	call	2000820 <get_apps_motor_task_external_failure_flag>
 20009c4:	1009883a 	mov	r4,r2
 20009c8:	20154c80 	call	20154c8 <OSSemPost>
			OSSemPost(get_solenoid_task_external_failure_flag());
 20009cc:	20010080 	call	2001008 <get_solenoid_task_external_failure_flag>
 20009d0:	1009883a 	mov	r4,r2
 20009d4:	20154c80 	call	20154c8 <OSSemPost>
			OSSemPost(get_tps_task_external_failure_flag());
 20009d8:	20029b00 	call	20029b0 <get_tps_task_external_failure_flag>
 20009dc:	1009883a 	mov	r4,r2
 20009e0:	20154c80 	call	20154c8 <OSSemPost>
			break;
 20009e4:	003fb406 	br	20008b8 <failure_handler_task+0x2c>

		default:
			printf("Unknow failure code\n");
 20009e8:	010080b4 	movhi	r4,514
 20009ec:	21284304 	addi	r4,r4,-24308
 20009f0:	20043740 	call	2004374 <puts>
			OSSemPost(get_apps_motor_task_external_failure_flag());
 20009f4:	20008200 	call	2000820 <get_apps_motor_task_external_failure_flag>
 20009f8:	1009883a 	mov	r4,r2
 20009fc:	20154c80 	call	20154c8 <OSSemPost>
			OSSemPost(get_solenoid_task_external_failure_flag());
 2000a00:	20010080 	call	2001008 <get_solenoid_task_external_failure_flag>
 2000a04:	1009883a 	mov	r4,r2
 2000a08:	20154c80 	call	20154c8 <OSSemPost>
			OSSemPost(get_tps_task_external_failure_flag());
 2000a0c:	20029b00 	call	20029b0 <get_tps_task_external_failure_flag>
 2000a10:	1009883a 	mov	r4,r2
 2000a14:	20154c80 	call	20154c8 <OSSemPost>
			OSTimeDlyHMSM(FAILURE_HANDLER_TASK_DELAY_HOURS,
					FAILURE_HANDLER_TASK_DELAY_MINUTES,
					FAILURE_HANDLER_TASK_DELAY_SECONDS,
					FAILURE_HANDLER_TASK_DELAY_MILLISEC);
		}
	}
 2000a18:	003fa706 	br	20008b8 <failure_handler_task+0x2c>

02000a1c <main>:
OS_EVENT *failure_code_q;

INT8U failure_code_buf[FAILURE_HANDLER_Q_SIZE_ELEMENTS];

/* The main function */
int main(void) {
 2000a1c:	defffe04 	addi	sp,sp,-8
 2000a20:	dfc00115 	stw	ra,4(sp)
 2000a24:	df000015 	stw	fp,0(sp)
 2000a28:	d839883a 	mov	fp,sp

	adc = alt_up_de0_nano_adc_open_dev(DE0_NANO_ADC_0_NAME);
 2000a2c:	010080b4 	movhi	r4,514
 2000a30:	21284804 	addi	r4,r4,-24288
 2000a34:	20187740 	call	2018774 <alt_up_de0_nano_adc_open_dev>
 2000a38:	d0a70415 	stw	r2,-25584(gp)

	failure_code_q = OSQCreate((void*) failure_code_buf,
 2000a3c:	010080b4 	movhi	r4,514
 2000a40:	2108c604 	addi	r4,r4,8984
 2000a44:	01404004 	movi	r5,256
 2000a48:	2013a7c0 	call	2013a7c <OSQCreate>
 2000a4c:	d0a70915 	stw	r2,-25564(gp)
			FAILURE_HANDLER_Q_SIZE_ELEMENTS);

#if defined(RUN_UNIT_TESTS)
	printf("%d tests failed\n", run_all_unit_tests());
 2000a50:	20021c80 	call	20021c8 <run_all_unit_tests>
 2000a54:	100b883a 	mov	r5,r2
 2000a58:	010080b4 	movhi	r4,514
 2000a5c:	21284d04 	addi	r4,r4,-24268
 2000a60:	200425c0 	call	200425c <printf>
#endif
	printf("alive\n");
 2000a64:	010080b4 	movhi	r4,514
 2000a68:	21285204 	addi	r4,r4,-24248
 2000a6c:	20043740 	call	2004374 <puts>

	throttle_data_init();
 2000a70:	20022fc0 	call	20022fc <throttle_data_init>

	TEST_PWM(16384, 100);
 2000a74:	01100004 	movi	r4,16384
 2000a78:	01401904 	movi	r5,100
 2000a7c:	20022400 	call	2002240 <Test_pwm_gen>
//			SOLENOID_TASK_PRIORITY, SOLENOID_TASK_PRIORITY, solenoid_task_stk, TASK_STACKSIZE,
//			NULL, 0);

	//OSStart();

	return 0;
 2000a80:	0005883a 	mov	r2,zero
}
 2000a84:	e037883a 	mov	sp,fp
 2000a88:	dfc00117 	ldw	ra,4(sp)
 2000a8c:	df000017 	ldw	fp,0(sp)
 2000a90:	dec00204 	addi	sp,sp,8
 2000a94:	f800283a 	ret

02000a98 <get_adc>:

/* Get ADC controller instance */
alt_up_de0_nano_adc_dev* get_adc() {
 2000a98:	deffff04 	addi	sp,sp,-4
 2000a9c:	df000015 	stw	fp,0(sp)
 2000aa0:	d839883a 	mov	fp,sp
	return adc;
 2000aa4:	d0a70417 	ldw	r2,-25584(gp)
}
 2000aa8:	e037883a 	mov	sp,fp
 2000aac:	df000017 	ldw	fp,0(sp)
 2000ab0:	dec00104 	addi	sp,sp,4
 2000ab4:	f800283a 	ret

02000ab8 <disp_err>:

/* Display error message */
void disp_err(INT8U err, char *msg) {
 2000ab8:	defffc04 	addi	sp,sp,-16
 2000abc:	dfc00315 	stw	ra,12(sp)
 2000ac0:	df000215 	stw	fp,8(sp)
 2000ac4:	df000204 	addi	fp,sp,8
 2000ac8:	e17fff15 	stw	r5,-4(fp)
 2000acc:	e13ffe05 	stb	r4,-8(fp)
	printf("%d:%s\n", err, msg);
 2000ad0:	e17ffe03 	ldbu	r5,-8(fp)
 2000ad4:	010080b4 	movhi	r4,514
 2000ad8:	21285404 	addi	r4,r4,-24240
 2000adc:	e1bfff17 	ldw	r6,-4(fp)
 2000ae0:	200425c0 	call	200425c <printf>
}
 2000ae4:	e037883a 	mov	sp,fp
 2000ae8:	dfc00117 	ldw	ra,4(sp)
 2000aec:	df000017 	ldw	fp,0(sp)
 2000af0:	dec00204 	addi	sp,sp,8
 2000af4:	f800283a 	ret

02000af8 <get_failure_msg_q>:

/* Getter for failure_message Q for every other task to use */
OS_EVENT* get_failure_msg_q() {
 2000af8:	deffff04 	addi	sp,sp,-4
 2000afc:	df000015 	stw	fp,0(sp)
 2000b00:	d839883a 	mov	fp,sp
	return failure_code_q;
 2000b04:	d0a70917 	ldw	r2,-25564(gp)
}
 2000b08:	e037883a 	mov	sp,fp
 2000b0c:	df000017 	ldw	fp,0(sp)
 2000b10:	dec00104 	addi	sp,sp,4
 2000b14:	f800283a 	ret

02000b18 <update_stored_period>:
 *  Status: C
 */

#include "pwm_gen.h"

static INT16U update_stored_period(INT8U flag, INT16U p){
 2000b18:	defffd04 	addi	sp,sp,-12
 2000b1c:	df000215 	stw	fp,8(sp)
 2000b20:	df000204 	addi	fp,sp,8
 2000b24:	e13ffe05 	stb	r4,-8(fp)
 2000b28:	e17fff0d 	sth	r5,-4(fp)
	static INT16U period = 0;
	if(PWM_PARAM_SET == flag){
 2000b2c:	e0bffe03 	ldbu	r2,-8(fp)
 2000b30:	10800058 	cmpnei	r2,r2,1
 2000b34:	1000021e 	bne	r2,zero,2000b40 <update_stored_period+0x28>
		period = p;
 2000b38:	e0bfff0b 	ldhu	r2,-4(fp)
 2000b3c:	d0a70a0d 	sth	r2,-25560(gp)
	}
	return period;
 2000b40:	d0a70a0b 	ldhu	r2,-25560(gp)
 2000b44:	10bfffcc 	andi	r2,r2,65535
}
 2000b48:	e037883a 	mov	sp,fp
 2000b4c:	df000017 	ldw	fp,0(sp)
 2000b50:	dec00104 	addi	sp,sp,4
 2000b54:	f800283a 	ret

02000b58 <update_stored_duty_cycle>:

static INT8U update_stored_duty_cycle(INT8U flag, INT8U percent){
 2000b58:	defffd04 	addi	sp,sp,-12
 2000b5c:	df000215 	stw	fp,8(sp)
 2000b60:	df000204 	addi	fp,sp,8
 2000b64:	e13ffe05 	stb	r4,-8(fp)
 2000b68:	e17fff05 	stb	r5,-4(fp)
	static INT8U duty_cycle = 0;
	if(PWM_PARAM_SET == flag){
 2000b6c:	e0bffe03 	ldbu	r2,-8(fp)
 2000b70:	10800058 	cmpnei	r2,r2,1
 2000b74:	1000021e 	bne	r2,zero,2000b80 <update_stored_duty_cycle+0x28>
		duty_cycle = percent;
 2000b78:	e0bfff03 	ldbu	r2,-4(fp)
 2000b7c:	d0a70a85 	stb	r2,-25558(gp)
	}
	return duty_cycle;
 2000b80:	d0a70a83 	ldbu	r2,-25558(gp)
 2000b84:	10803fcc 	andi	r2,r2,255
}
 2000b88:	e037883a 	mov	sp,fp
 2000b8c:	df000017 	ldw	fp,0(sp)
 2000b90:	dec00104 	addi	sp,sp,4
 2000b94:	f800283a 	ret

02000b98 <update_pwm_period>:

static void update_pwm_period(){
 2000b98:	defffd04 	addi	sp,sp,-12
 2000b9c:	dfc00215 	stw	ra,8(sp)
 2000ba0:	df000115 	stw	fp,4(sp)
 2000ba4:	df000104 	addi	fp,sp,4
	INT16U period = get_period();
 2000ba8:	2000ca80 	call	2000ca8 <get_period>
 2000bac:	e0bfff0d 	sth	r2,-4(fp)
	*(INT16U*)PWM_GENERATOR_0_AVALON_SLAVE_PERIOD_BASE = period;
 2000bb0:	00c10074 	movhi	r3,1025
 2000bb4:	18e42a84 	addi	r3,r3,-28502
 2000bb8:	e0bfff0b 	ldhu	r2,-4(fp)
 2000bbc:	1880000d 	sth	r2,0(r3)
}
 2000bc0:	e037883a 	mov	sp,fp
 2000bc4:	dfc00117 	ldw	ra,4(sp)
 2000bc8:	df000017 	ldw	fp,0(sp)
 2000bcc:	dec00204 	addi	sp,sp,8
 2000bd0:	f800283a 	ret

02000bd4 <update_pwm_duty>:

static void update_pwm_duty(){
 2000bd4:	defffc04 	addi	sp,sp,-16
 2000bd8:	dfc00315 	stw	ra,12(sp)
 2000bdc:	df000215 	stw	fp,8(sp)
 2000be0:	dc000115 	stw	r16,4(sp)
 2000be4:	df000104 	addi	fp,sp,4
	INT16U duty = get_period() * get_duty_cycle() / DUTY_SCALE_FACTOR;
 2000be8:	2000ca80 	call	2000ca8 <get_period>
 2000bec:	143fffcc 	andi	r16,r2,65535
 2000bf0:	2000cdc0 	call	2000cdc <get_duty_cycle>
 2000bf4:	11403fcc 	andi	r5,r2,255
 2000bf8:	8009883a 	mov	r4,r16
 2000bfc:	20032ac0 	call	20032ac <__mulsi3>
 2000c00:	1009883a 	mov	r4,r2
 2000c04:	01401904 	movi	r5,100
 2000c08:	20031dc0 	call	20031dc <__divsi3>
 2000c0c:	e0bfff0d 	sth	r2,-4(fp)
	*(INT16U*)PWM_GENERATOR_0_AVALON_SLAVE_DUTY_BASE = duty;
 2000c10:	00c10074 	movhi	r3,1025
 2000c14:	18e42a04 	addi	r3,r3,-28504
 2000c18:	e0bfff0b 	ldhu	r2,-4(fp)
 2000c1c:	1880000d 	sth	r2,0(r3)
}
 2000c20:	e037883a 	mov	sp,fp
 2000c24:	dfc00217 	ldw	ra,8(sp)
 2000c28:	df000117 	ldw	fp,4(sp)
 2000c2c:	dc000017 	ldw	r16,0(sp)
 2000c30:	dec00304 	addi	sp,sp,12
 2000c34:	f800283a 	ret

02000c38 <set_period>:

void set_period(INT16U period){
 2000c38:	defffd04 	addi	sp,sp,-12
 2000c3c:	dfc00215 	stw	ra,8(sp)
 2000c40:	df000115 	stw	fp,4(sp)
 2000c44:	df000104 	addi	fp,sp,4
 2000c48:	e13fff0d 	sth	r4,-4(fp)
	update_stored_period(PWM_PARAM_SET, period);
 2000c4c:	e17fff0b 	ldhu	r5,-4(fp)
 2000c50:	01000044 	movi	r4,1
 2000c54:	2000b180 	call	2000b18 <update_stored_period>
	update_pwm_period();
 2000c58:	2000b980 	call	2000b98 <update_pwm_period>
}
 2000c5c:	e037883a 	mov	sp,fp
 2000c60:	dfc00117 	ldw	ra,4(sp)
 2000c64:	df000017 	ldw	fp,0(sp)
 2000c68:	dec00204 	addi	sp,sp,8
 2000c6c:	f800283a 	ret

02000c70 <set_duty_cycle>:

void set_duty_cycle(INT8U percent){
 2000c70:	defffd04 	addi	sp,sp,-12
 2000c74:	dfc00215 	stw	ra,8(sp)
 2000c78:	df000115 	stw	fp,4(sp)
 2000c7c:	df000104 	addi	fp,sp,4
 2000c80:	e13fff05 	stb	r4,-4(fp)
	update_stored_duty_cycle(PWM_PARAM_SET, percent);
 2000c84:	e17fff03 	ldbu	r5,-4(fp)
 2000c88:	01000044 	movi	r4,1
 2000c8c:	2000b580 	call	2000b58 <update_stored_duty_cycle>
	update_pwm_duty();
 2000c90:	2000bd40 	call	2000bd4 <update_pwm_duty>
}
 2000c94:	e037883a 	mov	sp,fp
 2000c98:	dfc00117 	ldw	ra,4(sp)
 2000c9c:	df000017 	ldw	fp,0(sp)
 2000ca0:	dec00204 	addi	sp,sp,8
 2000ca4:	f800283a 	ret

02000ca8 <get_period>:

INT16U get_period(){
 2000ca8:	defffe04 	addi	sp,sp,-8
 2000cac:	dfc00115 	stw	ra,4(sp)
 2000cb0:	df000015 	stw	fp,0(sp)
 2000cb4:	d839883a 	mov	fp,sp
	return update_stored_period(PWM_PARAM_GET, 0);
 2000cb8:	0009883a 	mov	r4,zero
 2000cbc:	000b883a 	mov	r5,zero
 2000cc0:	2000b180 	call	2000b18 <update_stored_period>
 2000cc4:	10bfffcc 	andi	r2,r2,65535
}
 2000cc8:	e037883a 	mov	sp,fp
 2000ccc:	dfc00117 	ldw	ra,4(sp)
 2000cd0:	df000017 	ldw	fp,0(sp)
 2000cd4:	dec00204 	addi	sp,sp,8
 2000cd8:	f800283a 	ret

02000cdc <get_duty_cycle>:

INT8U get_duty_cycle(){
 2000cdc:	defffe04 	addi	sp,sp,-8
 2000ce0:	dfc00115 	stw	ra,4(sp)
 2000ce4:	df000015 	stw	fp,0(sp)
 2000ce8:	d839883a 	mov	fp,sp
	return update_stored_duty_cycle(PWM_PARAM_GET, 0);
 2000cec:	0009883a 	mov	r4,zero
 2000cf0:	000b883a 	mov	r5,zero
 2000cf4:	2000b580 	call	2000b58 <update_stored_duty_cycle>
 2000cf8:	10803fcc 	andi	r2,r2,255
}
 2000cfc:	e037883a 	mov	sp,fp
 2000d00:	dfc00117 	ldw	ra,4(sp)
 2000d04:	df000017 	ldw	fp,0(sp)
 2000d08:	dec00204 	addi	sp,sp,8
 2000d0c:	f800283a 	ret

02000d10 <solenoid_task>:
void shift_up();

void shift_down();

/*  Task routine for solenoid */
void solenoid_task(void* pdata) {
 2000d10:	defffa04 	addi	sp,sp,-24
 2000d14:	dfc00515 	stw	ra,20(sp)
 2000d18:	df000415 	stw	fp,16(sp)
 2000d1c:	df000404 	addi	fp,sp,16
 2000d20:	e13fff15 	stw	r4,-4(fp)

	INT8U err;
	
	BOOL solenoid_open_timer_activated = FALSE;
 2000d24:	e03ffe05 	stb	zero,-8(fp)

	btn_input_q = OSQCreate((void*)solenoid_buf, SOLENOID_Q_SIZE_ELEMENTS);
 2000d28:	010080b4 	movhi	r4,514
 2000d2c:	21190604 	addi	r4,r4,25624
 2000d30:	01404004 	movi	r5,256
 2000d34:	2013a7c0 	call	2013a7c <OSQCreate>
 2000d38:	d0a70d15 	stw	r2,-25548(gp)
	
	alt_irq_register(SOLENOID_CONTROLLER_0_AVALON_SLAVE_READ_IRQ,NULL,  &isr_btn);
 2000d3c:	01000084 	movi	r4,2
 2000d40:	000b883a 	mov	r5,zero
 2000d44:	01808034 	movhi	r6,512
 2000d48:	3183f104 	addi	r6,r6,4036
 2000d4c:	200e3bc0 	call	200e3bc <alt_irq_register>
	
	external_failure_flag = OSSemCreate(SEM_FLAG_NO_ERROR);
 2000d50:	0009883a 	mov	r4,zero
 2000d54:	2014d1c0 	call	2014d1c <OSSemCreate>
 2000d58:	d0a70315 	stw	r2,-25588(gp)

	failure_resolved_flag = OSSemCreate(SEM_FLAG_ERROR_UNRESOLVED);
 2000d5c:	0009883a 	mov	r4,zero
 2000d60:	2014d1c0 	call	2014d1c <OSSemCreate>
 2000d64:	d0a70015 	stw	r2,-25600(gp)

	rpm_reached_flag = OSSemCreate(OS_SEM_RPM_NOT_REACHED);
 2000d68:	0009883a 	mov	r4,zero
 2000d6c:	2014d1c0 	call	2014d1c <OSSemCreate>
 2000d70:	d0a70b15 	stw	r2,-25556(gp)

	OS_EVENT *shift_matching_q = get_motor_cmd_q();
 2000d74:	20006880 	call	2000688 <get_motor_cmd_q>
 2000d78:	e0bffd15 	stw	r2,-12(fp)

	INT8U curr_gear = 1;
 2000d7c:	00800044 	movi	r2,1
 2000d80:	e0bffc45 	stb	r2,-15(fp)
 2000d84:	00000006 	br	2000d88 <solenoid_task+0x78>
	while(1){

#if defined(RUN_AVG_TASK_TIME_TEST)
		INT8U shift_command = BUTTON_INPUT_SHIFT_UP;
#else
		INT8U shift_command = *(INT8U *) OSQPend(btn_input_q, Q_TIMEOUT_WAIT_FOREVER, &err);
 2000d88:	d1270d17 	ldw	r4,-25548(gp)
 2000d8c:	e1bffe44 	addi	r6,fp,-7
 2000d90:	000b883a 	mov	r5,zero
 2000d94:	20140580 	call	2014058 <OSQPend>
 2000d98:	10800003 	ldbu	r2,0(r2)
 2000d9c:	e0bffc05 	stb	r2,-16(fp)
		INT16U new_gear = curr_gear;
 2000da0:	e0bffc43 	ldbu	r2,-15(fp)
 2000da4:	e0bffe8d 	sth	r2,-6(fp)
		if(shift_command == BUTTON_INPUT_SHIFT_UP){
 2000da8:	e0bffc03 	ldbu	r2,-16(fp)
 2000dac:	10800058 	cmpnei	r2,r2,1
 2000db0:	1000071e 	bne	r2,zero,2000dd0 <solenoid_task+0xc0>
			if(curr_gear == NUM_GEARS)
 2000db4:	e0bffc43 	ldbu	r2,-15(fp)
 2000db8:	10800120 	cmpeqi	r2,r2,4
 2000dbc:	103ff21e 	bne	r2,zero,2000d88 <solenoid_task+0x78>
				continue;
			new_gear++;
 2000dc0:	e0bffe8b 	ldhu	r2,-6(fp)
 2000dc4:	10800044 	addi	r2,r2,1
 2000dc8:	e0bffe8d 	sth	r2,-6(fp)
 2000dcc:	00000906 	br	2000df4 <solenoid_task+0xe4>
		}else if (shift_command == BUTTON_INPUT_SHIFT_DOWN){
 2000dd0:	e0bffc03 	ldbu	r2,-16(fp)
 2000dd4:	10800098 	cmpnei	r2,r2,2
 2000dd8:	1000061e 	bne	r2,zero,2000df4 <solenoid_task+0xe4>
			if(curr_gear == 1)
 2000ddc:	e0bffc43 	ldbu	r2,-15(fp)
 2000de0:	10800060 	cmpeqi	r2,r2,1
 2000de4:	103fe81e 	bne	r2,zero,2000d88 <solenoid_task+0x78>
				continue;
			new_gear--;
 2000de8:	e0bffe8b 	ldhu	r2,-6(fp)
 2000dec:	10bfffc4 	addi	r2,r2,-1
 2000df0:	e0bffe8d 	sth	r2,-6(fp)
		}
		OSQPost(shift_matching_q, (void*)&new_gear);
 2000df4:	e17ffe84 	addi	r5,fp,-6
 2000df8:	e13ffd17 	ldw	r4,-12(fp)
 2000dfc:	20144f40 	call	20144f4 <OSQPost>

		OSSemPend(rpm_reached_flag, Q_TIMEOUT_WAIT_FOREVER, &err);
 2000e00:	d1270b17 	ldw	r4,-25556(gp)
 2000e04:	e1bffe44 	addi	r6,fp,-7
 2000e08:	000b883a 	mov	r5,zero
 2000e0c:	20150d00 	call	20150d0 <OSSemPend>

		if(err)
 2000e10:	e0bffe43 	ldbu	r2,-7(fp)
 2000e14:	10803fcc 	andi	r2,r2,255
 2000e18:	1005003a 	cmpeq	r2,r2,zero
 2000e1c:	1000031e 	bne	r2,zero,2000e2c <solenoid_task+0x11c>
			printf("error pending on sem\n");
 2000e20:	010080b4 	movhi	r4,514
 2000e24:	21285604 	addi	r4,r4,-24232
 2000e28:	20043740 	call	2004374 <puts>

		if(OSSemAccept(external_failure_flag) != SEM_FLAG_NO_ERROR){
 2000e2c:	d1270317 	ldw	r4,-25588(gp)
 2000e30:	2014c5c0 	call	2014c5c <OSSemAccept>
 2000e34:	10bfffcc 	andi	r2,r2,65535
 2000e38:	1005003a 	cmpeq	r2,r2,zero
 2000e3c:	1000071e 	bne	r2,zero,2000e5c <solenoid_task+0x14c>
			printf("External failure, block apps_motor_task\n");
 2000e40:	010080b4 	movhi	r4,514
 2000e44:	21285c04 	addi	r4,r4,-24208
 2000e48:	20043740 	call	2004374 <puts>
			OSSemPend(failure_resolved_flag, Q_TIMEOUT_WAIT_FOREVER, &err);
 2000e4c:	d1270017 	ldw	r4,-25600(gp)
 2000e50:	e1bffe44 	addi	r6,fp,-7
 2000e54:	000b883a 	mov	r5,zero
 2000e58:	20150d00 	call	20150d0 <OSSemPend>
		}
#endif
		if (shift_command == BUTTON_INPUT_SHIFT_UP){
 2000e5c:	e0bffc03 	ldbu	r2,-16(fp)
 2000e60:	10800058 	cmpnei	r2,r2,1
 2000e64:	1000101e 	bne	r2,zero,2000ea8 <solenoid_task+0x198>
			if (solenoid_open_timer_activated == FALSE){
 2000e68:	e0bffe03 	ldbu	r2,-8(fp)
 2000e6c:	1004c03a 	cmpne	r2,r2,zero
 2000e70:	1000241e 	bne	r2,zero,2000f04 <solenoid_task+0x1f4>
				solenoid_open_timer_activated = TRUE;
 2000e74:	00bfffc4 	movi	r2,-1
 2000e78:	e0bffe05 	stb	r2,-8(fp)
				shift_up();
 2000e7c:	2000f1c0 	call	2000f1c <shift_up>
				alarm = (alt_alarm*)malloc(sizeof(alt_alarm));
 2000e80:	01000604 	movi	r4,24
 2000e84:	20038f00 	call	20038f0 <malloc>
 2000e88:	d0a70c15 	stw	r2,-25552(gp)
				alt_alarm_start(alarm, SOLENOID_OPEN_DURATION_TICKS, &solenoid_callback, NULL);
 2000e8c:	d1270c17 	ldw	r4,-25552(gp)
 2000e90:	01403204 	movi	r5,200
 2000e94:	01808034 	movhi	r6,512
 2000e98:	3183dd04 	addi	r6,r6,3956
 2000e9c:	000f883a 	mov	r7,zero
 2000ea0:	200df180 	call	200df18 <alt_alarm_start>
 2000ea4:	00001706 	br	2000f04 <solenoid_task+0x1f4>
			}
		}
		else if (shift_command == BUTTON_INPUT_SHIFT_DOWN){
 2000ea8:	e0bffc03 	ldbu	r2,-16(fp)
 2000eac:	10800098 	cmpnei	r2,r2,2
 2000eb0:	1000101e 	bne	r2,zero,2000ef4 <solenoid_task+0x1e4>
			if (solenoid_open_timer_activated == FALSE){
 2000eb4:	e0bffe03 	ldbu	r2,-8(fp)
 2000eb8:	1004c03a 	cmpne	r2,r2,zero
 2000ebc:	1000111e 	bne	r2,zero,2000f04 <solenoid_task+0x1f4>
				solenoid_open_timer_activated = TRUE;
 2000ec0:	00bfffc4 	movi	r2,-1
 2000ec4:	e0bffe05 	stb	r2,-8(fp)
				shift_down();
 2000ec8:	2000f480 	call	2000f48 <shift_down>
				alarm = (alt_alarm*)malloc(sizeof(alt_alarm));
 2000ecc:	01000604 	movi	r4,24
 2000ed0:	20038f00 	call	20038f0 <malloc>
 2000ed4:	d0a70c15 	stw	r2,-25552(gp)
				alt_alarm_start(alarm, SOLENOID_OPEN_DURATION_TICKS, &solenoid_callback, NULL);
 2000ed8:	d1270c17 	ldw	r4,-25552(gp)
 2000edc:	01403204 	movi	r5,200
 2000ee0:	01808034 	movhi	r6,512
 2000ee4:	3183dd04 	addi	r6,r6,3956
 2000ee8:	000f883a 	mov	r7,zero
 2000eec:	200df180 	call	200df18 <alt_alarm_start>
 2000ef0:	00000406 	br	2000f04 <solenoid_task+0x1f4>
			}
		}else {
			printf("Unknown shift command received: %d\n", shift_command);
 2000ef4:	e17ffc03 	ldbu	r5,-16(fp)
 2000ef8:	010080b4 	movhi	r4,514
 2000efc:	21286604 	addi	r4,r4,-24168
 2000f00:	200425c0 	call	200425c <printf>
		if(iteration_count % AVG_ITERATION == 0){
			end_tick = alt_timestamp();
			printf("s%d:%d\n", iteration_count, (end_tick - start_tick)/iteration_count);
		}
#endif
		OSTimeDlyHMSM(SOLENOID_TASK_DELAY_HOURS,
 2000f04:	0009883a 	mov	r4,zero
 2000f08:	000b883a 	mov	r5,zero
 2000f0c:	000d883a 	mov	r6,zero
 2000f10:	01c00284 	movi	r7,10
 2000f14:	20173b00 	call	20173b0 <OSTimeDlyHMSM>
				SOLENOID_TASK_DELAY_MINUTES,
				SOLENOID_TASK_DELAY_SECONDS,
				SOLENOID_TASK_DELAY_MILLISEC);
	}
 2000f18:	003f9b06 	br	2000d88 <solenoid_task+0x78>

02000f1c <shift_up>:
}


void shift_up(){
 2000f1c:	deffff04 	addi	sp,sp,-4
 2000f20:	df000015 	stw	fp,0(sp)
 2000f24:	d839883a 	mov	fp,sp
	//write shift up command
	*(INT8U*) SOLENOID_CONTROLLER_0_AVALON_SLAVE_WRITE_BASE = BUTTON_INPUT_SHIFT_UP;
 2000f28:	00c10074 	movhi	r3,1025
 2000f2c:	18e42b44 	addi	r3,r3,-28499
 2000f30:	00800044 	movi	r2,1
 2000f34:	18800005 	stb	r2,0(r3)
}
 2000f38:	e037883a 	mov	sp,fp
 2000f3c:	df000017 	ldw	fp,0(sp)
 2000f40:	dec00104 	addi	sp,sp,4
 2000f44:	f800283a 	ret

02000f48 <shift_down>:

void shift_down(){
 2000f48:	deffff04 	addi	sp,sp,-4
 2000f4c:	df000015 	stw	fp,0(sp)
 2000f50:	d839883a 	mov	fp,sp
	//write shift down command
	*(INT8U*) SOLENOID_CONTROLLER_0_AVALON_SLAVE_WRITE_BASE = BUTTON_INPUT_SHIFT_DOWN;
 2000f54:	00c10074 	movhi	r3,1025
 2000f58:	18e42b44 	addi	r3,r3,-28499
 2000f5c:	00800084 	movi	r2,2
 2000f60:	18800005 	stb	r2,0(r3)
}
 2000f64:	e037883a 	mov	sp,fp
 2000f68:	df000017 	ldw	fp,0(sp)
 2000f6c:	dec00104 	addi	sp,sp,4
 2000f70:	f800283a 	ret

02000f74 <solenoid_callback>:

/* Call back function after 200ms shift up or down */
alt_u32 solenoid_callback(void* context){
 2000f74:	defffd04 	addi	sp,sp,-12
 2000f78:	dfc00215 	stw	ra,8(sp)
 2000f7c:	df000115 	stw	fp,4(sp)
 2000f80:	df000104 	addi	fp,sp,4
 2000f84:	e13fff15 	stw	r4,-4(fp)
	//clear control
	if(alarm != NULL) free(alarm);
 2000f88:	d0a70c17 	ldw	r2,-25552(gp)
 2000f8c:	1005003a 	cmpeq	r2,r2,zero
 2000f90:	1000021e 	bne	r2,zero,2000f9c <solenoid_callback+0x28>
 2000f94:	d1270c17 	ldw	r4,-25552(gp)
 2000f98:	20038dc0 	call	20038dc <free>
	*(INT8U*) SOLENOID_CONTROLLER_0_AVALON_SLAVE_WRITE_BASE = DONE_SHIFTING;
 2000f9c:	00810074 	movhi	r2,1025
 2000fa0:	10a42b44 	addi	r2,r2,-28499
 2000fa4:	10000005 	stb	zero,0(r2)
	signal_exit_shift_matching();
 2000fa8:	20008600 	call	2000860 <signal_exit_shift_matching>
	return 0;
 2000fac:	0005883a 	mov	r2,zero
}
 2000fb0:	e037883a 	mov	sp,fp
 2000fb4:	dfc00117 	ldw	ra,4(sp)
 2000fb8:	df000017 	ldw	fp,0(sp)
 2000fbc:	dec00204 	addi	sp,sp,8
 2000fc0:	f800283a 	ret

02000fc4 <isr_btn>:

static void isr_btn (void* context, alt_u32 id)
{
 2000fc4:	defffb04 	addi	sp,sp,-20
 2000fc8:	dfc00415 	stw	ra,16(sp)
 2000fcc:	df000315 	stw	fp,12(sp)
 2000fd0:	df000304 	addi	fp,sp,12
 2000fd4:	e13ffe15 	stw	r4,-8(fp)
 2000fd8:	e17fff15 	stw	r5,-4(fp)
	INT8U *shift = (INT8U*) SOLENOID_CONTROLLER_0_AVALON_SLAVE_READ_BASE;
 2000fdc:	00810074 	movhi	r2,1025
 2000fe0:	10a42b04 	addi	r2,r2,-28500
 2000fe4:	e0bffd15 	stw	r2,-12(fp)
	OSQPost(btn_input_q, (void*) shift);
 2000fe8:	d1270d17 	ldw	r4,-25548(gp)
 2000fec:	e17ffd17 	ldw	r5,-12(fp)
 2000ff0:	20144f40 	call	20144f4 <OSQPost>

}
 2000ff4:	e037883a 	mov	sp,fp
 2000ff8:	dfc00117 	ldw	ra,4(sp)
 2000ffc:	df000017 	ldw	fp,0(sp)
 2001000:	dec00204 	addi	sp,sp,8
 2001004:	f800283a 	ret

02001008 <get_solenoid_task_external_failure_flag>:

OS_EVENT* get_solenoid_task_external_failure_flag(){
 2001008:	deffff04 	addi	sp,sp,-4
 200100c:	df000015 	stw	fp,0(sp)
 2001010:	d839883a 	mov	fp,sp
	return external_failure_flag;
 2001014:	d0a70317 	ldw	r2,-25588(gp)
}
 2001018:	e037883a 	mov	sp,fp
 200101c:	df000017 	ldw	fp,0(sp)
 2001020:	dec00104 	addi	sp,sp,4
 2001024:	f800283a 	ret

02001028 <get_solenoid_task_failure_resolved_flag>:

OS_EVENT* get_solenoid_task_failure_resolved_flag(){
 2001028:	deffff04 	addi	sp,sp,-4
 200102c:	df000015 	stw	fp,0(sp)
 2001030:	d839883a 	mov	fp,sp
	return failure_resolved_flag;
 2001034:	d0a70017 	ldw	r2,-25600(gp)
}
 2001038:	e037883a 	mov	sp,fp
 200103c:	df000017 	ldw	fp,0(sp)
 2001040:	dec00104 	addi	sp,sp,4
 2001044:	f800283a 	ret

02001048 <signal_shift_start>:

void signal_shift_start(){
 2001048:	defffe04 	addi	sp,sp,-8
 200104c:	dfc00115 	stw	ra,4(sp)
 2001050:	df000015 	stw	fp,0(sp)
 2001054:	d839883a 	mov	fp,sp
	OSSemPost(rpm_reached_flag);
 2001058:	d1270b17 	ldw	r4,-25556(gp)
 200105c:	20154c80 	call	20154c8 <OSSemPost>
}
 2001060:	e037883a 	mov	sp,fp
 2001064:	dfc00117 	ldw	ra,4(sp)
 2001068:	df000017 	ldw	fp,0(sp)
 200106c:	dec00204 	addi	sp,sp,8
 2001070:	f800283a 	ret

02001074 <CuStrAlloc>:
/*-------------------------------------------------------------------------*
 * CuStr
 *-------------------------------------------------------------------------*/

char* CuStrAlloc(int size)
{
 2001074:	defffc04 	addi	sp,sp,-16
 2001078:	dfc00315 	stw	ra,12(sp)
 200107c:	df000215 	stw	fp,8(sp)
 2001080:	df000204 	addi	fp,sp,8
 2001084:	e13fff15 	stw	r4,-4(fp)
	char* newStr = (char*) malloc( sizeof(char) * (size) );
 2001088:	e13fff17 	ldw	r4,-4(fp)
 200108c:	20038f00 	call	20038f0 <malloc>
 2001090:	e0bffe15 	stw	r2,-8(fp)
	return newStr;
 2001094:	e0bffe17 	ldw	r2,-8(fp)
}
 2001098:	e037883a 	mov	sp,fp
 200109c:	dfc00117 	ldw	ra,4(sp)
 20010a0:	df000017 	ldw	fp,0(sp)
 20010a4:	dec00204 	addi	sp,sp,8
 20010a8:	f800283a 	ret

020010ac <CuStrCopy>:

char* CuStrCopy(const char* old)
{
 20010ac:	defffb04 	addi	sp,sp,-20
 20010b0:	dfc00415 	stw	ra,16(sp)
 20010b4:	df000315 	stw	fp,12(sp)
 20010b8:	df000304 	addi	fp,sp,12
 20010bc:	e13fff15 	stw	r4,-4(fp)
	int len = strlen(old);
 20010c0:	e13fff17 	ldw	r4,-4(fp)
 20010c4:	2004d2c0 	call	2004d2c <strlen>
 20010c8:	e0bffe15 	stw	r2,-8(fp)
	char* newStr = CuStrAlloc(len + 1);
 20010cc:	e0bffe17 	ldw	r2,-8(fp)
 20010d0:	11000044 	addi	r4,r2,1
 20010d4:	20010740 	call	2001074 <CuStrAlloc>
 20010d8:	e0bffd15 	stw	r2,-12(fp)
	strcpy(newStr, old);
 20010dc:	e13ffd17 	ldw	r4,-12(fp)
 20010e0:	e17fff17 	ldw	r5,-4(fp)
 20010e4:	2004ca00 	call	2004ca0 <strcpy>
	return newStr;
 20010e8:	e0bffd17 	ldw	r2,-12(fp)
}
 20010ec:	e037883a 	mov	sp,fp
 20010f0:	dfc00117 	ldw	ra,4(sp)
 20010f4:	df000017 	ldw	fp,0(sp)
 20010f8:	dec00204 	addi	sp,sp,8
 20010fc:	f800283a 	ret

02001100 <CuStringInit>:
/*-------------------------------------------------------------------------*
 * CuString
 *-------------------------------------------------------------------------*/

void CuStringInit(CuString* str)
{
 2001100:	defffd04 	addi	sp,sp,-12
 2001104:	dfc00215 	stw	ra,8(sp)
 2001108:	df000115 	stw	fp,4(sp)
 200110c:	df000104 	addi	fp,sp,4
 2001110:	e13fff15 	stw	r4,-4(fp)
	str->length = 0;
 2001114:	e0bfff17 	ldw	r2,-4(fp)
 2001118:	10000015 	stw	zero,0(r2)
	str->size = STRING_MAX;
 200111c:	e0ffff17 	ldw	r3,-4(fp)
 2001120:	00804004 	movi	r2,256
 2001124:	18800115 	stw	r2,4(r3)
	str->buffer = (char*) malloc(sizeof(char) * str->size);
 2001128:	e0bfff17 	ldw	r2,-4(fp)
 200112c:	10800117 	ldw	r2,4(r2)
 2001130:	1009883a 	mov	r4,r2
 2001134:	20038f00 	call	20038f0 <malloc>
 2001138:	1007883a 	mov	r3,r2
 200113c:	e0bfff17 	ldw	r2,-4(fp)
 2001140:	10c00215 	stw	r3,8(r2)
	str->buffer[0] = '\0';
 2001144:	e0bfff17 	ldw	r2,-4(fp)
 2001148:	10800217 	ldw	r2,8(r2)
 200114c:	10000005 	stb	zero,0(r2)
}
 2001150:	e037883a 	mov	sp,fp
 2001154:	dfc00117 	ldw	ra,4(sp)
 2001158:	df000017 	ldw	fp,0(sp)
 200115c:	dec00204 	addi	sp,sp,8
 2001160:	f800283a 	ret

02001164 <CuStringNew>:

CuString* CuStringNew(void)
{
 2001164:	defffd04 	addi	sp,sp,-12
 2001168:	dfc00215 	stw	ra,8(sp)
 200116c:	df000115 	stw	fp,4(sp)
 2001170:	df000104 	addi	fp,sp,4
	CuString* str = (CuString*) malloc(sizeof(CuString));
 2001174:	01000304 	movi	r4,12
 2001178:	20038f00 	call	20038f0 <malloc>
 200117c:	e0bfff15 	stw	r2,-4(fp)
	str->length = 0;
 2001180:	e0bfff17 	ldw	r2,-4(fp)
 2001184:	10000015 	stw	zero,0(r2)
	str->size = STRING_MAX;
 2001188:	e0ffff17 	ldw	r3,-4(fp)
 200118c:	00804004 	movi	r2,256
 2001190:	18800115 	stw	r2,4(r3)
	str->buffer = (char*) malloc(sizeof(char) * str->size);
 2001194:	e0bfff17 	ldw	r2,-4(fp)
 2001198:	10800117 	ldw	r2,4(r2)
 200119c:	1009883a 	mov	r4,r2
 20011a0:	20038f00 	call	20038f0 <malloc>
 20011a4:	1007883a 	mov	r3,r2
 20011a8:	e0bfff17 	ldw	r2,-4(fp)
 20011ac:	10c00215 	stw	r3,8(r2)
	str->buffer[0] = '\0';
 20011b0:	e0bfff17 	ldw	r2,-4(fp)
 20011b4:	10800217 	ldw	r2,8(r2)
 20011b8:	10000005 	stb	zero,0(r2)
	return str;
 20011bc:	e0bfff17 	ldw	r2,-4(fp)
}
 20011c0:	e037883a 	mov	sp,fp
 20011c4:	dfc00117 	ldw	ra,4(sp)
 20011c8:	df000017 	ldw	fp,0(sp)
 20011cc:	dec00204 	addi	sp,sp,8
 20011d0:	f800283a 	ret

020011d4 <CuStringDelete>:

void CuStringDelete(CuString *str)
{
 20011d4:	defffd04 	addi	sp,sp,-12
 20011d8:	dfc00215 	stw	ra,8(sp)
 20011dc:	df000115 	stw	fp,4(sp)
 20011e0:	df000104 	addi	fp,sp,4
 20011e4:	e13fff15 	stw	r4,-4(fp)
        if (!str) return;
 20011e8:	e0bfff17 	ldw	r2,-4(fp)
 20011ec:	1005003a 	cmpeq	r2,r2,zero
 20011f0:	1000051e 	bne	r2,zero,2001208 <CuStringDelete+0x34>
        free(str->buffer);
 20011f4:	e0bfff17 	ldw	r2,-4(fp)
 20011f8:	11000217 	ldw	r4,8(r2)
 20011fc:	20038dc0 	call	20038dc <free>
        free(str);
 2001200:	e13fff17 	ldw	r4,-4(fp)
 2001204:	20038dc0 	call	20038dc <free>
}
 2001208:	e037883a 	mov	sp,fp
 200120c:	dfc00117 	ldw	ra,4(sp)
 2001210:	df000017 	ldw	fp,0(sp)
 2001214:	dec00204 	addi	sp,sp,8
 2001218:	f800283a 	ret

0200121c <CuStringResize>:

void CuStringResize(CuString* str, int newSize)
{
 200121c:	defffc04 	addi	sp,sp,-16
 2001220:	dfc00315 	stw	ra,12(sp)
 2001224:	df000215 	stw	fp,8(sp)
 2001228:	df000204 	addi	fp,sp,8
 200122c:	e13ffe15 	stw	r4,-8(fp)
 2001230:	e17fff15 	stw	r5,-4(fp)
	str->buffer = (char*) realloc(str->buffer, sizeof(char) * newSize);
 2001234:	e0bffe17 	ldw	r2,-8(fp)
 2001238:	11000217 	ldw	r4,8(r2)
 200123c:	e17fff17 	ldw	r5,-4(fp)
 2001240:	20043880 	call	2004388 <realloc>
 2001244:	1007883a 	mov	r3,r2
 2001248:	e0bffe17 	ldw	r2,-8(fp)
 200124c:	10c00215 	stw	r3,8(r2)
	str->size = newSize;
 2001250:	e0fffe17 	ldw	r3,-8(fp)
 2001254:	e0bfff17 	ldw	r2,-4(fp)
 2001258:	18800115 	stw	r2,4(r3)
}
 200125c:	e037883a 	mov	sp,fp
 2001260:	dfc00117 	ldw	ra,4(sp)
 2001264:	df000017 	ldw	fp,0(sp)
 2001268:	dec00204 	addi	sp,sp,8
 200126c:	f800283a 	ret

02001270 <CuStringAppend>:

void CuStringAppend(CuString* str, const char* text)
{
 2001270:	defffb04 	addi	sp,sp,-20
 2001274:	dfc00415 	stw	ra,16(sp)
 2001278:	df000315 	stw	fp,12(sp)
 200127c:	df000304 	addi	fp,sp,12
 2001280:	e13ffe15 	stw	r4,-8(fp)
 2001284:	e17fff15 	stw	r5,-4(fp)
	int length;

	if (text == NULL) {
 2001288:	e0bfff17 	ldw	r2,-4(fp)
 200128c:	1004c03a 	cmpne	r2,r2,zero
 2001290:	1000031e 	bne	r2,zero,20012a0 <CuStringAppend+0x30>
		text = "NULL";
 2001294:	008080b4 	movhi	r2,514
 2001298:	10a86f04 	addi	r2,r2,-24132
 200129c:	e0bfff15 	stw	r2,-4(fp)
	}

	length = strlen(text);
 20012a0:	e13fff17 	ldw	r4,-4(fp)
 20012a4:	2004d2c0 	call	2004d2c <strlen>
 20012a8:	e0bffd15 	stw	r2,-12(fp)
	if (str->length + length + 1 >= str->size)
 20012ac:	e0bffe17 	ldw	r2,-8(fp)
 20012b0:	10c00017 	ldw	r3,0(r2)
 20012b4:	e0bffd17 	ldw	r2,-12(fp)
 20012b8:	1885883a 	add	r2,r3,r2
 20012bc:	10c00044 	addi	r3,r2,1
 20012c0:	e0bffe17 	ldw	r2,-8(fp)
 20012c4:	10800117 	ldw	r2,4(r2)
 20012c8:	18800716 	blt	r3,r2,20012e8 <CuStringAppend+0x78>
		CuStringResize(str, str->length + length + 1 + STRING_INC);
 20012cc:	e0bffe17 	ldw	r2,-8(fp)
 20012d0:	10c00017 	ldw	r3,0(r2)
 20012d4:	e0bffd17 	ldw	r2,-12(fp)
 20012d8:	1885883a 	add	r2,r3,r2
 20012dc:	11404044 	addi	r5,r2,257
 20012e0:	e13ffe17 	ldw	r4,-8(fp)
 20012e4:	200121c0 	call	200121c <CuStringResize>
	str->length += length;
 20012e8:	e0bffe17 	ldw	r2,-8(fp)
 20012ec:	10c00017 	ldw	r3,0(r2)
 20012f0:	e0bffd17 	ldw	r2,-12(fp)
 20012f4:	1887883a 	add	r3,r3,r2
 20012f8:	e0bffe17 	ldw	r2,-8(fp)
 20012fc:	10c00015 	stw	r3,0(r2)
	strcat(str->buffer, text);
 2001300:	e0bffe17 	ldw	r2,-8(fp)
 2001304:	11000217 	ldw	r4,8(r2)
 2001308:	e17fff17 	ldw	r5,-4(fp)
 200130c:	2004b540 	call	2004b54 <strcat>
}
 2001310:	e037883a 	mov	sp,fp
 2001314:	dfc00117 	ldw	ra,4(sp)
 2001318:	df000017 	ldw	fp,0(sp)
 200131c:	dec00204 	addi	sp,sp,8
 2001320:	f800283a 	ret

02001324 <CuStringAppendChar>:

void CuStringAppendChar(CuString* str, char ch)
{
 2001324:	defffb04 	addi	sp,sp,-20
 2001328:	dfc00415 	stw	ra,16(sp)
 200132c:	df000315 	stw	fp,12(sp)
 2001330:	df000304 	addi	fp,sp,12
 2001334:	e13ffe15 	stw	r4,-8(fp)
 2001338:	e17fff05 	stb	r5,-4(fp)
	char text[2];
	text[0] = ch;
 200133c:	e0bfff03 	ldbu	r2,-4(fp)
 2001340:	e0bffd05 	stb	r2,-12(fp)
	text[1] = '\0';
 2001344:	e03ffd45 	stb	zero,-11(fp)
	CuStringAppend(str, text);
 2001348:	e13ffe17 	ldw	r4,-8(fp)
 200134c:	e17ffd04 	addi	r5,fp,-12
 2001350:	20012700 	call	2001270 <CuStringAppend>
}
 2001354:	e037883a 	mov	sp,fp
 2001358:	dfc00117 	ldw	ra,4(sp)
 200135c:	df000017 	ldw	fp,0(sp)
 2001360:	dec00204 	addi	sp,sp,8
 2001364:	f800283a 	ret

02001368 <CuStringAppendFormat>:

void CuStringAppendFormat(CuString* str, const char* format, ...)
{
 2001368:	defffb04 	addi	sp,sp,-20
 200136c:	df000215 	stw	fp,8(sp)
 2001370:	df000204 	addi	fp,sp,8
 2001374:	e13ffe15 	stw	r4,-8(fp)
 2001378:	e1800115 	stw	r6,4(fp)
 200137c:	e1c00215 	stw	r7,8(fp)
 2001380:	e17fff15 	stw	r5,-4(fp)
//	char buf[HUGE_STRING_LEN];
//	va_start(argp, format);
//	vsprintf(buf, format, argp);
//	va_end(argp);
//	CuStringAppend(str, buf);
}
 2001384:	e037883a 	mov	sp,fp
 2001388:	df000017 	ldw	fp,0(sp)
 200138c:	dec00304 	addi	sp,sp,12
 2001390:	f800283a 	ret

02001394 <CuStringInsert>:

void CuStringInsert(CuString* str, const char* text, int pos)
{
 2001394:	defffa04 	addi	sp,sp,-24
 2001398:	dfc00515 	stw	ra,20(sp)
 200139c:	df000415 	stw	fp,16(sp)
 20013a0:	df000404 	addi	fp,sp,16
 20013a4:	e13ffd15 	stw	r4,-12(fp)
 20013a8:	e17ffe15 	stw	r5,-8(fp)
 20013ac:	e1bfff15 	stw	r6,-4(fp)
	int length = strlen(text);
 20013b0:	e13ffe17 	ldw	r4,-8(fp)
 20013b4:	2004d2c0 	call	2004d2c <strlen>
 20013b8:	e0bffc15 	stw	r2,-16(fp)
	if (pos > str->length)
 20013bc:	e0bffd17 	ldw	r2,-12(fp)
 20013c0:	10c00017 	ldw	r3,0(r2)
 20013c4:	e0bfff17 	ldw	r2,-4(fp)
 20013c8:	1880030e 	bge	r3,r2,20013d8 <CuStringInsert+0x44>
		pos = str->length;
 20013cc:	e0bffd17 	ldw	r2,-12(fp)
 20013d0:	10800017 	ldw	r2,0(r2)
 20013d4:	e0bfff15 	stw	r2,-4(fp)
	if (str->length + length + 1 >= str->size)
 20013d8:	e0bffd17 	ldw	r2,-12(fp)
 20013dc:	10c00017 	ldw	r3,0(r2)
 20013e0:	e0bffc17 	ldw	r2,-16(fp)
 20013e4:	1885883a 	add	r2,r3,r2
 20013e8:	10c00044 	addi	r3,r2,1
 20013ec:	e0bffd17 	ldw	r2,-12(fp)
 20013f0:	10800117 	ldw	r2,4(r2)
 20013f4:	18800716 	blt	r3,r2,2001414 <CuStringInsert+0x80>
		CuStringResize(str, str->length + length + 1 + STRING_INC);
 20013f8:	e0bffd17 	ldw	r2,-12(fp)
 20013fc:	10c00017 	ldw	r3,0(r2)
 2001400:	e0bffc17 	ldw	r2,-16(fp)
 2001404:	1885883a 	add	r2,r3,r2
 2001408:	11404044 	addi	r5,r2,257
 200140c:	e13ffd17 	ldw	r4,-12(fp)
 2001410:	200121c0 	call	200121c <CuStringResize>
	memmove(str->buffer + pos + length, str->buffer + pos, (str->length - pos) + 1);
 2001414:	e0bffd17 	ldw	r2,-12(fp)
 2001418:	10c00217 	ldw	r3,8(r2)
 200141c:	e0bfff17 	ldw	r2,-4(fp)
 2001420:	1887883a 	add	r3,r3,r2
 2001424:	e0bffc17 	ldw	r2,-16(fp)
 2001428:	1889883a 	add	r4,r3,r2
 200142c:	e0bffd17 	ldw	r2,-12(fp)
 2001430:	10c00217 	ldw	r3,8(r2)
 2001434:	e0bfff17 	ldw	r2,-4(fp)
 2001438:	188b883a 	add	r5,r3,r2
 200143c:	e0bffd17 	ldw	r2,-12(fp)
 2001440:	10c00017 	ldw	r3,0(r2)
 2001444:	e0bfff17 	ldw	r2,-4(fp)
 2001448:	1885c83a 	sub	r2,r3,r2
 200144c:	10800044 	addi	r2,r2,1
 2001450:	100d883a 	mov	r6,r2
 2001454:	20040e40 	call	20040e4 <memmove>
	str->length += length;
 2001458:	e0bffd17 	ldw	r2,-12(fp)
 200145c:	10c00017 	ldw	r3,0(r2)
 2001460:	e0bffc17 	ldw	r2,-16(fp)
 2001464:	1887883a 	add	r3,r3,r2
 2001468:	e0bffd17 	ldw	r2,-12(fp)
 200146c:	10c00015 	stw	r3,0(r2)
	memcpy(str->buffer + pos, text, length);
 2001470:	e0bffd17 	ldw	r2,-12(fp)
 2001474:	10c00217 	ldw	r3,8(r2)
 2001478:	e0bfff17 	ldw	r2,-4(fp)
 200147c:	1887883a 	add	r3,r3,r2
 2001480:	e1bffc17 	ldw	r6,-16(fp)
 2001484:	e0bffe17 	ldw	r2,-8(fp)
 2001488:	1809883a 	mov	r4,r3
 200148c:	100b883a 	mov	r5,r2
 2001490:	20040440 	call	2004044 <memcpy>
}
 2001494:	e037883a 	mov	sp,fp
 2001498:	dfc00117 	ldw	ra,4(sp)
 200149c:	df000017 	ldw	fp,0(sp)
 20014a0:	dec00204 	addi	sp,sp,8
 20014a4:	f800283a 	ret

020014a8 <CuTestInit>:
/*-------------------------------------------------------------------------*
 * CuTest
 *-------------------------------------------------------------------------*/

void CuTestInit(CuTest* t, const char* name, TestFunction function)
{
 20014a8:	defffb04 	addi	sp,sp,-20
 20014ac:	dfc00415 	stw	ra,16(sp)
 20014b0:	df000315 	stw	fp,12(sp)
 20014b4:	df000304 	addi	fp,sp,12
 20014b8:	e13ffd15 	stw	r4,-12(fp)
 20014bc:	e17ffe15 	stw	r5,-8(fp)
 20014c0:	e1bfff15 	stw	r6,-4(fp)
	t->name = CuStrCopy(name);
 20014c4:	e13ffe17 	ldw	r4,-8(fp)
 20014c8:	20010ac0 	call	20010ac <CuStrCopy>
 20014cc:	1007883a 	mov	r3,r2
 20014d0:	e0bffd17 	ldw	r2,-12(fp)
 20014d4:	10c00015 	stw	r3,0(r2)
	t->failed = 0;
 20014d8:	e0bffd17 	ldw	r2,-12(fp)
 20014dc:	10000215 	stw	zero,8(r2)
	t->ran = 0;
 20014e0:	e0bffd17 	ldw	r2,-12(fp)
 20014e4:	10000315 	stw	zero,12(r2)
	t->message = NULL;
 20014e8:	e0bffd17 	ldw	r2,-12(fp)
 20014ec:	10000415 	stw	zero,16(r2)
	t->function = function;
 20014f0:	e0fffd17 	ldw	r3,-12(fp)
 20014f4:	e0bfff17 	ldw	r2,-4(fp)
 20014f8:	18800115 	stw	r2,4(r3)
	t->jumpBuf = NULL;
 20014fc:	e0bffd17 	ldw	r2,-12(fp)
 2001500:	10000515 	stw	zero,20(r2)
}
 2001504:	e037883a 	mov	sp,fp
 2001508:	dfc00117 	ldw	ra,4(sp)
 200150c:	df000017 	ldw	fp,0(sp)
 2001510:	dec00204 	addi	sp,sp,8
 2001514:	f800283a 	ret

02001518 <CuTestNew>:

CuTest* CuTestNew(const char* name, TestFunction function)
{
 2001518:	defffb04 	addi	sp,sp,-20
 200151c:	dfc00415 	stw	ra,16(sp)
 2001520:	df000315 	stw	fp,12(sp)
 2001524:	df000304 	addi	fp,sp,12
 2001528:	e13ffe15 	stw	r4,-8(fp)
 200152c:	e17fff15 	stw	r5,-4(fp)
	CuTest* tc = CU_ALLOC(CuTest);
 2001530:	01000604 	movi	r4,24
 2001534:	20038f00 	call	20038f0 <malloc>
 2001538:	e0bffd15 	stw	r2,-12(fp)
	CuTestInit(tc, name, function);
 200153c:	e13ffd17 	ldw	r4,-12(fp)
 2001540:	e17ffe17 	ldw	r5,-8(fp)
 2001544:	e1bfff17 	ldw	r6,-4(fp)
 2001548:	20014a80 	call	20014a8 <CuTestInit>
	return tc;
 200154c:	e0bffd17 	ldw	r2,-12(fp)
}
 2001550:	e037883a 	mov	sp,fp
 2001554:	dfc00117 	ldw	ra,4(sp)
 2001558:	df000017 	ldw	fp,0(sp)
 200155c:	dec00204 	addi	sp,sp,8
 2001560:	f800283a 	ret

02001564 <CuTestDelete>:

void CuTestDelete(CuTest *t)
{
 2001564:	defffd04 	addi	sp,sp,-12
 2001568:	dfc00215 	stw	ra,8(sp)
 200156c:	df000115 	stw	fp,4(sp)
 2001570:	df000104 	addi	fp,sp,4
 2001574:	e13fff15 	stw	r4,-4(fp)
        if (!t) return;
 2001578:	e0bfff17 	ldw	r2,-4(fp)
 200157c:	1005003a 	cmpeq	r2,r2,zero
 2001580:	1000051e 	bne	r2,zero,2001598 <CuTestDelete+0x34>
        free(t->name);
 2001584:	e0bfff17 	ldw	r2,-4(fp)
 2001588:	11000017 	ldw	r4,0(r2)
 200158c:	20038dc0 	call	20038dc <free>
        free(t);
 2001590:	e13fff17 	ldw	r4,-4(fp)
 2001594:	20038dc0 	call	20038dc <free>
}
 2001598:	e037883a 	mov	sp,fp
 200159c:	dfc00117 	ldw	ra,4(sp)
 20015a0:	df000017 	ldw	fp,0(sp)
 20015a4:	dec00204 	addi	sp,sp,8
 20015a8:	f800283a 	ret

020015ac <CuTestRun>:

void CuTestRun(CuTest* tc)
{
 20015ac:	deffd504 	addi	sp,sp,-172
 20015b0:	dfc02a15 	stw	ra,168(sp)
 20015b4:	df002915 	stw	fp,164(sp)
 20015b8:	df002904 	addi	fp,sp,164
 20015bc:	e13fff15 	stw	r4,-4(fp)
	jmp_buf buf;
	tc->jumpBuf = &buf;
 20015c0:	e0bfff17 	ldw	r2,-4(fp)
 20015c4:	e0ffd704 	addi	r3,fp,-164
 20015c8:	10c00515 	stw	r3,20(r2)
	if (setjmp(buf) == 0)
 20015cc:	e13fd704 	addi	r4,fp,-164
 20015d0:	2004a080 	call	2004a08 <setjmp>
 20015d4:	1004c03a 	cmpne	r2,r2,zero
 20015d8:	1000071e 	bne	r2,zero,20015f8 <CuTestRun+0x4c>
	{
		tc->ran = 1;
 20015dc:	e0ffff17 	ldw	r3,-4(fp)
 20015e0:	00800044 	movi	r2,1
 20015e4:	18800315 	stw	r2,12(r3)
		(tc->function)(tc);
 20015e8:	e0bfff17 	ldw	r2,-4(fp)
 20015ec:	10800117 	ldw	r2,4(r2)
 20015f0:	e13fff17 	ldw	r4,-4(fp)
 20015f4:	103ee83a 	callr	r2
	}
	tc->jumpBuf = 0;
 20015f8:	e0bfff17 	ldw	r2,-4(fp)
 20015fc:	10000515 	stw	zero,20(r2)
}
 2001600:	e037883a 	mov	sp,fp
 2001604:	dfc00117 	ldw	ra,4(sp)
 2001608:	df000017 	ldw	fp,0(sp)
 200160c:	dec00204 	addi	sp,sp,8
 2001610:	f800283a 	ret

02001614 <CuFailInternal>:

static void CuFailInternal(CuTest* tc, const char* file, int line, CuString* string)
{
 2001614:	def7fa04 	addi	sp,sp,-8216
 2001618:	dfc80515 	stw	ra,8212(sp)
 200161c:	df080415 	stw	fp,8208(sp)
 2001620:	df080404 	addi	fp,sp,8208
 2001624:	e13ffc15 	stw	r4,-16(fp)
 2001628:	e17ffd15 	stw	r5,-12(fp)
 200162c:	e1bffe15 	stw	r6,-8(fp)
 2001630:	e1ffff15 	stw	r7,-4(fp)
	char buf[HUGE_STRING_LEN];

	sprintf(buf, "%s:%d: ", file, line);
 2001634:	e137fc04 	addi	r4,fp,-8208
 2001638:	014080b4 	movhi	r5,514
 200163c:	29687104 	addi	r5,r5,-24124
 2001640:	e1bffd17 	ldw	r6,-12(fp)
 2001644:	e1fffe17 	ldw	r7,-8(fp)
 2001648:	2004a800 	call	2004a80 <sprintf>
	CuStringInsert(string, buf, 0);
 200164c:	e13fff17 	ldw	r4,-4(fp)
 2001650:	e177fc04 	addi	r5,fp,-8208
 2001654:	000d883a 	mov	r6,zero
 2001658:	20013940 	call	2001394 <CuStringInsert>

	tc->failed = 1;
 200165c:	e0fffc17 	ldw	r3,-16(fp)
 2001660:	00800044 	movi	r2,1
 2001664:	18800215 	stw	r2,8(r3)
	tc->message = string->buffer;
 2001668:	e0bfff17 	ldw	r2,-4(fp)
 200166c:	10c00217 	ldw	r3,8(r2)
 2001670:	e0bffc17 	ldw	r2,-16(fp)
 2001674:	10c00415 	stw	r3,16(r2)
	if (tc->jumpBuf != 0) longjmp(*(tc->jumpBuf), 0);
 2001678:	e0bffc17 	ldw	r2,-16(fp)
 200167c:	10800517 	ldw	r2,20(r2)
 2001680:	1005003a 	cmpeq	r2,r2,zero
 2001684:	1000051e 	bne	r2,zero,200169c <CuFailInternal+0x88>
 2001688:	e0bffc17 	ldw	r2,-16(fp)
 200168c:	10800517 	ldw	r2,20(r2)
 2001690:	1009883a 	mov	r4,r2
 2001694:	000b883a 	mov	r5,zero
 2001698:	2004a400 	call	2004a40 <longjmp>
}
 200169c:	e037883a 	mov	sp,fp
 20016a0:	dfc00117 	ldw	ra,4(sp)
 20016a4:	df000017 	ldw	fp,0(sp)
 20016a8:	dec00204 	addi	sp,sp,8
 20016ac:	f800283a 	ret

020016b0 <CuFail_Line>:

void CuFail_Line(CuTest* tc, const char* file, int line, const char* message2, const char* message)
{
 20016b0:	defff704 	addi	sp,sp,-36
 20016b4:	dfc00815 	stw	ra,32(sp)
 20016b8:	df000715 	stw	fp,28(sp)
 20016bc:	df000704 	addi	fp,sp,28
 20016c0:	e13ffc15 	stw	r4,-16(fp)
 20016c4:	e17ffd15 	stw	r5,-12(fp)
 20016c8:	e1bffe15 	stw	r6,-8(fp)
 20016cc:	e1ffff15 	stw	r7,-4(fp)
	CuString string;

	CuStringInit(&string);
 20016d0:	e13ff904 	addi	r4,fp,-28
 20016d4:	20011000 	call	2001100 <CuStringInit>
	if (message2 != NULL) 
 20016d8:	e0bfff17 	ldw	r2,-4(fp)
 20016dc:	1005003a 	cmpeq	r2,r2,zero
 20016e0:	1000071e 	bne	r2,zero,2001700 <CuFail_Line+0x50>
	{
		CuStringAppend(&string, message2);
 20016e4:	e13ff904 	addi	r4,fp,-28
 20016e8:	e17fff17 	ldw	r5,-4(fp)
 20016ec:	20012700 	call	2001270 <CuStringAppend>
		CuStringAppend(&string, ": ");
 20016f0:	e13ff904 	addi	r4,fp,-28
 20016f4:	014080b4 	movhi	r5,514
 20016f8:	29687304 	addi	r5,r5,-24116
 20016fc:	20012700 	call	2001270 <CuStringAppend>
	}
	CuStringAppend(&string, message);
 2001700:	e13ff904 	addi	r4,fp,-28
 2001704:	e1400217 	ldw	r5,8(fp)
 2001708:	20012700 	call	2001270 <CuStringAppend>
	CuFailInternal(tc, file, line, &string);
 200170c:	e13ffc17 	ldw	r4,-16(fp)
 2001710:	e17ffd17 	ldw	r5,-12(fp)
 2001714:	e1bffe17 	ldw	r6,-8(fp)
 2001718:	e1fff904 	addi	r7,fp,-28
 200171c:	20016140 	call	2001614 <CuFailInternal>
}
 2001720:	e037883a 	mov	sp,fp
 2001724:	dfc00117 	ldw	ra,4(sp)
 2001728:	df000017 	ldw	fp,0(sp)
 200172c:	dec00204 	addi	sp,sp,8
 2001730:	f800283a 	ret

02001734 <CuAssert_Line>:

void CuAssert_Line(CuTest* tc, const char* file, int line, const char* message, int condition)
{
 2001734:	defff904 	addi	sp,sp,-28
 2001738:	dfc00615 	stw	ra,24(sp)
 200173c:	df000515 	stw	fp,20(sp)
 2001740:	df000504 	addi	fp,sp,20
 2001744:	e13ffc15 	stw	r4,-16(fp)
 2001748:	e17ffd15 	stw	r5,-12(fp)
 200174c:	e1bffe15 	stw	r6,-8(fp)
 2001750:	e1ffff15 	stw	r7,-4(fp)
	if (condition) return;
 2001754:	e0800217 	ldw	r2,8(fp)
 2001758:	1004c03a 	cmpne	r2,r2,zero
 200175c:	1000071e 	bne	r2,zero,200177c <CuAssert_Line+0x48>
	CuFail_Line(tc, file, line, NULL, message);
 2001760:	e0bfff17 	ldw	r2,-4(fp)
 2001764:	d8800015 	stw	r2,0(sp)
 2001768:	e13ffc17 	ldw	r4,-16(fp)
 200176c:	e17ffd17 	ldw	r5,-12(fp)
 2001770:	e1bffe17 	ldw	r6,-8(fp)
 2001774:	000f883a 	mov	r7,zero
 2001778:	20016b00 	call	20016b0 <CuFail_Line>
}
 200177c:	e037883a 	mov	sp,fp
 2001780:	dfc00117 	ldw	ra,4(sp)
 2001784:	df000017 	ldw	fp,0(sp)
 2001788:	dec00204 	addi	sp,sp,8
 200178c:	f800283a 	ret

02001790 <CuAssertStrEquals_LineMsg>:

void CuAssertStrEquals_LineMsg(CuTest* tc, const char* file, int line, const char* message, 
	const char* expected, const char* actual)
{
 2001790:	defff704 	addi	sp,sp,-36
 2001794:	dfc00815 	stw	ra,32(sp)
 2001798:	df000715 	stw	fp,28(sp)
 200179c:	df000704 	addi	fp,sp,28
 20017a0:	e13ffc15 	stw	r4,-16(fp)
 20017a4:	e17ffd15 	stw	r5,-12(fp)
 20017a8:	e1bffe15 	stw	r6,-8(fp)
 20017ac:	e1ffff15 	stw	r7,-4(fp)
	CuString string;
	if ((expected == NULL && actual == NULL) ||
 20017b0:	e0800217 	ldw	r2,8(fp)
 20017b4:	1004c03a 	cmpne	r2,r2,zero
 20017b8:	1000031e 	bne	r2,zero,20017c8 <CuAssertStrEquals_LineMsg+0x38>
 20017bc:	e0800317 	ldw	r2,12(fp)
 20017c0:	1005003a 	cmpeq	r2,r2,zero
 20017c4:	10002f1e 	bne	r2,zero,2001884 <CuAssertStrEquals_LineMsg+0xf4>
 20017c8:	e0800217 	ldw	r2,8(fp)
 20017cc:	1005003a 	cmpeq	r2,r2,zero
 20017d0:	1000091e 	bne	r2,zero,20017f8 <CuAssertStrEquals_LineMsg+0x68>
 20017d4:	e0800317 	ldw	r2,12(fp)
 20017d8:	1005003a 	cmpeq	r2,r2,zero
 20017dc:	1000061e 	bne	r2,zero,20017f8 <CuAssertStrEquals_LineMsg+0x68>
 20017e0:	e1000217 	ldw	r4,8(fp)
 20017e4:	e1400317 	ldw	r5,12(fp)
 20017e8:	2004be40 	call	2004be4 <strcmp>
 20017ec:	1004c03a 	cmpne	r2,r2,zero
 20017f0:	1000011e 	bne	r2,zero,20017f8 <CuAssertStrEquals_LineMsg+0x68>
	    (expected != NULL && actual != NULL &&
	     strcmp(expected, actual) == 0))
	{
		return;
 20017f4:	00002306 	br	2001884 <CuAssertStrEquals_LineMsg+0xf4>
	}

	CuStringInit(&string);
 20017f8:	e13ff904 	addi	r4,fp,-28
 20017fc:	20011000 	call	2001100 <CuStringInit>
	if (message != NULL) 
 2001800:	e0bfff17 	ldw	r2,-4(fp)
 2001804:	1005003a 	cmpeq	r2,r2,zero
 2001808:	1000071e 	bne	r2,zero,2001828 <CuAssertStrEquals_LineMsg+0x98>
	{
		CuStringAppend(&string, message);
 200180c:	e13ff904 	addi	r4,fp,-28
 2001810:	e17fff17 	ldw	r5,-4(fp)
 2001814:	20012700 	call	2001270 <CuStringAppend>
		CuStringAppend(&string, ": ");
 2001818:	e13ff904 	addi	r4,fp,-28
 200181c:	014080b4 	movhi	r5,514
 2001820:	29687304 	addi	r5,r5,-24116
 2001824:	20012700 	call	2001270 <CuStringAppend>
	}
	CuStringAppend(&string, "expected <");
 2001828:	e13ff904 	addi	r4,fp,-28
 200182c:	014080b4 	movhi	r5,514
 2001830:	29687404 	addi	r5,r5,-24112
 2001834:	20012700 	call	2001270 <CuStringAppend>
	CuStringAppend(&string, expected);
 2001838:	e13ff904 	addi	r4,fp,-28
 200183c:	e1400217 	ldw	r5,8(fp)
 2001840:	20012700 	call	2001270 <CuStringAppend>
	CuStringAppend(&string, "> but was <");
 2001844:	e13ff904 	addi	r4,fp,-28
 2001848:	014080b4 	movhi	r5,514
 200184c:	29687704 	addi	r5,r5,-24100
 2001850:	20012700 	call	2001270 <CuStringAppend>
	CuStringAppend(&string, actual);
 2001854:	e13ff904 	addi	r4,fp,-28
 2001858:	e1400317 	ldw	r5,12(fp)
 200185c:	20012700 	call	2001270 <CuStringAppend>
	CuStringAppend(&string, ">");
 2001860:	e13ff904 	addi	r4,fp,-28
 2001864:	014080b4 	movhi	r5,514
 2001868:	29687a04 	addi	r5,r5,-24088
 200186c:	20012700 	call	2001270 <CuStringAppend>
	CuFailInternal(tc, file, line, &string);
 2001870:	e13ffc17 	ldw	r4,-16(fp)
 2001874:	e17ffd17 	ldw	r5,-12(fp)
 2001878:	e1bffe17 	ldw	r6,-8(fp)
 200187c:	e1fff904 	addi	r7,fp,-28
 2001880:	20016140 	call	2001614 <CuFailInternal>
}
 2001884:	e037883a 	mov	sp,fp
 2001888:	dfc00117 	ldw	ra,4(sp)
 200188c:	df000017 	ldw	fp,0(sp)
 2001890:	dec00204 	addi	sp,sp,8
 2001894:	f800283a 	ret

02001898 <CuAssertIntEquals_LineMsg>:

void CuAssertIntEquals_LineMsg(CuTest* tc, const char* file, int line, const char* message, 
	int expected, int actual)
{
 2001898:	deffb904 	addi	sp,sp,-284
 200189c:	dfc04615 	stw	ra,280(sp)
 20018a0:	df004515 	stw	fp,276(sp)
 20018a4:	df004504 	addi	fp,sp,276
 20018a8:	e13ffc15 	stw	r4,-16(fp)
 20018ac:	e17ffd15 	stw	r5,-12(fp)
 20018b0:	e1bffe15 	stw	r6,-8(fp)
 20018b4:	e1ffff15 	stw	r7,-4(fp)
	char buf[STRING_MAX];
	if (expected == actual) return;
 20018b8:	e0c00217 	ldw	r3,8(fp)
 20018bc:	e0800317 	ldw	r2,12(fp)
 20018c0:	18800d26 	beq	r3,r2,20018f8 <CuAssertIntEquals_LineMsg+0x60>
	sprintf(buf, "expected <%d> but was <%d>", expected, actual);
 20018c4:	e13fbc04 	addi	r4,fp,-272
 20018c8:	014080b4 	movhi	r5,514
 20018cc:	29687b04 	addi	r5,r5,-24084
 20018d0:	e1800217 	ldw	r6,8(fp)
 20018d4:	e1c00317 	ldw	r7,12(fp)
 20018d8:	2004a800 	call	2004a80 <sprintf>
	CuFail_Line(tc, file, line, message, buf);
 20018dc:	e0bfbc04 	addi	r2,fp,-272
 20018e0:	d8800015 	stw	r2,0(sp)
 20018e4:	e13ffc17 	ldw	r4,-16(fp)
 20018e8:	e17ffd17 	ldw	r5,-12(fp)
 20018ec:	e1bffe17 	ldw	r6,-8(fp)
 20018f0:	e1ffff17 	ldw	r7,-4(fp)
 20018f4:	20016b00 	call	20016b0 <CuFail_Line>
}
 20018f8:	e037883a 	mov	sp,fp
 20018fc:	dfc00117 	ldw	ra,4(sp)
 2001900:	df000017 	ldw	fp,0(sp)
 2001904:	dec00204 	addi	sp,sp,8
 2001908:	f800283a 	ret

0200190c <CuAssertDblEquals_LineMsg>:

void CuAssertDblEquals_LineMsg(CuTest* tc, const char* file, int line, const char* message, 
	double expected, double actual, double delta)
{
 200190c:	deffb804 	addi	sp,sp,-288
 2001910:	dfc04715 	stw	ra,284(sp)
 2001914:	df004615 	stw	fp,280(sp)
 2001918:	df004604 	addi	fp,sp,280
 200191c:	e13ffc15 	stw	r4,-16(fp)
 2001920:	e17ffd15 	stw	r5,-12(fp)
 2001924:	e1bffe15 	stw	r6,-8(fp)
 2001928:	e1ffff15 	stw	r7,-4(fp)
	char buf[STRING_MAX];
	if (fabs(expected - actual) <= delta) return;
 200192c:	e1000217 	ldw	r4,8(fp)
 2001930:	e1400317 	ldw	r5,12(fp)
 2001934:	e1800417 	ldw	r6,16(fp)
 2001938:	e1c00517 	ldw	r7,20(fp)
 200193c:	2002fe40 	call	2002fe4 <__subdf3>
 2001940:	1009883a 	mov	r4,r2
 2001944:	180b883a 	mov	r5,r3
 2001948:	200d883a 	mov	r6,r4
 200194c:	280f883a 	mov	r7,r5
 2001950:	01200034 	movhi	r4,32768
 2001954:	213fffc4 	addi	r4,r4,-1
 2001958:	3005883a 	mov	r2,r6
 200195c:	3906703a 	and	r3,r7,r4
 2001960:	1009883a 	mov	r4,r2
 2001964:	180b883a 	mov	r5,r3
 2001968:	e1800617 	ldw	r6,24(fp)
 200196c:	e1c00717 	ldw	r7,28(fp)
 2001970:	20030d80 	call	20030d8 <__ledf2>
 2001974:	10800050 	cmplti	r2,r2,1
 2001978:	1000111e 	bne	r2,zero,20019c0 <CuAssertDblEquals_LineMsg+0xb4>
	sprintf(buf, "expected <%f> but was <%f>", expected, actual); 
 200197c:	e0800417 	ldw	r2,16(fp)
 2001980:	d8800015 	stw	r2,0(sp)
 2001984:	e0800517 	ldw	r2,20(fp)
 2001988:	d8800115 	stw	r2,4(sp)
 200198c:	e13fbc04 	addi	r4,fp,-272
 2001990:	014080b4 	movhi	r5,514
 2001994:	29688204 	addi	r5,r5,-24056
 2001998:	e1800217 	ldw	r6,8(fp)
 200199c:	e1c00317 	ldw	r7,12(fp)
 20019a0:	2004a800 	call	2004a80 <sprintf>

	CuFail_Line(tc, file, line, message, buf);
 20019a4:	e0bfbc04 	addi	r2,fp,-272
 20019a8:	d8800015 	stw	r2,0(sp)
 20019ac:	e13ffc17 	ldw	r4,-16(fp)
 20019b0:	e17ffd17 	ldw	r5,-12(fp)
 20019b4:	e1bffe17 	ldw	r6,-8(fp)
 20019b8:	e1ffff17 	ldw	r7,-4(fp)
 20019bc:	20016b00 	call	20016b0 <CuFail_Line>
}
 20019c0:	e037883a 	mov	sp,fp
 20019c4:	dfc00117 	ldw	ra,4(sp)
 20019c8:	df000017 	ldw	fp,0(sp)
 20019cc:	dec00204 	addi	sp,sp,8
 20019d0:	f800283a 	ret

020019d4 <CuAssertPtrEquals_LineMsg>:

void CuAssertPtrEquals_LineMsg(CuTest* tc, const char* file, int line, const char* message, 
	void* expected, void* actual)
{
 20019d4:	deffb904 	addi	sp,sp,-284
 20019d8:	dfc04615 	stw	ra,280(sp)
 20019dc:	df004515 	stw	fp,276(sp)
 20019e0:	df004504 	addi	fp,sp,276
 20019e4:	e13ffc15 	stw	r4,-16(fp)
 20019e8:	e17ffd15 	stw	r5,-12(fp)
 20019ec:	e1bffe15 	stw	r6,-8(fp)
 20019f0:	e1ffff15 	stw	r7,-4(fp)
	char buf[STRING_MAX];
	if (expected == actual) return;
 20019f4:	e0c00217 	ldw	r3,8(fp)
 20019f8:	e0800317 	ldw	r2,12(fp)
 20019fc:	18800d26 	beq	r3,r2,2001a34 <CuAssertPtrEquals_LineMsg+0x60>
	sprintf(buf, "expected pointer <0x%p> but was <0x%p>", expected, actual);
 2001a00:	e13fbc04 	addi	r4,fp,-272
 2001a04:	014080b4 	movhi	r5,514
 2001a08:	29688904 	addi	r5,r5,-24028
 2001a0c:	e1800217 	ldw	r6,8(fp)
 2001a10:	e1c00317 	ldw	r7,12(fp)
 2001a14:	2004a800 	call	2004a80 <sprintf>
	CuFail_Line(tc, file, line, message, buf);
 2001a18:	e0bfbc04 	addi	r2,fp,-272
 2001a1c:	d8800015 	stw	r2,0(sp)
 2001a20:	e13ffc17 	ldw	r4,-16(fp)
 2001a24:	e17ffd17 	ldw	r5,-12(fp)
 2001a28:	e1bffe17 	ldw	r6,-8(fp)
 2001a2c:	e1ffff17 	ldw	r7,-4(fp)
 2001a30:	20016b00 	call	20016b0 <CuFail_Line>
}
 2001a34:	e037883a 	mov	sp,fp
 2001a38:	dfc00117 	ldw	ra,4(sp)
 2001a3c:	df000017 	ldw	fp,0(sp)
 2001a40:	dec00204 	addi	sp,sp,8
 2001a44:	f800283a 	ret

02001a48 <CuSuiteInit>:
/*-------------------------------------------------------------------------*
 * CuSuite
 *-------------------------------------------------------------------------*/

void CuSuiteInit(CuSuite* testSuite)
{
 2001a48:	defffd04 	addi	sp,sp,-12
 2001a4c:	dfc00215 	stw	ra,8(sp)
 2001a50:	df000115 	stw	fp,4(sp)
 2001a54:	df000104 	addi	fp,sp,4
 2001a58:	e13fff15 	stw	r4,-4(fp)
	testSuite->count = 0;
 2001a5c:	e0bfff17 	ldw	r2,-4(fp)
 2001a60:	10000015 	stw	zero,0(r2)
	testSuite->failCount = 0;
 2001a64:	e0bfff17 	ldw	r2,-4(fp)
 2001a68:	10040115 	stw	zero,4100(r2)
        memset(testSuite->list, 0, sizeof(testSuite->list));
 2001a6c:	e0bfff17 	ldw	r2,-4(fp)
 2001a70:	10800104 	addi	r2,r2,4
 2001a74:	1009883a 	mov	r4,r2
 2001a78:	01840004 	movi	r6,4096
 2001a7c:	000b883a 	mov	r5,zero
 2001a80:	20041c40 	call	20041c4 <memset>
}
 2001a84:	e037883a 	mov	sp,fp
 2001a88:	dfc00117 	ldw	ra,4(sp)
 2001a8c:	df000017 	ldw	fp,0(sp)
 2001a90:	dec00204 	addi	sp,sp,8
 2001a94:	f800283a 	ret

02001a98 <CuSuiteNew>:

CuSuite* CuSuiteNew(void)
{
 2001a98:	defffd04 	addi	sp,sp,-12
 2001a9c:	dfc00215 	stw	ra,8(sp)
 2001aa0:	df000115 	stw	fp,4(sp)
 2001aa4:	df000104 	addi	fp,sp,4
	CuSuite* testSuite = CU_ALLOC(CuSuite);
 2001aa8:	01040204 	movi	r4,4104
 2001aac:	20038f00 	call	20038f0 <malloc>
 2001ab0:	e0bfff15 	stw	r2,-4(fp)
	CuSuiteInit(testSuite);
 2001ab4:	e13fff17 	ldw	r4,-4(fp)
 2001ab8:	2001a480 	call	2001a48 <CuSuiteInit>
	return testSuite;
 2001abc:	e0bfff17 	ldw	r2,-4(fp)
}
 2001ac0:	e037883a 	mov	sp,fp
 2001ac4:	dfc00117 	ldw	ra,4(sp)
 2001ac8:	df000017 	ldw	fp,0(sp)
 2001acc:	dec00204 	addi	sp,sp,8
 2001ad0:	f800283a 	ret

02001ad4 <CuSuiteDelete>:

void CuSuiteDelete(CuSuite *testSuite)
{
 2001ad4:	defffc04 	addi	sp,sp,-16
 2001ad8:	dfc00315 	stw	ra,12(sp)
 2001adc:	df000215 	stw	fp,8(sp)
 2001ae0:	df000204 	addi	fp,sp,8
 2001ae4:	e13fff15 	stw	r4,-4(fp)
        unsigned int n;
        for (n=0; n < MAX_TEST_CASES; n++)
 2001ae8:	e03ffe15 	stw	zero,-8(fp)
 2001aec:	00001406 	br	2001b40 <CuSuiteDelete+0x6c>
        {
                if (testSuite->list[n])
 2001af0:	e0bffe17 	ldw	r2,-8(fp)
 2001af4:	e0ffff17 	ldw	r3,-4(fp)
 2001af8:	1085883a 	add	r2,r2,r2
 2001afc:	1085883a 	add	r2,r2,r2
 2001b00:	10c5883a 	add	r2,r2,r3
 2001b04:	10800104 	addi	r2,r2,4
 2001b08:	10800017 	ldw	r2,0(r2)
 2001b0c:	1005003a 	cmpeq	r2,r2,zero
 2001b10:	1000081e 	bne	r2,zero,2001b34 <CuSuiteDelete+0x60>
                {
                        CuTestDelete(testSuite->list[n]);
 2001b14:	e0bffe17 	ldw	r2,-8(fp)
 2001b18:	e0ffff17 	ldw	r3,-4(fp)
 2001b1c:	1085883a 	add	r2,r2,r2
 2001b20:	1085883a 	add	r2,r2,r2
 2001b24:	10c5883a 	add	r2,r2,r3
 2001b28:	10800104 	addi	r2,r2,4
 2001b2c:	11000017 	ldw	r4,0(r2)
 2001b30:	20015640 	call	2001564 <CuTestDelete>
}

void CuSuiteDelete(CuSuite *testSuite)
{
        unsigned int n;
        for (n=0; n < MAX_TEST_CASES; n++)
 2001b34:	e0bffe17 	ldw	r2,-8(fp)
 2001b38:	10800044 	addi	r2,r2,1
 2001b3c:	e0bffe15 	stw	r2,-8(fp)
 2001b40:	e0bffe17 	ldw	r2,-8(fp)
 2001b44:	10810030 	cmpltui	r2,r2,1024
 2001b48:	103fe91e 	bne	r2,zero,2001af0 <CuSuiteDelete+0x1c>
                if (testSuite->list[n])
                {
                        CuTestDelete(testSuite->list[n]);
                }
        }
        free(testSuite);
 2001b4c:	e13fff17 	ldw	r4,-4(fp)
 2001b50:	20038dc0 	call	20038dc <free>

}
 2001b54:	e037883a 	mov	sp,fp
 2001b58:	dfc00117 	ldw	ra,4(sp)
 2001b5c:	df000017 	ldw	fp,0(sp)
 2001b60:	dec00204 	addi	sp,sp,8
 2001b64:	f800283a 	ret

02001b68 <CuSuiteAdd>:

void CuSuiteAdd(CuSuite* testSuite, CuTest *testCase)
{
 2001b68:	defffc04 	addi	sp,sp,-16
 2001b6c:	dfc00315 	stw	ra,12(sp)
 2001b70:	df000215 	stw	fp,8(sp)
 2001b74:	df000204 	addi	fp,sp,8
 2001b78:	e13ffe15 	stw	r4,-8(fp)
 2001b7c:	e17fff15 	stw	r5,-4(fp)
	assert(testSuite->count < MAX_TEST_CASES);
 2001b80:	e0bffe17 	ldw	r2,-8(fp)
 2001b84:	10800017 	ldw	r2,0(r2)
 2001b88:	10810010 	cmplti	r2,r2,1024
 2001b8c:	1000081e 	bne	r2,zero,2001bb0 <CuSuiteAdd+0x48>
 2001b90:	010080b4 	movhi	r4,514
 2001b94:	21289604 	addi	r4,r4,-23976
 2001b98:	014043c4 	movi	r5,271
 2001b9c:	018080b4 	movhi	r6,514
 2001ba0:	31a89304 	addi	r6,r6,-23988
 2001ba4:	01c080b4 	movhi	r7,514
 2001ba8:	39e89a04 	addi	r7,r7,-23960
 2001bac:	20037f80 	call	20037f8 <__assert_func>
	testSuite->list[testSuite->count] = testCase;
 2001bb0:	e0bffe17 	ldw	r2,-8(fp)
 2001bb4:	10800017 	ldw	r2,0(r2)
 2001bb8:	e0fffe17 	ldw	r3,-8(fp)
 2001bbc:	1085883a 	add	r2,r2,r2
 2001bc0:	1085883a 	add	r2,r2,r2
 2001bc4:	10c5883a 	add	r2,r2,r3
 2001bc8:	10c00104 	addi	r3,r2,4
 2001bcc:	e0bfff17 	ldw	r2,-4(fp)
 2001bd0:	18800015 	stw	r2,0(r3)
	testSuite->count++;
 2001bd4:	e0bffe17 	ldw	r2,-8(fp)
 2001bd8:	10800017 	ldw	r2,0(r2)
 2001bdc:	10c00044 	addi	r3,r2,1
 2001be0:	e0bffe17 	ldw	r2,-8(fp)
 2001be4:	10c00015 	stw	r3,0(r2)
}
 2001be8:	e037883a 	mov	sp,fp
 2001bec:	dfc00117 	ldw	ra,4(sp)
 2001bf0:	df000017 	ldw	fp,0(sp)
 2001bf4:	dec00204 	addi	sp,sp,8
 2001bf8:	f800283a 	ret

02001bfc <CuSuiteAddSuite>:

void CuSuiteAddSuite(CuSuite* testSuite, CuSuite* testSuite2)
{
 2001bfc:	defffa04 	addi	sp,sp,-24
 2001c00:	dfc00515 	stw	ra,20(sp)
 2001c04:	df000415 	stw	fp,16(sp)
 2001c08:	df000404 	addi	fp,sp,16
 2001c0c:	e13ffe15 	stw	r4,-8(fp)
 2001c10:	e17fff15 	stw	r5,-4(fp)
	int i;
	for (i = 0 ; i < testSuite2->count ; ++i)
 2001c14:	e03ffd15 	stw	zero,-12(fp)
 2001c18:	00000e06 	br	2001c54 <CuSuiteAddSuite+0x58>
	{
		CuTest* testCase = testSuite2->list[i];
 2001c1c:	e0bffd17 	ldw	r2,-12(fp)
 2001c20:	e0ffff17 	ldw	r3,-4(fp)
 2001c24:	1085883a 	add	r2,r2,r2
 2001c28:	1085883a 	add	r2,r2,r2
 2001c2c:	10c5883a 	add	r2,r2,r3
 2001c30:	10800104 	addi	r2,r2,4
 2001c34:	10800017 	ldw	r2,0(r2)
 2001c38:	e0bffc15 	stw	r2,-16(fp)
		CuSuiteAdd(testSuite, testCase);
 2001c3c:	e13ffe17 	ldw	r4,-8(fp)
 2001c40:	e17ffc17 	ldw	r5,-16(fp)
 2001c44:	2001b680 	call	2001b68 <CuSuiteAdd>
}

void CuSuiteAddSuite(CuSuite* testSuite, CuSuite* testSuite2)
{
	int i;
	for (i = 0 ; i < testSuite2->count ; ++i)
 2001c48:	e0bffd17 	ldw	r2,-12(fp)
 2001c4c:	10800044 	addi	r2,r2,1
 2001c50:	e0bffd15 	stw	r2,-12(fp)
 2001c54:	e0bfff17 	ldw	r2,-4(fp)
 2001c58:	10c00017 	ldw	r3,0(r2)
 2001c5c:	e0bffd17 	ldw	r2,-12(fp)
 2001c60:	10ffee16 	blt	r2,r3,2001c1c <CuSuiteAddSuite+0x20>
	{
		CuTest* testCase = testSuite2->list[i];
		CuSuiteAdd(testSuite, testCase);
	}
}
 2001c64:	e037883a 	mov	sp,fp
 2001c68:	dfc00117 	ldw	ra,4(sp)
 2001c6c:	df000017 	ldw	fp,0(sp)
 2001c70:	dec00204 	addi	sp,sp,8
 2001c74:	f800283a 	ret

02001c78 <CuSuiteRun>:

void CuSuiteRun(CuSuite* testSuite)
{
 2001c78:	defffb04 	addi	sp,sp,-20
 2001c7c:	dfc00415 	stw	ra,16(sp)
 2001c80:	df000315 	stw	fp,12(sp)
 2001c84:	df000304 	addi	fp,sp,12
 2001c88:	e13fff15 	stw	r4,-4(fp)
	int i;
	for (i = 0 ; i < testSuite->count ; ++i)
 2001c8c:	e03ffe15 	stw	zero,-8(fp)
 2001c90:	00001606 	br	2001cec <CuSuiteRun+0x74>
	{
		CuTest* testCase = testSuite->list[i];
 2001c94:	e0bffe17 	ldw	r2,-8(fp)
 2001c98:	e0ffff17 	ldw	r3,-4(fp)
 2001c9c:	1085883a 	add	r2,r2,r2
 2001ca0:	1085883a 	add	r2,r2,r2
 2001ca4:	10c5883a 	add	r2,r2,r3
 2001ca8:	10800104 	addi	r2,r2,4
 2001cac:	10800017 	ldw	r2,0(r2)
 2001cb0:	e0bffd15 	stw	r2,-12(fp)
		CuTestRun(testCase);
 2001cb4:	e13ffd17 	ldw	r4,-12(fp)
 2001cb8:	20015ac0 	call	20015ac <CuTestRun>
		if (testCase->failed) { testSuite->failCount += 1; }
 2001cbc:	e0bffd17 	ldw	r2,-12(fp)
 2001cc0:	10800217 	ldw	r2,8(r2)
 2001cc4:	1005003a 	cmpeq	r2,r2,zero
 2001cc8:	1000051e 	bne	r2,zero,2001ce0 <CuSuiteRun+0x68>
 2001ccc:	e0bfff17 	ldw	r2,-4(fp)
 2001cd0:	10840117 	ldw	r2,4100(r2)
 2001cd4:	10c00044 	addi	r3,r2,1
 2001cd8:	e0bfff17 	ldw	r2,-4(fp)
 2001cdc:	10c40115 	stw	r3,4100(r2)
}

void CuSuiteRun(CuSuite* testSuite)
{
	int i;
	for (i = 0 ; i < testSuite->count ; ++i)
 2001ce0:	e0bffe17 	ldw	r2,-8(fp)
 2001ce4:	10800044 	addi	r2,r2,1
 2001ce8:	e0bffe15 	stw	r2,-8(fp)
 2001cec:	e0bfff17 	ldw	r2,-4(fp)
 2001cf0:	10c00017 	ldw	r3,0(r2)
 2001cf4:	e0bffe17 	ldw	r2,-8(fp)
 2001cf8:	10ffe616 	blt	r2,r3,2001c94 <CuSuiteRun+0x1c>
	{
		CuTest* testCase = testSuite->list[i];
		CuTestRun(testCase);
		if (testCase->failed) { testSuite->failCount += 1; }
	}
}
 2001cfc:	e037883a 	mov	sp,fp
 2001d00:	dfc00117 	ldw	ra,4(sp)
 2001d04:	df000017 	ldw	fp,0(sp)
 2001d08:	dec00204 	addi	sp,sp,8
 2001d0c:	f800283a 	ret

02001d10 <CuSuiteSummary>:

void CuSuiteSummary(CuSuite* testSuite, CuString* summary)
{
 2001d10:	defff904 	addi	sp,sp,-28
 2001d14:	dfc00615 	stw	ra,24(sp)
 2001d18:	df000515 	stw	fp,20(sp)
 2001d1c:	df000504 	addi	fp,sp,20
 2001d20:	e13ffd15 	stw	r4,-12(fp)
 2001d24:	e17ffe15 	stw	r5,-8(fp)
	int i;
	for (i = 0 ; i < testSuite->count ; ++i)
 2001d28:	e03ffc15 	stw	zero,-16(fp)
 2001d2c:	00001906 	br	2001d94 <CuSuiteSummary+0x84>
	{
		CuTest* testCase = testSuite->list[i];
 2001d30:	e0bffc17 	ldw	r2,-16(fp)
 2001d34:	e0fffd17 	ldw	r3,-12(fp)
 2001d38:	1085883a 	add	r2,r2,r2
 2001d3c:	1085883a 	add	r2,r2,r2
 2001d40:	10c5883a 	add	r2,r2,r3
 2001d44:	10800104 	addi	r2,r2,4
 2001d48:	10800017 	ldw	r2,0(r2)
 2001d4c:	e0bffb15 	stw	r2,-20(fp)
		CuStringAppend(summary, testCase->failed ? "F" : ".");
 2001d50:	e0bffb17 	ldw	r2,-20(fp)
 2001d54:	10800217 	ldw	r2,8(r2)
 2001d58:	1005003a 	cmpeq	r2,r2,zero
 2001d5c:	1000041e 	bne	r2,zero,2001d70 <CuSuiteSummary+0x60>
 2001d60:	008080b4 	movhi	r2,514
 2001d64:	10a8a304 	addi	r2,r2,-23924
 2001d68:	e0bfff15 	stw	r2,-4(fp)
 2001d6c:	00000306 	br	2001d7c <CuSuiteSummary+0x6c>
 2001d70:	008080b4 	movhi	r2,514
 2001d74:	10a8a404 	addi	r2,r2,-23920
 2001d78:	e0bfff15 	stw	r2,-4(fp)
 2001d7c:	e13ffe17 	ldw	r4,-8(fp)
 2001d80:	e17fff17 	ldw	r5,-4(fp)
 2001d84:	20012700 	call	2001270 <CuStringAppend>
}

void CuSuiteSummary(CuSuite* testSuite, CuString* summary)
{
	int i;
	for (i = 0 ; i < testSuite->count ; ++i)
 2001d88:	e0bffc17 	ldw	r2,-16(fp)
 2001d8c:	10800044 	addi	r2,r2,1
 2001d90:	e0bffc15 	stw	r2,-16(fp)
 2001d94:	e0bffd17 	ldw	r2,-12(fp)
 2001d98:	10c00017 	ldw	r3,0(r2)
 2001d9c:	e0bffc17 	ldw	r2,-16(fp)
 2001da0:	10ffe316 	blt	r2,r3,2001d30 <CuSuiteSummary+0x20>
	{
		CuTest* testCase = testSuite->list[i];
		CuStringAppend(summary, testCase->failed ? "F" : ".");
	}
	CuStringAppend(summary, "\n\n");
 2001da4:	e13ffe17 	ldw	r4,-8(fp)
 2001da8:	014080b4 	movhi	r5,514
 2001dac:	2968a504 	addi	r5,r5,-23916
 2001db0:	20012700 	call	2001270 <CuStringAppend>
}
 2001db4:	e037883a 	mov	sp,fp
 2001db8:	dfc00117 	ldw	ra,4(sp)
 2001dbc:	df000017 	ldw	fp,0(sp)
 2001dc0:	dec00204 	addi	sp,sp,8
 2001dc4:	f800283a 	ret

02001dc8 <CuSuiteDetails>:

void CuSuiteDetails(CuSuite* testSuite, CuString* details)
{
 2001dc8:	defff504 	addi	sp,sp,-44
 2001dcc:	dfc00a15 	stw	ra,40(sp)
 2001dd0:	df000915 	stw	fp,36(sp)
 2001dd4:	df000904 	addi	fp,sp,36
 2001dd8:	e13ffd15 	stw	r4,-12(fp)
 2001ddc:	e17ffe15 	stw	r5,-8(fp)
	int i;
	int failCount = 0;
 2001de0:	e03ffb15 	stw	zero,-20(fp)

	if (testSuite->failCount == 0)
 2001de4:	e0bffd17 	ldw	r2,-12(fp)
 2001de8:	10840117 	ldw	r2,4100(r2)
 2001dec:	1004c03a 	cmpne	r2,r2,zero
 2001df0:	1000191e 	bne	r2,zero,2001e58 <CuSuiteDetails+0x90>
	{
		int passCount = testSuite->count - testSuite->failCount;
 2001df4:	e0bffd17 	ldw	r2,-12(fp)
 2001df8:	10c00017 	ldw	r3,0(r2)
 2001dfc:	e0bffd17 	ldw	r2,-12(fp)
 2001e00:	10840117 	ldw	r2,4100(r2)
 2001e04:	1885c83a 	sub	r2,r3,r2
 2001e08:	e0bffa15 	stw	r2,-24(fp)
		const char* testWord = passCount == 1 ? "test" : "tests";
 2001e0c:	e0bffa17 	ldw	r2,-24(fp)
 2001e10:	10800058 	cmpnei	r2,r2,1
 2001e14:	1000041e 	bne	r2,zero,2001e28 <CuSuiteDetails+0x60>
 2001e18:	008080b4 	movhi	r2,514
 2001e1c:	10a8a604 	addi	r2,r2,-23912
 2001e20:	e0bfff15 	stw	r2,-4(fp)
 2001e24:	00000306 	br	2001e34 <CuSuiteDetails+0x6c>
 2001e28:	008080b4 	movhi	r2,514
 2001e2c:	10a8a804 	addi	r2,r2,-23904
 2001e30:	e0bfff15 	stw	r2,-4(fp)
 2001e34:	e0bfff17 	ldw	r2,-4(fp)
 2001e38:	e0bff915 	stw	r2,-28(fp)
		CuStringAppendFormat(details, "OK (%d %s)\n", passCount, testWord);
 2001e3c:	e13ffe17 	ldw	r4,-8(fp)
 2001e40:	014080b4 	movhi	r5,514
 2001e44:	2968aa04 	addi	r5,r5,-23896
 2001e48:	e1bffa17 	ldw	r6,-24(fp)
 2001e4c:	e1fff917 	ldw	r7,-28(fp)
 2001e50:	20013680 	call	2001368 <CuStringAppendFormat>
 2001e54:	00004a06 	br	2001f80 <CuSuiteDetails+0x1b8>
	}
	else
	{
		if (testSuite->failCount == 1)
 2001e58:	e0bffd17 	ldw	r2,-12(fp)
 2001e5c:	10840117 	ldw	r2,4100(r2)
 2001e60:	10800058 	cmpnei	r2,r2,1
 2001e64:	1000051e 	bne	r2,zero,2001e7c <CuSuiteDetails+0xb4>
			CuStringAppend(details, "There was 1 failure:\n");
 2001e68:	e13ffe17 	ldw	r4,-8(fp)
 2001e6c:	014080b4 	movhi	r5,514
 2001e70:	2968ad04 	addi	r5,r5,-23884
 2001e74:	20012700 	call	2001270 <CuStringAppend>
 2001e78:	00000606 	br	2001e94 <CuSuiteDetails+0xcc>
		else
			CuStringAppendFormat(details, "There were %d failures:\n", testSuite->failCount);
 2001e7c:	e0bffd17 	ldw	r2,-12(fp)
 2001e80:	11840117 	ldw	r6,4100(r2)
 2001e84:	e13ffe17 	ldw	r4,-8(fp)
 2001e88:	014080b4 	movhi	r5,514
 2001e8c:	2968b304 	addi	r5,r5,-23860
 2001e90:	20013680 	call	2001368 <CuStringAppendFormat>

		for (i = 0 ; i < testSuite->count ; ++i)
 2001e94:	e03ffc15 	stw	zero,-16(fp)
 2001e98:	00001c06 	br	2001f0c <CuSuiteDetails+0x144>
		{
			CuTest* testCase = testSuite->list[i];
 2001e9c:	e0bffc17 	ldw	r2,-16(fp)
 2001ea0:	e0fffd17 	ldw	r3,-12(fp)
 2001ea4:	1085883a 	add	r2,r2,r2
 2001ea8:	1085883a 	add	r2,r2,r2
 2001eac:	10c5883a 	add	r2,r2,r3
 2001eb0:	10800104 	addi	r2,r2,4
 2001eb4:	10800017 	ldw	r2,0(r2)
 2001eb8:	e0bff815 	stw	r2,-32(fp)
			if (testCase->failed)
 2001ebc:	e0bff817 	ldw	r2,-32(fp)
 2001ec0:	10800217 	ldw	r2,8(r2)
 2001ec4:	1005003a 	cmpeq	r2,r2,zero
 2001ec8:	10000d1e 	bne	r2,zero,2001f00 <CuSuiteDetails+0x138>
			{
				failCount++;
 2001ecc:	e0bffb17 	ldw	r2,-20(fp)
 2001ed0:	10800044 	addi	r2,r2,1
 2001ed4:	e0bffb15 	stw	r2,-20(fp)
				CuStringAppendFormat(details, "%d) %s: %s\n",
 2001ed8:	e0bff817 	ldw	r2,-32(fp)
 2001edc:	11c00017 	ldw	r7,0(r2)
 2001ee0:	e0bff817 	ldw	r2,-32(fp)
 2001ee4:	10800417 	ldw	r2,16(r2)
 2001ee8:	d8800015 	stw	r2,0(sp)
 2001eec:	e13ffe17 	ldw	r4,-8(fp)
 2001ef0:	014080b4 	movhi	r5,514
 2001ef4:	2968ba04 	addi	r5,r5,-23832
 2001ef8:	e1bffb17 	ldw	r6,-20(fp)
 2001efc:	20013680 	call	2001368 <CuStringAppendFormat>
		if (testSuite->failCount == 1)
			CuStringAppend(details, "There was 1 failure:\n");
		else
			CuStringAppendFormat(details, "There were %d failures:\n", testSuite->failCount);

		for (i = 0 ; i < testSuite->count ; ++i)
 2001f00:	e0bffc17 	ldw	r2,-16(fp)
 2001f04:	10800044 	addi	r2,r2,1
 2001f08:	e0bffc15 	stw	r2,-16(fp)
 2001f0c:	e0bffd17 	ldw	r2,-12(fp)
 2001f10:	10c00017 	ldw	r3,0(r2)
 2001f14:	e0bffc17 	ldw	r2,-16(fp)
 2001f18:	10ffe016 	blt	r2,r3,2001e9c <CuSuiteDetails+0xd4>
				failCount++;
				CuStringAppendFormat(details, "%d) %s: %s\n",
					failCount, testCase->name, testCase->message);
			}
		}
		CuStringAppend(details, "\n!!!FAILURES!!!\n");
 2001f1c:	e13ffe17 	ldw	r4,-8(fp)
 2001f20:	014080b4 	movhi	r5,514
 2001f24:	2968bd04 	addi	r5,r5,-23820
 2001f28:	20012700 	call	2001270 <CuStringAppend>

		CuStringAppendFormat(details, "Runs: %d ",   testSuite->count);
 2001f2c:	e0bffd17 	ldw	r2,-12(fp)
 2001f30:	11800017 	ldw	r6,0(r2)
 2001f34:	e13ffe17 	ldw	r4,-8(fp)
 2001f38:	014080b4 	movhi	r5,514
 2001f3c:	2968c204 	addi	r5,r5,-23800
 2001f40:	20013680 	call	2001368 <CuStringAppendFormat>
		CuStringAppendFormat(details, "Passes: %d ", testSuite->count - testSuite->failCount);
 2001f44:	e0bffd17 	ldw	r2,-12(fp)
 2001f48:	10c00017 	ldw	r3,0(r2)
 2001f4c:	e0bffd17 	ldw	r2,-12(fp)
 2001f50:	10840117 	ldw	r2,4100(r2)
 2001f54:	188dc83a 	sub	r6,r3,r2
 2001f58:	e13ffe17 	ldw	r4,-8(fp)
 2001f5c:	014080b4 	movhi	r5,514
 2001f60:	2968c504 	addi	r5,r5,-23788
 2001f64:	20013680 	call	2001368 <CuStringAppendFormat>
		CuStringAppendFormat(details, "Fails: %d\n",  testSuite->failCount);
 2001f68:	e0bffd17 	ldw	r2,-12(fp)
 2001f6c:	11840117 	ldw	r6,4100(r2)
 2001f70:	e13ffe17 	ldw	r4,-8(fp)
 2001f74:	014080b4 	movhi	r5,514
 2001f78:	2968c804 	addi	r5,r5,-23776
 2001f7c:	20013680 	call	2001368 <CuStringAppendFormat>
	}
}
 2001f80:	e037883a 	mov	sp,fp
 2001f84:	dfc00117 	ldw	ra,4(sp)
 2001f88:	df000017 	ldw	fp,0(sp)
 2001f8c:	dec00204 	addi	sp,sp,8
 2001f90:	f800283a 	ret

02001f94 <Test_int16U_changed_by_threshold>:
//}

///*-------------------------------------------------------------------------*
// * util Test
// *-------------------------------------------------------------------------*/
void Test_int16U_changed_by_threshold(CuTest* tc){
 2001f94:	defffb04 	addi	sp,sp,-20
 2001f98:	dfc00415 	stw	ra,16(sp)
 2001f9c:	df000315 	stw	fp,12(sp)
 2001fa0:	df000304 	addi	fp,sp,12
 2001fa4:	e13fff15 	stw	r4,-4(fp)
	BOOL larger = int16U_changed_by_threshold(CHANGED_BY_THRESHOLD_INPUT_2,CHANGED_BY_THRESHOLD_INPUT_1,APPS_VALUE_CHANGE_THRESHOLD);
 2001fa8:	01007d04 	movi	r4,500
 2001fac:	01401904 	movi	r5,100
 2001fb0:	01801904 	movi	r6,100
 2001fb4:	20029d00 	call	20029d0 <int16U_changed_by_threshold>
 2001fb8:	e0bffe85 	stb	r2,-6(fp)
	CuAssert(tc,"changed", larger == TRUE);
 2001fbc:	e0bffe83 	ldbu	r2,-6(fp)
 2001fc0:	10803fe0 	cmpeqi	r2,r2,255
 2001fc4:	d8800015 	stw	r2,0(sp)
 2001fc8:	e13fff17 	ldw	r4,-4(fp)
 2001fcc:	014080b4 	movhi	r5,514
 2001fd0:	2968cb04 	addi	r5,r5,-23764
 2001fd4:	018012c4 	movi	r6,75
 2001fd8:	01c080b4 	movhi	r7,514
 2001fdc:	39e8d004 	addi	r7,r7,-23744
 2001fe0:	20017340 	call	2001734 <CuAssert_Line>
	BOOL smaller = int16U_changed_by_threshold(CHANGED_BY_THRESHOLD_INPUT_1,CHANGED_BY_THRESHOLD_INPUT_2,APPS_VALUE_CHANGE_THRESHOLD);
 2001fe4:	01001904 	movi	r4,100
 2001fe8:	01407d04 	movi	r5,500
 2001fec:	01801904 	movi	r6,100
 2001ff0:	20029d00 	call	20029d0 <int16U_changed_by_threshold>
 2001ff4:	e0bffe45 	stb	r2,-7(fp)
	CuAssert(tc,"changed", smaller == TRUE);
 2001ff8:	e0bffe43 	ldbu	r2,-7(fp)
 2001ffc:	10803fe0 	cmpeqi	r2,r2,255
 2002000:	d8800015 	stw	r2,0(sp)
 2002004:	e13fff17 	ldw	r4,-4(fp)
 2002008:	014080b4 	movhi	r5,514
 200200c:	2968cb04 	addi	r5,r5,-23764
 2002010:	01801344 	movi	r6,77
 2002014:	01c080b4 	movhi	r7,514
 2002018:	39e8d004 	addi	r7,r7,-23744
 200201c:	20017340 	call	2001734 <CuAssert_Line>
	BOOL same = int16U_changed_by_threshold(CHANGED_BY_THRESHOLD_INPUT_3,CHANGED_BY_THRESHOLD_INPUT_1,APPS_VALUE_CHANGE_THRESHOLD);
 2002020:	01002584 	movi	r4,150
 2002024:	01401904 	movi	r5,100
 2002028:	01801904 	movi	r6,100
 200202c:	20029d00 	call	20029d0 <int16U_changed_by_threshold>
 2002030:	e0bffe05 	stb	r2,-8(fp)
	CuAssert(tc,"not changed", same == FALSE);
 2002034:	e0bffe03 	ldbu	r2,-8(fp)
 2002038:	1005003a 	cmpeq	r2,r2,zero
 200203c:	d8800015 	stw	r2,0(sp)
 2002040:	e13fff17 	ldw	r4,-4(fp)
 2002044:	014080b4 	movhi	r5,514
 2002048:	2968cb04 	addi	r5,r5,-23764
 200204c:	018013c4 	movi	r6,79
 2002050:	01c080b4 	movhi	r7,514
 2002054:	39e8d204 	addi	r7,r7,-23736
 2002058:	20017340 	call	2001734 <CuAssert_Line>
}
 200205c:	e037883a 	mov	sp,fp
 2002060:	dfc00117 	ldw	ra,4(sp)
 2002064:	df000017 	ldw	fp,0(sp)
 2002068:	dec00204 	addi	sp,sp,8
 200206c:	f800283a 	ret

02002070 <Test_int16U_differ_by_percent>:

void Test_int16U_differ_by_percent(CuTest* tc){
 2002070:	defffb04 	addi	sp,sp,-20
 2002074:	dfc00415 	stw	ra,16(sp)
 2002078:	df000315 	stw	fp,12(sp)
 200207c:	df000304 	addi	fp,sp,12
 2002080:	e13fff15 	stw	r4,-4(fp)
	BOOL bothZero = int16U_differ_by_percent(DIFFER_BY_PERCENT_INPUT_1,DIFFER_BY_PERCENT_INPUT_1,TPS_VALUE_DIFFERENCE_PERCENT,PERCENT_DIFF_ACCURACY);
 2002084:	0009883a 	mov	r4,zero
 2002088:	000b883a 	mov	r5,zero
 200208c:	01800284 	movi	r6,10
 2002090:	01d09004 	movi	r7,16960
 2002094:	2002a580 	call	2002a58 <int16U_differ_by_percent>
 2002098:	e0bffe85 	stb	r2,-6(fp)
	CuAssert(tc,"agree", bothZero == FALSE);
 200209c:	e0bffe83 	ldbu	r2,-6(fp)
 20020a0:	1005003a 	cmpeq	r2,r2,zero
 20020a4:	d8800015 	stw	r2,0(sp)
 20020a8:	e13fff17 	ldw	r4,-4(fp)
 20020ac:	014080b4 	movhi	r5,514
 20020b0:	2968cb04 	addi	r5,r5,-23764
 20020b4:	01801504 	movi	r6,84
 20020b8:	01c080b4 	movhi	r7,514
 20020bc:	39e8d504 	addi	r7,r7,-23724
 20020c0:	20017340 	call	2001734 <CuAssert_Line>
	BOOL smallerZero = int16U_differ_by_percent(DIFFER_BY_PERCENT_INPUT_1,DIFFER_BY_PERCENT_INPUT_4,TPS_VALUE_DIFFERENCE_PERCENT,PERCENT_DIFF_ACCURACY);
 20020c4:	0009883a 	mov	r4,zero
 20020c8:	014003c4 	movi	r5,15
 20020cc:	01800284 	movi	r6,10
 20020d0:	01d09004 	movi	r7,16960
 20020d4:	2002a580 	call	2002a58 <int16U_differ_by_percent>
 20020d8:	e0bffe45 	stb	r2,-7(fp)
	CuAssert(tc,"agree", smallerZero == TRUE);
 20020dc:	e0bffe43 	ldbu	r2,-7(fp)
 20020e0:	10803fe0 	cmpeqi	r2,r2,255
 20020e4:	d8800015 	stw	r2,0(sp)
 20020e8:	e13fff17 	ldw	r4,-4(fp)
 20020ec:	014080b4 	movhi	r5,514
 20020f0:	2968cb04 	addi	r5,r5,-23764
 20020f4:	01801584 	movi	r6,86
 20020f8:	01c080b4 	movhi	r7,514
 20020fc:	39e8d504 	addi	r7,r7,-23724
 2002100:	20017340 	call	2001734 <CuAssert_Line>
	BOOL twiceLarger = int16U_differ_by_percent(DIFFER_BY_PERCENT_INPUT_3,DIFFER_BY_PERCENT_INPUT_4,TPS_VALUE_DIFFERENCE_PERCENT,PERCENT_DIFF_ACCURACY);
 2002104:	01000284 	movi	r4,10
 2002108:	014003c4 	movi	r5,15
 200210c:	01800284 	movi	r6,10
 2002110:	01d09004 	movi	r7,16960
 2002114:	2002a580 	call	2002a58 <int16U_differ_by_percent>
 2002118:	e0bffe05 	stb	r2,-8(fp)
	CuAssert(tc,"not agree", twiceLarger == TRUE);
 200211c:	e0bffe03 	ldbu	r2,-8(fp)
 2002120:	10803fe0 	cmpeqi	r2,r2,255
 2002124:	d8800015 	stw	r2,0(sp)
 2002128:	e13fff17 	ldw	r4,-4(fp)
 200212c:	014080b4 	movhi	r5,514
 2002130:	2968cb04 	addi	r5,r5,-23764
 2002134:	01801604 	movi	r6,88
 2002138:	01c080b4 	movhi	r7,514
 200213c:	39e8d704 	addi	r7,r7,-23716
 2002140:	20017340 	call	2001734 <CuAssert_Line>
}
 2002144:	e037883a 	mov	sp,fp
 2002148:	dfc00117 	ldw	ra,4(sp)
 200214c:	df000017 	ldw	fp,0(sp)
 2002150:	dec00204 	addi	sp,sp,8
 2002154:	f800283a 	ret

02002158 <CuGetSuite>:

/*-------------------------------------------------------------------------*
 * main
 *-------------------------------------------------------------------------*/

CuSuite* CuGetSuite(void){
 2002158:	defffd04 	addi	sp,sp,-12
 200215c:	dfc00215 	stw	ra,8(sp)
 2002160:	df000115 	stw	fp,4(sp)
 2002164:	df000104 	addi	fp,sp,4
	CuSuite* suite = CuSuiteNew();
 2002168:	2001a980 	call	2001a98 <CuSuiteNew>
 200216c:	e0bfff15 	stw	r2,-4(fp)
//	SUITE_ADD_TEST(suite, Test_get_new_tps_reading_sem);
//	SUITE_ADD_TEST(suite, Test_get_motor_cmd_q);
//	SUITE_ADD_TEST(suite, Test_get_expected_tps_reading);
//	SUITE_ADD_TEST(suite, Test_set_new_motor_position);
//	SUITE_ADD_TEST(suite, Test_get_failure_msg_q);
	SUITE_ADD_TEST(suite, Test_int16U_changed_by_threshold);
 2002170:	010080b4 	movhi	r4,514
 2002174:	2128da04 	addi	r4,r4,-23704
 2002178:	01408034 	movhi	r5,512
 200217c:	2947e504 	addi	r5,r5,8084
 2002180:	20015180 	call	2001518 <CuTestNew>
 2002184:	100b883a 	mov	r5,r2
 2002188:	e13fff17 	ldw	r4,-4(fp)
 200218c:	2001b680 	call	2001b68 <CuSuiteAdd>
	SUITE_ADD_TEST(suite, Test_int16U_differ_by_percent);
 2002190:	010080b4 	movhi	r4,514
 2002194:	2128e304 	addi	r4,r4,-23668
 2002198:	01408034 	movhi	r5,512
 200219c:	29481c04 	addi	r5,r5,8304
 20021a0:	20015180 	call	2001518 <CuTestNew>
 20021a4:	100b883a 	mov	r5,r2
 20021a8:	e13fff17 	ldw	r4,-4(fp)
 20021ac:	2001b680 	call	2001b68 <CuSuiteAdd>

	return suite;
 20021b0:	e0bfff17 	ldw	r2,-4(fp)
}
 20021b4:	e037883a 	mov	sp,fp
 20021b8:	dfc00117 	ldw	ra,4(sp)
 20021bc:	df000017 	ldw	fp,0(sp)
 20021c0:	dec00204 	addi	sp,sp,8
 20021c4:	f800283a 	ret

020021c8 <run_all_unit_tests>:

int run_all_unit_tests(void){
 20021c8:	defffc04 	addi	sp,sp,-16
 20021cc:	dfc00315 	stw	ra,12(sp)
 20021d0:	df000215 	stw	fp,8(sp)
 20021d4:	df000204 	addi	fp,sp,8
	CuSuite* suite = CuSuiteNew();
 20021d8:	2001a980 	call	2001a98 <CuSuiteNew>
 20021dc:	e0bfff15 	stw	r2,-4(fp)
	CuString* output;
	CuSuiteAddSuite(suite, CuGetSuite());
 20021e0:	20021580 	call	2002158 <CuGetSuite>
 20021e4:	100b883a 	mov	r5,r2
 20021e8:	e13fff17 	ldw	r4,-4(fp)
 20021ec:	2001bfc0 	call	2001bfc <CuSuiteAddSuite>
	CuStringInit(output);
 20021f0:	e13ffe17 	ldw	r4,-8(fp)
 20021f4:	20011000 	call	2001100 <CuStringInit>
	CuSuiteRun(suite);
 20021f8:	e13fff17 	ldw	r4,-4(fp)
 20021fc:	2001c780 	call	2001c78 <CuSuiteRun>
	CuSuiteSummary(suite, output);
 2002200:	e13fff17 	ldw	r4,-4(fp)
 2002204:	e17ffe17 	ldw	r5,-8(fp)
 2002208:	2001d100 	call	2001d10 <CuSuiteSummary>
	CuSuiteDetails(suite, output);
 200220c:	e13fff17 	ldw	r4,-4(fp)
 2002210:	e17ffe17 	ldw	r5,-8(fp)
 2002214:	2001dc80 	call	2001dc8 <CuSuiteDetails>
	printf("%s\n", output->buffer);
 2002218:	e0bffe17 	ldw	r2,-8(fp)
 200221c:	11000217 	ldw	r4,8(r2)
 2002220:	20043740 	call	2004374 <puts>
	return suite->failCount;
 2002224:	e0bfff17 	ldw	r2,-4(fp)
 2002228:	10840117 	ldw	r2,4100(r2)
}
 200222c:	e037883a 	mov	sp,fp
 2002230:	dfc00117 	ldw	ra,4(sp)
 2002234:	df000017 	ldw	fp,0(sp)
 2002238:	dec00204 	addi	sp,sp,8
 200223c:	f800283a 	ret

02002240 <Test_pwm_gen>:

void Test_pwm_gen(INT16U period, INT8U duty){
 2002240:	defffc04 	addi	sp,sp,-16
 2002244:	dfc00315 	stw	ra,12(sp)
 2002248:	df000215 	stw	fp,8(sp)
 200224c:	df000204 	addi	fp,sp,8
 2002250:	e13ffe0d 	sth	r4,-8(fp)
 2002254:	e17fff05 	stb	r5,-4(fp)
	set_period(period);
 2002258:	e13ffe0b 	ldhu	r4,-8(fp)
 200225c:	2000c380 	call	2000c38 <set_period>
	set_duty_cycle(duty);
 2002260:	e13fff03 	ldbu	r4,-4(fp)
 2002264:	2000c700 	call	2000c70 <set_duty_cycle>
}
 2002268:	e037883a 	mov	sp,fp
 200226c:	dfc00117 	ldw	ra,4(sp)
 2002270:	df000017 	ldw	fp,0(sp)
 2002274:	dec00204 	addi	sp,sp,8
 2002278:	f800283a 	ret

0200227c <Test_pwm_gen_sweep>:

void Test_pwm_gen_sweep(void){
 200227c:	defffd04 	addi	sp,sp,-12
 2002280:	dfc00215 	stw	ra,8(sp)
 2002284:	df000115 	stw	fp,4(sp)
 2002288:	df000104 	addi	fp,sp,4
	INT16U period = PWM_TEST_PERIOD_START;
 200228c:	0080fa04 	movi	r2,1000
 2002290:	e0bfff8d 	sth	r2,-2(fp)
	while(period <= PWM_TEST_PERIOD_END){
 2002294:	00001106 	br	20022dc <Test_pwm_gen_sweep+0x60>
		INT8U duty_cycle = PWM_TEST_DUTY_START;
 2002298:	e03fff05 	stb	zero,-4(fp)
		while(duty_cycle <= PWM_TEST_DUTY_END){
 200229c:	00000906 	br	20022c4 <Test_pwm_gen_sweep+0x48>
			Test_pwm_gen(period, duty_cycle);
 20022a0:	e13fff8b 	ldhu	r4,-2(fp)
 20022a4:	e17fff03 	ldbu	r5,-4(fp)
 20022a8:	20022400 	call	2002240 <Test_pwm_gen>
			usleep(PWM_TEST_SLEEP_DURATION_US);
 20022ac:	01001334 	movhi	r4,76
 20022b0:	2112d004 	addi	r4,r4,19264
 20022b4:	200efa80 	call	200efa8 <usleep>
			duty_cycle += PWM_TEST_DUTY_INCREMENT;
 20022b8:	e0bfff03 	ldbu	r2,-4(fp)
 20022bc:	10800284 	addi	r2,r2,10
 20022c0:	e0bfff05 	stb	r2,-4(fp)

void Test_pwm_gen_sweep(void){
	INT16U period = PWM_TEST_PERIOD_START;
	while(period <= PWM_TEST_PERIOD_END){
		INT8U duty_cycle = PWM_TEST_DUTY_START;
		while(duty_cycle <= PWM_TEST_DUTY_END){
 20022c4:	e0bfff03 	ldbu	r2,-4(fp)
 20022c8:	10801970 	cmpltui	r2,r2,101
 20022cc:	103ff41e 	bne	r2,zero,20022a0 <Test_pwm_gen_sweep+0x24>
			Test_pwm_gen(period, duty_cycle);
			usleep(PWM_TEST_SLEEP_DURATION_US);
			duty_cycle += PWM_TEST_DUTY_INCREMENT;
		}
		period += PWM_TEST_PERIOD_INCREMENT;
 20022d0:	e0bfff8b 	ldhu	r2,-2(fp)
 20022d4:	1080fa04 	addi	r2,r2,1000
 20022d8:	e0bfff8d 	sth	r2,-2(fp)
	set_duty_cycle(duty);
}

void Test_pwm_gen_sweep(void){
	INT16U period = PWM_TEST_PERIOD_START;
	while(period <= PWM_TEST_PERIOD_END){
 20022dc:	e0ffff8b 	ldhu	r3,-2(fp)
 20022e0:	00ba9814 	movui	r2,60000
 20022e4:	10ffec2e 	bgeu	r2,r3,2002298 <Test_pwm_gen_sweep+0x1c>
			usleep(PWM_TEST_SLEEP_DURATION_US);
			duty_cycle += PWM_TEST_DUTY_INCREMENT;
		}
		period += PWM_TEST_PERIOD_INCREMENT;
	}
}
 20022e8:	e037883a 	mov	sp,fp
 20022ec:	dfc00117 	ldw	ra,4(sp)
 20022f0:	df000017 	ldw	fp,0(sp)
 20022f4:	dec00204 	addi	sp,sp,8
 20022f8:	f800283a 	ret

020022fc <throttle_data_init>:

INT16U RPM_gear_to_throttle_pos[MAX_SCALED_RPM + 1][NUM_GEARS + 1];

#define GET_GEAR_RATIO(GEAR)				get_gear_ratio(GEAR)

void throttle_data_init(){
 20022fc:	defff904 	addi	sp,sp,-28
 2002300:	dfc00615 	stw	ra,24(sp)
 2002304:	df000515 	stw	fp,20(sp)
 2002308:	dcc00415 	stw	r19,16(sp)
 200230c:	dc800315 	stw	r18,12(sp)
 2002310:	dc400215 	stw	r17,8(sp)
 2002314:	dc000115 	stw	r16,4(sp)
 2002318:	df000104 	addi	fp,sp,4
	INT8U i;
	INT8U j;
	throttle_angle_to_duty_cycle[0] = 0;
 200231c:	008080b4 	movhi	r2,514
 2002320:	1099de84 	addi	r2,r2,26490
 2002324:	10000005 	stb	zero,0(r2)
	for(i = 1; i < MAX_THROTTLE_DEG + 1; i++){
 2002328:	00800044 	movi	r2,1
 200232c:	e0bfff45 	stb	r2,-3(fp)
 2002330:	00001006 	br	2002374 <throttle_data_init+0x78>
		throttle_angle_to_duty_cycle[i] = throttle_angle_to_duty_cycle[i - 1] + PULSE_WIDTH_TO_DEG_INCREMENT;
 2002334:	e13fff43 	ldbu	r4,-3(fp)
 2002338:	e0bfff43 	ldbu	r2,-3(fp)
 200233c:	10ffffc4 	addi	r3,r2,-1
 2002340:	008080b4 	movhi	r2,514
 2002344:	1099de84 	addi	r2,r2,26490
 2002348:	10c5883a 	add	r2,r2,r3
 200234c:	10800003 	ldbu	r2,0(r2)
 2002350:	10800044 	addi	r2,r2,1
 2002354:	1007883a 	mov	r3,r2
 2002358:	008080b4 	movhi	r2,514
 200235c:	1099de84 	addi	r2,r2,26490
 2002360:	1105883a 	add	r2,r2,r4
 2002364:	10c00005 	stb	r3,0(r2)

void throttle_data_init(){
	INT8U i;
	INT8U j;
	throttle_angle_to_duty_cycle[0] = 0;
	for(i = 1; i < MAX_THROTTLE_DEG + 1; i++){
 2002368:	e0bfff43 	ldbu	r2,-3(fp)
 200236c:	10800044 	addi	r2,r2,1
 2002370:	e0bfff45 	stb	r2,-3(fp)
 2002374:	e0bfff43 	ldbu	r2,-3(fp)
 2002378:	108016f0 	cmpltui	r2,r2,91
 200237c:	103fed1e 	bne	r2,zero,2002334 <throttle_data_init+0x38>
		throttle_angle_to_duty_cycle[i] = throttle_angle_to_duty_cycle[i - 1] + PULSE_WIDTH_TO_DEG_INCREMENT;
	}
	RPM_gear_to_throttle_pos[0][0] = 0;
 2002380:	008080b4 	movhi	r2,514
 2002384:	10994604 	addi	r2,r2,25880
 2002388:	1000000d 	sth	zero,0(r2)
	RPM_gear_to_throttle_pos[0][1] = 0;
 200238c:	008080b4 	movhi	r2,514
 2002390:	10994604 	addi	r2,r2,25880
 2002394:	1000008d 	sth	zero,2(r2)
	RPM_gear_to_throttle_pos[0][2] = 0;
 2002398:	008080b4 	movhi	r2,514
 200239c:	10994604 	addi	r2,r2,25880
 20023a0:	1000010d 	sth	zero,4(r2)
	RPM_gear_to_throttle_pos[0][3] = 0;
 20023a4:	008080b4 	movhi	r2,514
 20023a8:	10994604 	addi	r2,r2,25880
 20023ac:	1000018d 	sth	zero,6(r2)
	RPM_gear_to_throttle_pos[0][4] = 0;
 20023b0:	008080b4 	movhi	r2,514
 20023b4:	10994604 	addi	r2,r2,25880
 20023b8:	1000020d 	sth	zero,8(r2)
	for(i = 1; i < MAX_SCALED_RPM + 1; i++){
 20023bc:	00800044 	movi	r2,1
 20023c0:	e0bfff45 	stb	r2,-3(fp)
 20023c4:	00002d06 	br	200247c <throttle_data_init+0x180>
		for(j = 1; j < NUM_GEARS + 1; j++){
 20023c8:	00800044 	movi	r2,1
 20023cc:	e0bfff05 	stb	r2,-4(fp)
 20023d0:	00002406 	br	2002464 <throttle_data_init+0x168>
			RPM_gear_to_throttle_pos[i][j] = RPM_gear_to_throttle_pos[i - 1][j - 1] + THROTTLE_INC_BY_100_RPM * get_gear_ratio(j) / 10;
 20023d4:	e4bfff43 	ldbu	r18,-3(fp)
 20023d8:	e4ffff03 	ldbu	r19,-4(fp)
 20023dc:	e0bfff43 	ldbu	r2,-3(fp)
 20023e0:	113fffc4 	addi	r4,r2,-1
 20023e4:	e0bfff03 	ldbu	r2,-4(fp)
 20023e8:	143fffc4 	addi	r16,r2,-1
 20023ec:	044080b4 	movhi	r17,514
 20023f0:	8c594604 	addi	r17,r17,25880
 20023f4:	01400144 	movi	r5,5
 20023f8:	20032ac0 	call	20032ac <__mulsi3>
 20023fc:	1405883a 	add	r2,r2,r16
 2002400:	1085883a 	add	r2,r2,r2
 2002404:	1445883a 	add	r2,r2,r17
 2002408:	1400000b 	ldhu	r16,0(r2)
 200240c:	e13fff03 	ldbu	r4,-4(fp)
 2002410:	2002b600 	call	2002b60 <get_gear_ratio>
 2002414:	11003fcc 	andi	r4,r2,255
 2002418:	01403744 	movi	r5,221
 200241c:	20032ac0 	call	20032ac <__mulsi3>
 2002420:	1009883a 	mov	r4,r2
 2002424:	01400284 	movi	r5,10
 2002428:	20031dc0 	call	20031dc <__divsi3>
 200242c:	8085883a 	add	r2,r16,r2
 2002430:	1021883a 	mov	r16,r2
 2002434:	044080b4 	movhi	r17,514
 2002438:	8c594604 	addi	r17,r17,25880
 200243c:	9009883a 	mov	r4,r18
 2002440:	01400144 	movi	r5,5
 2002444:	20032ac0 	call	20032ac <__mulsi3>
 2002448:	14c5883a 	add	r2,r2,r19
 200244c:	1085883a 	add	r2,r2,r2
 2002450:	1445883a 	add	r2,r2,r17
 2002454:	1400000d 	sth	r16,0(r2)
	RPM_gear_to_throttle_pos[0][1] = 0;
	RPM_gear_to_throttle_pos[0][2] = 0;
	RPM_gear_to_throttle_pos[0][3] = 0;
	RPM_gear_to_throttle_pos[0][4] = 0;
	for(i = 1; i < MAX_SCALED_RPM + 1; i++){
		for(j = 1; j < NUM_GEARS + 1; j++){
 2002458:	e0bfff03 	ldbu	r2,-4(fp)
 200245c:	10800044 	addi	r2,r2,1
 2002460:	e0bfff05 	stb	r2,-4(fp)
 2002464:	e0bfff03 	ldbu	r2,-4(fp)
 2002468:	10800170 	cmpltui	r2,r2,5
 200246c:	103fd91e 	bne	r2,zero,20023d4 <throttle_data_init+0xd8>
	RPM_gear_to_throttle_pos[0][0] = 0;
	RPM_gear_to_throttle_pos[0][1] = 0;
	RPM_gear_to_throttle_pos[0][2] = 0;
	RPM_gear_to_throttle_pos[0][3] = 0;
	RPM_gear_to_throttle_pos[0][4] = 0;
	for(i = 1; i < MAX_SCALED_RPM + 1; i++){
 2002470:	e0bfff43 	ldbu	r2,-3(fp)
 2002474:	10800044 	addi	r2,r2,1
 2002478:	e0bfff45 	stb	r2,-3(fp)
 200247c:	e0bfff43 	ldbu	r2,-3(fp)
 2002480:	10800f70 	cmpltui	r2,r2,61
 2002484:	103fd01e 	bne	r2,zero,20023c8 <throttle_data_init+0xcc>
		for(j = 1; j < NUM_GEARS + 1; j++){
			RPM_gear_to_throttle_pos[i][j] = RPM_gear_to_throttle_pos[i - 1][j - 1] + THROTTLE_INC_BY_100_RPM * get_gear_ratio(j) / 10;
		}
	}
}
 2002488:	e037883a 	mov	sp,fp
 200248c:	dfc00517 	ldw	ra,20(sp)
 2002490:	df000417 	ldw	fp,16(sp)
 2002494:	dcc00317 	ldw	r19,12(sp)
 2002498:	dc800217 	ldw	r18,8(sp)
 200249c:	dc400117 	ldw	r17,4(sp)
 20024a0:	dc000017 	ldw	r16,0(sp)
 20024a4:	dec00604 	addi	sp,sp,24
 20024a8:	f800283a 	ret

020024ac <get_duty_cycle_for_angle>:

INT8U get_duty_cycle_for_angle(INT8U angle){
 20024ac:	defffe04 	addi	sp,sp,-8
 20024b0:	df000115 	stw	fp,4(sp)
 20024b4:	df000104 	addi	fp,sp,4
 20024b8:	e13fff05 	stb	r4,-4(fp)
	if(angle > MAX_THROTTLE_DEG){
 20024bc:	e0bfff03 	ldbu	r2,-4(fp)
 20024c0:	108016f0 	cmpltui	r2,r2,91
 20024c4:	1000021e 	bne	r2,zero,20024d0 <get_duty_cycle_for_angle+0x24>
		angle = MAX_THROTTLE_DEG;
 20024c8:	00801684 	movi	r2,90
 20024cc:	e0bfff05 	stb	r2,-4(fp)
	}
	return throttle_angle_to_duty_cycle[angle];
 20024d0:	e0ffff03 	ldbu	r3,-4(fp)
 20024d4:	008080b4 	movhi	r2,514
 20024d8:	1099de84 	addi	r2,r2,26490
 20024dc:	10c5883a 	add	r2,r2,r3
 20024e0:	10800003 	ldbu	r2,0(r2)
 20024e4:	10803fcc 	andi	r2,r2,255
}
 20024e8:	e037883a 	mov	sp,fp
 20024ec:	df000017 	ldw	fp,0(sp)
 20024f0:	dec00104 	addi	sp,sp,4
 20024f4:	f800283a 	ret

020024f8 <get_throttle_pos_for_RPM_gear>:

INT16U get_throttle_pos_for_RPM_gear(INT8U gear, INT8U RPM_scaled){
 20024f8:	defffa04 	addi	sp,sp,-24
 20024fc:	dfc00515 	stw	ra,20(sp)
 2002500:	df000415 	stw	fp,16(sp)
 2002504:	dc400315 	stw	r17,12(sp)
 2002508:	dc000215 	stw	r16,8(sp)
 200250c:	df000204 	addi	fp,sp,8
 2002510:	e13ffe05 	stb	r4,-8(fp)
 2002514:	e17fff05 	stb	r5,-4(fp)
	if(RPM_scaled > MAX_SCALED_RPM){
 2002518:	e0bfff03 	ldbu	r2,-4(fp)
 200251c:	10800f70 	cmpltui	r2,r2,61
 2002520:	1000021e 	bne	r2,zero,200252c <get_throttle_pos_for_RPM_gear+0x34>
		RPM_scaled = MAX_SCALED_RPM;
 2002524:	00800f04 	movi	r2,60
 2002528:	e0bfff05 	stb	r2,-4(fp)
	}
	if(gear > NUM_GEARS){
 200252c:	e0bffe03 	ldbu	r2,-8(fp)
 2002530:	10800170 	cmpltui	r2,r2,5
 2002534:	1000021e 	bne	r2,zero,2002540 <get_throttle_pos_for_RPM_gear+0x48>
		gear = DEFAULT_GEAR;
 2002538:	00800084 	movi	r2,2
 200253c:	e0bffe05 	stb	r2,-8(fp)
	}
	return RPM_gear_to_throttle_pos[RPM_scaled][gear];
 2002540:	e13fff03 	ldbu	r4,-4(fp)
 2002544:	e43ffe03 	ldbu	r16,-8(fp)
 2002548:	044080b4 	movhi	r17,514
 200254c:	8c594604 	addi	r17,r17,25880
 2002550:	01400144 	movi	r5,5
 2002554:	20032ac0 	call	20032ac <__mulsi3>
 2002558:	1405883a 	add	r2,r2,r16
 200255c:	1085883a 	add	r2,r2,r2
 2002560:	1445883a 	add	r2,r2,r17
 2002564:	1080000b 	ldhu	r2,0(r2)
 2002568:	10bfffcc 	andi	r2,r2,65535
}
 200256c:	e037883a 	mov	sp,fp
 2002570:	dfc00317 	ldw	ra,12(sp)
 2002574:	df000217 	ldw	fp,8(sp)
 2002578:	dc400117 	ldw	r17,4(sp)
 200257c:	dc000017 	ldw	r16,0(sp)
 2002580:	dec00404 	addi	sp,sp,16
 2002584:	f800283a 	ret

02002588 <get_new_RPM_needed>:

INT16U get_new_RPM_needed(INT16U curr_RPM, INT8U curr_gear, INT8U new_gear){
 2002588:	defffa04 	addi	sp,sp,-24
 200258c:	dfc00515 	stw	ra,20(sp)
 2002590:	df000415 	stw	fp,16(sp)
 2002594:	df000404 	addi	fp,sp,16
 2002598:	e13ffd0d 	sth	r4,-12(fp)
 200259c:	e17ffe05 	stb	r5,-8(fp)
 20025a0:	e1bfff05 	stb	r6,-4(fp)
	INT8U curr_gear_ratio = get_gear_ratio(curr_gear);
 20025a4:	e13ffe03 	ldbu	r4,-8(fp)
 20025a8:	2002b600 	call	2002b60 <get_gear_ratio>
 20025ac:	e0bffc45 	stb	r2,-15(fp)
	INT8U new_gear_ratio = get_gear_ratio(new_gear);
 20025b0:	e13fff03 	ldbu	r4,-4(fp)
 20025b4:	2002b600 	call	2002b60 <get_gear_ratio>
 20025b8:	e0bffc05 	stb	r2,-16(fp)
	return ((INT16U)curr_RPM * new_gear_ratio / curr_gear_ratio)/10;
 20025bc:	e13ffd0b 	ldhu	r4,-12(fp)
 20025c0:	e17ffc03 	ldbu	r5,-16(fp)
 20025c4:	20032ac0 	call	20032ac <__mulsi3>
 20025c8:	1009883a 	mov	r4,r2
 20025cc:	e17ffc43 	ldbu	r5,-15(fp)
 20025d0:	20031dc0 	call	20031dc <__divsi3>
 20025d4:	1009883a 	mov	r4,r2
 20025d8:	01400284 	movi	r5,10
 20025dc:	20031dc0 	call	20031dc <__divsi3>
 20025e0:	10bfffcc 	andi	r2,r2,65535
}
 20025e4:	e037883a 	mov	sp,fp
 20025e8:	dfc00117 	ldw	ra,4(sp)
 20025ec:	df000017 	ldw	fp,0(sp)
 20025f0:	dec00204 	addi	sp,sp,8
 20025f4:	f800283a 	ret

020025f8 <tps_task>:
alt_up_de0_nano_adc_dev* adc;

alt_u32 tps_value_comp_callback(void* context);

/*  Task routine for interfacing with throttle position sensors */
void tps_task(void* pdata) {
 20025f8:	defff704 	addi	sp,sp,-36
 20025fc:	dfc00815 	stw	ra,32(sp)
 2002600:	df000715 	stw	fp,28(sp)
 2002604:	df000704 	addi	fp,sp,28
 2002608:	e13fff15 	stw	r4,-4(fp)

	INT8U err;

	adc = get_adc();
 200260c:	2000a980 	call	2000a98 <get_adc>
 2002610:	d0a70415 	stw	r2,-25584(gp)

	OS_EVENT *expected_tps_reading_q = get_expected_motor_pos_q();
 2002614:	20006680 	call	2000668 <get_expected_motor_pos_q>
 2002618:	e0bffd15 	stw	r2,-12(fp)

	failure_msg_q = get_failure_msg_q();
 200261c:	2000af80 	call	2000af8 <get_failure_msg_q>
 2002620:	d0a6ff15 	stw	r2,-25604(gp)

	tps_failure_flag = OSSemCreate(SEM_FLAG_NO_ERROR);
 2002624:	0009883a 	mov	r4,zero
 2002628:	2014d1c0 	call	2014d1c <OSSemCreate>
 200262c:	d0a71015 	stw	r2,-25536(gp)

	external_failure_flag = OSSemCreate(SEM_FLAG_NO_ERROR);
 2002630:	0009883a 	mov	r4,zero
 2002634:	2014d1c0 	call	2014d1c <OSSemCreate>
 2002638:	d0a70315 	stw	r2,-25588(gp)

	failure_resolved_flag = OSSemCreate(SEM_FLAG_ERROR_UNRESOLVED);
 200263c:	0009883a 	mov	r4,zero
 2002640:	2014d1c0 	call	2014d1c <OSSemCreate>
 2002644:	d0a70015 	stw	r2,-25600(gp)

	alt_alarm* tps_check_alarm;

	BOOL tps_check_timer_activated = FALSE;
 2002648:	e03ffb85 	stb	zero,-18(fp)

#if defined(RUN_AVG_TASK_TIME_TEST)
		INT16U expected_pos = 0;
#else
		//failure checking
		if(OSSemAccept(tps_failure_flag) != SEM_FLAG_NO_ERROR){
 200264c:	d1271017 	ldw	r4,-25536(gp)
 2002650:	2014c5c0 	call	2014c5c <OSSemAccept>
 2002654:	10bfffcc 	andi	r2,r2,65535
 2002658:	1005003a 	cmpeq	r2,r2,zero
 200265c:	10000b1e 	bne	r2,zero,200268c <tps_task+0x94>
			printf("possible tps failure, block tps_task\n");
 2002660:	010080b4 	movhi	r4,514
 2002664:	2128eb04 	addi	r4,r4,-23636
 2002668:	20043740 	call	2004374 <puts>
			tps_check_timer_activated = FALSE;
 200266c:	e03ffb85 	stb	zero,-18(fp)
			free(tps_check_alarm);
 2002670:	e13ffc17 	ldw	r4,-16(fp)
 2002674:	20038dc0 	call	20038dc <free>
			OSSemPend(failure_resolved_flag, Q_TIMEOUT_WAIT_FOREVER, &err);
 2002678:	d1270017 	ldw	r4,-25600(gp)
 200267c:	e1bffe04 	addi	r6,fp,-8
 2002680:	000b883a 	mov	r5,zero
 2002684:	20150d00 	call	20150d0 <OSSemPend>
 2002688:	00000c06 	br	20026bc <tps_task+0xc4>
		}else if(OSSemAccept(external_failure_flag) != SEM_FLAG_NO_ERROR){
 200268c:	d1270317 	ldw	r4,-25588(gp)
 2002690:	2014c5c0 	call	2014c5c <OSSemAccept>
 2002694:	10bfffcc 	andi	r2,r2,65535
 2002698:	1005003a 	cmpeq	r2,r2,zero
 200269c:	1000071e 	bne	r2,zero,20026bc <tps_task+0xc4>
			printf("External failure, block apps_motor_task\n");
 20026a0:	010080b4 	movhi	r4,514
 20026a4:	2128f504 	addi	r4,r4,-23596
 20026a8:	20043740 	call	2004374 <puts>
			OSSemPend(failure_resolved_flag, Q_TIMEOUT_WAIT_FOREVER, &err);
 20026ac:	d1270017 	ldw	r4,-25600(gp)
 20026b0:	e1bffe04 	addi	r6,fp,-8
 20026b4:	000b883a 	mov	r5,zero
 20026b8:	20150d00 	call	20150d0 <OSSemPend>
		}

		INT16U expected_pos = *(INT16U*) OSQPend(expected_tps_reading_q,
				Q_TIMEOUT_WAIT_FOREVER, &err);
 20026bc:	e1bffe04 	addi	r6,fp,-8
 20026c0:	e13ffd17 	ldw	r4,-12(fp)
 20026c4:	000b883a 	mov	r5,zero
 20026c8:	20140580 	call	2014058 <OSQPend>
 20026cc:	1080000b 	ldhu	r2,0(r2)
 20026d0:	e0bffb0d 	sth	r2,-20(fp)

		if (err)
 20026d4:	e0bffe03 	ldbu	r2,-8(fp)
 20026d8:	10803fcc 	andi	r2,r2,255
 20026dc:	1005003a 	cmpeq	r2,r2,zero
 20026e0:	1000051e 	bne	r2,zero,20026f8 <tps_task+0x100>
			disp_err(err, "Error pending on expected value q");
 20026e4:	e0bffe03 	ldbu	r2,-8(fp)
 20026e8:	11003fcc 	andi	r4,r2,255
 20026ec:	014080b4 	movhi	r5,514
 20026f0:	2968ff04 	addi	r5,r5,-23556
 20026f4:	2000ab80 	call	2000ab8 <disp_err>

		//failure checking
		if(OSSemAccept(tps_failure_flag) != SEM_FLAG_NO_ERROR){
 20026f8:	d1271017 	ldw	r4,-25536(gp)
 20026fc:	2014c5c0 	call	2014c5c <OSSemAccept>
 2002700:	10bfffcc 	andi	r2,r2,65535
 2002704:	1005003a 	cmpeq	r2,r2,zero
 2002708:	10000b1e 	bne	r2,zero,2002738 <tps_task+0x140>
			printf("possible tps failure, block tps_task\n");
 200270c:	010080b4 	movhi	r4,514
 2002710:	2128eb04 	addi	r4,r4,-23636
 2002714:	20043740 	call	2004374 <puts>
			tps_check_timer_activated = FALSE;
 2002718:	e03ffb85 	stb	zero,-18(fp)
			free(tps_check_alarm);
 200271c:	e13ffc17 	ldw	r4,-16(fp)
 2002720:	20038dc0 	call	20038dc <free>
			OSSemPend(failure_resolved_flag, Q_TIMEOUT_WAIT_FOREVER, &err);
 2002724:	d1270017 	ldw	r4,-25600(gp)
 2002728:	e1bffe04 	addi	r6,fp,-8
 200272c:	000b883a 	mov	r5,zero
 2002730:	20150d00 	call	20150d0 <OSSemPend>
 2002734:	00000c06 	br	2002768 <tps_task+0x170>
		}else if(OSSemAccept(external_failure_flag) != SEM_FLAG_NO_ERROR){
 2002738:	d1270317 	ldw	r4,-25588(gp)
 200273c:	2014c5c0 	call	2014c5c <OSSemAccept>
 2002740:	10bfffcc 	andi	r2,r2,65535
 2002744:	1005003a 	cmpeq	r2,r2,zero
 2002748:	1000071e 	bne	r2,zero,2002768 <tps_task+0x170>
			printf("External failure, block apps_motor_task\n");
 200274c:	010080b4 	movhi	r4,514
 2002750:	2128f504 	addi	r4,r4,-23596
 2002754:	20043740 	call	2004374 <puts>
			OSSemPend(failure_resolved_flag, Q_TIMEOUT_WAIT_FOREVER, &err);
 2002758:	d1270017 	ldw	r4,-25600(gp)
 200275c:	e1bffe04 	addi	r6,fp,-8
 2002760:	000b883a 	mov	r5,zero
 2002764:	20150d00 	call	20150d0 <OSSemPend>
		}
#endif

		curr_expected_pos = expected_pos;
 2002768:	e0bffb0b 	ldhu	r2,-20(fp)
 200276c:	d0a70f0d 	sth	r2,-25540(gp)

		alt_up_de0_nano_adc_update(adc);
 2002770:	d0a70417 	ldw	r2,-25584(gp)
 2002774:	10800a17 	ldw	r2,40(r2)
 2002778:	10000035 	stwio	zero,0(r2)
		INT16U tps_1_reading = alt_up_de0_nano_adc_read(adc, TPS_1_ADC_CHANNEL);
 200277c:	d1270417 	ldw	r4,-25584(gp)
 2002780:	01400084 	movi	r5,2
 2002784:	20187b40 	call	20187b4 <alt_up_de0_nano_adc_read>
 2002788:	e0bffa8d 	sth	r2,-22(fp)
		INT16U tps_2_reading = alt_up_de0_nano_adc_read(adc, TPS_2_ADC_CHANNEL);
 200278c:	d1270417 	ldw	r4,-25584(gp)
 2002790:	014000c4 	movi	r5,3
 2002794:	20187b40 	call	20187b4 <alt_up_de0_nano_adc_read>
 2002798:	e0bffa0d 	sth	r2,-24(fp)
		if (TPS_VALUE_MISMATCH(tps_1_reading, tps_2_reading)) {
 200279c:	e13ffa8b 	ldhu	r4,-22(fp)
 20027a0:	e17ffa0b 	ldhu	r5,-24(fp)
 20027a4:	01800284 	movi	r6,10
 20027a8:	01d09004 	movi	r7,16960
 20027ac:	2002a580 	call	2002a58 <int16U_differ_by_percent>
 20027b0:	10803fcc 	andi	r2,r2,255
 20027b4:	1005003a 	cmpeq	r2,r2,zero
 20027b8:	10000d1e 	bne	r2,zero,20027f0 <tps_task+0x1f8>
			if(tps_check_timer_activated == FALSE){
 20027bc:	e0bffb83 	ldbu	r2,-18(fp)
 20027c0:	1004c03a 	cmpne	r2,r2,zero
 20027c4:	1000331e 	bne	r2,zero,2002894 <tps_task+0x29c>
				tps_check_alarm = (alt_alarm*) malloc(sizeof(alt_alarm));
 20027c8:	01000604 	movi	r4,24
 20027cc:	20038f00 	call	20038f0 <malloc>
 20027d0:	e0bffc15 	stw	r2,-16(fp)
				alt_alarm_start(tps_check_alarm, SENSOR_VAL_COMP_DELAY_TICKS, &tps_value_comp_callback, NULL);
 20027d4:	e13ffc17 	ldw	r4,-16(fp)
 20027d8:	01401904 	movi	r5,100
 20027dc:	01808034 	movhi	r6,512
 20027e0:	318a2b04 	addi	r6,r6,10412
 20027e4:	000f883a 	mov	r7,zero
 20027e8:	200df180 	call	200df18 <alt_alarm_start>
 20027ec:	00002906 	br	2002894 <tps_task+0x29c>
			}
		}else{
			if(tps_check_timer_activated == TRUE){
 20027f0:	e0bffb83 	ldbu	r2,-18(fp)
 20027f4:	10803fd8 	cmpnei	r2,r2,255
 20027f8:	1000051e 	bne	r2,zero,2002810 <tps_task+0x218>
				tps_check_timer_activated = FALSE;
 20027fc:	e03ffb85 	stb	zero,-18(fp)
				alt_alarm_stop (tps_check_alarm);
 2002800:	e13ffc17 	ldw	r4,-16(fp)
 2002804:	200ee000 	call	200ee00 <alt_alarm_stop>
				free(tps_check_alarm);
 2002808:	e13ffc17 	ldw	r4,-16(fp)
 200280c:	20038dc0 	call	20038dc <free>
			}
			alt_up_de0_nano_adc_update(adc);
 2002810:	d0a70417 	ldw	r2,-25584(gp)
 2002814:	10800a17 	ldw	r2,40(r2)
 2002818:	10000035 	stwio	zero,0(r2)
			INT16U tps_1_reading = alt_up_de0_nano_adc_read(adc, TPS_1_ADC_CHANNEL);
 200281c:	d1270417 	ldw	r4,-25584(gp)
 2002820:	01400084 	movi	r5,2
 2002824:	20187b40 	call	20187b4 <alt_up_de0_nano_adc_read>
 2002828:	e0bff98d 	sth	r2,-26(fp)
			INT16U tps_2_reading = alt_up_de0_nano_adc_read(adc, TPS_2_ADC_CHANNEL);
 200282c:	d1270417 	ldw	r4,-25584(gp)
 2002830:	014000c4 	movi	r5,3
 2002834:	20187b40 	call	20187b4 <alt_up_de0_nano_adc_read>
 2002838:	e0bff90d 	sth	r2,-28(fp)
			if (TPS_VALUE_DIFFER_FROM_EXPECTED(tps_2_reading, curr_expected_pos)
 200283c:	e13ff90b 	ldhu	r4,-28(fp)
 2002840:	d0a70f0b 	ldhu	r2,-25540(gp)
 2002844:	117fffcc 	andi	r5,r2,65535
 2002848:	01800c84 	movi	r6,50
 200284c:	20029d00 	call	20029d0 <int16U_changed_by_threshold>
 2002850:	10803fcc 	andi	r2,r2,255
 2002854:	1004c03a 	cmpne	r2,r2,zero
 2002858:	1000081e 	bne	r2,zero,200287c <tps_task+0x284>
 200285c:	e13ff98b 	ldhu	r4,-26(fp)
 2002860:	d0a70f0b 	ldhu	r2,-25540(gp)
 2002864:	117fffcc 	andi	r5,r2,65535
 2002868:	01800c84 	movi	r6,50
 200286c:	20029d00 	call	20029d0 <int16U_changed_by_threshold>
 2002870:	10803fcc 	andi	r2,r2,255
 2002874:	1005003a 	cmpeq	r2,r2,zero
 2002878:	1000061e 	bne	r2,zero,2002894 <tps_task+0x29c>
					|| TPS_VALUE_DIFFER_FROM_EXPECTED(tps_1_reading, curr_expected_pos)) {
				OSSemPost(get_motor_failure_flag());
 200287c:	20008000 	call	2000800 <get_motor_failure_flag>
 2002880:	1009883a 	mov	r4,r2
 2002884:	20154c80 	call	20154c8 <OSSemPost>
				OSQPost(failure_msg_q, (void*) ERR_EXPECTED_THROTTLE_POS_MISMATCH);
 2002888:	d126ff17 	ldw	r4,-25604(gp)
 200288c:	01400044 	movi	r5,1
 2002890:	20144f40 	call	20144f4 <OSQPost>
		if(iteration_count % AVG_ITERATION == 0){
			end_tick = alt_timestamp();
			printf("t%d:%d\n", iteration_count, (end_tick - start_tick)/iteration_count);
		}
#endif
		OSTimeDlyHMSM(TPS_TASK_DELAY_HOURS, TPS_TASK_DELAY_MINUTES,
 2002894:	0009883a 	mov	r4,zero
 2002898:	000b883a 	mov	r5,zero
 200289c:	000d883a 	mov	r6,zero
 20028a0:	01c00284 	movi	r7,10
 20028a4:	20173b00 	call	20173b0 <OSTimeDlyHMSM>
				TPS_TASK_DELAY_SECONDS, TPS_TASK_DELAY_MILLISEC);
	}
 20028a8:	003f6806 	br	200264c <tps_task+0x54>

020028ac <tps_value_comp_callback>:
}

/* Callback function to check TPS agreement position */
alt_u32 tps_value_comp_callback(void* context){
 20028ac:	defffc04 	addi	sp,sp,-16
 20028b0:	dfc00315 	stw	ra,12(sp)
 20028b4:	df000215 	stw	fp,8(sp)
 20028b8:	df000204 	addi	fp,sp,8
 20028bc:	e13fff15 	stw	r4,-4(fp)
	alt_up_de0_nano_adc_update(adc);
 20028c0:	d0a70417 	ldw	r2,-25584(gp)
 20028c4:	10800a17 	ldw	r2,40(r2)
 20028c8:	10000035 	stwio	zero,0(r2)
	INT16U tps_1_reading = alt_up_de0_nano_adc_read(adc, TPS_1_ADC_CHANNEL);
 20028cc:	d1270417 	ldw	r4,-25584(gp)
 20028d0:	01400084 	movi	r5,2
 20028d4:	20187b40 	call	20187b4 <alt_up_de0_nano_adc_read>
 20028d8:	e0bffe8d 	sth	r2,-6(fp)
	INT16U tps_2_reading = alt_up_de0_nano_adc_read(adc, TPS_2_ADC_CHANNEL);
 20028dc:	d1270417 	ldw	r4,-25584(gp)
 20028e0:	014000c4 	movi	r5,3
 20028e4:	20187b40 	call	20187b4 <alt_up_de0_nano_adc_read>
 20028e8:	e0bffe0d 	sth	r2,-8(fp)
	if (TPS_VALUE_MISMATCH(tps_1_reading, tps_2_reading)) {
 20028ec:	e13ffe8b 	ldhu	r4,-6(fp)
 20028f0:	e17ffe0b 	ldhu	r5,-8(fp)
 20028f4:	01800284 	movi	r6,10
 20028f8:	01d09004 	movi	r7,16960
 20028fc:	2002a580 	call	2002a58 <int16U_differ_by_percent>
 2002900:	10803fcc 	andi	r2,r2,255
 2002904:	1005003a 	cmpeq	r2,r2,zero
 2002908:	1000051e 	bne	r2,zero,2002920 <tps_value_comp_callback+0x74>
		OSSemPost(tps_failure_flag);
 200290c:	d1271017 	ldw	r4,-25536(gp)
 2002910:	20154c80 	call	20154c8 <OSSemPost>
		OSQPost(failure_msg_q, (void*) ERR_TPS_READING_MISMATCH);
 2002914:	d126ff17 	ldw	r4,-25604(gp)
 2002918:	014000c4 	movi	r5,3
 200291c:	20144f40 	call	20144f4 <OSQPost>
	}
	if (TPS_VALUE_DIFFER_FROM_EXPECTED(tps_2_reading, curr_expected_pos)
 2002920:	e13ffe0b 	ldhu	r4,-8(fp)
 2002924:	d0a70f0b 	ldhu	r2,-25540(gp)
 2002928:	117fffcc 	andi	r5,r2,65535
 200292c:	01800c84 	movi	r6,50
 2002930:	20029d00 	call	20029d0 <int16U_changed_by_threshold>
 2002934:	10803fcc 	andi	r2,r2,255
 2002938:	1004c03a 	cmpne	r2,r2,zero
 200293c:	1000081e 	bne	r2,zero,2002960 <tps_value_comp_callback+0xb4>
 2002940:	e13ffe8b 	ldhu	r4,-6(fp)
 2002944:	d0a70f0b 	ldhu	r2,-25540(gp)
 2002948:	117fffcc 	andi	r5,r2,65535
 200294c:	01800c84 	movi	r6,50
 2002950:	20029d00 	call	20029d0 <int16U_changed_by_threshold>
 2002954:	10803fcc 	andi	r2,r2,255
 2002958:	1005003a 	cmpeq	r2,r2,zero
 200295c:	1000061e 	bne	r2,zero,2002978 <tps_value_comp_callback+0xcc>
			|| TPS_VALUE_DIFFER_FROM_EXPECTED(tps_1_reading, curr_expected_pos)) {
		OSSemPost(get_motor_failure_flag());
 2002960:	20008000 	call	2000800 <get_motor_failure_flag>
 2002964:	1009883a 	mov	r4,r2
 2002968:	20154c80 	call	20154c8 <OSSemPost>
		OSQPost(failure_msg_q, (void*) ERR_EXPECTED_THROTTLE_POS_MISMATCH);
 200296c:	d126ff17 	ldw	r4,-25604(gp)
 2002970:	01400044 	movi	r5,1
 2002974:	20144f40 	call	20144f4 <OSQPost>
	}
	return 0;
 2002978:	0005883a 	mov	r2,zero
}
 200297c:	e037883a 	mov	sp,fp
 2002980:	dfc00117 	ldw	ra,4(sp)
 2002984:	df000017 	ldw	fp,0(sp)
 2002988:	dec00204 	addi	sp,sp,8
 200298c:	f800283a 	ret

02002990 <get_tps_task_failure_resolved_flag>:

OS_EVENT* get_tps_task_failure_resolved_flag(){
 2002990:	deffff04 	addi	sp,sp,-4
 2002994:	df000015 	stw	fp,0(sp)
 2002998:	d839883a 	mov	fp,sp
	return failure_resolved_flag;
 200299c:	d0a70017 	ldw	r2,-25600(gp)
}
 20029a0:	e037883a 	mov	sp,fp
 20029a4:	df000017 	ldw	fp,0(sp)
 20029a8:	dec00104 	addi	sp,sp,4
 20029ac:	f800283a 	ret

020029b0 <get_tps_task_external_failure_flag>:

OS_EVENT* get_tps_task_external_failure_flag(){
 20029b0:	deffff04 	addi	sp,sp,-4
 20029b4:	df000015 	stw	fp,0(sp)
 20029b8:	d839883a 	mov	fp,sp
	return external_failure_flag;
 20029bc:	d0a70317 	ldw	r2,-25588(gp)
}
 20029c0:	e037883a 	mov	sp,fp
 20029c4:	df000017 	ldw	fp,0(sp)
 20029c8:	dec00104 	addi	sp,sp,4
 20029cc:	f800283a 	ret

020029d0 <int16U_changed_by_threshold>:

#include "util.h"

/* Simple function to check if input is changed from last_value by at least threshold amount*/
BOOL int16U_changed_by_threshold(INT16U input, INT16U last_value,
		INT16U threshold) {
 20029d0:	defffb04 	addi	sp,sp,-20
 20029d4:	df000415 	stw	fp,16(sp)
 20029d8:	df000404 	addi	fp,sp,16
 20029dc:	e13ffc0d 	sth	r4,-16(fp)
 20029e0:	e17ffd0d 	sth	r5,-12(fp)
 20029e4:	e1bffe0d 	sth	r6,-8(fp)

	if (input > last_value && input - last_value > threshold)
 20029e8:	e0fffc0b 	ldhu	r3,-16(fp)
 20029ec:	e0bffd0b 	ldhu	r2,-12(fp)
 20029f0:	10c0082e 	bgeu	r2,r3,2002a14 <int16U_changed_by_threshold+0x44>
 20029f4:	e0fffc0b 	ldhu	r3,-16(fp)
 20029f8:	e0bffd0b 	ldhu	r2,-12(fp)
 20029fc:	1887c83a 	sub	r3,r3,r2
 2002a00:	e0bffe0b 	ldhu	r2,-8(fp)
 2002a04:	10c0030e 	bge	r2,r3,2002a14 <int16U_changed_by_threshold+0x44>
		return TRUE;
 2002a08:	00803fc4 	movi	r2,255
 2002a0c:	e0bfff15 	stw	r2,-4(fp)
 2002a10:	00000c06 	br	2002a44 <int16U_changed_by_threshold+0x74>

	if (last_value > input && last_value - input > threshold)
 2002a14:	e0fffd0b 	ldhu	r3,-12(fp)
 2002a18:	e0bffc0b 	ldhu	r2,-16(fp)
 2002a1c:	10c0082e 	bgeu	r2,r3,2002a40 <int16U_changed_by_threshold+0x70>
 2002a20:	e0fffd0b 	ldhu	r3,-12(fp)
 2002a24:	e0bffc0b 	ldhu	r2,-16(fp)
 2002a28:	1887c83a 	sub	r3,r3,r2
 2002a2c:	e0bffe0b 	ldhu	r2,-8(fp)
 2002a30:	10c0030e 	bge	r2,r3,2002a40 <int16U_changed_by_threshold+0x70>
		return TRUE;
 2002a34:	00803fc4 	movi	r2,255
 2002a38:	e0bfff15 	stw	r2,-4(fp)
 2002a3c:	00000106 	br	2002a44 <int16U_changed_by_threshold+0x74>

	return FALSE;
 2002a40:	e03fff15 	stw	zero,-4(fp)
 2002a44:	e0bfff17 	ldw	r2,-4(fp)
}
 2002a48:	e037883a 	mov	sp,fp
 2002a4c:	df000017 	ldw	fp,0(sp)
 2002a50:	dec00104 	addi	sp,sp,4
 2002a54:	f800283a 	ret

02002a58 <int16U_differ_by_percent>:
 * percent is input as an integer and it's accurate to
 * for example, to check 10 percent, input number 10
 * the actual accuracy is defined by PERCENT_DIFF_ACCURACY
 */
BOOL int16U_differ_by_percent(INT16U src1, INT16U src2, INT16U percent,
		INT16U accuracy) {
 2002a58:	defff404 	addi	sp,sp,-48
 2002a5c:	dfc00b15 	stw	ra,44(sp)
 2002a60:	df000a15 	stw	fp,40(sp)
 2002a64:	df000a04 	addi	fp,sp,40
 2002a68:	e13ffb0d 	sth	r4,-20(fp)
 2002a6c:	e17ffc0d 	sth	r5,-16(fp)
 2002a70:	e1bffd0d 	sth	r6,-12(fp)
 2002a74:	e1fffe0d 	sth	r7,-8(fp)

	INT16U larger;
	INT16U smaller;

	if (src1 > src2) {
 2002a78:	e0fffb0b 	ldhu	r3,-20(fp)
 2002a7c:	e0bffc0b 	ldhu	r2,-16(fp)
 2002a80:	10c0052e 	bgeu	r2,r3,2002a98 <int16U_differ_by_percent+0x40>
		larger = src1;
 2002a84:	e0bffb0b 	ldhu	r2,-20(fp)
 2002a88:	e0bffa8d 	sth	r2,-22(fp)
		smaller = src2;
 2002a8c:	e0bffc0b 	ldhu	r2,-16(fp)
 2002a90:	e0bffa0d 	sth	r2,-24(fp)
 2002a94:	00000406 	br	2002aa8 <int16U_differ_by_percent+0x50>
	} else {
		larger = src2;
 2002a98:	e0bffc0b 	ldhu	r2,-16(fp)
 2002a9c:	e0bffa8d 	sth	r2,-22(fp)
		smaller = src1;
 2002aa0:	e0bffb0b 	ldhu	r2,-20(fp)
 2002aa4:	e0bffa0d 	sth	r2,-24(fp)
	}
	if (larger == 0)
 2002aa8:	e0bffa8b 	ldhu	r2,-22(fp)
 2002aac:	1004c03a 	cmpne	r2,r2,zero
 2002ab0:	1000021e 	bne	r2,zero,2002abc <int16U_differ_by_percent+0x64>
		return FALSE;
 2002ab4:	e03fff15 	stw	zero,-4(fp)
 2002ab8:	00002306 	br	2002b48 <int16U_differ_by_percent+0xf0>
	INT32U diff = larger - smaller;
 2002abc:	e0fffa8b 	ldhu	r3,-22(fp)
 2002ac0:	e0bffa0b 	ldhu	r2,-24(fp)
 2002ac4:	1885c83a 	sub	r2,r3,r2
 2002ac8:	e0bff915 	stw	r2,-28(fp)
	INT32U avg = (larger + smaller) >> 1;
 2002acc:	e0fffa8b 	ldhu	r3,-22(fp)
 2002ad0:	e0bffa0b 	ldhu	r2,-24(fp)
 2002ad4:	1885883a 	add	r2,r3,r2
 2002ad8:	1005d07a 	srai	r2,r2,1
 2002adc:	e0bff815 	stw	r2,-32(fp)
	if(avg == 0)
 2002ae0:	e0bff817 	ldw	r2,-32(fp)
 2002ae4:	1004c03a 	cmpne	r2,r2,zero
 2002ae8:	1000021e 	bne	r2,zero,2002af4 <int16U_differ_by_percent+0x9c>
		return FALSE;
 2002aec:	e03fff15 	stw	zero,-4(fp)
 2002af0:	00001506 	br	2002b48 <int16U_differ_by_percent+0xf0>
	INT32U result = (diff * accuracy) / avg;
 2002af4:	e13ffe0b 	ldhu	r4,-8(fp)
 2002af8:	e17ff917 	ldw	r5,-28(fp)
 2002afc:	20032ac0 	call	20032ac <__mulsi3>
 2002b00:	1009883a 	mov	r4,r2
 2002b04:	e17ff817 	ldw	r5,-32(fp)
 2002b08:	200329c0 	call	200329c <__udivsi3>
 2002b0c:	e0bff715 	stw	r2,-36(fp)
	INT32U threshold = percent * accuracy / 100;
 2002b10:	e13ffd0b 	ldhu	r4,-12(fp)
 2002b14:	e17ffe0b 	ldhu	r5,-8(fp)
 2002b18:	20032ac0 	call	20032ac <__mulsi3>
 2002b1c:	1009883a 	mov	r4,r2
 2002b20:	01401904 	movi	r5,100
 2002b24:	20031dc0 	call	20031dc <__divsi3>
 2002b28:	e0bff615 	stw	r2,-40(fp)
	if (result <= threshold)
 2002b2c:	e0fff717 	ldw	r3,-36(fp)
 2002b30:	e0bff617 	ldw	r2,-40(fp)
 2002b34:	10c00236 	bltu	r2,r3,2002b40 <int16U_differ_by_percent+0xe8>
		return FALSE;
 2002b38:	e03fff15 	stw	zero,-4(fp)
 2002b3c:	00000206 	br	2002b48 <int16U_differ_by_percent+0xf0>
	else
		return TRUE;
 2002b40:	00803fc4 	movi	r2,255
 2002b44:	e0bfff15 	stw	r2,-4(fp)
 2002b48:	e0bfff17 	ldw	r2,-4(fp)
}
 2002b4c:	e037883a 	mov	sp,fp
 2002b50:	dfc00117 	ldw	ra,4(sp)
 2002b54:	df000017 	ldw	fp,0(sp)
 2002b58:	dec00204 	addi	sp,sp,8
 2002b5c:	f800283a 	ret

02002b60 <get_gear_ratio>:

INT8U get_gear_ratio(INT8U gear){
 2002b60:	defffd04 	addi	sp,sp,-12
 2002b64:	df000215 	stw	fp,8(sp)
 2002b68:	df000204 	addi	fp,sp,8
 2002b6c:	e13ffe05 	stb	r4,-8(fp)
	if(gear == 1){
 2002b70:	e0bffe03 	ldbu	r2,-8(fp)
 2002b74:	10800058 	cmpnei	r2,r2,1
 2002b78:	1000031e 	bne	r2,zero,2002b88 <get_gear_ratio+0x28>
		return GEAR_RATIO_1ST;
 2002b7c:	00800484 	movi	r2,18
 2002b80:	e0bfff15 	stw	r2,-4(fp)
 2002b84:	00000e06 	br	2002bc0 <get_gear_ratio+0x60>
	}else if(gear == 2){
 2002b88:	e0bffe03 	ldbu	r2,-8(fp)
 2002b8c:	10800098 	cmpnei	r2,r2,2
 2002b90:	1000031e 	bne	r2,zero,2002ba0 <get_gear_ratio+0x40>
		return GEAR_RATIO_2ND;
 2002b94:	00800304 	movi	r2,12
 2002b98:	e0bfff15 	stw	r2,-4(fp)
 2002b9c:	00000806 	br	2002bc0 <get_gear_ratio+0x60>
	}else if(gear == 4){
 2002ba0:	e0bffe03 	ldbu	r2,-8(fp)
 2002ba4:	10800118 	cmpnei	r2,r2,4
 2002ba8:	1000031e 	bne	r2,zero,2002bb8 <get_gear_ratio+0x58>
		return GEAR_RATIO_4TH;
 2002bac:	00800204 	movi	r2,8
 2002bb0:	e0bfff15 	stw	r2,-4(fp)
 2002bb4:	00000206 	br	2002bc0 <get_gear_ratio+0x60>
	}else{
		return GEAR_RATIO_3RD;
 2002bb8:	00800284 	movi	r2,10
 2002bbc:	e0bfff15 	stw	r2,-4(fp)
 2002bc0:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 2002bc4:	e037883a 	mov	sp,fp
 2002bc8:	df000017 	ldw	fp,0(sp)
 2002bcc:	dec00104 	addi	sp,sp,4
 2002bd0:	f800283a 	ret

02002bd4 <_fpadd_parts>:
 2002bd4:	defff804 	addi	sp,sp,-32
 2002bd8:	dcc00315 	stw	r19,12(sp)
 2002bdc:	2027883a 	mov	r19,r4
 2002be0:	21000017 	ldw	r4,0(r4)
 2002be4:	00c00044 	movi	r3,1
 2002be8:	dd400515 	stw	r21,20(sp)
 2002bec:	dd000415 	stw	r20,16(sp)
 2002bf0:	ddc00715 	stw	r23,28(sp)
 2002bf4:	dd800615 	stw	r22,24(sp)
 2002bf8:	dc800215 	stw	r18,8(sp)
 2002bfc:	dc400115 	stw	r17,4(sp)
 2002c00:	dc000015 	stw	r16,0(sp)
 2002c04:	282b883a 	mov	r21,r5
 2002c08:	3029883a 	mov	r20,r6
 2002c0c:	1900632e 	bgeu	r3,r4,2002d9c <_fpadd_parts+0x1c8>
 2002c10:	28800017 	ldw	r2,0(r5)
 2002c14:	1880812e 	bgeu	r3,r2,2002e1c <_fpadd_parts+0x248>
 2002c18:	00c00104 	movi	r3,4
 2002c1c:	20c0dc26 	beq	r4,r3,2002f90 <_fpadd_parts+0x3bc>
 2002c20:	10c07e26 	beq	r2,r3,2002e1c <_fpadd_parts+0x248>
 2002c24:	00c00084 	movi	r3,2
 2002c28:	10c06726 	beq	r2,r3,2002dc8 <_fpadd_parts+0x1f4>
 2002c2c:	20c07b26 	beq	r4,r3,2002e1c <_fpadd_parts+0x248>
 2002c30:	9dc00217 	ldw	r23,8(r19)
 2002c34:	28c00217 	ldw	r3,8(r5)
 2002c38:	9c400317 	ldw	r17,12(r19)
 2002c3c:	2bc00317 	ldw	r15,12(r5)
 2002c40:	b8cdc83a 	sub	r6,r23,r3
 2002c44:	9c800417 	ldw	r18,16(r19)
 2002c48:	2c000417 	ldw	r16,16(r5)
 2002c4c:	3009883a 	mov	r4,r6
 2002c50:	30009716 	blt	r6,zero,2002eb0 <_fpadd_parts+0x2dc>
 2002c54:	00800fc4 	movi	r2,63
 2002c58:	11806b16 	blt	r2,r6,2002e08 <_fpadd_parts+0x234>
 2002c5c:	0100a40e 	bge	zero,r4,2002ef0 <_fpadd_parts+0x31c>
 2002c60:	35bff804 	addi	r22,r6,-32
 2002c64:	b000bc16 	blt	r22,zero,2002f58 <_fpadd_parts+0x384>
 2002c68:	8596d83a 	srl	r11,r16,r22
 2002c6c:	0019883a 	mov	r12,zero
 2002c70:	0013883a 	mov	r9,zero
 2002c74:	01000044 	movi	r4,1
 2002c78:	0015883a 	mov	r10,zero
 2002c7c:	b000be16 	blt	r22,zero,2002f78 <_fpadd_parts+0x3a4>
 2002c80:	2590983a 	sll	r8,r4,r22
 2002c84:	000f883a 	mov	r7,zero
 2002c88:	00bfffc4 	movi	r2,-1
 2002c8c:	3889883a 	add	r4,r7,r2
 2002c90:	408b883a 	add	r5,r8,r2
 2002c94:	21cd803a 	cmpltu	r6,r4,r7
 2002c98:	314b883a 	add	r5,r6,r5
 2002c9c:	7904703a 	and	r2,r15,r4
 2002ca0:	8146703a 	and	r3,r16,r5
 2002ca4:	10c4b03a 	or	r2,r2,r3
 2002ca8:	10000226 	beq	r2,zero,2002cb4 <_fpadd_parts+0xe0>
 2002cac:	02400044 	movi	r9,1
 2002cb0:	0015883a 	mov	r10,zero
 2002cb4:	5a5eb03a 	or	r15,r11,r9
 2002cb8:	62a0b03a 	or	r16,r12,r10
 2002cbc:	99400117 	ldw	r5,4(r19)
 2002cc0:	a8800117 	ldw	r2,4(r21)
 2002cc4:	28806e26 	beq	r5,r2,2002e80 <_fpadd_parts+0x2ac>
 2002cc8:	28006626 	beq	r5,zero,2002e64 <_fpadd_parts+0x290>
 2002ccc:	7c45c83a 	sub	r2,r15,r17
 2002cd0:	7889803a 	cmpltu	r4,r15,r2
 2002cd4:	8487c83a 	sub	r3,r16,r18
 2002cd8:	1909c83a 	sub	r4,r3,r4
 2002cdc:	100d883a 	mov	r6,r2
 2002ce0:	200f883a 	mov	r7,r4
 2002ce4:	38007716 	blt	r7,zero,2002ec4 <_fpadd_parts+0x2f0>
 2002ce8:	a5c00215 	stw	r23,8(r20)
 2002cec:	a1c00415 	stw	r7,16(r20)
 2002cf0:	a0000115 	stw	zero,4(r20)
 2002cf4:	a1800315 	stw	r6,12(r20)
 2002cf8:	a2000317 	ldw	r8,12(r20)
 2002cfc:	a2400417 	ldw	r9,16(r20)
 2002d00:	00bfffc4 	movi	r2,-1
 2002d04:	408b883a 	add	r5,r8,r2
 2002d08:	2a09803a 	cmpltu	r4,r5,r8
 2002d0c:	488d883a 	add	r6,r9,r2
 2002d10:	01c40034 	movhi	r7,4096
 2002d14:	39ffffc4 	addi	r7,r7,-1
 2002d18:	218d883a 	add	r6,r4,r6
 2002d1c:	39801736 	bltu	r7,r6,2002d7c <_fpadd_parts+0x1a8>
 2002d20:	31c06526 	beq	r6,r7,2002eb8 <_fpadd_parts+0x2e4>
 2002d24:	a3000217 	ldw	r12,8(r20)
 2002d28:	4209883a 	add	r4,r8,r8
 2002d2c:	00bfffc4 	movi	r2,-1
 2002d30:	220f803a 	cmpltu	r7,r4,r8
 2002d34:	4a4b883a 	add	r5,r9,r9
 2002d38:	394f883a 	add	r7,r7,r5
 2002d3c:	2095883a 	add	r10,r4,r2
 2002d40:	3897883a 	add	r11,r7,r2
 2002d44:	510d803a 	cmpltu	r6,r10,r4
 2002d48:	6099883a 	add	r12,r12,r2
 2002d4c:	32d7883a 	add	r11,r6,r11
 2002d50:	00840034 	movhi	r2,4096
 2002d54:	10bfffc4 	addi	r2,r2,-1
 2002d58:	2011883a 	mov	r8,r4
 2002d5c:	3813883a 	mov	r9,r7
 2002d60:	a1000315 	stw	r4,12(r20)
 2002d64:	a1c00415 	stw	r7,16(r20)
 2002d68:	a3000215 	stw	r12,8(r20)
 2002d6c:	12c00336 	bltu	r2,r11,2002d7c <_fpadd_parts+0x1a8>
 2002d70:	58bfed1e 	bne	r11,r2,2002d28 <_fpadd_parts+0x154>
 2002d74:	00bfff84 	movi	r2,-2
 2002d78:	12bfeb2e 	bgeu	r2,r10,2002d28 <_fpadd_parts+0x154>
 2002d7c:	a2800417 	ldw	r10,16(r20)
 2002d80:	008000c4 	movi	r2,3
 2002d84:	00c80034 	movhi	r3,8192
 2002d88:	18ffffc4 	addi	r3,r3,-1
 2002d8c:	a2400317 	ldw	r9,12(r20)
 2002d90:	a0800015 	stw	r2,0(r20)
 2002d94:	1a802336 	bltu	r3,r10,2002e24 <_fpadd_parts+0x250>
 2002d98:	a027883a 	mov	r19,r20
 2002d9c:	9805883a 	mov	r2,r19
 2002da0:	ddc00717 	ldw	r23,28(sp)
 2002da4:	dd800617 	ldw	r22,24(sp)
 2002da8:	dd400517 	ldw	r21,20(sp)
 2002dac:	dd000417 	ldw	r20,16(sp)
 2002db0:	dcc00317 	ldw	r19,12(sp)
 2002db4:	dc800217 	ldw	r18,8(sp)
 2002db8:	dc400117 	ldw	r17,4(sp)
 2002dbc:	dc000017 	ldw	r16,0(sp)
 2002dc0:	dec00804 	addi	sp,sp,32
 2002dc4:	f800283a 	ret
 2002dc8:	20fff41e 	bne	r4,r3,2002d9c <_fpadd_parts+0x1c8>
 2002dcc:	31000015 	stw	r4,0(r6)
 2002dd0:	98800117 	ldw	r2,4(r19)
 2002dd4:	30800115 	stw	r2,4(r6)
 2002dd8:	98c00217 	ldw	r3,8(r19)
 2002ddc:	30c00215 	stw	r3,8(r6)
 2002de0:	98800317 	ldw	r2,12(r19)
 2002de4:	30800315 	stw	r2,12(r6)
 2002de8:	98c00417 	ldw	r3,16(r19)
 2002dec:	30c00415 	stw	r3,16(r6)
 2002df0:	98800117 	ldw	r2,4(r19)
 2002df4:	28c00117 	ldw	r3,4(r5)
 2002df8:	3027883a 	mov	r19,r6
 2002dfc:	10c4703a 	and	r2,r2,r3
 2002e00:	30800115 	stw	r2,4(r6)
 2002e04:	003fe506 	br	2002d9c <_fpadd_parts+0x1c8>
 2002e08:	1dc02616 	blt	r3,r23,2002ea4 <_fpadd_parts+0x2d0>
 2002e0c:	0023883a 	mov	r17,zero
 2002e10:	182f883a 	mov	r23,r3
 2002e14:	0025883a 	mov	r18,zero
 2002e18:	003fa806 	br	2002cbc <_fpadd_parts+0xe8>
 2002e1c:	a827883a 	mov	r19,r21
 2002e20:	003fde06 	br	2002d9c <_fpadd_parts+0x1c8>
 2002e24:	01800044 	movi	r6,1
 2002e28:	500497fa 	slli	r2,r10,31
 2002e2c:	4808d07a 	srli	r4,r9,1
 2002e30:	518ad83a 	srl	r5,r10,r6
 2002e34:	a2000217 	ldw	r8,8(r20)
 2002e38:	1108b03a 	or	r4,r2,r4
 2002e3c:	0007883a 	mov	r3,zero
 2002e40:	4984703a 	and	r2,r9,r6
 2002e44:	208cb03a 	or	r6,r4,r2
 2002e48:	28ceb03a 	or	r7,r5,r3
 2002e4c:	42000044 	addi	r8,r8,1
 2002e50:	a027883a 	mov	r19,r20
 2002e54:	a1c00415 	stw	r7,16(r20)
 2002e58:	a2000215 	stw	r8,8(r20)
 2002e5c:	a1800315 	stw	r6,12(r20)
 2002e60:	003fce06 	br	2002d9c <_fpadd_parts+0x1c8>
 2002e64:	8bc5c83a 	sub	r2,r17,r15
 2002e68:	8889803a 	cmpltu	r4,r17,r2
 2002e6c:	9407c83a 	sub	r3,r18,r16
 2002e70:	1909c83a 	sub	r4,r3,r4
 2002e74:	100d883a 	mov	r6,r2
 2002e78:	200f883a 	mov	r7,r4
 2002e7c:	003f9906 	br	2002ce4 <_fpadd_parts+0x110>
 2002e80:	7c45883a 	add	r2,r15,r17
 2002e84:	13c9803a 	cmpltu	r4,r2,r15
 2002e88:	8487883a 	add	r3,r16,r18
 2002e8c:	20c9883a 	add	r4,r4,r3
 2002e90:	a1400115 	stw	r5,4(r20)
 2002e94:	a5c00215 	stw	r23,8(r20)
 2002e98:	a0800315 	stw	r2,12(r20)
 2002e9c:	a1000415 	stw	r4,16(r20)
 2002ea0:	003fb606 	br	2002d7c <_fpadd_parts+0x1a8>
 2002ea4:	001f883a 	mov	r15,zero
 2002ea8:	0021883a 	mov	r16,zero
 2002eac:	003f8306 	br	2002cbc <_fpadd_parts+0xe8>
 2002eb0:	018dc83a 	sub	r6,zero,r6
 2002eb4:	003f6706 	br	2002c54 <_fpadd_parts+0x80>
 2002eb8:	00bfff84 	movi	r2,-2
 2002ebc:	117faf36 	bltu	r2,r5,2002d7c <_fpadd_parts+0x1a8>
 2002ec0:	003f9806 	br	2002d24 <_fpadd_parts+0x150>
 2002ec4:	0005883a 	mov	r2,zero
 2002ec8:	1189c83a 	sub	r4,r2,r6
 2002ecc:	1105803a 	cmpltu	r2,r2,r4
 2002ed0:	01cbc83a 	sub	r5,zero,r7
 2002ed4:	2885c83a 	sub	r2,r5,r2
 2002ed8:	01800044 	movi	r6,1
 2002edc:	a1800115 	stw	r6,4(r20)
 2002ee0:	a5c00215 	stw	r23,8(r20)
 2002ee4:	a1000315 	stw	r4,12(r20)
 2002ee8:	a0800415 	stw	r2,16(r20)
 2002eec:	003f8206 	br	2002cf8 <_fpadd_parts+0x124>
 2002ef0:	203f7226 	beq	r4,zero,2002cbc <_fpadd_parts+0xe8>
 2002ef4:	35bff804 	addi	r22,r6,-32
 2002ef8:	b9af883a 	add	r23,r23,r6
 2002efc:	b0003116 	blt	r22,zero,2002fc4 <_fpadd_parts+0x3f0>
 2002f00:	959ad83a 	srl	r13,r18,r22
 2002f04:	001d883a 	mov	r14,zero
 2002f08:	000f883a 	mov	r7,zero
 2002f0c:	01000044 	movi	r4,1
 2002f10:	0011883a 	mov	r8,zero
 2002f14:	b0002516 	blt	r22,zero,2002fac <_fpadd_parts+0x3d8>
 2002f18:	2594983a 	sll	r10,r4,r22
 2002f1c:	0013883a 	mov	r9,zero
 2002f20:	00bfffc4 	movi	r2,-1
 2002f24:	4889883a 	add	r4,r9,r2
 2002f28:	508b883a 	add	r5,r10,r2
 2002f2c:	224d803a 	cmpltu	r6,r4,r9
 2002f30:	314b883a 	add	r5,r6,r5
 2002f34:	8904703a 	and	r2,r17,r4
 2002f38:	9146703a 	and	r3,r18,r5
 2002f3c:	10c4b03a 	or	r2,r2,r3
 2002f40:	10000226 	beq	r2,zero,2002f4c <_fpadd_parts+0x378>
 2002f44:	01c00044 	movi	r7,1
 2002f48:	0011883a 	mov	r8,zero
 2002f4c:	69e2b03a 	or	r17,r13,r7
 2002f50:	7224b03a 	or	r18,r14,r8
 2002f54:	003f5906 	br	2002cbc <_fpadd_parts+0xe8>
 2002f58:	8407883a 	add	r3,r16,r16
 2002f5c:	008007c4 	movi	r2,31
 2002f60:	1185c83a 	sub	r2,r2,r6
 2002f64:	1886983a 	sll	r3,r3,r2
 2002f68:	7996d83a 	srl	r11,r15,r6
 2002f6c:	8198d83a 	srl	r12,r16,r6
 2002f70:	1ad6b03a 	or	r11,r3,r11
 2002f74:	003f3e06 	br	2002c70 <_fpadd_parts+0x9c>
 2002f78:	2006d07a 	srli	r3,r4,1
 2002f7c:	008007c4 	movi	r2,31
 2002f80:	1185c83a 	sub	r2,r2,r6
 2002f84:	1890d83a 	srl	r8,r3,r2
 2002f88:	218e983a 	sll	r7,r4,r6
 2002f8c:	003f3e06 	br	2002c88 <_fpadd_parts+0xb4>
 2002f90:	113f821e 	bne	r2,r4,2002d9c <_fpadd_parts+0x1c8>
 2002f94:	28c00117 	ldw	r3,4(r5)
 2002f98:	98800117 	ldw	r2,4(r19)
 2002f9c:	10ff7f26 	beq	r2,r3,2002d9c <_fpadd_parts+0x1c8>
 2002fa0:	04c080b4 	movhi	r19,514
 2002fa4:	9ce90804 	addi	r19,r19,-23520
 2002fa8:	003f7c06 	br	2002d9c <_fpadd_parts+0x1c8>
 2002fac:	2006d07a 	srli	r3,r4,1
 2002fb0:	008007c4 	movi	r2,31
 2002fb4:	1185c83a 	sub	r2,r2,r6
 2002fb8:	1894d83a 	srl	r10,r3,r2
 2002fbc:	2192983a 	sll	r9,r4,r6
 2002fc0:	003fd706 	br	2002f20 <_fpadd_parts+0x34c>
 2002fc4:	9487883a 	add	r3,r18,r18
 2002fc8:	008007c4 	movi	r2,31
 2002fcc:	1185c83a 	sub	r2,r2,r6
 2002fd0:	1886983a 	sll	r3,r3,r2
 2002fd4:	899ad83a 	srl	r13,r17,r6
 2002fd8:	919cd83a 	srl	r14,r18,r6
 2002fdc:	1b5ab03a 	or	r13,r3,r13
 2002fe0:	003fc906 	br	2002f08 <_fpadd_parts+0x334>

02002fe4 <__subdf3>:
 2002fe4:	deffea04 	addi	sp,sp,-88
 2002fe8:	dcc01415 	stw	r19,80(sp)
 2002fec:	dcc00404 	addi	r19,sp,16
 2002ff0:	2011883a 	mov	r8,r4
 2002ff4:	2813883a 	mov	r9,r5
 2002ff8:	dc401315 	stw	r17,76(sp)
 2002ffc:	d809883a 	mov	r4,sp
 2003000:	980b883a 	mov	r5,r19
 2003004:	dc400904 	addi	r17,sp,36
 2003008:	dfc01515 	stw	ra,84(sp)
 200300c:	da400115 	stw	r9,4(sp)
 2003010:	d9c00315 	stw	r7,12(sp)
 2003014:	da000015 	stw	r8,0(sp)
 2003018:	d9800215 	stw	r6,8(sp)
 200301c:	20035f80 	call	20035f8 <__unpack_d>
 2003020:	d9000204 	addi	r4,sp,8
 2003024:	880b883a 	mov	r5,r17
 2003028:	20035f80 	call	20035f8 <__unpack_d>
 200302c:	d8800a17 	ldw	r2,40(sp)
 2003030:	880b883a 	mov	r5,r17
 2003034:	9809883a 	mov	r4,r19
 2003038:	d9800e04 	addi	r6,sp,56
 200303c:	1080005c 	xori	r2,r2,1
 2003040:	d8800a15 	stw	r2,40(sp)
 2003044:	2002bd40 	call	2002bd4 <_fpadd_parts>
 2003048:	1009883a 	mov	r4,r2
 200304c:	20032e40 	call	20032e4 <__pack_d>
 2003050:	dfc01517 	ldw	ra,84(sp)
 2003054:	dcc01417 	ldw	r19,80(sp)
 2003058:	dc401317 	ldw	r17,76(sp)
 200305c:	dec01604 	addi	sp,sp,88
 2003060:	f800283a 	ret

02003064 <__adddf3>:
 2003064:	deffea04 	addi	sp,sp,-88
 2003068:	dcc01415 	stw	r19,80(sp)
 200306c:	dcc00404 	addi	r19,sp,16
 2003070:	2011883a 	mov	r8,r4
 2003074:	2813883a 	mov	r9,r5
 2003078:	dc401315 	stw	r17,76(sp)
 200307c:	d809883a 	mov	r4,sp
 2003080:	980b883a 	mov	r5,r19
 2003084:	dc400904 	addi	r17,sp,36
 2003088:	dfc01515 	stw	ra,84(sp)
 200308c:	da400115 	stw	r9,4(sp)
 2003090:	d9c00315 	stw	r7,12(sp)
 2003094:	da000015 	stw	r8,0(sp)
 2003098:	d9800215 	stw	r6,8(sp)
 200309c:	20035f80 	call	20035f8 <__unpack_d>
 20030a0:	d9000204 	addi	r4,sp,8
 20030a4:	880b883a 	mov	r5,r17
 20030a8:	20035f80 	call	20035f8 <__unpack_d>
 20030ac:	d9800e04 	addi	r6,sp,56
 20030b0:	9809883a 	mov	r4,r19
 20030b4:	880b883a 	mov	r5,r17
 20030b8:	2002bd40 	call	2002bd4 <_fpadd_parts>
 20030bc:	1009883a 	mov	r4,r2
 20030c0:	20032e40 	call	20032e4 <__pack_d>
 20030c4:	dfc01517 	ldw	ra,84(sp)
 20030c8:	dcc01417 	ldw	r19,80(sp)
 20030cc:	dc401317 	ldw	r17,76(sp)
 20030d0:	dec01604 	addi	sp,sp,88
 20030d4:	f800283a 	ret

020030d8 <__ledf2>:
 20030d8:	deffef04 	addi	sp,sp,-68
 20030dc:	dc400f15 	stw	r17,60(sp)
 20030e0:	dc400404 	addi	r17,sp,16
 20030e4:	2005883a 	mov	r2,r4
 20030e8:	2807883a 	mov	r3,r5
 20030ec:	dc000e15 	stw	r16,56(sp)
 20030f0:	d809883a 	mov	r4,sp
 20030f4:	880b883a 	mov	r5,r17
 20030f8:	dc000904 	addi	r16,sp,36
 20030fc:	d8c00115 	stw	r3,4(sp)
 2003100:	d8800015 	stw	r2,0(sp)
 2003104:	d9800215 	stw	r6,8(sp)
 2003108:	dfc01015 	stw	ra,64(sp)
 200310c:	d9c00315 	stw	r7,12(sp)
 2003110:	20035f80 	call	20035f8 <__unpack_d>
 2003114:	d9000204 	addi	r4,sp,8
 2003118:	800b883a 	mov	r5,r16
 200311c:	20035f80 	call	20035f8 <__unpack_d>
 2003120:	d8800417 	ldw	r2,16(sp)
 2003124:	00c00044 	movi	r3,1
 2003128:	180d883a 	mov	r6,r3
 200312c:	1880062e 	bgeu	r3,r2,2003148 <__ledf2+0x70>
 2003130:	d8800917 	ldw	r2,36(sp)
 2003134:	8809883a 	mov	r4,r17
 2003138:	800b883a 	mov	r5,r16
 200313c:	1880022e 	bgeu	r3,r2,2003148 <__ledf2+0x70>
 2003140:	20037300 	call	2003730 <__fpcmp_parts_d>
 2003144:	100d883a 	mov	r6,r2
 2003148:	3005883a 	mov	r2,r6
 200314c:	dfc01017 	ldw	ra,64(sp)
 2003150:	dc400f17 	ldw	r17,60(sp)
 2003154:	dc000e17 	ldw	r16,56(sp)
 2003158:	dec01104 	addi	sp,sp,68
 200315c:	f800283a 	ret

02003160 <udivmodsi4>:
 2003160:	29001b2e 	bgeu	r5,r4,20031d0 <udivmodsi4+0x70>
 2003164:	28001a16 	blt	r5,zero,20031d0 <udivmodsi4+0x70>
 2003168:	00800044 	movi	r2,1
 200316c:	0007883a 	mov	r3,zero
 2003170:	01c007c4 	movi	r7,31
 2003174:	00000306 	br	2003184 <udivmodsi4+0x24>
 2003178:	19c01326 	beq	r3,r7,20031c8 <udivmodsi4+0x68>
 200317c:	18c00044 	addi	r3,r3,1
 2003180:	28000416 	blt	r5,zero,2003194 <udivmodsi4+0x34>
 2003184:	294b883a 	add	r5,r5,r5
 2003188:	1085883a 	add	r2,r2,r2
 200318c:	293ffa36 	bltu	r5,r4,2003178 <udivmodsi4+0x18>
 2003190:	10000d26 	beq	r2,zero,20031c8 <udivmodsi4+0x68>
 2003194:	0007883a 	mov	r3,zero
 2003198:	21400236 	bltu	r4,r5,20031a4 <udivmodsi4+0x44>
 200319c:	2149c83a 	sub	r4,r4,r5
 20031a0:	1886b03a 	or	r3,r3,r2
 20031a4:	1004d07a 	srli	r2,r2,1
 20031a8:	280ad07a 	srli	r5,r5,1
 20031ac:	103ffa1e 	bne	r2,zero,2003198 <udivmodsi4+0x38>
 20031b0:	30000226 	beq	r6,zero,20031bc <udivmodsi4+0x5c>
 20031b4:	2005883a 	mov	r2,r4
 20031b8:	f800283a 	ret
 20031bc:	1809883a 	mov	r4,r3
 20031c0:	2005883a 	mov	r2,r4
 20031c4:	f800283a 	ret
 20031c8:	0007883a 	mov	r3,zero
 20031cc:	003ff806 	br	20031b0 <udivmodsi4+0x50>
 20031d0:	00800044 	movi	r2,1
 20031d4:	0007883a 	mov	r3,zero
 20031d8:	003fef06 	br	2003198 <udivmodsi4+0x38>

020031dc <__divsi3>:
 20031dc:	defffe04 	addi	sp,sp,-8
 20031e0:	dc000015 	stw	r16,0(sp)
 20031e4:	dfc00115 	stw	ra,4(sp)
 20031e8:	0021883a 	mov	r16,zero
 20031ec:	20000c16 	blt	r4,zero,2003220 <__divsi3+0x44>
 20031f0:	000d883a 	mov	r6,zero
 20031f4:	28000e16 	blt	r5,zero,2003230 <__divsi3+0x54>
 20031f8:	20031600 	call	2003160 <udivmodsi4>
 20031fc:	1007883a 	mov	r3,r2
 2003200:	8005003a 	cmpeq	r2,r16,zero
 2003204:	1000011e 	bne	r2,zero,200320c <__divsi3+0x30>
 2003208:	00c7c83a 	sub	r3,zero,r3
 200320c:	1805883a 	mov	r2,r3
 2003210:	dfc00117 	ldw	ra,4(sp)
 2003214:	dc000017 	ldw	r16,0(sp)
 2003218:	dec00204 	addi	sp,sp,8
 200321c:	f800283a 	ret
 2003220:	0109c83a 	sub	r4,zero,r4
 2003224:	04000044 	movi	r16,1
 2003228:	000d883a 	mov	r6,zero
 200322c:	283ff20e 	bge	r5,zero,20031f8 <__divsi3+0x1c>
 2003230:	014bc83a 	sub	r5,zero,r5
 2003234:	8021003a 	cmpeq	r16,r16,zero
 2003238:	003fef06 	br	20031f8 <__divsi3+0x1c>

0200323c <__modsi3>:
 200323c:	deffff04 	addi	sp,sp,-4
 2003240:	dfc00015 	stw	ra,0(sp)
 2003244:	01800044 	movi	r6,1
 2003248:	2807883a 	mov	r3,r5
 200324c:	20000416 	blt	r4,zero,2003260 <__modsi3+0x24>
 2003250:	28000c16 	blt	r5,zero,2003284 <__modsi3+0x48>
 2003254:	dfc00017 	ldw	ra,0(sp)
 2003258:	dec00104 	addi	sp,sp,4
 200325c:	20031601 	jmpi	2003160 <udivmodsi4>
 2003260:	0109c83a 	sub	r4,zero,r4
 2003264:	28000b16 	blt	r5,zero,2003294 <__modsi3+0x58>
 2003268:	180b883a 	mov	r5,r3
 200326c:	01800044 	movi	r6,1
 2003270:	20031600 	call	2003160 <udivmodsi4>
 2003274:	0085c83a 	sub	r2,zero,r2
 2003278:	dfc00017 	ldw	ra,0(sp)
 200327c:	dec00104 	addi	sp,sp,4
 2003280:	f800283a 	ret
 2003284:	014bc83a 	sub	r5,zero,r5
 2003288:	dfc00017 	ldw	ra,0(sp)
 200328c:	dec00104 	addi	sp,sp,4
 2003290:	20031601 	jmpi	2003160 <udivmodsi4>
 2003294:	0147c83a 	sub	r3,zero,r5
 2003298:	003ff306 	br	2003268 <__modsi3+0x2c>

0200329c <__udivsi3>:
 200329c:	000d883a 	mov	r6,zero
 20032a0:	20031601 	jmpi	2003160 <udivmodsi4>

020032a4 <__umodsi3>:
 20032a4:	01800044 	movi	r6,1
 20032a8:	20031601 	jmpi	2003160 <udivmodsi4>

020032ac <__mulsi3>:
 20032ac:	20000a26 	beq	r4,zero,20032d8 <__mulsi3+0x2c>
 20032b0:	0007883a 	mov	r3,zero
 20032b4:	2080004c 	andi	r2,r4,1
 20032b8:	1005003a 	cmpeq	r2,r2,zero
 20032bc:	2008d07a 	srli	r4,r4,1
 20032c0:	1000011e 	bne	r2,zero,20032c8 <__mulsi3+0x1c>
 20032c4:	1947883a 	add	r3,r3,r5
 20032c8:	294b883a 	add	r5,r5,r5
 20032cc:	203ff91e 	bne	r4,zero,20032b4 <__mulsi3+0x8>
 20032d0:	1805883a 	mov	r2,r3
 20032d4:	f800283a 	ret
 20032d8:	0007883a 	mov	r3,zero
 20032dc:	1805883a 	mov	r2,r3
 20032e0:	f800283a 	ret

020032e4 <__pack_d>:
 20032e4:	20c00017 	ldw	r3,0(r4)
 20032e8:	defffd04 	addi	sp,sp,-12
 20032ec:	dc000015 	stw	r16,0(sp)
 20032f0:	dc800215 	stw	r18,8(sp)
 20032f4:	dc400115 	stw	r17,4(sp)
 20032f8:	00800044 	movi	r2,1
 20032fc:	22000317 	ldw	r8,12(r4)
 2003300:	001f883a 	mov	r15,zero
 2003304:	22400417 	ldw	r9,16(r4)
 2003308:	24000117 	ldw	r16,4(r4)
 200330c:	10c0552e 	bgeu	r2,r3,2003464 <__pack_d+0x180>
 2003310:	00800104 	movi	r2,4
 2003314:	18804f26 	beq	r3,r2,2003454 <__pack_d+0x170>
 2003318:	00800084 	movi	r2,2
 200331c:	18800226 	beq	r3,r2,2003328 <__pack_d+0x44>
 2003320:	4244b03a 	or	r2,r8,r9
 2003324:	10001a1e 	bne	r2,zero,2003390 <__pack_d+0xac>
 2003328:	000d883a 	mov	r6,zero
 200332c:	000f883a 	mov	r7,zero
 2003330:	0011883a 	mov	r8,zero
 2003334:	00800434 	movhi	r2,16
 2003338:	10bfffc4 	addi	r2,r2,-1
 200333c:	301d883a 	mov	r14,r6
 2003340:	3884703a 	and	r2,r7,r2
 2003344:	400a953a 	slli	r5,r8,20
 2003348:	79bffc2c 	andhi	r6,r15,65520
 200334c:	308cb03a 	or	r6,r6,r2
 2003350:	00e00434 	movhi	r3,32784
 2003354:	18ffffc4 	addi	r3,r3,-1
 2003358:	800497fa 	slli	r2,r16,31
 200335c:	30c6703a 	and	r3,r6,r3
 2003360:	1946b03a 	or	r3,r3,r5
 2003364:	01600034 	movhi	r5,32768
 2003368:	297fffc4 	addi	r5,r5,-1
 200336c:	194a703a 	and	r5,r3,r5
 2003370:	288ab03a 	or	r5,r5,r2
 2003374:	2807883a 	mov	r3,r5
 2003378:	7005883a 	mov	r2,r14
 200337c:	dc800217 	ldw	r18,8(sp)
 2003380:	dc400117 	ldw	r17,4(sp)
 2003384:	dc000017 	ldw	r16,0(sp)
 2003388:	dec00304 	addi	sp,sp,12
 200338c:	f800283a 	ret
 2003390:	21000217 	ldw	r4,8(r4)
 2003394:	00bf0084 	movi	r2,-1022
 2003398:	20803f16 	blt	r4,r2,2003498 <__pack_d+0x1b4>
 200339c:	0080ffc4 	movi	r2,1023
 20033a0:	11002c16 	blt	r2,r4,2003454 <__pack_d+0x170>
 20033a4:	00803fc4 	movi	r2,255
 20033a8:	408c703a 	and	r6,r8,r2
 20033ac:	00802004 	movi	r2,128
 20033b0:	0007883a 	mov	r3,zero
 20033b4:	000f883a 	mov	r7,zero
 20033b8:	2280ffc4 	addi	r10,r4,1023
 20033bc:	30801e26 	beq	r6,r2,2003438 <__pack_d+0x154>
 20033c0:	00801fc4 	movi	r2,127
 20033c4:	4089883a 	add	r4,r8,r2
 20033c8:	220d803a 	cmpltu	r6,r4,r8
 20033cc:	324d883a 	add	r6,r6,r9
 20033d0:	2011883a 	mov	r8,r4
 20033d4:	3013883a 	mov	r9,r6
 20033d8:	00880034 	movhi	r2,8192
 20033dc:	10bfffc4 	addi	r2,r2,-1
 20033e0:	12400d36 	bltu	r2,r9,2003418 <__pack_d+0x134>
 20033e4:	4804963a 	slli	r2,r9,24
 20033e8:	400cd23a 	srli	r6,r8,8
 20033ec:	480ed23a 	srli	r7,r9,8
 20033f0:	013fffc4 	movi	r4,-1
 20033f4:	118cb03a 	or	r6,r2,r6
 20033f8:	01400434 	movhi	r5,16
 20033fc:	297fffc4 	addi	r5,r5,-1
 2003400:	3104703a 	and	r2,r6,r4
 2003404:	3946703a 	and	r3,r7,r5
 2003408:	5201ffcc 	andi	r8,r10,2047
 200340c:	100d883a 	mov	r6,r2
 2003410:	180f883a 	mov	r7,r3
 2003414:	003fc706 	br	2003334 <__pack_d+0x50>
 2003418:	480897fa 	slli	r4,r9,31
 200341c:	4004d07a 	srli	r2,r8,1
 2003420:	4806d07a 	srli	r3,r9,1
 2003424:	52800044 	addi	r10,r10,1
 2003428:	2084b03a 	or	r2,r4,r2
 200342c:	1011883a 	mov	r8,r2
 2003430:	1813883a 	mov	r9,r3
 2003434:	003feb06 	br	20033e4 <__pack_d+0x100>
 2003438:	383fe11e 	bne	r7,zero,20033c0 <__pack_d+0xdc>
 200343c:	01004004 	movi	r4,256
 2003440:	4104703a 	and	r2,r8,r4
 2003444:	10c4b03a 	or	r2,r2,r3
 2003448:	103fe326 	beq	r2,zero,20033d8 <__pack_d+0xf4>
 200344c:	3005883a 	mov	r2,r6
 2003450:	003fdc06 	br	20033c4 <__pack_d+0xe0>
 2003454:	000d883a 	mov	r6,zero
 2003458:	000f883a 	mov	r7,zero
 200345c:	0201ffc4 	movi	r8,2047
 2003460:	003fb406 	br	2003334 <__pack_d+0x50>
 2003464:	0005883a 	mov	r2,zero
 2003468:	00c00234 	movhi	r3,8
 200346c:	408cb03a 	or	r6,r8,r2
 2003470:	48ceb03a 	or	r7,r9,r3
 2003474:	013fffc4 	movi	r4,-1
 2003478:	01400434 	movhi	r5,16
 200347c:	297fffc4 	addi	r5,r5,-1
 2003480:	3104703a 	and	r2,r6,r4
 2003484:	3946703a 	and	r3,r7,r5
 2003488:	100d883a 	mov	r6,r2
 200348c:	180f883a 	mov	r7,r3
 2003490:	0201ffc4 	movi	r8,2047
 2003494:	003fa706 	br	2003334 <__pack_d+0x50>
 2003498:	1109c83a 	sub	r4,r2,r4
 200349c:	00800e04 	movi	r2,56
 20034a0:	11004316 	blt	r2,r4,20035b0 <__pack_d+0x2cc>
 20034a4:	21fff804 	addi	r7,r4,-32
 20034a8:	38004516 	blt	r7,zero,20035c0 <__pack_d+0x2dc>
 20034ac:	49d8d83a 	srl	r12,r9,r7
 20034b0:	001b883a 	mov	r13,zero
 20034b4:	0023883a 	mov	r17,zero
 20034b8:	01400044 	movi	r5,1
 20034bc:	0025883a 	mov	r18,zero
 20034c0:	38004716 	blt	r7,zero,20035e0 <__pack_d+0x2fc>
 20034c4:	29d6983a 	sll	r11,r5,r7
 20034c8:	0015883a 	mov	r10,zero
 20034cc:	00bfffc4 	movi	r2,-1
 20034d0:	5089883a 	add	r4,r10,r2
 20034d4:	588b883a 	add	r5,r11,r2
 20034d8:	228d803a 	cmpltu	r6,r4,r10
 20034dc:	314b883a 	add	r5,r6,r5
 20034e0:	4104703a 	and	r2,r8,r4
 20034e4:	4946703a 	and	r3,r9,r5
 20034e8:	10c4b03a 	or	r2,r2,r3
 20034ec:	10000226 	beq	r2,zero,20034f8 <__pack_d+0x214>
 20034f0:	04400044 	movi	r17,1
 20034f4:	0025883a 	mov	r18,zero
 20034f8:	00803fc4 	movi	r2,255
 20034fc:	644eb03a 	or	r7,r12,r17
 2003500:	3892703a 	and	r9,r7,r2
 2003504:	00802004 	movi	r2,128
 2003508:	6c90b03a 	or	r8,r13,r18
 200350c:	0015883a 	mov	r10,zero
 2003510:	48801626 	beq	r9,r2,200356c <__pack_d+0x288>
 2003514:	01001fc4 	movi	r4,127
 2003518:	3905883a 	add	r2,r7,r4
 200351c:	11cd803a 	cmpltu	r6,r2,r7
 2003520:	320d883a 	add	r6,r6,r8
 2003524:	100f883a 	mov	r7,r2
 2003528:	00840034 	movhi	r2,4096
 200352c:	10bfffc4 	addi	r2,r2,-1
 2003530:	3011883a 	mov	r8,r6
 2003534:	0007883a 	mov	r3,zero
 2003538:	11801b36 	bltu	r2,r6,20035a8 <__pack_d+0x2c4>
 200353c:	4004963a 	slli	r2,r8,24
 2003540:	3808d23a 	srli	r4,r7,8
 2003544:	400ad23a 	srli	r5,r8,8
 2003548:	1813883a 	mov	r9,r3
 200354c:	1108b03a 	or	r4,r2,r4
 2003550:	00bfffc4 	movi	r2,-1
 2003554:	00c00434 	movhi	r3,16
 2003558:	18ffffc4 	addi	r3,r3,-1
 200355c:	208c703a 	and	r6,r4,r2
 2003560:	28ce703a 	and	r7,r5,r3
 2003564:	4a01ffcc 	andi	r8,r9,2047
 2003568:	003f7206 	br	2003334 <__pack_d+0x50>
 200356c:	503fe91e 	bne	r10,zero,2003514 <__pack_d+0x230>
 2003570:	01004004 	movi	r4,256
 2003574:	3904703a 	and	r2,r7,r4
 2003578:	0007883a 	mov	r3,zero
 200357c:	10c4b03a 	or	r2,r2,r3
 2003580:	10000626 	beq	r2,zero,200359c <__pack_d+0x2b8>
 2003584:	3a45883a 	add	r2,r7,r9
 2003588:	11cd803a 	cmpltu	r6,r2,r7
 200358c:	320d883a 	add	r6,r6,r8
 2003590:	100f883a 	mov	r7,r2
 2003594:	3011883a 	mov	r8,r6
 2003598:	0007883a 	mov	r3,zero
 200359c:	00840034 	movhi	r2,4096
 20035a0:	10bfffc4 	addi	r2,r2,-1
 20035a4:	123fe52e 	bgeu	r2,r8,200353c <__pack_d+0x258>
 20035a8:	00c00044 	movi	r3,1
 20035ac:	003fe306 	br	200353c <__pack_d+0x258>
 20035b0:	0009883a 	mov	r4,zero
 20035b4:	0013883a 	mov	r9,zero
 20035b8:	000b883a 	mov	r5,zero
 20035bc:	003fe406 	br	2003550 <__pack_d+0x26c>
 20035c0:	4a47883a 	add	r3,r9,r9
 20035c4:	008007c4 	movi	r2,31
 20035c8:	1105c83a 	sub	r2,r2,r4
 20035cc:	1886983a 	sll	r3,r3,r2
 20035d0:	4118d83a 	srl	r12,r8,r4
 20035d4:	491ad83a 	srl	r13,r9,r4
 20035d8:	1b18b03a 	or	r12,r3,r12
 20035dc:	003fb506 	br	20034b4 <__pack_d+0x1d0>
 20035e0:	2806d07a 	srli	r3,r5,1
 20035e4:	008007c4 	movi	r2,31
 20035e8:	1105c83a 	sub	r2,r2,r4
 20035ec:	1896d83a 	srl	r11,r3,r2
 20035f0:	2914983a 	sll	r10,r5,r4
 20035f4:	003fb506 	br	20034cc <__pack_d+0x1e8>

020035f8 <__unpack_d>:
 20035f8:	20c00117 	ldw	r3,4(r4)
 20035fc:	22400017 	ldw	r9,0(r4)
 2003600:	00800434 	movhi	r2,16
 2003604:	10bfffc4 	addi	r2,r2,-1
 2003608:	1808d53a 	srli	r4,r3,20
 200360c:	180cd7fa 	srli	r6,r3,31
 2003610:	1894703a 	and	r10,r3,r2
 2003614:	2201ffcc 	andi	r8,r4,2047
 2003618:	281b883a 	mov	r13,r5
 200361c:	4817883a 	mov	r11,r9
 2003620:	29800115 	stw	r6,4(r5)
 2003624:	5019883a 	mov	r12,r10
 2003628:	40001e1e 	bne	r8,zero,20036a4 <__unpack_d+0xac>
 200362c:	4a84b03a 	or	r2,r9,r10
 2003630:	10001926 	beq	r2,zero,2003698 <__unpack_d+0xa0>
 2003634:	4804d63a 	srli	r2,r9,24
 2003638:	500c923a 	slli	r6,r10,8
 200363c:	013f0084 	movi	r4,-1022
 2003640:	00c40034 	movhi	r3,4096
 2003644:	18ffffc4 	addi	r3,r3,-1
 2003648:	118cb03a 	or	r6,r2,r6
 200364c:	008000c4 	movi	r2,3
 2003650:	480a923a 	slli	r5,r9,8
 2003654:	68800015 	stw	r2,0(r13)
 2003658:	69000215 	stw	r4,8(r13)
 200365c:	19800b36 	bltu	r3,r6,200368c <__unpack_d+0x94>
 2003660:	200f883a 	mov	r7,r4
 2003664:	1811883a 	mov	r8,r3
 2003668:	2945883a 	add	r2,r5,r5
 200366c:	1149803a 	cmpltu	r4,r2,r5
 2003670:	3187883a 	add	r3,r6,r6
 2003674:	20c9883a 	add	r4,r4,r3
 2003678:	100b883a 	mov	r5,r2
 200367c:	200d883a 	mov	r6,r4
 2003680:	39ffffc4 	addi	r7,r7,-1
 2003684:	413ff82e 	bgeu	r8,r4,2003668 <__unpack_d+0x70>
 2003688:	69c00215 	stw	r7,8(r13)
 200368c:	69800415 	stw	r6,16(r13)
 2003690:	69400315 	stw	r5,12(r13)
 2003694:	f800283a 	ret
 2003698:	00800084 	movi	r2,2
 200369c:	28800015 	stw	r2,0(r5)
 20036a0:	f800283a 	ret
 20036a4:	0081ffc4 	movi	r2,2047
 20036a8:	40800f26 	beq	r8,r2,20036e8 <__unpack_d+0xf0>
 20036ac:	480cd63a 	srli	r6,r9,24
 20036b0:	5006923a 	slli	r3,r10,8
 20036b4:	4804923a 	slli	r2,r9,8
 20036b8:	0009883a 	mov	r4,zero
 20036bc:	30c6b03a 	or	r3,r6,r3
 20036c0:	01440034 	movhi	r5,4096
 20036c4:	110cb03a 	or	r6,r2,r4
 20036c8:	423f0044 	addi	r8,r8,-1023
 20036cc:	194eb03a 	or	r7,r3,r5
 20036d0:	008000c4 	movi	r2,3
 20036d4:	69c00415 	stw	r7,16(r13)
 20036d8:	6a000215 	stw	r8,8(r13)
 20036dc:	68800015 	stw	r2,0(r13)
 20036e0:	69800315 	stw	r6,12(r13)
 20036e4:	f800283a 	ret
 20036e8:	4a84b03a 	or	r2,r9,r10
 20036ec:	1000031e 	bne	r2,zero,20036fc <__unpack_d+0x104>
 20036f0:	00800104 	movi	r2,4
 20036f4:	28800015 	stw	r2,0(r5)
 20036f8:	f800283a 	ret
 20036fc:	0009883a 	mov	r4,zero
 2003700:	01400234 	movhi	r5,8
 2003704:	4904703a 	and	r2,r9,r4
 2003708:	5146703a 	and	r3,r10,r5
 200370c:	10c4b03a 	or	r2,r2,r3
 2003710:	10000526 	beq	r2,zero,2003728 <__unpack_d+0x130>
 2003714:	00800044 	movi	r2,1
 2003718:	68800015 	stw	r2,0(r13)
 200371c:	6b000415 	stw	r12,16(r13)
 2003720:	6ac00315 	stw	r11,12(r13)
 2003724:	f800283a 	ret
 2003728:	68000015 	stw	zero,0(r13)
 200372c:	003ffb06 	br	200371c <__unpack_d+0x124>

02003730 <__fpcmp_parts_d>:
 2003730:	21800017 	ldw	r6,0(r4)
 2003734:	00c00044 	movi	r3,1
 2003738:	19800a2e 	bgeu	r3,r6,2003764 <__fpcmp_parts_d+0x34>
 200373c:	28800017 	ldw	r2,0(r5)
 2003740:	1880082e 	bgeu	r3,r2,2003764 <__fpcmp_parts_d+0x34>
 2003744:	00c00104 	movi	r3,4
 2003748:	30c02626 	beq	r6,r3,20037e4 <__fpcmp_parts_d+0xb4>
 200374c:	10c02226 	beq	r2,r3,20037d8 <__fpcmp_parts_d+0xa8>
 2003750:	00c00084 	movi	r3,2
 2003754:	30c00526 	beq	r6,r3,200376c <__fpcmp_parts_d+0x3c>
 2003758:	10c0071e 	bne	r2,r3,2003778 <__fpcmp_parts_d+0x48>
 200375c:	20800117 	ldw	r2,4(r4)
 2003760:	1000091e 	bne	r2,zero,2003788 <__fpcmp_parts_d+0x58>
 2003764:	00800044 	movi	r2,1
 2003768:	f800283a 	ret
 200376c:	10c01a1e 	bne	r2,r3,20037d8 <__fpcmp_parts_d+0xa8>
 2003770:	0005883a 	mov	r2,zero
 2003774:	f800283a 	ret
 2003778:	22000117 	ldw	r8,4(r4)
 200377c:	28800117 	ldw	r2,4(r5)
 2003780:	40800326 	beq	r8,r2,2003790 <__fpcmp_parts_d+0x60>
 2003784:	403ff726 	beq	r8,zero,2003764 <__fpcmp_parts_d+0x34>
 2003788:	00bfffc4 	movi	r2,-1
 200378c:	f800283a 	ret
 2003790:	20c00217 	ldw	r3,8(r4)
 2003794:	28800217 	ldw	r2,8(r5)
 2003798:	10fffa16 	blt	r2,r3,2003784 <__fpcmp_parts_d+0x54>
 200379c:	18800916 	blt	r3,r2,20037c4 <__fpcmp_parts_d+0x94>
 20037a0:	21c00417 	ldw	r7,16(r4)
 20037a4:	28c00417 	ldw	r3,16(r5)
 20037a8:	21800317 	ldw	r6,12(r4)
 20037ac:	28800317 	ldw	r2,12(r5)
 20037b0:	19fff436 	bltu	r3,r7,2003784 <__fpcmp_parts_d+0x54>
 20037b4:	38c00526 	beq	r7,r3,20037cc <__fpcmp_parts_d+0x9c>
 20037b8:	38c00236 	bltu	r7,r3,20037c4 <__fpcmp_parts_d+0x94>
 20037bc:	19ffec1e 	bne	r3,r7,2003770 <__fpcmp_parts_d+0x40>
 20037c0:	30bfeb2e 	bgeu	r6,r2,2003770 <__fpcmp_parts_d+0x40>
 20037c4:	403fe71e 	bne	r8,zero,2003764 <__fpcmp_parts_d+0x34>
 20037c8:	003fef06 	br	2003788 <__fpcmp_parts_d+0x58>
 20037cc:	11bffa2e 	bgeu	r2,r6,20037b8 <__fpcmp_parts_d+0x88>
 20037d0:	403fe426 	beq	r8,zero,2003764 <__fpcmp_parts_d+0x34>
 20037d4:	003fec06 	br	2003788 <__fpcmp_parts_d+0x58>
 20037d8:	28800117 	ldw	r2,4(r5)
 20037dc:	103fe11e 	bne	r2,zero,2003764 <__fpcmp_parts_d+0x34>
 20037e0:	003fe906 	br	2003788 <__fpcmp_parts_d+0x58>
 20037e4:	11bfdd1e 	bne	r2,r6,200375c <__fpcmp_parts_d+0x2c>
 20037e8:	28c00117 	ldw	r3,4(r5)
 20037ec:	20800117 	ldw	r2,4(r4)
 20037f0:	1885c83a 	sub	r2,r3,r2
 20037f4:	f800283a 	ret

020037f8 <__assert_func>:
 20037f8:	008080b4 	movhi	r2,514
 20037fc:	10b0e304 	addi	r2,r2,-15476
 2003800:	10c00017 	ldw	r3,0(r2)
 2003804:	defffc04 	addi	sp,sp,-16
 2003808:	2011883a 	mov	r8,r4
 200380c:	dfc00315 	stw	ra,12(sp)
 2003810:	3005883a 	mov	r2,r6
 2003814:	2813883a 	mov	r9,r5
 2003818:	19000317 	ldw	r4,12(r3)
 200381c:	30000b26 	beq	r6,zero,200384c <__assert_func+0x54>
 2003820:	00c080b4 	movhi	r3,514
 2003824:	18e91904 	addi	r3,r3,-23452
 2003828:	380d883a 	mov	r6,r7
 200382c:	014080b4 	movhi	r5,514
 2003830:	29690d04 	addi	r5,r5,-23500
 2003834:	400f883a 	mov	r7,r8
 2003838:	da400015 	stw	r9,0(sp)
 200383c:	d8c00115 	stw	r3,4(sp)
 2003840:	d8800215 	stw	r2,8(sp)
 2003844:	20038700 	call	2003870 <fiprintf>
 2003848:	2006e380 	call	2006e38 <abort>
 200384c:	008080b4 	movhi	r2,514
 2003850:	10a91c04 	addi	r2,r2,-23440
 2003854:	1007883a 	mov	r3,r2
 2003858:	003ff306 	br	2003828 <__assert_func+0x30>

0200385c <__assert>:
 200385c:	deffff04 	addi	sp,sp,-4
 2003860:	300f883a 	mov	r7,r6
 2003864:	000d883a 	mov	r6,zero
 2003868:	dfc00015 	stw	ra,0(sp)
 200386c:	20037f80 	call	20037f8 <__assert_func>

02003870 <fiprintf>:
 2003870:	defffc04 	addi	sp,sp,-16
 2003874:	2007883a 	mov	r3,r4
 2003878:	dfc00115 	stw	ra,4(sp)
 200387c:	d9800215 	stw	r6,8(sp)
 2003880:	d9c00315 	stw	r7,12(sp)
 2003884:	018080b4 	movhi	r6,514
 2003888:	31b0e304 	addi	r6,r6,-15476
 200388c:	31000017 	ldw	r4,0(r6)
 2003890:	d8800204 	addi	r2,sp,8
 2003894:	280d883a 	mov	r6,r5
 2003898:	100f883a 	mov	r7,r2
 200389c:	180b883a 	mov	r5,r3
 20038a0:	d8800015 	stw	r2,0(sp)
 20038a4:	2004da00 	call	2004da0 <_vfiprintf_r>
 20038a8:	dfc00117 	ldw	ra,4(sp)
 20038ac:	dec00404 	addi	sp,sp,16
 20038b0:	f800283a 	ret

020038b4 <_fiprintf_r>:
 20038b4:	defffd04 	addi	sp,sp,-12
 20038b8:	dfc00115 	stw	ra,4(sp)
 20038bc:	d9c00215 	stw	r7,8(sp)
 20038c0:	d8800204 	addi	r2,sp,8
 20038c4:	100f883a 	mov	r7,r2
 20038c8:	d8800015 	stw	r2,0(sp)
 20038cc:	2004da00 	call	2004da0 <_vfiprintf_r>
 20038d0:	dfc00117 	ldw	ra,4(sp)
 20038d4:	dec00304 	addi	sp,sp,12
 20038d8:	f800283a 	ret

020038dc <free>:
 20038dc:	008080b4 	movhi	r2,514
 20038e0:	10b0e304 	addi	r2,r2,-15476
 20038e4:	200b883a 	mov	r5,r4
 20038e8:	11000017 	ldw	r4,0(r2)
 20038ec:	2008c981 	jmpi	2008c98 <_free_r>

020038f0 <malloc>:
 20038f0:	008080b4 	movhi	r2,514
 20038f4:	10b0e304 	addi	r2,r2,-15476
 20038f8:	200b883a 	mov	r5,r4
 20038fc:	11000017 	ldw	r4,0(r2)
 2003900:	20039041 	jmpi	2003904 <_malloc_r>

02003904 <_malloc_r>:
 2003904:	defff604 	addi	sp,sp,-40
 2003908:	28c002c4 	addi	r3,r5,11
 200390c:	00800584 	movi	r2,22
 2003910:	dc800215 	stw	r18,8(sp)
 2003914:	dfc00915 	stw	ra,36(sp)
 2003918:	df000815 	stw	fp,32(sp)
 200391c:	ddc00715 	stw	r23,28(sp)
 2003920:	dd800615 	stw	r22,24(sp)
 2003924:	dd400515 	stw	r21,20(sp)
 2003928:	dd000415 	stw	r20,16(sp)
 200392c:	dcc00315 	stw	r19,12(sp)
 2003930:	dc400115 	stw	r17,4(sp)
 2003934:	dc000015 	stw	r16,0(sp)
 2003938:	2025883a 	mov	r18,r4
 200393c:	10c01236 	bltu	r2,r3,2003988 <_malloc_r+0x84>
 2003940:	04400404 	movi	r17,16
 2003944:	8940142e 	bgeu	r17,r5,2003998 <_malloc_r+0x94>
 2003948:	00800304 	movi	r2,12
 200394c:	0007883a 	mov	r3,zero
 2003950:	90800015 	stw	r2,0(r18)
 2003954:	1805883a 	mov	r2,r3
 2003958:	dfc00917 	ldw	ra,36(sp)
 200395c:	df000817 	ldw	fp,32(sp)
 2003960:	ddc00717 	ldw	r23,28(sp)
 2003964:	dd800617 	ldw	r22,24(sp)
 2003968:	dd400517 	ldw	r21,20(sp)
 200396c:	dd000417 	ldw	r20,16(sp)
 2003970:	dcc00317 	ldw	r19,12(sp)
 2003974:	dc800217 	ldw	r18,8(sp)
 2003978:	dc400117 	ldw	r17,4(sp)
 200397c:	dc000017 	ldw	r16,0(sp)
 2003980:	dec00a04 	addi	sp,sp,40
 2003984:	f800283a 	ret
 2003988:	00bffe04 	movi	r2,-8
 200398c:	18a2703a 	and	r17,r3,r2
 2003990:	883fed16 	blt	r17,zero,2003948 <_malloc_r+0x44>
 2003994:	897fec36 	bltu	r17,r5,2003948 <_malloc_r+0x44>
 2003998:	9009883a 	mov	r4,r18
 200399c:	200f3540 	call	200f354 <__malloc_lock>
 20039a0:	00807dc4 	movi	r2,503
 20039a4:	14402b2e 	bgeu	r2,r17,2003a54 <_malloc_r+0x150>
 20039a8:	8806d27a 	srli	r3,r17,9
 20039ac:	18003f1e 	bne	r3,zero,2003aac <_malloc_r+0x1a8>
 20039b0:	880cd0fa 	srli	r6,r17,3
 20039b4:	300490fa 	slli	r2,r6,3
 20039b8:	02c080b4 	movhi	r11,514
 20039bc:	5aeb4304 	addi	r11,r11,-21236
 20039c0:	12cb883a 	add	r5,r2,r11
 20039c4:	2c000317 	ldw	r16,12(r5)
 20039c8:	580f883a 	mov	r7,r11
 20039cc:	2c00041e 	bne	r5,r16,20039e0 <_malloc_r+0xdc>
 20039d0:	00000a06 	br	20039fc <_malloc_r+0xf8>
 20039d4:	1800860e 	bge	r3,zero,2003bf0 <_malloc_r+0x2ec>
 20039d8:	84000317 	ldw	r16,12(r16)
 20039dc:	2c000726 	beq	r5,r16,20039fc <_malloc_r+0xf8>
 20039e0:	80800117 	ldw	r2,4(r16)
 20039e4:	00ffff04 	movi	r3,-4
 20039e8:	10c8703a 	and	r4,r2,r3
 20039ec:	2447c83a 	sub	r3,r4,r17
 20039f0:	008003c4 	movi	r2,15
 20039f4:	10fff70e 	bge	r2,r3,20039d4 <_malloc_r+0xd0>
 20039f8:	31bfffc4 	addi	r6,r6,-1
 20039fc:	32400044 	addi	r9,r6,1
 2003a00:	028080b4 	movhi	r10,514
 2003a04:	52ab4504 	addi	r10,r10,-21228
 2003a08:	54000217 	ldw	r16,8(r10)
 2003a0c:	8280a026 	beq	r16,r10,2003c90 <_malloc_r+0x38c>
 2003a10:	80800117 	ldw	r2,4(r16)
 2003a14:	00ffff04 	movi	r3,-4
 2003a18:	10ca703a 	and	r5,r2,r3
 2003a1c:	2c4dc83a 	sub	r6,r5,r17
 2003a20:	008003c4 	movi	r2,15
 2003a24:	11808316 	blt	r2,r6,2003c34 <_malloc_r+0x330>
 2003a28:	52800315 	stw	r10,12(r10)
 2003a2c:	52800215 	stw	r10,8(r10)
 2003a30:	30002916 	blt	r6,zero,2003ad8 <_malloc_r+0x1d4>
 2003a34:	8147883a 	add	r3,r16,r5
 2003a38:	18800117 	ldw	r2,4(r3)
 2003a3c:	9009883a 	mov	r4,r18
 2003a40:	10800054 	ori	r2,r2,1
 2003a44:	18800115 	stw	r2,4(r3)
 2003a48:	200f45c0 	call	200f45c <__malloc_unlock>
 2003a4c:	80c00204 	addi	r3,r16,8
 2003a50:	003fc006 	br	2003954 <_malloc_r+0x50>
 2003a54:	02c080b4 	movhi	r11,514
 2003a58:	5aeb4304 	addi	r11,r11,-21236
 2003a5c:	8ac5883a 	add	r2,r17,r11
 2003a60:	14000317 	ldw	r16,12(r2)
 2003a64:	580f883a 	mov	r7,r11
 2003a68:	8806d0fa 	srli	r3,r17,3
 2003a6c:	14006c26 	beq	r2,r16,2003c20 <_malloc_r+0x31c>
 2003a70:	80c00117 	ldw	r3,4(r16)
 2003a74:	00bfff04 	movi	r2,-4
 2003a78:	81800317 	ldw	r6,12(r16)
 2003a7c:	1886703a 	and	r3,r3,r2
 2003a80:	80c7883a 	add	r3,r16,r3
 2003a84:	18800117 	ldw	r2,4(r3)
 2003a88:	81400217 	ldw	r5,8(r16)
 2003a8c:	9009883a 	mov	r4,r18
 2003a90:	10800054 	ori	r2,r2,1
 2003a94:	18800115 	stw	r2,4(r3)
 2003a98:	31400215 	stw	r5,8(r6)
 2003a9c:	29800315 	stw	r6,12(r5)
 2003aa0:	200f45c0 	call	200f45c <__malloc_unlock>
 2003aa4:	80c00204 	addi	r3,r16,8
 2003aa8:	003faa06 	br	2003954 <_malloc_r+0x50>
 2003aac:	00800104 	movi	r2,4
 2003ab0:	10c0052e 	bgeu	r2,r3,2003ac8 <_malloc_r+0x1c4>
 2003ab4:	00800504 	movi	r2,20
 2003ab8:	10c07836 	bltu	r2,r3,2003c9c <_malloc_r+0x398>
 2003abc:	198016c4 	addi	r6,r3,91
 2003ac0:	300490fa 	slli	r2,r6,3
 2003ac4:	003fbc06 	br	20039b8 <_malloc_r+0xb4>
 2003ac8:	8804d1ba 	srli	r2,r17,6
 2003acc:	11800e04 	addi	r6,r2,56
 2003ad0:	300490fa 	slli	r2,r6,3
 2003ad4:	003fb806 	br	20039b8 <_malloc_r+0xb4>
 2003ad8:	00807fc4 	movi	r2,511
 2003adc:	1140bb36 	bltu	r2,r5,2003dcc <_malloc_r+0x4c8>
 2003ae0:	2806d0fa 	srli	r3,r5,3
 2003ae4:	573ffe04 	addi	fp,r10,-8
 2003ae8:	00800044 	movi	r2,1
 2003aec:	180890fa 	slli	r4,r3,3
 2003af0:	1807d0ba 	srai	r3,r3,2
 2003af4:	e1c00117 	ldw	r7,4(fp)
 2003af8:	5909883a 	add	r4,r11,r4
 2003afc:	21400217 	ldw	r5,8(r4)
 2003b00:	10c4983a 	sll	r2,r2,r3
 2003b04:	81000315 	stw	r4,12(r16)
 2003b08:	81400215 	stw	r5,8(r16)
 2003b0c:	388eb03a 	or	r7,r7,r2
 2003b10:	2c000315 	stw	r16,12(r5)
 2003b14:	24000215 	stw	r16,8(r4)
 2003b18:	e1c00115 	stw	r7,4(fp)
 2003b1c:	4807883a 	mov	r3,r9
 2003b20:	4800cd16 	blt	r9,zero,2003e58 <_malloc_r+0x554>
 2003b24:	1807d0ba 	srai	r3,r3,2
 2003b28:	00800044 	movi	r2,1
 2003b2c:	10c8983a 	sll	r4,r2,r3
 2003b30:	39004436 	bltu	r7,r4,2003c44 <_malloc_r+0x340>
 2003b34:	21c4703a 	and	r2,r4,r7
 2003b38:	10000a1e 	bne	r2,zero,2003b64 <_malloc_r+0x260>
 2003b3c:	2109883a 	add	r4,r4,r4
 2003b40:	00bfff04 	movi	r2,-4
 2003b44:	4884703a 	and	r2,r9,r2
 2003b48:	3906703a 	and	r3,r7,r4
 2003b4c:	12400104 	addi	r9,r2,4
 2003b50:	1800041e 	bne	r3,zero,2003b64 <_malloc_r+0x260>
 2003b54:	2109883a 	add	r4,r4,r4
 2003b58:	3904703a 	and	r2,r7,r4
 2003b5c:	4a400104 	addi	r9,r9,4
 2003b60:	103ffc26 	beq	r2,zero,2003b54 <_malloc_r+0x250>
 2003b64:	480490fa 	slli	r2,r9,3
 2003b68:	4819883a 	mov	r12,r9
 2003b6c:	023fff04 	movi	r8,-4
 2003b70:	589b883a 	add	r13,r11,r2
 2003b74:	6807883a 	mov	r3,r13
 2003b78:	014003c4 	movi	r5,15
 2003b7c:	1c000317 	ldw	r16,12(r3)
 2003b80:	1c00041e 	bne	r3,r16,2003b94 <_malloc_r+0x290>
 2003b84:	0000a706 	br	2003e24 <_malloc_r+0x520>
 2003b88:	3000ab0e 	bge	r6,zero,2003e38 <_malloc_r+0x534>
 2003b8c:	84000317 	ldw	r16,12(r16)
 2003b90:	1c00a426 	beq	r3,r16,2003e24 <_malloc_r+0x520>
 2003b94:	80800117 	ldw	r2,4(r16)
 2003b98:	1204703a 	and	r2,r2,r8
 2003b9c:	144dc83a 	sub	r6,r2,r17
 2003ba0:	29bff90e 	bge	r5,r6,2003b88 <_malloc_r+0x284>
 2003ba4:	81000317 	ldw	r4,12(r16)
 2003ba8:	80c00217 	ldw	r3,8(r16)
 2003bac:	89400054 	ori	r5,r17,1
 2003bb0:	8445883a 	add	r2,r16,r17
 2003bb4:	20c00215 	stw	r3,8(r4)
 2003bb8:	19000315 	stw	r4,12(r3)
 2003bbc:	81400115 	stw	r5,4(r16)
 2003bc0:	1187883a 	add	r3,r2,r6
 2003bc4:	31000054 	ori	r4,r6,1
 2003bc8:	50800315 	stw	r2,12(r10)
 2003bcc:	50800215 	stw	r2,8(r10)
 2003bd0:	19800015 	stw	r6,0(r3)
 2003bd4:	11000115 	stw	r4,4(r2)
 2003bd8:	12800215 	stw	r10,8(r2)
 2003bdc:	12800315 	stw	r10,12(r2)
 2003be0:	9009883a 	mov	r4,r18
 2003be4:	200f45c0 	call	200f45c <__malloc_unlock>
 2003be8:	80c00204 	addi	r3,r16,8
 2003bec:	003f5906 	br	2003954 <_malloc_r+0x50>
 2003bf0:	8109883a 	add	r4,r16,r4
 2003bf4:	20800117 	ldw	r2,4(r4)
 2003bf8:	80c00217 	ldw	r3,8(r16)
 2003bfc:	81400317 	ldw	r5,12(r16)
 2003c00:	10800054 	ori	r2,r2,1
 2003c04:	20800115 	stw	r2,4(r4)
 2003c08:	28c00215 	stw	r3,8(r5)
 2003c0c:	19400315 	stw	r5,12(r3)
 2003c10:	9009883a 	mov	r4,r18
 2003c14:	200f45c0 	call	200f45c <__malloc_unlock>
 2003c18:	80c00204 	addi	r3,r16,8
 2003c1c:	003f4d06 	br	2003954 <_malloc_r+0x50>
 2003c20:	80800204 	addi	r2,r16,8
 2003c24:	14000317 	ldw	r16,12(r2)
 2003c28:	143f911e 	bne	r2,r16,2003a70 <_malloc_r+0x16c>
 2003c2c:	1a400084 	addi	r9,r3,2
 2003c30:	003f7306 	br	2003a00 <_malloc_r+0xfc>
 2003c34:	88c00054 	ori	r3,r17,1
 2003c38:	8445883a 	add	r2,r16,r17
 2003c3c:	80c00115 	stw	r3,4(r16)
 2003c40:	003fdf06 	br	2003bc0 <_malloc_r+0x2bc>
 2003c44:	e4000217 	ldw	r16,8(fp)
 2003c48:	00bfff04 	movi	r2,-4
 2003c4c:	80c00117 	ldw	r3,4(r16)
 2003c50:	802d883a 	mov	r22,r16
 2003c54:	18aa703a 	and	r21,r3,r2
 2003c58:	ac401636 	bltu	r21,r17,2003cb4 <_malloc_r+0x3b0>
 2003c5c:	ac49c83a 	sub	r4,r21,r17
 2003c60:	008003c4 	movi	r2,15
 2003c64:	1100130e 	bge	r2,r4,2003cb4 <_malloc_r+0x3b0>
 2003c68:	88800054 	ori	r2,r17,1
 2003c6c:	8447883a 	add	r3,r16,r17
 2003c70:	80800115 	stw	r2,4(r16)
 2003c74:	20800054 	ori	r2,r4,1
 2003c78:	18800115 	stw	r2,4(r3)
 2003c7c:	e0c00215 	stw	r3,8(fp)
 2003c80:	9009883a 	mov	r4,r18
 2003c84:	200f45c0 	call	200f45c <__malloc_unlock>
 2003c88:	80c00204 	addi	r3,r16,8
 2003c8c:	003f3106 	br	2003954 <_malloc_r+0x50>
 2003c90:	39c00117 	ldw	r7,4(r7)
 2003c94:	573ffe04 	addi	fp,r10,-8
 2003c98:	003fa006 	br	2003b1c <_malloc_r+0x218>
 2003c9c:	00801504 	movi	r2,84
 2003ca0:	10c06736 	bltu	r2,r3,2003e40 <_malloc_r+0x53c>
 2003ca4:	8804d33a 	srli	r2,r17,12
 2003ca8:	11801b84 	addi	r6,r2,110
 2003cac:	300490fa 	slli	r2,r6,3
 2003cb0:	003f4106 	br	20039b8 <_malloc_r+0xb4>
 2003cb4:	d0a71117 	ldw	r2,-25532(gp)
 2003cb8:	d0e00317 	ldw	r3,-32756(gp)
 2003cbc:	053fffc4 	movi	r20,-1
 2003cc0:	10800404 	addi	r2,r2,16
 2003cc4:	88a7883a 	add	r19,r17,r2
 2003cc8:	1d000326 	beq	r3,r20,2003cd8 <_malloc_r+0x3d4>
 2003ccc:	98c3ffc4 	addi	r3,r19,4095
 2003cd0:	00bc0004 	movi	r2,-4096
 2003cd4:	18a6703a 	and	r19,r3,r2
 2003cd8:	9009883a 	mov	r4,r18
 2003cdc:	980b883a 	mov	r5,r19
 2003ce0:	20049980 	call	2004998 <_sbrk_r>
 2003ce4:	1009883a 	mov	r4,r2
 2003ce8:	15000426 	beq	r2,r20,2003cfc <_malloc_r+0x3f8>
 2003cec:	854b883a 	add	r5,r16,r21
 2003cf0:	1029883a 	mov	r20,r2
 2003cf4:	11405a2e 	bgeu	r2,r5,2003e60 <_malloc_r+0x55c>
 2003cf8:	87000c26 	beq	r16,fp,2003d2c <_malloc_r+0x428>
 2003cfc:	e4000217 	ldw	r16,8(fp)
 2003d00:	80c00117 	ldw	r3,4(r16)
 2003d04:	00bfff04 	movi	r2,-4
 2003d08:	1884703a 	and	r2,r3,r2
 2003d0c:	14400336 	bltu	r2,r17,2003d1c <_malloc_r+0x418>
 2003d10:	1449c83a 	sub	r4,r2,r17
 2003d14:	008003c4 	movi	r2,15
 2003d18:	113fd316 	blt	r2,r4,2003c68 <_malloc_r+0x364>
 2003d1c:	9009883a 	mov	r4,r18
 2003d20:	200f45c0 	call	200f45c <__malloc_unlock>
 2003d24:	0007883a 	mov	r3,zero
 2003d28:	003f0a06 	br	2003954 <_malloc_r+0x50>
 2003d2c:	05c080b4 	movhi	r23,514
 2003d30:	bdf81c04 	addi	r23,r23,-8080
 2003d34:	b8800017 	ldw	r2,0(r23)
 2003d38:	988d883a 	add	r6,r19,r2
 2003d3c:	b9800015 	stw	r6,0(r23)
 2003d40:	d0e00317 	ldw	r3,-32756(gp)
 2003d44:	00bfffc4 	movi	r2,-1
 2003d48:	18808e26 	beq	r3,r2,2003f84 <_malloc_r+0x680>
 2003d4c:	2145c83a 	sub	r2,r4,r5
 2003d50:	3085883a 	add	r2,r6,r2
 2003d54:	b8800015 	stw	r2,0(r23)
 2003d58:	20c001cc 	andi	r3,r4,7
 2003d5c:	18005f1e 	bne	r3,zero,2003edc <_malloc_r+0x5d8>
 2003d60:	000b883a 	mov	r5,zero
 2003d64:	a4c5883a 	add	r2,r20,r19
 2003d68:	1083ffcc 	andi	r2,r2,4095
 2003d6c:	00c40004 	movi	r3,4096
 2003d70:	1887c83a 	sub	r3,r3,r2
 2003d74:	28e7883a 	add	r19,r5,r3
 2003d78:	9009883a 	mov	r4,r18
 2003d7c:	980b883a 	mov	r5,r19
 2003d80:	20049980 	call	2004998 <_sbrk_r>
 2003d84:	1007883a 	mov	r3,r2
 2003d88:	00bfffc4 	movi	r2,-1
 2003d8c:	18807a26 	beq	r3,r2,2003f78 <_malloc_r+0x674>
 2003d90:	1d05c83a 	sub	r2,r3,r20
 2003d94:	9885883a 	add	r2,r19,r2
 2003d98:	10c00054 	ori	r3,r2,1
 2003d9c:	b8800017 	ldw	r2,0(r23)
 2003da0:	a021883a 	mov	r16,r20
 2003da4:	a0c00115 	stw	r3,4(r20)
 2003da8:	9885883a 	add	r2,r19,r2
 2003dac:	b8800015 	stw	r2,0(r23)
 2003db0:	e5000215 	stw	r20,8(fp)
 2003db4:	b7003626 	beq	r22,fp,2003e90 <_malloc_r+0x58c>
 2003db8:	018003c4 	movi	r6,15
 2003dbc:	35404b36 	bltu	r6,r21,2003eec <_malloc_r+0x5e8>
 2003dc0:	00800044 	movi	r2,1
 2003dc4:	a0800115 	stw	r2,4(r20)
 2003dc8:	003fcd06 	br	2003d00 <_malloc_r+0x3fc>
 2003dcc:	2808d27a 	srli	r4,r5,9
 2003dd0:	2000371e 	bne	r4,zero,2003eb0 <_malloc_r+0x5ac>
 2003dd4:	2808d0fa 	srli	r4,r5,3
 2003dd8:	200690fa 	slli	r3,r4,3
 2003ddc:	1ad1883a 	add	r8,r3,r11
 2003de0:	41800217 	ldw	r6,8(r8)
 2003de4:	41805b26 	beq	r8,r6,2003f54 <_malloc_r+0x650>
 2003de8:	30800117 	ldw	r2,4(r6)
 2003dec:	00ffff04 	movi	r3,-4
 2003df0:	10c4703a 	and	r2,r2,r3
 2003df4:	2880022e 	bgeu	r5,r2,2003e00 <_malloc_r+0x4fc>
 2003df8:	31800217 	ldw	r6,8(r6)
 2003dfc:	41bffa1e 	bne	r8,r6,2003de8 <_malloc_r+0x4e4>
 2003e00:	32000317 	ldw	r8,12(r6)
 2003e04:	39c00117 	ldw	r7,4(r7)
 2003e08:	82000315 	stw	r8,12(r16)
 2003e0c:	81800215 	stw	r6,8(r16)
 2003e10:	070080b4 	movhi	fp,514
 2003e14:	e72b4304 	addi	fp,fp,-21236
 2003e18:	34000315 	stw	r16,12(r6)
 2003e1c:	44000215 	stw	r16,8(r8)
 2003e20:	003f3e06 	br	2003b1c <_malloc_r+0x218>
 2003e24:	63000044 	addi	r12,r12,1
 2003e28:	608000cc 	andi	r2,r12,3
 2003e2c:	10005d26 	beq	r2,zero,2003fa4 <_malloc_r+0x6a0>
 2003e30:	18c00204 	addi	r3,r3,8
 2003e34:	003f5106 	br	2003b7c <_malloc_r+0x278>
 2003e38:	8089883a 	add	r4,r16,r2
 2003e3c:	003f6d06 	br	2003bf4 <_malloc_r+0x2f0>
 2003e40:	00805504 	movi	r2,340
 2003e44:	10c02036 	bltu	r2,r3,2003ec8 <_malloc_r+0x5c4>
 2003e48:	8804d3fa 	srli	r2,r17,15
 2003e4c:	11801dc4 	addi	r6,r2,119
 2003e50:	300490fa 	slli	r2,r6,3
 2003e54:	003ed806 	br	20039b8 <_malloc_r+0xb4>
 2003e58:	48c000c4 	addi	r3,r9,3
 2003e5c:	003f3106 	br	2003b24 <_malloc_r+0x220>
 2003e60:	05c080b4 	movhi	r23,514
 2003e64:	bdf81c04 	addi	r23,r23,-8080
 2003e68:	b8800017 	ldw	r2,0(r23)
 2003e6c:	988d883a 	add	r6,r19,r2
 2003e70:	b9800015 	stw	r6,0(r23)
 2003e74:	293fb21e 	bne	r5,r4,2003d40 <_malloc_r+0x43c>
 2003e78:	2083ffcc 	andi	r2,r4,4095
 2003e7c:	103fb01e 	bne	r2,zero,2003d40 <_malloc_r+0x43c>
 2003e80:	e4000217 	ldw	r16,8(fp)
 2003e84:	9d45883a 	add	r2,r19,r21
 2003e88:	10800054 	ori	r2,r2,1
 2003e8c:	80800115 	stw	r2,4(r16)
 2003e90:	b8c00017 	ldw	r3,0(r23)
 2003e94:	d0a71217 	ldw	r2,-25528(gp)
 2003e98:	10c0012e 	bgeu	r2,r3,2003ea0 <_malloc_r+0x59c>
 2003e9c:	d0e71215 	stw	r3,-25528(gp)
 2003ea0:	d0a71317 	ldw	r2,-25524(gp)
 2003ea4:	10ff962e 	bgeu	r2,r3,2003d00 <_malloc_r+0x3fc>
 2003ea8:	d0e71315 	stw	r3,-25524(gp)
 2003eac:	003f9406 	br	2003d00 <_malloc_r+0x3fc>
 2003eb0:	00800104 	movi	r2,4
 2003eb4:	11001e36 	bltu	r2,r4,2003f30 <_malloc_r+0x62c>
 2003eb8:	2804d1ba 	srli	r2,r5,6
 2003ebc:	11000e04 	addi	r4,r2,56
 2003ec0:	200690fa 	slli	r3,r4,3
 2003ec4:	003fc506 	br	2003ddc <_malloc_r+0x4d8>
 2003ec8:	00815504 	movi	r2,1364
 2003ecc:	10c01d2e 	bgeu	r2,r3,2003f44 <_malloc_r+0x640>
 2003ed0:	01801f84 	movi	r6,126
 2003ed4:	0080fc04 	movi	r2,1008
 2003ed8:	003eb706 	br	20039b8 <_malloc_r+0xb4>
 2003edc:	00800204 	movi	r2,8
 2003ee0:	10cbc83a 	sub	r5,r2,r3
 2003ee4:	2169883a 	add	r20,r4,r5
 2003ee8:	003f9e06 	br	2003d64 <_malloc_r+0x460>
 2003eec:	00bffe04 	movi	r2,-8
 2003ef0:	a93ffd04 	addi	r4,r21,-12
 2003ef4:	2088703a 	and	r4,r4,r2
 2003ef8:	b10b883a 	add	r5,r22,r4
 2003efc:	00c00144 	movi	r3,5
 2003f00:	28c00215 	stw	r3,8(r5)
 2003f04:	28c00115 	stw	r3,4(r5)
 2003f08:	b0800117 	ldw	r2,4(r22)
 2003f0c:	1080004c 	andi	r2,r2,1
 2003f10:	2084b03a 	or	r2,r4,r2
 2003f14:	b0800115 	stw	r2,4(r22)
 2003f18:	313fdd2e 	bgeu	r6,r4,2003e90 <_malloc_r+0x58c>
 2003f1c:	b1400204 	addi	r5,r22,8
 2003f20:	9009883a 	mov	r4,r18
 2003f24:	2008c980 	call	2008c98 <_free_r>
 2003f28:	e4000217 	ldw	r16,8(fp)
 2003f2c:	003fd806 	br	2003e90 <_malloc_r+0x58c>
 2003f30:	00800504 	movi	r2,20
 2003f34:	11001536 	bltu	r2,r4,2003f8c <_malloc_r+0x688>
 2003f38:	210016c4 	addi	r4,r4,91
 2003f3c:	200690fa 	slli	r3,r4,3
 2003f40:	003fa606 	br	2003ddc <_malloc_r+0x4d8>
 2003f44:	8804d4ba 	srli	r2,r17,18
 2003f48:	11801f04 	addi	r6,r2,124
 2003f4c:	300490fa 	slli	r2,r6,3
 2003f50:	003e9906 	br	20039b8 <_malloc_r+0xb4>
 2003f54:	2009d0ba 	srai	r4,r4,2
 2003f58:	014080b4 	movhi	r5,514
 2003f5c:	296b4304 	addi	r5,r5,-21236
 2003f60:	00c00044 	movi	r3,1
 2003f64:	28800117 	ldw	r2,4(r5)
 2003f68:	1906983a 	sll	r3,r3,r4
 2003f6c:	10c4b03a 	or	r2,r2,r3
 2003f70:	28800115 	stw	r2,4(r5)
 2003f74:	003fa306 	br	2003e04 <_malloc_r+0x500>
 2003f78:	0027883a 	mov	r19,zero
 2003f7c:	00c00044 	movi	r3,1
 2003f80:	003f8606 	br	2003d9c <_malloc_r+0x498>
 2003f84:	d1200315 	stw	r4,-32756(gp)
 2003f88:	003f7306 	br	2003d58 <_malloc_r+0x454>
 2003f8c:	00801504 	movi	r2,84
 2003f90:	11001936 	bltu	r2,r4,2003ff8 <_malloc_r+0x6f4>
 2003f94:	2804d33a 	srli	r2,r5,12
 2003f98:	11001b84 	addi	r4,r2,110
 2003f9c:	200690fa 	slli	r3,r4,3
 2003fa0:	003f8e06 	br	2003ddc <_malloc_r+0x4d8>
 2003fa4:	480b883a 	mov	r5,r9
 2003fa8:	6807883a 	mov	r3,r13
 2003fac:	288000cc 	andi	r2,r5,3
 2003fb0:	18fffe04 	addi	r3,r3,-8
 2003fb4:	297fffc4 	addi	r5,r5,-1
 2003fb8:	10001526 	beq	r2,zero,2004010 <_malloc_r+0x70c>
 2003fbc:	18800217 	ldw	r2,8(r3)
 2003fc0:	10fffa26 	beq	r2,r3,2003fac <_malloc_r+0x6a8>
 2003fc4:	2109883a 	add	r4,r4,r4
 2003fc8:	393f1e36 	bltu	r7,r4,2003c44 <_malloc_r+0x340>
 2003fcc:	203f1d26 	beq	r4,zero,2003c44 <_malloc_r+0x340>
 2003fd0:	21c4703a 	and	r2,r4,r7
 2003fd4:	10000226 	beq	r2,zero,2003fe0 <_malloc_r+0x6dc>
 2003fd8:	6013883a 	mov	r9,r12
 2003fdc:	003ee106 	br	2003b64 <_malloc_r+0x260>
 2003fe0:	2109883a 	add	r4,r4,r4
 2003fe4:	3904703a 	and	r2,r7,r4
 2003fe8:	63000104 	addi	r12,r12,4
 2003fec:	103ffc26 	beq	r2,zero,2003fe0 <_malloc_r+0x6dc>
 2003ff0:	6013883a 	mov	r9,r12
 2003ff4:	003edb06 	br	2003b64 <_malloc_r+0x260>
 2003ff8:	00805504 	movi	r2,340
 2003ffc:	11000836 	bltu	r2,r4,2004020 <_malloc_r+0x71c>
 2004000:	2804d3fa 	srli	r2,r5,15
 2004004:	11001dc4 	addi	r4,r2,119
 2004008:	200690fa 	slli	r3,r4,3
 200400c:	003f7306 	br	2003ddc <_malloc_r+0x4d8>
 2004010:	0104303a 	nor	r2,zero,r4
 2004014:	388e703a 	and	r7,r7,r2
 2004018:	e1c00115 	stw	r7,4(fp)
 200401c:	003fe906 	br	2003fc4 <_malloc_r+0x6c0>
 2004020:	00815504 	movi	r2,1364
 2004024:	1100032e 	bgeu	r2,r4,2004034 <_malloc_r+0x730>
 2004028:	01001f84 	movi	r4,126
 200402c:	00c0fc04 	movi	r3,1008
 2004030:	003f6a06 	br	2003ddc <_malloc_r+0x4d8>
 2004034:	2804d4ba 	srli	r2,r5,18
 2004038:	11001f04 	addi	r4,r2,124
 200403c:	200690fa 	slli	r3,r4,3
 2004040:	003f6606 	br	2003ddc <_malloc_r+0x4d8>

02004044 <memcpy>:
 2004044:	01c003c4 	movi	r7,15
 2004048:	2007883a 	mov	r3,r4
 200404c:	3980032e 	bgeu	r7,r6,200405c <memcpy+0x18>
 2004050:	2904b03a 	or	r2,r5,r4
 2004054:	108000cc 	andi	r2,r2,3
 2004058:	10000926 	beq	r2,zero,2004080 <memcpy+0x3c>
 200405c:	30000626 	beq	r6,zero,2004078 <memcpy+0x34>
 2004060:	30cd883a 	add	r6,r6,r3
 2004064:	28800003 	ldbu	r2,0(r5)
 2004068:	29400044 	addi	r5,r5,1
 200406c:	18800005 	stb	r2,0(r3)
 2004070:	18c00044 	addi	r3,r3,1
 2004074:	30fffb1e 	bne	r6,r3,2004064 <memcpy+0x20>
 2004078:	2005883a 	mov	r2,r4
 200407c:	f800283a 	ret
 2004080:	3811883a 	mov	r8,r7
 2004084:	200f883a 	mov	r7,r4
 2004088:	28c00017 	ldw	r3,0(r5)
 200408c:	31bffc04 	addi	r6,r6,-16
 2004090:	38c00015 	stw	r3,0(r7)
 2004094:	28800117 	ldw	r2,4(r5)
 2004098:	38800115 	stw	r2,4(r7)
 200409c:	28c00217 	ldw	r3,8(r5)
 20040a0:	38c00215 	stw	r3,8(r7)
 20040a4:	28800317 	ldw	r2,12(r5)
 20040a8:	29400404 	addi	r5,r5,16
 20040ac:	38800315 	stw	r2,12(r7)
 20040b0:	39c00404 	addi	r7,r7,16
 20040b4:	41bff436 	bltu	r8,r6,2004088 <memcpy+0x44>
 20040b8:	008000c4 	movi	r2,3
 20040bc:	1180072e 	bgeu	r2,r6,20040dc <memcpy+0x98>
 20040c0:	1007883a 	mov	r3,r2
 20040c4:	28800017 	ldw	r2,0(r5)
 20040c8:	31bfff04 	addi	r6,r6,-4
 20040cc:	29400104 	addi	r5,r5,4
 20040d0:	38800015 	stw	r2,0(r7)
 20040d4:	39c00104 	addi	r7,r7,4
 20040d8:	19bffa36 	bltu	r3,r6,20040c4 <memcpy+0x80>
 20040dc:	3807883a 	mov	r3,r7
 20040e0:	003fde06 	br	200405c <memcpy+0x18>

020040e4 <memmove>:
 20040e4:	2807883a 	mov	r3,r5
 20040e8:	2011883a 	mov	r8,r4
 20040ec:	29000c2e 	bgeu	r5,r4,2004120 <memmove+0x3c>
 20040f0:	298f883a 	add	r7,r5,r6
 20040f4:	21c00a2e 	bgeu	r4,r7,2004120 <memmove+0x3c>
 20040f8:	30000726 	beq	r6,zero,2004118 <memmove+0x34>
 20040fc:	2187883a 	add	r3,r4,r6
 2004100:	198dc83a 	sub	r6,r3,r6
 2004104:	39ffffc4 	addi	r7,r7,-1
 2004108:	38800003 	ldbu	r2,0(r7)
 200410c:	18ffffc4 	addi	r3,r3,-1
 2004110:	18800005 	stb	r2,0(r3)
 2004114:	19bffb1e 	bne	r3,r6,2004104 <memmove+0x20>
 2004118:	2005883a 	mov	r2,r4
 200411c:	f800283a 	ret
 2004120:	01c003c4 	movi	r7,15
 2004124:	39800a36 	bltu	r7,r6,2004150 <memmove+0x6c>
 2004128:	303ffb26 	beq	r6,zero,2004118 <memmove+0x34>
 200412c:	400f883a 	mov	r7,r8
 2004130:	320d883a 	add	r6,r6,r8
 2004134:	28800003 	ldbu	r2,0(r5)
 2004138:	29400044 	addi	r5,r5,1
 200413c:	38800005 	stb	r2,0(r7)
 2004140:	39c00044 	addi	r7,r7,1
 2004144:	39bffb1e 	bne	r7,r6,2004134 <memmove+0x50>
 2004148:	2005883a 	mov	r2,r4
 200414c:	f800283a 	ret
 2004150:	1904b03a 	or	r2,r3,r4
 2004154:	108000cc 	andi	r2,r2,3
 2004158:	103ff31e 	bne	r2,zero,2004128 <memmove+0x44>
 200415c:	3811883a 	mov	r8,r7
 2004160:	180b883a 	mov	r5,r3
 2004164:	200f883a 	mov	r7,r4
 2004168:	28c00017 	ldw	r3,0(r5)
 200416c:	31bffc04 	addi	r6,r6,-16
 2004170:	38c00015 	stw	r3,0(r7)
 2004174:	28800117 	ldw	r2,4(r5)
 2004178:	38800115 	stw	r2,4(r7)
 200417c:	28c00217 	ldw	r3,8(r5)
 2004180:	38c00215 	stw	r3,8(r7)
 2004184:	28800317 	ldw	r2,12(r5)
 2004188:	29400404 	addi	r5,r5,16
 200418c:	38800315 	stw	r2,12(r7)
 2004190:	39c00404 	addi	r7,r7,16
 2004194:	41bff436 	bltu	r8,r6,2004168 <memmove+0x84>
 2004198:	008000c4 	movi	r2,3
 200419c:	1180072e 	bgeu	r2,r6,20041bc <memmove+0xd8>
 20041a0:	1007883a 	mov	r3,r2
 20041a4:	28800017 	ldw	r2,0(r5)
 20041a8:	31bfff04 	addi	r6,r6,-4
 20041ac:	29400104 	addi	r5,r5,4
 20041b0:	38800015 	stw	r2,0(r7)
 20041b4:	39c00104 	addi	r7,r7,4
 20041b8:	19bffa36 	bltu	r3,r6,20041a4 <memmove+0xc0>
 20041bc:	3811883a 	mov	r8,r7
 20041c0:	003fd906 	br	2004128 <memmove+0x44>

020041c4 <memset>:
 20041c4:	008000c4 	movi	r2,3
 20041c8:	29403fcc 	andi	r5,r5,255
 20041cc:	2007883a 	mov	r3,r4
 20041d0:	1180022e 	bgeu	r2,r6,20041dc <memset+0x18>
 20041d4:	2084703a 	and	r2,r4,r2
 20041d8:	10000826 	beq	r2,zero,20041fc <memset+0x38>
 20041dc:	30000526 	beq	r6,zero,20041f4 <memset+0x30>
 20041e0:	2805883a 	mov	r2,r5
 20041e4:	30cd883a 	add	r6,r6,r3
 20041e8:	18800005 	stb	r2,0(r3)
 20041ec:	18c00044 	addi	r3,r3,1
 20041f0:	19bffd1e 	bne	r3,r6,20041e8 <memset+0x24>
 20041f4:	2005883a 	mov	r2,r4
 20041f8:	f800283a 	ret
 20041fc:	2804923a 	slli	r2,r5,8
 2004200:	020003c4 	movi	r8,15
 2004204:	200f883a 	mov	r7,r4
 2004208:	2884b03a 	or	r2,r5,r2
 200420c:	1006943a 	slli	r3,r2,16
 2004210:	10c6b03a 	or	r3,r2,r3
 2004214:	41800a2e 	bgeu	r8,r6,2004240 <memset+0x7c>
 2004218:	4005883a 	mov	r2,r8
 200421c:	31bffc04 	addi	r6,r6,-16
 2004220:	38c00015 	stw	r3,0(r7)
 2004224:	38c00115 	stw	r3,4(r7)
 2004228:	38c00215 	stw	r3,8(r7)
 200422c:	38c00315 	stw	r3,12(r7)
 2004230:	39c00404 	addi	r7,r7,16
 2004234:	11bff936 	bltu	r2,r6,200421c <memset+0x58>
 2004238:	008000c4 	movi	r2,3
 200423c:	1180052e 	bgeu	r2,r6,2004254 <memset+0x90>
 2004240:	31bfff04 	addi	r6,r6,-4
 2004244:	008000c4 	movi	r2,3
 2004248:	38c00015 	stw	r3,0(r7)
 200424c:	39c00104 	addi	r7,r7,4
 2004250:	11bffb36 	bltu	r2,r6,2004240 <memset+0x7c>
 2004254:	3807883a 	mov	r3,r7
 2004258:	003fe006 	br	20041dc <memset+0x18>

0200425c <printf>:
 200425c:	defffb04 	addi	sp,sp,-20
 2004260:	dfc00115 	stw	ra,4(sp)
 2004264:	d9400215 	stw	r5,8(sp)
 2004268:	d9800315 	stw	r6,12(sp)
 200426c:	d9c00415 	stw	r7,16(sp)
 2004270:	008080b4 	movhi	r2,514
 2004274:	10b0e304 	addi	r2,r2,-15476
 2004278:	10c00017 	ldw	r3,0(r2)
 200427c:	200b883a 	mov	r5,r4
 2004280:	d8800204 	addi	r2,sp,8
 2004284:	19000217 	ldw	r4,8(r3)
 2004288:	100d883a 	mov	r6,r2
 200428c:	d8800015 	stw	r2,0(sp)
 2004290:	2006cd80 	call	2006cd8 <__vfprintf_internal>
 2004294:	dfc00117 	ldw	ra,4(sp)
 2004298:	dec00504 	addi	sp,sp,20
 200429c:	f800283a 	ret

020042a0 <_printf_r>:
 20042a0:	defffc04 	addi	sp,sp,-16
 20042a4:	dfc00115 	stw	ra,4(sp)
 20042a8:	d9800215 	stw	r6,8(sp)
 20042ac:	d9c00315 	stw	r7,12(sp)
 20042b0:	280d883a 	mov	r6,r5
 20042b4:	21400217 	ldw	r5,8(r4)
 20042b8:	d8c00204 	addi	r3,sp,8
 20042bc:	180f883a 	mov	r7,r3
 20042c0:	d8c00015 	stw	r3,0(sp)
 20042c4:	2004e140 	call	2004e14 <___vfprintf_internal_r>
 20042c8:	dfc00117 	ldw	ra,4(sp)
 20042cc:	dec00404 	addi	sp,sp,16
 20042d0:	f800283a 	ret

020042d4 <_puts_r>:
 20042d4:	defff604 	addi	sp,sp,-40
 20042d8:	dc400715 	stw	r17,28(sp)
 20042dc:	2023883a 	mov	r17,r4
 20042e0:	2809883a 	mov	r4,r5
 20042e4:	dfc00915 	stw	ra,36(sp)
 20042e8:	dcc00815 	stw	r19,32(sp)
 20042ec:	2827883a 	mov	r19,r5
 20042f0:	2004d2c0 	call	2004d2c <strlen>
 20042f4:	89400217 	ldw	r5,8(r17)
 20042f8:	00c080b4 	movhi	r3,514
 20042fc:	18e91e04 	addi	r3,r3,-23432
 2004300:	01c00044 	movi	r7,1
 2004304:	12000044 	addi	r8,r2,1
 2004308:	d8c00515 	stw	r3,20(sp)
 200430c:	d9c00615 	stw	r7,24(sp)
 2004310:	d8c00304 	addi	r3,sp,12
 2004314:	01c00084 	movi	r7,2
 2004318:	8809883a 	mov	r4,r17
 200431c:	d80d883a 	mov	r6,sp
 2004320:	d8c00015 	stw	r3,0(sp)
 2004324:	dcc00315 	stw	r19,12(sp)
 2004328:	da000215 	stw	r8,8(sp)
 200432c:	d9c00115 	stw	r7,4(sp)
 2004330:	d8800415 	stw	r2,16(sp)
 2004334:	2008fac0 	call	2008fac <__sfvwrite_r>
 2004338:	00ffffc4 	movi	r3,-1
 200433c:	10000626 	beq	r2,zero,2004358 <_puts_r+0x84>
 2004340:	1805883a 	mov	r2,r3
 2004344:	dfc00917 	ldw	ra,36(sp)
 2004348:	dcc00817 	ldw	r19,32(sp)
 200434c:	dc400717 	ldw	r17,28(sp)
 2004350:	dec00a04 	addi	sp,sp,40
 2004354:	f800283a 	ret
 2004358:	00c00284 	movi	r3,10
 200435c:	1805883a 	mov	r2,r3
 2004360:	dfc00917 	ldw	ra,36(sp)
 2004364:	dcc00817 	ldw	r19,32(sp)
 2004368:	dc400717 	ldw	r17,28(sp)
 200436c:	dec00a04 	addi	sp,sp,40
 2004370:	f800283a 	ret

02004374 <puts>:
 2004374:	008080b4 	movhi	r2,514
 2004378:	10b0e304 	addi	r2,r2,-15476
 200437c:	200b883a 	mov	r5,r4
 2004380:	11000017 	ldw	r4,0(r2)
 2004384:	20042d41 	jmpi	20042d4 <_puts_r>

02004388 <realloc>:
 2004388:	018080b4 	movhi	r6,514
 200438c:	31b0e304 	addi	r6,r6,-15476
 2004390:	2007883a 	mov	r3,r4
 2004394:	31000017 	ldw	r4,0(r6)
 2004398:	280d883a 	mov	r6,r5
 200439c:	180b883a 	mov	r5,r3
 20043a0:	20043a41 	jmpi	20043a4 <_realloc_r>

020043a4 <_realloc_r>:
 20043a4:	defff404 	addi	sp,sp,-48
 20043a8:	dd800815 	stw	r22,32(sp)
 20043ac:	dc800415 	stw	r18,16(sp)
 20043b0:	dc400315 	stw	r17,12(sp)
 20043b4:	dfc00b15 	stw	ra,44(sp)
 20043b8:	df000a15 	stw	fp,40(sp)
 20043bc:	ddc00915 	stw	r23,36(sp)
 20043c0:	dd400715 	stw	r21,28(sp)
 20043c4:	dd000615 	stw	r20,24(sp)
 20043c8:	dcc00515 	stw	r19,20(sp)
 20043cc:	dc000215 	stw	r16,8(sp)
 20043d0:	2825883a 	mov	r18,r5
 20043d4:	3023883a 	mov	r17,r6
 20043d8:	202d883a 	mov	r22,r4
 20043dc:	2800c926 	beq	r5,zero,2004704 <_realloc_r+0x360>
 20043e0:	200f3540 	call	200f354 <__malloc_lock>
 20043e4:	943ffe04 	addi	r16,r18,-8
 20043e8:	88c002c4 	addi	r3,r17,11
 20043ec:	00800584 	movi	r2,22
 20043f0:	82000117 	ldw	r8,4(r16)
 20043f4:	10c01b2e 	bgeu	r2,r3,2004464 <_realloc_r+0xc0>
 20043f8:	00bffe04 	movi	r2,-8
 20043fc:	188e703a 	and	r7,r3,r2
 2004400:	3839883a 	mov	fp,r7
 2004404:	38001a16 	blt	r7,zero,2004470 <_realloc_r+0xcc>
 2004408:	e4401936 	bltu	fp,r17,2004470 <_realloc_r+0xcc>
 200440c:	013fff04 	movi	r4,-4
 2004410:	4126703a 	and	r19,r8,r4
 2004414:	99c02616 	blt	r19,r7,20044b0 <_realloc_r+0x10c>
 2004418:	802b883a 	mov	r21,r16
 200441c:	9829883a 	mov	r20,r19
 2004420:	84000204 	addi	r16,r16,8
 2004424:	a80f883a 	mov	r7,r21
 2004428:	a70dc83a 	sub	r6,r20,fp
 200442c:	008003c4 	movi	r2,15
 2004430:	1180c136 	bltu	r2,r6,2004738 <_realloc_r+0x394>
 2004434:	38800117 	ldw	r2,4(r7)
 2004438:	a549883a 	add	r4,r20,r21
 200443c:	1080004c 	andi	r2,r2,1
 2004440:	a084b03a 	or	r2,r20,r2
 2004444:	38800115 	stw	r2,4(r7)
 2004448:	20c00117 	ldw	r3,4(r4)
 200444c:	18c00054 	ori	r3,r3,1
 2004450:	20c00115 	stw	r3,4(r4)
 2004454:	b009883a 	mov	r4,r22
 2004458:	200f45c0 	call	200f45c <__malloc_unlock>
 200445c:	8023883a 	mov	r17,r16
 2004460:	00000606 	br	200447c <_realloc_r+0xd8>
 2004464:	01c00404 	movi	r7,16
 2004468:	3839883a 	mov	fp,r7
 200446c:	e47fe72e 	bgeu	fp,r17,200440c <_realloc_r+0x68>
 2004470:	00800304 	movi	r2,12
 2004474:	0023883a 	mov	r17,zero
 2004478:	b0800015 	stw	r2,0(r22)
 200447c:	8805883a 	mov	r2,r17
 2004480:	dfc00b17 	ldw	ra,44(sp)
 2004484:	df000a17 	ldw	fp,40(sp)
 2004488:	ddc00917 	ldw	r23,36(sp)
 200448c:	dd800817 	ldw	r22,32(sp)
 2004490:	dd400717 	ldw	r21,28(sp)
 2004494:	dd000617 	ldw	r20,24(sp)
 2004498:	dcc00517 	ldw	r19,20(sp)
 200449c:	dc800417 	ldw	r18,16(sp)
 20044a0:	dc400317 	ldw	r17,12(sp)
 20044a4:	dc000217 	ldw	r16,8(sp)
 20044a8:	dec00c04 	addi	sp,sp,48
 20044ac:	f800283a 	ret
 20044b0:	008080b4 	movhi	r2,514
 20044b4:	10ab4304 	addi	r2,r2,-21236
 20044b8:	12400217 	ldw	r9,8(r2)
 20044bc:	84cd883a 	add	r6,r16,r19
 20044c0:	802b883a 	mov	r21,r16
 20044c4:	3240b926 	beq	r6,r9,20047ac <_realloc_r+0x408>
 20044c8:	31400117 	ldw	r5,4(r6)
 20044cc:	00bfff84 	movi	r2,-2
 20044d0:	2884703a 	and	r2,r5,r2
 20044d4:	1185883a 	add	r2,r2,r6
 20044d8:	10c00117 	ldw	r3,4(r2)
 20044dc:	18c0004c 	andi	r3,r3,1
 20044e0:	1807003a 	cmpeq	r3,r3,zero
 20044e4:	1800a326 	beq	r3,zero,2004774 <_realloc_r+0x3d0>
 20044e8:	2908703a 	and	r4,r5,r4
 20044ec:	9929883a 	add	r20,r19,r4
 20044f0:	a1c0a30e 	bge	r20,r7,2004780 <_realloc_r+0x3dc>
 20044f4:	4080004c 	andi	r2,r8,1
 20044f8:	1000551e 	bne	r2,zero,2004650 <_realloc_r+0x2ac>
 20044fc:	80800017 	ldw	r2,0(r16)
 2004500:	80afc83a 	sub	r23,r16,r2
 2004504:	b8c00117 	ldw	r3,4(r23)
 2004508:	00bfff04 	movi	r2,-4
 200450c:	1884703a 	and	r2,r3,r2
 2004510:	30002e26 	beq	r6,zero,20045cc <_realloc_r+0x228>
 2004514:	3240b926 	beq	r6,r9,20047fc <_realloc_r+0x458>
 2004518:	98a9883a 	add	r20,r19,r2
 200451c:	2509883a 	add	r4,r4,r20
 2004520:	d9000015 	stw	r4,0(sp)
 2004524:	21c02a16 	blt	r4,r7,20045d0 <_realloc_r+0x22c>
 2004528:	30800317 	ldw	r2,12(r6)
 200452c:	30c00217 	ldw	r3,8(r6)
 2004530:	01400904 	movi	r5,36
 2004534:	99bfff04 	addi	r6,r19,-4
 2004538:	18800315 	stw	r2,12(r3)
 200453c:	10c00215 	stw	r3,8(r2)
 2004540:	b9000317 	ldw	r4,12(r23)
 2004544:	b8800217 	ldw	r2,8(r23)
 2004548:	b82b883a 	mov	r21,r23
 200454c:	bc000204 	addi	r16,r23,8
 2004550:	20800215 	stw	r2,8(r4)
 2004554:	11000315 	stw	r4,12(r2)
 2004558:	2980e436 	bltu	r5,r6,20048ec <_realloc_r+0x548>
 200455c:	008004c4 	movi	r2,19
 2004560:	9009883a 	mov	r4,r18
 2004564:	8011883a 	mov	r8,r16
 2004568:	11800f2e 	bgeu	r2,r6,20045a8 <_realloc_r+0x204>
 200456c:	90800017 	ldw	r2,0(r18)
 2004570:	ba000404 	addi	r8,r23,16
 2004574:	91000204 	addi	r4,r18,8
 2004578:	b8800215 	stw	r2,8(r23)
 200457c:	90c00117 	ldw	r3,4(r18)
 2004580:	008006c4 	movi	r2,27
 2004584:	b8c00315 	stw	r3,12(r23)
 2004588:	1180072e 	bgeu	r2,r6,20045a8 <_realloc_r+0x204>
 200458c:	90c00217 	ldw	r3,8(r18)
 2004590:	ba000604 	addi	r8,r23,24
 2004594:	91000404 	addi	r4,r18,16
 2004598:	b8c00415 	stw	r3,16(r23)
 200459c:	90800317 	ldw	r2,12(r18)
 20045a0:	b8800515 	stw	r2,20(r23)
 20045a4:	3140e726 	beq	r6,r5,2004944 <_realloc_r+0x5a0>
 20045a8:	20800017 	ldw	r2,0(r4)
 20045ac:	dd000017 	ldw	r20,0(sp)
 20045b0:	b80f883a 	mov	r7,r23
 20045b4:	40800015 	stw	r2,0(r8)
 20045b8:	20c00117 	ldw	r3,4(r4)
 20045bc:	40c00115 	stw	r3,4(r8)
 20045c0:	20800217 	ldw	r2,8(r4)
 20045c4:	40800215 	stw	r2,8(r8)
 20045c8:	003f9706 	br	2004428 <_realloc_r+0x84>
 20045cc:	98a9883a 	add	r20,r19,r2
 20045d0:	a1c01f16 	blt	r20,r7,2004650 <_realloc_r+0x2ac>
 20045d4:	b8c00317 	ldw	r3,12(r23)
 20045d8:	b8800217 	ldw	r2,8(r23)
 20045dc:	99bfff04 	addi	r6,r19,-4
 20045e0:	01400904 	movi	r5,36
 20045e4:	b82b883a 	mov	r21,r23
 20045e8:	18800215 	stw	r2,8(r3)
 20045ec:	10c00315 	stw	r3,12(r2)
 20045f0:	bc000204 	addi	r16,r23,8
 20045f4:	2980c336 	bltu	r5,r6,2004904 <_realloc_r+0x560>
 20045f8:	008004c4 	movi	r2,19
 20045fc:	9009883a 	mov	r4,r18
 2004600:	8011883a 	mov	r8,r16
 2004604:	11800f2e 	bgeu	r2,r6,2004644 <_realloc_r+0x2a0>
 2004608:	90800017 	ldw	r2,0(r18)
 200460c:	ba000404 	addi	r8,r23,16
 2004610:	91000204 	addi	r4,r18,8
 2004614:	b8800215 	stw	r2,8(r23)
 2004618:	90c00117 	ldw	r3,4(r18)
 200461c:	008006c4 	movi	r2,27
 2004620:	b8c00315 	stw	r3,12(r23)
 2004624:	1180072e 	bgeu	r2,r6,2004644 <_realloc_r+0x2a0>
 2004628:	90c00217 	ldw	r3,8(r18)
 200462c:	ba000604 	addi	r8,r23,24
 2004630:	91000404 	addi	r4,r18,16
 2004634:	b8c00415 	stw	r3,16(r23)
 2004638:	90800317 	ldw	r2,12(r18)
 200463c:	b8800515 	stw	r2,20(r23)
 2004640:	3140c726 	beq	r6,r5,2004960 <_realloc_r+0x5bc>
 2004644:	20800017 	ldw	r2,0(r4)
 2004648:	b80f883a 	mov	r7,r23
 200464c:	003fd906 	br	20045b4 <_realloc_r+0x210>
 2004650:	880b883a 	mov	r5,r17
 2004654:	b009883a 	mov	r4,r22
 2004658:	20039040 	call	2003904 <_malloc_r>
 200465c:	1023883a 	mov	r17,r2
 2004660:	10002526 	beq	r2,zero,20046f8 <_realloc_r+0x354>
 2004664:	80800117 	ldw	r2,4(r16)
 2004668:	00ffff84 	movi	r3,-2
 200466c:	893ffe04 	addi	r4,r17,-8
 2004670:	10c4703a 	and	r2,r2,r3
 2004674:	8085883a 	add	r2,r16,r2
 2004678:	20809526 	beq	r4,r2,20048d0 <_realloc_r+0x52c>
 200467c:	99bfff04 	addi	r6,r19,-4
 2004680:	01c00904 	movi	r7,36
 2004684:	39804536 	bltu	r7,r6,200479c <_realloc_r+0x3f8>
 2004688:	008004c4 	movi	r2,19
 200468c:	9009883a 	mov	r4,r18
 2004690:	880b883a 	mov	r5,r17
 2004694:	11800f2e 	bgeu	r2,r6,20046d4 <_realloc_r+0x330>
 2004698:	90800017 	ldw	r2,0(r18)
 200469c:	89400204 	addi	r5,r17,8
 20046a0:	91000204 	addi	r4,r18,8
 20046a4:	88800015 	stw	r2,0(r17)
 20046a8:	90c00117 	ldw	r3,4(r18)
 20046ac:	008006c4 	movi	r2,27
 20046b0:	88c00115 	stw	r3,4(r17)
 20046b4:	1180072e 	bgeu	r2,r6,20046d4 <_realloc_r+0x330>
 20046b8:	90c00217 	ldw	r3,8(r18)
 20046bc:	89400404 	addi	r5,r17,16
 20046c0:	91000404 	addi	r4,r18,16
 20046c4:	88c00215 	stw	r3,8(r17)
 20046c8:	90800317 	ldw	r2,12(r18)
 20046cc:	88800315 	stw	r2,12(r17)
 20046d0:	31c09126 	beq	r6,r7,2004918 <_realloc_r+0x574>
 20046d4:	20800017 	ldw	r2,0(r4)
 20046d8:	28800015 	stw	r2,0(r5)
 20046dc:	20c00117 	ldw	r3,4(r4)
 20046e0:	28c00115 	stw	r3,4(r5)
 20046e4:	20800217 	ldw	r2,8(r4)
 20046e8:	28800215 	stw	r2,8(r5)
 20046ec:	900b883a 	mov	r5,r18
 20046f0:	b009883a 	mov	r4,r22
 20046f4:	2008c980 	call	2008c98 <_free_r>
 20046f8:	b009883a 	mov	r4,r22
 20046fc:	200f45c0 	call	200f45c <__malloc_unlock>
 2004700:	003f5e06 	br	200447c <_realloc_r+0xd8>
 2004704:	300b883a 	mov	r5,r6
 2004708:	dfc00b17 	ldw	ra,44(sp)
 200470c:	df000a17 	ldw	fp,40(sp)
 2004710:	ddc00917 	ldw	r23,36(sp)
 2004714:	dd800817 	ldw	r22,32(sp)
 2004718:	dd400717 	ldw	r21,28(sp)
 200471c:	dd000617 	ldw	r20,24(sp)
 2004720:	dcc00517 	ldw	r19,20(sp)
 2004724:	dc800417 	ldw	r18,16(sp)
 2004728:	dc400317 	ldw	r17,12(sp)
 200472c:	dc000217 	ldw	r16,8(sp)
 2004730:	dec00c04 	addi	sp,sp,48
 2004734:	20039041 	jmpi	2003904 <_malloc_r>
 2004738:	38800117 	ldw	r2,4(r7)
 200473c:	e54b883a 	add	r5,fp,r21
 2004740:	31000054 	ori	r4,r6,1
 2004744:	1080004c 	andi	r2,r2,1
 2004748:	1704b03a 	or	r2,r2,fp
 200474c:	38800115 	stw	r2,4(r7)
 2004750:	29000115 	stw	r4,4(r5)
 2004754:	2987883a 	add	r3,r5,r6
 2004758:	18800117 	ldw	r2,4(r3)
 200475c:	29400204 	addi	r5,r5,8
 2004760:	b009883a 	mov	r4,r22
 2004764:	10800054 	ori	r2,r2,1
 2004768:	18800115 	stw	r2,4(r3)
 200476c:	2008c980 	call	2008c98 <_free_r>
 2004770:	003f3806 	br	2004454 <_realloc_r+0xb0>
 2004774:	000d883a 	mov	r6,zero
 2004778:	0009883a 	mov	r4,zero
 200477c:	003f5d06 	br	20044f4 <_realloc_r+0x150>
 2004780:	30c00217 	ldw	r3,8(r6)
 2004784:	30800317 	ldw	r2,12(r6)
 2004788:	800f883a 	mov	r7,r16
 200478c:	84000204 	addi	r16,r16,8
 2004790:	10c00215 	stw	r3,8(r2)
 2004794:	18800315 	stw	r2,12(r3)
 2004798:	003f2306 	br	2004428 <_realloc_r+0x84>
 200479c:	8809883a 	mov	r4,r17
 20047a0:	900b883a 	mov	r5,r18
 20047a4:	20040e40 	call	20040e4 <memmove>
 20047a8:	003fd006 	br	20046ec <_realloc_r+0x348>
 20047ac:	30800117 	ldw	r2,4(r6)
 20047b0:	e0c00404 	addi	r3,fp,16
 20047b4:	1108703a 	and	r4,r2,r4
 20047b8:	9905883a 	add	r2,r19,r4
 20047bc:	10ff4d16 	blt	r2,r3,20044f4 <_realloc_r+0x150>
 20047c0:	1705c83a 	sub	r2,r2,fp
 20047c4:	870b883a 	add	r5,r16,fp
 20047c8:	10800054 	ori	r2,r2,1
 20047cc:	28800115 	stw	r2,4(r5)
 20047d0:	80c00117 	ldw	r3,4(r16)
 20047d4:	008080b4 	movhi	r2,514
 20047d8:	10ab4304 	addi	r2,r2,-21236
 20047dc:	b009883a 	mov	r4,r22
 20047e0:	18c0004c 	andi	r3,r3,1
 20047e4:	e0c6b03a 	or	r3,fp,r3
 20047e8:	11400215 	stw	r5,8(r2)
 20047ec:	80c00115 	stw	r3,4(r16)
 20047f0:	200f45c0 	call	200f45c <__malloc_unlock>
 20047f4:	84400204 	addi	r17,r16,8
 20047f8:	003f2006 	br	200447c <_realloc_r+0xd8>
 20047fc:	98a9883a 	add	r20,r19,r2
 2004800:	2509883a 	add	r4,r4,r20
 2004804:	e0800404 	addi	r2,fp,16
 2004808:	d9000115 	stw	r4,4(sp)
 200480c:	20bf7016 	blt	r4,r2,20045d0 <_realloc_r+0x22c>
 2004810:	b8c00317 	ldw	r3,12(r23)
 2004814:	b8800217 	ldw	r2,8(r23)
 2004818:	99bfff04 	addi	r6,r19,-4
 200481c:	01400904 	movi	r5,36
 2004820:	18800215 	stw	r2,8(r3)
 2004824:	10c00315 	stw	r3,12(r2)
 2004828:	bc400204 	addi	r17,r23,8
 200482c:	29804136 	bltu	r5,r6,2004934 <_realloc_r+0x590>
 2004830:	008004c4 	movi	r2,19
 2004834:	9009883a 	mov	r4,r18
 2004838:	880f883a 	mov	r7,r17
 200483c:	11800f2e 	bgeu	r2,r6,200487c <_realloc_r+0x4d8>
 2004840:	90800017 	ldw	r2,0(r18)
 2004844:	b9c00404 	addi	r7,r23,16
 2004848:	91000204 	addi	r4,r18,8
 200484c:	b8800215 	stw	r2,8(r23)
 2004850:	90c00117 	ldw	r3,4(r18)
 2004854:	008006c4 	movi	r2,27
 2004858:	b8c00315 	stw	r3,12(r23)
 200485c:	1180072e 	bgeu	r2,r6,200487c <_realloc_r+0x4d8>
 2004860:	90c00217 	ldw	r3,8(r18)
 2004864:	b9c00604 	addi	r7,r23,24
 2004868:	91000404 	addi	r4,r18,16
 200486c:	b8c00415 	stw	r3,16(r23)
 2004870:	90800317 	ldw	r2,12(r18)
 2004874:	b8800515 	stw	r2,20(r23)
 2004878:	31404026 	beq	r6,r5,200497c <_realloc_r+0x5d8>
 200487c:	20800017 	ldw	r2,0(r4)
 2004880:	38800015 	stw	r2,0(r7)
 2004884:	20c00117 	ldw	r3,4(r4)
 2004888:	38c00115 	stw	r3,4(r7)
 200488c:	20800217 	ldw	r2,8(r4)
 2004890:	38800215 	stw	r2,8(r7)
 2004894:	d8c00117 	ldw	r3,4(sp)
 2004898:	bf0b883a 	add	r5,r23,fp
 200489c:	b009883a 	mov	r4,r22
 20048a0:	1f05c83a 	sub	r2,r3,fp
 20048a4:	10800054 	ori	r2,r2,1
 20048a8:	28800115 	stw	r2,4(r5)
 20048ac:	b8c00117 	ldw	r3,4(r23)
 20048b0:	008080b4 	movhi	r2,514
 20048b4:	10ab4304 	addi	r2,r2,-21236
 20048b8:	11400215 	stw	r5,8(r2)
 20048bc:	18c0004c 	andi	r3,r3,1
 20048c0:	e0c6b03a 	or	r3,fp,r3
 20048c4:	b8c00115 	stw	r3,4(r23)
 20048c8:	200f45c0 	call	200f45c <__malloc_unlock>
 20048cc:	003eeb06 	br	200447c <_realloc_r+0xd8>
 20048d0:	20800117 	ldw	r2,4(r4)
 20048d4:	00ffff04 	movi	r3,-4
 20048d8:	800f883a 	mov	r7,r16
 20048dc:	10c4703a 	and	r2,r2,r3
 20048e0:	98a9883a 	add	r20,r19,r2
 20048e4:	84000204 	addi	r16,r16,8
 20048e8:	003ecf06 	br	2004428 <_realloc_r+0x84>
 20048ec:	900b883a 	mov	r5,r18
 20048f0:	8009883a 	mov	r4,r16
 20048f4:	20040e40 	call	20040e4 <memmove>
 20048f8:	dd000017 	ldw	r20,0(sp)
 20048fc:	b80f883a 	mov	r7,r23
 2004900:	003ec906 	br	2004428 <_realloc_r+0x84>
 2004904:	900b883a 	mov	r5,r18
 2004908:	8009883a 	mov	r4,r16
 200490c:	20040e40 	call	20040e4 <memmove>
 2004910:	b80f883a 	mov	r7,r23
 2004914:	003ec406 	br	2004428 <_realloc_r+0x84>
 2004918:	90c00417 	ldw	r3,16(r18)
 200491c:	89400604 	addi	r5,r17,24
 2004920:	91000604 	addi	r4,r18,24
 2004924:	88c00415 	stw	r3,16(r17)
 2004928:	90800517 	ldw	r2,20(r18)
 200492c:	88800515 	stw	r2,20(r17)
 2004930:	003f6806 	br	20046d4 <_realloc_r+0x330>
 2004934:	900b883a 	mov	r5,r18
 2004938:	8809883a 	mov	r4,r17
 200493c:	20040e40 	call	20040e4 <memmove>
 2004940:	003fd406 	br	2004894 <_realloc_r+0x4f0>
 2004944:	90c00417 	ldw	r3,16(r18)
 2004948:	91000604 	addi	r4,r18,24
 200494c:	ba000804 	addi	r8,r23,32
 2004950:	b8c00615 	stw	r3,24(r23)
 2004954:	90800517 	ldw	r2,20(r18)
 2004958:	b8800715 	stw	r2,28(r23)
 200495c:	003f1206 	br	20045a8 <_realloc_r+0x204>
 2004960:	90c00417 	ldw	r3,16(r18)
 2004964:	91000604 	addi	r4,r18,24
 2004968:	ba000804 	addi	r8,r23,32
 200496c:	b8c00615 	stw	r3,24(r23)
 2004970:	90800517 	ldw	r2,20(r18)
 2004974:	b8800715 	stw	r2,28(r23)
 2004978:	003f3206 	br	2004644 <_realloc_r+0x2a0>
 200497c:	90c00417 	ldw	r3,16(r18)
 2004980:	91000604 	addi	r4,r18,24
 2004984:	b9c00804 	addi	r7,r23,32
 2004988:	b8c00615 	stw	r3,24(r23)
 200498c:	90800517 	ldw	r2,20(r18)
 2004990:	b8800715 	stw	r2,28(r23)
 2004994:	003fb906 	br	200487c <_realloc_r+0x4d8>

02004998 <_sbrk_r>:
 2004998:	defffd04 	addi	sp,sp,-12
 200499c:	dc000015 	stw	r16,0(sp)
 20049a0:	040080b4 	movhi	r16,514
 20049a4:	8437f704 	addi	r16,r16,-8228
 20049a8:	dc400115 	stw	r17,4(sp)
 20049ac:	80000015 	stw	zero,0(r16)
 20049b0:	2023883a 	mov	r17,r4
 20049b4:	2809883a 	mov	r4,r5
 20049b8:	dfc00215 	stw	ra,8(sp)
 20049bc:	200ed440 	call	200ed44 <sbrk>
 20049c0:	1007883a 	mov	r3,r2
 20049c4:	00bfffc4 	movi	r2,-1
 20049c8:	18800626 	beq	r3,r2,20049e4 <_sbrk_r+0x4c>
 20049cc:	1805883a 	mov	r2,r3
 20049d0:	dfc00217 	ldw	ra,8(sp)
 20049d4:	dc400117 	ldw	r17,4(sp)
 20049d8:	dc000017 	ldw	r16,0(sp)
 20049dc:	dec00304 	addi	sp,sp,12
 20049e0:	f800283a 	ret
 20049e4:	80800017 	ldw	r2,0(r16)
 20049e8:	103ff826 	beq	r2,zero,20049cc <_sbrk_r+0x34>
 20049ec:	88800015 	stw	r2,0(r17)
 20049f0:	1805883a 	mov	r2,r3
 20049f4:	dfc00217 	ldw	ra,8(sp)
 20049f8:	dc400117 	ldw	r17,4(sp)
 20049fc:	dc000017 	ldw	r16,0(sp)
 2004a00:	dec00304 	addi	sp,sp,12
 2004a04:	f800283a 	ret

02004a08 <setjmp>:
 2004a08:	24000015 	stw	r16,0(r4)
 2004a0c:	24400115 	stw	r17,4(r4)
 2004a10:	24800215 	stw	r18,8(r4)
 2004a14:	24c00315 	stw	r19,12(r4)
 2004a18:	25000415 	stw	r20,16(r4)
 2004a1c:	25400515 	stw	r21,20(r4)
 2004a20:	25800615 	stw	r22,24(r4)
 2004a24:	25c00715 	stw	r23,28(r4)
 2004a28:	26800815 	stw	gp,32(r4)
 2004a2c:	26c00915 	stw	sp,36(r4)
 2004a30:	27000a15 	stw	fp,40(r4)
 2004a34:	27c00b15 	stw	ra,44(r4)
 2004a38:	0005883a 	mov	r2,zero
 2004a3c:	f800283a 	ret

02004a40 <longjmp>:
 2004a40:	24000017 	ldw	r16,0(r4)
 2004a44:	24400117 	ldw	r17,4(r4)
 2004a48:	24800217 	ldw	r18,8(r4)
 2004a4c:	24c00317 	ldw	r19,12(r4)
 2004a50:	25000417 	ldw	r20,16(r4)
 2004a54:	25400517 	ldw	r21,20(r4)
 2004a58:	25800617 	ldw	r22,24(r4)
 2004a5c:	25c00717 	ldw	r23,28(r4)
 2004a60:	26800817 	ldw	gp,32(r4)
 2004a64:	26c00917 	ldw	sp,36(r4)
 2004a68:	27000a17 	ldw	fp,40(r4)
 2004a6c:	27c00b17 	ldw	ra,44(r4)
 2004a70:	2805883a 	mov	r2,r5
 2004a74:	1000011e 	bne	r2,zero,2004a7c <longjmp+0x3c>
 2004a78:	00800044 	movi	r2,1
 2004a7c:	f800283a 	ret

02004a80 <sprintf>:
 2004a80:	deffe504 	addi	sp,sp,-108
 2004a84:	2013883a 	mov	r9,r4
 2004a88:	dfc01815 	stw	ra,96(sp)
 2004a8c:	d9801915 	stw	r6,100(sp)
 2004a90:	d9c01a15 	stw	r7,104(sp)
 2004a94:	d8801904 	addi	r2,sp,100
 2004a98:	d8800015 	stw	r2,0(sp)
 2004a9c:	008080b4 	movhi	r2,514
 2004aa0:	10b0e304 	addi	r2,r2,-15476
 2004aa4:	11000017 	ldw	r4,0(r2)
 2004aa8:	d9c00017 	ldw	r7,0(sp)
 2004aac:	00808204 	movi	r2,520
 2004ab0:	00e00034 	movhi	r3,32768
 2004ab4:	18ffffc4 	addi	r3,r3,-1
 2004ab8:	280d883a 	mov	r6,r5
 2004abc:	d880040d 	sth	r2,16(sp)
 2004ac0:	d9400104 	addi	r5,sp,4
 2004ac4:	00bfffc4 	movi	r2,-1
 2004ac8:	d8c00615 	stw	r3,24(sp)
 2004acc:	d8c00315 	stw	r3,12(sp)
 2004ad0:	da400515 	stw	r9,20(sp)
 2004ad4:	d880048d 	sth	r2,18(sp)
 2004ad8:	da400115 	stw	r9,4(sp)
 2004adc:	2004e140 	call	2004e14 <___vfprintf_internal_r>
 2004ae0:	d8c00117 	ldw	r3,4(sp)
 2004ae4:	18000005 	stb	zero,0(r3)
 2004ae8:	dfc01817 	ldw	ra,96(sp)
 2004aec:	dec01b04 	addi	sp,sp,108
 2004af0:	f800283a 	ret

02004af4 <_sprintf_r>:
 2004af4:	deffe604 	addi	sp,sp,-104
 2004af8:	2813883a 	mov	r9,r5
 2004afc:	dfc01815 	stw	ra,96(sp)
 2004b00:	d9c01915 	stw	r7,100(sp)
 2004b04:	d8801904 	addi	r2,sp,100
 2004b08:	d8800015 	stw	r2,0(sp)
 2004b0c:	100f883a 	mov	r7,r2
 2004b10:	00808204 	movi	r2,520
 2004b14:	00e00034 	movhi	r3,32768
 2004b18:	18ffffc4 	addi	r3,r3,-1
 2004b1c:	d880040d 	sth	r2,16(sp)
 2004b20:	d9400104 	addi	r5,sp,4
 2004b24:	00bfffc4 	movi	r2,-1
 2004b28:	d8c00615 	stw	r3,24(sp)
 2004b2c:	d8c00315 	stw	r3,12(sp)
 2004b30:	da400515 	stw	r9,20(sp)
 2004b34:	d880048d 	sth	r2,18(sp)
 2004b38:	da400115 	stw	r9,4(sp)
 2004b3c:	2004e140 	call	2004e14 <___vfprintf_internal_r>
 2004b40:	d8c00117 	ldw	r3,4(sp)
 2004b44:	18000005 	stb	zero,0(r3)
 2004b48:	dfc01817 	ldw	ra,96(sp)
 2004b4c:	dec01a04 	addi	sp,sp,104
 2004b50:	f800283a 	ret

02004b54 <strcat>:
 2004b54:	defffe04 	addi	sp,sp,-8
 2004b58:	208000cc 	andi	r2,r4,3
 2004b5c:	dc000015 	stw	r16,0(sp)
 2004b60:	dfc00115 	stw	ra,4(sp)
 2004b64:	2021883a 	mov	r16,r4
 2004b68:	1000161e 	bne	r2,zero,2004bc4 <strcat+0x70>
 2004b6c:	20c00017 	ldw	r3,0(r4)
 2004b70:	01bfbff4 	movhi	r6,65279
 2004b74:	31bfbfc4 	addi	r6,r6,-257
 2004b78:	02202074 	movhi	r8,32897
 2004b7c:	42202004 	addi	r8,r8,-32640
 2004b80:	1985883a 	add	r2,r3,r6
 2004b84:	1204703a 	and	r2,r2,r8
 2004b88:	00c6303a 	nor	r3,zero,r3
 2004b8c:	1886703a 	and	r3,r3,r2
 2004b90:	18000c1e 	bne	r3,zero,2004bc4 <strcat+0x70>
 2004b94:	300f883a 	mov	r7,r6
 2004b98:	400d883a 	mov	r6,r8
 2004b9c:	21000104 	addi	r4,r4,4
 2004ba0:	20800017 	ldw	r2,0(r4)
 2004ba4:	11c7883a 	add	r3,r2,r7
 2004ba8:	1986703a 	and	r3,r3,r6
 2004bac:	0084303a 	nor	r2,zero,r2
 2004bb0:	10c4703a 	and	r2,r2,r3
 2004bb4:	103ff926 	beq	r2,zero,2004b9c <strcat+0x48>
 2004bb8:	20800007 	ldb	r2,0(r4)
 2004bbc:	10000326 	beq	r2,zero,2004bcc <strcat+0x78>
 2004bc0:	21000044 	addi	r4,r4,1
 2004bc4:	20800007 	ldb	r2,0(r4)
 2004bc8:	103ffd1e 	bne	r2,zero,2004bc0 <strcat+0x6c>
 2004bcc:	2004ca00 	call	2004ca0 <strcpy>
 2004bd0:	8005883a 	mov	r2,r16
 2004bd4:	dfc00117 	ldw	ra,4(sp)
 2004bd8:	dc000017 	ldw	r16,0(sp)
 2004bdc:	dec00204 	addi	sp,sp,8
 2004be0:	f800283a 	ret

02004be4 <strcmp>:
 2004be4:	2144b03a 	or	r2,r4,r5
 2004be8:	108000cc 	andi	r2,r2,3
 2004bec:	10001d1e 	bne	r2,zero,2004c64 <strcmp+0x80>
 2004bf0:	200f883a 	mov	r7,r4
 2004bf4:	28800017 	ldw	r2,0(r5)
 2004bf8:	21000017 	ldw	r4,0(r4)
 2004bfc:	280d883a 	mov	r6,r5
 2004c00:	2080161e 	bne	r4,r2,2004c5c <strcmp+0x78>
 2004c04:	023fbff4 	movhi	r8,65279
 2004c08:	423fbfc4 	addi	r8,r8,-257
 2004c0c:	2207883a 	add	r3,r4,r8
 2004c10:	01602074 	movhi	r5,32897
 2004c14:	29602004 	addi	r5,r5,-32640
 2004c18:	1946703a 	and	r3,r3,r5
 2004c1c:	0104303a 	nor	r2,zero,r4
 2004c20:	10c4703a 	and	r2,r2,r3
 2004c24:	10001c1e 	bne	r2,zero,2004c98 <strcmp+0xb4>
 2004c28:	4013883a 	mov	r9,r8
 2004c2c:	2811883a 	mov	r8,r5
 2004c30:	00000106 	br	2004c38 <strcmp+0x54>
 2004c34:	1800181e 	bne	r3,zero,2004c98 <strcmp+0xb4>
 2004c38:	39c00104 	addi	r7,r7,4
 2004c3c:	39000017 	ldw	r4,0(r7)
 2004c40:	31800104 	addi	r6,r6,4
 2004c44:	31400017 	ldw	r5,0(r6)
 2004c48:	2245883a 	add	r2,r4,r9
 2004c4c:	1204703a 	and	r2,r2,r8
 2004c50:	0106303a 	nor	r3,zero,r4
 2004c54:	1886703a 	and	r3,r3,r2
 2004c58:	217ff626 	beq	r4,r5,2004c34 <strcmp+0x50>
 2004c5c:	3809883a 	mov	r4,r7
 2004c60:	300b883a 	mov	r5,r6
 2004c64:	20c00007 	ldb	r3,0(r4)
 2004c68:	1800051e 	bne	r3,zero,2004c80 <strcmp+0x9c>
 2004c6c:	00000606 	br	2004c88 <strcmp+0xa4>
 2004c70:	21000044 	addi	r4,r4,1
 2004c74:	20c00007 	ldb	r3,0(r4)
 2004c78:	29400044 	addi	r5,r5,1
 2004c7c:	18000226 	beq	r3,zero,2004c88 <strcmp+0xa4>
 2004c80:	28800007 	ldb	r2,0(r5)
 2004c84:	18bffa26 	beq	r3,r2,2004c70 <strcmp+0x8c>
 2004c88:	20c00003 	ldbu	r3,0(r4)
 2004c8c:	28800003 	ldbu	r2,0(r5)
 2004c90:	1885c83a 	sub	r2,r3,r2
 2004c94:	f800283a 	ret
 2004c98:	0005883a 	mov	r2,zero
 2004c9c:	f800283a 	ret

02004ca0 <strcpy>:
 2004ca0:	2904b03a 	or	r2,r5,r4
 2004ca4:	108000cc 	andi	r2,r2,3
 2004ca8:	10000826 	beq	r2,zero,2004ccc <strcpy+0x2c>
 2004cac:	2007883a 	mov	r3,r4
 2004cb0:	28800003 	ldbu	r2,0(r5)
 2004cb4:	29400044 	addi	r5,r5,1
 2004cb8:	18800005 	stb	r2,0(r3)
 2004cbc:	18c00044 	addi	r3,r3,1
 2004cc0:	103ffb1e 	bne	r2,zero,2004cb0 <strcpy+0x10>
 2004cc4:	2005883a 	mov	r2,r4
 2004cc8:	f800283a 	ret
 2004ccc:	29800017 	ldw	r6,0(r5)
 2004cd0:	023fbff4 	movhi	r8,65279
 2004cd4:	423fbfc4 	addi	r8,r8,-257
 2004cd8:	02a02074 	movhi	r10,32897
 2004cdc:	52a02004 	addi	r10,r10,-32640
 2004ce0:	3205883a 	add	r2,r6,r8
 2004ce4:	0186303a 	nor	r3,zero,r6
 2004ce8:	10c4703a 	and	r2,r2,r3
 2004cec:	1284703a 	and	r2,r2,r10
 2004cf0:	200f883a 	mov	r7,r4
 2004cf4:	10000b1e 	bne	r2,zero,2004d24 <strcpy+0x84>
 2004cf8:	4013883a 	mov	r9,r8
 2004cfc:	5011883a 	mov	r8,r10
 2004d00:	39800015 	stw	r6,0(r7)
 2004d04:	29400104 	addi	r5,r5,4
 2004d08:	29800017 	ldw	r6,0(r5)
 2004d0c:	39c00104 	addi	r7,r7,4
 2004d10:	3245883a 	add	r2,r6,r9
 2004d14:	0186303a 	nor	r3,zero,r6
 2004d18:	10c4703a 	and	r2,r2,r3
 2004d1c:	1204703a 	and	r2,r2,r8
 2004d20:	103ff726 	beq	r2,zero,2004d00 <strcpy+0x60>
 2004d24:	3807883a 	mov	r3,r7
 2004d28:	003fe106 	br	2004cb0 <strcpy+0x10>

02004d2c <strlen>:
 2004d2c:	208000cc 	andi	r2,r4,3
 2004d30:	2011883a 	mov	r8,r4
 2004d34:	1000161e 	bne	r2,zero,2004d90 <strlen+0x64>
 2004d38:	20c00017 	ldw	r3,0(r4)
 2004d3c:	017fbff4 	movhi	r5,65279
 2004d40:	297fbfc4 	addi	r5,r5,-257
 2004d44:	01e02074 	movhi	r7,32897
 2004d48:	39e02004 	addi	r7,r7,-32640
 2004d4c:	1945883a 	add	r2,r3,r5
 2004d50:	11c4703a 	and	r2,r2,r7
 2004d54:	00c6303a 	nor	r3,zero,r3
 2004d58:	1886703a 	and	r3,r3,r2
 2004d5c:	18000c1e 	bne	r3,zero,2004d90 <strlen+0x64>
 2004d60:	280d883a 	mov	r6,r5
 2004d64:	380b883a 	mov	r5,r7
 2004d68:	21000104 	addi	r4,r4,4
 2004d6c:	20800017 	ldw	r2,0(r4)
 2004d70:	1187883a 	add	r3,r2,r6
 2004d74:	1946703a 	and	r3,r3,r5
 2004d78:	0084303a 	nor	r2,zero,r2
 2004d7c:	10c4703a 	and	r2,r2,r3
 2004d80:	103ff926 	beq	r2,zero,2004d68 <strlen+0x3c>
 2004d84:	20800007 	ldb	r2,0(r4)
 2004d88:	10000326 	beq	r2,zero,2004d98 <strlen+0x6c>
 2004d8c:	21000044 	addi	r4,r4,1
 2004d90:	20800007 	ldb	r2,0(r4)
 2004d94:	103ffd1e 	bne	r2,zero,2004d8c <strlen+0x60>
 2004d98:	2205c83a 	sub	r2,r4,r8
 2004d9c:	f800283a 	ret

02004da0 <_vfiprintf_r>:
 2004da0:	defffe04 	addi	sp,sp,-8
 2004da4:	dfc00115 	stw	ra,4(sp)
 2004da8:	d9c00015 	stw	r7,0(sp)
 2004dac:	200aef40 	call	200aef4 <___vfiprintf_internal_r>
 2004db0:	dfc00117 	ldw	ra,4(sp)
 2004db4:	dec00204 	addi	sp,sp,8
 2004db8:	f800283a 	ret

02004dbc <__sprint_r>:
 2004dbc:	30800217 	ldw	r2,8(r6)
 2004dc0:	defffe04 	addi	sp,sp,-8
 2004dc4:	dc000015 	stw	r16,0(sp)
 2004dc8:	dfc00115 	stw	ra,4(sp)
 2004dcc:	3021883a 	mov	r16,r6
 2004dd0:	0007883a 	mov	r3,zero
 2004dd4:	1000061e 	bne	r2,zero,2004df0 <__sprint_r+0x34>
 2004dd8:	1805883a 	mov	r2,r3
 2004ddc:	30000115 	stw	zero,4(r6)
 2004de0:	dfc00117 	ldw	ra,4(sp)
 2004de4:	dc000017 	ldw	r16,0(sp)
 2004de8:	dec00204 	addi	sp,sp,8
 2004dec:	f800283a 	ret
 2004df0:	2008fac0 	call	2008fac <__sfvwrite_r>
 2004df4:	1007883a 	mov	r3,r2
 2004df8:	1805883a 	mov	r2,r3
 2004dfc:	80000115 	stw	zero,4(r16)
 2004e00:	80000215 	stw	zero,8(r16)
 2004e04:	dfc00117 	ldw	ra,4(sp)
 2004e08:	dc000017 	ldw	r16,0(sp)
 2004e0c:	dec00204 	addi	sp,sp,8
 2004e10:	f800283a 	ret

02004e14 <___vfprintf_internal_r>:
 2004e14:	defea404 	addi	sp,sp,-1392
 2004e18:	dd815815 	stw	r22,1376(sp)
 2004e1c:	dc015215 	stw	r16,1352(sp)
 2004e20:	d9c15115 	stw	r7,1348(sp)
 2004e24:	dfc15b15 	stw	ra,1388(sp)
 2004e28:	df015a15 	stw	fp,1384(sp)
 2004e2c:	ddc15915 	stw	r23,1380(sp)
 2004e30:	dd415715 	stw	r21,1372(sp)
 2004e34:	dd015615 	stw	r20,1368(sp)
 2004e38:	dcc15515 	stw	r19,1364(sp)
 2004e3c:	dc815415 	stw	r18,1360(sp)
 2004e40:	dc415315 	stw	r17,1356(sp)
 2004e44:	282d883a 	mov	r22,r5
 2004e48:	3021883a 	mov	r16,r6
 2004e4c:	d9014f15 	stw	r4,1340(sp)
 2004e50:	20095d00 	call	20095d0 <_localeconv_r>
 2004e54:	10800017 	ldw	r2,0(r2)
 2004e58:	d9c15117 	ldw	r7,1348(sp)
 2004e5c:	d8814915 	stw	r2,1316(sp)
 2004e60:	d8814f17 	ldw	r2,1340(sp)
 2004e64:	10000226 	beq	r2,zero,2004e70 <___vfprintf_internal_r+0x5c>
 2004e68:	10800e17 	ldw	r2,56(r2)
 2004e6c:	10020d26 	beq	r2,zero,20056a4 <___vfprintf_internal_r+0x890>
 2004e70:	b080030b 	ldhu	r2,12(r22)
 2004e74:	1080020c 	andi	r2,r2,8
 2004e78:	10020e26 	beq	r2,zero,20056b4 <___vfprintf_internal_r+0x8a0>
 2004e7c:	b0800417 	ldw	r2,16(r22)
 2004e80:	10020c26 	beq	r2,zero,20056b4 <___vfprintf_internal_r+0x8a0>
 2004e84:	b200030b 	ldhu	r8,12(r22)
 2004e88:	00800284 	movi	r2,10
 2004e8c:	40c0068c 	andi	r3,r8,26
 2004e90:	18802f1e 	bne	r3,r2,2004f50 <___vfprintf_internal_r+0x13c>
 2004e94:	b080038f 	ldh	r2,14(r22)
 2004e98:	10002d16 	blt	r2,zero,2004f50 <___vfprintf_internal_r+0x13c>
 2004e9c:	b240038b 	ldhu	r9,14(r22)
 2004ea0:	b2800717 	ldw	r10,28(r22)
 2004ea4:	b2c00917 	ldw	r11,36(r22)
 2004ea8:	d9014f17 	ldw	r4,1340(sp)
 2004eac:	dc402904 	addi	r17,sp,164
 2004eb0:	d8804004 	addi	r2,sp,256
 2004eb4:	00c10004 	movi	r3,1024
 2004eb8:	423fff4c 	andi	r8,r8,65533
 2004ebc:	800d883a 	mov	r6,r16
 2004ec0:	880b883a 	mov	r5,r17
 2004ec4:	da002c0d 	sth	r8,176(sp)
 2004ec8:	da402c8d 	sth	r9,178(sp)
 2004ecc:	da803015 	stw	r10,192(sp)
 2004ed0:	dac03215 	stw	r11,200(sp)
 2004ed4:	d8802d15 	stw	r2,180(sp)
 2004ed8:	d8c02e15 	stw	r3,184(sp)
 2004edc:	d8802915 	stw	r2,164(sp)
 2004ee0:	d8c02b15 	stw	r3,172(sp)
 2004ee4:	d8002f15 	stw	zero,188(sp)
 2004ee8:	2004e140 	call	2004e14 <___vfprintf_internal_r>
 2004eec:	d8814b15 	stw	r2,1324(sp)
 2004ef0:	10000416 	blt	r2,zero,2004f04 <___vfprintf_internal_r+0xf0>
 2004ef4:	d9014f17 	ldw	r4,1340(sp)
 2004ef8:	880b883a 	mov	r5,r17
 2004efc:	20086480 	call	2008648 <_fflush_r>
 2004f00:	1002321e 	bne	r2,zero,20057cc <___vfprintf_internal_r+0x9b8>
 2004f04:	d8802c0b 	ldhu	r2,176(sp)
 2004f08:	1080100c 	andi	r2,r2,64
 2004f0c:	10000326 	beq	r2,zero,2004f1c <___vfprintf_internal_r+0x108>
 2004f10:	b080030b 	ldhu	r2,12(r22)
 2004f14:	10801014 	ori	r2,r2,64
 2004f18:	b080030d 	sth	r2,12(r22)
 2004f1c:	d8814b17 	ldw	r2,1324(sp)
 2004f20:	dfc15b17 	ldw	ra,1388(sp)
 2004f24:	df015a17 	ldw	fp,1384(sp)
 2004f28:	ddc15917 	ldw	r23,1380(sp)
 2004f2c:	dd815817 	ldw	r22,1376(sp)
 2004f30:	dd415717 	ldw	r21,1372(sp)
 2004f34:	dd015617 	ldw	r20,1368(sp)
 2004f38:	dcc15517 	ldw	r19,1364(sp)
 2004f3c:	dc815417 	ldw	r18,1360(sp)
 2004f40:	dc415317 	ldw	r17,1356(sp)
 2004f44:	dc015217 	ldw	r16,1352(sp)
 2004f48:	dec15c04 	addi	sp,sp,1392
 2004f4c:	f800283a 	ret
 2004f50:	0005883a 	mov	r2,zero
 2004f54:	0007883a 	mov	r3,zero
 2004f58:	dd401904 	addi	r21,sp,100
 2004f5c:	d8814215 	stw	r2,1288(sp)
 2004f60:	802f883a 	mov	r23,r16
 2004f64:	d8c14315 	stw	r3,1292(sp)
 2004f68:	d8014b15 	stw	zero,1324(sp)
 2004f6c:	d8014815 	stw	zero,1312(sp)
 2004f70:	d8014415 	stw	zero,1296(sp)
 2004f74:	d8014715 	stw	zero,1308(sp)
 2004f78:	dd400c15 	stw	r21,48(sp)
 2004f7c:	d8000e15 	stw	zero,56(sp)
 2004f80:	d8000d15 	stw	zero,52(sp)
 2004f84:	b8800007 	ldb	r2,0(r23)
 2004f88:	10001926 	beq	r2,zero,2004ff0 <___vfprintf_internal_r+0x1dc>
 2004f8c:	00c00944 	movi	r3,37
 2004f90:	10c01726 	beq	r2,r3,2004ff0 <___vfprintf_internal_r+0x1dc>
 2004f94:	b821883a 	mov	r16,r23
 2004f98:	00000106 	br	2004fa0 <___vfprintf_internal_r+0x18c>
 2004f9c:	10c00326 	beq	r2,r3,2004fac <___vfprintf_internal_r+0x198>
 2004fa0:	84000044 	addi	r16,r16,1
 2004fa4:	80800007 	ldb	r2,0(r16)
 2004fa8:	103ffc1e 	bne	r2,zero,2004f9c <___vfprintf_internal_r+0x188>
 2004fac:	85e7c83a 	sub	r19,r16,r23
 2004fb0:	98000e26 	beq	r19,zero,2004fec <___vfprintf_internal_r+0x1d8>
 2004fb4:	dc800e17 	ldw	r18,56(sp)
 2004fb8:	dc400d17 	ldw	r17,52(sp)
 2004fbc:	008001c4 	movi	r2,7
 2004fc0:	94e5883a 	add	r18,r18,r19
 2004fc4:	8c400044 	addi	r17,r17,1
 2004fc8:	adc00015 	stw	r23,0(r21)
 2004fcc:	dc800e15 	stw	r18,56(sp)
 2004fd0:	acc00115 	stw	r19,4(r21)
 2004fd4:	dc400d15 	stw	r17,52(sp)
 2004fd8:	14428b16 	blt	r2,r17,2005a08 <___vfprintf_internal_r+0xbf4>
 2004fdc:	ad400204 	addi	r21,r21,8
 2004fe0:	d9014b17 	ldw	r4,1324(sp)
 2004fe4:	24c9883a 	add	r4,r4,r19
 2004fe8:	d9014b15 	stw	r4,1324(sp)
 2004fec:	802f883a 	mov	r23,r16
 2004ff0:	b8800007 	ldb	r2,0(r23)
 2004ff4:	10013c26 	beq	r2,zero,20054e8 <___vfprintf_internal_r+0x6d4>
 2004ff8:	bdc00044 	addi	r23,r23,1
 2004ffc:	d8000405 	stb	zero,16(sp)
 2005000:	b8c00007 	ldb	r3,0(r23)
 2005004:	04ffffc4 	movi	r19,-1
 2005008:	d8014c15 	stw	zero,1328(sp)
 200500c:	d8014a15 	stw	zero,1320(sp)
 2005010:	d8c14d15 	stw	r3,1332(sp)
 2005014:	bdc00044 	addi	r23,r23,1
 2005018:	d9414d17 	ldw	r5,1332(sp)
 200501c:	00801604 	movi	r2,88
 2005020:	28fff804 	addi	r3,r5,-32
 2005024:	10c06036 	bltu	r2,r3,20051a8 <___vfprintf_internal_r+0x394>
 2005028:	18c5883a 	add	r2,r3,r3
 200502c:	1085883a 	add	r2,r2,r2
 2005030:	00c08034 	movhi	r3,512
 2005034:	18d41104 	addi	r3,r3,20548
 2005038:	10c5883a 	add	r2,r2,r3
 200503c:	11000017 	ldw	r4,0(r2)
 2005040:	2000683a 	jmp	r4
 2005044:	02005fb8 	rdprs	r8,zero,382
 2005048:	020051a8 	cmpgeui	r8,zero,326
 200504c:	020051a8 	cmpgeui	r8,zero,326
 2005050:	02005fa4 	muli	r8,zero,382
 2005054:	020051a8 	cmpgeui	r8,zero,326
 2005058:	020051a8 	cmpgeui	r8,zero,326
 200505c:	020051a8 	cmpgeui	r8,zero,326
 2005060:	020051a8 	cmpgeui	r8,zero,326
 2005064:	020051a8 	cmpgeui	r8,zero,326
 2005068:	020051a8 	cmpgeui	r8,zero,326
 200506c:	02005d84 	movi	r8,374
 2005070:	02005f94 	movui	r8,382
 2005074:	020051a8 	cmpgeui	r8,zero,326
 2005078:	02005d9c 	xori	r8,zero,374
 200507c:	0200603c 	xorhi	r8,zero,384
 2005080:	020051a8 	cmpgeui	r8,zero,326
 2005084:	02006028 	cmpgeui	r8,zero,384
 2005088:	02005fe4 	muli	r8,zero,383
 200508c:	02005fe4 	muli	r8,zero,383
 2005090:	02005fe4 	muli	r8,zero,383
 2005094:	02005fe4 	muli	r8,zero,383
 2005098:	02005fe4 	muli	r8,zero,383
 200509c:	02005fe4 	muli	r8,zero,383
 20050a0:	02005fe4 	muli	r8,zero,383
 20050a4:	02005fe4 	muli	r8,zero,383
 20050a8:	02005fe4 	muli	r8,zero,383
 20050ac:	020051a8 	cmpgeui	r8,zero,326
 20050b0:	020051a8 	cmpgeui	r8,zero,326
 20050b4:	020051a8 	cmpgeui	r8,zero,326
 20050b8:	020051a8 	cmpgeui	r8,zero,326
 20050bc:	020051a8 	cmpgeui	r8,zero,326
 20050c0:	020051a8 	cmpgeui	r8,zero,326
 20050c4:	020051a8 	cmpgeui	r8,zero,326
 20050c8:	020051a8 	cmpgeui	r8,zero,326
 20050cc:	020051a8 	cmpgeui	r8,zero,326
 20050d0:	020051a8 	cmpgeui	r8,zero,326
 20050d4:	02005800 	call	200580 <OSCtxSw_SWITCH_PC+0x200540>
 20050d8:	02005e6c 	andhi	r8,zero,377
 20050dc:	020051a8 	cmpgeui	r8,zero,326
 20050e0:	02005e6c 	andhi	r8,zero,377
 20050e4:	020051a8 	cmpgeui	r8,zero,326
 20050e8:	020051a8 	cmpgeui	r8,zero,326
 20050ec:	020051a8 	cmpgeui	r8,zero,326
 20050f0:	020051a8 	cmpgeui	r8,zero,326
 20050f4:	02005fd0 	cmplti	r8,zero,383
 20050f8:	020051a8 	cmpgeui	r8,zero,326
 20050fc:	020051a8 	cmpgeui	r8,zero,326
 2005100:	020058b4 	movhi	r8,354
 2005104:	020051a8 	cmpgeui	r8,zero,326
 2005108:	020051a8 	cmpgeui	r8,zero,326
 200510c:	020051a8 	cmpgeui	r8,zero,326
 2005110:	020051a8 	cmpgeui	r8,zero,326
 2005114:	020051a8 	cmpgeui	r8,zero,326
 2005118:	02005900 	call	200590 <OSCtxSw_SWITCH_PC+0x200550>
 200511c:	020051a8 	cmpgeui	r8,zero,326
 2005120:	020051a8 	cmpgeui	r8,zero,326
 2005124:	02005f20 	cmpeqi	r8,zero,380
 2005128:	020051a8 	cmpgeui	r8,zero,326
 200512c:	020051a8 	cmpgeui	r8,zero,326
 2005130:	020051a8 	cmpgeui	r8,zero,326
 2005134:	020051a8 	cmpgeui	r8,zero,326
 2005138:	020051a8 	cmpgeui	r8,zero,326
 200513c:	020051a8 	cmpgeui	r8,zero,326
 2005140:	020051a8 	cmpgeui	r8,zero,326
 2005144:	020051a8 	cmpgeui	r8,zero,326
 2005148:	020051a8 	cmpgeui	r8,zero,326
 200514c:	020051a8 	cmpgeui	r8,zero,326
 2005150:	02005ef4 	movhi	r8,379
 2005154:	0200580c 	andi	r8,zero,352
 2005158:	02005e6c 	andhi	r8,zero,377
 200515c:	02005e6c 	andhi	r8,zero,377
 2005160:	02005e6c 	andhi	r8,zero,377
 2005164:	02005e58 	cmpnei	r8,zero,377
 2005168:	0200580c 	andi	r8,zero,352
 200516c:	020051a8 	cmpgeui	r8,zero,326
 2005170:	020051a8 	cmpgeui	r8,zero,326
 2005174:	02005de0 	cmpeqi	r8,zero,375
 2005178:	020051a8 	cmpgeui	r8,zero,326
 200517c:	02005db0 	cmpltui	r8,zero,374
 2005180:	020058c0 	call	20058c <OSCtxSw_SWITCH_PC+0x20054c>
 2005184:	02005e10 	cmplti	r8,zero,376
 2005188:	02005dfc 	xorhi	r8,zero,375
 200518c:	020051a8 	cmpgeui	r8,zero,326
 2005190:	020060a4 	muli	r8,zero,386
 2005194:	020051a8 	cmpgeui	r8,zero,326
 2005198:	0200590c 	andi	r8,zero,356
 200519c:	020051a8 	cmpgeui	r8,zero,326
 20051a0:	020051a8 	cmpgeui	r8,zero,326
 20051a4:	02005f84 	movi	r8,382
 20051a8:	d9014d17 	ldw	r4,1332(sp)
 20051ac:	2000ce26 	beq	r4,zero,20054e8 <___vfprintf_internal_r+0x6d4>
 20051b0:	01400044 	movi	r5,1
 20051b4:	d9800f04 	addi	r6,sp,60
 20051b8:	d9c14015 	stw	r7,1280(sp)
 20051bc:	d9414515 	stw	r5,1300(sp)
 20051c0:	d9814115 	stw	r6,1284(sp)
 20051c4:	280f883a 	mov	r7,r5
 20051c8:	d9000f05 	stb	r4,60(sp)
 20051cc:	d8000405 	stb	zero,16(sp)
 20051d0:	d8014615 	stw	zero,1304(sp)
 20051d4:	d8c14c17 	ldw	r3,1328(sp)
 20051d8:	1880008c 	andi	r2,r3,2
 20051dc:	1005003a 	cmpeq	r2,r2,zero
 20051e0:	d8815015 	stw	r2,1344(sp)
 20051e4:	1000031e 	bne	r2,zero,20051f4 <___vfprintf_internal_r+0x3e0>
 20051e8:	d9014517 	ldw	r4,1300(sp)
 20051ec:	21000084 	addi	r4,r4,2
 20051f0:	d9014515 	stw	r4,1300(sp)
 20051f4:	d9414c17 	ldw	r5,1328(sp)
 20051f8:	2940210c 	andi	r5,r5,132
 20051fc:	d9414e15 	stw	r5,1336(sp)
 2005200:	28002d1e 	bne	r5,zero,20052b8 <___vfprintf_internal_r+0x4a4>
 2005204:	d9814a17 	ldw	r6,1320(sp)
 2005208:	d8814517 	ldw	r2,1300(sp)
 200520c:	30a1c83a 	sub	r16,r6,r2
 2005210:	0400290e 	bge	zero,r16,20052b8 <___vfprintf_internal_r+0x4a4>
 2005214:	00800404 	movi	r2,16
 2005218:	14045e0e 	bge	r2,r16,2006394 <___vfprintf_internal_r+0x1580>
 200521c:	dc800e17 	ldw	r18,56(sp)
 2005220:	dc400d17 	ldw	r17,52(sp)
 2005224:	1027883a 	mov	r19,r2
 2005228:	070080b4 	movhi	fp,514
 200522c:	e7293a84 	addi	fp,fp,-23318
 2005230:	050001c4 	movi	r20,7
 2005234:	00000306 	br	2005244 <___vfprintf_internal_r+0x430>
 2005238:	843ffc04 	addi	r16,r16,-16
 200523c:	ad400204 	addi	r21,r21,8
 2005240:	9c00130e 	bge	r19,r16,2005290 <___vfprintf_internal_r+0x47c>
 2005244:	94800404 	addi	r18,r18,16
 2005248:	8c400044 	addi	r17,r17,1
 200524c:	af000015 	stw	fp,0(r21)
 2005250:	acc00115 	stw	r19,4(r21)
 2005254:	dc800e15 	stw	r18,56(sp)
 2005258:	dc400d15 	stw	r17,52(sp)
 200525c:	a47ff60e 	bge	r20,r17,2005238 <___vfprintf_internal_r+0x424>
 2005260:	d9014f17 	ldw	r4,1340(sp)
 2005264:	b00b883a 	mov	r5,r22
 2005268:	d9800c04 	addi	r6,sp,48
 200526c:	d9c15115 	stw	r7,1348(sp)
 2005270:	2004dbc0 	call	2004dbc <__sprint_r>
 2005274:	d9c15117 	ldw	r7,1348(sp)
 2005278:	10009e1e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 200527c:	843ffc04 	addi	r16,r16,-16
 2005280:	dc800e17 	ldw	r18,56(sp)
 2005284:	dc400d17 	ldw	r17,52(sp)
 2005288:	dd401904 	addi	r21,sp,100
 200528c:	9c3fed16 	blt	r19,r16,2005244 <___vfprintf_internal_r+0x430>
 2005290:	9425883a 	add	r18,r18,r16
 2005294:	8c400044 	addi	r17,r17,1
 2005298:	008001c4 	movi	r2,7
 200529c:	af000015 	stw	fp,0(r21)
 20052a0:	ac000115 	stw	r16,4(r21)
 20052a4:	dc800e15 	stw	r18,56(sp)
 20052a8:	dc400d15 	stw	r17,52(sp)
 20052ac:	1441f516 	blt	r2,r17,2005a84 <___vfprintf_internal_r+0xc70>
 20052b0:	ad400204 	addi	r21,r21,8
 20052b4:	00000206 	br	20052c0 <___vfprintf_internal_r+0x4ac>
 20052b8:	dc800e17 	ldw	r18,56(sp)
 20052bc:	dc400d17 	ldw	r17,52(sp)
 20052c0:	d8800407 	ldb	r2,16(sp)
 20052c4:	10000b26 	beq	r2,zero,20052f4 <___vfprintf_internal_r+0x4e0>
 20052c8:	00800044 	movi	r2,1
 20052cc:	94800044 	addi	r18,r18,1
 20052d0:	8c400044 	addi	r17,r17,1
 20052d4:	a8800115 	stw	r2,4(r21)
 20052d8:	d8c00404 	addi	r3,sp,16
 20052dc:	008001c4 	movi	r2,7
 20052e0:	a8c00015 	stw	r3,0(r21)
 20052e4:	dc800e15 	stw	r18,56(sp)
 20052e8:	dc400d15 	stw	r17,52(sp)
 20052ec:	1441da16 	blt	r2,r17,2005a58 <___vfprintf_internal_r+0xc44>
 20052f0:	ad400204 	addi	r21,r21,8
 20052f4:	d9015017 	ldw	r4,1344(sp)
 20052f8:	20000b1e 	bne	r4,zero,2005328 <___vfprintf_internal_r+0x514>
 20052fc:	d8800444 	addi	r2,sp,17
 2005300:	94800084 	addi	r18,r18,2
 2005304:	8c400044 	addi	r17,r17,1
 2005308:	a8800015 	stw	r2,0(r21)
 200530c:	00c00084 	movi	r3,2
 2005310:	008001c4 	movi	r2,7
 2005314:	a8c00115 	stw	r3,4(r21)
 2005318:	dc800e15 	stw	r18,56(sp)
 200531c:	dc400d15 	stw	r17,52(sp)
 2005320:	1441c216 	blt	r2,r17,2005a2c <___vfprintf_internal_r+0xc18>
 2005324:	ad400204 	addi	r21,r21,8
 2005328:	d9414e17 	ldw	r5,1336(sp)
 200532c:	00802004 	movi	r2,128
 2005330:	2880b126 	beq	r5,r2,20055f8 <___vfprintf_internal_r+0x7e4>
 2005334:	d8c14617 	ldw	r3,1304(sp)
 2005338:	19e1c83a 	sub	r16,r3,r7
 200533c:	0400260e 	bge	zero,r16,20053d8 <___vfprintf_internal_r+0x5c4>
 2005340:	00800404 	movi	r2,16
 2005344:	1403cf0e 	bge	r2,r16,2006284 <___vfprintf_internal_r+0x1470>
 2005348:	1027883a 	mov	r19,r2
 200534c:	070080b4 	movhi	fp,514
 2005350:	e7293684 	addi	fp,fp,-23334
 2005354:	050001c4 	movi	r20,7
 2005358:	00000306 	br	2005368 <___vfprintf_internal_r+0x554>
 200535c:	843ffc04 	addi	r16,r16,-16
 2005360:	ad400204 	addi	r21,r21,8
 2005364:	9c00130e 	bge	r19,r16,20053b4 <___vfprintf_internal_r+0x5a0>
 2005368:	94800404 	addi	r18,r18,16
 200536c:	8c400044 	addi	r17,r17,1
 2005370:	af000015 	stw	fp,0(r21)
 2005374:	acc00115 	stw	r19,4(r21)
 2005378:	dc800e15 	stw	r18,56(sp)
 200537c:	dc400d15 	stw	r17,52(sp)
 2005380:	a47ff60e 	bge	r20,r17,200535c <___vfprintf_internal_r+0x548>
 2005384:	d9014f17 	ldw	r4,1340(sp)
 2005388:	b00b883a 	mov	r5,r22
 200538c:	d9800c04 	addi	r6,sp,48
 2005390:	d9c15115 	stw	r7,1348(sp)
 2005394:	2004dbc0 	call	2004dbc <__sprint_r>
 2005398:	d9c15117 	ldw	r7,1348(sp)
 200539c:	1000551e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 20053a0:	843ffc04 	addi	r16,r16,-16
 20053a4:	dc800e17 	ldw	r18,56(sp)
 20053a8:	dc400d17 	ldw	r17,52(sp)
 20053ac:	dd401904 	addi	r21,sp,100
 20053b0:	9c3fed16 	blt	r19,r16,2005368 <___vfprintf_internal_r+0x554>
 20053b4:	9425883a 	add	r18,r18,r16
 20053b8:	8c400044 	addi	r17,r17,1
 20053bc:	008001c4 	movi	r2,7
 20053c0:	af000015 	stw	fp,0(r21)
 20053c4:	ac000115 	stw	r16,4(r21)
 20053c8:	dc800e15 	stw	r18,56(sp)
 20053cc:	dc400d15 	stw	r17,52(sp)
 20053d0:	14418216 	blt	r2,r17,20059dc <___vfprintf_internal_r+0xbc8>
 20053d4:	ad400204 	addi	r21,r21,8
 20053d8:	d9014c17 	ldw	r4,1328(sp)
 20053dc:	2080400c 	andi	r2,r4,256
 20053e0:	10004a1e 	bne	r2,zero,200550c <___vfprintf_internal_r+0x6f8>
 20053e4:	d9414117 	ldw	r5,1284(sp)
 20053e8:	91e5883a 	add	r18,r18,r7
 20053ec:	8c400044 	addi	r17,r17,1
 20053f0:	008001c4 	movi	r2,7
 20053f4:	a9400015 	stw	r5,0(r21)
 20053f8:	a9c00115 	stw	r7,4(r21)
 20053fc:	dc800e15 	stw	r18,56(sp)
 2005400:	dc400d15 	stw	r17,52(sp)
 2005404:	14416716 	blt	r2,r17,20059a4 <___vfprintf_internal_r+0xb90>
 2005408:	a8c00204 	addi	r3,r21,8
 200540c:	d9814c17 	ldw	r6,1328(sp)
 2005410:	3080010c 	andi	r2,r6,4
 2005414:	10002826 	beq	r2,zero,20054b8 <___vfprintf_internal_r+0x6a4>
 2005418:	d8814a17 	ldw	r2,1320(sp)
 200541c:	d9014517 	ldw	r4,1300(sp)
 2005420:	1121c83a 	sub	r16,r2,r4
 2005424:	0400240e 	bge	zero,r16,20054b8 <___vfprintf_internal_r+0x6a4>
 2005428:	00800404 	movi	r2,16
 200542c:	1404550e 	bge	r2,r16,2006584 <___vfprintf_internal_r+0x1770>
 2005430:	dc400d17 	ldw	r17,52(sp)
 2005434:	1027883a 	mov	r19,r2
 2005438:	070080b4 	movhi	fp,514
 200543c:	e7293a84 	addi	fp,fp,-23318
 2005440:	050001c4 	movi	r20,7
 2005444:	00000306 	br	2005454 <___vfprintf_internal_r+0x640>
 2005448:	843ffc04 	addi	r16,r16,-16
 200544c:	18c00204 	addi	r3,r3,8
 2005450:	9c00110e 	bge	r19,r16,2005498 <___vfprintf_internal_r+0x684>
 2005454:	94800404 	addi	r18,r18,16
 2005458:	8c400044 	addi	r17,r17,1
 200545c:	1f000015 	stw	fp,0(r3)
 2005460:	1cc00115 	stw	r19,4(r3)
 2005464:	dc800e15 	stw	r18,56(sp)
 2005468:	dc400d15 	stw	r17,52(sp)
 200546c:	a47ff60e 	bge	r20,r17,2005448 <___vfprintf_internal_r+0x634>
 2005470:	d9014f17 	ldw	r4,1340(sp)
 2005474:	b00b883a 	mov	r5,r22
 2005478:	d9800c04 	addi	r6,sp,48
 200547c:	2004dbc0 	call	2004dbc <__sprint_r>
 2005480:	10001c1e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2005484:	843ffc04 	addi	r16,r16,-16
 2005488:	dc800e17 	ldw	r18,56(sp)
 200548c:	dc400d17 	ldw	r17,52(sp)
 2005490:	d8c01904 	addi	r3,sp,100
 2005494:	9c3fef16 	blt	r19,r16,2005454 <___vfprintf_internal_r+0x640>
 2005498:	9425883a 	add	r18,r18,r16
 200549c:	8c400044 	addi	r17,r17,1
 20054a0:	008001c4 	movi	r2,7
 20054a4:	1f000015 	stw	fp,0(r3)
 20054a8:	1c000115 	stw	r16,4(r3)
 20054ac:	dc800e15 	stw	r18,56(sp)
 20054b0:	dc400d15 	stw	r17,52(sp)
 20054b4:	1440cb16 	blt	r2,r17,20057e4 <___vfprintf_internal_r+0x9d0>
 20054b8:	d8814a17 	ldw	r2,1320(sp)
 20054bc:	d9414517 	ldw	r5,1300(sp)
 20054c0:	1140010e 	bge	r2,r5,20054c8 <___vfprintf_internal_r+0x6b4>
 20054c4:	2805883a 	mov	r2,r5
 20054c8:	d9814b17 	ldw	r6,1324(sp)
 20054cc:	308d883a 	add	r6,r6,r2
 20054d0:	d9814b15 	stw	r6,1324(sp)
 20054d4:	90013b1e 	bne	r18,zero,20059c4 <___vfprintf_internal_r+0xbb0>
 20054d8:	d9c14017 	ldw	r7,1280(sp)
 20054dc:	dd401904 	addi	r21,sp,100
 20054e0:	d8000d15 	stw	zero,52(sp)
 20054e4:	003ea706 	br	2004f84 <___vfprintf_internal_r+0x170>
 20054e8:	d8800e17 	ldw	r2,56(sp)
 20054ec:	1005451e 	bne	r2,zero,2006a04 <___vfprintf_internal_r+0x1bf0>
 20054f0:	d8000d15 	stw	zero,52(sp)
 20054f4:	b080030b 	ldhu	r2,12(r22)
 20054f8:	1080100c 	andi	r2,r2,64
 20054fc:	103e8726 	beq	r2,zero,2004f1c <___vfprintf_internal_r+0x108>
 2005500:	00bfffc4 	movi	r2,-1
 2005504:	d8814b15 	stw	r2,1324(sp)
 2005508:	003e8406 	br	2004f1c <___vfprintf_internal_r+0x108>
 200550c:	d9814d17 	ldw	r6,1332(sp)
 2005510:	00801944 	movi	r2,101
 2005514:	11806e16 	blt	r2,r6,20056d0 <___vfprintf_internal_r+0x8bc>
 2005518:	d9414717 	ldw	r5,1308(sp)
 200551c:	00c00044 	movi	r3,1
 2005520:	1943490e 	bge	r3,r5,2006248 <___vfprintf_internal_r+0x1434>
 2005524:	d8814117 	ldw	r2,1284(sp)
 2005528:	94800044 	addi	r18,r18,1
 200552c:	8c400044 	addi	r17,r17,1
 2005530:	a8800015 	stw	r2,0(r21)
 2005534:	008001c4 	movi	r2,7
 2005538:	a8c00115 	stw	r3,4(r21)
 200553c:	dc800e15 	stw	r18,56(sp)
 2005540:	dc400d15 	stw	r17,52(sp)
 2005544:	1441ca16 	blt	r2,r17,2005c70 <___vfprintf_internal_r+0xe5c>
 2005548:	a8c00204 	addi	r3,r21,8
 200554c:	d9014917 	ldw	r4,1316(sp)
 2005550:	00800044 	movi	r2,1
 2005554:	94800044 	addi	r18,r18,1
 2005558:	8c400044 	addi	r17,r17,1
 200555c:	18800115 	stw	r2,4(r3)
 2005560:	008001c4 	movi	r2,7
 2005564:	19000015 	stw	r4,0(r3)
 2005568:	dc800e15 	stw	r18,56(sp)
 200556c:	dc400d15 	stw	r17,52(sp)
 2005570:	1441b616 	blt	r2,r17,2005c4c <___vfprintf_internal_r+0xe38>
 2005574:	1cc00204 	addi	r19,r3,8
 2005578:	d9014217 	ldw	r4,1288(sp)
 200557c:	d9414317 	ldw	r5,1292(sp)
 2005580:	000d883a 	mov	r6,zero
 2005584:	000f883a 	mov	r7,zero
 2005588:	200d7f00 	call	200d7f0 <__nedf2>
 200558c:	10017426 	beq	r2,zero,2005b60 <___vfprintf_internal_r+0xd4c>
 2005590:	d9414717 	ldw	r5,1308(sp)
 2005594:	d9814117 	ldw	r6,1284(sp)
 2005598:	8c400044 	addi	r17,r17,1
 200559c:	2c85883a 	add	r2,r5,r18
 20055a0:	14bfffc4 	addi	r18,r2,-1
 20055a4:	28bfffc4 	addi	r2,r5,-1
 20055a8:	30c00044 	addi	r3,r6,1
 20055ac:	98800115 	stw	r2,4(r19)
 20055b0:	008001c4 	movi	r2,7
 20055b4:	98c00015 	stw	r3,0(r19)
 20055b8:	dc800e15 	stw	r18,56(sp)
 20055bc:	dc400d15 	stw	r17,52(sp)
 20055c0:	14418e16 	blt	r2,r17,2005bfc <___vfprintf_internal_r+0xde8>
 20055c4:	9cc00204 	addi	r19,r19,8
 20055c8:	d9414817 	ldw	r5,1312(sp)
 20055cc:	d8800804 	addi	r2,sp,32
 20055d0:	8c400044 	addi	r17,r17,1
 20055d4:	9165883a 	add	r18,r18,r5
 20055d8:	98800015 	stw	r2,0(r19)
 20055dc:	008001c4 	movi	r2,7
 20055e0:	99400115 	stw	r5,4(r19)
 20055e4:	dc800e15 	stw	r18,56(sp)
 20055e8:	dc400d15 	stw	r17,52(sp)
 20055ec:	1440ed16 	blt	r2,r17,20059a4 <___vfprintf_internal_r+0xb90>
 20055f0:	98c00204 	addi	r3,r19,8
 20055f4:	003f8506 	br	200540c <___vfprintf_internal_r+0x5f8>
 20055f8:	d9814a17 	ldw	r6,1320(sp)
 20055fc:	d8814517 	ldw	r2,1300(sp)
 2005600:	30a1c83a 	sub	r16,r6,r2
 2005604:	043f4b0e 	bge	zero,r16,2005334 <___vfprintf_internal_r+0x520>
 2005608:	00800404 	movi	r2,16
 200560c:	14043a0e 	bge	r2,r16,20066f8 <___vfprintf_internal_r+0x18e4>
 2005610:	1027883a 	mov	r19,r2
 2005614:	070080b4 	movhi	fp,514
 2005618:	e7293684 	addi	fp,fp,-23334
 200561c:	050001c4 	movi	r20,7
 2005620:	00000306 	br	2005630 <___vfprintf_internal_r+0x81c>
 2005624:	843ffc04 	addi	r16,r16,-16
 2005628:	ad400204 	addi	r21,r21,8
 200562c:	9c00130e 	bge	r19,r16,200567c <___vfprintf_internal_r+0x868>
 2005630:	94800404 	addi	r18,r18,16
 2005634:	8c400044 	addi	r17,r17,1
 2005638:	af000015 	stw	fp,0(r21)
 200563c:	acc00115 	stw	r19,4(r21)
 2005640:	dc800e15 	stw	r18,56(sp)
 2005644:	dc400d15 	stw	r17,52(sp)
 2005648:	a47ff60e 	bge	r20,r17,2005624 <___vfprintf_internal_r+0x810>
 200564c:	d9014f17 	ldw	r4,1340(sp)
 2005650:	b00b883a 	mov	r5,r22
 2005654:	d9800c04 	addi	r6,sp,48
 2005658:	d9c15115 	stw	r7,1348(sp)
 200565c:	2004dbc0 	call	2004dbc <__sprint_r>
 2005660:	d9c15117 	ldw	r7,1348(sp)
 2005664:	103fa31e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2005668:	843ffc04 	addi	r16,r16,-16
 200566c:	dc800e17 	ldw	r18,56(sp)
 2005670:	dc400d17 	ldw	r17,52(sp)
 2005674:	dd401904 	addi	r21,sp,100
 2005678:	9c3fed16 	blt	r19,r16,2005630 <___vfprintf_internal_r+0x81c>
 200567c:	9425883a 	add	r18,r18,r16
 2005680:	8c400044 	addi	r17,r17,1
 2005684:	008001c4 	movi	r2,7
 2005688:	af000015 	stw	fp,0(r21)
 200568c:	ac000115 	stw	r16,4(r21)
 2005690:	dc800e15 	stw	r18,56(sp)
 2005694:	dc400d15 	stw	r17,52(sp)
 2005698:	14416116 	blt	r2,r17,2005c20 <___vfprintf_internal_r+0xe0c>
 200569c:	ad400204 	addi	r21,r21,8
 20056a0:	003f2406 	br	2005334 <___vfprintf_internal_r+0x520>
 20056a4:	d9014f17 	ldw	r4,1340(sp)
 20056a8:	20088e00 	call	20088e0 <__sinit>
 20056ac:	d9c15117 	ldw	r7,1348(sp)
 20056b0:	003def06 	br	2004e70 <___vfprintf_internal_r+0x5c>
 20056b4:	d9014f17 	ldw	r4,1340(sp)
 20056b8:	b00b883a 	mov	r5,r22
 20056bc:	d9c15115 	stw	r7,1348(sp)
 20056c0:	2006cfc0 	call	2006cfc <__swsetup_r>
 20056c4:	d9c15117 	ldw	r7,1348(sp)
 20056c8:	103dee26 	beq	r2,zero,2004e84 <___vfprintf_internal_r+0x70>
 20056cc:	003f8c06 	br	2005500 <___vfprintf_internal_r+0x6ec>
 20056d0:	d9014217 	ldw	r4,1288(sp)
 20056d4:	d9414317 	ldw	r5,1292(sp)
 20056d8:	000d883a 	mov	r6,zero
 20056dc:	000f883a 	mov	r7,zero
 20056e0:	200d7680 	call	200d768 <__eqdf2>
 20056e4:	1000f21e 	bne	r2,zero,2005ab0 <___vfprintf_internal_r+0xc9c>
 20056e8:	008080b4 	movhi	r2,514
 20056ec:	10a93604 	addi	r2,r2,-23336
 20056f0:	94800044 	addi	r18,r18,1
 20056f4:	8c400044 	addi	r17,r17,1
 20056f8:	a8800015 	stw	r2,0(r21)
 20056fc:	00c00044 	movi	r3,1
 2005700:	008001c4 	movi	r2,7
 2005704:	a8c00115 	stw	r3,4(r21)
 2005708:	dc800e15 	stw	r18,56(sp)
 200570c:	dc400d15 	stw	r17,52(sp)
 2005710:	14430016 	blt	r2,r17,2006314 <___vfprintf_internal_r+0x1500>
 2005714:	a8c00204 	addi	r3,r21,8
 2005718:	d8800517 	ldw	r2,20(sp)
 200571c:	d9014717 	ldw	r4,1308(sp)
 2005720:	11015c0e 	bge	r2,r4,2005c94 <___vfprintf_internal_r+0xe80>
 2005724:	dc400d17 	ldw	r17,52(sp)
 2005728:	d9814917 	ldw	r6,1316(sp)
 200572c:	00800044 	movi	r2,1
 2005730:	94800044 	addi	r18,r18,1
 2005734:	8c400044 	addi	r17,r17,1
 2005738:	18800115 	stw	r2,4(r3)
 200573c:	008001c4 	movi	r2,7
 2005740:	19800015 	stw	r6,0(r3)
 2005744:	dc800e15 	stw	r18,56(sp)
 2005748:	dc400d15 	stw	r17,52(sp)
 200574c:	14431616 	blt	r2,r17,20063a8 <___vfprintf_internal_r+0x1594>
 2005750:	18c00204 	addi	r3,r3,8
 2005754:	d8814717 	ldw	r2,1308(sp)
 2005758:	143fffc4 	addi	r16,r2,-1
 200575c:	043f2b0e 	bge	zero,r16,200540c <___vfprintf_internal_r+0x5f8>
 2005760:	00800404 	movi	r2,16
 2005764:	1402a80e 	bge	r2,r16,2006208 <___vfprintf_internal_r+0x13f4>
 2005768:	dc400d17 	ldw	r17,52(sp)
 200576c:	1027883a 	mov	r19,r2
 2005770:	070080b4 	movhi	fp,514
 2005774:	e7293684 	addi	fp,fp,-23334
 2005778:	050001c4 	movi	r20,7
 200577c:	00000306 	br	200578c <___vfprintf_internal_r+0x978>
 2005780:	18c00204 	addi	r3,r3,8
 2005784:	843ffc04 	addi	r16,r16,-16
 2005788:	9c02a20e 	bge	r19,r16,2006214 <___vfprintf_internal_r+0x1400>
 200578c:	94800404 	addi	r18,r18,16
 2005790:	8c400044 	addi	r17,r17,1
 2005794:	1f000015 	stw	fp,0(r3)
 2005798:	1cc00115 	stw	r19,4(r3)
 200579c:	dc800e15 	stw	r18,56(sp)
 20057a0:	dc400d15 	stw	r17,52(sp)
 20057a4:	a47ff60e 	bge	r20,r17,2005780 <___vfprintf_internal_r+0x96c>
 20057a8:	d9014f17 	ldw	r4,1340(sp)
 20057ac:	b00b883a 	mov	r5,r22
 20057b0:	d9800c04 	addi	r6,sp,48
 20057b4:	2004dbc0 	call	2004dbc <__sprint_r>
 20057b8:	103f4e1e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 20057bc:	dc800e17 	ldw	r18,56(sp)
 20057c0:	dc400d17 	ldw	r17,52(sp)
 20057c4:	d8c01904 	addi	r3,sp,100
 20057c8:	003fee06 	br	2005784 <___vfprintf_internal_r+0x970>
 20057cc:	d8802c0b 	ldhu	r2,176(sp)
 20057d0:	00ffffc4 	movi	r3,-1
 20057d4:	d8c14b15 	stw	r3,1324(sp)
 20057d8:	1080100c 	andi	r2,r2,64
 20057dc:	103dcc1e 	bne	r2,zero,2004f10 <___vfprintf_internal_r+0xfc>
 20057e0:	003dce06 	br	2004f1c <___vfprintf_internal_r+0x108>
 20057e4:	d9014f17 	ldw	r4,1340(sp)
 20057e8:	b00b883a 	mov	r5,r22
 20057ec:	d9800c04 	addi	r6,sp,48
 20057f0:	2004dbc0 	call	2004dbc <__sprint_r>
 20057f4:	103f3f1e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 20057f8:	dc800e17 	ldw	r18,56(sp)
 20057fc:	003f2e06 	br	20054b8 <___vfprintf_internal_r+0x6a4>
 2005800:	d9414c17 	ldw	r5,1328(sp)
 2005804:	29400414 	ori	r5,r5,16
 2005808:	d9414c15 	stw	r5,1328(sp)
 200580c:	d9814c17 	ldw	r6,1328(sp)
 2005810:	3080080c 	andi	r2,r6,32
 2005814:	10014f1e 	bne	r2,zero,2005d54 <___vfprintf_internal_r+0xf40>
 2005818:	d8c14c17 	ldw	r3,1328(sp)
 200581c:	1880040c 	andi	r2,r3,16
 2005820:	1002f01e 	bne	r2,zero,20063e4 <___vfprintf_internal_r+0x15d0>
 2005824:	d9014c17 	ldw	r4,1328(sp)
 2005828:	2080100c 	andi	r2,r4,64
 200582c:	1002ed26 	beq	r2,zero,20063e4 <___vfprintf_internal_r+0x15d0>
 2005830:	3880000f 	ldh	r2,0(r7)
 2005834:	39c00104 	addi	r7,r7,4
 2005838:	d9c14015 	stw	r7,1280(sp)
 200583c:	1023d7fa 	srai	r17,r2,31
 2005840:	1021883a 	mov	r16,r2
 2005844:	88037816 	blt	r17,zero,2006628 <___vfprintf_internal_r+0x1814>
 2005848:	01000044 	movi	r4,1
 200584c:	98000416 	blt	r19,zero,2005860 <___vfprintf_internal_r+0xa4c>
 2005850:	d8c14c17 	ldw	r3,1328(sp)
 2005854:	00bfdfc4 	movi	r2,-129
 2005858:	1886703a 	and	r3,r3,r2
 200585c:	d8c14c15 	stw	r3,1328(sp)
 2005860:	8444b03a 	or	r2,r16,r17
 2005864:	10022c1e 	bne	r2,zero,2006118 <___vfprintf_internal_r+0x1304>
 2005868:	98022b1e 	bne	r19,zero,2006118 <___vfprintf_internal_r+0x1304>
 200586c:	20803fcc 	andi	r2,r4,255
 2005870:	1002a126 	beq	r2,zero,20062f8 <___vfprintf_internal_r+0x14e4>
 2005874:	d8c01904 	addi	r3,sp,100
 2005878:	dd000f04 	addi	r20,sp,60
 200587c:	d8c14115 	stw	r3,1284(sp)
 2005880:	d8c14117 	ldw	r3,1284(sp)
 2005884:	dcc14515 	stw	r19,1300(sp)
 2005888:	a0c5c83a 	sub	r2,r20,r3
 200588c:	11c00a04 	addi	r7,r2,40
 2005890:	99c0010e 	bge	r19,r7,2005898 <___vfprintf_internal_r+0xa84>
 2005894:	d9c14515 	stw	r7,1300(sp)
 2005898:	dcc14615 	stw	r19,1304(sp)
 200589c:	d8800407 	ldb	r2,16(sp)
 20058a0:	103e4c26 	beq	r2,zero,20051d4 <___vfprintf_internal_r+0x3c0>
 20058a4:	d8814517 	ldw	r2,1300(sp)
 20058a8:	10800044 	addi	r2,r2,1
 20058ac:	d8814515 	stw	r2,1300(sp)
 20058b0:	003e4806 	br	20051d4 <___vfprintf_internal_r+0x3c0>
 20058b4:	d9814c17 	ldw	r6,1328(sp)
 20058b8:	31800414 	ori	r6,r6,16
 20058bc:	d9814c15 	stw	r6,1328(sp)
 20058c0:	d8c14c17 	ldw	r3,1328(sp)
 20058c4:	1880080c 	andi	r2,r3,32
 20058c8:	1001271e 	bne	r2,zero,2005d68 <___vfprintf_internal_r+0xf54>
 20058cc:	d9414c17 	ldw	r5,1328(sp)
 20058d0:	2880040c 	andi	r2,r5,16
 20058d4:	1002bc1e 	bne	r2,zero,20063c8 <___vfprintf_internal_r+0x15b4>
 20058d8:	d9814c17 	ldw	r6,1328(sp)
 20058dc:	3080100c 	andi	r2,r6,64
 20058e0:	1002b926 	beq	r2,zero,20063c8 <___vfprintf_internal_r+0x15b4>
 20058e4:	3c00000b 	ldhu	r16,0(r7)
 20058e8:	0009883a 	mov	r4,zero
 20058ec:	39c00104 	addi	r7,r7,4
 20058f0:	0023883a 	mov	r17,zero
 20058f4:	d9c14015 	stw	r7,1280(sp)
 20058f8:	d8000405 	stb	zero,16(sp)
 20058fc:	003fd306 	br	200584c <___vfprintf_internal_r+0xa38>
 2005900:	d9014c17 	ldw	r4,1328(sp)
 2005904:	21000414 	ori	r4,r4,16
 2005908:	d9014c15 	stw	r4,1328(sp)
 200590c:	d9414c17 	ldw	r5,1328(sp)
 2005910:	2880080c 	andi	r2,r5,32
 2005914:	1001081e 	bne	r2,zero,2005d38 <___vfprintf_internal_r+0xf24>
 2005918:	d8c14c17 	ldw	r3,1328(sp)
 200591c:	1880040c 	andi	r2,r3,16
 2005920:	1002b61e 	bne	r2,zero,20063fc <___vfprintf_internal_r+0x15e8>
 2005924:	d9014c17 	ldw	r4,1328(sp)
 2005928:	2080100c 	andi	r2,r4,64
 200592c:	1002b326 	beq	r2,zero,20063fc <___vfprintf_internal_r+0x15e8>
 2005930:	3c00000b 	ldhu	r16,0(r7)
 2005934:	01000044 	movi	r4,1
 2005938:	39c00104 	addi	r7,r7,4
 200593c:	0023883a 	mov	r17,zero
 2005940:	d9c14015 	stw	r7,1280(sp)
 2005944:	d8000405 	stb	zero,16(sp)
 2005948:	003fc006 	br	200584c <___vfprintf_internal_r+0xa38>
 200594c:	d9014f17 	ldw	r4,1340(sp)
 2005950:	b00b883a 	mov	r5,r22
 2005954:	d9800c04 	addi	r6,sp,48
 2005958:	2004dbc0 	call	2004dbc <__sprint_r>
 200595c:	103ee51e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2005960:	dc800e17 	ldw	r18,56(sp)
 2005964:	d8c01904 	addi	r3,sp,100
 2005968:	d9814c17 	ldw	r6,1328(sp)
 200596c:	3080004c 	andi	r2,r6,1
 2005970:	1005003a 	cmpeq	r2,r2,zero
 2005974:	103ea51e 	bne	r2,zero,200540c <___vfprintf_internal_r+0x5f8>
 2005978:	00800044 	movi	r2,1
 200597c:	dc400d17 	ldw	r17,52(sp)
 2005980:	18800115 	stw	r2,4(r3)
 2005984:	d8814917 	ldw	r2,1316(sp)
 2005988:	94800044 	addi	r18,r18,1
 200598c:	8c400044 	addi	r17,r17,1
 2005990:	18800015 	stw	r2,0(r3)
 2005994:	008001c4 	movi	r2,7
 2005998:	dc800e15 	stw	r18,56(sp)
 200599c:	dc400d15 	stw	r17,52(sp)
 20059a0:	1442240e 	bge	r2,r17,2006234 <___vfprintf_internal_r+0x1420>
 20059a4:	d9014f17 	ldw	r4,1340(sp)
 20059a8:	b00b883a 	mov	r5,r22
 20059ac:	d9800c04 	addi	r6,sp,48
 20059b0:	2004dbc0 	call	2004dbc <__sprint_r>
 20059b4:	103ecf1e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 20059b8:	dc800e17 	ldw	r18,56(sp)
 20059bc:	d8c01904 	addi	r3,sp,100
 20059c0:	003e9206 	br	200540c <___vfprintf_internal_r+0x5f8>
 20059c4:	d9014f17 	ldw	r4,1340(sp)
 20059c8:	b00b883a 	mov	r5,r22
 20059cc:	d9800c04 	addi	r6,sp,48
 20059d0:	2004dbc0 	call	2004dbc <__sprint_r>
 20059d4:	103ec026 	beq	r2,zero,20054d8 <___vfprintf_internal_r+0x6c4>
 20059d8:	003ec606 	br	20054f4 <___vfprintf_internal_r+0x6e0>
 20059dc:	d9014f17 	ldw	r4,1340(sp)
 20059e0:	b00b883a 	mov	r5,r22
 20059e4:	d9800c04 	addi	r6,sp,48
 20059e8:	d9c15115 	stw	r7,1348(sp)
 20059ec:	2004dbc0 	call	2004dbc <__sprint_r>
 20059f0:	d9c15117 	ldw	r7,1348(sp)
 20059f4:	103ebf1e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 20059f8:	dc800e17 	ldw	r18,56(sp)
 20059fc:	dc400d17 	ldw	r17,52(sp)
 2005a00:	dd401904 	addi	r21,sp,100
 2005a04:	003e7406 	br	20053d8 <___vfprintf_internal_r+0x5c4>
 2005a08:	d9014f17 	ldw	r4,1340(sp)
 2005a0c:	b00b883a 	mov	r5,r22
 2005a10:	d9800c04 	addi	r6,sp,48
 2005a14:	d9c15115 	stw	r7,1348(sp)
 2005a18:	2004dbc0 	call	2004dbc <__sprint_r>
 2005a1c:	d9c15117 	ldw	r7,1348(sp)
 2005a20:	103eb41e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2005a24:	dd401904 	addi	r21,sp,100
 2005a28:	003d6d06 	br	2004fe0 <___vfprintf_internal_r+0x1cc>
 2005a2c:	d9014f17 	ldw	r4,1340(sp)
 2005a30:	b00b883a 	mov	r5,r22
 2005a34:	d9800c04 	addi	r6,sp,48
 2005a38:	d9c15115 	stw	r7,1348(sp)
 2005a3c:	2004dbc0 	call	2004dbc <__sprint_r>
 2005a40:	d9c15117 	ldw	r7,1348(sp)
 2005a44:	103eab1e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2005a48:	dc800e17 	ldw	r18,56(sp)
 2005a4c:	dc400d17 	ldw	r17,52(sp)
 2005a50:	dd401904 	addi	r21,sp,100
 2005a54:	003e3406 	br	2005328 <___vfprintf_internal_r+0x514>
 2005a58:	d9014f17 	ldw	r4,1340(sp)
 2005a5c:	b00b883a 	mov	r5,r22
 2005a60:	d9800c04 	addi	r6,sp,48
 2005a64:	d9c15115 	stw	r7,1348(sp)
 2005a68:	2004dbc0 	call	2004dbc <__sprint_r>
 2005a6c:	d9c15117 	ldw	r7,1348(sp)
 2005a70:	103ea01e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2005a74:	dc800e17 	ldw	r18,56(sp)
 2005a78:	dc400d17 	ldw	r17,52(sp)
 2005a7c:	dd401904 	addi	r21,sp,100
 2005a80:	003e1c06 	br	20052f4 <___vfprintf_internal_r+0x4e0>
 2005a84:	d9014f17 	ldw	r4,1340(sp)
 2005a88:	b00b883a 	mov	r5,r22
 2005a8c:	d9800c04 	addi	r6,sp,48
 2005a90:	d9c15115 	stw	r7,1348(sp)
 2005a94:	2004dbc0 	call	2004dbc <__sprint_r>
 2005a98:	d9c15117 	ldw	r7,1348(sp)
 2005a9c:	103e951e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2005aa0:	dc800e17 	ldw	r18,56(sp)
 2005aa4:	dc400d17 	ldw	r17,52(sp)
 2005aa8:	dd401904 	addi	r21,sp,100
 2005aac:	003e0406 	br	20052c0 <___vfprintf_internal_r+0x4ac>
 2005ab0:	d9000517 	ldw	r4,20(sp)
 2005ab4:	0102580e 	bge	zero,r4,2006418 <___vfprintf_internal_r+0x1604>
 2005ab8:	d9814717 	ldw	r6,1308(sp)
 2005abc:	21807a16 	blt	r4,r6,2005ca8 <___vfprintf_internal_r+0xe94>
 2005ac0:	d8814117 	ldw	r2,1284(sp)
 2005ac4:	91a5883a 	add	r18,r18,r6
 2005ac8:	8c400044 	addi	r17,r17,1
 2005acc:	a8800015 	stw	r2,0(r21)
 2005ad0:	008001c4 	movi	r2,7
 2005ad4:	a9800115 	stw	r6,4(r21)
 2005ad8:	dc800e15 	stw	r18,56(sp)
 2005adc:	dc400d15 	stw	r17,52(sp)
 2005ae0:	1442fc16 	blt	r2,r17,20066d4 <___vfprintf_internal_r+0x18c0>
 2005ae4:	a8c00204 	addi	r3,r21,8
 2005ae8:	d9414717 	ldw	r5,1308(sp)
 2005aec:	2161c83a 	sub	r16,r4,r5
 2005af0:	043f9d0e 	bge	zero,r16,2005968 <___vfprintf_internal_r+0xb54>
 2005af4:	00800404 	movi	r2,16
 2005af8:	1402190e 	bge	r2,r16,2006360 <___vfprintf_internal_r+0x154c>
 2005afc:	dc400d17 	ldw	r17,52(sp)
 2005b00:	1027883a 	mov	r19,r2
 2005b04:	070080b4 	movhi	fp,514
 2005b08:	e7293684 	addi	fp,fp,-23334
 2005b0c:	050001c4 	movi	r20,7
 2005b10:	00000306 	br	2005b20 <___vfprintf_internal_r+0xd0c>
 2005b14:	18c00204 	addi	r3,r3,8
 2005b18:	843ffc04 	addi	r16,r16,-16
 2005b1c:	9c02130e 	bge	r19,r16,200636c <___vfprintf_internal_r+0x1558>
 2005b20:	94800404 	addi	r18,r18,16
 2005b24:	8c400044 	addi	r17,r17,1
 2005b28:	1f000015 	stw	fp,0(r3)
 2005b2c:	1cc00115 	stw	r19,4(r3)
 2005b30:	dc800e15 	stw	r18,56(sp)
 2005b34:	dc400d15 	stw	r17,52(sp)
 2005b38:	a47ff60e 	bge	r20,r17,2005b14 <___vfprintf_internal_r+0xd00>
 2005b3c:	d9014f17 	ldw	r4,1340(sp)
 2005b40:	b00b883a 	mov	r5,r22
 2005b44:	d9800c04 	addi	r6,sp,48
 2005b48:	2004dbc0 	call	2004dbc <__sprint_r>
 2005b4c:	103e691e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2005b50:	dc800e17 	ldw	r18,56(sp)
 2005b54:	dc400d17 	ldw	r17,52(sp)
 2005b58:	d8c01904 	addi	r3,sp,100
 2005b5c:	003fee06 	br	2005b18 <___vfprintf_internal_r+0xd04>
 2005b60:	d8814717 	ldw	r2,1308(sp)
 2005b64:	143fffc4 	addi	r16,r2,-1
 2005b68:	043e970e 	bge	zero,r16,20055c8 <___vfprintf_internal_r+0x7b4>
 2005b6c:	00800404 	movi	r2,16
 2005b70:	1400180e 	bge	r2,r16,2005bd4 <___vfprintf_internal_r+0xdc0>
 2005b74:	1029883a 	mov	r20,r2
 2005b78:	070080b4 	movhi	fp,514
 2005b7c:	e7293684 	addi	fp,fp,-23334
 2005b80:	054001c4 	movi	r21,7
 2005b84:	00000306 	br	2005b94 <___vfprintf_internal_r+0xd80>
 2005b88:	9cc00204 	addi	r19,r19,8
 2005b8c:	843ffc04 	addi	r16,r16,-16
 2005b90:	a400120e 	bge	r20,r16,2005bdc <___vfprintf_internal_r+0xdc8>
 2005b94:	94800404 	addi	r18,r18,16
 2005b98:	8c400044 	addi	r17,r17,1
 2005b9c:	9f000015 	stw	fp,0(r19)
 2005ba0:	9d000115 	stw	r20,4(r19)
 2005ba4:	dc800e15 	stw	r18,56(sp)
 2005ba8:	dc400d15 	stw	r17,52(sp)
 2005bac:	ac7ff60e 	bge	r21,r17,2005b88 <___vfprintf_internal_r+0xd74>
 2005bb0:	d9014f17 	ldw	r4,1340(sp)
 2005bb4:	b00b883a 	mov	r5,r22
 2005bb8:	d9800c04 	addi	r6,sp,48
 2005bbc:	2004dbc0 	call	2004dbc <__sprint_r>
 2005bc0:	103e4c1e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2005bc4:	dc800e17 	ldw	r18,56(sp)
 2005bc8:	dc400d17 	ldw	r17,52(sp)
 2005bcc:	dcc01904 	addi	r19,sp,100
 2005bd0:	003fee06 	br	2005b8c <___vfprintf_internal_r+0xd78>
 2005bd4:	070080b4 	movhi	fp,514
 2005bd8:	e7293684 	addi	fp,fp,-23334
 2005bdc:	9425883a 	add	r18,r18,r16
 2005be0:	8c400044 	addi	r17,r17,1
 2005be4:	008001c4 	movi	r2,7
 2005be8:	9f000015 	stw	fp,0(r19)
 2005bec:	9c000115 	stw	r16,4(r19)
 2005bf0:	dc800e15 	stw	r18,56(sp)
 2005bf4:	dc400d15 	stw	r17,52(sp)
 2005bf8:	147e720e 	bge	r2,r17,20055c4 <___vfprintf_internal_r+0x7b0>
 2005bfc:	d9014f17 	ldw	r4,1340(sp)
 2005c00:	b00b883a 	mov	r5,r22
 2005c04:	d9800c04 	addi	r6,sp,48
 2005c08:	2004dbc0 	call	2004dbc <__sprint_r>
 2005c0c:	103e391e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2005c10:	dc800e17 	ldw	r18,56(sp)
 2005c14:	dc400d17 	ldw	r17,52(sp)
 2005c18:	dcc01904 	addi	r19,sp,100
 2005c1c:	003e6a06 	br	20055c8 <___vfprintf_internal_r+0x7b4>
 2005c20:	d9014f17 	ldw	r4,1340(sp)
 2005c24:	b00b883a 	mov	r5,r22
 2005c28:	d9800c04 	addi	r6,sp,48
 2005c2c:	d9c15115 	stw	r7,1348(sp)
 2005c30:	2004dbc0 	call	2004dbc <__sprint_r>
 2005c34:	d9c15117 	ldw	r7,1348(sp)
 2005c38:	103e2e1e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2005c3c:	dc800e17 	ldw	r18,56(sp)
 2005c40:	dc400d17 	ldw	r17,52(sp)
 2005c44:	dd401904 	addi	r21,sp,100
 2005c48:	003dba06 	br	2005334 <___vfprintf_internal_r+0x520>
 2005c4c:	d9014f17 	ldw	r4,1340(sp)
 2005c50:	b00b883a 	mov	r5,r22
 2005c54:	d9800c04 	addi	r6,sp,48
 2005c58:	2004dbc0 	call	2004dbc <__sprint_r>
 2005c5c:	103e251e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2005c60:	dc800e17 	ldw	r18,56(sp)
 2005c64:	dc400d17 	ldw	r17,52(sp)
 2005c68:	dcc01904 	addi	r19,sp,100
 2005c6c:	003e4206 	br	2005578 <___vfprintf_internal_r+0x764>
 2005c70:	d9014f17 	ldw	r4,1340(sp)
 2005c74:	b00b883a 	mov	r5,r22
 2005c78:	d9800c04 	addi	r6,sp,48
 2005c7c:	2004dbc0 	call	2004dbc <__sprint_r>
 2005c80:	103e1c1e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2005c84:	dc800e17 	ldw	r18,56(sp)
 2005c88:	dc400d17 	ldw	r17,52(sp)
 2005c8c:	d8c01904 	addi	r3,sp,100
 2005c90:	003e2e06 	br	200554c <___vfprintf_internal_r+0x738>
 2005c94:	d9414c17 	ldw	r5,1328(sp)
 2005c98:	2880004c 	andi	r2,r5,1
 2005c9c:	1005003a 	cmpeq	r2,r2,zero
 2005ca0:	103dda1e 	bne	r2,zero,200540c <___vfprintf_internal_r+0x5f8>
 2005ca4:	003e9f06 	br	2005724 <___vfprintf_internal_r+0x910>
 2005ca8:	d8c14117 	ldw	r3,1284(sp)
 2005cac:	9125883a 	add	r18,r18,r4
 2005cb0:	8c400044 	addi	r17,r17,1
 2005cb4:	008001c4 	movi	r2,7
 2005cb8:	a8c00015 	stw	r3,0(r21)
 2005cbc:	a9000115 	stw	r4,4(r21)
 2005cc0:	dc800e15 	stw	r18,56(sp)
 2005cc4:	dc400d15 	stw	r17,52(sp)
 2005cc8:	14426c16 	blt	r2,r17,200667c <___vfprintf_internal_r+0x1868>
 2005ccc:	a8c00204 	addi	r3,r21,8
 2005cd0:	d9414917 	ldw	r5,1316(sp)
 2005cd4:	00800044 	movi	r2,1
 2005cd8:	94800044 	addi	r18,r18,1
 2005cdc:	8c400044 	addi	r17,r17,1
 2005ce0:	18800115 	stw	r2,4(r3)
 2005ce4:	008001c4 	movi	r2,7
 2005ce8:	19400015 	stw	r5,0(r3)
 2005cec:	dc800e15 	stw	r18,56(sp)
 2005cf0:	dc400d15 	stw	r17,52(sp)
 2005cf4:	2021883a 	mov	r16,r4
 2005cf8:	14425616 	blt	r2,r17,2006654 <___vfprintf_internal_r+0x1840>
 2005cfc:	19400204 	addi	r5,r3,8
 2005d00:	d9814717 	ldw	r6,1308(sp)
 2005d04:	8c400044 	addi	r17,r17,1
 2005d08:	dc400d15 	stw	r17,52(sp)
 2005d0c:	3107c83a 	sub	r3,r6,r4
 2005d10:	d9014117 	ldw	r4,1284(sp)
 2005d14:	90e5883a 	add	r18,r18,r3
 2005d18:	28c00115 	stw	r3,4(r5)
 2005d1c:	8105883a 	add	r2,r16,r4
 2005d20:	28800015 	stw	r2,0(r5)
 2005d24:	008001c4 	movi	r2,7
 2005d28:	dc800e15 	stw	r18,56(sp)
 2005d2c:	147f1d16 	blt	r2,r17,20059a4 <___vfprintf_internal_r+0xb90>
 2005d30:	28c00204 	addi	r3,r5,8
 2005d34:	003db506 	br	200540c <___vfprintf_internal_r+0x5f8>
 2005d38:	3c000017 	ldw	r16,0(r7)
 2005d3c:	3c400117 	ldw	r17,4(r7)
 2005d40:	39800204 	addi	r6,r7,8
 2005d44:	01000044 	movi	r4,1
 2005d48:	d9814015 	stw	r6,1280(sp)
 2005d4c:	d8000405 	stb	zero,16(sp)
 2005d50:	003ebe06 	br	200584c <___vfprintf_internal_r+0xa38>
 2005d54:	3c000017 	ldw	r16,0(r7)
 2005d58:	3c400117 	ldw	r17,4(r7)
 2005d5c:	38800204 	addi	r2,r7,8
 2005d60:	d8814015 	stw	r2,1280(sp)
 2005d64:	003eb706 	br	2005844 <___vfprintf_internal_r+0xa30>
 2005d68:	3c000017 	ldw	r16,0(r7)
 2005d6c:	3c400117 	ldw	r17,4(r7)
 2005d70:	39000204 	addi	r4,r7,8
 2005d74:	d9014015 	stw	r4,1280(sp)
 2005d78:	0009883a 	mov	r4,zero
 2005d7c:	d8000405 	stb	zero,16(sp)
 2005d80:	003eb206 	br	200584c <___vfprintf_internal_r+0xa38>
 2005d84:	38c00017 	ldw	r3,0(r7)
 2005d88:	39c00104 	addi	r7,r7,4
 2005d8c:	d8c14a15 	stw	r3,1320(sp)
 2005d90:	1800d70e 	bge	r3,zero,20060f0 <___vfprintf_internal_r+0x12dc>
 2005d94:	00c7c83a 	sub	r3,zero,r3
 2005d98:	d8c14a15 	stw	r3,1320(sp)
 2005d9c:	d9014c17 	ldw	r4,1328(sp)
 2005da0:	b8c00007 	ldb	r3,0(r23)
 2005da4:	21000114 	ori	r4,r4,4
 2005da8:	d9014c15 	stw	r4,1328(sp)
 2005dac:	003c9806 	br	2005010 <___vfprintf_internal_r+0x1fc>
 2005db0:	d9814c17 	ldw	r6,1328(sp)
 2005db4:	3080080c 	andi	r2,r6,32
 2005db8:	1001f626 	beq	r2,zero,2006594 <___vfprintf_internal_r+0x1780>
 2005dbc:	d9014b17 	ldw	r4,1324(sp)
 2005dc0:	38800017 	ldw	r2,0(r7)
 2005dc4:	39c00104 	addi	r7,r7,4
 2005dc8:	d9c14015 	stw	r7,1280(sp)
 2005dcc:	2007d7fa 	srai	r3,r4,31
 2005dd0:	d9c14017 	ldw	r7,1280(sp)
 2005dd4:	11000015 	stw	r4,0(r2)
 2005dd8:	10c00115 	stw	r3,4(r2)
 2005ddc:	003c6906 	br	2004f84 <___vfprintf_internal_r+0x170>
 2005de0:	b8c00007 	ldb	r3,0(r23)
 2005de4:	00801b04 	movi	r2,108
 2005de8:	18825526 	beq	r3,r2,2006740 <___vfprintf_internal_r+0x192c>
 2005dec:	d9414c17 	ldw	r5,1328(sp)
 2005df0:	29400414 	ori	r5,r5,16
 2005df4:	d9414c15 	stw	r5,1328(sp)
 2005df8:	003c8506 	br	2005010 <___vfprintf_internal_r+0x1fc>
 2005dfc:	d9814c17 	ldw	r6,1328(sp)
 2005e00:	b8c00007 	ldb	r3,0(r23)
 2005e04:	31800814 	ori	r6,r6,32
 2005e08:	d9814c15 	stw	r6,1328(sp)
 2005e0c:	003c8006 	br	2005010 <___vfprintf_internal_r+0x1fc>
 2005e10:	d8814c17 	ldw	r2,1328(sp)
 2005e14:	3c000017 	ldw	r16,0(r7)
 2005e18:	00c01e04 	movi	r3,120
 2005e1c:	10800094 	ori	r2,r2,2
 2005e20:	d8814c15 	stw	r2,1328(sp)
 2005e24:	39c00104 	addi	r7,r7,4
 2005e28:	014080b4 	movhi	r5,514
 2005e2c:	29691f04 	addi	r5,r5,-23428
 2005e30:	00800c04 	movi	r2,48
 2005e34:	0023883a 	mov	r17,zero
 2005e38:	01000084 	movi	r4,2
 2005e3c:	d9c14015 	stw	r7,1280(sp)
 2005e40:	d8c14d15 	stw	r3,1332(sp)
 2005e44:	d9414415 	stw	r5,1296(sp)
 2005e48:	d8800445 	stb	r2,17(sp)
 2005e4c:	d8c00485 	stb	r3,18(sp)
 2005e50:	d8000405 	stb	zero,16(sp)
 2005e54:	003e7d06 	br	200584c <___vfprintf_internal_r+0xa38>
 2005e58:	d8814c17 	ldw	r2,1328(sp)
 2005e5c:	b8c00007 	ldb	r3,0(r23)
 2005e60:	10801014 	ori	r2,r2,64
 2005e64:	d8814c15 	stw	r2,1328(sp)
 2005e68:	003c6906 	br	2005010 <___vfprintf_internal_r+0x1fc>
 2005e6c:	d9414c17 	ldw	r5,1328(sp)
 2005e70:	2880020c 	andi	r2,r5,8
 2005e74:	1001e526 	beq	r2,zero,200660c <___vfprintf_internal_r+0x17f8>
 2005e78:	39800017 	ldw	r6,0(r7)
 2005e7c:	38800204 	addi	r2,r7,8
 2005e80:	d8814015 	stw	r2,1280(sp)
 2005e84:	d9814215 	stw	r6,1288(sp)
 2005e88:	39c00117 	ldw	r7,4(r7)
 2005e8c:	d9c14315 	stw	r7,1292(sp)
 2005e90:	d9014217 	ldw	r4,1288(sp)
 2005e94:	d9414317 	ldw	r5,1292(sp)
 2005e98:	200a9900 	call	200a990 <__isinfd>
 2005e9c:	10021d26 	beq	r2,zero,2006714 <___vfprintf_internal_r+0x1900>
 2005ea0:	d9014217 	ldw	r4,1288(sp)
 2005ea4:	d9414317 	ldw	r5,1292(sp)
 2005ea8:	000d883a 	mov	r6,zero
 2005eac:	000f883a 	mov	r7,zero
 2005eb0:	200d9880 	call	200d988 <__ltdf2>
 2005eb4:	1002d016 	blt	r2,zero,20069f8 <___vfprintf_internal_r+0x1be4>
 2005eb8:	d9414d17 	ldw	r5,1332(sp)
 2005ebc:	008011c4 	movi	r2,71
 2005ec0:	11421016 	blt	r2,r5,2006704 <___vfprintf_internal_r+0x18f0>
 2005ec4:	018080b4 	movhi	r6,514
 2005ec8:	31a92404 	addi	r6,r6,-23408
 2005ecc:	d9814115 	stw	r6,1284(sp)
 2005ed0:	d9014c17 	ldw	r4,1328(sp)
 2005ed4:	00c000c4 	movi	r3,3
 2005ed8:	00bfdfc4 	movi	r2,-129
 2005edc:	2088703a 	and	r4,r4,r2
 2005ee0:	180f883a 	mov	r7,r3
 2005ee4:	d8c14515 	stw	r3,1300(sp)
 2005ee8:	d9014c15 	stw	r4,1328(sp)
 2005eec:	d8014615 	stw	zero,1304(sp)
 2005ef0:	003e6a06 	br	200589c <___vfprintf_internal_r+0xa88>
 2005ef4:	38800017 	ldw	r2,0(r7)
 2005ef8:	00c00044 	movi	r3,1
 2005efc:	39c00104 	addi	r7,r7,4
 2005f00:	d9c14015 	stw	r7,1280(sp)
 2005f04:	d9000f04 	addi	r4,sp,60
 2005f08:	180f883a 	mov	r7,r3
 2005f0c:	d8c14515 	stw	r3,1300(sp)
 2005f10:	d9014115 	stw	r4,1284(sp)
 2005f14:	d8800f05 	stb	r2,60(sp)
 2005f18:	d8000405 	stb	zero,16(sp)
 2005f1c:	003cac06 	br	20051d0 <___vfprintf_internal_r+0x3bc>
 2005f20:	014080b4 	movhi	r5,514
 2005f24:	29692a04 	addi	r5,r5,-23384
 2005f28:	d9414415 	stw	r5,1296(sp)
 2005f2c:	d9814c17 	ldw	r6,1328(sp)
 2005f30:	3080080c 	andi	r2,r6,32
 2005f34:	1000ff26 	beq	r2,zero,2006334 <___vfprintf_internal_r+0x1520>
 2005f38:	3c000017 	ldw	r16,0(r7)
 2005f3c:	3c400117 	ldw	r17,4(r7)
 2005f40:	38800204 	addi	r2,r7,8
 2005f44:	d8814015 	stw	r2,1280(sp)
 2005f48:	d9414c17 	ldw	r5,1328(sp)
 2005f4c:	2880004c 	andi	r2,r5,1
 2005f50:	1005003a 	cmpeq	r2,r2,zero
 2005f54:	1000b91e 	bne	r2,zero,200623c <___vfprintf_internal_r+0x1428>
 2005f58:	8444b03a 	or	r2,r16,r17
 2005f5c:	1000b726 	beq	r2,zero,200623c <___vfprintf_internal_r+0x1428>
 2005f60:	d9814d17 	ldw	r6,1332(sp)
 2005f64:	29400094 	ori	r5,r5,2
 2005f68:	00800c04 	movi	r2,48
 2005f6c:	01000084 	movi	r4,2
 2005f70:	d9414c15 	stw	r5,1328(sp)
 2005f74:	d8800445 	stb	r2,17(sp)
 2005f78:	d9800485 	stb	r6,18(sp)
 2005f7c:	d8000405 	stb	zero,16(sp)
 2005f80:	003e3206 	br	200584c <___vfprintf_internal_r+0xa38>
 2005f84:	018080b4 	movhi	r6,514
 2005f88:	31a91f04 	addi	r6,r6,-23428
 2005f8c:	d9814415 	stw	r6,1296(sp)
 2005f90:	003fe606 	br	2005f2c <___vfprintf_internal_r+0x1118>
 2005f94:	00800ac4 	movi	r2,43
 2005f98:	d8800405 	stb	r2,16(sp)
 2005f9c:	b8c00007 	ldb	r3,0(r23)
 2005fa0:	003c1b06 	br	2005010 <___vfprintf_internal_r+0x1fc>
 2005fa4:	d8814c17 	ldw	r2,1328(sp)
 2005fa8:	b8c00007 	ldb	r3,0(r23)
 2005fac:	10800054 	ori	r2,r2,1
 2005fb0:	d8814c15 	stw	r2,1328(sp)
 2005fb4:	003c1606 	br	2005010 <___vfprintf_internal_r+0x1fc>
 2005fb8:	d8800407 	ldb	r2,16(sp)
 2005fbc:	10004c1e 	bne	r2,zero,20060f0 <___vfprintf_internal_r+0x12dc>
 2005fc0:	00800804 	movi	r2,32
 2005fc4:	d8800405 	stb	r2,16(sp)
 2005fc8:	b8c00007 	ldb	r3,0(r23)
 2005fcc:	003c1006 	br	2005010 <___vfprintf_internal_r+0x1fc>
 2005fd0:	d9814c17 	ldw	r6,1328(sp)
 2005fd4:	b8c00007 	ldb	r3,0(r23)
 2005fd8:	31800214 	ori	r6,r6,8
 2005fdc:	d9814c15 	stw	r6,1328(sp)
 2005fe0:	003c0b06 	br	2005010 <___vfprintf_internal_r+0x1fc>
 2005fe4:	0009883a 	mov	r4,zero
 2005fe8:	04000244 	movi	r16,9
 2005fec:	01400284 	movi	r5,10
 2005ff0:	d9c15115 	stw	r7,1348(sp)
 2005ff4:	20032ac0 	call	20032ac <__mulsi3>
 2005ff8:	b9000007 	ldb	r4,0(r23)
 2005ffc:	d8c14d17 	ldw	r3,1332(sp)
 2006000:	bdc00044 	addi	r23,r23,1
 2006004:	d9014d15 	stw	r4,1332(sp)
 2006008:	d9414d17 	ldw	r5,1332(sp)
 200600c:	1885883a 	add	r2,r3,r2
 2006010:	113ff404 	addi	r4,r2,-48
 2006014:	28bff404 	addi	r2,r5,-48
 2006018:	d9c15117 	ldw	r7,1348(sp)
 200601c:	80bff32e 	bgeu	r16,r2,2005fec <___vfprintf_internal_r+0x11d8>
 2006020:	d9014a15 	stw	r4,1320(sp)
 2006024:	003bfc06 	br	2005018 <___vfprintf_internal_r+0x204>
 2006028:	d8814c17 	ldw	r2,1328(sp)
 200602c:	b8c00007 	ldb	r3,0(r23)
 2006030:	10802014 	ori	r2,r2,128
 2006034:	d8814c15 	stw	r2,1328(sp)
 2006038:	003bf506 	br	2005010 <___vfprintf_internal_r+0x1fc>
 200603c:	b8c00007 	ldb	r3,0(r23)
 2006040:	00800a84 	movi	r2,42
 2006044:	bdc00044 	addi	r23,r23,1
 2006048:	18831826 	beq	r3,r2,2006cac <___vfprintf_internal_r+0x1e98>
 200604c:	d8c14d15 	stw	r3,1332(sp)
 2006050:	18bff404 	addi	r2,r3,-48
 2006054:	00c00244 	movi	r3,9
 2006058:	18827b36 	bltu	r3,r2,2006a48 <___vfprintf_internal_r+0x1c34>
 200605c:	1821883a 	mov	r16,r3
 2006060:	0009883a 	mov	r4,zero
 2006064:	01400284 	movi	r5,10
 2006068:	d9c15115 	stw	r7,1348(sp)
 200606c:	20032ac0 	call	20032ac <__mulsi3>
 2006070:	d9414d17 	ldw	r5,1332(sp)
 2006074:	b9800007 	ldb	r6,0(r23)
 2006078:	d9c15117 	ldw	r7,1348(sp)
 200607c:	1145883a 	add	r2,r2,r5
 2006080:	113ff404 	addi	r4,r2,-48
 2006084:	30bff404 	addi	r2,r6,-48
 2006088:	d9814d15 	stw	r6,1332(sp)
 200608c:	bdc00044 	addi	r23,r23,1
 2006090:	80bff42e 	bgeu	r16,r2,2006064 <___vfprintf_internal_r+0x1250>
 2006094:	2027883a 	mov	r19,r4
 2006098:	203bdf0e 	bge	r4,zero,2005018 <___vfprintf_internal_r+0x204>
 200609c:	04ffffc4 	movi	r19,-1
 20060a0:	003bdd06 	br	2005018 <___vfprintf_internal_r+0x204>
 20060a4:	d8000405 	stb	zero,16(sp)
 20060a8:	39800017 	ldw	r6,0(r7)
 20060ac:	39c00104 	addi	r7,r7,4
 20060b0:	d9c14015 	stw	r7,1280(sp)
 20060b4:	d9814115 	stw	r6,1284(sp)
 20060b8:	3001c926 	beq	r6,zero,20067e0 <___vfprintf_internal_r+0x19cc>
 20060bc:	98000e16 	blt	r19,zero,20060f8 <___vfprintf_internal_r+0x12e4>
 20060c0:	d9014117 	ldw	r4,1284(sp)
 20060c4:	000b883a 	mov	r5,zero
 20060c8:	980d883a 	mov	r6,r19
 20060cc:	20098200 	call	2009820 <memchr>
 20060d0:	10025926 	beq	r2,zero,2006a38 <___vfprintf_internal_r+0x1c24>
 20060d4:	d8c14117 	ldw	r3,1284(sp)
 20060d8:	10cfc83a 	sub	r7,r2,r3
 20060dc:	99c19e16 	blt	r19,r7,2006758 <___vfprintf_internal_r+0x1944>
 20060e0:	d9c14515 	stw	r7,1300(sp)
 20060e4:	38000916 	blt	r7,zero,200610c <___vfprintf_internal_r+0x12f8>
 20060e8:	d8014615 	stw	zero,1304(sp)
 20060ec:	003deb06 	br	200589c <___vfprintf_internal_r+0xa88>
 20060f0:	b8c00007 	ldb	r3,0(r23)
 20060f4:	003bc606 	br	2005010 <___vfprintf_internal_r+0x1fc>
 20060f8:	d9014117 	ldw	r4,1284(sp)
 20060fc:	2004d2c0 	call	2004d2c <strlen>
 2006100:	d8814515 	stw	r2,1300(sp)
 2006104:	100f883a 	mov	r7,r2
 2006108:	103ff70e 	bge	r2,zero,20060e8 <___vfprintf_internal_r+0x12d4>
 200610c:	d8014515 	stw	zero,1300(sp)
 2006110:	d8014615 	stw	zero,1304(sp)
 2006114:	003de106 	br	200589c <___vfprintf_internal_r+0xa88>
 2006118:	20c03fcc 	andi	r3,r4,255
 200611c:	00800044 	movi	r2,1
 2006120:	18802d26 	beq	r3,r2,20061d8 <___vfprintf_internal_r+0x13c4>
 2006124:	18800e36 	bltu	r3,r2,2006160 <___vfprintf_internal_r+0x134c>
 2006128:	00800084 	movi	r2,2
 200612c:	1880fa26 	beq	r3,r2,2006518 <___vfprintf_internal_r+0x1704>
 2006130:	010080b4 	movhi	r4,514
 2006134:	21292f04 	addi	r4,r4,-23364
 2006138:	2004d2c0 	call	2004d2c <strlen>
 200613c:	100f883a 	mov	r7,r2
 2006140:	dcc14515 	stw	r19,1300(sp)
 2006144:	9880010e 	bge	r19,r2,200614c <___vfprintf_internal_r+0x1338>
 2006148:	d8814515 	stw	r2,1300(sp)
 200614c:	008080b4 	movhi	r2,514
 2006150:	10a92f04 	addi	r2,r2,-23364
 2006154:	dcc14615 	stw	r19,1304(sp)
 2006158:	d8814115 	stw	r2,1284(sp)
 200615c:	003dcf06 	br	200589c <___vfprintf_internal_r+0xa88>
 2006160:	d9401904 	addi	r5,sp,100
 2006164:	dd000f04 	addi	r20,sp,60
 2006168:	d9414115 	stw	r5,1284(sp)
 200616c:	880a977a 	slli	r5,r17,29
 2006170:	d9814117 	ldw	r6,1284(sp)
 2006174:	8004d0fa 	srli	r2,r16,3
 2006178:	8806d0fa 	srli	r3,r17,3
 200617c:	810001cc 	andi	r4,r16,7
 2006180:	2884b03a 	or	r2,r5,r2
 2006184:	31bfffc4 	addi	r6,r6,-1
 2006188:	21000c04 	addi	r4,r4,48
 200618c:	d9814115 	stw	r6,1284(sp)
 2006190:	10cab03a 	or	r5,r2,r3
 2006194:	31000005 	stb	r4,0(r6)
 2006198:	1021883a 	mov	r16,r2
 200619c:	1823883a 	mov	r17,r3
 20061a0:	283ff21e 	bne	r5,zero,200616c <___vfprintf_internal_r+0x1358>
 20061a4:	d8c14c17 	ldw	r3,1328(sp)
 20061a8:	1880004c 	andi	r2,r3,1
 20061ac:	1005003a 	cmpeq	r2,r2,zero
 20061b0:	103db31e 	bne	r2,zero,2005880 <___vfprintf_internal_r+0xa6c>
 20061b4:	20803fcc 	andi	r2,r4,255
 20061b8:	1080201c 	xori	r2,r2,128
 20061bc:	10bfe004 	addi	r2,r2,-128
 20061c0:	00c00c04 	movi	r3,48
 20061c4:	10fdae26 	beq	r2,r3,2005880 <___vfprintf_internal_r+0xa6c>
 20061c8:	31bfffc4 	addi	r6,r6,-1
 20061cc:	d9814115 	stw	r6,1284(sp)
 20061d0:	30c00005 	stb	r3,0(r6)
 20061d4:	003daa06 	br	2005880 <___vfprintf_internal_r+0xa6c>
 20061d8:	88800068 	cmpgeui	r2,r17,1
 20061dc:	10002c1e 	bne	r2,zero,2006290 <___vfprintf_internal_r+0x147c>
 20061e0:	8800021e 	bne	r17,zero,20061ec <___vfprintf_internal_r+0x13d8>
 20061e4:	00800244 	movi	r2,9
 20061e8:	14002936 	bltu	r2,r16,2006290 <___vfprintf_internal_r+0x147c>
 20061ec:	d90018c4 	addi	r4,sp,99
 20061f0:	dd000f04 	addi	r20,sp,60
 20061f4:	d9014115 	stw	r4,1284(sp)
 20061f8:	d9014117 	ldw	r4,1284(sp)
 20061fc:	80800c04 	addi	r2,r16,48
 2006200:	20800005 	stb	r2,0(r4)
 2006204:	003d9e06 	br	2005880 <___vfprintf_internal_r+0xa6c>
 2006208:	dc400d17 	ldw	r17,52(sp)
 200620c:	070080b4 	movhi	fp,514
 2006210:	e7293684 	addi	fp,fp,-23334
 2006214:	9425883a 	add	r18,r18,r16
 2006218:	8c400044 	addi	r17,r17,1
 200621c:	008001c4 	movi	r2,7
 2006220:	1f000015 	stw	fp,0(r3)
 2006224:	1c000115 	stw	r16,4(r3)
 2006228:	dc800e15 	stw	r18,56(sp)
 200622c:	dc400d15 	stw	r17,52(sp)
 2006230:	147ddc16 	blt	r2,r17,20059a4 <___vfprintf_internal_r+0xb90>
 2006234:	18c00204 	addi	r3,r3,8
 2006238:	003c7406 	br	200540c <___vfprintf_internal_r+0x5f8>
 200623c:	01000084 	movi	r4,2
 2006240:	d8000405 	stb	zero,16(sp)
 2006244:	003d8106 	br	200584c <___vfprintf_internal_r+0xa38>
 2006248:	d9814c17 	ldw	r6,1328(sp)
 200624c:	30c4703a 	and	r2,r6,r3
 2006250:	1005003a 	cmpeq	r2,r2,zero
 2006254:	103cb326 	beq	r2,zero,2005524 <___vfprintf_internal_r+0x710>
 2006258:	d9014117 	ldw	r4,1284(sp)
 200625c:	94800044 	addi	r18,r18,1
 2006260:	8c400044 	addi	r17,r17,1
 2006264:	008001c4 	movi	r2,7
 2006268:	a9000015 	stw	r4,0(r21)
 200626c:	a8c00115 	stw	r3,4(r21)
 2006270:	dc800e15 	stw	r18,56(sp)
 2006274:	dc400d15 	stw	r17,52(sp)
 2006278:	147e6016 	blt	r2,r17,2005bfc <___vfprintf_internal_r+0xde8>
 200627c:	acc00204 	addi	r19,r21,8
 2006280:	003cd106 	br	20055c8 <___vfprintf_internal_r+0x7b4>
 2006284:	070080b4 	movhi	fp,514
 2006288:	e7293684 	addi	fp,fp,-23334
 200628c:	003c4906 	br	20053b4 <___vfprintf_internal_r+0x5a0>
 2006290:	dd000f04 	addi	r20,sp,60
 2006294:	dc801904 	addi	r18,sp,100
 2006298:	8009883a 	mov	r4,r16
 200629c:	880b883a 	mov	r5,r17
 20062a0:	01800284 	movi	r6,10
 20062a4:	000f883a 	mov	r7,zero
 20062a8:	200caec0 	call	200caec <__umoddi3>
 20062ac:	12000c04 	addi	r8,r2,48
 20062b0:	94bfffc4 	addi	r18,r18,-1
 20062b4:	8009883a 	mov	r4,r16
 20062b8:	880b883a 	mov	r5,r17
 20062bc:	01800284 	movi	r6,10
 20062c0:	000f883a 	mov	r7,zero
 20062c4:	92000005 	stb	r8,0(r18)
 20062c8:	200c4800 	call	200c480 <__udivdi3>
 20062cc:	1009883a 	mov	r4,r2
 20062d0:	1021883a 	mov	r16,r2
 20062d4:	18800068 	cmpgeui	r2,r3,1
 20062d8:	1823883a 	mov	r17,r3
 20062dc:	103fee1e 	bne	r2,zero,2006298 <___vfprintf_internal_r+0x1484>
 20062e0:	1800021e 	bne	r3,zero,20062ec <___vfprintf_internal_r+0x14d8>
 20062e4:	00800244 	movi	r2,9
 20062e8:	113feb36 	bltu	r2,r4,2006298 <___vfprintf_internal_r+0x1484>
 20062ec:	94bfffc4 	addi	r18,r18,-1
 20062f0:	dc814115 	stw	r18,1284(sp)
 20062f4:	003fc006 	br	20061f8 <___vfprintf_internal_r+0x13e4>
 20062f8:	d9014c17 	ldw	r4,1328(sp)
 20062fc:	2080004c 	andi	r2,r4,1
 2006300:	10009a1e 	bne	r2,zero,200656c <___vfprintf_internal_r+0x1758>
 2006304:	d9401904 	addi	r5,sp,100
 2006308:	dd000f04 	addi	r20,sp,60
 200630c:	d9414115 	stw	r5,1284(sp)
 2006310:	003d5b06 	br	2005880 <___vfprintf_internal_r+0xa6c>
 2006314:	d9014f17 	ldw	r4,1340(sp)
 2006318:	b00b883a 	mov	r5,r22
 200631c:	d9800c04 	addi	r6,sp,48
 2006320:	2004dbc0 	call	2004dbc <__sprint_r>
 2006324:	103c731e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2006328:	dc800e17 	ldw	r18,56(sp)
 200632c:	d8c01904 	addi	r3,sp,100
 2006330:	003cf906 	br	2005718 <___vfprintf_internal_r+0x904>
 2006334:	d8c14c17 	ldw	r3,1328(sp)
 2006338:	1880040c 	andi	r2,r3,16
 200633c:	1000711e 	bne	r2,zero,2006504 <___vfprintf_internal_r+0x16f0>
 2006340:	d9014c17 	ldw	r4,1328(sp)
 2006344:	2080100c 	andi	r2,r4,64
 2006348:	10006e26 	beq	r2,zero,2006504 <___vfprintf_internal_r+0x16f0>
 200634c:	3c00000b 	ldhu	r16,0(r7)
 2006350:	0023883a 	mov	r17,zero
 2006354:	39c00104 	addi	r7,r7,4
 2006358:	d9c14015 	stw	r7,1280(sp)
 200635c:	003efa06 	br	2005f48 <___vfprintf_internal_r+0x1134>
 2006360:	dc400d17 	ldw	r17,52(sp)
 2006364:	070080b4 	movhi	fp,514
 2006368:	e7293684 	addi	fp,fp,-23334
 200636c:	9425883a 	add	r18,r18,r16
 2006370:	8c400044 	addi	r17,r17,1
 2006374:	008001c4 	movi	r2,7
 2006378:	1f000015 	stw	fp,0(r3)
 200637c:	1c000115 	stw	r16,4(r3)
 2006380:	dc800e15 	stw	r18,56(sp)
 2006384:	dc400d15 	stw	r17,52(sp)
 2006388:	147d7016 	blt	r2,r17,200594c <___vfprintf_internal_r+0xb38>
 200638c:	18c00204 	addi	r3,r3,8
 2006390:	003d7506 	br	2005968 <___vfprintf_internal_r+0xb54>
 2006394:	dc800e17 	ldw	r18,56(sp)
 2006398:	dc400d17 	ldw	r17,52(sp)
 200639c:	070080b4 	movhi	fp,514
 20063a0:	e7293a84 	addi	fp,fp,-23318
 20063a4:	003bba06 	br	2005290 <___vfprintf_internal_r+0x47c>
 20063a8:	d9014f17 	ldw	r4,1340(sp)
 20063ac:	b00b883a 	mov	r5,r22
 20063b0:	d9800c04 	addi	r6,sp,48
 20063b4:	2004dbc0 	call	2004dbc <__sprint_r>
 20063b8:	103c4e1e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 20063bc:	dc800e17 	ldw	r18,56(sp)
 20063c0:	d8c01904 	addi	r3,sp,100
 20063c4:	003ce306 	br	2005754 <___vfprintf_internal_r+0x940>
 20063c8:	3c000017 	ldw	r16,0(r7)
 20063cc:	0009883a 	mov	r4,zero
 20063d0:	39c00104 	addi	r7,r7,4
 20063d4:	0023883a 	mov	r17,zero
 20063d8:	d9c14015 	stw	r7,1280(sp)
 20063dc:	d8000405 	stb	zero,16(sp)
 20063e0:	003d1a06 	br	200584c <___vfprintf_internal_r+0xa38>
 20063e4:	38800017 	ldw	r2,0(r7)
 20063e8:	39c00104 	addi	r7,r7,4
 20063ec:	d9c14015 	stw	r7,1280(sp)
 20063f0:	1023d7fa 	srai	r17,r2,31
 20063f4:	1021883a 	mov	r16,r2
 20063f8:	003d1206 	br	2005844 <___vfprintf_internal_r+0xa30>
 20063fc:	3c000017 	ldw	r16,0(r7)
 2006400:	01000044 	movi	r4,1
 2006404:	39c00104 	addi	r7,r7,4
 2006408:	0023883a 	mov	r17,zero
 200640c:	d9c14015 	stw	r7,1280(sp)
 2006410:	d8000405 	stb	zero,16(sp)
 2006414:	003d0d06 	br	200584c <___vfprintf_internal_r+0xa38>
 2006418:	008080b4 	movhi	r2,514
 200641c:	10a93604 	addi	r2,r2,-23336
 2006420:	94800044 	addi	r18,r18,1
 2006424:	8c400044 	addi	r17,r17,1
 2006428:	a8800015 	stw	r2,0(r21)
 200642c:	00c00044 	movi	r3,1
 2006430:	008001c4 	movi	r2,7
 2006434:	a8c00115 	stw	r3,4(r21)
 2006438:	dc800e15 	stw	r18,56(sp)
 200643c:	dc400d15 	stw	r17,52(sp)
 2006440:	1440ca16 	blt	r2,r17,200676c <___vfprintf_internal_r+0x1958>
 2006444:	a8c00204 	addi	r3,r21,8
 2006448:	2000061e 	bne	r4,zero,2006464 <___vfprintf_internal_r+0x1650>
 200644c:	d9414717 	ldw	r5,1308(sp)
 2006450:	2800041e 	bne	r5,zero,2006464 <___vfprintf_internal_r+0x1650>
 2006454:	d9814c17 	ldw	r6,1328(sp)
 2006458:	3080004c 	andi	r2,r6,1
 200645c:	1005003a 	cmpeq	r2,r2,zero
 2006460:	103bea1e 	bne	r2,zero,200540c <___vfprintf_internal_r+0x5f8>
 2006464:	00800044 	movi	r2,1
 2006468:	dc400d17 	ldw	r17,52(sp)
 200646c:	18800115 	stw	r2,4(r3)
 2006470:	d8814917 	ldw	r2,1316(sp)
 2006474:	94800044 	addi	r18,r18,1
 2006478:	8c400044 	addi	r17,r17,1
 200647c:	18800015 	stw	r2,0(r3)
 2006480:	008001c4 	movi	r2,7
 2006484:	dc800e15 	stw	r18,56(sp)
 2006488:	dc400d15 	stw	r17,52(sp)
 200648c:	1440ca16 	blt	r2,r17,20067b8 <___vfprintf_internal_r+0x19a4>
 2006490:	18c00204 	addi	r3,r3,8
 2006494:	0121c83a 	sub	r16,zero,r4
 2006498:	0400500e 	bge	zero,r16,20065dc <___vfprintf_internal_r+0x17c8>
 200649c:	00800404 	movi	r2,16
 20064a0:	1400800e 	bge	r2,r16,20066a4 <___vfprintf_internal_r+0x1890>
 20064a4:	1027883a 	mov	r19,r2
 20064a8:	070080b4 	movhi	fp,514
 20064ac:	e7293684 	addi	fp,fp,-23334
 20064b0:	050001c4 	movi	r20,7
 20064b4:	00000306 	br	20064c4 <___vfprintf_internal_r+0x16b0>
 20064b8:	18c00204 	addi	r3,r3,8
 20064bc:	843ffc04 	addi	r16,r16,-16
 20064c0:	9c007a0e 	bge	r19,r16,20066ac <___vfprintf_internal_r+0x1898>
 20064c4:	94800404 	addi	r18,r18,16
 20064c8:	8c400044 	addi	r17,r17,1
 20064cc:	1f000015 	stw	fp,0(r3)
 20064d0:	1cc00115 	stw	r19,4(r3)
 20064d4:	dc800e15 	stw	r18,56(sp)
 20064d8:	dc400d15 	stw	r17,52(sp)
 20064dc:	a47ff60e 	bge	r20,r17,20064b8 <___vfprintf_internal_r+0x16a4>
 20064e0:	d9014f17 	ldw	r4,1340(sp)
 20064e4:	b00b883a 	mov	r5,r22
 20064e8:	d9800c04 	addi	r6,sp,48
 20064ec:	2004dbc0 	call	2004dbc <__sprint_r>
 20064f0:	103c001e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 20064f4:	dc800e17 	ldw	r18,56(sp)
 20064f8:	dc400d17 	ldw	r17,52(sp)
 20064fc:	d8c01904 	addi	r3,sp,100
 2006500:	003fee06 	br	20064bc <___vfprintf_internal_r+0x16a8>
 2006504:	3c000017 	ldw	r16,0(r7)
 2006508:	0023883a 	mov	r17,zero
 200650c:	39c00104 	addi	r7,r7,4
 2006510:	d9c14015 	stw	r7,1280(sp)
 2006514:	003e8c06 	br	2005f48 <___vfprintf_internal_r+0x1134>
 2006518:	d9401904 	addi	r5,sp,100
 200651c:	dd000f04 	addi	r20,sp,60
 2006520:	d9414115 	stw	r5,1284(sp)
 2006524:	d9814417 	ldw	r6,1296(sp)
 2006528:	880a973a 	slli	r5,r17,28
 200652c:	8004d13a 	srli	r2,r16,4
 2006530:	810003cc 	andi	r4,r16,15
 2006534:	3109883a 	add	r4,r6,r4
 2006538:	2884b03a 	or	r2,r5,r2
 200653c:	21400003 	ldbu	r5,0(r4)
 2006540:	d9014117 	ldw	r4,1284(sp)
 2006544:	8806d13a 	srli	r3,r17,4
 2006548:	1021883a 	mov	r16,r2
 200654c:	213fffc4 	addi	r4,r4,-1
 2006550:	d9014115 	stw	r4,1284(sp)
 2006554:	d9814117 	ldw	r6,1284(sp)
 2006558:	10c8b03a 	or	r4,r2,r3
 200655c:	1823883a 	mov	r17,r3
 2006560:	31400005 	stb	r5,0(r6)
 2006564:	203fef1e 	bne	r4,zero,2006524 <___vfprintf_internal_r+0x1710>
 2006568:	003cc506 	br	2005880 <___vfprintf_internal_r+0xa6c>
 200656c:	00800c04 	movi	r2,48
 2006570:	d98018c4 	addi	r6,sp,99
 2006574:	dd000f04 	addi	r20,sp,60
 2006578:	d88018c5 	stb	r2,99(sp)
 200657c:	d9814115 	stw	r6,1284(sp)
 2006580:	003cbf06 	br	2005880 <___vfprintf_internal_r+0xa6c>
 2006584:	dc400d17 	ldw	r17,52(sp)
 2006588:	070080b4 	movhi	fp,514
 200658c:	e7293a84 	addi	fp,fp,-23318
 2006590:	003bc106 	br	2005498 <___vfprintf_internal_r+0x684>
 2006594:	d9414c17 	ldw	r5,1328(sp)
 2006598:	2880040c 	andi	r2,r5,16
 200659c:	10007c26 	beq	r2,zero,2006790 <___vfprintf_internal_r+0x197c>
 20065a0:	38800017 	ldw	r2,0(r7)
 20065a4:	39c00104 	addi	r7,r7,4
 20065a8:	d9c14015 	stw	r7,1280(sp)
 20065ac:	d9814b17 	ldw	r6,1324(sp)
 20065b0:	d9c14017 	ldw	r7,1280(sp)
 20065b4:	11800015 	stw	r6,0(r2)
 20065b8:	003a7206 	br	2004f84 <___vfprintf_internal_r+0x170>
 20065bc:	d9014f17 	ldw	r4,1340(sp)
 20065c0:	b00b883a 	mov	r5,r22
 20065c4:	d9800c04 	addi	r6,sp,48
 20065c8:	2004dbc0 	call	2004dbc <__sprint_r>
 20065cc:	103bc91e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 20065d0:	dc800e17 	ldw	r18,56(sp)
 20065d4:	dc400d17 	ldw	r17,52(sp)
 20065d8:	d8c01904 	addi	r3,sp,100
 20065dc:	d9014717 	ldw	r4,1308(sp)
 20065e0:	d9414117 	ldw	r5,1284(sp)
 20065e4:	8c400044 	addi	r17,r17,1
 20065e8:	9125883a 	add	r18,r18,r4
 20065ec:	008001c4 	movi	r2,7
 20065f0:	19400015 	stw	r5,0(r3)
 20065f4:	19000115 	stw	r4,4(r3)
 20065f8:	dc800e15 	stw	r18,56(sp)
 20065fc:	dc400d15 	stw	r17,52(sp)
 2006600:	147ce816 	blt	r2,r17,20059a4 <___vfprintf_internal_r+0xb90>
 2006604:	18c00204 	addi	r3,r3,8
 2006608:	003b8006 	br	200540c <___vfprintf_internal_r+0x5f8>
 200660c:	38c00017 	ldw	r3,0(r7)
 2006610:	39000204 	addi	r4,r7,8
 2006614:	d9014015 	stw	r4,1280(sp)
 2006618:	d8c14215 	stw	r3,1288(sp)
 200661c:	39c00117 	ldw	r7,4(r7)
 2006620:	d9c14315 	stw	r7,1292(sp)
 2006624:	003e1a06 	br	2005e90 <___vfprintf_internal_r+0x107c>
 2006628:	0005883a 	mov	r2,zero
 200662c:	1409c83a 	sub	r4,r2,r16
 2006630:	1105803a 	cmpltu	r2,r2,r4
 2006634:	044bc83a 	sub	r5,zero,r17
 2006638:	2885c83a 	sub	r2,r5,r2
 200663c:	2021883a 	mov	r16,r4
 2006640:	1023883a 	mov	r17,r2
 2006644:	01000044 	movi	r4,1
 2006648:	00800b44 	movi	r2,45
 200664c:	d8800405 	stb	r2,16(sp)
 2006650:	003c7e06 	br	200584c <___vfprintf_internal_r+0xa38>
 2006654:	d9014f17 	ldw	r4,1340(sp)
 2006658:	b00b883a 	mov	r5,r22
 200665c:	d9800c04 	addi	r6,sp,48
 2006660:	2004dbc0 	call	2004dbc <__sprint_r>
 2006664:	103ba31e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2006668:	dc800e17 	ldw	r18,56(sp)
 200666c:	dc400d17 	ldw	r17,52(sp)
 2006670:	d9000517 	ldw	r4,20(sp)
 2006674:	d9401904 	addi	r5,sp,100
 2006678:	003da106 	br	2005d00 <___vfprintf_internal_r+0xeec>
 200667c:	d9014f17 	ldw	r4,1340(sp)
 2006680:	b00b883a 	mov	r5,r22
 2006684:	d9800c04 	addi	r6,sp,48
 2006688:	2004dbc0 	call	2004dbc <__sprint_r>
 200668c:	103b991e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2006690:	dc800e17 	ldw	r18,56(sp)
 2006694:	dc400d17 	ldw	r17,52(sp)
 2006698:	d9000517 	ldw	r4,20(sp)
 200669c:	d8c01904 	addi	r3,sp,100
 20066a0:	003d8b06 	br	2005cd0 <___vfprintf_internal_r+0xebc>
 20066a4:	070080b4 	movhi	fp,514
 20066a8:	e7293684 	addi	fp,fp,-23334
 20066ac:	9425883a 	add	r18,r18,r16
 20066b0:	8c400044 	addi	r17,r17,1
 20066b4:	008001c4 	movi	r2,7
 20066b8:	1f000015 	stw	fp,0(r3)
 20066bc:	1c000115 	stw	r16,4(r3)
 20066c0:	dc800e15 	stw	r18,56(sp)
 20066c4:	dc400d15 	stw	r17,52(sp)
 20066c8:	147fbc16 	blt	r2,r17,20065bc <___vfprintf_internal_r+0x17a8>
 20066cc:	18c00204 	addi	r3,r3,8
 20066d0:	003fc206 	br	20065dc <___vfprintf_internal_r+0x17c8>
 20066d4:	d9014f17 	ldw	r4,1340(sp)
 20066d8:	b00b883a 	mov	r5,r22
 20066dc:	d9800c04 	addi	r6,sp,48
 20066e0:	2004dbc0 	call	2004dbc <__sprint_r>
 20066e4:	103b831e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 20066e8:	dc800e17 	ldw	r18,56(sp)
 20066ec:	d9000517 	ldw	r4,20(sp)
 20066f0:	d8c01904 	addi	r3,sp,100
 20066f4:	003cfc06 	br	2005ae8 <___vfprintf_internal_r+0xcd4>
 20066f8:	070080b4 	movhi	fp,514
 20066fc:	e7293684 	addi	fp,fp,-23334
 2006700:	003bde06 	br	200567c <___vfprintf_internal_r+0x868>
 2006704:	008080b4 	movhi	r2,514
 2006708:	10a92504 	addi	r2,r2,-23404
 200670c:	d8814115 	stw	r2,1284(sp)
 2006710:	003def06 	br	2005ed0 <___vfprintf_internal_r+0x10bc>
 2006714:	d9014217 	ldw	r4,1288(sp)
 2006718:	d9414317 	ldw	r5,1292(sp)
 200671c:	200a9d00 	call	200a9d0 <__isnand>
 2006720:	10003926 	beq	r2,zero,2006808 <___vfprintf_internal_r+0x19f4>
 2006724:	d9414d17 	ldw	r5,1332(sp)
 2006728:	008011c4 	movi	r2,71
 200672c:	1140ce16 	blt	r2,r5,2006a68 <___vfprintf_internal_r+0x1c54>
 2006730:	018080b4 	movhi	r6,514
 2006734:	31a92604 	addi	r6,r6,-23400
 2006738:	d9814115 	stw	r6,1284(sp)
 200673c:	003de406 	br	2005ed0 <___vfprintf_internal_r+0x10bc>
 2006740:	d9014c17 	ldw	r4,1328(sp)
 2006744:	bdc00044 	addi	r23,r23,1
 2006748:	b8c00007 	ldb	r3,0(r23)
 200674c:	21000814 	ori	r4,r4,32
 2006750:	d9014c15 	stw	r4,1328(sp)
 2006754:	003a2e06 	br	2005010 <___vfprintf_internal_r+0x1fc>
 2006758:	dcc14515 	stw	r19,1300(sp)
 200675c:	98011016 	blt	r19,zero,2006ba0 <___vfprintf_internal_r+0x1d8c>
 2006760:	980f883a 	mov	r7,r19
 2006764:	d8014615 	stw	zero,1304(sp)
 2006768:	003c4c06 	br	200589c <___vfprintf_internal_r+0xa88>
 200676c:	d9014f17 	ldw	r4,1340(sp)
 2006770:	b00b883a 	mov	r5,r22
 2006774:	d9800c04 	addi	r6,sp,48
 2006778:	2004dbc0 	call	2004dbc <__sprint_r>
 200677c:	103b5d1e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2006780:	dc800e17 	ldw	r18,56(sp)
 2006784:	d9000517 	ldw	r4,20(sp)
 2006788:	d8c01904 	addi	r3,sp,100
 200678c:	003f2e06 	br	2006448 <___vfprintf_internal_r+0x1634>
 2006790:	d8c14c17 	ldw	r3,1328(sp)
 2006794:	1880100c 	andi	r2,r3,64
 2006798:	1000a026 	beq	r2,zero,2006a1c <___vfprintf_internal_r+0x1c08>
 200679c:	38800017 	ldw	r2,0(r7)
 20067a0:	39c00104 	addi	r7,r7,4
 20067a4:	d9c14015 	stw	r7,1280(sp)
 20067a8:	d9014b17 	ldw	r4,1324(sp)
 20067ac:	d9c14017 	ldw	r7,1280(sp)
 20067b0:	1100000d 	sth	r4,0(r2)
 20067b4:	0039f306 	br	2004f84 <___vfprintf_internal_r+0x170>
 20067b8:	d9014f17 	ldw	r4,1340(sp)
 20067bc:	b00b883a 	mov	r5,r22
 20067c0:	d9800c04 	addi	r6,sp,48
 20067c4:	2004dbc0 	call	2004dbc <__sprint_r>
 20067c8:	103b4a1e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 20067cc:	dc800e17 	ldw	r18,56(sp)
 20067d0:	dc400d17 	ldw	r17,52(sp)
 20067d4:	d9000517 	ldw	r4,20(sp)
 20067d8:	d8c01904 	addi	r3,sp,100
 20067dc:	003f2d06 	br	2006494 <___vfprintf_internal_r+0x1680>
 20067e0:	00800184 	movi	r2,6
 20067e4:	14c09a36 	bltu	r2,r19,2006a50 <___vfprintf_internal_r+0x1c3c>
 20067e8:	dcc14515 	stw	r19,1300(sp)
 20067ec:	9800010e 	bge	r19,zero,20067f4 <___vfprintf_internal_r+0x19e0>
 20067f0:	d8014515 	stw	zero,1300(sp)
 20067f4:	008080b4 	movhi	r2,514
 20067f8:	10a92804 	addi	r2,r2,-23392
 20067fc:	980f883a 	mov	r7,r19
 2006800:	d8814115 	stw	r2,1284(sp)
 2006804:	003a7206 	br	20051d0 <___vfprintf_internal_r+0x3bc>
 2006808:	00bfffc4 	movi	r2,-1
 200680c:	9880e226 	beq	r19,r2,2006b98 <___vfprintf_internal_r+0x1d84>
 2006810:	d9414d17 	ldw	r5,1332(sp)
 2006814:	008019c4 	movi	r2,103
 2006818:	2880dc26 	beq	r5,r2,2006b8c <___vfprintf_internal_r+0x1d78>
 200681c:	008011c4 	movi	r2,71
 2006820:	2880da26 	beq	r5,r2,2006b8c <___vfprintf_internal_r+0x1d78>
 2006824:	d9414c17 	ldw	r5,1328(sp)
 2006828:	d9014317 	ldw	r4,1292(sp)
 200682c:	d9814217 	ldw	r6,1288(sp)
 2006830:	29404014 	ori	r5,r5,256
 2006834:	d9414c15 	stw	r5,1328(sp)
 2006838:	2000cc16 	blt	r4,zero,2006b6c <___vfprintf_internal_r+0x1d58>
 200683c:	3021883a 	mov	r16,r6
 2006840:	2023883a 	mov	r17,r4
 2006844:	0039883a 	mov	fp,zero
 2006848:	d9414d17 	ldw	r5,1332(sp)
 200684c:	00801984 	movi	r2,102
 2006850:	2880b726 	beq	r5,r2,2006b30 <___vfprintf_internal_r+0x1d1c>
 2006854:	00801184 	movi	r2,70
 2006858:	2880b526 	beq	r5,r2,2006b30 <___vfprintf_internal_r+0x1d1c>
 200685c:	00801944 	movi	r2,101
 2006860:	2880c826 	beq	r5,r2,2006b84 <___vfprintf_internal_r+0x1d70>
 2006864:	00801144 	movi	r2,69
 2006868:	2880c626 	beq	r5,r2,2006b84 <___vfprintf_internal_r+0x1d70>
 200686c:	9829883a 	mov	r20,r19
 2006870:	d9014f17 	ldw	r4,1340(sp)
 2006874:	d8800504 	addi	r2,sp,20
 2006878:	880d883a 	mov	r6,r17
 200687c:	d8800115 	stw	r2,4(sp)
 2006880:	d8c00604 	addi	r3,sp,24
 2006884:	d8800704 	addi	r2,sp,28
 2006888:	800b883a 	mov	r5,r16
 200688c:	01c00084 	movi	r7,2
 2006890:	d8c00215 	stw	r3,8(sp)
 2006894:	d8800315 	stw	r2,12(sp)
 2006898:	dd000015 	stw	r20,0(sp)
 200689c:	20070940 	call	2007094 <_dtoa_r>
 20068a0:	d9814d17 	ldw	r6,1332(sp)
 20068a4:	d8814115 	stw	r2,1284(sp)
 20068a8:	008019c4 	movi	r2,103
 20068ac:	30809526 	beq	r6,r2,2006b04 <___vfprintf_internal_r+0x1cf0>
 20068b0:	d8c14d17 	ldw	r3,1332(sp)
 20068b4:	008011c4 	movi	r2,71
 20068b8:	18809226 	beq	r3,r2,2006b04 <___vfprintf_internal_r+0x1cf0>
 20068bc:	d9414117 	ldw	r5,1284(sp)
 20068c0:	d9814d17 	ldw	r6,1332(sp)
 20068c4:	00801984 	movi	r2,102
 20068c8:	2d25883a 	add	r18,r5,r20
 20068cc:	30808626 	beq	r6,r2,2006ae8 <___vfprintf_internal_r+0x1cd4>
 20068d0:	00801184 	movi	r2,70
 20068d4:	30808426 	beq	r6,r2,2006ae8 <___vfprintf_internal_r+0x1cd4>
 20068d8:	000d883a 	mov	r6,zero
 20068dc:	000f883a 	mov	r7,zero
 20068e0:	880b883a 	mov	r5,r17
 20068e4:	8009883a 	mov	r4,r16
 20068e8:	200d7680 	call	200d768 <__eqdf2>
 20068ec:	1000751e 	bne	r2,zero,2006ac4 <___vfprintf_internal_r+0x1cb0>
 20068f0:	9005883a 	mov	r2,r18
 20068f4:	dc800715 	stw	r18,28(sp)
 20068f8:	d9014117 	ldw	r4,1284(sp)
 20068fc:	d9414d17 	ldw	r5,1332(sp)
 2006900:	00c019c4 	movi	r3,103
 2006904:	1125c83a 	sub	r18,r2,r4
 2006908:	28c06826 	beq	r5,r3,2006aac <___vfprintf_internal_r+0x1c98>
 200690c:	008011c4 	movi	r2,71
 2006910:	28806626 	beq	r5,r2,2006aac <___vfprintf_internal_r+0x1c98>
 2006914:	d9000517 	ldw	r4,20(sp)
 2006918:	d8c14d17 	ldw	r3,1332(sp)
 200691c:	00801944 	movi	r2,101
 2006920:	10c05516 	blt	r2,r3,2006a78 <___vfprintf_internal_r+0x1c64>
 2006924:	213fffc4 	addi	r4,r4,-1
 2006928:	d9000515 	stw	r4,20(sp)
 200692c:	d8c00805 	stb	r3,32(sp)
 2006930:	2021883a 	mov	r16,r4
 2006934:	2000c116 	blt	r4,zero,2006c3c <___vfprintf_internal_r+0x1e28>
 2006938:	00800ac4 	movi	r2,43
 200693c:	d8800845 	stb	r2,33(sp)
 2006940:	00800244 	movi	r2,9
 2006944:	1400af0e 	bge	r2,r16,2006c04 <___vfprintf_internal_r+0x1df0>
 2006948:	1027883a 	mov	r19,r2
 200694c:	dc400b84 	addi	r17,sp,46
 2006950:	8009883a 	mov	r4,r16
 2006954:	01400284 	movi	r5,10
 2006958:	200323c0 	call	200323c <__modsi3>
 200695c:	10800c04 	addi	r2,r2,48
 2006960:	8c7fffc4 	addi	r17,r17,-1
 2006964:	8009883a 	mov	r4,r16
 2006968:	01400284 	movi	r5,10
 200696c:	88800005 	stb	r2,0(r17)
 2006970:	20031dc0 	call	20031dc <__divsi3>
 2006974:	1021883a 	mov	r16,r2
 2006978:	98bff516 	blt	r19,r2,2006950 <___vfprintf_internal_r+0x1b3c>
 200697c:	10c00c04 	addi	r3,r2,48
 2006980:	d88009c4 	addi	r2,sp,39
 2006984:	108001c4 	addi	r2,r2,7
 2006988:	897fffc4 	addi	r5,r17,-1
 200698c:	88ffffc5 	stb	r3,-1(r17)
 2006990:	2880a72e 	bgeu	r5,r2,2006c30 <___vfprintf_internal_r+0x1e1c>
 2006994:	1009883a 	mov	r4,r2
 2006998:	d9800804 	addi	r6,sp,32
 200699c:	d8c00884 	addi	r3,sp,34
 20069a0:	28800003 	ldbu	r2,0(r5)
 20069a4:	29400044 	addi	r5,r5,1
 20069a8:	18800005 	stb	r2,0(r3)
 20069ac:	18c00044 	addi	r3,r3,1
 20069b0:	293ffb36 	bltu	r5,r4,20069a0 <___vfprintf_internal_r+0x1b8c>
 20069b4:	1987c83a 	sub	r3,r3,r6
 20069b8:	00800044 	movi	r2,1
 20069bc:	d8c14815 	stw	r3,1312(sp)
 20069c0:	90cf883a 	add	r7,r18,r3
 20069c4:	1480960e 	bge	r2,r18,2006c20 <___vfprintf_internal_r+0x1e0c>
 20069c8:	39c00044 	addi	r7,r7,1
 20069cc:	d9c14515 	stw	r7,1300(sp)
 20069d0:	38003416 	blt	r7,zero,2006aa4 <___vfprintf_internal_r+0x1c90>
 20069d4:	e0803fcc 	andi	r2,fp,255
 20069d8:	1080201c 	xori	r2,r2,128
 20069dc:	10bfe004 	addi	r2,r2,-128
 20069e0:	10004e26 	beq	r2,zero,2006b1c <___vfprintf_internal_r+0x1d08>
 20069e4:	00800b44 	movi	r2,45
 20069e8:	dc814715 	stw	r18,1308(sp)
 20069ec:	d8014615 	stw	zero,1304(sp)
 20069f0:	d8800405 	stb	r2,16(sp)
 20069f4:	003bab06 	br	20058a4 <___vfprintf_internal_r+0xa90>
 20069f8:	00800b44 	movi	r2,45
 20069fc:	d8800405 	stb	r2,16(sp)
 2006a00:	003d2d06 	br	2005eb8 <___vfprintf_internal_r+0x10a4>
 2006a04:	d9014f17 	ldw	r4,1340(sp)
 2006a08:	b00b883a 	mov	r5,r22
 2006a0c:	d9800c04 	addi	r6,sp,48
 2006a10:	2004dbc0 	call	2004dbc <__sprint_r>
 2006a14:	103ab71e 	bne	r2,zero,20054f4 <___vfprintf_internal_r+0x6e0>
 2006a18:	003ab506 	br	20054f0 <___vfprintf_internal_r+0x6dc>
 2006a1c:	38800017 	ldw	r2,0(r7)
 2006a20:	39c00104 	addi	r7,r7,4
 2006a24:	d9c14015 	stw	r7,1280(sp)
 2006a28:	d9414b17 	ldw	r5,1324(sp)
 2006a2c:	d9c14017 	ldw	r7,1280(sp)
 2006a30:	11400015 	stw	r5,0(r2)
 2006a34:	00395306 	br	2004f84 <___vfprintf_internal_r+0x170>
 2006a38:	980f883a 	mov	r7,r19
 2006a3c:	dcc14515 	stw	r19,1300(sp)
 2006a40:	d8014615 	stw	zero,1304(sp)
 2006a44:	003b9506 	br	200589c <___vfprintf_internal_r+0xa88>
 2006a48:	0027883a 	mov	r19,zero
 2006a4c:	00397206 	br	2005018 <___vfprintf_internal_r+0x204>
 2006a50:	00c080b4 	movhi	r3,514
 2006a54:	18e92804 	addi	r3,r3,-23392
 2006a58:	100f883a 	mov	r7,r2
 2006a5c:	d8814515 	stw	r2,1300(sp)
 2006a60:	d8c14115 	stw	r3,1284(sp)
 2006a64:	0039da06 	br	20051d0 <___vfprintf_internal_r+0x3bc>
 2006a68:	008080b4 	movhi	r2,514
 2006a6c:	10a92704 	addi	r2,r2,-23396
 2006a70:	d8814115 	stw	r2,1284(sp)
 2006a74:	003d1606 	br	2005ed0 <___vfprintf_internal_r+0x10bc>
 2006a78:	d9414d17 	ldw	r5,1332(sp)
 2006a7c:	00801984 	movi	r2,102
 2006a80:	28804926 	beq	r5,r2,2006ba8 <___vfprintf_internal_r+0x1d94>
 2006a84:	200f883a 	mov	r7,r4
 2006a88:	24805716 	blt	r4,r18,2006be8 <___vfprintf_internal_r+0x1dd4>
 2006a8c:	d9414c17 	ldw	r5,1328(sp)
 2006a90:	2880004c 	andi	r2,r5,1
 2006a94:	10000126 	beq	r2,zero,2006a9c <___vfprintf_internal_r+0x1c88>
 2006a98:	21c00044 	addi	r7,r4,1
 2006a9c:	d9c14515 	stw	r7,1300(sp)
 2006aa0:	383fcc0e 	bge	r7,zero,20069d4 <___vfprintf_internal_r+0x1bc0>
 2006aa4:	d8014515 	stw	zero,1300(sp)
 2006aa8:	003fca06 	br	20069d4 <___vfprintf_internal_r+0x1bc0>
 2006aac:	d9000517 	ldw	r4,20(sp)
 2006ab0:	00bfff04 	movi	r2,-4
 2006ab4:	1100480e 	bge	r2,r4,2006bd8 <___vfprintf_internal_r+0x1dc4>
 2006ab8:	99004716 	blt	r19,r4,2006bd8 <___vfprintf_internal_r+0x1dc4>
 2006abc:	d8c14d15 	stw	r3,1332(sp)
 2006ac0:	003ff006 	br	2006a84 <___vfprintf_internal_r+0x1c70>
 2006ac4:	d8800717 	ldw	r2,28(sp)
 2006ac8:	14bf8b2e 	bgeu	r2,r18,20068f8 <___vfprintf_internal_r+0x1ae4>
 2006acc:	9007883a 	mov	r3,r18
 2006ad0:	01000c04 	movi	r4,48
 2006ad4:	11000005 	stb	r4,0(r2)
 2006ad8:	10800044 	addi	r2,r2,1
 2006adc:	d8800715 	stw	r2,28(sp)
 2006ae0:	18bffc1e 	bne	r3,r2,2006ad4 <___vfprintf_internal_r+0x1cc0>
 2006ae4:	003f8406 	br	20068f8 <___vfprintf_internal_r+0x1ae4>
 2006ae8:	d8814117 	ldw	r2,1284(sp)
 2006aec:	10c00007 	ldb	r3,0(r2)
 2006af0:	00800c04 	movi	r2,48
 2006af4:	18805b26 	beq	r3,r2,2006c64 <___vfprintf_internal_r+0x1e50>
 2006af8:	d9000517 	ldw	r4,20(sp)
 2006afc:	9125883a 	add	r18,r18,r4
 2006b00:	003f7506 	br	20068d8 <___vfprintf_internal_r+0x1ac4>
 2006b04:	d9014c17 	ldw	r4,1328(sp)
 2006b08:	2080004c 	andi	r2,r4,1
 2006b0c:	1005003a 	cmpeq	r2,r2,zero
 2006b10:	103f6a26 	beq	r2,zero,20068bc <___vfprintf_internal_r+0x1aa8>
 2006b14:	d8800717 	ldw	r2,28(sp)
 2006b18:	003f7706 	br	20068f8 <___vfprintf_internal_r+0x1ae4>
 2006b1c:	d9c14515 	stw	r7,1300(sp)
 2006b20:	38004d16 	blt	r7,zero,2006c58 <___vfprintf_internal_r+0x1e44>
 2006b24:	dc814715 	stw	r18,1308(sp)
 2006b28:	d8014615 	stw	zero,1304(sp)
 2006b2c:	003b5b06 	br	200589c <___vfprintf_internal_r+0xa88>
 2006b30:	d9014f17 	ldw	r4,1340(sp)
 2006b34:	d8800504 	addi	r2,sp,20
 2006b38:	d8800115 	stw	r2,4(sp)
 2006b3c:	d8c00604 	addi	r3,sp,24
 2006b40:	d8800704 	addi	r2,sp,28
 2006b44:	800b883a 	mov	r5,r16
 2006b48:	880d883a 	mov	r6,r17
 2006b4c:	01c000c4 	movi	r7,3
 2006b50:	d8c00215 	stw	r3,8(sp)
 2006b54:	d8800315 	stw	r2,12(sp)
 2006b58:	dcc00015 	stw	r19,0(sp)
 2006b5c:	9829883a 	mov	r20,r19
 2006b60:	20070940 	call	2007094 <_dtoa_r>
 2006b64:	d8814115 	stw	r2,1284(sp)
 2006b68:	003f5106 	br	20068b0 <___vfprintf_internal_r+0x1a9c>
 2006b6c:	d8c14217 	ldw	r3,1288(sp)
 2006b70:	d9014317 	ldw	r4,1292(sp)
 2006b74:	07000b44 	movi	fp,45
 2006b78:	1821883a 	mov	r16,r3
 2006b7c:	2460003c 	xorhi	r17,r4,32768
 2006b80:	003f3106 	br	2006848 <___vfprintf_internal_r+0x1a34>
 2006b84:	9d000044 	addi	r20,r19,1
 2006b88:	003f3906 	br	2006870 <___vfprintf_internal_r+0x1a5c>
 2006b8c:	983f251e 	bne	r19,zero,2006824 <___vfprintf_internal_r+0x1a10>
 2006b90:	04c00044 	movi	r19,1
 2006b94:	003f2306 	br	2006824 <___vfprintf_internal_r+0x1a10>
 2006b98:	04c00184 	movi	r19,6
 2006b9c:	003f2106 	br	2006824 <___vfprintf_internal_r+0x1a10>
 2006ba0:	d8014515 	stw	zero,1300(sp)
 2006ba4:	003eee06 	br	2006760 <___vfprintf_internal_r+0x194c>
 2006ba8:	200f883a 	mov	r7,r4
 2006bac:	0100370e 	bge	zero,r4,2006c8c <___vfprintf_internal_r+0x1e78>
 2006bb0:	9800031e 	bne	r19,zero,2006bc0 <___vfprintf_internal_r+0x1dac>
 2006bb4:	d9814c17 	ldw	r6,1328(sp)
 2006bb8:	3080004c 	andi	r2,r6,1
 2006bbc:	103fb726 	beq	r2,zero,2006a9c <___vfprintf_internal_r+0x1c88>
 2006bc0:	20800044 	addi	r2,r4,1
 2006bc4:	98a7883a 	add	r19,r19,r2
 2006bc8:	dcc14515 	stw	r19,1300(sp)
 2006bcc:	980f883a 	mov	r7,r19
 2006bd0:	983f800e 	bge	r19,zero,20069d4 <___vfprintf_internal_r+0x1bc0>
 2006bd4:	003fb306 	br	2006aa4 <___vfprintf_internal_r+0x1c90>
 2006bd8:	d9814d17 	ldw	r6,1332(sp)
 2006bdc:	31bfff84 	addi	r6,r6,-2
 2006be0:	d9814d15 	stw	r6,1332(sp)
 2006be4:	003f4c06 	br	2006918 <___vfprintf_internal_r+0x1b04>
 2006be8:	0100180e 	bge	zero,r4,2006c4c <___vfprintf_internal_r+0x1e38>
 2006bec:	00800044 	movi	r2,1
 2006bf0:	1485883a 	add	r2,r2,r18
 2006bf4:	d8814515 	stw	r2,1300(sp)
 2006bf8:	100f883a 	mov	r7,r2
 2006bfc:	103f750e 	bge	r2,zero,20069d4 <___vfprintf_internal_r+0x1bc0>
 2006c00:	003fa806 	br	2006aa4 <___vfprintf_internal_r+0x1c90>
 2006c04:	80c00c04 	addi	r3,r16,48
 2006c08:	00800c04 	movi	r2,48
 2006c0c:	d8c008c5 	stb	r3,35(sp)
 2006c10:	d9800804 	addi	r6,sp,32
 2006c14:	d8c00904 	addi	r3,sp,36
 2006c18:	d8800885 	stb	r2,34(sp)
 2006c1c:	003f6506 	br	20069b4 <___vfprintf_internal_r+0x1ba0>
 2006c20:	d9014c17 	ldw	r4,1328(sp)
 2006c24:	2084703a 	and	r2,r4,r2
 2006c28:	103f9c26 	beq	r2,zero,2006a9c <___vfprintf_internal_r+0x1c88>
 2006c2c:	003f6606 	br	20069c8 <___vfprintf_internal_r+0x1bb4>
 2006c30:	d9800804 	addi	r6,sp,32
 2006c34:	d8c00884 	addi	r3,sp,34
 2006c38:	003f5e06 	br	20069b4 <___vfprintf_internal_r+0x1ba0>
 2006c3c:	00800b44 	movi	r2,45
 2006c40:	0121c83a 	sub	r16,zero,r4
 2006c44:	d8800845 	stb	r2,33(sp)
 2006c48:	003f3d06 	br	2006940 <___vfprintf_internal_r+0x1b2c>
 2006c4c:	00800084 	movi	r2,2
 2006c50:	1105c83a 	sub	r2,r2,r4
 2006c54:	003fe606 	br	2006bf0 <___vfprintf_internal_r+0x1ddc>
 2006c58:	d8014515 	stw	zero,1300(sp)
 2006c5c:	dc814715 	stw	r18,1308(sp)
 2006c60:	003fb106 	br	2006b28 <___vfprintf_internal_r+0x1d14>
 2006c64:	000d883a 	mov	r6,zero
 2006c68:	000f883a 	mov	r7,zero
 2006c6c:	8009883a 	mov	r4,r16
 2006c70:	880b883a 	mov	r5,r17
 2006c74:	200d7f00 	call	200d7f0 <__nedf2>
 2006c78:	103f9f26 	beq	r2,zero,2006af8 <___vfprintf_internal_r+0x1ce4>
 2006c7c:	00800044 	movi	r2,1
 2006c80:	1509c83a 	sub	r4,r2,r20
 2006c84:	d9000515 	stw	r4,20(sp)
 2006c88:	003f9b06 	br	2006af8 <___vfprintf_internal_r+0x1ce4>
 2006c8c:	98000d1e 	bne	r19,zero,2006cc4 <___vfprintf_internal_r+0x1eb0>
 2006c90:	d8c14c17 	ldw	r3,1328(sp)
 2006c94:	1880004c 	andi	r2,r3,1
 2006c98:	10000a1e 	bne	r2,zero,2006cc4 <___vfprintf_internal_r+0x1eb0>
 2006c9c:	01000044 	movi	r4,1
 2006ca0:	200f883a 	mov	r7,r4
 2006ca4:	d9014515 	stw	r4,1300(sp)
 2006ca8:	003f4a06 	br	20069d4 <___vfprintf_internal_r+0x1bc0>
 2006cac:	3cc00017 	ldw	r19,0(r7)
 2006cb0:	39c00104 	addi	r7,r7,4
 2006cb4:	983d0e0e 	bge	r19,zero,20060f0 <___vfprintf_internal_r+0x12dc>
 2006cb8:	b8c00007 	ldb	r3,0(r23)
 2006cbc:	04ffffc4 	movi	r19,-1
 2006cc0:	0038d306 	br	2005010 <___vfprintf_internal_r+0x1fc>
 2006cc4:	9cc00084 	addi	r19,r19,2
 2006cc8:	dcc14515 	stw	r19,1300(sp)
 2006ccc:	980f883a 	mov	r7,r19
 2006cd0:	983f400e 	bge	r19,zero,20069d4 <___vfprintf_internal_r+0x1bc0>
 2006cd4:	003f7306 	br	2006aa4 <___vfprintf_internal_r+0x1c90>

02006cd8 <__vfprintf_internal>:
 2006cd8:	008080b4 	movhi	r2,514
 2006cdc:	10b0e304 	addi	r2,r2,-15476
 2006ce0:	2013883a 	mov	r9,r4
 2006ce4:	11000017 	ldw	r4,0(r2)
 2006ce8:	2805883a 	mov	r2,r5
 2006cec:	300f883a 	mov	r7,r6
 2006cf0:	480b883a 	mov	r5,r9
 2006cf4:	100d883a 	mov	r6,r2
 2006cf8:	2004e141 	jmpi	2004e14 <___vfprintf_internal_r>

02006cfc <__swsetup_r>:
 2006cfc:	008080b4 	movhi	r2,514
 2006d00:	10b0e304 	addi	r2,r2,-15476
 2006d04:	10c00017 	ldw	r3,0(r2)
 2006d08:	defffd04 	addi	sp,sp,-12
 2006d0c:	dc400115 	stw	r17,4(sp)
 2006d10:	dc000015 	stw	r16,0(sp)
 2006d14:	dfc00215 	stw	ra,8(sp)
 2006d18:	2023883a 	mov	r17,r4
 2006d1c:	2821883a 	mov	r16,r5
 2006d20:	18000226 	beq	r3,zero,2006d2c <__swsetup_r+0x30>
 2006d24:	18800e17 	ldw	r2,56(r3)
 2006d28:	10001f26 	beq	r2,zero,2006da8 <__swsetup_r+0xac>
 2006d2c:	8100030b 	ldhu	r4,12(r16)
 2006d30:	2080020c 	andi	r2,r4,8
 2006d34:	10002826 	beq	r2,zero,2006dd8 <__swsetup_r+0xdc>
 2006d38:	81400417 	ldw	r5,16(r16)
 2006d3c:	28001d26 	beq	r5,zero,2006db4 <__swsetup_r+0xb8>
 2006d40:	2080004c 	andi	r2,r4,1
 2006d44:	1005003a 	cmpeq	r2,r2,zero
 2006d48:	10000b26 	beq	r2,zero,2006d78 <__swsetup_r+0x7c>
 2006d4c:	2080008c 	andi	r2,r4,2
 2006d50:	10001226 	beq	r2,zero,2006d9c <__swsetup_r+0xa0>
 2006d54:	0005883a 	mov	r2,zero
 2006d58:	80800215 	stw	r2,8(r16)
 2006d5c:	28000b26 	beq	r5,zero,2006d8c <__swsetup_r+0x90>
 2006d60:	0005883a 	mov	r2,zero
 2006d64:	dfc00217 	ldw	ra,8(sp)
 2006d68:	dc400117 	ldw	r17,4(sp)
 2006d6c:	dc000017 	ldw	r16,0(sp)
 2006d70:	dec00304 	addi	sp,sp,12
 2006d74:	f800283a 	ret
 2006d78:	80800517 	ldw	r2,20(r16)
 2006d7c:	80000215 	stw	zero,8(r16)
 2006d80:	0085c83a 	sub	r2,zero,r2
 2006d84:	80800615 	stw	r2,24(r16)
 2006d88:	283ff51e 	bne	r5,zero,2006d60 <__swsetup_r+0x64>
 2006d8c:	2080200c 	andi	r2,r4,128
 2006d90:	103ff326 	beq	r2,zero,2006d60 <__swsetup_r+0x64>
 2006d94:	00bfffc4 	movi	r2,-1
 2006d98:	003ff206 	br	2006d64 <__swsetup_r+0x68>
 2006d9c:	80800517 	ldw	r2,20(r16)
 2006da0:	80800215 	stw	r2,8(r16)
 2006da4:	003fed06 	br	2006d5c <__swsetup_r+0x60>
 2006da8:	1809883a 	mov	r4,r3
 2006dac:	20088e00 	call	20088e0 <__sinit>
 2006db0:	003fde06 	br	2006d2c <__swsetup_r+0x30>
 2006db4:	20c0a00c 	andi	r3,r4,640
 2006db8:	00808004 	movi	r2,512
 2006dbc:	18bfe026 	beq	r3,r2,2006d40 <__swsetup_r+0x44>
 2006dc0:	8809883a 	mov	r4,r17
 2006dc4:	800b883a 	mov	r5,r16
 2006dc8:	200968c0 	call	200968c <__smakebuf_r>
 2006dcc:	8100030b 	ldhu	r4,12(r16)
 2006dd0:	81400417 	ldw	r5,16(r16)
 2006dd4:	003fda06 	br	2006d40 <__swsetup_r+0x44>
 2006dd8:	2080040c 	andi	r2,r4,16
 2006ddc:	103fed26 	beq	r2,zero,2006d94 <__swsetup_r+0x98>
 2006de0:	2080010c 	andi	r2,r4,4
 2006de4:	10001226 	beq	r2,zero,2006e30 <__swsetup_r+0x134>
 2006de8:	81400c17 	ldw	r5,48(r16)
 2006dec:	28000526 	beq	r5,zero,2006e04 <__swsetup_r+0x108>
 2006df0:	80801004 	addi	r2,r16,64
 2006df4:	28800226 	beq	r5,r2,2006e00 <__swsetup_r+0x104>
 2006df8:	8809883a 	mov	r4,r17
 2006dfc:	2008c980 	call	2008c98 <_free_r>
 2006e00:	80000c15 	stw	zero,48(r16)
 2006e04:	8080030b 	ldhu	r2,12(r16)
 2006e08:	81400417 	ldw	r5,16(r16)
 2006e0c:	80000115 	stw	zero,4(r16)
 2006e10:	10bff6cc 	andi	r2,r2,65499
 2006e14:	8080030d 	sth	r2,12(r16)
 2006e18:	81400015 	stw	r5,0(r16)
 2006e1c:	8080030b 	ldhu	r2,12(r16)
 2006e20:	10800214 	ori	r2,r2,8
 2006e24:	113fffcc 	andi	r4,r2,65535
 2006e28:	8080030d 	sth	r2,12(r16)
 2006e2c:	003fc306 	br	2006d3c <__swsetup_r+0x40>
 2006e30:	81400417 	ldw	r5,16(r16)
 2006e34:	003ff906 	br	2006e1c <__swsetup_r+0x120>

02006e38 <abort>:
 2006e38:	deffff04 	addi	sp,sp,-4
 2006e3c:	01000184 	movi	r4,6
 2006e40:	dfc00015 	stw	ra,0(sp)
 2006e44:	200aacc0 	call	200aacc <raise>
 2006e48:	01000044 	movi	r4,1
 2006e4c:	200e2380 	call	200e238 <_exit>

02006e50 <quorem>:
 2006e50:	28c00417 	ldw	r3,16(r5)
 2006e54:	20800417 	ldw	r2,16(r4)
 2006e58:	defff104 	addi	sp,sp,-60
 2006e5c:	dfc00e15 	stw	ra,56(sp)
 2006e60:	df000d15 	stw	fp,52(sp)
 2006e64:	ddc00c15 	stw	r23,48(sp)
 2006e68:	dd800b15 	stw	r22,44(sp)
 2006e6c:	dd400a15 	stw	r21,40(sp)
 2006e70:	dd000915 	stw	r20,36(sp)
 2006e74:	dcc00815 	stw	r19,32(sp)
 2006e78:	dc800715 	stw	r18,28(sp)
 2006e7c:	dc400615 	stw	r17,24(sp)
 2006e80:	dc000515 	stw	r16,20(sp)
 2006e84:	d9000315 	stw	r4,12(sp)
 2006e88:	d9400415 	stw	r5,16(sp)
 2006e8c:	10c07f16 	blt	r2,r3,200708c <quorem+0x23c>
 2006e90:	1d3fffc4 	addi	r20,r3,-1
 2006e94:	d8c00417 	ldw	r3,16(sp)
 2006e98:	d9000317 	ldw	r4,12(sp)
 2006e9c:	a505883a 	add	r2,r20,r20
 2006ea0:	1085883a 	add	r2,r2,r2
 2006ea4:	1cc00504 	addi	r19,r3,20
 2006ea8:	25c00504 	addi	r23,r4,20
 2006eac:	98ad883a 	add	r22,r19,r2
 2006eb0:	15c7883a 	add	r3,r2,r23
 2006eb4:	b1400017 	ldw	r5,0(r22)
 2006eb8:	19000017 	ldw	r4,0(r3)
 2006ebc:	d8c00015 	stw	r3,0(sp)
 2006ec0:	29400044 	addi	r5,r5,1
 2006ec4:	d9000215 	stw	r4,8(sp)
 2006ec8:	200329c0 	call	200329c <__udivsi3>
 2006ecc:	1039883a 	mov	fp,r2
 2006ed0:	10003d1e 	bne	r2,zero,2006fc8 <quorem+0x178>
 2006ed4:	d9400417 	ldw	r5,16(sp)
 2006ed8:	d9000317 	ldw	r4,12(sp)
 2006edc:	2009a600 	call	2009a60 <__mcmp>
 2006ee0:	10002c16 	blt	r2,zero,2006f94 <quorem+0x144>
 2006ee4:	e7000044 	addi	fp,fp,1
 2006ee8:	b80f883a 	mov	r7,r23
 2006eec:	0011883a 	mov	r8,zero
 2006ef0:	0009883a 	mov	r4,zero
 2006ef4:	99400017 	ldw	r5,0(r19)
 2006ef8:	38c00017 	ldw	r3,0(r7)
 2006efc:	9cc00104 	addi	r19,r19,4
 2006f00:	28bfffcc 	andi	r2,r5,65535
 2006f04:	2085883a 	add	r2,r4,r2
 2006f08:	11bfffcc 	andi	r6,r2,65535
 2006f0c:	193fffcc 	andi	r4,r3,65535
 2006f10:	1004d43a 	srli	r2,r2,16
 2006f14:	280ad43a 	srli	r5,r5,16
 2006f18:	2189c83a 	sub	r4,r4,r6
 2006f1c:	2209883a 	add	r4,r4,r8
 2006f20:	1806d43a 	srli	r3,r3,16
 2006f24:	288b883a 	add	r5,r5,r2
 2006f28:	200dd43a 	srai	r6,r4,16
 2006f2c:	28bfffcc 	andi	r2,r5,65535
 2006f30:	1887c83a 	sub	r3,r3,r2
 2006f34:	1987883a 	add	r3,r3,r6
 2006f38:	3900000d 	sth	r4,0(r7)
 2006f3c:	38c0008d 	sth	r3,2(r7)
 2006f40:	2808d43a 	srli	r4,r5,16
 2006f44:	39c00104 	addi	r7,r7,4
 2006f48:	1811d43a 	srai	r8,r3,16
 2006f4c:	b4ffe92e 	bgeu	r22,r19,2006ef4 <quorem+0xa4>
 2006f50:	a505883a 	add	r2,r20,r20
 2006f54:	1085883a 	add	r2,r2,r2
 2006f58:	b885883a 	add	r2,r23,r2
 2006f5c:	10c00017 	ldw	r3,0(r2)
 2006f60:	18000c1e 	bne	r3,zero,2006f94 <quorem+0x144>
 2006f64:	113fff04 	addi	r4,r2,-4
 2006f68:	b900082e 	bgeu	r23,r4,2006f8c <quorem+0x13c>
 2006f6c:	10bfff17 	ldw	r2,-4(r2)
 2006f70:	10000326 	beq	r2,zero,2006f80 <quorem+0x130>
 2006f74:	00000506 	br	2006f8c <quorem+0x13c>
 2006f78:	20800017 	ldw	r2,0(r4)
 2006f7c:	1000031e 	bne	r2,zero,2006f8c <quorem+0x13c>
 2006f80:	213fff04 	addi	r4,r4,-4
 2006f84:	a53fffc4 	addi	r20,r20,-1
 2006f88:	b93ffb36 	bltu	r23,r4,2006f78 <quorem+0x128>
 2006f8c:	d9000317 	ldw	r4,12(sp)
 2006f90:	25000415 	stw	r20,16(r4)
 2006f94:	e005883a 	mov	r2,fp
 2006f98:	dfc00e17 	ldw	ra,56(sp)
 2006f9c:	df000d17 	ldw	fp,52(sp)
 2006fa0:	ddc00c17 	ldw	r23,48(sp)
 2006fa4:	dd800b17 	ldw	r22,44(sp)
 2006fa8:	dd400a17 	ldw	r21,40(sp)
 2006fac:	dd000917 	ldw	r20,36(sp)
 2006fb0:	dcc00817 	ldw	r19,32(sp)
 2006fb4:	dc800717 	ldw	r18,28(sp)
 2006fb8:	dc400617 	ldw	r17,24(sp)
 2006fbc:	dc000517 	ldw	r16,20(sp)
 2006fc0:	dec00f04 	addi	sp,sp,60
 2006fc4:	f800283a 	ret
 2006fc8:	b823883a 	mov	r17,r23
 2006fcc:	9825883a 	mov	r18,r19
 2006fd0:	d8000115 	stw	zero,4(sp)
 2006fd4:	002b883a 	mov	r21,zero
 2006fd8:	94000017 	ldw	r16,0(r18)
 2006fdc:	e009883a 	mov	r4,fp
 2006fe0:	94800104 	addi	r18,r18,4
 2006fe4:	817fffcc 	andi	r5,r16,65535
 2006fe8:	20032ac0 	call	20032ac <__mulsi3>
 2006fec:	800ad43a 	srli	r5,r16,16
 2006ff0:	e009883a 	mov	r4,fp
 2006ff4:	a8a1883a 	add	r16,r21,r2
 2006ff8:	20032ac0 	call	20032ac <__mulsi3>
 2006ffc:	89000017 	ldw	r4,0(r17)
 2007000:	80ffffcc 	andi	r3,r16,65535
 2007004:	8020d43a 	srli	r16,r16,16
 2007008:	217fffcc 	andi	r5,r4,65535
 200700c:	28cbc83a 	sub	r5,r5,r3
 2007010:	d8c00117 	ldw	r3,4(sp)
 2007014:	2008d43a 	srli	r4,r4,16
 2007018:	1405883a 	add	r2,r2,r16
 200701c:	28cb883a 	add	r5,r5,r3
 2007020:	280dd43a 	srai	r6,r5,16
 2007024:	10ffffcc 	andi	r3,r2,65535
 2007028:	20c9c83a 	sub	r4,r4,r3
 200702c:	2189883a 	add	r4,r4,r6
 2007030:	8900008d 	sth	r4,2(r17)
 2007034:	2009d43a 	srai	r4,r4,16
 2007038:	8940000d 	sth	r5,0(r17)
 200703c:	102ad43a 	srli	r21,r2,16
 2007040:	8c400104 	addi	r17,r17,4
 2007044:	d9000115 	stw	r4,4(sp)
 2007048:	b4bfe32e 	bgeu	r22,r18,2006fd8 <quorem+0x188>
 200704c:	d9000217 	ldw	r4,8(sp)
 2007050:	203fa01e 	bne	r4,zero,2006ed4 <quorem+0x84>
 2007054:	d8800017 	ldw	r2,0(sp)
 2007058:	10ffff04 	addi	r3,r2,-4
 200705c:	b8c0082e 	bgeu	r23,r3,2007080 <quorem+0x230>
 2007060:	10bfff17 	ldw	r2,-4(r2)
 2007064:	10000326 	beq	r2,zero,2007074 <quorem+0x224>
 2007068:	00000506 	br	2007080 <quorem+0x230>
 200706c:	18800017 	ldw	r2,0(r3)
 2007070:	1000031e 	bne	r2,zero,2007080 <quorem+0x230>
 2007074:	18ffff04 	addi	r3,r3,-4
 2007078:	a53fffc4 	addi	r20,r20,-1
 200707c:	b8fffb36 	bltu	r23,r3,200706c <quorem+0x21c>
 2007080:	d8c00317 	ldw	r3,12(sp)
 2007084:	1d000415 	stw	r20,16(r3)
 2007088:	003f9206 	br	2006ed4 <quorem+0x84>
 200708c:	0005883a 	mov	r2,zero
 2007090:	003fc106 	br	2006f98 <quorem+0x148>

02007094 <_dtoa_r>:
 2007094:	22001017 	ldw	r8,64(r4)
 2007098:	deffda04 	addi	sp,sp,-152
 200709c:	dd402115 	stw	r21,132(sp)
 20070a0:	dd002015 	stw	r20,128(sp)
 20070a4:	dc801e15 	stw	r18,120(sp)
 20070a8:	dc401d15 	stw	r17,116(sp)
 20070ac:	dfc02515 	stw	ra,148(sp)
 20070b0:	df002415 	stw	fp,144(sp)
 20070b4:	ddc02315 	stw	r23,140(sp)
 20070b8:	dd802215 	stw	r22,136(sp)
 20070bc:	dcc01f15 	stw	r19,124(sp)
 20070c0:	dc001c15 	stw	r16,112(sp)
 20070c4:	d9001615 	stw	r4,88(sp)
 20070c8:	3023883a 	mov	r17,r6
 20070cc:	2829883a 	mov	r20,r5
 20070d0:	d9c01715 	stw	r7,92(sp)
 20070d4:	dc802817 	ldw	r18,160(sp)
 20070d8:	302b883a 	mov	r21,r6
 20070dc:	40000a26 	beq	r8,zero,2007108 <_dtoa_r+0x74>
 20070e0:	20801117 	ldw	r2,68(r4)
 20070e4:	400b883a 	mov	r5,r8
 20070e8:	40800115 	stw	r2,4(r8)
 20070ec:	20c01117 	ldw	r3,68(r4)
 20070f0:	00800044 	movi	r2,1
 20070f4:	10c4983a 	sll	r2,r2,r3
 20070f8:	40800215 	stw	r2,8(r8)
 20070fc:	20099040 	call	2009904 <_Bfree>
 2007100:	d8c01617 	ldw	r3,88(sp)
 2007104:	18001015 	stw	zero,64(r3)
 2007108:	8800a316 	blt	r17,zero,2007398 <_dtoa_r+0x304>
 200710c:	90000015 	stw	zero,0(r18)
 2007110:	a8dffc2c 	andhi	r3,r21,32752
 2007114:	009ffc34 	movhi	r2,32752
 2007118:	18809126 	beq	r3,r2,2007360 <_dtoa_r+0x2cc>
 200711c:	000d883a 	mov	r6,zero
 2007120:	000f883a 	mov	r7,zero
 2007124:	a009883a 	mov	r4,r20
 2007128:	a80b883a 	mov	r5,r21
 200712c:	dd001215 	stw	r20,72(sp)
 2007130:	dd401315 	stw	r21,76(sp)
 2007134:	200d7f00 	call	200d7f0 <__nedf2>
 2007138:	1000171e 	bne	r2,zero,2007198 <_dtoa_r+0x104>
 200713c:	d9802717 	ldw	r6,156(sp)
 2007140:	00800044 	movi	r2,1
 2007144:	30800015 	stw	r2,0(r6)
 2007148:	d8802917 	ldw	r2,164(sp)
 200714c:	10029b26 	beq	r2,zero,2007bbc <_dtoa_r+0xb28>
 2007150:	d9002917 	ldw	r4,164(sp)
 2007154:	008080b4 	movhi	r2,514
 2007158:	10a93644 	addi	r2,r2,-23335
 200715c:	10ffffc4 	addi	r3,r2,-1
 2007160:	20800015 	stw	r2,0(r4)
 2007164:	1805883a 	mov	r2,r3
 2007168:	dfc02517 	ldw	ra,148(sp)
 200716c:	df002417 	ldw	fp,144(sp)
 2007170:	ddc02317 	ldw	r23,140(sp)
 2007174:	dd802217 	ldw	r22,136(sp)
 2007178:	dd402117 	ldw	r21,132(sp)
 200717c:	dd002017 	ldw	r20,128(sp)
 2007180:	dcc01f17 	ldw	r19,124(sp)
 2007184:	dc801e17 	ldw	r18,120(sp)
 2007188:	dc401d17 	ldw	r17,116(sp)
 200718c:	dc001c17 	ldw	r16,112(sp)
 2007190:	dec02604 	addi	sp,sp,152
 2007194:	f800283a 	ret
 2007198:	d9001617 	ldw	r4,88(sp)
 200719c:	d9401217 	ldw	r5,72(sp)
 20071a0:	d8800104 	addi	r2,sp,4
 20071a4:	a80d883a 	mov	r6,r21
 20071a8:	d9c00204 	addi	r7,sp,8
 20071ac:	d8800015 	stw	r2,0(sp)
 20071b0:	2009f400 	call	2009f40 <__d2b>
 20071b4:	d8800715 	stw	r2,28(sp)
 20071b8:	a804d53a 	srli	r2,r21,20
 20071bc:	1101ffcc 	andi	r4,r2,2047
 20071c0:	20008626 	beq	r4,zero,20073dc <_dtoa_r+0x348>
 20071c4:	d8c01217 	ldw	r3,72(sp)
 20071c8:	00800434 	movhi	r2,16
 20071cc:	10bfffc4 	addi	r2,r2,-1
 20071d0:	ddc00117 	ldw	r23,4(sp)
 20071d4:	a884703a 	and	r2,r21,r2
 20071d8:	1811883a 	mov	r8,r3
 20071dc:	124ffc34 	orhi	r9,r2,16368
 20071e0:	25bf0044 	addi	r22,r4,-1023
 20071e4:	d8000815 	stw	zero,32(sp)
 20071e8:	0005883a 	mov	r2,zero
 20071ec:	00cffe34 	movhi	r3,16376
 20071f0:	480b883a 	mov	r5,r9
 20071f4:	4009883a 	mov	r4,r8
 20071f8:	180f883a 	mov	r7,r3
 20071fc:	100d883a 	mov	r6,r2
 2007200:	2002fe40 	call	2002fe4 <__subdf3>
 2007204:	0218dbf4 	movhi	r8,25455
 2007208:	4210d844 	addi	r8,r8,17249
 200720c:	024ff4f4 	movhi	r9,16339
 2007210:	4a61e9c4 	addi	r9,r9,-30809
 2007214:	480f883a 	mov	r7,r9
 2007218:	400d883a 	mov	r6,r8
 200721c:	180b883a 	mov	r5,r3
 2007220:	1009883a 	mov	r4,r2
 2007224:	200d14c0 	call	200d14c <__muldf3>
 2007228:	0222d874 	movhi	r8,35681
 200722c:	42322cc4 	addi	r8,r8,-14157
 2007230:	024ff1f4 	movhi	r9,16327
 2007234:	4a628a04 	addi	r9,r9,-30168
 2007238:	480f883a 	mov	r7,r9
 200723c:	400d883a 	mov	r6,r8
 2007240:	180b883a 	mov	r5,r3
 2007244:	1009883a 	mov	r4,r2
 2007248:	20030640 	call	2003064 <__adddf3>
 200724c:	b009883a 	mov	r4,r22
 2007250:	1021883a 	mov	r16,r2
 2007254:	1823883a 	mov	r17,r3
 2007258:	200da100 	call	200da10 <__floatsidf>
 200725c:	021427f4 	movhi	r8,20639
 2007260:	421e7ec4 	addi	r8,r8,31227
 2007264:	024ff4f4 	movhi	r9,16339
 2007268:	4a5104c4 	addi	r9,r9,17427
 200726c:	480f883a 	mov	r7,r9
 2007270:	400d883a 	mov	r6,r8
 2007274:	180b883a 	mov	r5,r3
 2007278:	1009883a 	mov	r4,r2
 200727c:	200d14c0 	call	200d14c <__muldf3>
 2007280:	180f883a 	mov	r7,r3
 2007284:	880b883a 	mov	r5,r17
 2007288:	100d883a 	mov	r6,r2
 200728c:	8009883a 	mov	r4,r16
 2007290:	20030640 	call	2003064 <__adddf3>
 2007294:	1009883a 	mov	r4,r2
 2007298:	180b883a 	mov	r5,r3
 200729c:	1021883a 	mov	r16,r2
 20072a0:	1823883a 	mov	r17,r3
 20072a4:	200db080 	call	200db08 <__fixdfsi>
 20072a8:	000d883a 	mov	r6,zero
 20072ac:	000f883a 	mov	r7,zero
 20072b0:	8009883a 	mov	r4,r16
 20072b4:	880b883a 	mov	r5,r17
 20072b8:	d8800d15 	stw	r2,52(sp)
 20072bc:	200d9880 	call	200d988 <__ltdf2>
 20072c0:	10031716 	blt	r2,zero,2007f20 <_dtoa_r+0xe8c>
 20072c4:	d8c00d17 	ldw	r3,52(sp)
 20072c8:	00800584 	movi	r2,22
 20072cc:	10c1482e 	bgeu	r2,r3,20077f0 <_dtoa_r+0x75c>
 20072d0:	01000044 	movi	r4,1
 20072d4:	d9000c15 	stw	r4,48(sp)
 20072d8:	bd85c83a 	sub	r2,r23,r22
 20072dc:	11bfffc4 	addi	r6,r2,-1
 20072e0:	30030b16 	blt	r6,zero,2007f10 <_dtoa_r+0xe7c>
 20072e4:	d9800a15 	stw	r6,40(sp)
 20072e8:	d8001115 	stw	zero,68(sp)
 20072ec:	d8c00d17 	ldw	r3,52(sp)
 20072f0:	1802ff16 	blt	r3,zero,2007ef0 <_dtoa_r+0xe5c>
 20072f4:	d9000a17 	ldw	r4,40(sp)
 20072f8:	d8c00915 	stw	r3,36(sp)
 20072fc:	d8001015 	stw	zero,64(sp)
 2007300:	20c9883a 	add	r4,r4,r3
 2007304:	d9000a15 	stw	r4,40(sp)
 2007308:	d9001717 	ldw	r4,92(sp)
 200730c:	00800244 	movi	r2,9
 2007310:	11004636 	bltu	r2,r4,200742c <_dtoa_r+0x398>
 2007314:	00800144 	movi	r2,5
 2007318:	11020416 	blt	r2,r4,2007b2c <_dtoa_r+0xa98>
 200731c:	04400044 	movi	r17,1
 2007320:	d8c01717 	ldw	r3,92(sp)
 2007324:	00800144 	movi	r2,5
 2007328:	10c1ed36 	bltu	r2,r3,2007ae0 <_dtoa_r+0xa4c>
 200732c:	18c5883a 	add	r2,r3,r3
 2007330:	1085883a 	add	r2,r2,r2
 2007334:	00c08034 	movhi	r3,512
 2007338:	18dcd204 	addi	r3,r3,29512
 200733c:	10c5883a 	add	r2,r2,r3
 2007340:	11000017 	ldw	r4,0(r2)
 2007344:	2000683a 	jmp	r4
 2007348:	02007434 	movhi	r8,464
 200734c:	02007434 	movhi	r8,464
 2007350:	02007e34 	movhi	r8,504
 2007354:	02007e0c 	andi	r8,zero,504
 2007358:	02007e50 	cmplti	r8,zero,505
 200735c:	02007e5c 	xori	r8,zero,505
 2007360:	d9002717 	ldw	r4,156(sp)
 2007364:	0089c3c4 	movi	r2,9999
 2007368:	20800015 	stw	r2,0(r4)
 200736c:	a0001026 	beq	r20,zero,20073b0 <_dtoa_r+0x31c>
 2007370:	00c080b4 	movhi	r3,514
 2007374:	18e94204 	addi	r3,r3,-23288
 2007378:	d9802917 	ldw	r6,164(sp)
 200737c:	303f7926 	beq	r6,zero,2007164 <_dtoa_r+0xd0>
 2007380:	188000c7 	ldb	r2,3(r3)
 2007384:	190000c4 	addi	r4,r3,3
 2007388:	1000101e 	bne	r2,zero,20073cc <_dtoa_r+0x338>
 200738c:	d8802917 	ldw	r2,164(sp)
 2007390:	11000015 	stw	r4,0(r2)
 2007394:	003f7306 	br	2007164 <_dtoa_r+0xd0>
 2007398:	00a00034 	movhi	r2,32768
 200739c:	10bfffc4 	addi	r2,r2,-1
 20073a0:	00c00044 	movi	r3,1
 20073a4:	88aa703a 	and	r21,r17,r2
 20073a8:	90c00015 	stw	r3,0(r18)
 20073ac:	003f5806 	br	2007110 <_dtoa_r+0x7c>
 20073b0:	00800434 	movhi	r2,16
 20073b4:	10bfffc4 	addi	r2,r2,-1
 20073b8:	a884703a 	and	r2,r21,r2
 20073bc:	103fec1e 	bne	r2,zero,2007370 <_dtoa_r+0x2dc>
 20073c0:	00c080b4 	movhi	r3,514
 20073c4:	18e93f04 	addi	r3,r3,-23300
 20073c8:	003feb06 	br	2007378 <_dtoa_r+0x2e4>
 20073cc:	d8802917 	ldw	r2,164(sp)
 20073d0:	19000204 	addi	r4,r3,8
 20073d4:	11000015 	stw	r4,0(r2)
 20073d8:	003f6206 	br	2007164 <_dtoa_r+0xd0>
 20073dc:	ddc00117 	ldw	r23,4(sp)
 20073e0:	d8800217 	ldw	r2,8(sp)
 20073e4:	01000804 	movi	r4,32
 20073e8:	b8c10c84 	addi	r3,r23,1074
 20073ec:	18a3883a 	add	r17,r3,r2
 20073f0:	2441b80e 	bge	r4,r17,2007ad4 <_dtoa_r+0xa40>
 20073f4:	00c01004 	movi	r3,64
 20073f8:	1c47c83a 	sub	r3,r3,r17
 20073fc:	88bff804 	addi	r2,r17,-32
 2007400:	a8c6983a 	sll	r3,r21,r3
 2007404:	a084d83a 	srl	r2,r20,r2
 2007408:	1888b03a 	or	r4,r3,r2
 200740c:	200dbe00 	call	200dbe0 <__floatunsidf>
 2007410:	1011883a 	mov	r8,r2
 2007414:	00bf8434 	movhi	r2,65040
 2007418:	01000044 	movi	r4,1
 200741c:	10d3883a 	add	r9,r2,r3
 2007420:	8dbef344 	addi	r22,r17,-1075
 2007424:	d9000815 	stw	r4,32(sp)
 2007428:	003f6f06 	br	20071e8 <_dtoa_r+0x154>
 200742c:	d8001715 	stw	zero,92(sp)
 2007430:	04400044 	movi	r17,1
 2007434:	00bfffc4 	movi	r2,-1
 2007438:	00c00044 	movi	r3,1
 200743c:	d8800e15 	stw	r2,56(sp)
 2007440:	d8002615 	stw	zero,152(sp)
 2007444:	d8800f15 	stw	r2,60(sp)
 2007448:	d8c00b15 	stw	r3,44(sp)
 200744c:	1021883a 	mov	r16,r2
 2007450:	d8801617 	ldw	r2,88(sp)
 2007454:	10001115 	stw	zero,68(r2)
 2007458:	d8801617 	ldw	r2,88(sp)
 200745c:	11401117 	ldw	r5,68(r2)
 2007460:	1009883a 	mov	r4,r2
 2007464:	2009e840 	call	2009e84 <_Balloc>
 2007468:	d8c01617 	ldw	r3,88(sp)
 200746c:	d8800515 	stw	r2,20(sp)
 2007470:	18801015 	stw	r2,64(r3)
 2007474:	00800384 	movi	r2,14
 2007478:	14006836 	bltu	r2,r16,200761c <_dtoa_r+0x588>
 200747c:	8805003a 	cmpeq	r2,r17,zero
 2007480:	1000661e 	bne	r2,zero,200761c <_dtoa_r+0x588>
 2007484:	d9000d17 	ldw	r4,52(sp)
 2007488:	0102300e 	bge	zero,r4,2007d4c <_dtoa_r+0xcb8>
 200748c:	208003cc 	andi	r2,r4,15
 2007490:	100490fa 	slli	r2,r2,3
 2007494:	2025d13a 	srai	r18,r4,4
 2007498:	00c080b4 	movhi	r3,514
 200749c:	18e95304 	addi	r3,r3,-23220
 20074a0:	10c5883a 	add	r2,r2,r3
 20074a4:	90c0040c 	andi	r3,r18,16
 20074a8:	14000017 	ldw	r16,0(r2)
 20074ac:	14400117 	ldw	r17,4(r2)
 20074b0:	18036a1e 	bne	r3,zero,200825c <_dtoa_r+0x11c8>
 20074b4:	05800084 	movi	r22,2
 20074b8:	90001026 	beq	r18,zero,20074fc <_dtoa_r+0x468>
 20074bc:	04c080b4 	movhi	r19,514
 20074c0:	9ce98504 	addi	r19,r19,-23020
 20074c4:	9080004c 	andi	r2,r18,1
 20074c8:	1005003a 	cmpeq	r2,r2,zero
 20074cc:	1000081e 	bne	r2,zero,20074f0 <_dtoa_r+0x45c>
 20074d0:	99800017 	ldw	r6,0(r19)
 20074d4:	99c00117 	ldw	r7,4(r19)
 20074d8:	880b883a 	mov	r5,r17
 20074dc:	8009883a 	mov	r4,r16
 20074e0:	200d14c0 	call	200d14c <__muldf3>
 20074e4:	1021883a 	mov	r16,r2
 20074e8:	b5800044 	addi	r22,r22,1
 20074ec:	1823883a 	mov	r17,r3
 20074f0:	9025d07a 	srai	r18,r18,1
 20074f4:	9cc00204 	addi	r19,r19,8
 20074f8:	903ff21e 	bne	r18,zero,20074c4 <_dtoa_r+0x430>
 20074fc:	a80b883a 	mov	r5,r21
 2007500:	a009883a 	mov	r4,r20
 2007504:	880f883a 	mov	r7,r17
 2007508:	800d883a 	mov	r6,r16
 200750c:	200d5100 	call	200d510 <__divdf3>
 2007510:	1029883a 	mov	r20,r2
 2007514:	182b883a 	mov	r21,r3
 2007518:	d8c00c17 	ldw	r3,48(sp)
 200751c:	1805003a 	cmpeq	r2,r3,zero
 2007520:	1000081e 	bne	r2,zero,2007544 <_dtoa_r+0x4b0>
 2007524:	0005883a 	mov	r2,zero
 2007528:	00cffc34 	movhi	r3,16368
 200752c:	180f883a 	mov	r7,r3
 2007530:	a009883a 	mov	r4,r20
 2007534:	a80b883a 	mov	r5,r21
 2007538:	100d883a 	mov	r6,r2
 200753c:	200d9880 	call	200d988 <__ltdf2>
 2007540:	1003fe16 	blt	r2,zero,200853c <_dtoa_r+0x14a8>
 2007544:	b009883a 	mov	r4,r22
 2007548:	200da100 	call	200da10 <__floatsidf>
 200754c:	180b883a 	mov	r5,r3
 2007550:	1009883a 	mov	r4,r2
 2007554:	a00d883a 	mov	r6,r20
 2007558:	a80f883a 	mov	r7,r21
 200755c:	200d14c0 	call	200d14c <__muldf3>
 2007560:	0011883a 	mov	r8,zero
 2007564:	02500734 	movhi	r9,16412
 2007568:	1009883a 	mov	r4,r2
 200756c:	180b883a 	mov	r5,r3
 2007570:	480f883a 	mov	r7,r9
 2007574:	400d883a 	mov	r6,r8
 2007578:	20030640 	call	2003064 <__adddf3>
 200757c:	d9000f17 	ldw	r4,60(sp)
 2007580:	102d883a 	mov	r22,r2
 2007584:	00bf3034 	movhi	r2,64704
 2007588:	18b9883a 	add	fp,r3,r2
 200758c:	e02f883a 	mov	r23,fp
 2007590:	20028f1e 	bne	r4,zero,2007fd0 <_dtoa_r+0xf3c>
 2007594:	0005883a 	mov	r2,zero
 2007598:	00d00534 	movhi	r3,16404
 200759c:	a009883a 	mov	r4,r20
 20075a0:	a80b883a 	mov	r5,r21
 20075a4:	180f883a 	mov	r7,r3
 20075a8:	100d883a 	mov	r6,r2
 20075ac:	2002fe40 	call	2002fe4 <__subdf3>
 20075b0:	1009883a 	mov	r4,r2
 20075b4:	e00f883a 	mov	r7,fp
 20075b8:	180b883a 	mov	r5,r3
 20075bc:	b00d883a 	mov	r6,r22
 20075c0:	1025883a 	mov	r18,r2
 20075c4:	1827883a 	mov	r19,r3
 20075c8:	200d8780 	call	200d878 <__gtdf2>
 20075cc:	00834f16 	blt	zero,r2,200830c <_dtoa_r+0x1278>
 20075d0:	e0e0003c 	xorhi	r3,fp,32768
 20075d4:	9009883a 	mov	r4,r18
 20075d8:	980b883a 	mov	r5,r19
 20075dc:	180f883a 	mov	r7,r3
 20075e0:	b00d883a 	mov	r6,r22
 20075e4:	200d9880 	call	200d988 <__ltdf2>
 20075e8:	1000080e 	bge	r2,zero,200760c <_dtoa_r+0x578>
 20075ec:	0027883a 	mov	r19,zero
 20075f0:	0025883a 	mov	r18,zero
 20075f4:	d8802617 	ldw	r2,152(sp)
 20075f8:	df000517 	ldw	fp,20(sp)
 20075fc:	d8000615 	stw	zero,24(sp)
 2007600:	0084303a 	nor	r2,zero,r2
 2007604:	d8800d15 	stw	r2,52(sp)
 2007608:	00019b06 	br	2007c78 <_dtoa_r+0xbe4>
 200760c:	d9801217 	ldw	r6,72(sp)
 2007610:	d8801317 	ldw	r2,76(sp)
 2007614:	3029883a 	mov	r20,r6
 2007618:	102b883a 	mov	r21,r2
 200761c:	d8c00217 	ldw	r3,8(sp)
 2007620:	18008516 	blt	r3,zero,2007838 <_dtoa_r+0x7a4>
 2007624:	d9000d17 	ldw	r4,52(sp)
 2007628:	00800384 	movi	r2,14
 200762c:	11008216 	blt	r2,r4,2007838 <_dtoa_r+0x7a4>
 2007630:	200490fa 	slli	r2,r4,3
 2007634:	d9802617 	ldw	r6,152(sp)
 2007638:	00c080b4 	movhi	r3,514
 200763c:	18e95304 	addi	r3,r3,-23220
 2007640:	10c5883a 	add	r2,r2,r3
 2007644:	14800017 	ldw	r18,0(r2)
 2007648:	14c00117 	ldw	r19,4(r2)
 200764c:	30031e16 	blt	r6,zero,20082c8 <_dtoa_r+0x1234>
 2007650:	d9000517 	ldw	r4,20(sp)
 2007654:	d8c00f17 	ldw	r3,60(sp)
 2007658:	a823883a 	mov	r17,r21
 200765c:	a021883a 	mov	r16,r20
 2007660:	192b883a 	add	r21,r3,r4
 2007664:	2039883a 	mov	fp,r4
 2007668:	00000f06 	br	20076a8 <_dtoa_r+0x614>
 200766c:	0005883a 	mov	r2,zero
 2007670:	00d00934 	movhi	r3,16420
 2007674:	5009883a 	mov	r4,r10
 2007678:	580b883a 	mov	r5,r11
 200767c:	180f883a 	mov	r7,r3
 2007680:	100d883a 	mov	r6,r2
 2007684:	200d14c0 	call	200d14c <__muldf3>
 2007688:	180b883a 	mov	r5,r3
 200768c:	000d883a 	mov	r6,zero
 2007690:	000f883a 	mov	r7,zero
 2007694:	1009883a 	mov	r4,r2
 2007698:	1021883a 	mov	r16,r2
 200769c:	1823883a 	mov	r17,r3
 20076a0:	200d7f00 	call	200d7f0 <__nedf2>
 20076a4:	10004526 	beq	r2,zero,20077bc <_dtoa_r+0x728>
 20076a8:	900d883a 	mov	r6,r18
 20076ac:	980f883a 	mov	r7,r19
 20076b0:	8009883a 	mov	r4,r16
 20076b4:	880b883a 	mov	r5,r17
 20076b8:	200d5100 	call	200d510 <__divdf3>
 20076bc:	180b883a 	mov	r5,r3
 20076c0:	1009883a 	mov	r4,r2
 20076c4:	200db080 	call	200db08 <__fixdfsi>
 20076c8:	1009883a 	mov	r4,r2
 20076cc:	1029883a 	mov	r20,r2
 20076d0:	200da100 	call	200da10 <__floatsidf>
 20076d4:	180f883a 	mov	r7,r3
 20076d8:	9009883a 	mov	r4,r18
 20076dc:	980b883a 	mov	r5,r19
 20076e0:	100d883a 	mov	r6,r2
 20076e4:	200d14c0 	call	200d14c <__muldf3>
 20076e8:	180f883a 	mov	r7,r3
 20076ec:	880b883a 	mov	r5,r17
 20076f0:	8009883a 	mov	r4,r16
 20076f4:	100d883a 	mov	r6,r2
 20076f8:	2002fe40 	call	2002fe4 <__subdf3>
 20076fc:	1015883a 	mov	r10,r2
 2007700:	a0800c04 	addi	r2,r20,48
 2007704:	e0800005 	stb	r2,0(fp)
 2007708:	e7000044 	addi	fp,fp,1
 200770c:	1817883a 	mov	r11,r3
 2007710:	e57fd61e 	bne	fp,r21,200766c <_dtoa_r+0x5d8>
 2007714:	500d883a 	mov	r6,r10
 2007718:	180f883a 	mov	r7,r3
 200771c:	5009883a 	mov	r4,r10
 2007720:	180b883a 	mov	r5,r3
 2007724:	20030640 	call	2003064 <__adddf3>
 2007728:	100d883a 	mov	r6,r2
 200772c:	9009883a 	mov	r4,r18
 2007730:	980b883a 	mov	r5,r19
 2007734:	180f883a 	mov	r7,r3
 2007738:	1021883a 	mov	r16,r2
 200773c:	1823883a 	mov	r17,r3
 2007740:	200d9880 	call	200d988 <__ltdf2>
 2007744:	10000816 	blt	r2,zero,2007768 <_dtoa_r+0x6d4>
 2007748:	980b883a 	mov	r5,r19
 200774c:	800d883a 	mov	r6,r16
 2007750:	880f883a 	mov	r7,r17
 2007754:	9009883a 	mov	r4,r18
 2007758:	200d7680 	call	200d768 <__eqdf2>
 200775c:	1000171e 	bne	r2,zero,20077bc <_dtoa_r+0x728>
 2007760:	a080004c 	andi	r2,r20,1
 2007764:	10001526 	beq	r2,zero,20077bc <_dtoa_r+0x728>
 2007768:	d8800d17 	ldw	r2,52(sp)
 200776c:	d8800415 	stw	r2,16(sp)
 2007770:	e009883a 	mov	r4,fp
 2007774:	213fffc4 	addi	r4,r4,-1
 2007778:	20c00007 	ldb	r3,0(r4)
 200777c:	00800e44 	movi	r2,57
 2007780:	1880081e 	bne	r3,r2,20077a4 <_dtoa_r+0x710>
 2007784:	d8800517 	ldw	r2,20(sp)
 2007788:	113ffa1e 	bne	r2,r4,2007774 <_dtoa_r+0x6e0>
 200778c:	d8c00417 	ldw	r3,16(sp)
 2007790:	d9800517 	ldw	r6,20(sp)
 2007794:	00800c04 	movi	r2,48
 2007798:	18c00044 	addi	r3,r3,1
 200779c:	d8c00415 	stw	r3,16(sp)
 20077a0:	30800005 	stb	r2,0(r6)
 20077a4:	20800003 	ldbu	r2,0(r4)
 20077a8:	d8c00417 	ldw	r3,16(sp)
 20077ac:	27000044 	addi	fp,r4,1
 20077b0:	10800044 	addi	r2,r2,1
 20077b4:	d8c00d15 	stw	r3,52(sp)
 20077b8:	20800005 	stb	r2,0(r4)
 20077bc:	d9001617 	ldw	r4,88(sp)
 20077c0:	d9400717 	ldw	r5,28(sp)
 20077c4:	20099040 	call	2009904 <_Bfree>
 20077c8:	e0000005 	stb	zero,0(fp)
 20077cc:	d9800d17 	ldw	r6,52(sp)
 20077d0:	d8c02717 	ldw	r3,156(sp)
 20077d4:	d9002917 	ldw	r4,164(sp)
 20077d8:	30800044 	addi	r2,r6,1
 20077dc:	18800015 	stw	r2,0(r3)
 20077e0:	20029c26 	beq	r4,zero,2008254 <_dtoa_r+0x11c0>
 20077e4:	d8c00517 	ldw	r3,20(sp)
 20077e8:	27000015 	stw	fp,0(r4)
 20077ec:	003e5d06 	br	2007164 <_dtoa_r+0xd0>
 20077f0:	d9800d17 	ldw	r6,52(sp)
 20077f4:	00c080b4 	movhi	r3,514
 20077f8:	18e95304 	addi	r3,r3,-23220
 20077fc:	d9001217 	ldw	r4,72(sp)
 2007800:	300490fa 	slli	r2,r6,3
 2007804:	d9401317 	ldw	r5,76(sp)
 2007808:	10c5883a 	add	r2,r2,r3
 200780c:	12000017 	ldw	r8,0(r2)
 2007810:	12400117 	ldw	r9,4(r2)
 2007814:	400d883a 	mov	r6,r8
 2007818:	480f883a 	mov	r7,r9
 200781c:	200d9880 	call	200d988 <__ltdf2>
 2007820:	1000030e 	bge	r2,zero,2007830 <_dtoa_r+0x79c>
 2007824:	d8800d17 	ldw	r2,52(sp)
 2007828:	10bfffc4 	addi	r2,r2,-1
 200782c:	d8800d15 	stw	r2,52(sp)
 2007830:	d8000c15 	stw	zero,48(sp)
 2007834:	003ea806 	br	20072d8 <_dtoa_r+0x244>
 2007838:	d9000b17 	ldw	r4,44(sp)
 200783c:	202cc03a 	cmpne	r22,r4,zero
 2007840:	b000c71e 	bne	r22,zero,2007b60 <_dtoa_r+0xacc>
 2007844:	dc001117 	ldw	r16,68(sp)
 2007848:	dc801017 	ldw	r18,64(sp)
 200784c:	0027883a 	mov	r19,zero
 2007850:	04000b0e 	bge	zero,r16,2007880 <_dtoa_r+0x7ec>
 2007854:	d8c00a17 	ldw	r3,40(sp)
 2007858:	00c0090e 	bge	zero,r3,2007880 <_dtoa_r+0x7ec>
 200785c:	8005883a 	mov	r2,r16
 2007860:	1c011316 	blt	r3,r16,2007cb0 <_dtoa_r+0xc1c>
 2007864:	d9000a17 	ldw	r4,40(sp)
 2007868:	d9801117 	ldw	r6,68(sp)
 200786c:	80a1c83a 	sub	r16,r16,r2
 2007870:	2089c83a 	sub	r4,r4,r2
 2007874:	308dc83a 	sub	r6,r6,r2
 2007878:	d9000a15 	stw	r4,40(sp)
 200787c:	d9801115 	stw	r6,68(sp)
 2007880:	d8801017 	ldw	r2,64(sp)
 2007884:	0080150e 	bge	zero,r2,20078dc <_dtoa_r+0x848>
 2007888:	d8c00b17 	ldw	r3,44(sp)
 200788c:	1805003a 	cmpeq	r2,r3,zero
 2007890:	1001c91e 	bne	r2,zero,2007fb8 <_dtoa_r+0xf24>
 2007894:	04800e0e 	bge	zero,r18,20078d0 <_dtoa_r+0x83c>
 2007898:	d9001617 	ldw	r4,88(sp)
 200789c:	980b883a 	mov	r5,r19
 20078a0:	900d883a 	mov	r6,r18
 20078a4:	200a7500 	call	200a750 <__pow5mult>
 20078a8:	d9001617 	ldw	r4,88(sp)
 20078ac:	d9800717 	ldw	r6,28(sp)
 20078b0:	100b883a 	mov	r5,r2
 20078b4:	1027883a 	mov	r19,r2
 20078b8:	200a3940 	call	200a394 <__multiply>
 20078bc:	d9001617 	ldw	r4,88(sp)
 20078c0:	d9400717 	ldw	r5,28(sp)
 20078c4:	1023883a 	mov	r17,r2
 20078c8:	20099040 	call	2009904 <_Bfree>
 20078cc:	dc400715 	stw	r17,28(sp)
 20078d0:	d9001017 	ldw	r4,64(sp)
 20078d4:	248dc83a 	sub	r6,r4,r18
 20078d8:	30010e1e 	bne	r6,zero,2007d14 <_dtoa_r+0xc80>
 20078dc:	d9001617 	ldw	r4,88(sp)
 20078e0:	04400044 	movi	r17,1
 20078e4:	880b883a 	mov	r5,r17
 20078e8:	200a5e80 	call	200a5e8 <__i2b>
 20078ec:	d9800917 	ldw	r6,36(sp)
 20078f0:	1025883a 	mov	r18,r2
 20078f4:	0180040e 	bge	zero,r6,2007908 <_dtoa_r+0x874>
 20078f8:	d9001617 	ldw	r4,88(sp)
 20078fc:	100b883a 	mov	r5,r2
 2007900:	200a7500 	call	200a750 <__pow5mult>
 2007904:	1025883a 	mov	r18,r2
 2007908:	d8801717 	ldw	r2,92(sp)
 200790c:	8880f30e 	bge	r17,r2,2007cdc <_dtoa_r+0xc48>
 2007910:	0023883a 	mov	r17,zero
 2007914:	d9800917 	ldw	r6,36(sp)
 2007918:	30019e1e 	bne	r6,zero,2007f94 <_dtoa_r+0xf00>
 200791c:	00c00044 	movi	r3,1
 2007920:	d9000a17 	ldw	r4,40(sp)
 2007924:	20c5883a 	add	r2,r4,r3
 2007928:	10c007cc 	andi	r3,r2,31
 200792c:	1800841e 	bne	r3,zero,2007b40 <_dtoa_r+0xaac>
 2007930:	00800704 	movi	r2,28
 2007934:	d9000a17 	ldw	r4,40(sp)
 2007938:	d9801117 	ldw	r6,68(sp)
 200793c:	80a1883a 	add	r16,r16,r2
 2007940:	2089883a 	add	r4,r4,r2
 2007944:	308d883a 	add	r6,r6,r2
 2007948:	d9000a15 	stw	r4,40(sp)
 200794c:	d9801115 	stw	r6,68(sp)
 2007950:	d8801117 	ldw	r2,68(sp)
 2007954:	0080050e 	bge	zero,r2,200796c <_dtoa_r+0x8d8>
 2007958:	d9400717 	ldw	r5,28(sp)
 200795c:	d9001617 	ldw	r4,88(sp)
 2007960:	100d883a 	mov	r6,r2
 2007964:	200a2480 	call	200a248 <__lshift>
 2007968:	d8800715 	stw	r2,28(sp)
 200796c:	d8c00a17 	ldw	r3,40(sp)
 2007970:	00c0050e 	bge	zero,r3,2007988 <_dtoa_r+0x8f4>
 2007974:	d9001617 	ldw	r4,88(sp)
 2007978:	900b883a 	mov	r5,r18
 200797c:	180d883a 	mov	r6,r3
 2007980:	200a2480 	call	200a248 <__lshift>
 2007984:	1025883a 	mov	r18,r2
 2007988:	d9000c17 	ldw	r4,48(sp)
 200798c:	2005003a 	cmpeq	r2,r4,zero
 2007990:	10016f26 	beq	r2,zero,2007f50 <_dtoa_r+0xebc>
 2007994:	d9000f17 	ldw	r4,60(sp)
 2007998:	0102170e 	bge	zero,r4,20081f8 <_dtoa_r+0x1164>
 200799c:	d9800b17 	ldw	r6,44(sp)
 20079a0:	3005003a 	cmpeq	r2,r6,zero
 20079a4:	1000881e 	bne	r2,zero,2007bc8 <_dtoa_r+0xb34>
 20079a8:	0400050e 	bge	zero,r16,20079c0 <_dtoa_r+0x92c>
 20079ac:	d9001617 	ldw	r4,88(sp)
 20079b0:	980b883a 	mov	r5,r19
 20079b4:	800d883a 	mov	r6,r16
 20079b8:	200a2480 	call	200a248 <__lshift>
 20079bc:	1027883a 	mov	r19,r2
 20079c0:	8804c03a 	cmpne	r2,r17,zero
 20079c4:	1002541e 	bne	r2,zero,2008318 <_dtoa_r+0x1284>
 20079c8:	980b883a 	mov	r5,r19
 20079cc:	dd800517 	ldw	r22,20(sp)
 20079d0:	dcc00615 	stw	r19,24(sp)
 20079d4:	a700004c 	andi	fp,r20,1
 20079d8:	2827883a 	mov	r19,r5
 20079dc:	d9000717 	ldw	r4,28(sp)
 20079e0:	900b883a 	mov	r5,r18
 20079e4:	2006e500 	call	2006e50 <quorem>
 20079e8:	d9000717 	ldw	r4,28(sp)
 20079ec:	d9400617 	ldw	r5,24(sp)
 20079f0:	1023883a 	mov	r17,r2
 20079f4:	8dc00c04 	addi	r23,r17,48
 20079f8:	2009a600 	call	2009a60 <__mcmp>
 20079fc:	d9001617 	ldw	r4,88(sp)
 2007a00:	900b883a 	mov	r5,r18
 2007a04:	980d883a 	mov	r6,r19
 2007a08:	1029883a 	mov	r20,r2
 2007a0c:	200a0bc0 	call	200a0bc <__mdiff>
 2007a10:	102b883a 	mov	r21,r2
 2007a14:	10800317 	ldw	r2,12(r2)
 2007a18:	1001281e 	bne	r2,zero,2007ebc <_dtoa_r+0xe28>
 2007a1c:	d9000717 	ldw	r4,28(sp)
 2007a20:	a80b883a 	mov	r5,r21
 2007a24:	2009a600 	call	2009a60 <__mcmp>
 2007a28:	d9001617 	ldw	r4,88(sp)
 2007a2c:	1021883a 	mov	r16,r2
 2007a30:	a80b883a 	mov	r5,r21
 2007a34:	20099040 	call	2009904 <_Bfree>
 2007a38:	8000041e 	bne	r16,zero,2007a4c <_dtoa_r+0x9b8>
 2007a3c:	d8801717 	ldw	r2,92(sp)
 2007a40:	1000021e 	bne	r2,zero,2007a4c <_dtoa_r+0x9b8>
 2007a44:	e004c03a 	cmpne	r2,fp,zero
 2007a48:	10011726 	beq	r2,zero,2007ea8 <_dtoa_r+0xe14>
 2007a4c:	a0010616 	blt	r20,zero,2007e68 <_dtoa_r+0xdd4>
 2007a50:	a000041e 	bne	r20,zero,2007a64 <_dtoa_r+0x9d0>
 2007a54:	d8c01717 	ldw	r3,92(sp)
 2007a58:	1800021e 	bne	r3,zero,2007a64 <_dtoa_r+0x9d0>
 2007a5c:	e004c03a 	cmpne	r2,fp,zero
 2007a60:	10010126 	beq	r2,zero,2007e68 <_dtoa_r+0xdd4>
 2007a64:	04023d16 	blt	zero,r16,200835c <_dtoa_r+0x12c8>
 2007a68:	b5c00005 	stb	r23,0(r22)
 2007a6c:	d9800517 	ldw	r6,20(sp)
 2007a70:	d9000f17 	ldw	r4,60(sp)
 2007a74:	b5800044 	addi	r22,r22,1
 2007a78:	3105883a 	add	r2,r6,r4
 2007a7c:	b0806526 	beq	r22,r2,2007c14 <_dtoa_r+0xb80>
 2007a80:	d9400717 	ldw	r5,28(sp)
 2007a84:	d9001617 	ldw	r4,88(sp)
 2007a88:	01800284 	movi	r6,10
 2007a8c:	000f883a 	mov	r7,zero
 2007a90:	200a6240 	call	200a624 <__multadd>
 2007a94:	d8800715 	stw	r2,28(sp)
 2007a98:	d8800617 	ldw	r2,24(sp)
 2007a9c:	14c10c26 	beq	r2,r19,2007ed0 <_dtoa_r+0xe3c>
 2007aa0:	d9400617 	ldw	r5,24(sp)
 2007aa4:	d9001617 	ldw	r4,88(sp)
 2007aa8:	01800284 	movi	r6,10
 2007aac:	000f883a 	mov	r7,zero
 2007ab0:	200a6240 	call	200a624 <__multadd>
 2007ab4:	d9001617 	ldw	r4,88(sp)
 2007ab8:	980b883a 	mov	r5,r19
 2007abc:	01800284 	movi	r6,10
 2007ac0:	000f883a 	mov	r7,zero
 2007ac4:	d8800615 	stw	r2,24(sp)
 2007ac8:	200a6240 	call	200a624 <__multadd>
 2007acc:	1027883a 	mov	r19,r2
 2007ad0:	003fc206 	br	20079dc <_dtoa_r+0x948>
 2007ad4:	2445c83a 	sub	r2,r4,r17
 2007ad8:	a088983a 	sll	r4,r20,r2
 2007adc:	003e4b06 	br	200740c <_dtoa_r+0x378>
 2007ae0:	01bfffc4 	movi	r6,-1
 2007ae4:	00800044 	movi	r2,1
 2007ae8:	d9800e15 	stw	r6,56(sp)
 2007aec:	d9800f15 	stw	r6,60(sp)
 2007af0:	d8800b15 	stw	r2,44(sp)
 2007af4:	d8c01617 	ldw	r3,88(sp)
 2007af8:	008005c4 	movi	r2,23
 2007afc:	18001115 	stw	zero,68(r3)
 2007b00:	1580082e 	bgeu	r2,r22,2007b24 <_dtoa_r+0xa90>
 2007b04:	00c00104 	movi	r3,4
 2007b08:	0009883a 	mov	r4,zero
 2007b0c:	18c7883a 	add	r3,r3,r3
 2007b10:	18800504 	addi	r2,r3,20
 2007b14:	21000044 	addi	r4,r4,1
 2007b18:	b0bffc2e 	bgeu	r22,r2,2007b0c <_dtoa_r+0xa78>
 2007b1c:	d9801617 	ldw	r6,88(sp)
 2007b20:	31001115 	stw	r4,68(r6)
 2007b24:	dc000f17 	ldw	r16,60(sp)
 2007b28:	003e4b06 	br	2007458 <_dtoa_r+0x3c4>
 2007b2c:	d9801717 	ldw	r6,92(sp)
 2007b30:	0023883a 	mov	r17,zero
 2007b34:	31bfff04 	addi	r6,r6,-4
 2007b38:	d9801715 	stw	r6,92(sp)
 2007b3c:	003df806 	br	2007320 <_dtoa_r+0x28c>
 2007b40:	00800804 	movi	r2,32
 2007b44:	10c9c83a 	sub	r4,r2,r3
 2007b48:	00c00104 	movi	r3,4
 2007b4c:	19005a16 	blt	r3,r4,2007cb8 <_dtoa_r+0xc24>
 2007b50:	008000c4 	movi	r2,3
 2007b54:	113f7e16 	blt	r2,r4,2007950 <_dtoa_r+0x8bc>
 2007b58:	20800704 	addi	r2,r4,28
 2007b5c:	003f7506 	br	2007934 <_dtoa_r+0x8a0>
 2007b60:	d9801717 	ldw	r6,92(sp)
 2007b64:	00800044 	movi	r2,1
 2007b68:	1180a10e 	bge	r2,r6,2007df0 <_dtoa_r+0xd5c>
 2007b6c:	d9800f17 	ldw	r6,60(sp)
 2007b70:	d8c01017 	ldw	r3,64(sp)
 2007b74:	30bfffc4 	addi	r2,r6,-1
 2007b78:	1881c616 	blt	r3,r2,2008294 <_dtoa_r+0x1200>
 2007b7c:	18a5c83a 	sub	r18,r3,r2
 2007b80:	d8800f17 	ldw	r2,60(sp)
 2007b84:	10026216 	blt	r2,zero,2008510 <_dtoa_r+0x147c>
 2007b88:	dc001117 	ldw	r16,68(sp)
 2007b8c:	1007883a 	mov	r3,r2
 2007b90:	d9800a17 	ldw	r6,40(sp)
 2007b94:	d8801117 	ldw	r2,68(sp)
 2007b98:	d9001617 	ldw	r4,88(sp)
 2007b9c:	30cd883a 	add	r6,r6,r3
 2007ba0:	10c5883a 	add	r2,r2,r3
 2007ba4:	01400044 	movi	r5,1
 2007ba8:	d9800a15 	stw	r6,40(sp)
 2007bac:	d8801115 	stw	r2,68(sp)
 2007bb0:	200a5e80 	call	200a5e8 <__i2b>
 2007bb4:	1027883a 	mov	r19,r2
 2007bb8:	003f2506 	br	2007850 <_dtoa_r+0x7bc>
 2007bbc:	00c080b4 	movhi	r3,514
 2007bc0:	18e93604 	addi	r3,r3,-23336
 2007bc4:	003d6706 	br	2007164 <_dtoa_r+0xd0>
 2007bc8:	dd800517 	ldw	r22,20(sp)
 2007bcc:	04000044 	movi	r16,1
 2007bd0:	00000706 	br	2007bf0 <_dtoa_r+0xb5c>
 2007bd4:	d9400717 	ldw	r5,28(sp)
 2007bd8:	d9001617 	ldw	r4,88(sp)
 2007bdc:	01800284 	movi	r6,10
 2007be0:	000f883a 	mov	r7,zero
 2007be4:	200a6240 	call	200a624 <__multadd>
 2007be8:	d8800715 	stw	r2,28(sp)
 2007bec:	84000044 	addi	r16,r16,1
 2007bf0:	d9000717 	ldw	r4,28(sp)
 2007bf4:	900b883a 	mov	r5,r18
 2007bf8:	2006e500 	call	2006e50 <quorem>
 2007bfc:	15c00c04 	addi	r23,r2,48
 2007c00:	b5c00005 	stb	r23,0(r22)
 2007c04:	d8c00f17 	ldw	r3,60(sp)
 2007c08:	b5800044 	addi	r22,r22,1
 2007c0c:	80fff116 	blt	r16,r3,2007bd4 <_dtoa_r+0xb40>
 2007c10:	d8000615 	stw	zero,24(sp)
 2007c14:	d9400717 	ldw	r5,28(sp)
 2007c18:	d9001617 	ldw	r4,88(sp)
 2007c1c:	01800044 	movi	r6,1
 2007c20:	200a2480 	call	200a248 <__lshift>
 2007c24:	1009883a 	mov	r4,r2
 2007c28:	900b883a 	mov	r5,r18
 2007c2c:	d8800715 	stw	r2,28(sp)
 2007c30:	2009a600 	call	2009a60 <__mcmp>
 2007c34:	00803c0e 	bge	zero,r2,2007d28 <_dtoa_r+0xc94>
 2007c38:	b009883a 	mov	r4,r22
 2007c3c:	213fffc4 	addi	r4,r4,-1
 2007c40:	21400003 	ldbu	r5,0(r4)
 2007c44:	00800e44 	movi	r2,57
 2007c48:	28c03fcc 	andi	r3,r5,255
 2007c4c:	18c0201c 	xori	r3,r3,128
 2007c50:	18ffe004 	addi	r3,r3,-128
 2007c54:	1881981e 	bne	r3,r2,20082b8 <_dtoa_r+0x1224>
 2007c58:	d9800517 	ldw	r6,20(sp)
 2007c5c:	21bff71e 	bne	r4,r6,2007c3c <_dtoa_r+0xba8>
 2007c60:	d8800d17 	ldw	r2,52(sp)
 2007c64:	37000044 	addi	fp,r6,1
 2007c68:	10800044 	addi	r2,r2,1
 2007c6c:	d8800d15 	stw	r2,52(sp)
 2007c70:	00800c44 	movi	r2,49
 2007c74:	30800005 	stb	r2,0(r6)
 2007c78:	d9001617 	ldw	r4,88(sp)
 2007c7c:	900b883a 	mov	r5,r18
 2007c80:	20099040 	call	2009904 <_Bfree>
 2007c84:	983ecd26 	beq	r19,zero,20077bc <_dtoa_r+0x728>
 2007c88:	d8c00617 	ldw	r3,24(sp)
 2007c8c:	18000426 	beq	r3,zero,2007ca0 <_dtoa_r+0xc0c>
 2007c90:	1cc00326 	beq	r3,r19,2007ca0 <_dtoa_r+0xc0c>
 2007c94:	d9001617 	ldw	r4,88(sp)
 2007c98:	180b883a 	mov	r5,r3
 2007c9c:	20099040 	call	2009904 <_Bfree>
 2007ca0:	d9001617 	ldw	r4,88(sp)
 2007ca4:	980b883a 	mov	r5,r19
 2007ca8:	20099040 	call	2009904 <_Bfree>
 2007cac:	003ec306 	br	20077bc <_dtoa_r+0x728>
 2007cb0:	1805883a 	mov	r2,r3
 2007cb4:	003eeb06 	br	2007864 <_dtoa_r+0x7d0>
 2007cb8:	d9800a17 	ldw	r6,40(sp)
 2007cbc:	d8c01117 	ldw	r3,68(sp)
 2007cc0:	20bfff04 	addi	r2,r4,-4
 2007cc4:	308d883a 	add	r6,r6,r2
 2007cc8:	1887883a 	add	r3,r3,r2
 2007ccc:	80a1883a 	add	r16,r16,r2
 2007cd0:	d9800a15 	stw	r6,40(sp)
 2007cd4:	d8c01115 	stw	r3,68(sp)
 2007cd8:	003f1d06 	br	2007950 <_dtoa_r+0x8bc>
 2007cdc:	a03f0c1e 	bne	r20,zero,2007910 <_dtoa_r+0x87c>
 2007ce0:	00800434 	movhi	r2,16
 2007ce4:	10bfffc4 	addi	r2,r2,-1
 2007ce8:	a884703a 	and	r2,r21,r2
 2007cec:	103f081e 	bne	r2,zero,2007910 <_dtoa_r+0x87c>
 2007cf0:	a89ffc2c 	andhi	r2,r21,32752
 2007cf4:	103f0626 	beq	r2,zero,2007910 <_dtoa_r+0x87c>
 2007cf8:	d8c01117 	ldw	r3,68(sp)
 2007cfc:	d9000a17 	ldw	r4,40(sp)
 2007d00:	18c00044 	addi	r3,r3,1
 2007d04:	21000044 	addi	r4,r4,1
 2007d08:	d8c01115 	stw	r3,68(sp)
 2007d0c:	d9000a15 	stw	r4,40(sp)
 2007d10:	003f0006 	br	2007914 <_dtoa_r+0x880>
 2007d14:	d9400717 	ldw	r5,28(sp)
 2007d18:	d9001617 	ldw	r4,88(sp)
 2007d1c:	200a7500 	call	200a750 <__pow5mult>
 2007d20:	d8800715 	stw	r2,28(sp)
 2007d24:	003eed06 	br	20078dc <_dtoa_r+0x848>
 2007d28:	1000021e 	bne	r2,zero,2007d34 <_dtoa_r+0xca0>
 2007d2c:	b880004c 	andi	r2,r23,1
 2007d30:	103fc11e 	bne	r2,zero,2007c38 <_dtoa_r+0xba4>
 2007d34:	b5bfffc4 	addi	r22,r22,-1
 2007d38:	b0c00007 	ldb	r3,0(r22)
 2007d3c:	00800c04 	movi	r2,48
 2007d40:	18bffc26 	beq	r3,r2,2007d34 <_dtoa_r+0xca0>
 2007d44:	b7000044 	addi	fp,r22,1
 2007d48:	003fcb06 	br	2007c78 <_dtoa_r+0xbe4>
 2007d4c:	d9800d17 	ldw	r6,52(sp)
 2007d50:	018fc83a 	sub	r7,zero,r6
 2007d54:	3801f726 	beq	r7,zero,2008534 <_dtoa_r+0x14a0>
 2007d58:	398003cc 	andi	r6,r7,15
 2007d5c:	300c90fa 	slli	r6,r6,3
 2007d60:	014080b4 	movhi	r5,514
 2007d64:	29695304 	addi	r5,r5,-23220
 2007d68:	d9001217 	ldw	r4,72(sp)
 2007d6c:	314d883a 	add	r6,r6,r5
 2007d70:	30c00117 	ldw	r3,4(r6)
 2007d74:	30800017 	ldw	r2,0(r6)
 2007d78:	d9401317 	ldw	r5,76(sp)
 2007d7c:	3821d13a 	srai	r16,r7,4
 2007d80:	100d883a 	mov	r6,r2
 2007d84:	180f883a 	mov	r7,r3
 2007d88:	200d14c0 	call	200d14c <__muldf3>
 2007d8c:	1011883a 	mov	r8,r2
 2007d90:	1813883a 	mov	r9,r3
 2007d94:	1029883a 	mov	r20,r2
 2007d98:	182b883a 	mov	r21,r3
 2007d9c:	8001e526 	beq	r16,zero,2008534 <_dtoa_r+0x14a0>
 2007da0:	05800084 	movi	r22,2
 2007da4:	044080b4 	movhi	r17,514
 2007da8:	8c698504 	addi	r17,r17,-23020
 2007dac:	8080004c 	andi	r2,r16,1
 2007db0:	1005003a 	cmpeq	r2,r2,zero
 2007db4:	1000081e 	bne	r2,zero,2007dd8 <_dtoa_r+0xd44>
 2007db8:	89800017 	ldw	r6,0(r17)
 2007dbc:	89c00117 	ldw	r7,4(r17)
 2007dc0:	480b883a 	mov	r5,r9
 2007dc4:	4009883a 	mov	r4,r8
 2007dc8:	200d14c0 	call	200d14c <__muldf3>
 2007dcc:	1011883a 	mov	r8,r2
 2007dd0:	b5800044 	addi	r22,r22,1
 2007dd4:	1813883a 	mov	r9,r3
 2007dd8:	8021d07a 	srai	r16,r16,1
 2007ddc:	8c400204 	addi	r17,r17,8
 2007de0:	803ff21e 	bne	r16,zero,2007dac <_dtoa_r+0xd18>
 2007de4:	4029883a 	mov	r20,r8
 2007de8:	482b883a 	mov	r21,r9
 2007dec:	003dca06 	br	2007518 <_dtoa_r+0x484>
 2007df0:	d9000817 	ldw	r4,32(sp)
 2007df4:	2005003a 	cmpeq	r2,r4,zero
 2007df8:	1001f61e 	bne	r2,zero,20085d4 <_dtoa_r+0x1540>
 2007dfc:	dc001117 	ldw	r16,68(sp)
 2007e00:	dc801017 	ldw	r18,64(sp)
 2007e04:	18c10cc4 	addi	r3,r3,1075
 2007e08:	003f6106 	br	2007b90 <_dtoa_r+0xafc>
 2007e0c:	d8000b15 	stw	zero,44(sp)
 2007e10:	d9802617 	ldw	r6,152(sp)
 2007e14:	d8c00d17 	ldw	r3,52(sp)
 2007e18:	30800044 	addi	r2,r6,1
 2007e1c:	18ad883a 	add	r22,r3,r2
 2007e20:	b13fffc4 	addi	r4,r22,-1
 2007e24:	d9000e15 	stw	r4,56(sp)
 2007e28:	0581f60e 	bge	zero,r22,2008604 <_dtoa_r+0x1570>
 2007e2c:	dd800f15 	stw	r22,60(sp)
 2007e30:	003f3006 	br	2007af4 <_dtoa_r+0xa60>
 2007e34:	d8000b15 	stw	zero,44(sp)
 2007e38:	d9002617 	ldw	r4,152(sp)
 2007e3c:	0101eb0e 	bge	zero,r4,20085ec <_dtoa_r+0x1558>
 2007e40:	202d883a 	mov	r22,r4
 2007e44:	d9000e15 	stw	r4,56(sp)
 2007e48:	d9000f15 	stw	r4,60(sp)
 2007e4c:	003f2906 	br	2007af4 <_dtoa_r+0xa60>
 2007e50:	01800044 	movi	r6,1
 2007e54:	d9800b15 	stw	r6,44(sp)
 2007e58:	003ff706 	br	2007e38 <_dtoa_r+0xda4>
 2007e5c:	01000044 	movi	r4,1
 2007e60:	d9000b15 	stw	r4,44(sp)
 2007e64:	003fea06 	br	2007e10 <_dtoa_r+0xd7c>
 2007e68:	04000c0e 	bge	zero,r16,2007e9c <_dtoa_r+0xe08>
 2007e6c:	d9400717 	ldw	r5,28(sp)
 2007e70:	d9001617 	ldw	r4,88(sp)
 2007e74:	01800044 	movi	r6,1
 2007e78:	200a2480 	call	200a248 <__lshift>
 2007e7c:	1009883a 	mov	r4,r2
 2007e80:	900b883a 	mov	r5,r18
 2007e84:	d8800715 	stw	r2,28(sp)
 2007e88:	2009a600 	call	2009a60 <__mcmp>
 2007e8c:	0081e00e 	bge	zero,r2,2008610 <_dtoa_r+0x157c>
 2007e90:	bdc00044 	addi	r23,r23,1
 2007e94:	00800e84 	movi	r2,58
 2007e98:	b881a226 	beq	r23,r2,2008524 <_dtoa_r+0x1490>
 2007e9c:	b7000044 	addi	fp,r22,1
 2007ea0:	b5c00005 	stb	r23,0(r22)
 2007ea4:	003f7406 	br	2007c78 <_dtoa_r+0xbe4>
 2007ea8:	00800e44 	movi	r2,57
 2007eac:	b8819d26 	beq	r23,r2,2008524 <_dtoa_r+0x1490>
 2007eb0:	053ffa0e 	bge	zero,r20,2007e9c <_dtoa_r+0xe08>
 2007eb4:	8dc00c44 	addi	r23,r17,49
 2007eb8:	003ff806 	br	2007e9c <_dtoa_r+0xe08>
 2007ebc:	d9001617 	ldw	r4,88(sp)
 2007ec0:	a80b883a 	mov	r5,r21
 2007ec4:	04000044 	movi	r16,1
 2007ec8:	20099040 	call	2009904 <_Bfree>
 2007ecc:	003edf06 	br	2007a4c <_dtoa_r+0x9b8>
 2007ed0:	d9001617 	ldw	r4,88(sp)
 2007ed4:	980b883a 	mov	r5,r19
 2007ed8:	01800284 	movi	r6,10
 2007edc:	000f883a 	mov	r7,zero
 2007ee0:	200a6240 	call	200a624 <__multadd>
 2007ee4:	1027883a 	mov	r19,r2
 2007ee8:	d8800615 	stw	r2,24(sp)
 2007eec:	003ebb06 	br	20079dc <_dtoa_r+0x948>
 2007ef0:	d9801117 	ldw	r6,68(sp)
 2007ef4:	d8800d17 	ldw	r2,52(sp)
 2007ef8:	d8000915 	stw	zero,36(sp)
 2007efc:	308dc83a 	sub	r6,r6,r2
 2007f00:	0087c83a 	sub	r3,zero,r2
 2007f04:	d9801115 	stw	r6,68(sp)
 2007f08:	d8c01015 	stw	r3,64(sp)
 2007f0c:	003cfe06 	br	2007308 <_dtoa_r+0x274>
 2007f10:	018dc83a 	sub	r6,zero,r6
 2007f14:	d9801115 	stw	r6,68(sp)
 2007f18:	d8000a15 	stw	zero,40(sp)
 2007f1c:	003cf306 	br	20072ec <_dtoa_r+0x258>
 2007f20:	d9000d17 	ldw	r4,52(sp)
 2007f24:	200da100 	call	200da10 <__floatsidf>
 2007f28:	880b883a 	mov	r5,r17
 2007f2c:	8009883a 	mov	r4,r16
 2007f30:	180f883a 	mov	r7,r3
 2007f34:	100d883a 	mov	r6,r2
 2007f38:	200d7f00 	call	200d7f0 <__nedf2>
 2007f3c:	103ce126 	beq	r2,zero,20072c4 <_dtoa_r+0x230>
 2007f40:	d9800d17 	ldw	r6,52(sp)
 2007f44:	31bfffc4 	addi	r6,r6,-1
 2007f48:	d9800d15 	stw	r6,52(sp)
 2007f4c:	003cdd06 	br	20072c4 <_dtoa_r+0x230>
 2007f50:	d9000717 	ldw	r4,28(sp)
 2007f54:	900b883a 	mov	r5,r18
 2007f58:	2009a600 	call	2009a60 <__mcmp>
 2007f5c:	103e8d0e 	bge	r2,zero,2007994 <_dtoa_r+0x900>
 2007f60:	d9400717 	ldw	r5,28(sp)
 2007f64:	d9001617 	ldw	r4,88(sp)
 2007f68:	01800284 	movi	r6,10
 2007f6c:	000f883a 	mov	r7,zero
 2007f70:	200a6240 	call	200a624 <__multadd>
 2007f74:	d9800d17 	ldw	r6,52(sp)
 2007f78:	d8800715 	stw	r2,28(sp)
 2007f7c:	31bfffc4 	addi	r6,r6,-1
 2007f80:	d9800d15 	stw	r6,52(sp)
 2007f84:	b001a71e 	bne	r22,zero,2008624 <_dtoa_r+0x1590>
 2007f88:	d8800e17 	ldw	r2,56(sp)
 2007f8c:	d8800f15 	stw	r2,60(sp)
 2007f90:	003e8006 	br	2007994 <_dtoa_r+0x900>
 2007f94:	90800417 	ldw	r2,16(r18)
 2007f98:	1085883a 	add	r2,r2,r2
 2007f9c:	1085883a 	add	r2,r2,r2
 2007fa0:	1485883a 	add	r2,r2,r18
 2007fa4:	11000417 	ldw	r4,16(r2)
 2007fa8:	200992c0 	call	200992c <__hi0bits>
 2007fac:	00c00804 	movi	r3,32
 2007fb0:	1887c83a 	sub	r3,r3,r2
 2007fb4:	003e5a06 	br	2007920 <_dtoa_r+0x88c>
 2007fb8:	d9400717 	ldw	r5,28(sp)
 2007fbc:	d9801017 	ldw	r6,64(sp)
 2007fc0:	d9001617 	ldw	r4,88(sp)
 2007fc4:	200a7500 	call	200a750 <__pow5mult>
 2007fc8:	d8800715 	stw	r2,28(sp)
 2007fcc:	003e4306 	br	20078dc <_dtoa_r+0x848>
 2007fd0:	d9800f17 	ldw	r6,60(sp)
 2007fd4:	d8800d17 	ldw	r2,52(sp)
 2007fd8:	d9800315 	stw	r6,12(sp)
 2007fdc:	d8800415 	stw	r2,16(sp)
 2007fe0:	d8c00b17 	ldw	r3,44(sp)
 2007fe4:	1805003a 	cmpeq	r2,r3,zero
 2007fe8:	1000e21e 	bne	r2,zero,2008374 <_dtoa_r+0x12e0>
 2007fec:	d9000317 	ldw	r4,12(sp)
 2007ff0:	0005883a 	mov	r2,zero
 2007ff4:	00cff834 	movhi	r3,16352
 2007ff8:	200c90fa 	slli	r6,r4,3
 2007ffc:	010080b4 	movhi	r4,514
 2008000:	21295304 	addi	r4,r4,-23220
 2008004:	180b883a 	mov	r5,r3
 2008008:	310d883a 	add	r6,r6,r4
 200800c:	327fff17 	ldw	r9,-4(r6)
 2008010:	323ffe17 	ldw	r8,-8(r6)
 2008014:	1009883a 	mov	r4,r2
 2008018:	480f883a 	mov	r7,r9
 200801c:	400d883a 	mov	r6,r8
 2008020:	200d5100 	call	200d510 <__divdf3>
 2008024:	180b883a 	mov	r5,r3
 2008028:	b00d883a 	mov	r6,r22
 200802c:	b80f883a 	mov	r7,r23
 2008030:	1009883a 	mov	r4,r2
 2008034:	2002fe40 	call	2002fe4 <__subdf3>
 2008038:	a80b883a 	mov	r5,r21
 200803c:	a009883a 	mov	r4,r20
 2008040:	d8c01915 	stw	r3,100(sp)
 2008044:	d8801815 	stw	r2,96(sp)
 2008048:	200db080 	call	200db08 <__fixdfsi>
 200804c:	1009883a 	mov	r4,r2
 2008050:	1027883a 	mov	r19,r2
 2008054:	200da100 	call	200da10 <__floatsidf>
 2008058:	a80b883a 	mov	r5,r21
 200805c:	a009883a 	mov	r4,r20
 2008060:	180f883a 	mov	r7,r3
 2008064:	100d883a 	mov	r6,r2
 2008068:	2002fe40 	call	2002fe4 <__subdf3>
 200806c:	d9801817 	ldw	r6,96(sp)
 2008070:	1823883a 	mov	r17,r3
 2008074:	d8801415 	stw	r2,80(sp)
 2008078:	302d883a 	mov	r22,r6
 200807c:	d9800517 	ldw	r6,20(sp)
 2008080:	9cc00c04 	addi	r19,r19,48
 2008084:	dc401515 	stw	r17,84(sp)
 2008088:	d8c01917 	ldw	r3,100(sp)
 200808c:	34c00005 	stb	r19,0(r6)
 2008090:	d8800517 	ldw	r2,20(sp)
 2008094:	d9401917 	ldw	r5,100(sp)
 2008098:	d9801417 	ldw	r6,80(sp)
 200809c:	b009883a 	mov	r4,r22
 20080a0:	880f883a 	mov	r7,r17
 20080a4:	182f883a 	mov	r23,r3
 20080a8:	17000044 	addi	fp,r2,1
 20080ac:	200d8780 	call	200d878 <__gtdf2>
 20080b0:	00804e16 	blt	zero,r2,20081ec <_dtoa_r+0x1158>
 20080b4:	d9801417 	ldw	r6,80(sp)
 20080b8:	0005883a 	mov	r2,zero
 20080bc:	00cffc34 	movhi	r3,16368
 20080c0:	180b883a 	mov	r5,r3
 20080c4:	880f883a 	mov	r7,r17
 20080c8:	1009883a 	mov	r4,r2
 20080cc:	2002fe40 	call	2002fe4 <__subdf3>
 20080d0:	d9401917 	ldw	r5,100(sp)
 20080d4:	180f883a 	mov	r7,r3
 20080d8:	b009883a 	mov	r4,r22
 20080dc:	100d883a 	mov	r6,r2
 20080e0:	200d8780 	call	200d878 <__gtdf2>
 20080e4:	00bda216 	blt	zero,r2,2007770 <_dtoa_r+0x6dc>
 20080e8:	d8c00317 	ldw	r3,12(sp)
 20080ec:	00800044 	movi	r2,1
 20080f0:	10c01216 	blt	r2,r3,200813c <_dtoa_r+0x10a8>
 20080f4:	003d4506 	br	200760c <_dtoa_r+0x578>
 20080f8:	d9801417 	ldw	r6,80(sp)
 20080fc:	0005883a 	mov	r2,zero
 2008100:	00cffc34 	movhi	r3,16368
 2008104:	180b883a 	mov	r5,r3
 2008108:	880f883a 	mov	r7,r17
 200810c:	1009883a 	mov	r4,r2
 2008110:	2002fe40 	call	2002fe4 <__subdf3>
 2008114:	d9c01b17 	ldw	r7,108(sp)
 2008118:	180b883a 	mov	r5,r3
 200811c:	1009883a 	mov	r4,r2
 2008120:	b00d883a 	mov	r6,r22
 2008124:	200d9880 	call	200d988 <__ltdf2>
 2008128:	103d9116 	blt	r2,zero,2007770 <_dtoa_r+0x6dc>
 200812c:	d9800517 	ldw	r6,20(sp)
 2008130:	d9000317 	ldw	r4,12(sp)
 2008134:	3105883a 	add	r2,r6,r4
 2008138:	e0bd3426 	beq	fp,r2,200760c <_dtoa_r+0x578>
 200813c:	04500934 	movhi	r17,16420
 2008140:	0021883a 	mov	r16,zero
 2008144:	b80b883a 	mov	r5,r23
 2008148:	b009883a 	mov	r4,r22
 200814c:	800d883a 	mov	r6,r16
 2008150:	880f883a 	mov	r7,r17
 2008154:	200d14c0 	call	200d14c <__muldf3>
 2008158:	d9401517 	ldw	r5,84(sp)
 200815c:	d9001417 	ldw	r4,80(sp)
 2008160:	880f883a 	mov	r7,r17
 2008164:	000d883a 	mov	r6,zero
 2008168:	d8801a15 	stw	r2,104(sp)
 200816c:	d8c01b15 	stw	r3,108(sp)
 2008170:	200d14c0 	call	200d14c <__muldf3>
 2008174:	180b883a 	mov	r5,r3
 2008178:	1009883a 	mov	r4,r2
 200817c:	1823883a 	mov	r17,r3
 2008180:	1021883a 	mov	r16,r2
 2008184:	200db080 	call	200db08 <__fixdfsi>
 2008188:	1009883a 	mov	r4,r2
 200818c:	102b883a 	mov	r21,r2
 2008190:	200da100 	call	200da10 <__floatsidf>
 2008194:	880b883a 	mov	r5,r17
 2008198:	8009883a 	mov	r4,r16
 200819c:	180f883a 	mov	r7,r3
 20081a0:	100d883a 	mov	r6,r2
 20081a4:	2002fe40 	call	2002fe4 <__subdf3>
 20081a8:	1021883a 	mov	r16,r2
 20081ac:	d9001b17 	ldw	r4,108(sp)
 20081b0:	1823883a 	mov	r17,r3
 20081b4:	dc001415 	stw	r16,80(sp)
 20081b8:	ad400c04 	addi	r21,r21,48
 20081bc:	dc401515 	stw	r17,84(sp)
 20081c0:	d8801a17 	ldw	r2,104(sp)
 20081c4:	e5400005 	stb	r21,0(fp)
 20081c8:	202f883a 	mov	r23,r4
 20081cc:	d9c01b17 	ldw	r7,108(sp)
 20081d0:	d9001417 	ldw	r4,80(sp)
 20081d4:	880b883a 	mov	r5,r17
 20081d8:	100d883a 	mov	r6,r2
 20081dc:	102d883a 	mov	r22,r2
 20081e0:	e7000044 	addi	fp,fp,1
 20081e4:	200d9880 	call	200d988 <__ltdf2>
 20081e8:	103fc30e 	bge	r2,zero,20080f8 <_dtoa_r+0x1064>
 20081ec:	d9000417 	ldw	r4,16(sp)
 20081f0:	d9000d15 	stw	r4,52(sp)
 20081f4:	003d7106 	br	20077bc <_dtoa_r+0x728>
 20081f8:	d9801717 	ldw	r6,92(sp)
 20081fc:	00800084 	movi	r2,2
 2008200:	11bde60e 	bge	r2,r6,200799c <_dtoa_r+0x908>
 2008204:	203cfb1e 	bne	r4,zero,20075f4 <_dtoa_r+0x560>
 2008208:	d9001617 	ldw	r4,88(sp)
 200820c:	900b883a 	mov	r5,r18
 2008210:	01800144 	movi	r6,5
 2008214:	000f883a 	mov	r7,zero
 2008218:	200a6240 	call	200a624 <__multadd>
 200821c:	d9000717 	ldw	r4,28(sp)
 2008220:	100b883a 	mov	r5,r2
 2008224:	1025883a 	mov	r18,r2
 2008228:	2009a600 	call	2009a60 <__mcmp>
 200822c:	00bcf10e 	bge	zero,r2,20075f4 <_dtoa_r+0x560>
 2008230:	d8c00d17 	ldw	r3,52(sp)
 2008234:	d9000517 	ldw	r4,20(sp)
 2008238:	d8000615 	stw	zero,24(sp)
 200823c:	18c00044 	addi	r3,r3,1
 2008240:	d8c00d15 	stw	r3,52(sp)
 2008244:	00800c44 	movi	r2,49
 2008248:	27000044 	addi	fp,r4,1
 200824c:	20800005 	stb	r2,0(r4)
 2008250:	003e8906 	br	2007c78 <_dtoa_r+0xbe4>
 2008254:	d8c00517 	ldw	r3,20(sp)
 2008258:	003bc206 	br	2007164 <_dtoa_r+0xd0>
 200825c:	018080b4 	movhi	r6,514
 2008260:	31a98504 	addi	r6,r6,-23020
 2008264:	30c00917 	ldw	r3,36(r6)
 2008268:	30800817 	ldw	r2,32(r6)
 200826c:	d9001217 	ldw	r4,72(sp)
 2008270:	d9401317 	ldw	r5,76(sp)
 2008274:	180f883a 	mov	r7,r3
 2008278:	100d883a 	mov	r6,r2
 200827c:	200d5100 	call	200d510 <__divdf3>
 2008280:	948003cc 	andi	r18,r18,15
 2008284:	058000c4 	movi	r22,3
 2008288:	1029883a 	mov	r20,r2
 200828c:	182b883a 	mov	r21,r3
 2008290:	003c8906 	br	20074b8 <_dtoa_r+0x424>
 2008294:	d9001017 	ldw	r4,64(sp)
 2008298:	d9800917 	ldw	r6,36(sp)
 200829c:	0025883a 	mov	r18,zero
 20082a0:	1105c83a 	sub	r2,r2,r4
 20082a4:	2089883a 	add	r4,r4,r2
 20082a8:	308d883a 	add	r6,r6,r2
 20082ac:	d9001015 	stw	r4,64(sp)
 20082b0:	d9800915 	stw	r6,36(sp)
 20082b4:	003e3206 	br	2007b80 <_dtoa_r+0xaec>
 20082b8:	28800044 	addi	r2,r5,1
 20082bc:	27000044 	addi	fp,r4,1
 20082c0:	20800005 	stb	r2,0(r4)
 20082c4:	003e6c06 	br	2007c78 <_dtoa_r+0xbe4>
 20082c8:	d8800f17 	ldw	r2,60(sp)
 20082cc:	00bce016 	blt	zero,r2,2007650 <_dtoa_r+0x5bc>
 20082d0:	d9800f17 	ldw	r6,60(sp)
 20082d4:	303cc51e 	bne	r6,zero,20075ec <_dtoa_r+0x558>
 20082d8:	0005883a 	mov	r2,zero
 20082dc:	00d00534 	movhi	r3,16404
 20082e0:	980b883a 	mov	r5,r19
 20082e4:	180f883a 	mov	r7,r3
 20082e8:	9009883a 	mov	r4,r18
 20082ec:	100d883a 	mov	r6,r2
 20082f0:	200d14c0 	call	200d14c <__muldf3>
 20082f4:	180b883a 	mov	r5,r3
 20082f8:	a80f883a 	mov	r7,r21
 20082fc:	1009883a 	mov	r4,r2
 2008300:	a00d883a 	mov	r6,r20
 2008304:	200d9000 	call	200d900 <__gedf2>
 2008308:	103cb80e 	bge	r2,zero,20075ec <_dtoa_r+0x558>
 200830c:	0027883a 	mov	r19,zero
 2008310:	0025883a 	mov	r18,zero
 2008314:	003fc606 	br	2008230 <_dtoa_r+0x119c>
 2008318:	99400117 	ldw	r5,4(r19)
 200831c:	d9001617 	ldw	r4,88(sp)
 2008320:	2009e840 	call	2009e84 <_Balloc>
 2008324:	99800417 	ldw	r6,16(r19)
 2008328:	11000304 	addi	r4,r2,12
 200832c:	99400304 	addi	r5,r19,12
 2008330:	318d883a 	add	r6,r6,r6
 2008334:	318d883a 	add	r6,r6,r6
 2008338:	31800204 	addi	r6,r6,8
 200833c:	1023883a 	mov	r17,r2
 2008340:	20040440 	call	2004044 <memcpy>
 2008344:	d9001617 	ldw	r4,88(sp)
 2008348:	880b883a 	mov	r5,r17
 200834c:	01800044 	movi	r6,1
 2008350:	200a2480 	call	200a248 <__lshift>
 2008354:	100b883a 	mov	r5,r2
 2008358:	003d9c06 	br	20079cc <_dtoa_r+0x938>
 200835c:	00800e44 	movi	r2,57
 2008360:	b8807026 	beq	r23,r2,2008524 <_dtoa_r+0x1490>
 2008364:	b8800044 	addi	r2,r23,1
 2008368:	b7000044 	addi	fp,r22,1
 200836c:	b0800005 	stb	r2,0(r22)
 2008370:	003e4106 	br	2007c78 <_dtoa_r+0xbe4>
 2008374:	d8800317 	ldw	r2,12(sp)
 2008378:	018080b4 	movhi	r6,514
 200837c:	31a95304 	addi	r6,r6,-23220
 2008380:	b009883a 	mov	r4,r22
 2008384:	100e90fa 	slli	r7,r2,3
 2008388:	b80b883a 	mov	r5,r23
 200838c:	398f883a 	add	r7,r7,r6
 2008390:	38bffe17 	ldw	r2,-8(r7)
 2008394:	d9800517 	ldw	r6,20(sp)
 2008398:	38ffff17 	ldw	r3,-4(r7)
 200839c:	37000044 	addi	fp,r6,1
 20083a0:	180f883a 	mov	r7,r3
 20083a4:	100d883a 	mov	r6,r2
 20083a8:	200d14c0 	call	200d14c <__muldf3>
 20083ac:	a80b883a 	mov	r5,r21
 20083b0:	a009883a 	mov	r4,r20
 20083b4:	182f883a 	mov	r23,r3
 20083b8:	102d883a 	mov	r22,r2
 20083bc:	200db080 	call	200db08 <__fixdfsi>
 20083c0:	1009883a 	mov	r4,r2
 20083c4:	1027883a 	mov	r19,r2
 20083c8:	200da100 	call	200da10 <__floatsidf>
 20083cc:	a80b883a 	mov	r5,r21
 20083d0:	a009883a 	mov	r4,r20
 20083d4:	180f883a 	mov	r7,r3
 20083d8:	100d883a 	mov	r6,r2
 20083dc:	2002fe40 	call	2002fe4 <__subdf3>
 20083e0:	180b883a 	mov	r5,r3
 20083e4:	d8c00517 	ldw	r3,20(sp)
 20083e8:	9cc00c04 	addi	r19,r19,48
 20083ec:	1009883a 	mov	r4,r2
 20083f0:	1cc00005 	stb	r19,0(r3)
 20083f4:	2021883a 	mov	r16,r4
 20083f8:	d9000317 	ldw	r4,12(sp)
 20083fc:	00800044 	movi	r2,1
 2008400:	2823883a 	mov	r17,r5
 2008404:	20802226 	beq	r4,r2,2008490 <_dtoa_r+0x13fc>
 2008408:	1029883a 	mov	r20,r2
 200840c:	0005883a 	mov	r2,zero
 2008410:	00d00934 	movhi	r3,16420
 2008414:	180f883a 	mov	r7,r3
 2008418:	100d883a 	mov	r6,r2
 200841c:	880b883a 	mov	r5,r17
 2008420:	8009883a 	mov	r4,r16
 2008424:	200d14c0 	call	200d14c <__muldf3>
 2008428:	180b883a 	mov	r5,r3
 200842c:	1009883a 	mov	r4,r2
 2008430:	1823883a 	mov	r17,r3
 2008434:	1021883a 	mov	r16,r2
 2008438:	200db080 	call	200db08 <__fixdfsi>
 200843c:	1009883a 	mov	r4,r2
 2008440:	102b883a 	mov	r21,r2
 2008444:	200da100 	call	200da10 <__floatsidf>
 2008448:	880b883a 	mov	r5,r17
 200844c:	8009883a 	mov	r4,r16
 2008450:	180f883a 	mov	r7,r3
 2008454:	100d883a 	mov	r6,r2
 2008458:	2002fe40 	call	2002fe4 <__subdf3>
 200845c:	180b883a 	mov	r5,r3
 2008460:	d8c00517 	ldw	r3,20(sp)
 2008464:	1009883a 	mov	r4,r2
 2008468:	ad400c04 	addi	r21,r21,48
 200846c:	1d05883a 	add	r2,r3,r20
 2008470:	15400005 	stb	r21,0(r2)
 2008474:	2021883a 	mov	r16,r4
 2008478:	d9000317 	ldw	r4,12(sp)
 200847c:	a5000044 	addi	r20,r20,1
 2008480:	2823883a 	mov	r17,r5
 2008484:	a13fe11e 	bne	r20,r4,200840c <_dtoa_r+0x1378>
 2008488:	e505883a 	add	r2,fp,r20
 200848c:	173fffc4 	addi	fp,r2,-1
 2008490:	0025883a 	mov	r18,zero
 2008494:	04cff834 	movhi	r19,16352
 2008498:	b009883a 	mov	r4,r22
 200849c:	b80b883a 	mov	r5,r23
 20084a0:	900d883a 	mov	r6,r18
 20084a4:	980f883a 	mov	r7,r19
 20084a8:	20030640 	call	2003064 <__adddf3>
 20084ac:	180b883a 	mov	r5,r3
 20084b0:	1009883a 	mov	r4,r2
 20084b4:	800d883a 	mov	r6,r16
 20084b8:	880f883a 	mov	r7,r17
 20084bc:	200d9880 	call	200d988 <__ltdf2>
 20084c0:	103cab16 	blt	r2,zero,2007770 <_dtoa_r+0x6dc>
 20084c4:	0009883a 	mov	r4,zero
 20084c8:	980b883a 	mov	r5,r19
 20084cc:	b80f883a 	mov	r7,r23
 20084d0:	b00d883a 	mov	r6,r22
 20084d4:	2002fe40 	call	2002fe4 <__subdf3>
 20084d8:	180b883a 	mov	r5,r3
 20084dc:	880f883a 	mov	r7,r17
 20084e0:	1009883a 	mov	r4,r2
 20084e4:	800d883a 	mov	r6,r16
 20084e8:	200d8780 	call	200d878 <__gtdf2>
 20084ec:	00bc470e 	bge	zero,r2,200760c <_dtoa_r+0x578>
 20084f0:	00c00c04 	movi	r3,48
 20084f4:	e73fffc4 	addi	fp,fp,-1
 20084f8:	e0800007 	ldb	r2,0(fp)
 20084fc:	10fffd26 	beq	r2,r3,20084f4 <_dtoa_r+0x1460>
 2008500:	d9800417 	ldw	r6,16(sp)
 2008504:	e7000044 	addi	fp,fp,1
 2008508:	d9800d15 	stw	r6,52(sp)
 200850c:	003cab06 	br	20077bc <_dtoa_r+0x728>
 2008510:	d8c00f17 	ldw	r3,60(sp)
 2008514:	d9001117 	ldw	r4,68(sp)
 2008518:	20e1c83a 	sub	r16,r4,r3
 200851c:	0007883a 	mov	r3,zero
 2008520:	003d9b06 	br	2007b90 <_dtoa_r+0xafc>
 2008524:	00800e44 	movi	r2,57
 2008528:	b0800005 	stb	r2,0(r22)
 200852c:	b5800044 	addi	r22,r22,1
 2008530:	003dc106 	br	2007c38 <_dtoa_r+0xba4>
 2008534:	05800084 	movi	r22,2
 2008538:	003bf706 	br	2007518 <_dtoa_r+0x484>
 200853c:	d9000f17 	ldw	r4,60(sp)
 2008540:	013c000e 	bge	zero,r4,2007544 <_dtoa_r+0x4b0>
 2008544:	d9800e17 	ldw	r6,56(sp)
 2008548:	01bc300e 	bge	zero,r6,200760c <_dtoa_r+0x578>
 200854c:	0005883a 	mov	r2,zero
 2008550:	00d00934 	movhi	r3,16420
 2008554:	a80b883a 	mov	r5,r21
 2008558:	180f883a 	mov	r7,r3
 200855c:	a009883a 	mov	r4,r20
 2008560:	100d883a 	mov	r6,r2
 2008564:	200d14c0 	call	200d14c <__muldf3>
 2008568:	b1000044 	addi	r4,r22,1
 200856c:	1021883a 	mov	r16,r2
 2008570:	1823883a 	mov	r17,r3
 2008574:	200da100 	call	200da10 <__floatsidf>
 2008578:	880b883a 	mov	r5,r17
 200857c:	8009883a 	mov	r4,r16
 2008580:	180f883a 	mov	r7,r3
 2008584:	100d883a 	mov	r6,r2
 2008588:	200d14c0 	call	200d14c <__muldf3>
 200858c:	0011883a 	mov	r8,zero
 2008590:	02500734 	movhi	r9,16412
 2008594:	180b883a 	mov	r5,r3
 2008598:	480f883a 	mov	r7,r9
 200859c:	1009883a 	mov	r4,r2
 20085a0:	400d883a 	mov	r6,r8
 20085a4:	20030640 	call	2003064 <__adddf3>
 20085a8:	102d883a 	mov	r22,r2
 20085ac:	00bf3034 	movhi	r2,64704
 20085b0:	10ef883a 	add	r23,r2,r3
 20085b4:	d8800d17 	ldw	r2,52(sp)
 20085b8:	d8c00e17 	ldw	r3,56(sp)
 20085bc:	8029883a 	mov	r20,r16
 20085c0:	10bfffc4 	addi	r2,r2,-1
 20085c4:	882b883a 	mov	r21,r17
 20085c8:	d8800415 	stw	r2,16(sp)
 20085cc:	d8c00315 	stw	r3,12(sp)
 20085d0:	003e8306 	br	2007fe0 <_dtoa_r+0xf4c>
 20085d4:	d8800117 	ldw	r2,4(sp)
 20085d8:	dc001117 	ldw	r16,68(sp)
 20085dc:	dc801017 	ldw	r18,64(sp)
 20085e0:	00c00d84 	movi	r3,54
 20085e4:	1887c83a 	sub	r3,r3,r2
 20085e8:	003d6906 	br	2007b90 <_dtoa_r+0xafc>
 20085ec:	01800044 	movi	r6,1
 20085f0:	3021883a 	mov	r16,r6
 20085f4:	d9800f15 	stw	r6,60(sp)
 20085f8:	d9802615 	stw	r6,152(sp)
 20085fc:	d9800e15 	stw	r6,56(sp)
 2008600:	003b9306 	br	2007450 <_dtoa_r+0x3bc>
 2008604:	b021883a 	mov	r16,r22
 2008608:	dd800f15 	stw	r22,60(sp)
 200860c:	003b9006 	br	2007450 <_dtoa_r+0x3bc>
 2008610:	103e221e 	bne	r2,zero,2007e9c <_dtoa_r+0xe08>
 2008614:	b880004c 	andi	r2,r23,1
 2008618:	1005003a 	cmpeq	r2,r2,zero
 200861c:	103e1f1e 	bne	r2,zero,2007e9c <_dtoa_r+0xe08>
 2008620:	003e1b06 	br	2007e90 <_dtoa_r+0xdfc>
 2008624:	d9001617 	ldw	r4,88(sp)
 2008628:	980b883a 	mov	r5,r19
 200862c:	01800284 	movi	r6,10
 2008630:	000f883a 	mov	r7,zero
 2008634:	200a6240 	call	200a624 <__multadd>
 2008638:	d8c00e17 	ldw	r3,56(sp)
 200863c:	1027883a 	mov	r19,r2
 2008640:	d8c00f15 	stw	r3,60(sp)
 2008644:	003cd306 	br	2007994 <_dtoa_r+0x900>

02008648 <_fflush_r>:
 2008648:	defffb04 	addi	sp,sp,-20
 200864c:	dcc00315 	stw	r19,12(sp)
 2008650:	dc800215 	stw	r18,8(sp)
 2008654:	dfc00415 	stw	ra,16(sp)
 2008658:	dc400115 	stw	r17,4(sp)
 200865c:	dc000015 	stw	r16,0(sp)
 2008660:	2027883a 	mov	r19,r4
 2008664:	2825883a 	mov	r18,r5
 2008668:	20000226 	beq	r4,zero,2008674 <_fflush_r+0x2c>
 200866c:	20800e17 	ldw	r2,56(r4)
 2008670:	10005626 	beq	r2,zero,20087cc <_fflush_r+0x184>
 2008674:	9100030b 	ldhu	r4,12(r18)
 2008678:	20ffffcc 	andi	r3,r4,65535
 200867c:	18e0001c 	xori	r3,r3,32768
 2008680:	18e00004 	addi	r3,r3,-32768
 2008684:	1880020c 	andi	r2,r3,8
 2008688:	1000261e 	bne	r2,zero,2008724 <_fflush_r+0xdc>
 200868c:	90c00117 	ldw	r3,4(r18)
 2008690:	20820014 	ori	r2,r4,2048
 2008694:	9080030d 	sth	r2,12(r18)
 2008698:	1009883a 	mov	r4,r2
 200869c:	00c0400e 	bge	zero,r3,20087a0 <_fflush_r+0x158>
 20086a0:	92000a17 	ldw	r8,40(r18)
 20086a4:	40004026 	beq	r8,zero,20087a8 <_fflush_r+0x160>
 20086a8:	2084000c 	andi	r2,r4,4096
 20086ac:	10005326 	beq	r2,zero,20087fc <_fflush_r+0x1b4>
 20086b0:	94001417 	ldw	r16,80(r18)
 20086b4:	9080030b 	ldhu	r2,12(r18)
 20086b8:	1080010c 	andi	r2,r2,4
 20086bc:	1000481e 	bne	r2,zero,20087e0 <_fflush_r+0x198>
 20086c0:	91400717 	ldw	r5,28(r18)
 20086c4:	9809883a 	mov	r4,r19
 20086c8:	800d883a 	mov	r6,r16
 20086cc:	000f883a 	mov	r7,zero
 20086d0:	403ee83a 	callr	r8
 20086d4:	8080261e 	bne	r16,r2,2008770 <_fflush_r+0x128>
 20086d8:	9080030b 	ldhu	r2,12(r18)
 20086dc:	91000417 	ldw	r4,16(r18)
 20086e0:	90000115 	stw	zero,4(r18)
 20086e4:	10bdffcc 	andi	r2,r2,63487
 20086e8:	10ffffcc 	andi	r3,r2,65535
 20086ec:	18c4000c 	andi	r3,r3,4096
 20086f0:	9080030d 	sth	r2,12(r18)
 20086f4:	91000015 	stw	r4,0(r18)
 20086f8:	18002b26 	beq	r3,zero,20087a8 <_fflush_r+0x160>
 20086fc:	0007883a 	mov	r3,zero
 2008700:	1805883a 	mov	r2,r3
 2008704:	94001415 	stw	r16,80(r18)
 2008708:	dfc00417 	ldw	ra,16(sp)
 200870c:	dcc00317 	ldw	r19,12(sp)
 2008710:	dc800217 	ldw	r18,8(sp)
 2008714:	dc400117 	ldw	r17,4(sp)
 2008718:	dc000017 	ldw	r16,0(sp)
 200871c:	dec00504 	addi	sp,sp,20
 2008720:	f800283a 	ret
 2008724:	94400417 	ldw	r17,16(r18)
 2008728:	88001f26 	beq	r17,zero,20087a8 <_fflush_r+0x160>
 200872c:	90800017 	ldw	r2,0(r18)
 2008730:	18c000cc 	andi	r3,r3,3
 2008734:	94400015 	stw	r17,0(r18)
 2008738:	1461c83a 	sub	r16,r2,r17
 200873c:	18002526 	beq	r3,zero,20087d4 <_fflush_r+0x18c>
 2008740:	0005883a 	mov	r2,zero
 2008744:	90800215 	stw	r2,8(r18)
 2008748:	0400170e 	bge	zero,r16,20087a8 <_fflush_r+0x160>
 200874c:	90c00917 	ldw	r3,36(r18)
 2008750:	91400717 	ldw	r5,28(r18)
 2008754:	880d883a 	mov	r6,r17
 2008758:	800f883a 	mov	r7,r16
 200875c:	9809883a 	mov	r4,r19
 2008760:	183ee83a 	callr	r3
 2008764:	88a3883a 	add	r17,r17,r2
 2008768:	80a1c83a 	sub	r16,r16,r2
 200876c:	00bff616 	blt	zero,r2,2008748 <_fflush_r+0x100>
 2008770:	9080030b 	ldhu	r2,12(r18)
 2008774:	00ffffc4 	movi	r3,-1
 2008778:	10801014 	ori	r2,r2,64
 200877c:	9080030d 	sth	r2,12(r18)
 2008780:	1805883a 	mov	r2,r3
 2008784:	dfc00417 	ldw	ra,16(sp)
 2008788:	dcc00317 	ldw	r19,12(sp)
 200878c:	dc800217 	ldw	r18,8(sp)
 2008790:	dc400117 	ldw	r17,4(sp)
 2008794:	dc000017 	ldw	r16,0(sp)
 2008798:	dec00504 	addi	sp,sp,20
 200879c:	f800283a 	ret
 20087a0:	90800f17 	ldw	r2,60(r18)
 20087a4:	00bfbe16 	blt	zero,r2,20086a0 <_fflush_r+0x58>
 20087a8:	0007883a 	mov	r3,zero
 20087ac:	1805883a 	mov	r2,r3
 20087b0:	dfc00417 	ldw	ra,16(sp)
 20087b4:	dcc00317 	ldw	r19,12(sp)
 20087b8:	dc800217 	ldw	r18,8(sp)
 20087bc:	dc400117 	ldw	r17,4(sp)
 20087c0:	dc000017 	ldw	r16,0(sp)
 20087c4:	dec00504 	addi	sp,sp,20
 20087c8:	f800283a 	ret
 20087cc:	20088e00 	call	20088e0 <__sinit>
 20087d0:	003fa806 	br	2008674 <_fflush_r+0x2c>
 20087d4:	90800517 	ldw	r2,20(r18)
 20087d8:	90800215 	stw	r2,8(r18)
 20087dc:	003fda06 	br	2008748 <_fflush_r+0x100>
 20087e0:	90800117 	ldw	r2,4(r18)
 20087e4:	90c00c17 	ldw	r3,48(r18)
 20087e8:	80a1c83a 	sub	r16,r16,r2
 20087ec:	183fb426 	beq	r3,zero,20086c0 <_fflush_r+0x78>
 20087f0:	90800f17 	ldw	r2,60(r18)
 20087f4:	80a1c83a 	sub	r16,r16,r2
 20087f8:	003fb106 	br	20086c0 <_fflush_r+0x78>
 20087fc:	91400717 	ldw	r5,28(r18)
 2008800:	9809883a 	mov	r4,r19
 2008804:	000d883a 	mov	r6,zero
 2008808:	01c00044 	movi	r7,1
 200880c:	403ee83a 	callr	r8
 2008810:	1021883a 	mov	r16,r2
 2008814:	00bfffc4 	movi	r2,-1
 2008818:	80800226 	beq	r16,r2,2008824 <_fflush_r+0x1dc>
 200881c:	92000a17 	ldw	r8,40(r18)
 2008820:	003fa406 	br	20086b4 <_fflush_r+0x6c>
 2008824:	98c00017 	ldw	r3,0(r19)
 2008828:	00800744 	movi	r2,29
 200882c:	18bfde26 	beq	r3,r2,20087a8 <_fflush_r+0x160>
 2008830:	9080030b 	ldhu	r2,12(r18)
 2008834:	8007883a 	mov	r3,r16
 2008838:	10801014 	ori	r2,r2,64
 200883c:	9080030d 	sth	r2,12(r18)
 2008840:	003fcf06 	br	2008780 <_fflush_r+0x138>

02008844 <fflush>:
 2008844:	01408074 	movhi	r5,513
 2008848:	29619204 	addi	r5,r5,-31160
 200884c:	2007883a 	mov	r3,r4
 2008850:	20000526 	beq	r4,zero,2008868 <fflush+0x24>
 2008854:	008080b4 	movhi	r2,514
 2008858:	10b0e304 	addi	r2,r2,-15476
 200885c:	11000017 	ldw	r4,0(r2)
 2008860:	180b883a 	mov	r5,r3
 2008864:	20086481 	jmpi	2008648 <_fflush_r>
 2008868:	008080b4 	movhi	r2,514
 200886c:	10b0e404 	addi	r2,r2,-15472
 2008870:	11000017 	ldw	r4,0(r2)
 2008874:	20094481 	jmpi	2009448 <_fwalk_reent>

02008878 <std>:
 2008878:	00808074 	movhi	r2,513
 200887c:	10ab5404 	addi	r2,r2,-21168
 2008880:	20800b15 	stw	r2,44(r4)
 2008884:	00808074 	movhi	r2,513
 2008888:	10ab8f04 	addi	r2,r2,-20932
 200888c:	20800815 	stw	r2,32(r4)
 2008890:	00c08074 	movhi	r3,513
 2008894:	18eb7004 	addi	r3,r3,-21056
 2008898:	00808074 	movhi	r2,513
 200889c:	10ab5604 	addi	r2,r2,-21160
 20088a0:	2140030d 	sth	r5,12(r4)
 20088a4:	2180038d 	sth	r6,14(r4)
 20088a8:	20c00915 	stw	r3,36(r4)
 20088ac:	20800a15 	stw	r2,40(r4)
 20088b0:	20000015 	stw	zero,0(r4)
 20088b4:	20000115 	stw	zero,4(r4)
 20088b8:	20000215 	stw	zero,8(r4)
 20088bc:	20000415 	stw	zero,16(r4)
 20088c0:	20000515 	stw	zero,20(r4)
 20088c4:	20000615 	stw	zero,24(r4)
 20088c8:	21000715 	stw	r4,28(r4)
 20088cc:	f800283a 	ret

020088d0 <__sfp_lock_acquire>:
 20088d0:	f800283a 	ret

020088d4 <__sfp_lock_release>:
 20088d4:	f800283a 	ret

020088d8 <__sinit_lock_acquire>:
 20088d8:	f800283a 	ret

020088dc <__sinit_lock_release>:
 20088dc:	f800283a 	ret

020088e0 <__sinit>:
 20088e0:	20800e17 	ldw	r2,56(r4)
 20088e4:	defffd04 	addi	sp,sp,-12
 20088e8:	dc400115 	stw	r17,4(sp)
 20088ec:	dc000015 	stw	r16,0(sp)
 20088f0:	dfc00215 	stw	ra,8(sp)
 20088f4:	04400044 	movi	r17,1
 20088f8:	01400104 	movi	r5,4
 20088fc:	000d883a 	mov	r6,zero
 2008900:	2021883a 	mov	r16,r4
 2008904:	2200bb04 	addi	r8,r4,748
 2008908:	200f883a 	mov	r7,r4
 200890c:	10000526 	beq	r2,zero,2008924 <__sinit+0x44>
 2008910:	dfc00217 	ldw	ra,8(sp)
 2008914:	dc400117 	ldw	r17,4(sp)
 2008918:	dc000017 	ldw	r16,0(sp)
 200891c:	dec00304 	addi	sp,sp,12
 2008920:	f800283a 	ret
 2008924:	21000117 	ldw	r4,4(r4)
 2008928:	00808074 	movhi	r2,513
 200892c:	10a27104 	addi	r2,r2,-30268
 2008930:	00c000c4 	movi	r3,3
 2008934:	80800f15 	stw	r2,60(r16)
 2008938:	80c0b915 	stw	r3,740(r16)
 200893c:	8200ba15 	stw	r8,744(r16)
 2008940:	84400e15 	stw	r17,56(r16)
 2008944:	8000b815 	stw	zero,736(r16)
 2008948:	20088780 	call	2008878 <std>
 200894c:	81000217 	ldw	r4,8(r16)
 2008950:	880d883a 	mov	r6,r17
 2008954:	800f883a 	mov	r7,r16
 2008958:	01400284 	movi	r5,10
 200895c:	20088780 	call	2008878 <std>
 2008960:	81000317 	ldw	r4,12(r16)
 2008964:	800f883a 	mov	r7,r16
 2008968:	01400484 	movi	r5,18
 200896c:	01800084 	movi	r6,2
 2008970:	dfc00217 	ldw	ra,8(sp)
 2008974:	dc400117 	ldw	r17,4(sp)
 2008978:	dc000017 	ldw	r16,0(sp)
 200897c:	dec00304 	addi	sp,sp,12
 2008980:	20088781 	jmpi	2008878 <std>

02008984 <__fp_lock>:
 2008984:	0005883a 	mov	r2,zero
 2008988:	f800283a 	ret

0200898c <__fp_unlock>:
 200898c:	0005883a 	mov	r2,zero
 2008990:	f800283a 	ret

02008994 <__fp_unlock_all>:
 2008994:	008080b4 	movhi	r2,514
 2008998:	10b0e304 	addi	r2,r2,-15476
 200899c:	11000017 	ldw	r4,0(r2)
 20089a0:	01408074 	movhi	r5,513
 20089a4:	29626304 	addi	r5,r5,-30324
 20089a8:	20095101 	jmpi	2009510 <_fwalk>

020089ac <__fp_lock_all>:
 20089ac:	008080b4 	movhi	r2,514
 20089b0:	10b0e304 	addi	r2,r2,-15476
 20089b4:	11000017 	ldw	r4,0(r2)
 20089b8:	01408074 	movhi	r5,513
 20089bc:	29626104 	addi	r5,r5,-30332
 20089c0:	20095101 	jmpi	2009510 <_fwalk>

020089c4 <_cleanup_r>:
 20089c4:	01408074 	movhi	r5,513
 20089c8:	2970a604 	addi	r5,r5,-15720
 20089cc:	20095101 	jmpi	2009510 <_fwalk>

020089d0 <_cleanup>:
 20089d0:	008080b4 	movhi	r2,514
 20089d4:	10b0e404 	addi	r2,r2,-15472
 20089d8:	11000017 	ldw	r4,0(r2)
 20089dc:	20089c41 	jmpi	20089c4 <_cleanup_r>

020089e0 <__sfmoreglue>:
 20089e0:	defffc04 	addi	sp,sp,-16
 20089e4:	dc000015 	stw	r16,0(sp)
 20089e8:	2821883a 	mov	r16,r5
 20089ec:	dc400115 	stw	r17,4(sp)
 20089f0:	01401704 	movi	r5,92
 20089f4:	2023883a 	mov	r17,r4
 20089f8:	8009883a 	mov	r4,r16
 20089fc:	dfc00315 	stw	ra,12(sp)
 2008a00:	dcc00215 	stw	r19,8(sp)
 2008a04:	20032ac0 	call	20032ac <__mulsi3>
 2008a08:	11400304 	addi	r5,r2,12
 2008a0c:	8809883a 	mov	r4,r17
 2008a10:	1027883a 	mov	r19,r2
 2008a14:	20039040 	call	2003904 <_malloc_r>
 2008a18:	10c00304 	addi	r3,r2,12
 2008a1c:	1023883a 	mov	r17,r2
 2008a20:	1809883a 	mov	r4,r3
 2008a24:	980d883a 	mov	r6,r19
 2008a28:	000b883a 	mov	r5,zero
 2008a2c:	10000b26 	beq	r2,zero,2008a5c <__sfmoreglue+0x7c>
 2008a30:	14000115 	stw	r16,4(r2)
 2008a34:	10c00215 	stw	r3,8(r2)
 2008a38:	10000015 	stw	zero,0(r2)
 2008a3c:	20041c40 	call	20041c4 <memset>
 2008a40:	8805883a 	mov	r2,r17
 2008a44:	dfc00317 	ldw	ra,12(sp)
 2008a48:	dcc00217 	ldw	r19,8(sp)
 2008a4c:	dc400117 	ldw	r17,4(sp)
 2008a50:	dc000017 	ldw	r16,0(sp)
 2008a54:	dec00404 	addi	sp,sp,16
 2008a58:	f800283a 	ret
 2008a5c:	0023883a 	mov	r17,zero
 2008a60:	8805883a 	mov	r2,r17
 2008a64:	dfc00317 	ldw	ra,12(sp)
 2008a68:	dcc00217 	ldw	r19,8(sp)
 2008a6c:	dc400117 	ldw	r17,4(sp)
 2008a70:	dc000017 	ldw	r16,0(sp)
 2008a74:	dec00404 	addi	sp,sp,16
 2008a78:	f800283a 	ret

02008a7c <__sfp>:
 2008a7c:	defffd04 	addi	sp,sp,-12
 2008a80:	008080b4 	movhi	r2,514
 2008a84:	10b0e404 	addi	r2,r2,-15472
 2008a88:	dc000015 	stw	r16,0(sp)
 2008a8c:	14000017 	ldw	r16,0(r2)
 2008a90:	dc400115 	stw	r17,4(sp)
 2008a94:	dfc00215 	stw	ra,8(sp)
 2008a98:	80800e17 	ldw	r2,56(r16)
 2008a9c:	2023883a 	mov	r17,r4
 2008aa0:	10002626 	beq	r2,zero,2008b3c <__sfp+0xc0>
 2008aa4:	8400b804 	addi	r16,r16,736
 2008aa8:	80800117 	ldw	r2,4(r16)
 2008aac:	81000217 	ldw	r4,8(r16)
 2008ab0:	10ffffc4 	addi	r3,r2,-1
 2008ab4:	18000916 	blt	r3,zero,2008adc <__sfp+0x60>
 2008ab8:	2080030f 	ldh	r2,12(r4)
 2008abc:	10000b26 	beq	r2,zero,2008aec <__sfp+0x70>
 2008ac0:	017fffc4 	movi	r5,-1
 2008ac4:	00000206 	br	2008ad0 <__sfp+0x54>
 2008ac8:	2080030f 	ldh	r2,12(r4)
 2008acc:	10000726 	beq	r2,zero,2008aec <__sfp+0x70>
 2008ad0:	18ffffc4 	addi	r3,r3,-1
 2008ad4:	21001704 	addi	r4,r4,92
 2008ad8:	197ffb1e 	bne	r3,r5,2008ac8 <__sfp+0x4c>
 2008adc:	80800017 	ldw	r2,0(r16)
 2008ae0:	10001926 	beq	r2,zero,2008b48 <__sfp+0xcc>
 2008ae4:	1021883a 	mov	r16,r2
 2008ae8:	003fef06 	br	2008aa8 <__sfp+0x2c>
 2008aec:	00bfffc4 	movi	r2,-1
 2008af0:	00c00044 	movi	r3,1
 2008af4:	2080038d 	sth	r2,14(r4)
 2008af8:	20c0030d 	sth	r3,12(r4)
 2008afc:	20000015 	stw	zero,0(r4)
 2008b00:	20000215 	stw	zero,8(r4)
 2008b04:	20000115 	stw	zero,4(r4)
 2008b08:	20000415 	stw	zero,16(r4)
 2008b0c:	20000515 	stw	zero,20(r4)
 2008b10:	20000615 	stw	zero,24(r4)
 2008b14:	20000c15 	stw	zero,48(r4)
 2008b18:	20000d15 	stw	zero,52(r4)
 2008b1c:	20001115 	stw	zero,68(r4)
 2008b20:	20001215 	stw	zero,72(r4)
 2008b24:	2005883a 	mov	r2,r4
 2008b28:	dfc00217 	ldw	ra,8(sp)
 2008b2c:	dc400117 	ldw	r17,4(sp)
 2008b30:	dc000017 	ldw	r16,0(sp)
 2008b34:	dec00304 	addi	sp,sp,12
 2008b38:	f800283a 	ret
 2008b3c:	8009883a 	mov	r4,r16
 2008b40:	20088e00 	call	20088e0 <__sinit>
 2008b44:	003fd706 	br	2008aa4 <__sfp+0x28>
 2008b48:	8809883a 	mov	r4,r17
 2008b4c:	01400104 	movi	r5,4
 2008b50:	20089e00 	call	20089e0 <__sfmoreglue>
 2008b54:	80800015 	stw	r2,0(r16)
 2008b58:	103fe21e 	bne	r2,zero,2008ae4 <__sfp+0x68>
 2008b5c:	00800304 	movi	r2,12
 2008b60:	0009883a 	mov	r4,zero
 2008b64:	88800015 	stw	r2,0(r17)
 2008b68:	003fee06 	br	2008b24 <__sfp+0xa8>

02008b6c <_malloc_trim_r>:
 2008b6c:	defffb04 	addi	sp,sp,-20
 2008b70:	dcc00315 	stw	r19,12(sp)
 2008b74:	04c080b4 	movhi	r19,514
 2008b78:	9ceb4304 	addi	r19,r19,-21236
 2008b7c:	dc800215 	stw	r18,8(sp)
 2008b80:	dc400115 	stw	r17,4(sp)
 2008b84:	dc000015 	stw	r16,0(sp)
 2008b88:	2823883a 	mov	r17,r5
 2008b8c:	2025883a 	mov	r18,r4
 2008b90:	dfc00415 	stw	ra,16(sp)
 2008b94:	200f3540 	call	200f354 <__malloc_lock>
 2008b98:	98800217 	ldw	r2,8(r19)
 2008b9c:	9009883a 	mov	r4,r18
 2008ba0:	000b883a 	mov	r5,zero
 2008ba4:	10c00117 	ldw	r3,4(r2)
 2008ba8:	00bfff04 	movi	r2,-4
 2008bac:	18a0703a 	and	r16,r3,r2
 2008bb0:	8463c83a 	sub	r17,r16,r17
 2008bb4:	8c43fbc4 	addi	r17,r17,4079
 2008bb8:	8822d33a 	srli	r17,r17,12
 2008bbc:	0083ffc4 	movi	r2,4095
 2008bc0:	8c7fffc4 	addi	r17,r17,-1
 2008bc4:	8822933a 	slli	r17,r17,12
 2008bc8:	1440060e 	bge	r2,r17,2008be4 <_malloc_trim_r+0x78>
 2008bcc:	20049980 	call	2004998 <_sbrk_r>
 2008bd0:	98c00217 	ldw	r3,8(r19)
 2008bd4:	9009883a 	mov	r4,r18
 2008bd8:	044bc83a 	sub	r5,zero,r17
 2008bdc:	80c7883a 	add	r3,r16,r3
 2008be0:	10c00926 	beq	r2,r3,2008c08 <_malloc_trim_r+0x9c>
 2008be4:	200f45c0 	call	200f45c <__malloc_unlock>
 2008be8:	0005883a 	mov	r2,zero
 2008bec:	dfc00417 	ldw	ra,16(sp)
 2008bf0:	dcc00317 	ldw	r19,12(sp)
 2008bf4:	dc800217 	ldw	r18,8(sp)
 2008bf8:	dc400117 	ldw	r17,4(sp)
 2008bfc:	dc000017 	ldw	r16,0(sp)
 2008c00:	dec00504 	addi	sp,sp,20
 2008c04:	f800283a 	ret
 2008c08:	9009883a 	mov	r4,r18
 2008c0c:	20049980 	call	2004998 <_sbrk_r>
 2008c10:	844dc83a 	sub	r6,r16,r17
 2008c14:	00ffffc4 	movi	r3,-1
 2008c18:	9009883a 	mov	r4,r18
 2008c1c:	000b883a 	mov	r5,zero
 2008c20:	01c080b4 	movhi	r7,514
 2008c24:	39f81c04 	addi	r7,r7,-8080
 2008c28:	31800054 	ori	r6,r6,1
 2008c2c:	10c00926 	beq	r2,r3,2008c54 <_malloc_trim_r+0xe8>
 2008c30:	38800017 	ldw	r2,0(r7)
 2008c34:	98c00217 	ldw	r3,8(r19)
 2008c38:	9009883a 	mov	r4,r18
 2008c3c:	1445c83a 	sub	r2,r2,r17
 2008c40:	38800015 	stw	r2,0(r7)
 2008c44:	19800115 	stw	r6,4(r3)
 2008c48:	200f45c0 	call	200f45c <__malloc_unlock>
 2008c4c:	00800044 	movi	r2,1
 2008c50:	003fe606 	br	2008bec <_malloc_trim_r+0x80>
 2008c54:	20049980 	call	2004998 <_sbrk_r>
 2008c58:	99800217 	ldw	r6,8(r19)
 2008c5c:	100f883a 	mov	r7,r2
 2008c60:	9009883a 	mov	r4,r18
 2008c64:	1187c83a 	sub	r3,r2,r6
 2008c68:	008003c4 	movi	r2,15
 2008c6c:	19400054 	ori	r5,r3,1
 2008c70:	10ffdc0e 	bge	r2,r3,2008be4 <_malloc_trim_r+0x78>
 2008c74:	008080b4 	movhi	r2,514
 2008c78:	10b0e604 	addi	r2,r2,-15464
 2008c7c:	10c00017 	ldw	r3,0(r2)
 2008c80:	008080b4 	movhi	r2,514
 2008c84:	10b81c04 	addi	r2,r2,-8080
 2008c88:	31400115 	stw	r5,4(r6)
 2008c8c:	38c7c83a 	sub	r3,r7,r3
 2008c90:	10c00015 	stw	r3,0(r2)
 2008c94:	003fd306 	br	2008be4 <_malloc_trim_r+0x78>

02008c98 <_free_r>:
 2008c98:	defffd04 	addi	sp,sp,-12
 2008c9c:	dc400115 	stw	r17,4(sp)
 2008ca0:	dc000015 	stw	r16,0(sp)
 2008ca4:	dfc00215 	stw	ra,8(sp)
 2008ca8:	2821883a 	mov	r16,r5
 2008cac:	2023883a 	mov	r17,r4
 2008cb0:	28005a26 	beq	r5,zero,2008e1c <_free_r+0x184>
 2008cb4:	200f3540 	call	200f354 <__malloc_lock>
 2008cb8:	823ffe04 	addi	r8,r16,-8
 2008cbc:	41400117 	ldw	r5,4(r8)
 2008cc0:	00bfff84 	movi	r2,-2
 2008cc4:	028080b4 	movhi	r10,514
 2008cc8:	52ab4304 	addi	r10,r10,-21236
 2008ccc:	288e703a 	and	r7,r5,r2
 2008cd0:	41cd883a 	add	r6,r8,r7
 2008cd4:	30c00117 	ldw	r3,4(r6)
 2008cd8:	51000217 	ldw	r4,8(r10)
 2008cdc:	00bfff04 	movi	r2,-4
 2008ce0:	1892703a 	and	r9,r3,r2
 2008ce4:	5017883a 	mov	r11,r10
 2008ce8:	31006726 	beq	r6,r4,2008e88 <_free_r+0x1f0>
 2008cec:	2880004c 	andi	r2,r5,1
 2008cf0:	1005003a 	cmpeq	r2,r2,zero
 2008cf4:	32400115 	stw	r9,4(r6)
 2008cf8:	10001a1e 	bne	r2,zero,2008d64 <_free_r+0xcc>
 2008cfc:	000b883a 	mov	r5,zero
 2008d00:	3247883a 	add	r3,r6,r9
 2008d04:	18800117 	ldw	r2,4(r3)
 2008d08:	1080004c 	andi	r2,r2,1
 2008d0c:	1000231e 	bne	r2,zero,2008d9c <_free_r+0x104>
 2008d10:	280ac03a 	cmpne	r5,r5,zero
 2008d14:	3a4f883a 	add	r7,r7,r9
 2008d18:	2800451e 	bne	r5,zero,2008e30 <_free_r+0x198>
 2008d1c:	31000217 	ldw	r4,8(r6)
 2008d20:	008080b4 	movhi	r2,514
 2008d24:	10ab4504 	addi	r2,r2,-21228
 2008d28:	20807b26 	beq	r4,r2,2008f18 <_free_r+0x280>
 2008d2c:	30800317 	ldw	r2,12(r6)
 2008d30:	3a07883a 	add	r3,r7,r8
 2008d34:	19c00015 	stw	r7,0(r3)
 2008d38:	11000215 	stw	r4,8(r2)
 2008d3c:	20800315 	stw	r2,12(r4)
 2008d40:	38800054 	ori	r2,r7,1
 2008d44:	40800115 	stw	r2,4(r8)
 2008d48:	28001a26 	beq	r5,zero,2008db4 <_free_r+0x11c>
 2008d4c:	8809883a 	mov	r4,r17
 2008d50:	dfc00217 	ldw	ra,8(sp)
 2008d54:	dc400117 	ldw	r17,4(sp)
 2008d58:	dc000017 	ldw	r16,0(sp)
 2008d5c:	dec00304 	addi	sp,sp,12
 2008d60:	200f45c1 	jmpi	200f45c <__malloc_unlock>
 2008d64:	80bffe17 	ldw	r2,-8(r16)
 2008d68:	50c00204 	addi	r3,r10,8
 2008d6c:	4091c83a 	sub	r8,r8,r2
 2008d70:	41000217 	ldw	r4,8(r8)
 2008d74:	388f883a 	add	r7,r7,r2
 2008d78:	20c06126 	beq	r4,r3,2008f00 <_free_r+0x268>
 2008d7c:	40800317 	ldw	r2,12(r8)
 2008d80:	3247883a 	add	r3,r6,r9
 2008d84:	000b883a 	mov	r5,zero
 2008d88:	11000215 	stw	r4,8(r2)
 2008d8c:	20800315 	stw	r2,12(r4)
 2008d90:	18800117 	ldw	r2,4(r3)
 2008d94:	1080004c 	andi	r2,r2,1
 2008d98:	103fdd26 	beq	r2,zero,2008d10 <_free_r+0x78>
 2008d9c:	38800054 	ori	r2,r7,1
 2008da0:	3a07883a 	add	r3,r7,r8
 2008da4:	280ac03a 	cmpne	r5,r5,zero
 2008da8:	40800115 	stw	r2,4(r8)
 2008dac:	19c00015 	stw	r7,0(r3)
 2008db0:	283fe61e 	bne	r5,zero,2008d4c <_free_r+0xb4>
 2008db4:	00807fc4 	movi	r2,511
 2008db8:	11c01f2e 	bgeu	r2,r7,2008e38 <_free_r+0x1a0>
 2008dbc:	3806d27a 	srli	r3,r7,9
 2008dc0:	1800481e 	bne	r3,zero,2008ee4 <_free_r+0x24c>
 2008dc4:	3804d0fa 	srli	r2,r7,3
 2008dc8:	100690fa 	slli	r3,r2,3
 2008dcc:	1acd883a 	add	r6,r3,r11
 2008dd0:	31400217 	ldw	r5,8(r6)
 2008dd4:	31405926 	beq	r6,r5,2008f3c <_free_r+0x2a4>
 2008dd8:	28800117 	ldw	r2,4(r5)
 2008ddc:	00ffff04 	movi	r3,-4
 2008de0:	10c4703a 	and	r2,r2,r3
 2008de4:	3880022e 	bgeu	r7,r2,2008df0 <_free_r+0x158>
 2008de8:	29400217 	ldw	r5,8(r5)
 2008dec:	317ffa1e 	bne	r6,r5,2008dd8 <_free_r+0x140>
 2008df0:	29800317 	ldw	r6,12(r5)
 2008df4:	41800315 	stw	r6,12(r8)
 2008df8:	41400215 	stw	r5,8(r8)
 2008dfc:	8809883a 	mov	r4,r17
 2008e00:	2a000315 	stw	r8,12(r5)
 2008e04:	32000215 	stw	r8,8(r6)
 2008e08:	dfc00217 	ldw	ra,8(sp)
 2008e0c:	dc400117 	ldw	r17,4(sp)
 2008e10:	dc000017 	ldw	r16,0(sp)
 2008e14:	dec00304 	addi	sp,sp,12
 2008e18:	200f45c1 	jmpi	200f45c <__malloc_unlock>
 2008e1c:	dfc00217 	ldw	ra,8(sp)
 2008e20:	dc400117 	ldw	r17,4(sp)
 2008e24:	dc000017 	ldw	r16,0(sp)
 2008e28:	dec00304 	addi	sp,sp,12
 2008e2c:	f800283a 	ret
 2008e30:	31000217 	ldw	r4,8(r6)
 2008e34:	003fbd06 	br	2008d2c <_free_r+0x94>
 2008e38:	3806d0fa 	srli	r3,r7,3
 2008e3c:	00800044 	movi	r2,1
 2008e40:	51400117 	ldw	r5,4(r10)
 2008e44:	180890fa 	slli	r4,r3,3
 2008e48:	1807d0ba 	srai	r3,r3,2
 2008e4c:	22c9883a 	add	r4,r4,r11
 2008e50:	21800217 	ldw	r6,8(r4)
 2008e54:	10c4983a 	sll	r2,r2,r3
 2008e58:	41000315 	stw	r4,12(r8)
 2008e5c:	41800215 	stw	r6,8(r8)
 2008e60:	288ab03a 	or	r5,r5,r2
 2008e64:	22000215 	stw	r8,8(r4)
 2008e68:	8809883a 	mov	r4,r17
 2008e6c:	51400115 	stw	r5,4(r10)
 2008e70:	32000315 	stw	r8,12(r6)
 2008e74:	dfc00217 	ldw	ra,8(sp)
 2008e78:	dc400117 	ldw	r17,4(sp)
 2008e7c:	dc000017 	ldw	r16,0(sp)
 2008e80:	dec00304 	addi	sp,sp,12
 2008e84:	200f45c1 	jmpi	200f45c <__malloc_unlock>
 2008e88:	2880004c 	andi	r2,r5,1
 2008e8c:	3a4d883a 	add	r6,r7,r9
 2008e90:	1000071e 	bne	r2,zero,2008eb0 <_free_r+0x218>
 2008e94:	80bffe17 	ldw	r2,-8(r16)
 2008e98:	4091c83a 	sub	r8,r8,r2
 2008e9c:	41000317 	ldw	r4,12(r8)
 2008ea0:	40c00217 	ldw	r3,8(r8)
 2008ea4:	308d883a 	add	r6,r6,r2
 2008ea8:	20c00215 	stw	r3,8(r4)
 2008eac:	19000315 	stw	r4,12(r3)
 2008eb0:	008080b4 	movhi	r2,514
 2008eb4:	10b0e504 	addi	r2,r2,-15468
 2008eb8:	11000017 	ldw	r4,0(r2)
 2008ebc:	30c00054 	ori	r3,r6,1
 2008ec0:	52000215 	stw	r8,8(r10)
 2008ec4:	40c00115 	stw	r3,4(r8)
 2008ec8:	313fa036 	bltu	r6,r4,2008d4c <_free_r+0xb4>
 2008ecc:	008080b4 	movhi	r2,514
 2008ed0:	10b7f404 	addi	r2,r2,-8240
 2008ed4:	11400017 	ldw	r5,0(r2)
 2008ed8:	8809883a 	mov	r4,r17
 2008edc:	2008b6c0 	call	2008b6c <_malloc_trim_r>
 2008ee0:	003f9a06 	br	2008d4c <_free_r+0xb4>
 2008ee4:	00800104 	movi	r2,4
 2008ee8:	10c0072e 	bgeu	r2,r3,2008f08 <_free_r+0x270>
 2008eec:	00800504 	movi	r2,20
 2008ef0:	10c01936 	bltu	r2,r3,2008f58 <_free_r+0x2c0>
 2008ef4:	188016c4 	addi	r2,r3,91
 2008ef8:	100690fa 	slli	r3,r2,3
 2008efc:	003fb306 	br	2008dcc <_free_r+0x134>
 2008f00:	01400044 	movi	r5,1
 2008f04:	003f7e06 	br	2008d00 <_free_r+0x68>
 2008f08:	3804d1ba 	srli	r2,r7,6
 2008f0c:	10800e04 	addi	r2,r2,56
 2008f10:	100690fa 	slli	r3,r2,3
 2008f14:	003fad06 	br	2008dcc <_free_r+0x134>
 2008f18:	22000315 	stw	r8,12(r4)
 2008f1c:	22000215 	stw	r8,8(r4)
 2008f20:	3a05883a 	add	r2,r7,r8
 2008f24:	38c00054 	ori	r3,r7,1
 2008f28:	11c00015 	stw	r7,0(r2)
 2008f2c:	41000215 	stw	r4,8(r8)
 2008f30:	40c00115 	stw	r3,4(r8)
 2008f34:	41000315 	stw	r4,12(r8)
 2008f38:	003f8406 	br	2008d4c <_free_r+0xb4>
 2008f3c:	1005d0ba 	srai	r2,r2,2
 2008f40:	00c00044 	movi	r3,1
 2008f44:	51000117 	ldw	r4,4(r10)
 2008f48:	1886983a 	sll	r3,r3,r2
 2008f4c:	20c8b03a 	or	r4,r4,r3
 2008f50:	51000115 	stw	r4,4(r10)
 2008f54:	003fa706 	br	2008df4 <_free_r+0x15c>
 2008f58:	00801504 	movi	r2,84
 2008f5c:	10c00436 	bltu	r2,r3,2008f70 <_free_r+0x2d8>
 2008f60:	3804d33a 	srli	r2,r7,12
 2008f64:	10801b84 	addi	r2,r2,110
 2008f68:	100690fa 	slli	r3,r2,3
 2008f6c:	003f9706 	br	2008dcc <_free_r+0x134>
 2008f70:	00805504 	movi	r2,340
 2008f74:	10c00436 	bltu	r2,r3,2008f88 <_free_r+0x2f0>
 2008f78:	3804d3fa 	srli	r2,r7,15
 2008f7c:	10801dc4 	addi	r2,r2,119
 2008f80:	100690fa 	slli	r3,r2,3
 2008f84:	003f9106 	br	2008dcc <_free_r+0x134>
 2008f88:	00815504 	movi	r2,1364
 2008f8c:	10c0032e 	bgeu	r2,r3,2008f9c <_free_r+0x304>
 2008f90:	00801f84 	movi	r2,126
 2008f94:	00c0fc04 	movi	r3,1008
 2008f98:	003f8c06 	br	2008dcc <_free_r+0x134>
 2008f9c:	3804d4ba 	srli	r2,r7,18
 2008fa0:	10801f04 	addi	r2,r2,124
 2008fa4:	100690fa 	slli	r3,r2,3
 2008fa8:	003f8806 	br	2008dcc <_free_r+0x134>

02008fac <__sfvwrite_r>:
 2008fac:	30800217 	ldw	r2,8(r6)
 2008fb0:	defff504 	addi	sp,sp,-44
 2008fb4:	df000915 	stw	fp,36(sp)
 2008fb8:	dd800715 	stw	r22,28(sp)
 2008fbc:	dc800315 	stw	r18,12(sp)
 2008fc0:	dfc00a15 	stw	ra,40(sp)
 2008fc4:	ddc00815 	stw	r23,32(sp)
 2008fc8:	dd400615 	stw	r21,24(sp)
 2008fcc:	dd000515 	stw	r20,20(sp)
 2008fd0:	dcc00415 	stw	r19,16(sp)
 2008fd4:	dc400215 	stw	r17,8(sp)
 2008fd8:	dc000115 	stw	r16,4(sp)
 2008fdc:	302d883a 	mov	r22,r6
 2008fe0:	2039883a 	mov	fp,r4
 2008fe4:	2825883a 	mov	r18,r5
 2008fe8:	10001c26 	beq	r2,zero,200905c <__sfvwrite_r+0xb0>
 2008fec:	29c0030b 	ldhu	r7,12(r5)
 2008ff0:	3880020c 	andi	r2,r7,8
 2008ff4:	10002726 	beq	r2,zero,2009094 <__sfvwrite_r+0xe8>
 2008ff8:	28800417 	ldw	r2,16(r5)
 2008ffc:	10002526 	beq	r2,zero,2009094 <__sfvwrite_r+0xe8>
 2009000:	3880008c 	andi	r2,r7,2
 2009004:	b5400017 	ldw	r21,0(r22)
 2009008:	10002826 	beq	r2,zero,20090ac <__sfvwrite_r+0x100>
 200900c:	0021883a 	mov	r16,zero
 2009010:	0023883a 	mov	r17,zero
 2009014:	880d883a 	mov	r6,r17
 2009018:	e009883a 	mov	r4,fp
 200901c:	00810004 	movi	r2,1024
 2009020:	80006e26 	beq	r16,zero,20091dc <__sfvwrite_r+0x230>
 2009024:	800f883a 	mov	r7,r16
 2009028:	91400717 	ldw	r5,28(r18)
 200902c:	1400012e 	bgeu	r2,r16,2009034 <__sfvwrite_r+0x88>
 2009030:	100f883a 	mov	r7,r2
 2009034:	90c00917 	ldw	r3,36(r18)
 2009038:	183ee83a 	callr	r3
 200903c:	1007883a 	mov	r3,r2
 2009040:	80a1c83a 	sub	r16,r16,r2
 2009044:	88a3883a 	add	r17,r17,r2
 2009048:	00806d0e 	bge	zero,r2,2009200 <__sfvwrite_r+0x254>
 200904c:	b0800217 	ldw	r2,8(r22)
 2009050:	10c5c83a 	sub	r2,r2,r3
 2009054:	b0800215 	stw	r2,8(r22)
 2009058:	103fee1e 	bne	r2,zero,2009014 <__sfvwrite_r+0x68>
 200905c:	0009883a 	mov	r4,zero
 2009060:	2005883a 	mov	r2,r4
 2009064:	dfc00a17 	ldw	ra,40(sp)
 2009068:	df000917 	ldw	fp,36(sp)
 200906c:	ddc00817 	ldw	r23,32(sp)
 2009070:	dd800717 	ldw	r22,28(sp)
 2009074:	dd400617 	ldw	r21,24(sp)
 2009078:	dd000517 	ldw	r20,20(sp)
 200907c:	dcc00417 	ldw	r19,16(sp)
 2009080:	dc800317 	ldw	r18,12(sp)
 2009084:	dc400217 	ldw	r17,8(sp)
 2009088:	dc000117 	ldw	r16,4(sp)
 200908c:	dec00b04 	addi	sp,sp,44
 2009090:	f800283a 	ret
 2009094:	2006cfc0 	call	2006cfc <__swsetup_r>
 2009098:	1000e41e 	bne	r2,zero,200942c <__sfvwrite_r+0x480>
 200909c:	91c0030b 	ldhu	r7,12(r18)
 20090a0:	b5400017 	ldw	r21,0(r22)
 20090a4:	3880008c 	andi	r2,r7,2
 20090a8:	103fd81e 	bne	r2,zero,200900c <__sfvwrite_r+0x60>
 20090ac:	3880004c 	andi	r2,r7,1
 20090b0:	1005003a 	cmpeq	r2,r2,zero
 20090b4:	10005726 	beq	r2,zero,2009214 <__sfvwrite_r+0x268>
 20090b8:	0029883a 	mov	r20,zero
 20090bc:	002f883a 	mov	r23,zero
 20090c0:	a0004226 	beq	r20,zero,20091cc <__sfvwrite_r+0x220>
 20090c4:	3880800c 	andi	r2,r7,512
 20090c8:	94000217 	ldw	r16,8(r18)
 20090cc:	10008b26 	beq	r2,zero,20092fc <__sfvwrite_r+0x350>
 20090d0:	800d883a 	mov	r6,r16
 20090d4:	a400a536 	bltu	r20,r16,200936c <__sfvwrite_r+0x3c0>
 20090d8:	3881200c 	andi	r2,r7,1152
 20090dc:	10002726 	beq	r2,zero,200917c <__sfvwrite_r+0x1d0>
 20090e0:	90800517 	ldw	r2,20(r18)
 20090e4:	92000417 	ldw	r8,16(r18)
 20090e8:	91400017 	ldw	r5,0(r18)
 20090ec:	1087883a 	add	r3,r2,r2
 20090f0:	1887883a 	add	r3,r3,r2
 20090f4:	1808d7fa 	srli	r4,r3,31
 20090f8:	2a21c83a 	sub	r16,r5,r8
 20090fc:	80800044 	addi	r2,r16,1
 2009100:	20c9883a 	add	r4,r4,r3
 2009104:	2027d07a 	srai	r19,r4,1
 2009108:	a085883a 	add	r2,r20,r2
 200910c:	980d883a 	mov	r6,r19
 2009110:	9880022e 	bgeu	r19,r2,200911c <__sfvwrite_r+0x170>
 2009114:	1027883a 	mov	r19,r2
 2009118:	100d883a 	mov	r6,r2
 200911c:	3881000c 	andi	r2,r7,1024
 2009120:	1000b826 	beq	r2,zero,2009404 <__sfvwrite_r+0x458>
 2009124:	300b883a 	mov	r5,r6
 2009128:	e009883a 	mov	r4,fp
 200912c:	20039040 	call	2003904 <_malloc_r>
 2009130:	10003126 	beq	r2,zero,20091f8 <__sfvwrite_r+0x24c>
 2009134:	91400417 	ldw	r5,16(r18)
 2009138:	1009883a 	mov	r4,r2
 200913c:	800d883a 	mov	r6,r16
 2009140:	1023883a 	mov	r17,r2
 2009144:	20040440 	call	2004044 <memcpy>
 2009148:	90c0030b 	ldhu	r3,12(r18)
 200914c:	00beffc4 	movi	r2,-1025
 2009150:	1886703a 	and	r3,r3,r2
 2009154:	18c02014 	ori	r3,r3,128
 2009158:	90c0030d 	sth	r3,12(r18)
 200915c:	9c07c83a 	sub	r3,r19,r16
 2009160:	8c05883a 	add	r2,r17,r16
 2009164:	a00d883a 	mov	r6,r20
 2009168:	a021883a 	mov	r16,r20
 200916c:	90800015 	stw	r2,0(r18)
 2009170:	90c00215 	stw	r3,8(r18)
 2009174:	94400415 	stw	r17,16(r18)
 2009178:	94c00515 	stw	r19,20(r18)
 200917c:	91000017 	ldw	r4,0(r18)
 2009180:	b80b883a 	mov	r5,r23
 2009184:	a023883a 	mov	r17,r20
 2009188:	20040e40 	call	20040e4 <memmove>
 200918c:	90c00217 	ldw	r3,8(r18)
 2009190:	90800017 	ldw	r2,0(r18)
 2009194:	a027883a 	mov	r19,r20
 2009198:	1c07c83a 	sub	r3,r3,r16
 200919c:	1405883a 	add	r2,r2,r16
 20091a0:	90c00215 	stw	r3,8(r18)
 20091a4:	a021883a 	mov	r16,r20
 20091a8:	90800015 	stw	r2,0(r18)
 20091ac:	b0800217 	ldw	r2,8(r22)
 20091b0:	1405c83a 	sub	r2,r2,r16
 20091b4:	b0800215 	stw	r2,8(r22)
 20091b8:	103fa826 	beq	r2,zero,200905c <__sfvwrite_r+0xb0>
 20091bc:	a469c83a 	sub	r20,r20,r17
 20091c0:	91c0030b 	ldhu	r7,12(r18)
 20091c4:	bcef883a 	add	r23,r23,r19
 20091c8:	a03fbe1e 	bne	r20,zero,20090c4 <__sfvwrite_r+0x118>
 20091cc:	adc00017 	ldw	r23,0(r21)
 20091d0:	ad000117 	ldw	r20,4(r21)
 20091d4:	ad400204 	addi	r21,r21,8
 20091d8:	003fb906 	br	20090c0 <__sfvwrite_r+0x114>
 20091dc:	ac400017 	ldw	r17,0(r21)
 20091e0:	ac000117 	ldw	r16,4(r21)
 20091e4:	ad400204 	addi	r21,r21,8
 20091e8:	003f8a06 	br	2009014 <__sfvwrite_r+0x68>
 20091ec:	91400417 	ldw	r5,16(r18)
 20091f0:	e009883a 	mov	r4,fp
 20091f4:	2008c980 	call	2008c98 <_free_r>
 20091f8:	00800304 	movi	r2,12
 20091fc:	e0800015 	stw	r2,0(fp)
 2009200:	9080030b 	ldhu	r2,12(r18)
 2009204:	013fffc4 	movi	r4,-1
 2009208:	10801014 	ori	r2,r2,64
 200920c:	9080030d 	sth	r2,12(r18)
 2009210:	003f9306 	br	2009060 <__sfvwrite_r+0xb4>
 2009214:	0027883a 	mov	r19,zero
 2009218:	002f883a 	mov	r23,zero
 200921c:	d8000015 	stw	zero,0(sp)
 2009220:	0029883a 	mov	r20,zero
 2009224:	98001e26 	beq	r19,zero,20092a0 <__sfvwrite_r+0x2f4>
 2009228:	d8c00017 	ldw	r3,0(sp)
 200922c:	1804c03a 	cmpne	r2,r3,zero
 2009230:	10005e26 	beq	r2,zero,20093ac <__sfvwrite_r+0x400>
 2009234:	9821883a 	mov	r16,r19
 2009238:	a4c0012e 	bgeu	r20,r19,2009240 <__sfvwrite_r+0x294>
 200923c:	a021883a 	mov	r16,r20
 2009240:	91000017 	ldw	r4,0(r18)
 2009244:	90800417 	ldw	r2,16(r18)
 2009248:	91800217 	ldw	r6,8(r18)
 200924c:	91c00517 	ldw	r7,20(r18)
 2009250:	1100022e 	bgeu	r2,r4,200925c <__sfvwrite_r+0x2b0>
 2009254:	31e3883a 	add	r17,r6,r7
 2009258:	8c001616 	blt	r17,r16,20092b4 <__sfvwrite_r+0x308>
 200925c:	81c03816 	blt	r16,r7,2009340 <__sfvwrite_r+0x394>
 2009260:	90c00917 	ldw	r3,36(r18)
 2009264:	91400717 	ldw	r5,28(r18)
 2009268:	e009883a 	mov	r4,fp
 200926c:	b80d883a 	mov	r6,r23
 2009270:	183ee83a 	callr	r3
 2009274:	1023883a 	mov	r17,r2
 2009278:	00bfe10e 	bge	zero,r2,2009200 <__sfvwrite_r+0x254>
 200927c:	a469c83a 	sub	r20,r20,r17
 2009280:	a0001826 	beq	r20,zero,20092e4 <__sfvwrite_r+0x338>
 2009284:	b0800217 	ldw	r2,8(r22)
 2009288:	1445c83a 	sub	r2,r2,r17
 200928c:	b0800215 	stw	r2,8(r22)
 2009290:	103f7226 	beq	r2,zero,200905c <__sfvwrite_r+0xb0>
 2009294:	9c67c83a 	sub	r19,r19,r17
 2009298:	bc6f883a 	add	r23,r23,r17
 200929c:	983fe21e 	bne	r19,zero,2009228 <__sfvwrite_r+0x27c>
 20092a0:	adc00017 	ldw	r23,0(r21)
 20092a4:	acc00117 	ldw	r19,4(r21)
 20092a8:	ad400204 	addi	r21,r21,8
 20092ac:	d8000015 	stw	zero,0(sp)
 20092b0:	003fdc06 	br	2009224 <__sfvwrite_r+0x278>
 20092b4:	b80b883a 	mov	r5,r23
 20092b8:	880d883a 	mov	r6,r17
 20092bc:	20040e40 	call	20040e4 <memmove>
 20092c0:	90c00017 	ldw	r3,0(r18)
 20092c4:	e009883a 	mov	r4,fp
 20092c8:	900b883a 	mov	r5,r18
 20092cc:	1c47883a 	add	r3,r3,r17
 20092d0:	90c00015 	stw	r3,0(r18)
 20092d4:	20086480 	call	2008648 <_fflush_r>
 20092d8:	103fc91e 	bne	r2,zero,2009200 <__sfvwrite_r+0x254>
 20092dc:	a469c83a 	sub	r20,r20,r17
 20092e0:	a03fe81e 	bne	r20,zero,2009284 <__sfvwrite_r+0x2d8>
 20092e4:	e009883a 	mov	r4,fp
 20092e8:	900b883a 	mov	r5,r18
 20092ec:	20086480 	call	2008648 <_fflush_r>
 20092f0:	103fc31e 	bne	r2,zero,2009200 <__sfvwrite_r+0x254>
 20092f4:	d8000015 	stw	zero,0(sp)
 20092f8:	003fe206 	br	2009284 <__sfvwrite_r+0x2d8>
 20092fc:	91000017 	ldw	r4,0(r18)
 2009300:	90800417 	ldw	r2,16(r18)
 2009304:	1100022e 	bgeu	r2,r4,2009310 <__sfvwrite_r+0x364>
 2009308:	8023883a 	mov	r17,r16
 200930c:	85003136 	bltu	r16,r20,20093d4 <__sfvwrite_r+0x428>
 2009310:	91c00517 	ldw	r7,20(r18)
 2009314:	a1c01836 	bltu	r20,r7,2009378 <__sfvwrite_r+0x3cc>
 2009318:	90c00917 	ldw	r3,36(r18)
 200931c:	91400717 	ldw	r5,28(r18)
 2009320:	e009883a 	mov	r4,fp
 2009324:	b80d883a 	mov	r6,r23
 2009328:	183ee83a 	callr	r3
 200932c:	1021883a 	mov	r16,r2
 2009330:	00bfb30e 	bge	zero,r2,2009200 <__sfvwrite_r+0x254>
 2009334:	1023883a 	mov	r17,r2
 2009338:	1027883a 	mov	r19,r2
 200933c:	003f9b06 	br	20091ac <__sfvwrite_r+0x200>
 2009340:	b80b883a 	mov	r5,r23
 2009344:	800d883a 	mov	r6,r16
 2009348:	20040e40 	call	20040e4 <memmove>
 200934c:	90c00217 	ldw	r3,8(r18)
 2009350:	90800017 	ldw	r2,0(r18)
 2009354:	8023883a 	mov	r17,r16
 2009358:	1c07c83a 	sub	r3,r3,r16
 200935c:	1405883a 	add	r2,r2,r16
 2009360:	90c00215 	stw	r3,8(r18)
 2009364:	90800015 	stw	r2,0(r18)
 2009368:	003fc406 	br	200927c <__sfvwrite_r+0x2d0>
 200936c:	a00d883a 	mov	r6,r20
 2009370:	a021883a 	mov	r16,r20
 2009374:	003f8106 	br	200917c <__sfvwrite_r+0x1d0>
 2009378:	b80b883a 	mov	r5,r23
 200937c:	a00d883a 	mov	r6,r20
 2009380:	20040e40 	call	20040e4 <memmove>
 2009384:	90c00217 	ldw	r3,8(r18)
 2009388:	90800017 	ldw	r2,0(r18)
 200938c:	a021883a 	mov	r16,r20
 2009390:	1d07c83a 	sub	r3,r3,r20
 2009394:	1505883a 	add	r2,r2,r20
 2009398:	a023883a 	mov	r17,r20
 200939c:	a027883a 	mov	r19,r20
 20093a0:	90c00215 	stw	r3,8(r18)
 20093a4:	90800015 	stw	r2,0(r18)
 20093a8:	003f8006 	br	20091ac <__sfvwrite_r+0x200>
 20093ac:	b809883a 	mov	r4,r23
 20093b0:	01400284 	movi	r5,10
 20093b4:	980d883a 	mov	r6,r19
 20093b8:	20098200 	call	2009820 <memchr>
 20093bc:	10001726 	beq	r2,zero,200941c <__sfvwrite_r+0x470>
 20093c0:	15c5c83a 	sub	r2,r2,r23
 20093c4:	15000044 	addi	r20,r2,1
 20093c8:	00800044 	movi	r2,1
 20093cc:	d8800015 	stw	r2,0(sp)
 20093d0:	003f9806 	br	2009234 <__sfvwrite_r+0x288>
 20093d4:	b80b883a 	mov	r5,r23
 20093d8:	800d883a 	mov	r6,r16
 20093dc:	20040e40 	call	20040e4 <memmove>
 20093e0:	90c00017 	ldw	r3,0(r18)
 20093e4:	e009883a 	mov	r4,fp
 20093e8:	900b883a 	mov	r5,r18
 20093ec:	1c07883a 	add	r3,r3,r16
 20093f0:	90c00015 	stw	r3,0(r18)
 20093f4:	8027883a 	mov	r19,r16
 20093f8:	20086480 	call	2008648 <_fflush_r>
 20093fc:	103f6b26 	beq	r2,zero,20091ac <__sfvwrite_r+0x200>
 2009400:	003f7f06 	br	2009200 <__sfvwrite_r+0x254>
 2009404:	400b883a 	mov	r5,r8
 2009408:	e009883a 	mov	r4,fp
 200940c:	20043a40 	call	20043a4 <_realloc_r>
 2009410:	103f7626 	beq	r2,zero,20091ec <__sfvwrite_r+0x240>
 2009414:	1023883a 	mov	r17,r2
 2009418:	003f5006 	br	200915c <__sfvwrite_r+0x1b0>
 200941c:	00c00044 	movi	r3,1
 2009420:	9d000044 	addi	r20,r19,1
 2009424:	d8c00015 	stw	r3,0(sp)
 2009428:	003f8206 	br	2009234 <__sfvwrite_r+0x288>
 200942c:	9080030b 	ldhu	r2,12(r18)
 2009430:	00c00244 	movi	r3,9
 2009434:	013fffc4 	movi	r4,-1
 2009438:	10801014 	ori	r2,r2,64
 200943c:	9080030d 	sth	r2,12(r18)
 2009440:	e0c00015 	stw	r3,0(fp)
 2009444:	003f0606 	br	2009060 <__sfvwrite_r+0xb4>

02009448 <_fwalk_reent>:
 2009448:	defff704 	addi	sp,sp,-36
 200944c:	dcc00315 	stw	r19,12(sp)
 2009450:	24c0b804 	addi	r19,r4,736
 2009454:	dd800615 	stw	r22,24(sp)
 2009458:	dd400515 	stw	r21,20(sp)
 200945c:	dfc00815 	stw	ra,32(sp)
 2009460:	ddc00715 	stw	r23,28(sp)
 2009464:	dd000415 	stw	r20,16(sp)
 2009468:	dc800215 	stw	r18,8(sp)
 200946c:	dc400115 	stw	r17,4(sp)
 2009470:	dc000015 	stw	r16,0(sp)
 2009474:	202b883a 	mov	r21,r4
 2009478:	282d883a 	mov	r22,r5
 200947c:	20088d00 	call	20088d0 <__sfp_lock_acquire>
 2009480:	98002126 	beq	r19,zero,2009508 <_fwalk_reent+0xc0>
 2009484:	002f883a 	mov	r23,zero
 2009488:	9c800117 	ldw	r18,4(r19)
 200948c:	9c000217 	ldw	r16,8(r19)
 2009490:	90bfffc4 	addi	r2,r18,-1
 2009494:	10000d16 	blt	r2,zero,20094cc <_fwalk_reent+0x84>
 2009498:	0023883a 	mov	r17,zero
 200949c:	053fffc4 	movi	r20,-1
 20094a0:	8080030f 	ldh	r2,12(r16)
 20094a4:	8c400044 	addi	r17,r17,1
 20094a8:	10000626 	beq	r2,zero,20094c4 <_fwalk_reent+0x7c>
 20094ac:	8080038f 	ldh	r2,14(r16)
 20094b0:	800b883a 	mov	r5,r16
 20094b4:	a809883a 	mov	r4,r21
 20094b8:	15000226 	beq	r2,r20,20094c4 <_fwalk_reent+0x7c>
 20094bc:	b03ee83a 	callr	r22
 20094c0:	b8aeb03a 	or	r23,r23,r2
 20094c4:	84001704 	addi	r16,r16,92
 20094c8:	947ff51e 	bne	r18,r17,20094a0 <_fwalk_reent+0x58>
 20094cc:	9cc00017 	ldw	r19,0(r19)
 20094d0:	983fed1e 	bne	r19,zero,2009488 <_fwalk_reent+0x40>
 20094d4:	20088d40 	call	20088d4 <__sfp_lock_release>
 20094d8:	b805883a 	mov	r2,r23
 20094dc:	dfc00817 	ldw	ra,32(sp)
 20094e0:	ddc00717 	ldw	r23,28(sp)
 20094e4:	dd800617 	ldw	r22,24(sp)
 20094e8:	dd400517 	ldw	r21,20(sp)
 20094ec:	dd000417 	ldw	r20,16(sp)
 20094f0:	dcc00317 	ldw	r19,12(sp)
 20094f4:	dc800217 	ldw	r18,8(sp)
 20094f8:	dc400117 	ldw	r17,4(sp)
 20094fc:	dc000017 	ldw	r16,0(sp)
 2009500:	dec00904 	addi	sp,sp,36
 2009504:	f800283a 	ret
 2009508:	002f883a 	mov	r23,zero
 200950c:	003ff106 	br	20094d4 <_fwalk_reent+0x8c>

02009510 <_fwalk>:
 2009510:	defff804 	addi	sp,sp,-32
 2009514:	dcc00315 	stw	r19,12(sp)
 2009518:	24c0b804 	addi	r19,r4,736
 200951c:	dd400515 	stw	r21,20(sp)
 2009520:	dfc00715 	stw	ra,28(sp)
 2009524:	dd800615 	stw	r22,24(sp)
 2009528:	dd000415 	stw	r20,16(sp)
 200952c:	dc800215 	stw	r18,8(sp)
 2009530:	dc400115 	stw	r17,4(sp)
 2009534:	dc000015 	stw	r16,0(sp)
 2009538:	282b883a 	mov	r21,r5
 200953c:	20088d00 	call	20088d0 <__sfp_lock_acquire>
 2009540:	98001f26 	beq	r19,zero,20095c0 <_fwalk+0xb0>
 2009544:	002d883a 	mov	r22,zero
 2009548:	9c800117 	ldw	r18,4(r19)
 200954c:	9c000217 	ldw	r16,8(r19)
 2009550:	90bfffc4 	addi	r2,r18,-1
 2009554:	10000c16 	blt	r2,zero,2009588 <_fwalk+0x78>
 2009558:	0023883a 	mov	r17,zero
 200955c:	053fffc4 	movi	r20,-1
 2009560:	8080030f 	ldh	r2,12(r16)
 2009564:	8c400044 	addi	r17,r17,1
 2009568:	10000526 	beq	r2,zero,2009580 <_fwalk+0x70>
 200956c:	8080038f 	ldh	r2,14(r16)
 2009570:	8009883a 	mov	r4,r16
 2009574:	15000226 	beq	r2,r20,2009580 <_fwalk+0x70>
 2009578:	a83ee83a 	callr	r21
 200957c:	b0acb03a 	or	r22,r22,r2
 2009580:	84001704 	addi	r16,r16,92
 2009584:	947ff61e 	bne	r18,r17,2009560 <_fwalk+0x50>
 2009588:	9cc00017 	ldw	r19,0(r19)
 200958c:	983fee1e 	bne	r19,zero,2009548 <_fwalk+0x38>
 2009590:	20088d40 	call	20088d4 <__sfp_lock_release>
 2009594:	b005883a 	mov	r2,r22
 2009598:	dfc00717 	ldw	ra,28(sp)
 200959c:	dd800617 	ldw	r22,24(sp)
 20095a0:	dd400517 	ldw	r21,20(sp)
 20095a4:	dd000417 	ldw	r20,16(sp)
 20095a8:	dcc00317 	ldw	r19,12(sp)
 20095ac:	dc800217 	ldw	r18,8(sp)
 20095b0:	dc400117 	ldw	r17,4(sp)
 20095b4:	dc000017 	ldw	r16,0(sp)
 20095b8:	dec00804 	addi	sp,sp,32
 20095bc:	f800283a 	ret
 20095c0:	002d883a 	mov	r22,zero
 20095c4:	003ff206 	br	2009590 <_fwalk+0x80>

020095c8 <__locale_charset>:
 20095c8:	d0a00517 	ldw	r2,-32748(gp)
 20095cc:	f800283a 	ret

020095d0 <_localeconv_r>:
 20095d0:	008080b4 	movhi	r2,514
 20095d4:	10a94704 	addi	r2,r2,-23268
 20095d8:	f800283a 	ret

020095dc <localeconv>:
 20095dc:	008080b4 	movhi	r2,514
 20095e0:	10b0e304 	addi	r2,r2,-15476
 20095e4:	11000017 	ldw	r4,0(r2)
 20095e8:	20095d01 	jmpi	20095d0 <_localeconv_r>

020095ec <_setlocale_r>:
 20095ec:	defffc04 	addi	sp,sp,-16
 20095f0:	00c080b4 	movhi	r3,514
 20095f4:	18e91d04 	addi	r3,r3,-23436
 20095f8:	dc800215 	stw	r18,8(sp)
 20095fc:	dc400115 	stw	r17,4(sp)
 2009600:	dc000015 	stw	r16,0(sp)
 2009604:	2023883a 	mov	r17,r4
 2009608:	2825883a 	mov	r18,r5
 200960c:	dfc00315 	stw	ra,12(sp)
 2009610:	3021883a 	mov	r16,r6
 2009614:	3009883a 	mov	r4,r6
 2009618:	180b883a 	mov	r5,r3
 200961c:	30000926 	beq	r6,zero,2009644 <_setlocale_r+0x58>
 2009620:	2004be40 	call	2004be4 <strcmp>
 2009624:	8009883a 	mov	r4,r16
 2009628:	014080b4 	movhi	r5,514
 200962c:	29691c04 	addi	r5,r5,-23440
 2009630:	10000b1e 	bne	r2,zero,2009660 <_setlocale_r+0x74>
 2009634:	8c000d15 	stw	r16,52(r17)
 2009638:	8c800c15 	stw	r18,48(r17)
 200963c:	00c080b4 	movhi	r3,514
 2009640:	18e91d04 	addi	r3,r3,-23436
 2009644:	1805883a 	mov	r2,r3
 2009648:	dfc00317 	ldw	ra,12(sp)
 200964c:	dc800217 	ldw	r18,8(sp)
 2009650:	dc400117 	ldw	r17,4(sp)
 2009654:	dc000017 	ldw	r16,0(sp)
 2009658:	dec00404 	addi	sp,sp,16
 200965c:	f800283a 	ret
 2009660:	2004be40 	call	2004be4 <strcmp>
 2009664:	0007883a 	mov	r3,zero
 2009668:	103ff226 	beq	r2,zero,2009634 <_setlocale_r+0x48>
 200966c:	003ff506 	br	2009644 <_setlocale_r+0x58>

02009670 <setlocale>:
 2009670:	018080b4 	movhi	r6,514
 2009674:	31b0e304 	addi	r6,r6,-15476
 2009678:	2007883a 	mov	r3,r4
 200967c:	31000017 	ldw	r4,0(r6)
 2009680:	280d883a 	mov	r6,r5
 2009684:	180b883a 	mov	r5,r3
 2009688:	20095ec1 	jmpi	20095ec <_setlocale_r>

0200968c <__smakebuf_r>:
 200968c:	2880030b 	ldhu	r2,12(r5)
 2009690:	deffed04 	addi	sp,sp,-76
 2009694:	dc401015 	stw	r17,64(sp)
 2009698:	1080008c 	andi	r2,r2,2
 200969c:	dc000f15 	stw	r16,60(sp)
 20096a0:	dfc01215 	stw	ra,72(sp)
 20096a4:	dc801115 	stw	r18,68(sp)
 20096a8:	2821883a 	mov	r16,r5
 20096ac:	2023883a 	mov	r17,r4
 20096b0:	10000b26 	beq	r2,zero,20096e0 <__smakebuf_r+0x54>
 20096b4:	28c010c4 	addi	r3,r5,67
 20096b8:	00800044 	movi	r2,1
 20096bc:	28800515 	stw	r2,20(r5)
 20096c0:	28c00415 	stw	r3,16(r5)
 20096c4:	28c00015 	stw	r3,0(r5)
 20096c8:	dfc01217 	ldw	ra,72(sp)
 20096cc:	dc801117 	ldw	r18,68(sp)
 20096d0:	dc401017 	ldw	r17,64(sp)
 20096d4:	dc000f17 	ldw	r16,60(sp)
 20096d8:	dec01304 	addi	sp,sp,76
 20096dc:	f800283a 	ret
 20096e0:	2940038f 	ldh	r5,14(r5)
 20096e4:	28002116 	blt	r5,zero,200976c <__smakebuf_r+0xe0>
 20096e8:	d80d883a 	mov	r6,sp
 20096ec:	200c2ac0 	call	200c2ac <_fstat_r>
 20096f0:	10001e16 	blt	r2,zero,200976c <__smakebuf_r+0xe0>
 20096f4:	d8800117 	ldw	r2,4(sp)
 20096f8:	00e00014 	movui	r3,32768
 20096fc:	113c000c 	andi	r4,r2,61440
 2009700:	20c03126 	beq	r4,r3,20097c8 <__smakebuf_r+0x13c>
 2009704:	8080030b 	ldhu	r2,12(r16)
 2009708:	00c80004 	movi	r3,8192
 200970c:	10820014 	ori	r2,r2,2048
 2009710:	8080030d 	sth	r2,12(r16)
 2009714:	20c01e26 	beq	r4,r3,2009790 <__smakebuf_r+0x104>
 2009718:	04810004 	movi	r18,1024
 200971c:	8809883a 	mov	r4,r17
 2009720:	900b883a 	mov	r5,r18
 2009724:	20039040 	call	2003904 <_malloc_r>
 2009728:	1009883a 	mov	r4,r2
 200972c:	10003126 	beq	r2,zero,20097f4 <__smakebuf_r+0x168>
 2009730:	80c0030b 	ldhu	r3,12(r16)
 2009734:	00808074 	movhi	r2,513
 2009738:	10a27104 	addi	r2,r2,-30268
 200973c:	88800f15 	stw	r2,60(r17)
 2009740:	18c02014 	ori	r3,r3,128
 2009744:	84800515 	stw	r18,20(r16)
 2009748:	80c0030d 	sth	r3,12(r16)
 200974c:	81000415 	stw	r4,16(r16)
 2009750:	81000015 	stw	r4,0(r16)
 2009754:	dfc01217 	ldw	ra,72(sp)
 2009758:	dc801117 	ldw	r18,68(sp)
 200975c:	dc401017 	ldw	r17,64(sp)
 2009760:	dc000f17 	ldw	r16,60(sp)
 2009764:	dec01304 	addi	sp,sp,76
 2009768:	f800283a 	ret
 200976c:	80c0030b 	ldhu	r3,12(r16)
 2009770:	1880200c 	andi	r2,r3,128
 2009774:	10000426 	beq	r2,zero,2009788 <__smakebuf_r+0xfc>
 2009778:	04801004 	movi	r18,64
 200977c:	18820014 	ori	r2,r3,2048
 2009780:	8080030d 	sth	r2,12(r16)
 2009784:	003fe506 	br	200971c <__smakebuf_r+0x90>
 2009788:	04810004 	movi	r18,1024
 200978c:	003ffb06 	br	200977c <__smakebuf_r+0xf0>
 2009790:	8140038f 	ldh	r5,14(r16)
 2009794:	8809883a 	mov	r4,r17
 2009798:	200c3200 	call	200c320 <_isatty_r>
 200979c:	103fde26 	beq	r2,zero,2009718 <__smakebuf_r+0x8c>
 20097a0:	8080030b 	ldhu	r2,12(r16)
 20097a4:	80c010c4 	addi	r3,r16,67
 20097a8:	04810004 	movi	r18,1024
 20097ac:	10800054 	ori	r2,r2,1
 20097b0:	8080030d 	sth	r2,12(r16)
 20097b4:	00800044 	movi	r2,1
 20097b8:	80c00415 	stw	r3,16(r16)
 20097bc:	80800515 	stw	r2,20(r16)
 20097c0:	80c00015 	stw	r3,0(r16)
 20097c4:	003fd506 	br	200971c <__smakebuf_r+0x90>
 20097c8:	80c00a17 	ldw	r3,40(r16)
 20097cc:	00808074 	movhi	r2,513
 20097d0:	10ab5604 	addi	r2,r2,-21160
 20097d4:	18bfcb1e 	bne	r3,r2,2009704 <__smakebuf_r+0x78>
 20097d8:	8080030b 	ldhu	r2,12(r16)
 20097dc:	00c10004 	movi	r3,1024
 20097e0:	1825883a 	mov	r18,r3
 20097e4:	10c4b03a 	or	r2,r2,r3
 20097e8:	8080030d 	sth	r2,12(r16)
 20097ec:	80c01315 	stw	r3,76(r16)
 20097f0:	003fca06 	br	200971c <__smakebuf_r+0x90>
 20097f4:	8100030b 	ldhu	r4,12(r16)
 20097f8:	2080800c 	andi	r2,r4,512
 20097fc:	103fb21e 	bne	r2,zero,20096c8 <__smakebuf_r+0x3c>
 2009800:	80c010c4 	addi	r3,r16,67
 2009804:	21000094 	ori	r4,r4,2
 2009808:	00800044 	movi	r2,1
 200980c:	80800515 	stw	r2,20(r16)
 2009810:	8100030d 	sth	r4,12(r16)
 2009814:	80c00415 	stw	r3,16(r16)
 2009818:	80c00015 	stw	r3,0(r16)
 200981c:	003faa06 	br	20096c8 <__smakebuf_r+0x3c>

02009820 <memchr>:
 2009820:	008000c4 	movi	r2,3
 2009824:	29403fcc 	andi	r5,r5,255
 2009828:	2007883a 	mov	r3,r4
 200982c:	1180022e 	bgeu	r2,r6,2009838 <memchr+0x18>
 2009830:	2084703a 	and	r2,r4,r2
 2009834:	10000b26 	beq	r2,zero,2009864 <memchr+0x44>
 2009838:	313fffc4 	addi	r4,r6,-1
 200983c:	3000051e 	bne	r6,zero,2009854 <memchr+0x34>
 2009840:	00002c06 	br	20098f4 <memchr+0xd4>
 2009844:	213fffc4 	addi	r4,r4,-1
 2009848:	00bfffc4 	movi	r2,-1
 200984c:	18c00044 	addi	r3,r3,1
 2009850:	20802826 	beq	r4,r2,20098f4 <memchr+0xd4>
 2009854:	18800003 	ldbu	r2,0(r3)
 2009858:	28bffa1e 	bne	r5,r2,2009844 <memchr+0x24>
 200985c:	1805883a 	mov	r2,r3
 2009860:	f800283a 	ret
 2009864:	0011883a 	mov	r8,zero
 2009868:	0007883a 	mov	r3,zero
 200986c:	01c00104 	movi	r7,4
 2009870:	4004923a 	slli	r2,r8,8
 2009874:	18c00044 	addi	r3,r3,1
 2009878:	1151883a 	add	r8,r2,r5
 200987c:	19fffc1e 	bne	r3,r7,2009870 <memchr+0x50>
 2009880:	02bfbff4 	movhi	r10,65279
 2009884:	52bfbfc4 	addi	r10,r10,-257
 2009888:	02602074 	movhi	r9,32897
 200988c:	4a602004 	addi	r9,r9,-32640
 2009890:	02c000c4 	movi	r11,3
 2009894:	20800017 	ldw	r2,0(r4)
 2009898:	31bfff04 	addi	r6,r6,-4
 200989c:	200f883a 	mov	r7,r4
 20098a0:	1204f03a 	xor	r2,r2,r8
 20098a4:	1287883a 	add	r3,r2,r10
 20098a8:	1a46703a 	and	r3,r3,r9
 20098ac:	0084303a 	nor	r2,zero,r2
 20098b0:	10c4703a 	and	r2,r2,r3
 20098b4:	10000b26 	beq	r2,zero,20098e4 <memchr+0xc4>
 20098b8:	20800003 	ldbu	r2,0(r4)
 20098bc:	28800f26 	beq	r5,r2,20098fc <memchr+0xdc>
 20098c0:	20800043 	ldbu	r2,1(r4)
 20098c4:	21c00044 	addi	r7,r4,1
 20098c8:	28800c26 	beq	r5,r2,20098fc <memchr+0xdc>
 20098cc:	20800083 	ldbu	r2,2(r4)
 20098d0:	21c00084 	addi	r7,r4,2
 20098d4:	28800926 	beq	r5,r2,20098fc <memchr+0xdc>
 20098d8:	208000c3 	ldbu	r2,3(r4)
 20098dc:	21c000c4 	addi	r7,r4,3
 20098e0:	28800626 	beq	r5,r2,20098fc <memchr+0xdc>
 20098e4:	21000104 	addi	r4,r4,4
 20098e8:	59bfea36 	bltu	r11,r6,2009894 <memchr+0x74>
 20098ec:	2007883a 	mov	r3,r4
 20098f0:	003fd106 	br	2009838 <memchr+0x18>
 20098f4:	0005883a 	mov	r2,zero
 20098f8:	f800283a 	ret
 20098fc:	3805883a 	mov	r2,r7
 2009900:	f800283a 	ret

02009904 <_Bfree>:
 2009904:	28000826 	beq	r5,zero,2009928 <_Bfree+0x24>
 2009908:	28800117 	ldw	r2,4(r5)
 200990c:	21001317 	ldw	r4,76(r4)
 2009910:	1085883a 	add	r2,r2,r2
 2009914:	1085883a 	add	r2,r2,r2
 2009918:	1105883a 	add	r2,r2,r4
 200991c:	10c00017 	ldw	r3,0(r2)
 2009920:	28c00015 	stw	r3,0(r5)
 2009924:	11400015 	stw	r5,0(r2)
 2009928:	f800283a 	ret

0200992c <__hi0bits>:
 200992c:	20bfffec 	andhi	r2,r4,65535
 2009930:	10001426 	beq	r2,zero,2009984 <__hi0bits+0x58>
 2009934:	0007883a 	mov	r3,zero
 2009938:	20bfc02c 	andhi	r2,r4,65280
 200993c:	1000021e 	bne	r2,zero,2009948 <__hi0bits+0x1c>
 2009940:	2008923a 	slli	r4,r4,8
 2009944:	18c00204 	addi	r3,r3,8
 2009948:	20bc002c 	andhi	r2,r4,61440
 200994c:	1000021e 	bne	r2,zero,2009958 <__hi0bits+0x2c>
 2009950:	2008913a 	slli	r4,r4,4
 2009954:	18c00104 	addi	r3,r3,4
 2009958:	20b0002c 	andhi	r2,r4,49152
 200995c:	1000031e 	bne	r2,zero,200996c <__hi0bits+0x40>
 2009960:	2105883a 	add	r2,r4,r4
 2009964:	18c00084 	addi	r3,r3,2
 2009968:	1089883a 	add	r4,r2,r2
 200996c:	20000316 	blt	r4,zero,200997c <__hi0bits+0x50>
 2009970:	2090002c 	andhi	r2,r4,16384
 2009974:	10000626 	beq	r2,zero,2009990 <__hi0bits+0x64>
 2009978:	18c00044 	addi	r3,r3,1
 200997c:	1805883a 	mov	r2,r3
 2009980:	f800283a 	ret
 2009984:	2008943a 	slli	r4,r4,16
 2009988:	00c00404 	movi	r3,16
 200998c:	003fea06 	br	2009938 <__hi0bits+0xc>
 2009990:	00c00804 	movi	r3,32
 2009994:	1805883a 	mov	r2,r3
 2009998:	f800283a 	ret

0200999c <__lo0bits>:
 200999c:	20c00017 	ldw	r3,0(r4)
 20099a0:	188001cc 	andi	r2,r3,7
 20099a4:	10000a26 	beq	r2,zero,20099d0 <__lo0bits+0x34>
 20099a8:	1880004c 	andi	r2,r3,1
 20099ac:	1005003a 	cmpeq	r2,r2,zero
 20099b0:	10002126 	beq	r2,zero,2009a38 <__lo0bits+0x9c>
 20099b4:	1880008c 	andi	r2,r3,2
 20099b8:	1000251e 	bne	r2,zero,2009a50 <__lo0bits+0xb4>
 20099bc:	1804d0ba 	srli	r2,r3,2
 20099c0:	01400084 	movi	r5,2
 20099c4:	20800015 	stw	r2,0(r4)
 20099c8:	2805883a 	mov	r2,r5
 20099cc:	f800283a 	ret
 20099d0:	18bfffcc 	andi	r2,r3,65535
 20099d4:	10001526 	beq	r2,zero,2009a2c <__lo0bits+0x90>
 20099d8:	000b883a 	mov	r5,zero
 20099dc:	18803fcc 	andi	r2,r3,255
 20099e0:	1000021e 	bne	r2,zero,20099ec <__lo0bits+0x50>
 20099e4:	1806d23a 	srli	r3,r3,8
 20099e8:	29400204 	addi	r5,r5,8
 20099ec:	188003cc 	andi	r2,r3,15
 20099f0:	1000021e 	bne	r2,zero,20099fc <__lo0bits+0x60>
 20099f4:	1806d13a 	srli	r3,r3,4
 20099f8:	29400104 	addi	r5,r5,4
 20099fc:	188000cc 	andi	r2,r3,3
 2009a00:	1000021e 	bne	r2,zero,2009a0c <__lo0bits+0x70>
 2009a04:	1806d0ba 	srli	r3,r3,2
 2009a08:	29400084 	addi	r5,r5,2
 2009a0c:	1880004c 	andi	r2,r3,1
 2009a10:	1000031e 	bne	r2,zero,2009a20 <__lo0bits+0x84>
 2009a14:	1806d07a 	srli	r3,r3,1
 2009a18:	18000a26 	beq	r3,zero,2009a44 <__lo0bits+0xa8>
 2009a1c:	29400044 	addi	r5,r5,1
 2009a20:	2805883a 	mov	r2,r5
 2009a24:	20c00015 	stw	r3,0(r4)
 2009a28:	f800283a 	ret
 2009a2c:	1806d43a 	srli	r3,r3,16
 2009a30:	01400404 	movi	r5,16
 2009a34:	003fe906 	br	20099dc <__lo0bits+0x40>
 2009a38:	000b883a 	mov	r5,zero
 2009a3c:	2805883a 	mov	r2,r5
 2009a40:	f800283a 	ret
 2009a44:	01400804 	movi	r5,32
 2009a48:	2805883a 	mov	r2,r5
 2009a4c:	f800283a 	ret
 2009a50:	1804d07a 	srli	r2,r3,1
 2009a54:	01400044 	movi	r5,1
 2009a58:	20800015 	stw	r2,0(r4)
 2009a5c:	003fda06 	br	20099c8 <__lo0bits+0x2c>

02009a60 <__mcmp>:
 2009a60:	20800417 	ldw	r2,16(r4)
 2009a64:	28c00417 	ldw	r3,16(r5)
 2009a68:	10cfc83a 	sub	r7,r2,r3
 2009a6c:	38000c1e 	bne	r7,zero,2009aa0 <__mcmp+0x40>
 2009a70:	18c5883a 	add	r2,r3,r3
 2009a74:	1085883a 	add	r2,r2,r2
 2009a78:	10c00504 	addi	r3,r2,20
 2009a7c:	21000504 	addi	r4,r4,20
 2009a80:	28cb883a 	add	r5,r5,r3
 2009a84:	2085883a 	add	r2,r4,r2
 2009a88:	10bfff04 	addi	r2,r2,-4
 2009a8c:	297fff04 	addi	r5,r5,-4
 2009a90:	11800017 	ldw	r6,0(r2)
 2009a94:	28c00017 	ldw	r3,0(r5)
 2009a98:	30c0031e 	bne	r6,r3,2009aa8 <__mcmp+0x48>
 2009a9c:	20bffa36 	bltu	r4,r2,2009a88 <__mcmp+0x28>
 2009aa0:	3805883a 	mov	r2,r7
 2009aa4:	f800283a 	ret
 2009aa8:	30c00336 	bltu	r6,r3,2009ab8 <__mcmp+0x58>
 2009aac:	01c00044 	movi	r7,1
 2009ab0:	3805883a 	mov	r2,r7
 2009ab4:	f800283a 	ret
 2009ab8:	01ffffc4 	movi	r7,-1
 2009abc:	003ff806 	br	2009aa0 <__mcmp+0x40>

02009ac0 <__ulp>:
 2009ac0:	295ffc2c 	andhi	r5,r5,32752
 2009ac4:	013f3034 	movhi	r4,64704
 2009ac8:	290b883a 	add	r5,r5,r4
 2009acc:	0145c83a 	sub	r2,zero,r5
 2009ad0:	1007d53a 	srai	r3,r2,20
 2009ad4:	000d883a 	mov	r6,zero
 2009ad8:	0140040e 	bge	zero,r5,2009aec <__ulp+0x2c>
 2009adc:	280f883a 	mov	r7,r5
 2009ae0:	3807883a 	mov	r3,r7
 2009ae4:	3005883a 	mov	r2,r6
 2009ae8:	f800283a 	ret
 2009aec:	008004c4 	movi	r2,19
 2009af0:	193ffb04 	addi	r4,r3,-20
 2009af4:	10c00c0e 	bge	r2,r3,2009b28 <__ulp+0x68>
 2009af8:	008007c4 	movi	r2,31
 2009afc:	1107c83a 	sub	r3,r2,r4
 2009b00:	00800784 	movi	r2,30
 2009b04:	01400044 	movi	r5,1
 2009b08:	11000216 	blt	r2,r4,2009b14 <__ulp+0x54>
 2009b0c:	00800044 	movi	r2,1
 2009b10:	10ca983a 	sll	r5,r2,r3
 2009b14:	000f883a 	mov	r7,zero
 2009b18:	280d883a 	mov	r6,r5
 2009b1c:	3807883a 	mov	r3,r7
 2009b20:	3005883a 	mov	r2,r6
 2009b24:	f800283a 	ret
 2009b28:	00800234 	movhi	r2,8
 2009b2c:	10cfd83a 	sra	r7,r2,r3
 2009b30:	000d883a 	mov	r6,zero
 2009b34:	3005883a 	mov	r2,r6
 2009b38:	3807883a 	mov	r3,r7
 2009b3c:	f800283a 	ret

02009b40 <__b2d>:
 2009b40:	20800417 	ldw	r2,16(r4)
 2009b44:	defff904 	addi	sp,sp,-28
 2009b48:	dd000415 	stw	r20,16(sp)
 2009b4c:	1085883a 	add	r2,r2,r2
 2009b50:	25000504 	addi	r20,r4,20
 2009b54:	1085883a 	add	r2,r2,r2
 2009b58:	dc000015 	stw	r16,0(sp)
 2009b5c:	a0a1883a 	add	r16,r20,r2
 2009b60:	dd400515 	stw	r21,20(sp)
 2009b64:	857fff17 	ldw	r21,-4(r16)
 2009b68:	dc400115 	stw	r17,4(sp)
 2009b6c:	dfc00615 	stw	ra,24(sp)
 2009b70:	a809883a 	mov	r4,r21
 2009b74:	2823883a 	mov	r17,r5
 2009b78:	dcc00315 	stw	r19,12(sp)
 2009b7c:	dc800215 	stw	r18,8(sp)
 2009b80:	200992c0 	call	200992c <__hi0bits>
 2009b84:	100b883a 	mov	r5,r2
 2009b88:	00800804 	movi	r2,32
 2009b8c:	1145c83a 	sub	r2,r2,r5
 2009b90:	88800015 	stw	r2,0(r17)
 2009b94:	00800284 	movi	r2,10
 2009b98:	80ffff04 	addi	r3,r16,-4
 2009b9c:	11401416 	blt	r2,r5,2009bf0 <__b2d+0xb0>
 2009ba0:	008002c4 	movi	r2,11
 2009ba4:	1149c83a 	sub	r4,r2,r5
 2009ba8:	a0c02736 	bltu	r20,r3,2009c48 <__b2d+0x108>
 2009bac:	000d883a 	mov	r6,zero
 2009bb0:	28800544 	addi	r2,r5,21
 2009bb4:	a906d83a 	srl	r3,r21,r4
 2009bb8:	a884983a 	sll	r2,r21,r2
 2009bbc:	1ccffc34 	orhi	r19,r3,16368
 2009bc0:	11a4b03a 	or	r18,r2,r6
 2009bc4:	9005883a 	mov	r2,r18
 2009bc8:	9807883a 	mov	r3,r19
 2009bcc:	dfc00617 	ldw	ra,24(sp)
 2009bd0:	dd400517 	ldw	r21,20(sp)
 2009bd4:	dd000417 	ldw	r20,16(sp)
 2009bd8:	dcc00317 	ldw	r19,12(sp)
 2009bdc:	dc800217 	ldw	r18,8(sp)
 2009be0:	dc400117 	ldw	r17,4(sp)
 2009be4:	dc000017 	ldw	r16,0(sp)
 2009be8:	dec00704 	addi	sp,sp,28
 2009bec:	f800283a 	ret
 2009bf0:	a0c00e36 	bltu	r20,r3,2009c2c <__b2d+0xec>
 2009bf4:	293ffd44 	addi	r4,r5,-11
 2009bf8:	000d883a 	mov	r6,zero
 2009bfc:	20000f26 	beq	r4,zero,2009c3c <__b2d+0xfc>
 2009c00:	00800804 	movi	r2,32
 2009c04:	110bc83a 	sub	r5,r2,r4
 2009c08:	a0c01236 	bltu	r20,r3,2009c54 <__b2d+0x114>
 2009c0c:	000f883a 	mov	r7,zero
 2009c10:	a904983a 	sll	r2,r21,r4
 2009c14:	3146d83a 	srl	r3,r6,r5
 2009c18:	3108983a 	sll	r4,r6,r4
 2009c1c:	108ffc34 	orhi	r2,r2,16368
 2009c20:	18a6b03a 	or	r19,r3,r2
 2009c24:	3924b03a 	or	r18,r7,r4
 2009c28:	003fe606 	br	2009bc4 <__b2d+0x84>
 2009c2c:	293ffd44 	addi	r4,r5,-11
 2009c30:	81bffe17 	ldw	r6,-8(r16)
 2009c34:	80fffe04 	addi	r3,r16,-8
 2009c38:	203ff11e 	bne	r4,zero,2009c00 <__b2d+0xc0>
 2009c3c:	accffc34 	orhi	r19,r21,16368
 2009c40:	3025883a 	mov	r18,r6
 2009c44:	003fdf06 	br	2009bc4 <__b2d+0x84>
 2009c48:	18bfff17 	ldw	r2,-4(r3)
 2009c4c:	110cd83a 	srl	r6,r2,r4
 2009c50:	003fd706 	br	2009bb0 <__b2d+0x70>
 2009c54:	18bfff17 	ldw	r2,-4(r3)
 2009c58:	114ed83a 	srl	r7,r2,r5
 2009c5c:	003fec06 	br	2009c10 <__b2d+0xd0>

02009c60 <__ratio>:
 2009c60:	defff904 	addi	sp,sp,-28
 2009c64:	dc400215 	stw	r17,8(sp)
 2009c68:	2823883a 	mov	r17,r5
 2009c6c:	d80b883a 	mov	r5,sp
 2009c70:	dfc00615 	stw	ra,24(sp)
 2009c74:	dd000515 	stw	r20,20(sp)
 2009c78:	dcc00415 	stw	r19,16(sp)
 2009c7c:	dc800315 	stw	r18,12(sp)
 2009c80:	2025883a 	mov	r18,r4
 2009c84:	2009b400 	call	2009b40 <__b2d>
 2009c88:	8809883a 	mov	r4,r17
 2009c8c:	d9400104 	addi	r5,sp,4
 2009c90:	1027883a 	mov	r19,r2
 2009c94:	1829883a 	mov	r20,r3
 2009c98:	2009b400 	call	2009b40 <__b2d>
 2009c9c:	89000417 	ldw	r4,16(r17)
 2009ca0:	91c00417 	ldw	r7,16(r18)
 2009ca4:	d9800117 	ldw	r6,4(sp)
 2009ca8:	180b883a 	mov	r5,r3
 2009cac:	390fc83a 	sub	r7,r7,r4
 2009cb0:	1009883a 	mov	r4,r2
 2009cb4:	d8800017 	ldw	r2,0(sp)
 2009cb8:	380e917a 	slli	r7,r7,5
 2009cbc:	2011883a 	mov	r8,r4
 2009cc0:	1185c83a 	sub	r2,r2,r6
 2009cc4:	11c5883a 	add	r2,r2,r7
 2009cc8:	1006953a 	slli	r3,r2,20
 2009ccc:	2813883a 	mov	r9,r5
 2009cd0:	00800d0e 	bge	zero,r2,2009d08 <__ratio+0xa8>
 2009cd4:	1d29883a 	add	r20,r3,r20
 2009cd8:	a00b883a 	mov	r5,r20
 2009cdc:	480f883a 	mov	r7,r9
 2009ce0:	9809883a 	mov	r4,r19
 2009ce4:	400d883a 	mov	r6,r8
 2009ce8:	200d5100 	call	200d510 <__divdf3>
 2009cec:	dfc00617 	ldw	ra,24(sp)
 2009cf0:	dd000517 	ldw	r20,20(sp)
 2009cf4:	dcc00417 	ldw	r19,16(sp)
 2009cf8:	dc800317 	ldw	r18,12(sp)
 2009cfc:	dc400217 	ldw	r17,8(sp)
 2009d00:	dec00704 	addi	sp,sp,28
 2009d04:	f800283a 	ret
 2009d08:	28d3c83a 	sub	r9,r5,r3
 2009d0c:	003ff206 	br	2009cd8 <__ratio+0x78>

02009d10 <_mprec_log10>:
 2009d10:	defffe04 	addi	sp,sp,-8
 2009d14:	008005c4 	movi	r2,23
 2009d18:	dc000015 	stw	r16,0(sp)
 2009d1c:	dfc00115 	stw	ra,4(sp)
 2009d20:	2021883a 	mov	r16,r4
 2009d24:	11000c16 	blt	r2,r4,2009d58 <_mprec_log10+0x48>
 2009d28:	200490fa 	slli	r2,r4,3
 2009d2c:	00c080b4 	movhi	r3,514
 2009d30:	18e95304 	addi	r3,r3,-23220
 2009d34:	10c5883a 	add	r2,r2,r3
 2009d38:	12400117 	ldw	r9,4(r2)
 2009d3c:	12000017 	ldw	r8,0(r2)
 2009d40:	4807883a 	mov	r3,r9
 2009d44:	4005883a 	mov	r2,r8
 2009d48:	dfc00117 	ldw	ra,4(sp)
 2009d4c:	dc000017 	ldw	r16,0(sp)
 2009d50:	dec00204 	addi	sp,sp,8
 2009d54:	f800283a 	ret
 2009d58:	0011883a 	mov	r8,zero
 2009d5c:	024ffc34 	movhi	r9,16368
 2009d60:	0005883a 	mov	r2,zero
 2009d64:	00d00934 	movhi	r3,16420
 2009d68:	480b883a 	mov	r5,r9
 2009d6c:	4009883a 	mov	r4,r8
 2009d70:	180f883a 	mov	r7,r3
 2009d74:	100d883a 	mov	r6,r2
 2009d78:	200d14c0 	call	200d14c <__muldf3>
 2009d7c:	843fffc4 	addi	r16,r16,-1
 2009d80:	1011883a 	mov	r8,r2
 2009d84:	1813883a 	mov	r9,r3
 2009d88:	803ff51e 	bne	r16,zero,2009d60 <_mprec_log10+0x50>
 2009d8c:	4005883a 	mov	r2,r8
 2009d90:	4807883a 	mov	r3,r9
 2009d94:	dfc00117 	ldw	ra,4(sp)
 2009d98:	dc000017 	ldw	r16,0(sp)
 2009d9c:	dec00204 	addi	sp,sp,8
 2009da0:	f800283a 	ret

02009da4 <__copybits>:
 2009da4:	297fffc4 	addi	r5,r5,-1
 2009da8:	30800417 	ldw	r2,16(r6)
 2009dac:	280bd17a 	srai	r5,r5,5
 2009db0:	31800504 	addi	r6,r6,20
 2009db4:	1085883a 	add	r2,r2,r2
 2009db8:	294b883a 	add	r5,r5,r5
 2009dbc:	294b883a 	add	r5,r5,r5
 2009dc0:	1085883a 	add	r2,r2,r2
 2009dc4:	290b883a 	add	r5,r5,r4
 2009dc8:	3087883a 	add	r3,r6,r2
 2009dcc:	29400104 	addi	r5,r5,4
 2009dd0:	30c0052e 	bgeu	r6,r3,2009de8 <__copybits+0x44>
 2009dd4:	30800017 	ldw	r2,0(r6)
 2009dd8:	31800104 	addi	r6,r6,4
 2009ddc:	20800015 	stw	r2,0(r4)
 2009de0:	21000104 	addi	r4,r4,4
 2009de4:	30fffb36 	bltu	r6,r3,2009dd4 <__copybits+0x30>
 2009de8:	2140032e 	bgeu	r4,r5,2009df8 <__copybits+0x54>
 2009dec:	20000015 	stw	zero,0(r4)
 2009df0:	21000104 	addi	r4,r4,4
 2009df4:	217ffd36 	bltu	r4,r5,2009dec <__copybits+0x48>
 2009df8:	f800283a 	ret

02009dfc <__any_on>:
 2009dfc:	20800417 	ldw	r2,16(r4)
 2009e00:	2807d17a 	srai	r3,r5,5
 2009e04:	21000504 	addi	r4,r4,20
 2009e08:	10c00d0e 	bge	r2,r3,2009e40 <__any_on+0x44>
 2009e0c:	1085883a 	add	r2,r2,r2
 2009e10:	1085883a 	add	r2,r2,r2
 2009e14:	208d883a 	add	r6,r4,r2
 2009e18:	2180182e 	bgeu	r4,r6,2009e7c <__any_on+0x80>
 2009e1c:	30bfff17 	ldw	r2,-4(r6)
 2009e20:	30ffff04 	addi	r3,r6,-4
 2009e24:	1000041e 	bne	r2,zero,2009e38 <__any_on+0x3c>
 2009e28:	20c0142e 	bgeu	r4,r3,2009e7c <__any_on+0x80>
 2009e2c:	18ffff04 	addi	r3,r3,-4
 2009e30:	18800017 	ldw	r2,0(r3)
 2009e34:	103ffc26 	beq	r2,zero,2009e28 <__any_on+0x2c>
 2009e38:	00800044 	movi	r2,1
 2009e3c:	f800283a 	ret
 2009e40:	18800a0e 	bge	r3,r2,2009e6c <__any_on+0x70>
 2009e44:	294007cc 	andi	r5,r5,31
 2009e48:	28000826 	beq	r5,zero,2009e6c <__any_on+0x70>
 2009e4c:	18c5883a 	add	r2,r3,r3
 2009e50:	1085883a 	add	r2,r2,r2
 2009e54:	208d883a 	add	r6,r4,r2
 2009e58:	30c00017 	ldw	r3,0(r6)
 2009e5c:	1944d83a 	srl	r2,r3,r5
 2009e60:	1144983a 	sll	r2,r2,r5
 2009e64:	18bff41e 	bne	r3,r2,2009e38 <__any_on+0x3c>
 2009e68:	003feb06 	br	2009e18 <__any_on+0x1c>
 2009e6c:	18c5883a 	add	r2,r3,r3
 2009e70:	1085883a 	add	r2,r2,r2
 2009e74:	208d883a 	add	r6,r4,r2
 2009e78:	003fe706 	br	2009e18 <__any_on+0x1c>
 2009e7c:	0005883a 	mov	r2,zero
 2009e80:	f800283a 	ret

02009e84 <_Balloc>:
 2009e84:	20c01317 	ldw	r3,76(r4)
 2009e88:	defffb04 	addi	sp,sp,-20
 2009e8c:	dcc00315 	stw	r19,12(sp)
 2009e90:	dc800215 	stw	r18,8(sp)
 2009e94:	dfc00415 	stw	ra,16(sp)
 2009e98:	2825883a 	mov	r18,r5
 2009e9c:	dc400115 	stw	r17,4(sp)
 2009ea0:	dc000015 	stw	r16,0(sp)
 2009ea4:	2027883a 	mov	r19,r4
 2009ea8:	01800404 	movi	r6,16
 2009eac:	01400104 	movi	r5,4
 2009eb0:	18001726 	beq	r3,zero,2009f10 <_Balloc+0x8c>
 2009eb4:	01400044 	movi	r5,1
 2009eb8:	9485883a 	add	r2,r18,r18
 2009ebc:	2ca2983a 	sll	r17,r5,r18
 2009ec0:	1085883a 	add	r2,r2,r2
 2009ec4:	10c7883a 	add	r3,r2,r3
 2009ec8:	1c000017 	ldw	r16,0(r3)
 2009ecc:	8c4d883a 	add	r6,r17,r17
 2009ed0:	318d883a 	add	r6,r6,r6
 2009ed4:	9809883a 	mov	r4,r19
 2009ed8:	31800504 	addi	r6,r6,20
 2009edc:	80001226 	beq	r16,zero,2009f28 <_Balloc+0xa4>
 2009ee0:	80800017 	ldw	r2,0(r16)
 2009ee4:	18800015 	stw	r2,0(r3)
 2009ee8:	80000415 	stw	zero,16(r16)
 2009eec:	80000315 	stw	zero,12(r16)
 2009ef0:	8005883a 	mov	r2,r16
 2009ef4:	dfc00417 	ldw	ra,16(sp)
 2009ef8:	dcc00317 	ldw	r19,12(sp)
 2009efc:	dc800217 	ldw	r18,8(sp)
 2009f00:	dc400117 	ldw	r17,4(sp)
 2009f04:	dc000017 	ldw	r16,0(sp)
 2009f08:	dec00504 	addi	sp,sp,20
 2009f0c:	f800283a 	ret
 2009f10:	200c0500 	call	200c050 <_calloc_r>
 2009f14:	1007883a 	mov	r3,r2
 2009f18:	0021883a 	mov	r16,zero
 2009f1c:	98801315 	stw	r2,76(r19)
 2009f20:	103fe41e 	bne	r2,zero,2009eb4 <_Balloc+0x30>
 2009f24:	003ff206 	br	2009ef0 <_Balloc+0x6c>
 2009f28:	200c0500 	call	200c050 <_calloc_r>
 2009f2c:	103ff026 	beq	r2,zero,2009ef0 <_Balloc+0x6c>
 2009f30:	1021883a 	mov	r16,r2
 2009f34:	14800115 	stw	r18,4(r2)
 2009f38:	14400215 	stw	r17,8(r2)
 2009f3c:	003fea06 	br	2009ee8 <_Balloc+0x64>

02009f40 <__d2b>:
 2009f40:	defff504 	addi	sp,sp,-44
 2009f44:	dcc00515 	stw	r19,20(sp)
 2009f48:	04c00044 	movi	r19,1
 2009f4c:	dc000215 	stw	r16,8(sp)
 2009f50:	2821883a 	mov	r16,r5
 2009f54:	980b883a 	mov	r5,r19
 2009f58:	ddc00915 	stw	r23,36(sp)
 2009f5c:	dd800815 	stw	r22,32(sp)
 2009f60:	dd400715 	stw	r21,28(sp)
 2009f64:	dd000615 	stw	r20,24(sp)
 2009f68:	dc800415 	stw	r18,16(sp)
 2009f6c:	dc400315 	stw	r17,12(sp)
 2009f70:	dfc00a15 	stw	ra,40(sp)
 2009f74:	3023883a 	mov	r17,r6
 2009f78:	382d883a 	mov	r22,r7
 2009f7c:	ddc00b17 	ldw	r23,44(sp)
 2009f80:	2009e840 	call	2009e84 <_Balloc>
 2009f84:	1025883a 	mov	r18,r2
 2009f88:	00a00034 	movhi	r2,32768
 2009f8c:	10bfffc4 	addi	r2,r2,-1
 2009f90:	8888703a 	and	r4,r17,r2
 2009f94:	202ad53a 	srli	r21,r4,20
 2009f98:	00800434 	movhi	r2,16
 2009f9c:	10bfffc4 	addi	r2,r2,-1
 2009fa0:	8886703a 	and	r3,r17,r2
 2009fa4:	a829003a 	cmpeq	r20,r21,zero
 2009fa8:	800b883a 	mov	r5,r16
 2009fac:	d8c00115 	stw	r3,4(sp)
 2009fb0:	94000504 	addi	r16,r18,20
 2009fb4:	a000021e 	bne	r20,zero,2009fc0 <__d2b+0x80>
 2009fb8:	18c00434 	orhi	r3,r3,16
 2009fbc:	d8c00115 	stw	r3,4(sp)
 2009fc0:	28002726 	beq	r5,zero,200a060 <__d2b+0x120>
 2009fc4:	d809883a 	mov	r4,sp
 2009fc8:	d9400015 	stw	r5,0(sp)
 2009fcc:	200999c0 	call	200999c <__lo0bits>
 2009fd0:	100d883a 	mov	r6,r2
 2009fd4:	10003526 	beq	r2,zero,200a0ac <__d2b+0x16c>
 2009fd8:	d8c00117 	ldw	r3,4(sp)
 2009fdc:	00800804 	movi	r2,32
 2009fe0:	1185c83a 	sub	r2,r2,r6
 2009fe4:	d9000017 	ldw	r4,0(sp)
 2009fe8:	1886983a 	sll	r3,r3,r2
 2009fec:	1906b03a 	or	r3,r3,r4
 2009ff0:	90c00515 	stw	r3,20(r18)
 2009ff4:	d8c00117 	ldw	r3,4(sp)
 2009ff8:	1986d83a 	srl	r3,r3,r6
 2009ffc:	d8c00115 	stw	r3,4(sp)
 200a000:	180b003a 	cmpeq	r5,r3,zero
 200a004:	00800084 	movi	r2,2
 200a008:	114bc83a 	sub	r5,r2,r5
 200a00c:	80c00115 	stw	r3,4(r16)
 200a010:	91400415 	stw	r5,16(r18)
 200a014:	a0001a1e 	bne	r20,zero,200a080 <__d2b+0x140>
 200a018:	3545883a 	add	r2,r6,r21
 200a01c:	10bef344 	addi	r2,r2,-1075
 200a020:	00c00d44 	movi	r3,53
 200a024:	b0800015 	stw	r2,0(r22)
 200a028:	1987c83a 	sub	r3,r3,r6
 200a02c:	b8c00015 	stw	r3,0(r23)
 200a030:	9005883a 	mov	r2,r18
 200a034:	dfc00a17 	ldw	ra,40(sp)
 200a038:	ddc00917 	ldw	r23,36(sp)
 200a03c:	dd800817 	ldw	r22,32(sp)
 200a040:	dd400717 	ldw	r21,28(sp)
 200a044:	dd000617 	ldw	r20,24(sp)
 200a048:	dcc00517 	ldw	r19,20(sp)
 200a04c:	dc800417 	ldw	r18,16(sp)
 200a050:	dc400317 	ldw	r17,12(sp)
 200a054:	dc000217 	ldw	r16,8(sp)
 200a058:	dec00b04 	addi	sp,sp,44
 200a05c:	f800283a 	ret
 200a060:	d9000104 	addi	r4,sp,4
 200a064:	200999c0 	call	200999c <__lo0bits>
 200a068:	11800804 	addi	r6,r2,32
 200a06c:	d8800117 	ldw	r2,4(sp)
 200a070:	94c00415 	stw	r19,16(r18)
 200a074:	980b883a 	mov	r5,r19
 200a078:	90800515 	stw	r2,20(r18)
 200a07c:	a03fe626 	beq	r20,zero,200a018 <__d2b+0xd8>
 200a080:	2945883a 	add	r2,r5,r5
 200a084:	1085883a 	add	r2,r2,r2
 200a088:	1405883a 	add	r2,r2,r16
 200a08c:	113fff17 	ldw	r4,-4(r2)
 200a090:	30fef384 	addi	r3,r6,-1074
 200a094:	2820917a 	slli	r16,r5,5
 200a098:	b0c00015 	stw	r3,0(r22)
 200a09c:	200992c0 	call	200992c <__hi0bits>
 200a0a0:	80a1c83a 	sub	r16,r16,r2
 200a0a4:	bc000015 	stw	r16,0(r23)
 200a0a8:	003fe106 	br	200a030 <__d2b+0xf0>
 200a0ac:	d8800017 	ldw	r2,0(sp)
 200a0b0:	90800515 	stw	r2,20(r18)
 200a0b4:	d8c00117 	ldw	r3,4(sp)
 200a0b8:	003fd106 	br	200a000 <__d2b+0xc0>

0200a0bc <__mdiff>:
 200a0bc:	defffb04 	addi	sp,sp,-20
 200a0c0:	dc000015 	stw	r16,0(sp)
 200a0c4:	2821883a 	mov	r16,r5
 200a0c8:	dc800215 	stw	r18,8(sp)
 200a0cc:	300b883a 	mov	r5,r6
 200a0d0:	2025883a 	mov	r18,r4
 200a0d4:	8009883a 	mov	r4,r16
 200a0d8:	dc400115 	stw	r17,4(sp)
 200a0dc:	dfc00415 	stw	ra,16(sp)
 200a0e0:	dcc00315 	stw	r19,12(sp)
 200a0e4:	3023883a 	mov	r17,r6
 200a0e8:	2009a600 	call	2009a60 <__mcmp>
 200a0ec:	10004226 	beq	r2,zero,200a1f8 <__mdiff+0x13c>
 200a0f0:	10005016 	blt	r2,zero,200a234 <__mdiff+0x178>
 200a0f4:	0027883a 	mov	r19,zero
 200a0f8:	81400117 	ldw	r5,4(r16)
 200a0fc:	9009883a 	mov	r4,r18
 200a100:	2009e840 	call	2009e84 <_Balloc>
 200a104:	1019883a 	mov	r12,r2
 200a108:	82800417 	ldw	r10,16(r16)
 200a10c:	88800417 	ldw	r2,16(r17)
 200a110:	81800504 	addi	r6,r16,20
 200a114:	5287883a 	add	r3,r10,r10
 200a118:	1085883a 	add	r2,r2,r2
 200a11c:	18c7883a 	add	r3,r3,r3
 200a120:	1085883a 	add	r2,r2,r2
 200a124:	8a000504 	addi	r8,r17,20
 200a128:	64c00315 	stw	r19,12(r12)
 200a12c:	30db883a 	add	r13,r6,r3
 200a130:	4097883a 	add	r11,r8,r2
 200a134:	61c00504 	addi	r7,r12,20
 200a138:	0013883a 	mov	r9,zero
 200a13c:	31000017 	ldw	r4,0(r6)
 200a140:	41400017 	ldw	r5,0(r8)
 200a144:	42000104 	addi	r8,r8,4
 200a148:	20bfffcc 	andi	r2,r4,65535
 200a14c:	28ffffcc 	andi	r3,r5,65535
 200a150:	10c5c83a 	sub	r2,r2,r3
 200a154:	1245883a 	add	r2,r2,r9
 200a158:	2008d43a 	srli	r4,r4,16
 200a15c:	280ad43a 	srli	r5,r5,16
 200a160:	1007d43a 	srai	r3,r2,16
 200a164:	3880000d 	sth	r2,0(r7)
 200a168:	2149c83a 	sub	r4,r4,r5
 200a16c:	20c9883a 	add	r4,r4,r3
 200a170:	3900008d 	sth	r4,2(r7)
 200a174:	31800104 	addi	r6,r6,4
 200a178:	39c00104 	addi	r7,r7,4
 200a17c:	2013d43a 	srai	r9,r4,16
 200a180:	42ffee36 	bltu	r8,r11,200a13c <__mdiff+0x80>
 200a184:	33400c2e 	bgeu	r6,r13,200a1b8 <__mdiff+0xfc>
 200a188:	30800017 	ldw	r2,0(r6)
 200a18c:	31800104 	addi	r6,r6,4
 200a190:	10ffffcc 	andi	r3,r2,65535
 200a194:	1a47883a 	add	r3,r3,r9
 200a198:	1004d43a 	srli	r2,r2,16
 200a19c:	1809d43a 	srai	r4,r3,16
 200a1a0:	38c0000d 	sth	r3,0(r7)
 200a1a4:	1105883a 	add	r2,r2,r4
 200a1a8:	3880008d 	sth	r2,2(r7)
 200a1ac:	1013d43a 	srai	r9,r2,16
 200a1b0:	39c00104 	addi	r7,r7,4
 200a1b4:	337ff436 	bltu	r6,r13,200a188 <__mdiff+0xcc>
 200a1b8:	38bfff17 	ldw	r2,-4(r7)
 200a1bc:	38ffff04 	addi	r3,r7,-4
 200a1c0:	1000041e 	bne	r2,zero,200a1d4 <__mdiff+0x118>
 200a1c4:	18ffff04 	addi	r3,r3,-4
 200a1c8:	18800017 	ldw	r2,0(r3)
 200a1cc:	52bfffc4 	addi	r10,r10,-1
 200a1d0:	103ffc26 	beq	r2,zero,200a1c4 <__mdiff+0x108>
 200a1d4:	6005883a 	mov	r2,r12
 200a1d8:	62800415 	stw	r10,16(r12)
 200a1dc:	dfc00417 	ldw	ra,16(sp)
 200a1e0:	dcc00317 	ldw	r19,12(sp)
 200a1e4:	dc800217 	ldw	r18,8(sp)
 200a1e8:	dc400117 	ldw	r17,4(sp)
 200a1ec:	dc000017 	ldw	r16,0(sp)
 200a1f0:	dec00504 	addi	sp,sp,20
 200a1f4:	f800283a 	ret
 200a1f8:	9009883a 	mov	r4,r18
 200a1fc:	000b883a 	mov	r5,zero
 200a200:	2009e840 	call	2009e84 <_Balloc>
 200a204:	1019883a 	mov	r12,r2
 200a208:	00800044 	movi	r2,1
 200a20c:	60800415 	stw	r2,16(r12)
 200a210:	6005883a 	mov	r2,r12
 200a214:	60000515 	stw	zero,20(r12)
 200a218:	dfc00417 	ldw	ra,16(sp)
 200a21c:	dcc00317 	ldw	r19,12(sp)
 200a220:	dc800217 	ldw	r18,8(sp)
 200a224:	dc400117 	ldw	r17,4(sp)
 200a228:	dc000017 	ldw	r16,0(sp)
 200a22c:	dec00504 	addi	sp,sp,20
 200a230:	f800283a 	ret
 200a234:	880d883a 	mov	r6,r17
 200a238:	04c00044 	movi	r19,1
 200a23c:	8023883a 	mov	r17,r16
 200a240:	3021883a 	mov	r16,r6
 200a244:	003fac06 	br	200a0f8 <__mdiff+0x3c>

0200a248 <__lshift>:
 200a248:	defff904 	addi	sp,sp,-28
 200a24c:	28800417 	ldw	r2,16(r5)
 200a250:	dc000015 	stw	r16,0(sp)
 200a254:	3021d17a 	srai	r16,r6,5
 200a258:	28c00217 	ldw	r3,8(r5)
 200a25c:	10800044 	addi	r2,r2,1
 200a260:	dc400115 	stw	r17,4(sp)
 200a264:	80a3883a 	add	r17,r16,r2
 200a268:	dd400515 	stw	r21,20(sp)
 200a26c:	dd000415 	stw	r20,16(sp)
 200a270:	dc800215 	stw	r18,8(sp)
 200a274:	dfc00615 	stw	ra,24(sp)
 200a278:	2825883a 	mov	r18,r5
 200a27c:	dcc00315 	stw	r19,12(sp)
 200a280:	3029883a 	mov	r20,r6
 200a284:	202b883a 	mov	r21,r4
 200a288:	29400117 	ldw	r5,4(r5)
 200a28c:	1c40030e 	bge	r3,r17,200a29c <__lshift+0x54>
 200a290:	18c7883a 	add	r3,r3,r3
 200a294:	29400044 	addi	r5,r5,1
 200a298:	1c7ffd16 	blt	r3,r17,200a290 <__lshift+0x48>
 200a29c:	a809883a 	mov	r4,r21
 200a2a0:	2009e840 	call	2009e84 <_Balloc>
 200a2a4:	1027883a 	mov	r19,r2
 200a2a8:	11400504 	addi	r5,r2,20
 200a2ac:	0400090e 	bge	zero,r16,200a2d4 <__lshift+0x8c>
 200a2b0:	2805883a 	mov	r2,r5
 200a2b4:	0007883a 	mov	r3,zero
 200a2b8:	18c00044 	addi	r3,r3,1
 200a2bc:	10000015 	stw	zero,0(r2)
 200a2c0:	10800104 	addi	r2,r2,4
 200a2c4:	80fffc1e 	bne	r16,r3,200a2b8 <__lshift+0x70>
 200a2c8:	8405883a 	add	r2,r16,r16
 200a2cc:	1085883a 	add	r2,r2,r2
 200a2d0:	288b883a 	add	r5,r5,r2
 200a2d4:	90800417 	ldw	r2,16(r18)
 200a2d8:	91000504 	addi	r4,r18,20
 200a2dc:	a18007cc 	andi	r6,r20,31
 200a2e0:	1085883a 	add	r2,r2,r2
 200a2e4:	1085883a 	add	r2,r2,r2
 200a2e8:	208f883a 	add	r7,r4,r2
 200a2ec:	30001e26 	beq	r6,zero,200a368 <__lshift+0x120>
 200a2f0:	00800804 	movi	r2,32
 200a2f4:	1191c83a 	sub	r8,r2,r6
 200a2f8:	0007883a 	mov	r3,zero
 200a2fc:	20800017 	ldw	r2,0(r4)
 200a300:	1184983a 	sll	r2,r2,r6
 200a304:	1884b03a 	or	r2,r3,r2
 200a308:	28800015 	stw	r2,0(r5)
 200a30c:	20c00017 	ldw	r3,0(r4)
 200a310:	21000104 	addi	r4,r4,4
 200a314:	29400104 	addi	r5,r5,4
 200a318:	1a06d83a 	srl	r3,r3,r8
 200a31c:	21fff736 	bltu	r4,r7,200a2fc <__lshift+0xb4>
 200a320:	28c00015 	stw	r3,0(r5)
 200a324:	18000126 	beq	r3,zero,200a32c <__lshift+0xe4>
 200a328:	8c400044 	addi	r17,r17,1
 200a32c:	88bfffc4 	addi	r2,r17,-1
 200a330:	98800415 	stw	r2,16(r19)
 200a334:	a809883a 	mov	r4,r21
 200a338:	900b883a 	mov	r5,r18
 200a33c:	20099040 	call	2009904 <_Bfree>
 200a340:	9805883a 	mov	r2,r19
 200a344:	dfc00617 	ldw	ra,24(sp)
 200a348:	dd400517 	ldw	r21,20(sp)
 200a34c:	dd000417 	ldw	r20,16(sp)
 200a350:	dcc00317 	ldw	r19,12(sp)
 200a354:	dc800217 	ldw	r18,8(sp)
 200a358:	dc400117 	ldw	r17,4(sp)
 200a35c:	dc000017 	ldw	r16,0(sp)
 200a360:	dec00704 	addi	sp,sp,28
 200a364:	f800283a 	ret
 200a368:	20800017 	ldw	r2,0(r4)
 200a36c:	21000104 	addi	r4,r4,4
 200a370:	28800015 	stw	r2,0(r5)
 200a374:	29400104 	addi	r5,r5,4
 200a378:	21ffec2e 	bgeu	r4,r7,200a32c <__lshift+0xe4>
 200a37c:	20800017 	ldw	r2,0(r4)
 200a380:	21000104 	addi	r4,r4,4
 200a384:	28800015 	stw	r2,0(r5)
 200a388:	29400104 	addi	r5,r5,4
 200a38c:	21fff636 	bltu	r4,r7,200a368 <__lshift+0x120>
 200a390:	003fe606 	br	200a32c <__lshift+0xe4>

0200a394 <__multiply>:
 200a394:	defff004 	addi	sp,sp,-64
 200a398:	dc800815 	stw	r18,32(sp)
 200a39c:	dc400715 	stw	r17,28(sp)
 200a3a0:	2c800417 	ldw	r18,16(r5)
 200a3a4:	34400417 	ldw	r17,16(r6)
 200a3a8:	dcc00915 	stw	r19,36(sp)
 200a3ac:	dc000615 	stw	r16,24(sp)
 200a3b0:	dfc00f15 	stw	ra,60(sp)
 200a3b4:	df000e15 	stw	fp,56(sp)
 200a3b8:	ddc00d15 	stw	r23,52(sp)
 200a3bc:	dd800c15 	stw	r22,48(sp)
 200a3c0:	dd400b15 	stw	r21,44(sp)
 200a3c4:	dd000a15 	stw	r20,40(sp)
 200a3c8:	2821883a 	mov	r16,r5
 200a3cc:	3027883a 	mov	r19,r6
 200a3d0:	9440040e 	bge	r18,r17,200a3e4 <__multiply+0x50>
 200a3d4:	8825883a 	mov	r18,r17
 200a3d8:	2c400417 	ldw	r17,16(r5)
 200a3dc:	2827883a 	mov	r19,r5
 200a3e0:	3021883a 	mov	r16,r6
 200a3e4:	80800217 	ldw	r2,8(r16)
 200a3e8:	9447883a 	add	r3,r18,r17
 200a3ec:	d8c00415 	stw	r3,16(sp)
 200a3f0:	81400117 	ldw	r5,4(r16)
 200a3f4:	10c0010e 	bge	r2,r3,200a3fc <__multiply+0x68>
 200a3f8:	29400044 	addi	r5,r5,1
 200a3fc:	2009e840 	call	2009e84 <_Balloc>
 200a400:	d8800515 	stw	r2,20(sp)
 200a404:	d9000417 	ldw	r4,16(sp)
 200a408:	d8c00517 	ldw	r3,20(sp)
 200a40c:	2105883a 	add	r2,r4,r4
 200a410:	1085883a 	add	r2,r2,r2
 200a414:	19000504 	addi	r4,r3,20
 200a418:	2085883a 	add	r2,r4,r2
 200a41c:	d8800315 	stw	r2,12(sp)
 200a420:	2080052e 	bgeu	r4,r2,200a438 <__multiply+0xa4>
 200a424:	2005883a 	mov	r2,r4
 200a428:	d8c00317 	ldw	r3,12(sp)
 200a42c:	10000015 	stw	zero,0(r2)
 200a430:	10800104 	addi	r2,r2,4
 200a434:	10fffc36 	bltu	r2,r3,200a428 <__multiply+0x94>
 200a438:	8c45883a 	add	r2,r17,r17
 200a43c:	9487883a 	add	r3,r18,r18
 200a440:	9dc00504 	addi	r23,r19,20
 200a444:	1085883a 	add	r2,r2,r2
 200a448:	84000504 	addi	r16,r16,20
 200a44c:	18c7883a 	add	r3,r3,r3
 200a450:	b885883a 	add	r2,r23,r2
 200a454:	dc000015 	stw	r16,0(sp)
 200a458:	d8800215 	stw	r2,8(sp)
 200a45c:	80f9883a 	add	fp,r16,r3
 200a460:	b880432e 	bgeu	r23,r2,200a570 <__multiply+0x1dc>
 200a464:	d9000115 	stw	r4,4(sp)
 200a468:	b9000017 	ldw	r4,0(r23)
 200a46c:	253fffcc 	andi	r20,r4,65535
 200a470:	a0001a26 	beq	r20,zero,200a4dc <__multiply+0x148>
 200a474:	dcc00017 	ldw	r19,0(sp)
 200a478:	dc800117 	ldw	r18,4(sp)
 200a47c:	002b883a 	mov	r21,zero
 200a480:	9c400017 	ldw	r17,0(r19)
 200a484:	94000017 	ldw	r16,0(r18)
 200a488:	a009883a 	mov	r4,r20
 200a48c:	897fffcc 	andi	r5,r17,65535
 200a490:	20032ac0 	call	20032ac <__mulsi3>
 200a494:	880ad43a 	srli	r5,r17,16
 200a498:	80ffffcc 	andi	r3,r16,65535
 200a49c:	a8c7883a 	add	r3,r21,r3
 200a4a0:	a009883a 	mov	r4,r20
 200a4a4:	10e3883a 	add	r17,r2,r3
 200a4a8:	8020d43a 	srli	r16,r16,16
 200a4ac:	20032ac0 	call	20032ac <__mulsi3>
 200a4b0:	8806d43a 	srli	r3,r17,16
 200a4b4:	1405883a 	add	r2,r2,r16
 200a4b8:	9cc00104 	addi	r19,r19,4
 200a4bc:	1887883a 	add	r3,r3,r2
 200a4c0:	90c0008d 	sth	r3,2(r18)
 200a4c4:	9440000d 	sth	r17,0(r18)
 200a4c8:	182ad43a 	srli	r21,r3,16
 200a4cc:	94800104 	addi	r18,r18,4
 200a4d0:	9f3feb36 	bltu	r19,fp,200a480 <__multiply+0xec>
 200a4d4:	95400015 	stw	r21,0(r18)
 200a4d8:	b9000017 	ldw	r4,0(r23)
 200a4dc:	202ad43a 	srli	r21,r4,16
 200a4e0:	a8001c26 	beq	r21,zero,200a554 <__multiply+0x1c0>
 200a4e4:	d9000117 	ldw	r4,4(sp)
 200a4e8:	dd000017 	ldw	r20,0(sp)
 200a4ec:	002d883a 	mov	r22,zero
 200a4f0:	24c00017 	ldw	r19,0(r4)
 200a4f4:	2025883a 	mov	r18,r4
 200a4f8:	9823883a 	mov	r17,r19
 200a4fc:	a4000017 	ldw	r16,0(r20)
 200a500:	a809883a 	mov	r4,r21
 200a504:	a5000104 	addi	r20,r20,4
 200a508:	817fffcc 	andi	r5,r16,65535
 200a50c:	20032ac0 	call	20032ac <__mulsi3>
 200a510:	8806d43a 	srli	r3,r17,16
 200a514:	800ad43a 	srli	r5,r16,16
 200a518:	94c0000d 	sth	r19,0(r18)
 200a51c:	b0c7883a 	add	r3,r22,r3
 200a520:	10e1883a 	add	r16,r2,r3
 200a524:	9400008d 	sth	r16,2(r18)
 200a528:	a809883a 	mov	r4,r21
 200a52c:	94800104 	addi	r18,r18,4
 200a530:	20032ac0 	call	20032ac <__mulsi3>
 200a534:	94400017 	ldw	r17,0(r18)
 200a538:	8020d43a 	srli	r16,r16,16
 200a53c:	88ffffcc 	andi	r3,r17,65535
 200a540:	10c5883a 	add	r2,r2,r3
 200a544:	80a7883a 	add	r19,r16,r2
 200a548:	982cd43a 	srli	r22,r19,16
 200a54c:	a73feb36 	bltu	r20,fp,200a4fc <__multiply+0x168>
 200a550:	94c00015 	stw	r19,0(r18)
 200a554:	d8800217 	ldw	r2,8(sp)
 200a558:	bdc00104 	addi	r23,r23,4
 200a55c:	b880042e 	bgeu	r23,r2,200a570 <__multiply+0x1dc>
 200a560:	d8c00117 	ldw	r3,4(sp)
 200a564:	18c00104 	addi	r3,r3,4
 200a568:	d8c00115 	stw	r3,4(sp)
 200a56c:	003fbe06 	br	200a468 <__multiply+0xd4>
 200a570:	d9000417 	ldw	r4,16(sp)
 200a574:	01000c0e 	bge	zero,r4,200a5a8 <__multiply+0x214>
 200a578:	d8c00317 	ldw	r3,12(sp)
 200a57c:	18bfff17 	ldw	r2,-4(r3)
 200a580:	18ffff04 	addi	r3,r3,-4
 200a584:	10000326 	beq	r2,zero,200a594 <__multiply+0x200>
 200a588:	00000706 	br	200a5a8 <__multiply+0x214>
 200a58c:	18800017 	ldw	r2,0(r3)
 200a590:	1000051e 	bne	r2,zero,200a5a8 <__multiply+0x214>
 200a594:	d9000417 	ldw	r4,16(sp)
 200a598:	18ffff04 	addi	r3,r3,-4
 200a59c:	213fffc4 	addi	r4,r4,-1
 200a5a0:	d9000415 	stw	r4,16(sp)
 200a5a4:	203ff91e 	bne	r4,zero,200a58c <__multiply+0x1f8>
 200a5a8:	d8800417 	ldw	r2,16(sp)
 200a5ac:	d8c00517 	ldw	r3,20(sp)
 200a5b0:	18800415 	stw	r2,16(r3)
 200a5b4:	1805883a 	mov	r2,r3
 200a5b8:	dfc00f17 	ldw	ra,60(sp)
 200a5bc:	df000e17 	ldw	fp,56(sp)
 200a5c0:	ddc00d17 	ldw	r23,52(sp)
 200a5c4:	dd800c17 	ldw	r22,48(sp)
 200a5c8:	dd400b17 	ldw	r21,44(sp)
 200a5cc:	dd000a17 	ldw	r20,40(sp)
 200a5d0:	dcc00917 	ldw	r19,36(sp)
 200a5d4:	dc800817 	ldw	r18,32(sp)
 200a5d8:	dc400717 	ldw	r17,28(sp)
 200a5dc:	dc000617 	ldw	r16,24(sp)
 200a5e0:	dec01004 	addi	sp,sp,64
 200a5e4:	f800283a 	ret

0200a5e8 <__i2b>:
 200a5e8:	defffd04 	addi	sp,sp,-12
 200a5ec:	dc000015 	stw	r16,0(sp)
 200a5f0:	04000044 	movi	r16,1
 200a5f4:	dc800115 	stw	r18,4(sp)
 200a5f8:	2825883a 	mov	r18,r5
 200a5fc:	800b883a 	mov	r5,r16
 200a600:	dfc00215 	stw	ra,8(sp)
 200a604:	2009e840 	call	2009e84 <_Balloc>
 200a608:	14000415 	stw	r16,16(r2)
 200a60c:	14800515 	stw	r18,20(r2)
 200a610:	dfc00217 	ldw	ra,8(sp)
 200a614:	dc800117 	ldw	r18,4(sp)
 200a618:	dc000017 	ldw	r16,0(sp)
 200a61c:	dec00304 	addi	sp,sp,12
 200a620:	f800283a 	ret

0200a624 <__multadd>:
 200a624:	defff604 	addi	sp,sp,-40
 200a628:	dd800615 	stw	r22,24(sp)
 200a62c:	2d800417 	ldw	r22,16(r5)
 200a630:	df000815 	stw	fp,32(sp)
 200a634:	ddc00715 	stw	r23,28(sp)
 200a638:	dd400515 	stw	r21,20(sp)
 200a63c:	dd000415 	stw	r20,16(sp)
 200a640:	dcc00315 	stw	r19,12(sp)
 200a644:	dc800215 	stw	r18,8(sp)
 200a648:	dfc00915 	stw	ra,36(sp)
 200a64c:	dc400115 	stw	r17,4(sp)
 200a650:	dc000015 	stw	r16,0(sp)
 200a654:	282f883a 	mov	r23,r5
 200a658:	2039883a 	mov	fp,r4
 200a65c:	302b883a 	mov	r21,r6
 200a660:	3829883a 	mov	r20,r7
 200a664:	2c800504 	addi	r18,r5,20
 200a668:	0027883a 	mov	r19,zero
 200a66c:	94400017 	ldw	r17,0(r18)
 200a670:	a80b883a 	mov	r5,r21
 200a674:	9cc00044 	addi	r19,r19,1
 200a678:	893fffcc 	andi	r4,r17,65535
 200a67c:	20032ac0 	call	20032ac <__mulsi3>
 200a680:	8808d43a 	srli	r4,r17,16
 200a684:	1521883a 	add	r16,r2,r20
 200a688:	a80b883a 	mov	r5,r21
 200a68c:	20032ac0 	call	20032ac <__mulsi3>
 200a690:	8008d43a 	srli	r4,r16,16
 200a694:	843fffcc 	andi	r16,r16,65535
 200a698:	1105883a 	add	r2,r2,r4
 200a69c:	1006943a 	slli	r3,r2,16
 200a6a0:	1028d43a 	srli	r20,r2,16
 200a6a4:	1c07883a 	add	r3,r3,r16
 200a6a8:	90c00015 	stw	r3,0(r18)
 200a6ac:	94800104 	addi	r18,r18,4
 200a6b0:	9dbfee16 	blt	r19,r22,200a66c <__multadd+0x48>
 200a6b4:	a0000826 	beq	r20,zero,200a6d8 <__multadd+0xb4>
 200a6b8:	b8800217 	ldw	r2,8(r23)
 200a6bc:	b080130e 	bge	r22,r2,200a70c <__multadd+0xe8>
 200a6c0:	b585883a 	add	r2,r22,r22
 200a6c4:	1085883a 	add	r2,r2,r2
 200a6c8:	15c5883a 	add	r2,r2,r23
 200a6cc:	b0c00044 	addi	r3,r22,1
 200a6d0:	15000515 	stw	r20,20(r2)
 200a6d4:	b8c00415 	stw	r3,16(r23)
 200a6d8:	b805883a 	mov	r2,r23
 200a6dc:	dfc00917 	ldw	ra,36(sp)
 200a6e0:	df000817 	ldw	fp,32(sp)
 200a6e4:	ddc00717 	ldw	r23,28(sp)
 200a6e8:	dd800617 	ldw	r22,24(sp)
 200a6ec:	dd400517 	ldw	r21,20(sp)
 200a6f0:	dd000417 	ldw	r20,16(sp)
 200a6f4:	dcc00317 	ldw	r19,12(sp)
 200a6f8:	dc800217 	ldw	r18,8(sp)
 200a6fc:	dc400117 	ldw	r17,4(sp)
 200a700:	dc000017 	ldw	r16,0(sp)
 200a704:	dec00a04 	addi	sp,sp,40
 200a708:	f800283a 	ret
 200a70c:	b9400117 	ldw	r5,4(r23)
 200a710:	e009883a 	mov	r4,fp
 200a714:	29400044 	addi	r5,r5,1
 200a718:	2009e840 	call	2009e84 <_Balloc>
 200a71c:	b9800417 	ldw	r6,16(r23)
 200a720:	b9400304 	addi	r5,r23,12
 200a724:	11000304 	addi	r4,r2,12
 200a728:	318d883a 	add	r6,r6,r6
 200a72c:	318d883a 	add	r6,r6,r6
 200a730:	31800204 	addi	r6,r6,8
 200a734:	1023883a 	mov	r17,r2
 200a738:	20040440 	call	2004044 <memcpy>
 200a73c:	b80b883a 	mov	r5,r23
 200a740:	e009883a 	mov	r4,fp
 200a744:	20099040 	call	2009904 <_Bfree>
 200a748:	882f883a 	mov	r23,r17
 200a74c:	003fdc06 	br	200a6c0 <__multadd+0x9c>

0200a750 <__pow5mult>:
 200a750:	defffa04 	addi	sp,sp,-24
 200a754:	308000cc 	andi	r2,r6,3
 200a758:	dd000415 	stw	r20,16(sp)
 200a75c:	dcc00315 	stw	r19,12(sp)
 200a760:	dc000015 	stw	r16,0(sp)
 200a764:	dfc00515 	stw	ra,20(sp)
 200a768:	dc800215 	stw	r18,8(sp)
 200a76c:	dc400115 	stw	r17,4(sp)
 200a770:	3021883a 	mov	r16,r6
 200a774:	2027883a 	mov	r19,r4
 200a778:	2829883a 	mov	r20,r5
 200a77c:	10002b1e 	bne	r2,zero,200a82c <__pow5mult+0xdc>
 200a780:	8025d0ba 	srai	r18,r16,2
 200a784:	90001b26 	beq	r18,zero,200a7f4 <__pow5mult+0xa4>
 200a788:	9c001217 	ldw	r16,72(r19)
 200a78c:	8000081e 	bne	r16,zero,200a7b0 <__pow5mult+0x60>
 200a790:	00003006 	br	200a854 <__pow5mult+0x104>
 200a794:	800b883a 	mov	r5,r16
 200a798:	800d883a 	mov	r6,r16
 200a79c:	9809883a 	mov	r4,r19
 200a7a0:	90001426 	beq	r18,zero,200a7f4 <__pow5mult+0xa4>
 200a7a4:	80800017 	ldw	r2,0(r16)
 200a7a8:	10001b26 	beq	r2,zero,200a818 <__pow5mult+0xc8>
 200a7ac:	1021883a 	mov	r16,r2
 200a7b0:	9080004c 	andi	r2,r18,1
 200a7b4:	1005003a 	cmpeq	r2,r2,zero
 200a7b8:	9025d07a 	srai	r18,r18,1
 200a7bc:	800d883a 	mov	r6,r16
 200a7c0:	9809883a 	mov	r4,r19
 200a7c4:	a00b883a 	mov	r5,r20
 200a7c8:	103ff21e 	bne	r2,zero,200a794 <__pow5mult+0x44>
 200a7cc:	200a3940 	call	200a394 <__multiply>
 200a7d0:	a00b883a 	mov	r5,r20
 200a7d4:	9809883a 	mov	r4,r19
 200a7d8:	1023883a 	mov	r17,r2
 200a7dc:	20099040 	call	2009904 <_Bfree>
 200a7e0:	8829883a 	mov	r20,r17
 200a7e4:	800b883a 	mov	r5,r16
 200a7e8:	800d883a 	mov	r6,r16
 200a7ec:	9809883a 	mov	r4,r19
 200a7f0:	903fec1e 	bne	r18,zero,200a7a4 <__pow5mult+0x54>
 200a7f4:	a005883a 	mov	r2,r20
 200a7f8:	dfc00517 	ldw	ra,20(sp)
 200a7fc:	dd000417 	ldw	r20,16(sp)
 200a800:	dcc00317 	ldw	r19,12(sp)
 200a804:	dc800217 	ldw	r18,8(sp)
 200a808:	dc400117 	ldw	r17,4(sp)
 200a80c:	dc000017 	ldw	r16,0(sp)
 200a810:	dec00604 	addi	sp,sp,24
 200a814:	f800283a 	ret
 200a818:	200a3940 	call	200a394 <__multiply>
 200a81c:	80800015 	stw	r2,0(r16)
 200a820:	1021883a 	mov	r16,r2
 200a824:	10000015 	stw	zero,0(r2)
 200a828:	003fe106 	br	200a7b0 <__pow5mult+0x60>
 200a82c:	1085883a 	add	r2,r2,r2
 200a830:	00c080b4 	movhi	r3,514
 200a834:	18e99904 	addi	r3,r3,-22940
 200a838:	1085883a 	add	r2,r2,r2
 200a83c:	10c5883a 	add	r2,r2,r3
 200a840:	11bfff17 	ldw	r6,-4(r2)
 200a844:	000f883a 	mov	r7,zero
 200a848:	200a6240 	call	200a624 <__multadd>
 200a84c:	1029883a 	mov	r20,r2
 200a850:	003fcb06 	br	200a780 <__pow5mult+0x30>
 200a854:	9809883a 	mov	r4,r19
 200a858:	01409c44 	movi	r5,625
 200a85c:	200a5e80 	call	200a5e8 <__i2b>
 200a860:	98801215 	stw	r2,72(r19)
 200a864:	1021883a 	mov	r16,r2
 200a868:	10000015 	stw	zero,0(r2)
 200a86c:	003fd006 	br	200a7b0 <__pow5mult+0x60>

0200a870 <__s2b>:
 200a870:	defff904 	addi	sp,sp,-28
 200a874:	dcc00315 	stw	r19,12(sp)
 200a878:	dc800215 	stw	r18,8(sp)
 200a87c:	2827883a 	mov	r19,r5
 200a880:	2025883a 	mov	r18,r4
 200a884:	01400244 	movi	r5,9
 200a888:	39000204 	addi	r4,r7,8
 200a88c:	dd000415 	stw	r20,16(sp)
 200a890:	dc400115 	stw	r17,4(sp)
 200a894:	dfc00615 	stw	ra,24(sp)
 200a898:	dd400515 	stw	r21,20(sp)
 200a89c:	dc000015 	stw	r16,0(sp)
 200a8a0:	3829883a 	mov	r20,r7
 200a8a4:	3023883a 	mov	r17,r6
 200a8a8:	20031dc0 	call	20031dc <__divsi3>
 200a8ac:	00c00044 	movi	r3,1
 200a8b0:	1880350e 	bge	r3,r2,200a988 <__s2b+0x118>
 200a8b4:	000b883a 	mov	r5,zero
 200a8b8:	18c7883a 	add	r3,r3,r3
 200a8bc:	29400044 	addi	r5,r5,1
 200a8c0:	18bffd16 	blt	r3,r2,200a8b8 <__s2b+0x48>
 200a8c4:	9009883a 	mov	r4,r18
 200a8c8:	2009e840 	call	2009e84 <_Balloc>
 200a8cc:	1011883a 	mov	r8,r2
 200a8d0:	d8800717 	ldw	r2,28(sp)
 200a8d4:	00c00044 	movi	r3,1
 200a8d8:	01800244 	movi	r6,9
 200a8dc:	40800515 	stw	r2,20(r8)
 200a8e0:	40c00415 	stw	r3,16(r8)
 200a8e4:	3440260e 	bge	r6,r17,200a980 <__s2b+0x110>
 200a8e8:	3021883a 	mov	r16,r6
 200a8ec:	99ab883a 	add	r21,r19,r6
 200a8f0:	9c05883a 	add	r2,r19,r16
 200a8f4:	11c00007 	ldb	r7,0(r2)
 200a8f8:	400b883a 	mov	r5,r8
 200a8fc:	9009883a 	mov	r4,r18
 200a900:	39fff404 	addi	r7,r7,-48
 200a904:	01800284 	movi	r6,10
 200a908:	200a6240 	call	200a624 <__multadd>
 200a90c:	84000044 	addi	r16,r16,1
 200a910:	1011883a 	mov	r8,r2
 200a914:	8c3ff61e 	bne	r17,r16,200a8f0 <__s2b+0x80>
 200a918:	ac45883a 	add	r2,r21,r17
 200a91c:	117ffe04 	addi	r5,r2,-8
 200a920:	880d883a 	mov	r6,r17
 200a924:	35000c0e 	bge	r6,r20,200a958 <__s2b+0xe8>
 200a928:	a185c83a 	sub	r2,r20,r6
 200a92c:	2821883a 	mov	r16,r5
 200a930:	28a3883a 	add	r17,r5,r2
 200a934:	81c00007 	ldb	r7,0(r16)
 200a938:	400b883a 	mov	r5,r8
 200a93c:	9009883a 	mov	r4,r18
 200a940:	39fff404 	addi	r7,r7,-48
 200a944:	01800284 	movi	r6,10
 200a948:	200a6240 	call	200a624 <__multadd>
 200a94c:	84000044 	addi	r16,r16,1
 200a950:	1011883a 	mov	r8,r2
 200a954:	847ff71e 	bne	r16,r17,200a934 <__s2b+0xc4>
 200a958:	4005883a 	mov	r2,r8
 200a95c:	dfc00617 	ldw	ra,24(sp)
 200a960:	dd400517 	ldw	r21,20(sp)
 200a964:	dd000417 	ldw	r20,16(sp)
 200a968:	dcc00317 	ldw	r19,12(sp)
 200a96c:	dc800217 	ldw	r18,8(sp)
 200a970:	dc400117 	ldw	r17,4(sp)
 200a974:	dc000017 	ldw	r16,0(sp)
 200a978:	dec00704 	addi	sp,sp,28
 200a97c:	f800283a 	ret
 200a980:	99400284 	addi	r5,r19,10
 200a984:	003fe706 	br	200a924 <__s2b+0xb4>
 200a988:	000b883a 	mov	r5,zero
 200a98c:	003fcd06 	br	200a8c4 <__s2b+0x54>

0200a990 <__isinfd>:
 200a990:	200d883a 	mov	r6,r4
 200a994:	0109c83a 	sub	r4,zero,r4
 200a998:	2188b03a 	or	r4,r4,r6
 200a99c:	2008d7fa 	srli	r4,r4,31
 200a9a0:	00a00034 	movhi	r2,32768
 200a9a4:	10bfffc4 	addi	r2,r2,-1
 200a9a8:	1144703a 	and	r2,r2,r5
 200a9ac:	2088b03a 	or	r4,r4,r2
 200a9b0:	009ffc34 	movhi	r2,32752
 200a9b4:	1105c83a 	sub	r2,r2,r4
 200a9b8:	0087c83a 	sub	r3,zero,r2
 200a9bc:	10c4b03a 	or	r2,r2,r3
 200a9c0:	1004d7fa 	srli	r2,r2,31
 200a9c4:	00c00044 	movi	r3,1
 200a9c8:	1885c83a 	sub	r2,r3,r2
 200a9cc:	f800283a 	ret

0200a9d0 <__isnand>:
 200a9d0:	200d883a 	mov	r6,r4
 200a9d4:	0109c83a 	sub	r4,zero,r4
 200a9d8:	2188b03a 	or	r4,r4,r6
 200a9dc:	2008d7fa 	srli	r4,r4,31
 200a9e0:	00a00034 	movhi	r2,32768
 200a9e4:	10bfffc4 	addi	r2,r2,-1
 200a9e8:	1144703a 	and	r2,r2,r5
 200a9ec:	2088b03a 	or	r4,r4,r2
 200a9f0:	009ffc34 	movhi	r2,32752
 200a9f4:	1105c83a 	sub	r2,r2,r4
 200a9f8:	1004d7fa 	srli	r2,r2,31
 200a9fc:	f800283a 	ret

0200aa00 <_raise_r>:
 200aa00:	defffd04 	addi	sp,sp,-12
 200aa04:	008007c4 	movi	r2,31
 200aa08:	dc400115 	stw	r17,4(sp)
 200aa0c:	dc000015 	stw	r16,0(sp)
 200aa10:	dfc00215 	stw	ra,8(sp)
 200aa14:	2821883a 	mov	r16,r5
 200aa18:	2023883a 	mov	r17,r4
 200aa1c:	11402736 	bltu	r2,r5,200aabc <_raise_r+0xbc>
 200aa20:	20c0b717 	ldw	r3,732(r4)
 200aa24:	18001326 	beq	r3,zero,200aa74 <_raise_r+0x74>
 200aa28:	2945883a 	add	r2,r5,r5
 200aa2c:	1085883a 	add	r2,r2,r2
 200aa30:	188b883a 	add	r5,r3,r2
 200aa34:	28c00017 	ldw	r3,0(r5)
 200aa38:	18000e26 	beq	r3,zero,200aa74 <_raise_r+0x74>
 200aa3c:	01000044 	movi	r4,1
 200aa40:	19000526 	beq	r3,r4,200aa58 <_raise_r+0x58>
 200aa44:	00bfffc4 	movi	r2,-1
 200aa48:	18801326 	beq	r3,r2,200aa98 <_raise_r+0x98>
 200aa4c:	28000015 	stw	zero,0(r5)
 200aa50:	8009883a 	mov	r4,r16
 200aa54:	183ee83a 	callr	r3
 200aa58:	0007883a 	mov	r3,zero
 200aa5c:	1805883a 	mov	r2,r3
 200aa60:	dfc00217 	ldw	ra,8(sp)
 200aa64:	dc400117 	ldw	r17,4(sp)
 200aa68:	dc000017 	ldw	r16,0(sp)
 200aa6c:	dec00304 	addi	sp,sp,12
 200aa70:	f800283a 	ret
 200aa74:	200acd80 	call	200acd8 <_getpid_r>
 200aa78:	100b883a 	mov	r5,r2
 200aa7c:	8809883a 	mov	r4,r17
 200aa80:	800d883a 	mov	r6,r16
 200aa84:	dfc00217 	ldw	ra,8(sp)
 200aa88:	dc400117 	ldw	r17,4(sp)
 200aa8c:	dc000017 	ldw	r16,0(sp)
 200aa90:	dec00304 	addi	sp,sp,12
 200aa94:	200acdc1 	jmpi	200acdc <_kill_r>
 200aa98:	2007883a 	mov	r3,r4
 200aa9c:	00800584 	movi	r2,22
 200aaa0:	88800015 	stw	r2,0(r17)
 200aaa4:	1805883a 	mov	r2,r3
 200aaa8:	dfc00217 	ldw	ra,8(sp)
 200aaac:	dc400117 	ldw	r17,4(sp)
 200aab0:	dc000017 	ldw	r16,0(sp)
 200aab4:	dec00304 	addi	sp,sp,12
 200aab8:	f800283a 	ret
 200aabc:	00800584 	movi	r2,22
 200aac0:	00ffffc4 	movi	r3,-1
 200aac4:	20800015 	stw	r2,0(r4)
 200aac8:	003fe406 	br	200aa5c <_raise_r+0x5c>

0200aacc <raise>:
 200aacc:	008080b4 	movhi	r2,514
 200aad0:	10b0e304 	addi	r2,r2,-15476
 200aad4:	200b883a 	mov	r5,r4
 200aad8:	11000017 	ldw	r4,0(r2)
 200aadc:	200aa001 	jmpi	200aa00 <_raise_r>

0200aae0 <_init_signal_r>:
 200aae0:	2080b717 	ldw	r2,732(r4)
 200aae4:	defffe04 	addi	sp,sp,-8
 200aae8:	dc000015 	stw	r16,0(sp)
 200aaec:	dfc00115 	stw	ra,4(sp)
 200aaf0:	2021883a 	mov	r16,r4
 200aaf4:	10000526 	beq	r2,zero,200ab0c <_init_signal_r+0x2c>
 200aaf8:	0005883a 	mov	r2,zero
 200aafc:	dfc00117 	ldw	ra,4(sp)
 200ab00:	dc000017 	ldw	r16,0(sp)
 200ab04:	dec00204 	addi	sp,sp,8
 200ab08:	f800283a 	ret
 200ab0c:	01402004 	movi	r5,128
 200ab10:	20039040 	call	2003904 <_malloc_r>
 200ab14:	1009883a 	mov	r4,r2
 200ab18:	8080b715 	stw	r2,732(r16)
 200ab1c:	10000726 	beq	r2,zero,200ab3c <_init_signal_r+0x5c>
 200ab20:	0007883a 	mov	r3,zero
 200ab24:	01402004 	movi	r5,128
 200ab28:	20c5883a 	add	r2,r4,r3
 200ab2c:	18c00104 	addi	r3,r3,4
 200ab30:	10000015 	stw	zero,0(r2)
 200ab34:	197ffc1e 	bne	r3,r5,200ab28 <_init_signal_r+0x48>
 200ab38:	003fef06 	br	200aaf8 <_init_signal_r+0x18>
 200ab3c:	00bfffc4 	movi	r2,-1
 200ab40:	003fee06 	br	200aafc <_init_signal_r+0x1c>

0200ab44 <_init_signal>:
 200ab44:	008080b4 	movhi	r2,514
 200ab48:	10b0e304 	addi	r2,r2,-15476
 200ab4c:	11000017 	ldw	r4,0(r2)
 200ab50:	200aae01 	jmpi	200aae0 <_init_signal_r>

0200ab54 <__sigtramp_r>:
 200ab54:	defffd04 	addi	sp,sp,-12
 200ab58:	008007c4 	movi	r2,31
 200ab5c:	dc000115 	stw	r16,4(sp)
 200ab60:	dfc00215 	stw	ra,8(sp)
 200ab64:	2021883a 	mov	r16,r4
 200ab68:	11401336 	bltu	r2,r5,200abb8 <__sigtramp_r+0x64>
 200ab6c:	20c0b717 	ldw	r3,732(r4)
 200ab70:	18001f26 	beq	r3,zero,200abf0 <__sigtramp_r+0x9c>
 200ab74:	2945883a 	add	r2,r5,r5
 200ab78:	1085883a 	add	r2,r2,r2
 200ab7c:	10c9883a 	add	r4,r2,r3
 200ab80:	20c00017 	ldw	r3,0(r4)
 200ab84:	18001626 	beq	r3,zero,200abe0 <__sigtramp_r+0x8c>
 200ab88:	00bfffc4 	movi	r2,-1
 200ab8c:	18801626 	beq	r3,r2,200abe8 <__sigtramp_r+0x94>
 200ab90:	00800044 	movi	r2,1
 200ab94:	18800d26 	beq	r3,r2,200abcc <__sigtramp_r+0x78>
 200ab98:	20000015 	stw	zero,0(r4)
 200ab9c:	2809883a 	mov	r4,r5
 200aba0:	183ee83a 	callr	r3
 200aba4:	0005883a 	mov	r2,zero
 200aba8:	dfc00217 	ldw	ra,8(sp)
 200abac:	dc000117 	ldw	r16,4(sp)
 200abb0:	dec00304 	addi	sp,sp,12
 200abb4:	f800283a 	ret
 200abb8:	00bfffc4 	movi	r2,-1
 200abbc:	dfc00217 	ldw	ra,8(sp)
 200abc0:	dc000117 	ldw	r16,4(sp)
 200abc4:	dec00304 	addi	sp,sp,12
 200abc8:	f800283a 	ret
 200abcc:	008000c4 	movi	r2,3
 200abd0:	dfc00217 	ldw	ra,8(sp)
 200abd4:	dc000117 	ldw	r16,4(sp)
 200abd8:	dec00304 	addi	sp,sp,12
 200abdc:	f800283a 	ret
 200abe0:	00800044 	movi	r2,1
 200abe4:	003ff006 	br	200aba8 <__sigtramp_r+0x54>
 200abe8:	00800084 	movi	r2,2
 200abec:	003fee06 	br	200aba8 <__sigtramp_r+0x54>
 200abf0:	d9400015 	stw	r5,0(sp)
 200abf4:	200aae00 	call	200aae0 <_init_signal_r>
 200abf8:	d9400017 	ldw	r5,0(sp)
 200abfc:	103fee1e 	bne	r2,zero,200abb8 <__sigtramp_r+0x64>
 200ac00:	80c0b717 	ldw	r3,732(r16)
 200ac04:	003fdb06 	br	200ab74 <__sigtramp_r+0x20>

0200ac08 <__sigtramp>:
 200ac08:	008080b4 	movhi	r2,514
 200ac0c:	10b0e304 	addi	r2,r2,-15476
 200ac10:	200b883a 	mov	r5,r4
 200ac14:	11000017 	ldw	r4,0(r2)
 200ac18:	200ab541 	jmpi	200ab54 <__sigtramp_r>

0200ac1c <_signal_r>:
 200ac1c:	defffc04 	addi	sp,sp,-16
 200ac20:	008007c4 	movi	r2,31
 200ac24:	dc800215 	stw	r18,8(sp)
 200ac28:	dc400115 	stw	r17,4(sp)
 200ac2c:	dc000015 	stw	r16,0(sp)
 200ac30:	dfc00315 	stw	ra,12(sp)
 200ac34:	2823883a 	mov	r17,r5
 200ac38:	00ffffc4 	movi	r3,-1
 200ac3c:	3025883a 	mov	r18,r6
 200ac40:	2021883a 	mov	r16,r4
 200ac44:	1140092e 	bgeu	r2,r5,200ac6c <_signal_r+0x50>
 200ac48:	00800584 	movi	r2,22
 200ac4c:	20800015 	stw	r2,0(r4)
 200ac50:	1805883a 	mov	r2,r3
 200ac54:	dfc00317 	ldw	ra,12(sp)
 200ac58:	dc800217 	ldw	r18,8(sp)
 200ac5c:	dc400117 	ldw	r17,4(sp)
 200ac60:	dc000017 	ldw	r16,0(sp)
 200ac64:	dec00404 	addi	sp,sp,16
 200ac68:	f800283a 	ret
 200ac6c:	2140b717 	ldw	r5,732(r4)
 200ac70:	28000c26 	beq	r5,zero,200aca4 <_signal_r+0x88>
 200ac74:	8c45883a 	add	r2,r17,r17
 200ac78:	1085883a 	add	r2,r2,r2
 200ac7c:	1145883a 	add	r2,r2,r5
 200ac80:	10c00017 	ldw	r3,0(r2)
 200ac84:	14800015 	stw	r18,0(r2)
 200ac88:	1805883a 	mov	r2,r3
 200ac8c:	dfc00317 	ldw	ra,12(sp)
 200ac90:	dc800217 	ldw	r18,8(sp)
 200ac94:	dc400117 	ldw	r17,4(sp)
 200ac98:	dc000017 	ldw	r16,0(sp)
 200ac9c:	dec00404 	addi	sp,sp,16
 200aca0:	f800283a 	ret
 200aca4:	200aae00 	call	200aae0 <_init_signal_r>
 200aca8:	1000021e 	bne	r2,zero,200acb4 <_signal_r+0x98>
 200acac:	8140b717 	ldw	r5,732(r16)
 200acb0:	003ff006 	br	200ac74 <_signal_r+0x58>
 200acb4:	00ffffc4 	movi	r3,-1
 200acb8:	003fe506 	br	200ac50 <_signal_r+0x34>

0200acbc <signal>:
 200acbc:	018080b4 	movhi	r6,514
 200acc0:	31b0e304 	addi	r6,r6,-15476
 200acc4:	2007883a 	mov	r3,r4
 200acc8:	31000017 	ldw	r4,0(r6)
 200accc:	280d883a 	mov	r6,r5
 200acd0:	180b883a 	mov	r5,r3
 200acd4:	200ac1c1 	jmpi	200ac1c <_signal_r>

0200acd8 <_getpid_r>:
 200acd8:	200e39c1 	jmpi	200e39c <getpid>

0200acdc <_kill_r>:
 200acdc:	defffd04 	addi	sp,sp,-12
 200ace0:	dc000015 	stw	r16,0(sp)
 200ace4:	040080b4 	movhi	r16,514
 200ace8:	8437f704 	addi	r16,r16,-8228
 200acec:	dc400115 	stw	r17,4(sp)
 200acf0:	80000015 	stw	zero,0(r16)
 200acf4:	2023883a 	mov	r17,r4
 200acf8:	2809883a 	mov	r4,r5
 200acfc:	300b883a 	mov	r5,r6
 200ad00:	dfc00215 	stw	ra,8(sp)
 200ad04:	200e6a00 	call	200e6a0 <kill>
 200ad08:	1007883a 	mov	r3,r2
 200ad0c:	00bfffc4 	movi	r2,-1
 200ad10:	18800626 	beq	r3,r2,200ad2c <_kill_r+0x50>
 200ad14:	1805883a 	mov	r2,r3
 200ad18:	dfc00217 	ldw	ra,8(sp)
 200ad1c:	dc400117 	ldw	r17,4(sp)
 200ad20:	dc000017 	ldw	r16,0(sp)
 200ad24:	dec00304 	addi	sp,sp,12
 200ad28:	f800283a 	ret
 200ad2c:	80800017 	ldw	r2,0(r16)
 200ad30:	103ff826 	beq	r2,zero,200ad14 <_kill_r+0x38>
 200ad34:	88800015 	stw	r2,0(r17)
 200ad38:	1805883a 	mov	r2,r3
 200ad3c:	dfc00217 	ldw	ra,8(sp)
 200ad40:	dc400117 	ldw	r17,4(sp)
 200ad44:	dc000017 	ldw	r16,0(sp)
 200ad48:	dec00304 	addi	sp,sp,12
 200ad4c:	f800283a 	ret

0200ad50 <__sclose>:
 200ad50:	2940038f 	ldh	r5,14(r5)
 200ad54:	200c1181 	jmpi	200c118 <_close_r>

0200ad58 <__sseek>:
 200ad58:	defffe04 	addi	sp,sp,-8
 200ad5c:	dc000015 	stw	r16,0(sp)
 200ad60:	2821883a 	mov	r16,r5
 200ad64:	2940038f 	ldh	r5,14(r5)
 200ad68:	dfc00115 	stw	ra,4(sp)
 200ad6c:	200c3900 	call	200c390 <_lseek_r>
 200ad70:	1007883a 	mov	r3,r2
 200ad74:	00bfffc4 	movi	r2,-1
 200ad78:	18800926 	beq	r3,r2,200ada0 <__sseek+0x48>
 200ad7c:	8080030b 	ldhu	r2,12(r16)
 200ad80:	80c01415 	stw	r3,80(r16)
 200ad84:	10840014 	ori	r2,r2,4096
 200ad88:	8080030d 	sth	r2,12(r16)
 200ad8c:	1805883a 	mov	r2,r3
 200ad90:	dfc00117 	ldw	ra,4(sp)
 200ad94:	dc000017 	ldw	r16,0(sp)
 200ad98:	dec00204 	addi	sp,sp,8
 200ad9c:	f800283a 	ret
 200ada0:	8080030b 	ldhu	r2,12(r16)
 200ada4:	10bbffcc 	andi	r2,r2,61439
 200ada8:	8080030d 	sth	r2,12(r16)
 200adac:	1805883a 	mov	r2,r3
 200adb0:	dfc00117 	ldw	ra,4(sp)
 200adb4:	dc000017 	ldw	r16,0(sp)
 200adb8:	dec00204 	addi	sp,sp,8
 200adbc:	f800283a 	ret

0200adc0 <__swrite>:
 200adc0:	2880030b 	ldhu	r2,12(r5)
 200adc4:	defffb04 	addi	sp,sp,-20
 200adc8:	dcc00315 	stw	r19,12(sp)
 200adcc:	1080400c 	andi	r2,r2,256
 200add0:	dc800215 	stw	r18,8(sp)
 200add4:	dc400115 	stw	r17,4(sp)
 200add8:	dc000015 	stw	r16,0(sp)
 200addc:	3027883a 	mov	r19,r6
 200ade0:	3825883a 	mov	r18,r7
 200ade4:	dfc00415 	stw	ra,16(sp)
 200ade8:	2821883a 	mov	r16,r5
 200adec:	000d883a 	mov	r6,zero
 200adf0:	01c00084 	movi	r7,2
 200adf4:	2023883a 	mov	r17,r4
 200adf8:	10000226 	beq	r2,zero,200ae04 <__swrite+0x44>
 200adfc:	2940038f 	ldh	r5,14(r5)
 200ae00:	200c3900 	call	200c390 <_lseek_r>
 200ae04:	8080030b 	ldhu	r2,12(r16)
 200ae08:	8140038f 	ldh	r5,14(r16)
 200ae0c:	8809883a 	mov	r4,r17
 200ae10:	10bbffcc 	andi	r2,r2,61439
 200ae14:	980d883a 	mov	r6,r19
 200ae18:	900f883a 	mov	r7,r18
 200ae1c:	8080030d 	sth	r2,12(r16)
 200ae20:	dfc00417 	ldw	ra,16(sp)
 200ae24:	dcc00317 	ldw	r19,12(sp)
 200ae28:	dc800217 	ldw	r18,8(sp)
 200ae2c:	dc400117 	ldw	r17,4(sp)
 200ae30:	dc000017 	ldw	r16,0(sp)
 200ae34:	dec00504 	addi	sp,sp,20
 200ae38:	200bfd81 	jmpi	200bfd8 <_write_r>

0200ae3c <__sread>:
 200ae3c:	defffe04 	addi	sp,sp,-8
 200ae40:	dc000015 	stw	r16,0(sp)
 200ae44:	2821883a 	mov	r16,r5
 200ae48:	2940038f 	ldh	r5,14(r5)
 200ae4c:	dfc00115 	stw	ra,4(sp)
 200ae50:	200c4080 	call	200c408 <_read_r>
 200ae54:	1007883a 	mov	r3,r2
 200ae58:	10000816 	blt	r2,zero,200ae7c <__sread+0x40>
 200ae5c:	80801417 	ldw	r2,80(r16)
 200ae60:	10c5883a 	add	r2,r2,r3
 200ae64:	80801415 	stw	r2,80(r16)
 200ae68:	1805883a 	mov	r2,r3
 200ae6c:	dfc00117 	ldw	ra,4(sp)
 200ae70:	dc000017 	ldw	r16,0(sp)
 200ae74:	dec00204 	addi	sp,sp,8
 200ae78:	f800283a 	ret
 200ae7c:	8080030b 	ldhu	r2,12(r16)
 200ae80:	10bbffcc 	andi	r2,r2,61439
 200ae84:	8080030d 	sth	r2,12(r16)
 200ae88:	1805883a 	mov	r2,r3
 200ae8c:	dfc00117 	ldw	ra,4(sp)
 200ae90:	dc000017 	ldw	r16,0(sp)
 200ae94:	dec00204 	addi	sp,sp,8
 200ae98:	f800283a 	ret

0200ae9c <__sprint_r>:
 200ae9c:	30800217 	ldw	r2,8(r6)
 200aea0:	defffe04 	addi	sp,sp,-8
 200aea4:	dc000015 	stw	r16,0(sp)
 200aea8:	dfc00115 	stw	ra,4(sp)
 200aeac:	3021883a 	mov	r16,r6
 200aeb0:	0007883a 	mov	r3,zero
 200aeb4:	1000061e 	bne	r2,zero,200aed0 <__sprint_r+0x34>
 200aeb8:	1805883a 	mov	r2,r3
 200aebc:	30000115 	stw	zero,4(r6)
 200aec0:	dfc00117 	ldw	ra,4(sp)
 200aec4:	dc000017 	ldw	r16,0(sp)
 200aec8:	dec00204 	addi	sp,sp,8
 200aecc:	f800283a 	ret
 200aed0:	2008fac0 	call	2008fac <__sfvwrite_r>
 200aed4:	1007883a 	mov	r3,r2
 200aed8:	1805883a 	mov	r2,r3
 200aedc:	80000115 	stw	zero,4(r16)
 200aee0:	80000215 	stw	zero,8(r16)
 200aee4:	dfc00117 	ldw	ra,4(sp)
 200aee8:	dc000017 	ldw	r16,0(sp)
 200aeec:	dec00204 	addi	sp,sp,8
 200aef0:	f800283a 	ret

0200aef4 <___vfiprintf_internal_r>:
 200aef4:	defeb604 	addi	sp,sp,-1320
 200aef8:	dd814615 	stw	r22,1304(sp)
 200aefc:	dd414515 	stw	r21,1300(sp)
 200af00:	dc014015 	stw	r16,1280(sp)
 200af04:	dfc14915 	stw	ra,1316(sp)
 200af08:	df014815 	stw	fp,1312(sp)
 200af0c:	ddc14715 	stw	r23,1308(sp)
 200af10:	dd014415 	stw	r20,1296(sp)
 200af14:	dcc14315 	stw	r19,1292(sp)
 200af18:	dc814215 	stw	r18,1288(sp)
 200af1c:	dc414115 	stw	r17,1284(sp)
 200af20:	202d883a 	mov	r22,r4
 200af24:	282b883a 	mov	r21,r5
 200af28:	3021883a 	mov	r16,r6
 200af2c:	20000226 	beq	r4,zero,200af38 <___vfiprintf_internal_r+0x44>
 200af30:	20800e17 	ldw	r2,56(r4)
 200af34:	1001bc26 	beq	r2,zero,200b628 <___vfiprintf_internal_r+0x734>
 200af38:	a880030b 	ldhu	r2,12(r21)
 200af3c:	1080020c 	andi	r2,r2,8
 200af40:	1001cb26 	beq	r2,zero,200b670 <___vfiprintf_internal_r+0x77c>
 200af44:	a8800417 	ldw	r2,16(r21)
 200af48:	1001c926 	beq	r2,zero,200b670 <___vfiprintf_internal_r+0x77c>
 200af4c:	aa00030b 	ldhu	r8,12(r21)
 200af50:	00800284 	movi	r2,10
 200af54:	40c0068c 	andi	r3,r8,26
 200af58:	18802f1e 	bne	r3,r2,200b018 <___vfiprintf_internal_r+0x124>
 200af5c:	a880038f 	ldh	r2,14(r21)
 200af60:	10002d16 	blt	r2,zero,200b018 <___vfiprintf_internal_r+0x124>
 200af64:	aa40038b 	ldhu	r9,14(r21)
 200af68:	aa800717 	ldw	r10,28(r21)
 200af6c:	aac00917 	ldw	r11,36(r21)
 200af70:	dc401e04 	addi	r17,sp,120
 200af74:	d8803504 	addi	r2,sp,212
 200af78:	00c10004 	movi	r3,1024
 200af7c:	423fff4c 	andi	r8,r8,65533
 200af80:	800d883a 	mov	r6,r16
 200af84:	b009883a 	mov	r4,r22
 200af88:	880b883a 	mov	r5,r17
 200af8c:	da00210d 	sth	r8,132(sp)
 200af90:	da40218d 	sth	r9,134(sp)
 200af94:	da802515 	stw	r10,148(sp)
 200af98:	dac02715 	stw	r11,156(sp)
 200af9c:	d8802215 	stw	r2,136(sp)
 200afa0:	d8c02315 	stw	r3,140(sp)
 200afa4:	d8801e15 	stw	r2,120(sp)
 200afa8:	d8c02015 	stw	r3,128(sp)
 200afac:	d8002415 	stw	zero,144(sp)
 200afb0:	200aef40 	call	200aef4 <___vfiprintf_internal_r>
 200afb4:	d8813a15 	stw	r2,1256(sp)
 200afb8:	10000416 	blt	r2,zero,200afcc <___vfiprintf_internal_r+0xd8>
 200afbc:	b009883a 	mov	r4,r22
 200afc0:	880b883a 	mov	r5,r17
 200afc4:	20086480 	call	2008648 <_fflush_r>
 200afc8:	1001b01e 	bne	r2,zero,200b68c <___vfiprintf_internal_r+0x798>
 200afcc:	d880210b 	ldhu	r2,132(sp)
 200afd0:	1080100c 	andi	r2,r2,64
 200afd4:	10000326 	beq	r2,zero,200afe4 <___vfiprintf_internal_r+0xf0>
 200afd8:	a880030b 	ldhu	r2,12(r21)
 200afdc:	10801014 	ori	r2,r2,64
 200afe0:	a880030d 	sth	r2,12(r21)
 200afe4:	d8813a17 	ldw	r2,1256(sp)
 200afe8:	dfc14917 	ldw	ra,1316(sp)
 200afec:	df014817 	ldw	fp,1312(sp)
 200aff0:	ddc14717 	ldw	r23,1308(sp)
 200aff4:	dd814617 	ldw	r22,1304(sp)
 200aff8:	dd414517 	ldw	r21,1300(sp)
 200affc:	dd014417 	ldw	r20,1296(sp)
 200b000:	dcc14317 	ldw	r19,1292(sp)
 200b004:	dc814217 	ldw	r18,1288(sp)
 200b008:	dc414117 	ldw	r17,1284(sp)
 200b00c:	dc014017 	ldw	r16,1280(sp)
 200b010:	dec14a04 	addi	sp,sp,1320
 200b014:	f800283a 	ret
 200b018:	d8c00e04 	addi	r3,sp,56
 200b01c:	8029883a 	mov	r20,r16
 200b020:	d8c00115 	stw	r3,4(sp)
 200b024:	d8000315 	stw	zero,12(sp)
 200b028:	d8000215 	stw	zero,8(sp)
 200b02c:	1825883a 	mov	r18,r3
 200b030:	d8013a15 	stw	zero,1256(sp)
 200b034:	d8013615 	stw	zero,1240(sp)
 200b038:	a0800007 	ldb	r2,0(r20)
 200b03c:	10001926 	beq	r2,zero,200b0a4 <___vfiprintf_internal_r+0x1b0>
 200b040:	00c00944 	movi	r3,37
 200b044:	10c01726 	beq	r2,r3,200b0a4 <___vfiprintf_internal_r+0x1b0>
 200b048:	a021883a 	mov	r16,r20
 200b04c:	00000106 	br	200b054 <___vfiprintf_internal_r+0x160>
 200b050:	10c00326 	beq	r2,r3,200b060 <___vfiprintf_internal_r+0x16c>
 200b054:	84000044 	addi	r16,r16,1
 200b058:	80800007 	ldb	r2,0(r16)
 200b05c:	103ffc1e 	bne	r2,zero,200b050 <___vfiprintf_internal_r+0x15c>
 200b060:	8523c83a 	sub	r17,r16,r20
 200b064:	88000e26 	beq	r17,zero,200b0a0 <___vfiprintf_internal_r+0x1ac>
 200b068:	d9400317 	ldw	r5,12(sp)
 200b06c:	d9000217 	ldw	r4,8(sp)
 200b070:	008001c4 	movi	r2,7
 200b074:	2c4b883a 	add	r5,r5,r17
 200b078:	21000044 	addi	r4,r4,1
 200b07c:	95000015 	stw	r20,0(r18)
 200b080:	d9400315 	stw	r5,12(sp)
 200b084:	94400115 	stw	r17,4(r18)
 200b088:	d9000215 	stw	r4,8(sp)
 200b08c:	1101e816 	blt	r2,r4,200b830 <___vfiprintf_internal_r+0x93c>
 200b090:	94800204 	addi	r18,r18,8
 200b094:	d9013a17 	ldw	r4,1256(sp)
 200b098:	2449883a 	add	r4,r4,r17
 200b09c:	d9013a15 	stw	r4,1256(sp)
 200b0a0:	8029883a 	mov	r20,r16
 200b0a4:	a0800007 	ldb	r2,0(r20)
 200b0a8:	10012e26 	beq	r2,zero,200b564 <___vfiprintf_internal_r+0x670>
 200b0ac:	a5000044 	addi	r20,r20,1
 200b0b0:	d8000005 	stb	zero,0(sp)
 200b0b4:	a0c00007 	ldb	r3,0(r20)
 200b0b8:	05ffffc4 	movi	r23,-1
 200b0bc:	d8013915 	stw	zero,1252(sp)
 200b0c0:	d8013b15 	stw	zero,1260(sp)
 200b0c4:	1827883a 	mov	r19,r3
 200b0c8:	a5000044 	addi	r20,r20,1
 200b0cc:	98fff804 	addi	r3,r19,-32
 200b0d0:	00801604 	movi	r2,88
 200b0d4:	10c06036 	bltu	r2,r3,200b258 <___vfiprintf_internal_r+0x364>
 200b0d8:	18c5883a 	add	r2,r3,r3
 200b0dc:	1085883a 	add	r2,r2,r2
 200b0e0:	00c08074 	movhi	r3,513
 200b0e4:	18ec3d04 	addi	r3,r3,-20236
 200b0e8:	10c5883a 	add	r2,r2,r3
 200b0ec:	11000017 	ldw	r4,0(r2)
 200b0f0:	2000683a 	jmp	r4
 200b0f4:	0200b95c 	xori	r8,zero,741
 200b0f8:	0200b258 	cmpnei	r8,zero,713
 200b0fc:	0200b258 	cmpnei	r8,zero,713
 200b100:	0200ba20 	cmpeqi	r8,zero,744
 200b104:	0200b258 	cmpnei	r8,zero,713
 200b108:	0200b258 	cmpnei	r8,zero,713
 200b10c:	0200b258 	cmpnei	r8,zero,713
 200b110:	0200b258 	cmpnei	r8,zero,713
 200b114:	0200b258 	cmpnei	r8,zero,713
 200b118:	0200b258 	cmpnei	r8,zero,713
 200b11c:	0200b8e4 	muli	r8,zero,739
 200b120:	0200ba34 	movhi	r8,744
 200b124:	0200b258 	cmpnei	r8,zero,713
 200b128:	0200b8fc 	xorhi	r8,zero,739
 200b12c:	0200b9c0 	call	200b9c <OSCtxSw_SWITCH_PC+0x200b5c>
 200b130:	0200b258 	cmpnei	r8,zero,713
 200b134:	0200b9ac 	andhi	r8,zero,742
 200b138:	0200b974 	movhi	r8,741
 200b13c:	0200b974 	movhi	r8,741
 200b140:	0200b974 	movhi	r8,741
 200b144:	0200b974 	movhi	r8,741
 200b148:	0200b974 	movhi	r8,741
 200b14c:	0200b974 	movhi	r8,741
 200b150:	0200b974 	movhi	r8,741
 200b154:	0200b974 	movhi	r8,741
 200b158:	0200b974 	movhi	r8,741
 200b15c:	0200b258 	cmpnei	r8,zero,713
 200b160:	0200b258 	cmpnei	r8,zero,713
 200b164:	0200b258 	cmpnei	r8,zero,713
 200b168:	0200b258 	cmpnei	r8,zero,713
 200b16c:	0200b258 	cmpnei	r8,zero,713
 200b170:	0200b258 	cmpnei	r8,zero,713
 200b174:	0200b258 	cmpnei	r8,zero,713
 200b178:	0200b258 	cmpnei	r8,zero,713
 200b17c:	0200b258 	cmpnei	r8,zero,713
 200b180:	0200b258 	cmpnei	r8,zero,713
 200b184:	0200b6c0 	call	200b6c <OSCtxSw_SWITCH_PC+0x200b2c>
 200b188:	0200b258 	cmpnei	r8,zero,713
 200b18c:	0200b258 	cmpnei	r8,zero,713
 200b190:	0200b258 	cmpnei	r8,zero,713
 200b194:	0200b258 	cmpnei	r8,zero,713
 200b198:	0200b258 	cmpnei	r8,zero,713
 200b19c:	0200b258 	cmpnei	r8,zero,713
 200b1a0:	0200b258 	cmpnei	r8,zero,713
 200b1a4:	0200b258 	cmpnei	r8,zero,713
 200b1a8:	0200b258 	cmpnei	r8,zero,713
 200b1ac:	0200b258 	cmpnei	r8,zero,713
 200b1b0:	0200b774 	movhi	r8,733
 200b1b4:	0200b258 	cmpnei	r8,zero,713
 200b1b8:	0200b258 	cmpnei	r8,zero,713
 200b1bc:	0200b258 	cmpnei	r8,zero,713
 200b1c0:	0200b258 	cmpnei	r8,zero,713
 200b1c4:	0200b258 	cmpnei	r8,zero,713
 200b1c8:	0200b7c0 	call	200b7c <OSCtxSw_SWITCH_PC+0x200b3c>
 200b1cc:	0200b258 	cmpnei	r8,zero,713
 200b1d0:	0200b258 	cmpnei	r8,zero,713
 200b1d4:	0200bacc 	andi	r8,zero,747
 200b1d8:	0200b258 	cmpnei	r8,zero,713
 200b1dc:	0200b258 	cmpnei	r8,zero,713
 200b1e0:	0200b258 	cmpnei	r8,zero,713
 200b1e4:	0200b258 	cmpnei	r8,zero,713
 200b1e8:	0200b258 	cmpnei	r8,zero,713
 200b1ec:	0200b258 	cmpnei	r8,zero,713
 200b1f0:	0200b258 	cmpnei	r8,zero,713
 200b1f4:	0200b258 	cmpnei	r8,zero,713
 200b1f8:	0200b258 	cmpnei	r8,zero,713
 200b1fc:	0200b258 	cmpnei	r8,zero,713
 200b200:	0200baa4 	muli	r8,zero,746
 200b204:	0200b6cc 	andi	r8,zero,731
 200b208:	0200b258 	cmpnei	r8,zero,713
 200b20c:	0200b258 	cmpnei	r8,zero,713
 200b210:	0200b258 	cmpnei	r8,zero,713
 200b214:	0200bbb0 	cmpltui	r8,zero,750
 200b218:	0200b6cc 	andi	r8,zero,731
 200b21c:	0200b258 	cmpnei	r8,zero,713
 200b220:	0200b258 	cmpnei	r8,zero,713
 200b224:	0200bb04 	movi	r8,748
 200b228:	0200b258 	cmpnei	r8,zero,713
 200b22c:	0200badc 	xori	r8,zero,747
 200b230:	0200b780 	call	200b78 <OSCtxSw_SWITCH_PC+0x200b38>
 200b234:	0200bb6c 	andhi	r8,zero,749
 200b238:	0200bbc4 	movi	r8,751
 200b23c:	0200b258 	cmpnei	r8,zero,713
 200b240:	0200bb20 	cmpeqi	r8,zero,748
 200b244:	0200b258 	cmpnei	r8,zero,713
 200b248:	0200b7cc 	andi	r8,zero,735
 200b24c:	0200b258 	cmpnei	r8,zero,713
 200b250:	0200b258 	cmpnei	r8,zero,713
 200b254:	0200ba44 	movi	r8,745
 200b258:	9800c226 	beq	r19,zero,200b564 <___vfiprintf_internal_r+0x670>
 200b25c:	07000044 	movi	fp,1
 200b260:	d9000404 	addi	r4,sp,16
 200b264:	d9c13515 	stw	r7,1236(sp)
 200b268:	d9013c15 	stw	r4,1264(sp)
 200b26c:	df013715 	stw	fp,1244(sp)
 200b270:	dcc00405 	stb	r19,16(sp)
 200b274:	d8000005 	stb	zero,0(sp)
 200b278:	d8013815 	stw	zero,1248(sp)
 200b27c:	d9813b17 	ldw	r6,1260(sp)
 200b280:	3080008c 	andi	r2,r6,2
 200b284:	1005003a 	cmpeq	r2,r2,zero
 200b288:	d8813e15 	stw	r2,1272(sp)
 200b28c:	1000011e 	bne	r2,zero,200b294 <___vfiprintf_internal_r+0x3a0>
 200b290:	e7000084 	addi	fp,fp,2
 200b294:	d8813b17 	ldw	r2,1260(sp)
 200b298:	1080210c 	andi	r2,r2,132
 200b29c:	d8813d15 	stw	r2,1268(sp)
 200b2a0:	10002a1e 	bne	r2,zero,200b34c <___vfiprintf_internal_r+0x458>
 200b2a4:	d8c13917 	ldw	r3,1252(sp)
 200b2a8:	1f21c83a 	sub	r16,r3,fp
 200b2ac:	0400270e 	bge	zero,r16,200b34c <___vfiprintf_internal_r+0x458>
 200b2b0:	00800404 	movi	r2,16
 200b2b4:	1402cf0e 	bge	r2,r16,200bdf4 <___vfiprintf_internal_r+0xf00>
 200b2b8:	d9400317 	ldw	r5,12(sp)
 200b2bc:	d9000217 	ldw	r4,8(sp)
 200b2c0:	1023883a 	mov	r17,r2
 200b2c4:	05c080b4 	movhi	r23,514
 200b2c8:	bde9a004 	addi	r23,r23,-22912
 200b2cc:	04c001c4 	movi	r19,7
 200b2d0:	00000306 	br	200b2e0 <___vfiprintf_internal_r+0x3ec>
 200b2d4:	843ffc04 	addi	r16,r16,-16
 200b2d8:	94800204 	addi	r18,r18,8
 200b2dc:	8c00110e 	bge	r17,r16,200b324 <___vfiprintf_internal_r+0x430>
 200b2e0:	29400404 	addi	r5,r5,16
 200b2e4:	21000044 	addi	r4,r4,1
 200b2e8:	95c00015 	stw	r23,0(r18)
 200b2ec:	94400115 	stw	r17,4(r18)
 200b2f0:	d9400315 	stw	r5,12(sp)
 200b2f4:	d9000215 	stw	r4,8(sp)
 200b2f8:	993ff60e 	bge	r19,r4,200b2d4 <___vfiprintf_internal_r+0x3e0>
 200b2fc:	b009883a 	mov	r4,r22
 200b300:	a80b883a 	mov	r5,r21
 200b304:	d9800104 	addi	r6,sp,4
 200b308:	200ae9c0 	call	200ae9c <__sprint_r>
 200b30c:	1000981e 	bne	r2,zero,200b570 <___vfiprintf_internal_r+0x67c>
 200b310:	843ffc04 	addi	r16,r16,-16
 200b314:	d9400317 	ldw	r5,12(sp)
 200b318:	d9000217 	ldw	r4,8(sp)
 200b31c:	dc800e04 	addi	r18,sp,56
 200b320:	8c3fef16 	blt	r17,r16,200b2e0 <___vfiprintf_internal_r+0x3ec>
 200b324:	2c0b883a 	add	r5,r5,r16
 200b328:	21000044 	addi	r4,r4,1
 200b32c:	008001c4 	movi	r2,7
 200b330:	95c00015 	stw	r23,0(r18)
 200b334:	94000115 	stw	r16,4(r18)
 200b338:	d9400315 	stw	r5,12(sp)
 200b33c:	d9000215 	stw	r4,8(sp)
 200b340:	11015616 	blt	r2,r4,200b89c <___vfiprintf_internal_r+0x9a8>
 200b344:	94800204 	addi	r18,r18,8
 200b348:	00000206 	br	200b354 <___vfiprintf_internal_r+0x460>
 200b34c:	d9400317 	ldw	r5,12(sp)
 200b350:	d9000217 	ldw	r4,8(sp)
 200b354:	d8800007 	ldb	r2,0(sp)
 200b358:	10000a26 	beq	r2,zero,200b384 <___vfiprintf_internal_r+0x490>
 200b35c:	00800044 	movi	r2,1
 200b360:	29400044 	addi	r5,r5,1
 200b364:	21000044 	addi	r4,r4,1
 200b368:	90800115 	stw	r2,4(r18)
 200b36c:	008001c4 	movi	r2,7
 200b370:	96c00015 	stw	sp,0(r18)
 200b374:	d9400315 	stw	r5,12(sp)
 200b378:	d9000215 	stw	r4,8(sp)
 200b37c:	11013516 	blt	r2,r4,200b854 <___vfiprintf_internal_r+0x960>
 200b380:	94800204 	addi	r18,r18,8
 200b384:	d9813e17 	ldw	r6,1272(sp)
 200b388:	30000b1e 	bne	r6,zero,200b3b8 <___vfiprintf_internal_r+0x4c4>
 200b38c:	d8800044 	addi	r2,sp,1
 200b390:	29400084 	addi	r5,r5,2
 200b394:	21000044 	addi	r4,r4,1
 200b398:	90800015 	stw	r2,0(r18)
 200b39c:	00c00084 	movi	r3,2
 200b3a0:	008001c4 	movi	r2,7
 200b3a4:	90c00115 	stw	r3,4(r18)
 200b3a8:	d9400315 	stw	r5,12(sp)
 200b3ac:	d9000215 	stw	r4,8(sp)
 200b3b0:	11013116 	blt	r2,r4,200b878 <___vfiprintf_internal_r+0x984>
 200b3b4:	94800204 	addi	r18,r18,8
 200b3b8:	d8c13d17 	ldw	r3,1268(sp)
 200b3bc:	00802004 	movi	r2,128
 200b3c0:	18807126 	beq	r3,r2,200b588 <___vfiprintf_internal_r+0x694>
 200b3c4:	d8813817 	ldw	r2,1248(sp)
 200b3c8:	d8c13717 	ldw	r3,1244(sp)
 200b3cc:	10e1c83a 	sub	r16,r2,r3
 200b3d0:	0400240e 	bge	zero,r16,200b464 <___vfiprintf_internal_r+0x570>
 200b3d4:	00800404 	movi	r2,16
 200b3d8:	1402580e 	bge	r2,r16,200bd3c <___vfiprintf_internal_r+0xe48>
 200b3dc:	1023883a 	mov	r17,r2
 200b3e0:	05c080b4 	movhi	r23,514
 200b3e4:	bde99c04 	addi	r23,r23,-22928
 200b3e8:	04c001c4 	movi	r19,7
 200b3ec:	00000306 	br	200b3fc <___vfiprintf_internal_r+0x508>
 200b3f0:	843ffc04 	addi	r16,r16,-16
 200b3f4:	94800204 	addi	r18,r18,8
 200b3f8:	8c00110e 	bge	r17,r16,200b440 <___vfiprintf_internal_r+0x54c>
 200b3fc:	29400404 	addi	r5,r5,16
 200b400:	21000044 	addi	r4,r4,1
 200b404:	95c00015 	stw	r23,0(r18)
 200b408:	94400115 	stw	r17,4(r18)
 200b40c:	d9400315 	stw	r5,12(sp)
 200b410:	d9000215 	stw	r4,8(sp)
 200b414:	993ff60e 	bge	r19,r4,200b3f0 <___vfiprintf_internal_r+0x4fc>
 200b418:	b009883a 	mov	r4,r22
 200b41c:	a80b883a 	mov	r5,r21
 200b420:	d9800104 	addi	r6,sp,4
 200b424:	200ae9c0 	call	200ae9c <__sprint_r>
 200b428:	1000511e 	bne	r2,zero,200b570 <___vfiprintf_internal_r+0x67c>
 200b42c:	843ffc04 	addi	r16,r16,-16
 200b430:	d9400317 	ldw	r5,12(sp)
 200b434:	d9000217 	ldw	r4,8(sp)
 200b438:	dc800e04 	addi	r18,sp,56
 200b43c:	8c3fef16 	blt	r17,r16,200b3fc <___vfiprintf_internal_r+0x508>
 200b440:	2c0b883a 	add	r5,r5,r16
 200b444:	21000044 	addi	r4,r4,1
 200b448:	008001c4 	movi	r2,7
 200b44c:	95c00015 	stw	r23,0(r18)
 200b450:	94000115 	stw	r16,4(r18)
 200b454:	d9400315 	stw	r5,12(sp)
 200b458:	d9000215 	stw	r4,8(sp)
 200b45c:	1100eb16 	blt	r2,r4,200b80c <___vfiprintf_internal_r+0x918>
 200b460:	94800204 	addi	r18,r18,8
 200b464:	d9813717 	ldw	r6,1244(sp)
 200b468:	d8813c17 	ldw	r2,1264(sp)
 200b46c:	21000044 	addi	r4,r4,1
 200b470:	298b883a 	add	r5,r5,r6
 200b474:	90800015 	stw	r2,0(r18)
 200b478:	008001c4 	movi	r2,7
 200b47c:	91800115 	stw	r6,4(r18)
 200b480:	d9400315 	stw	r5,12(sp)
 200b484:	d9000215 	stw	r4,8(sp)
 200b488:	11006b16 	blt	r2,r4,200b638 <___vfiprintf_internal_r+0x744>
 200b48c:	90c00204 	addi	r3,r18,8
 200b490:	d9013b17 	ldw	r4,1260(sp)
 200b494:	2080010c 	andi	r2,r4,4
 200b498:	10002726 	beq	r2,zero,200b538 <___vfiprintf_internal_r+0x644>
 200b49c:	d9813917 	ldw	r6,1252(sp)
 200b4a0:	3721c83a 	sub	r16,r6,fp
 200b4a4:	0400240e 	bge	zero,r16,200b538 <___vfiprintf_internal_r+0x644>
 200b4a8:	00800404 	movi	r2,16
 200b4ac:	1402790e 	bge	r2,r16,200be94 <___vfiprintf_internal_r+0xfa0>
 200b4b0:	d9000217 	ldw	r4,8(sp)
 200b4b4:	1023883a 	mov	r17,r2
 200b4b8:	05c080b4 	movhi	r23,514
 200b4bc:	bde9a004 	addi	r23,r23,-22912
 200b4c0:	048001c4 	movi	r18,7
 200b4c4:	00000306 	br	200b4d4 <___vfiprintf_internal_r+0x5e0>
 200b4c8:	843ffc04 	addi	r16,r16,-16
 200b4cc:	18c00204 	addi	r3,r3,8
 200b4d0:	8c00110e 	bge	r17,r16,200b518 <___vfiprintf_internal_r+0x624>
 200b4d4:	29400404 	addi	r5,r5,16
 200b4d8:	21000044 	addi	r4,r4,1
 200b4dc:	1dc00015 	stw	r23,0(r3)
 200b4e0:	1c400115 	stw	r17,4(r3)
 200b4e4:	d9400315 	stw	r5,12(sp)
 200b4e8:	d9000215 	stw	r4,8(sp)
 200b4ec:	913ff60e 	bge	r18,r4,200b4c8 <___vfiprintf_internal_r+0x5d4>
 200b4f0:	b009883a 	mov	r4,r22
 200b4f4:	a80b883a 	mov	r5,r21
 200b4f8:	d9800104 	addi	r6,sp,4
 200b4fc:	200ae9c0 	call	200ae9c <__sprint_r>
 200b500:	10001b1e 	bne	r2,zero,200b570 <___vfiprintf_internal_r+0x67c>
 200b504:	843ffc04 	addi	r16,r16,-16
 200b508:	d9400317 	ldw	r5,12(sp)
 200b50c:	d9000217 	ldw	r4,8(sp)
 200b510:	d8c00e04 	addi	r3,sp,56
 200b514:	8c3fef16 	blt	r17,r16,200b4d4 <___vfiprintf_internal_r+0x5e0>
 200b518:	2c0b883a 	add	r5,r5,r16
 200b51c:	21000044 	addi	r4,r4,1
 200b520:	008001c4 	movi	r2,7
 200b524:	1dc00015 	stw	r23,0(r3)
 200b528:	1c000115 	stw	r16,4(r3)
 200b52c:	d9400315 	stw	r5,12(sp)
 200b530:	d9000215 	stw	r4,8(sp)
 200b534:	11005b16 	blt	r2,r4,200b6a4 <___vfiprintf_internal_r+0x7b0>
 200b538:	d9013917 	ldw	r4,1252(sp)
 200b53c:	2700010e 	bge	r4,fp,200b544 <___vfiprintf_internal_r+0x650>
 200b540:	e009883a 	mov	r4,fp
 200b544:	d8813a17 	ldw	r2,1256(sp)
 200b548:	1105883a 	add	r2,r2,r4
 200b54c:	d8813a15 	stw	r2,1256(sp)
 200b550:	2800411e 	bne	r5,zero,200b658 <___vfiprintf_internal_r+0x764>
 200b554:	d9c13517 	ldw	r7,1236(sp)
 200b558:	dc800e04 	addi	r18,sp,56
 200b55c:	d8000215 	stw	zero,8(sp)
 200b560:	003eb506 	br	200b038 <___vfiprintf_internal_r+0x144>
 200b564:	d8800317 	ldw	r2,12(sp)
 200b568:	1002591e 	bne	r2,zero,200bed0 <___vfiprintf_internal_r+0xfdc>
 200b56c:	d8000215 	stw	zero,8(sp)
 200b570:	a880030b 	ldhu	r2,12(r21)
 200b574:	1080100c 	andi	r2,r2,64
 200b578:	103e9a26 	beq	r2,zero,200afe4 <___vfiprintf_internal_r+0xf0>
 200b57c:	00ffffc4 	movi	r3,-1
 200b580:	d8c13a15 	stw	r3,1256(sp)
 200b584:	003e9706 	br	200afe4 <___vfiprintf_internal_r+0xf0>
 200b588:	d9813917 	ldw	r6,1252(sp)
 200b58c:	3721c83a 	sub	r16,r6,fp
 200b590:	043f8c0e 	bge	zero,r16,200b3c4 <___vfiprintf_internal_r+0x4d0>
 200b594:	00800404 	movi	r2,16
 200b598:	1402530e 	bge	r2,r16,200bee8 <___vfiprintf_internal_r+0xff4>
 200b59c:	1023883a 	mov	r17,r2
 200b5a0:	05c080b4 	movhi	r23,514
 200b5a4:	bde99c04 	addi	r23,r23,-22928
 200b5a8:	04c001c4 	movi	r19,7
 200b5ac:	00000306 	br	200b5bc <___vfiprintf_internal_r+0x6c8>
 200b5b0:	843ffc04 	addi	r16,r16,-16
 200b5b4:	94800204 	addi	r18,r18,8
 200b5b8:	8c00110e 	bge	r17,r16,200b600 <___vfiprintf_internal_r+0x70c>
 200b5bc:	29400404 	addi	r5,r5,16
 200b5c0:	21000044 	addi	r4,r4,1
 200b5c4:	95c00015 	stw	r23,0(r18)
 200b5c8:	94400115 	stw	r17,4(r18)
 200b5cc:	d9400315 	stw	r5,12(sp)
 200b5d0:	d9000215 	stw	r4,8(sp)
 200b5d4:	993ff60e 	bge	r19,r4,200b5b0 <___vfiprintf_internal_r+0x6bc>
 200b5d8:	b009883a 	mov	r4,r22
 200b5dc:	a80b883a 	mov	r5,r21
 200b5e0:	d9800104 	addi	r6,sp,4
 200b5e4:	200ae9c0 	call	200ae9c <__sprint_r>
 200b5e8:	103fe11e 	bne	r2,zero,200b570 <___vfiprintf_internal_r+0x67c>
 200b5ec:	843ffc04 	addi	r16,r16,-16
 200b5f0:	d9400317 	ldw	r5,12(sp)
 200b5f4:	d9000217 	ldw	r4,8(sp)
 200b5f8:	dc800e04 	addi	r18,sp,56
 200b5fc:	8c3fef16 	blt	r17,r16,200b5bc <___vfiprintf_internal_r+0x6c8>
 200b600:	2c0b883a 	add	r5,r5,r16
 200b604:	21000044 	addi	r4,r4,1
 200b608:	008001c4 	movi	r2,7
 200b60c:	95c00015 	stw	r23,0(r18)
 200b610:	94000115 	stw	r16,4(r18)
 200b614:	d9400315 	stw	r5,12(sp)
 200b618:	d9000215 	stw	r4,8(sp)
 200b61c:	1100a816 	blt	r2,r4,200b8c0 <___vfiprintf_internal_r+0x9cc>
 200b620:	94800204 	addi	r18,r18,8
 200b624:	003f6706 	br	200b3c4 <___vfiprintf_internal_r+0x4d0>
 200b628:	d9c13f15 	stw	r7,1276(sp)
 200b62c:	20088e00 	call	20088e0 <__sinit>
 200b630:	d9c13f17 	ldw	r7,1276(sp)
 200b634:	003e4006 	br	200af38 <___vfiprintf_internal_r+0x44>
 200b638:	b009883a 	mov	r4,r22
 200b63c:	a80b883a 	mov	r5,r21
 200b640:	d9800104 	addi	r6,sp,4
 200b644:	200ae9c0 	call	200ae9c <__sprint_r>
 200b648:	103fc91e 	bne	r2,zero,200b570 <___vfiprintf_internal_r+0x67c>
 200b64c:	d9400317 	ldw	r5,12(sp)
 200b650:	d8c00e04 	addi	r3,sp,56
 200b654:	003f8e06 	br	200b490 <___vfiprintf_internal_r+0x59c>
 200b658:	b009883a 	mov	r4,r22
 200b65c:	a80b883a 	mov	r5,r21
 200b660:	d9800104 	addi	r6,sp,4
 200b664:	200ae9c0 	call	200ae9c <__sprint_r>
 200b668:	103fba26 	beq	r2,zero,200b554 <___vfiprintf_internal_r+0x660>
 200b66c:	003fc006 	br	200b570 <___vfiprintf_internal_r+0x67c>
 200b670:	b009883a 	mov	r4,r22
 200b674:	a80b883a 	mov	r5,r21
 200b678:	d9c13f15 	stw	r7,1276(sp)
 200b67c:	2006cfc0 	call	2006cfc <__swsetup_r>
 200b680:	d9c13f17 	ldw	r7,1276(sp)
 200b684:	103e3126 	beq	r2,zero,200af4c <___vfiprintf_internal_r+0x58>
 200b688:	003fbc06 	br	200b57c <___vfiprintf_internal_r+0x688>
 200b68c:	00bfffc4 	movi	r2,-1
 200b690:	d8813a15 	stw	r2,1256(sp)
 200b694:	d880210b 	ldhu	r2,132(sp)
 200b698:	1080100c 	andi	r2,r2,64
 200b69c:	103e4e1e 	bne	r2,zero,200afd8 <___vfiprintf_internal_r+0xe4>
 200b6a0:	003e5006 	br	200afe4 <___vfiprintf_internal_r+0xf0>
 200b6a4:	b009883a 	mov	r4,r22
 200b6a8:	a80b883a 	mov	r5,r21
 200b6ac:	d9800104 	addi	r6,sp,4
 200b6b0:	200ae9c0 	call	200ae9c <__sprint_r>
 200b6b4:	103fae1e 	bne	r2,zero,200b570 <___vfiprintf_internal_r+0x67c>
 200b6b8:	d9400317 	ldw	r5,12(sp)
 200b6bc:	003f9e06 	br	200b538 <___vfiprintf_internal_r+0x644>
 200b6c0:	d8813b17 	ldw	r2,1260(sp)
 200b6c4:	10800414 	ori	r2,r2,16
 200b6c8:	d8813b15 	stw	r2,1260(sp)
 200b6cc:	d8c13b17 	ldw	r3,1260(sp)
 200b6d0:	1880080c 	andi	r2,r3,32
 200b6d4:	10009c1e 	bne	r2,zero,200b948 <___vfiprintf_internal_r+0xa54>
 200b6d8:	d9413b17 	ldw	r5,1260(sp)
 200b6dc:	2880040c 	andi	r2,r5,16
 200b6e0:	1001b91e 	bne	r2,zero,200bdc8 <___vfiprintf_internal_r+0xed4>
 200b6e4:	d9813b17 	ldw	r6,1260(sp)
 200b6e8:	3080100c 	andi	r2,r6,64
 200b6ec:	1001b626 	beq	r2,zero,200bdc8 <___vfiprintf_internal_r+0xed4>
 200b6f0:	3880000f 	ldh	r2,0(r7)
 200b6f4:	39c00104 	addi	r7,r7,4
 200b6f8:	d9c13515 	stw	r7,1236(sp)
 200b6fc:	1023d7fa 	srai	r17,r2,31
 200b700:	1021883a 	mov	r16,r2
 200b704:	8801e716 	blt	r17,zero,200bea4 <___vfiprintf_internal_r+0xfb0>
 200b708:	01000044 	movi	r4,1
 200b70c:	b8000416 	blt	r23,zero,200b720 <___vfiprintf_internal_r+0x82c>
 200b710:	d9413b17 	ldw	r5,1260(sp)
 200b714:	00bfdfc4 	movi	r2,-129
 200b718:	288a703a 	and	r5,r5,r2
 200b71c:	d9413b15 	stw	r5,1260(sp)
 200b720:	8444b03a 	or	r2,r16,r17
 200b724:	10012e1e 	bne	r2,zero,200bbe0 <___vfiprintf_internal_r+0xcec>
 200b728:	b8012d1e 	bne	r23,zero,200bbe0 <___vfiprintf_internal_r+0xcec>
 200b72c:	20803fcc 	andi	r2,r4,255
 200b730:	10018526 	beq	r2,zero,200bd48 <___vfiprintf_internal_r+0xe54>
 200b734:	d8c00e04 	addi	r3,sp,56
 200b738:	df000404 	addi	fp,sp,16
 200b73c:	d8c13c15 	stw	r3,1264(sp)
 200b740:	d8c13c17 	ldw	r3,1264(sp)
 200b744:	ddc13815 	stw	r23,1248(sp)
 200b748:	e0c5c83a 	sub	r2,fp,r3
 200b74c:	10800a04 	addi	r2,r2,40
 200b750:	d8813715 	stw	r2,1244(sp)
 200b754:	df013817 	ldw	fp,1248(sp)
 200b758:	d9413717 	ldw	r5,1244(sp)
 200b75c:	e140010e 	bge	fp,r5,200b764 <___vfiprintf_internal_r+0x870>
 200b760:	2839883a 	mov	fp,r5
 200b764:	d8800007 	ldb	r2,0(sp)
 200b768:	103ec426 	beq	r2,zero,200b27c <___vfiprintf_internal_r+0x388>
 200b76c:	e7000044 	addi	fp,fp,1
 200b770:	003ec206 	br	200b27c <___vfiprintf_internal_r+0x388>
 200b774:	d9813b17 	ldw	r6,1260(sp)
 200b778:	31800414 	ori	r6,r6,16
 200b77c:	d9813b15 	stw	r6,1260(sp)
 200b780:	d8c13b17 	ldw	r3,1260(sp)
 200b784:	1880080c 	andi	r2,r3,32
 200b788:	1000681e 	bne	r2,zero,200b92c <___vfiprintf_internal_r+0xa38>
 200b78c:	d9413b17 	ldw	r5,1260(sp)
 200b790:	2880040c 	andi	r2,r5,16
 200b794:	10017e1e 	bne	r2,zero,200bd90 <___vfiprintf_internal_r+0xe9c>
 200b798:	d9813b17 	ldw	r6,1260(sp)
 200b79c:	3080100c 	andi	r2,r6,64
 200b7a0:	10017b26 	beq	r2,zero,200bd90 <___vfiprintf_internal_r+0xe9c>
 200b7a4:	3c00000b 	ldhu	r16,0(r7)
 200b7a8:	0009883a 	mov	r4,zero
 200b7ac:	39c00104 	addi	r7,r7,4
 200b7b0:	0023883a 	mov	r17,zero
 200b7b4:	d9c13515 	stw	r7,1236(sp)
 200b7b8:	d8000005 	stb	zero,0(sp)
 200b7bc:	003fd306 	br	200b70c <___vfiprintf_internal_r+0x818>
 200b7c0:	d8813b17 	ldw	r2,1260(sp)
 200b7c4:	10800414 	ori	r2,r2,16
 200b7c8:	d8813b15 	stw	r2,1260(sp)
 200b7cc:	d8c13b17 	ldw	r3,1260(sp)
 200b7d0:	1880080c 	andi	r2,r3,32
 200b7d4:	10004e1e 	bne	r2,zero,200b910 <___vfiprintf_internal_r+0xa1c>
 200b7d8:	d9413b17 	ldw	r5,1260(sp)
 200b7dc:	2880040c 	andi	r2,r5,16
 200b7e0:	1001721e 	bne	r2,zero,200bdac <___vfiprintf_internal_r+0xeb8>
 200b7e4:	d9813b17 	ldw	r6,1260(sp)
 200b7e8:	3080100c 	andi	r2,r6,64
 200b7ec:	10016f26 	beq	r2,zero,200bdac <___vfiprintf_internal_r+0xeb8>
 200b7f0:	3c00000b 	ldhu	r16,0(r7)
 200b7f4:	01000044 	movi	r4,1
 200b7f8:	39c00104 	addi	r7,r7,4
 200b7fc:	0023883a 	mov	r17,zero
 200b800:	d9c13515 	stw	r7,1236(sp)
 200b804:	d8000005 	stb	zero,0(sp)
 200b808:	003fc006 	br	200b70c <___vfiprintf_internal_r+0x818>
 200b80c:	b009883a 	mov	r4,r22
 200b810:	a80b883a 	mov	r5,r21
 200b814:	d9800104 	addi	r6,sp,4
 200b818:	200ae9c0 	call	200ae9c <__sprint_r>
 200b81c:	103f541e 	bne	r2,zero,200b570 <___vfiprintf_internal_r+0x67c>
 200b820:	d9400317 	ldw	r5,12(sp)
 200b824:	d9000217 	ldw	r4,8(sp)
 200b828:	dc800e04 	addi	r18,sp,56
 200b82c:	003f0d06 	br	200b464 <___vfiprintf_internal_r+0x570>
 200b830:	b009883a 	mov	r4,r22
 200b834:	a80b883a 	mov	r5,r21
 200b838:	d9800104 	addi	r6,sp,4
 200b83c:	d9c13f15 	stw	r7,1276(sp)
 200b840:	200ae9c0 	call	200ae9c <__sprint_r>
 200b844:	d9c13f17 	ldw	r7,1276(sp)
 200b848:	103f491e 	bne	r2,zero,200b570 <___vfiprintf_internal_r+0x67c>
 200b84c:	dc800e04 	addi	r18,sp,56
 200b850:	003e1006 	br	200b094 <___vfiprintf_internal_r+0x1a0>
 200b854:	b009883a 	mov	r4,r22
 200b858:	a80b883a 	mov	r5,r21
 200b85c:	d9800104 	addi	r6,sp,4
 200b860:	200ae9c0 	call	200ae9c <__sprint_r>
 200b864:	103f421e 	bne	r2,zero,200b570 <___vfiprintf_internal_r+0x67c>
 200b868:	d9400317 	ldw	r5,12(sp)
 200b86c:	d9000217 	ldw	r4,8(sp)
 200b870:	dc800e04 	addi	r18,sp,56
 200b874:	003ec306 	br	200b384 <___vfiprintf_internal_r+0x490>
 200b878:	b009883a 	mov	r4,r22
 200b87c:	a80b883a 	mov	r5,r21
 200b880:	d9800104 	addi	r6,sp,4
 200b884:	200ae9c0 	call	200ae9c <__sprint_r>
 200b888:	103f391e 	bne	r2,zero,200b570 <___vfiprintf_internal_r+0x67c>
 200b88c:	d9400317 	ldw	r5,12(sp)
 200b890:	d9000217 	ldw	r4,8(sp)
 200b894:	dc800e04 	addi	r18,sp,56
 200b898:	003ec706 	br	200b3b8 <___vfiprintf_internal_r+0x4c4>
 200b89c:	b009883a 	mov	r4,r22
 200b8a0:	a80b883a 	mov	r5,r21
 200b8a4:	d9800104 	addi	r6,sp,4
 200b8a8:	200ae9c0 	call	200ae9c <__sprint_r>
 200b8ac:	103f301e 	bne	r2,zero,200b570 <___vfiprintf_internal_r+0x67c>
 200b8b0:	d9400317 	ldw	r5,12(sp)
 200b8b4:	d9000217 	ldw	r4,8(sp)
 200b8b8:	dc800e04 	addi	r18,sp,56
 200b8bc:	003ea506 	br	200b354 <___vfiprintf_internal_r+0x460>
 200b8c0:	b009883a 	mov	r4,r22
 200b8c4:	a80b883a 	mov	r5,r21
 200b8c8:	d9800104 	addi	r6,sp,4
 200b8cc:	200ae9c0 	call	200ae9c <__sprint_r>
 200b8d0:	103f271e 	bne	r2,zero,200b570 <___vfiprintf_internal_r+0x67c>
 200b8d4:	d9400317 	ldw	r5,12(sp)
 200b8d8:	d9000217 	ldw	r4,8(sp)
 200b8dc:	dc800e04 	addi	r18,sp,56
 200b8e0:	003eb806 	br	200b3c4 <___vfiprintf_internal_r+0x4d0>
 200b8e4:	38800017 	ldw	r2,0(r7)
 200b8e8:	39c00104 	addi	r7,r7,4
 200b8ec:	d8813915 	stw	r2,1252(sp)
 200b8f0:	1000b90e 	bge	r2,zero,200bbd8 <___vfiprintf_internal_r+0xce4>
 200b8f4:	0085c83a 	sub	r2,zero,r2
 200b8f8:	d8813915 	stw	r2,1252(sp)
 200b8fc:	d9013b17 	ldw	r4,1260(sp)
 200b900:	a0c00007 	ldb	r3,0(r20)
 200b904:	21000114 	ori	r4,r4,4
 200b908:	d9013b15 	stw	r4,1260(sp)
 200b90c:	003ded06 	br	200b0c4 <___vfiprintf_internal_r+0x1d0>
 200b910:	3c000017 	ldw	r16,0(r7)
 200b914:	3c400117 	ldw	r17,4(r7)
 200b918:	39000204 	addi	r4,r7,8
 200b91c:	d9013515 	stw	r4,1236(sp)
 200b920:	01000044 	movi	r4,1
 200b924:	d8000005 	stb	zero,0(sp)
 200b928:	003f7806 	br	200b70c <___vfiprintf_internal_r+0x818>
 200b92c:	3c000017 	ldw	r16,0(r7)
 200b930:	3c400117 	ldw	r17,4(r7)
 200b934:	39000204 	addi	r4,r7,8
 200b938:	d9013515 	stw	r4,1236(sp)
 200b93c:	0009883a 	mov	r4,zero
 200b940:	d8000005 	stb	zero,0(sp)
 200b944:	003f7106 	br	200b70c <___vfiprintf_internal_r+0x818>
 200b948:	3c000017 	ldw	r16,0(r7)
 200b94c:	3c400117 	ldw	r17,4(r7)
 200b950:	39000204 	addi	r4,r7,8
 200b954:	d9013515 	stw	r4,1236(sp)
 200b958:	003f6a06 	br	200b704 <___vfiprintf_internal_r+0x810>
 200b95c:	d8800007 	ldb	r2,0(sp)
 200b960:	10009d1e 	bne	r2,zero,200bbd8 <___vfiprintf_internal_r+0xce4>
 200b964:	00800804 	movi	r2,32
 200b968:	d8800005 	stb	r2,0(sp)
 200b96c:	a0c00007 	ldb	r3,0(r20)
 200b970:	003dd406 	br	200b0c4 <___vfiprintf_internal_r+0x1d0>
 200b974:	0009883a 	mov	r4,zero
 200b978:	04000244 	movi	r16,9
 200b97c:	01400284 	movi	r5,10
 200b980:	d9c13f15 	stw	r7,1276(sp)
 200b984:	20032ac0 	call	20032ac <__mulsi3>
 200b988:	9885883a 	add	r2,r19,r2
 200b98c:	a4c00007 	ldb	r19,0(r20)
 200b990:	113ff404 	addi	r4,r2,-48
 200b994:	a5000044 	addi	r20,r20,1
 200b998:	98bff404 	addi	r2,r19,-48
 200b99c:	d9c13f17 	ldw	r7,1276(sp)
 200b9a0:	80bff62e 	bgeu	r16,r2,200b97c <___vfiprintf_internal_r+0xa88>
 200b9a4:	d9013915 	stw	r4,1252(sp)
 200b9a8:	003dc806 	br	200b0cc <___vfiprintf_internal_r+0x1d8>
 200b9ac:	d9413b17 	ldw	r5,1260(sp)
 200b9b0:	a0c00007 	ldb	r3,0(r20)
 200b9b4:	29402014 	ori	r5,r5,128
 200b9b8:	d9413b15 	stw	r5,1260(sp)
 200b9bc:	003dc106 	br	200b0c4 <___vfiprintf_internal_r+0x1d0>
 200b9c0:	a0c00007 	ldb	r3,0(r20)
 200b9c4:	00800a84 	movi	r2,42
 200b9c8:	a5000044 	addi	r20,r20,1
 200b9cc:	18817326 	beq	r3,r2,200bf9c <___vfiprintf_internal_r+0x10a8>
 200b9d0:	1827883a 	mov	r19,r3
 200b9d4:	18bff404 	addi	r2,r3,-48
 200b9d8:	00c00244 	movi	r3,9
 200b9dc:	18816d36 	bltu	r3,r2,200bf94 <___vfiprintf_internal_r+0x10a0>
 200b9e0:	1821883a 	mov	r16,r3
 200b9e4:	0009883a 	mov	r4,zero
 200b9e8:	01400284 	movi	r5,10
 200b9ec:	d9c13f15 	stw	r7,1276(sp)
 200b9f0:	20032ac0 	call	20032ac <__mulsi3>
 200b9f4:	14c5883a 	add	r2,r2,r19
 200b9f8:	a4c00007 	ldb	r19,0(r20)
 200b9fc:	113ff404 	addi	r4,r2,-48
 200ba00:	a5000044 	addi	r20,r20,1
 200ba04:	98bff404 	addi	r2,r19,-48
 200ba08:	d9c13f17 	ldw	r7,1276(sp)
 200ba0c:	80bff62e 	bgeu	r16,r2,200b9e8 <___vfiprintf_internal_r+0xaf4>
 200ba10:	202f883a 	mov	r23,r4
 200ba14:	203dad0e 	bge	r4,zero,200b0cc <___vfiprintf_internal_r+0x1d8>
 200ba18:	05ffffc4 	movi	r23,-1
 200ba1c:	003dab06 	br	200b0cc <___vfiprintf_internal_r+0x1d8>
 200ba20:	d9813b17 	ldw	r6,1260(sp)
 200ba24:	a0c00007 	ldb	r3,0(r20)
 200ba28:	31800054 	ori	r6,r6,1
 200ba2c:	d9813b15 	stw	r6,1260(sp)
 200ba30:	003da406 	br	200b0c4 <___vfiprintf_internal_r+0x1d0>
 200ba34:	00800ac4 	movi	r2,43
 200ba38:	d8800005 	stb	r2,0(sp)
 200ba3c:	a0c00007 	ldb	r3,0(r20)
 200ba40:	003da006 	br	200b0c4 <___vfiprintf_internal_r+0x1d0>
 200ba44:	014080b4 	movhi	r5,514
 200ba48:	29691f04 	addi	r5,r5,-23428
 200ba4c:	d9413615 	stw	r5,1240(sp)
 200ba50:	d8c13b17 	ldw	r3,1260(sp)
 200ba54:	1880080c 	andi	r2,r3,32
 200ba58:	1000c226 	beq	r2,zero,200bd64 <___vfiprintf_internal_r+0xe70>
 200ba5c:	3c000017 	ldw	r16,0(r7)
 200ba60:	3c400117 	ldw	r17,4(r7)
 200ba64:	39000204 	addi	r4,r7,8
 200ba68:	d9013515 	stw	r4,1236(sp)
 200ba6c:	d8c13b17 	ldw	r3,1260(sp)
 200ba70:	1880004c 	andi	r2,r3,1
 200ba74:	1005003a 	cmpeq	r2,r2,zero
 200ba78:	1000931e 	bne	r2,zero,200bcc8 <___vfiprintf_internal_r+0xdd4>
 200ba7c:	8444b03a 	or	r2,r16,r17
 200ba80:	10009126 	beq	r2,zero,200bcc8 <___vfiprintf_internal_r+0xdd4>
 200ba84:	18c00094 	ori	r3,r3,2
 200ba88:	00800c04 	movi	r2,48
 200ba8c:	01000084 	movi	r4,2
 200ba90:	d8c13b15 	stw	r3,1260(sp)
 200ba94:	d8800045 	stb	r2,1(sp)
 200ba98:	dcc00085 	stb	r19,2(sp)
 200ba9c:	d8000005 	stb	zero,0(sp)
 200baa0:	003f1a06 	br	200b70c <___vfiprintf_internal_r+0x818>
 200baa4:	38800017 	ldw	r2,0(r7)
 200baa8:	07000044 	movi	fp,1
 200baac:	39c00104 	addi	r7,r7,4
 200bab0:	d9800404 	addi	r6,sp,16
 200bab4:	d9c13515 	stw	r7,1236(sp)
 200bab8:	d9813c15 	stw	r6,1264(sp)
 200babc:	df013715 	stw	fp,1244(sp)
 200bac0:	d8800405 	stb	r2,16(sp)
 200bac4:	d8000005 	stb	zero,0(sp)
 200bac8:	003deb06 	br	200b278 <___vfiprintf_internal_r+0x384>
 200bacc:	008080b4 	movhi	r2,514
 200bad0:	10a92a04 	addi	r2,r2,-23384
 200bad4:	d8813615 	stw	r2,1240(sp)
 200bad8:	003fdd06 	br	200ba50 <___vfiprintf_internal_r+0xb5c>
 200badc:	d8c13b17 	ldw	r3,1260(sp)
 200bae0:	1880080c 	andi	r2,r3,32
 200bae4:	1000e326 	beq	r2,zero,200be74 <___vfiprintf_internal_r+0xf80>
 200bae8:	d9013a17 	ldw	r4,1256(sp)
 200baec:	38800017 	ldw	r2,0(r7)
 200baf0:	39c00104 	addi	r7,r7,4
 200baf4:	2007d7fa 	srai	r3,r4,31
 200baf8:	11000015 	stw	r4,0(r2)
 200bafc:	10c00115 	stw	r3,4(r2)
 200bb00:	003d4d06 	br	200b038 <___vfiprintf_internal_r+0x144>
 200bb04:	a0c00007 	ldb	r3,0(r20)
 200bb08:	00801b04 	movi	r2,108
 200bb0c:	1880f926 	beq	r3,r2,200bef4 <___vfiprintf_internal_r+0x1000>
 200bb10:	d9013b17 	ldw	r4,1260(sp)
 200bb14:	21000414 	ori	r4,r4,16
 200bb18:	d9013b15 	stw	r4,1260(sp)
 200bb1c:	003d6906 	br	200b0c4 <___vfiprintf_internal_r+0x1d0>
 200bb20:	d8000005 	stb	zero,0(sp)
 200bb24:	39000017 	ldw	r4,0(r7)
 200bb28:	39c00104 	addi	r7,r7,4
 200bb2c:	d9c13515 	stw	r7,1236(sp)
 200bb30:	d9013c15 	stw	r4,1264(sp)
 200bb34:	20010226 	beq	r4,zero,200bf40 <___vfiprintf_internal_r+0x104c>
 200bb38:	b800fc16 	blt	r23,zero,200bf2c <___vfiprintf_internal_r+0x1038>
 200bb3c:	d9013c17 	ldw	r4,1264(sp)
 200bb40:	000b883a 	mov	r5,zero
 200bb44:	b80d883a 	mov	r6,r23
 200bb48:	20098200 	call	2009820 <memchr>
 200bb4c:	10000426 	beq	r2,zero,200bb60 <___vfiprintf_internal_r+0xc6c>
 200bb50:	d9813c17 	ldw	r6,1264(sp)
 200bb54:	1185c83a 	sub	r2,r2,r6
 200bb58:	d8813715 	stw	r2,1244(sp)
 200bb5c:	b880010e 	bge	r23,r2,200bb64 <___vfiprintf_internal_r+0xc70>
 200bb60:	ddc13715 	stw	r23,1244(sp)
 200bb64:	d8013815 	stw	zero,1248(sp)
 200bb68:	003efa06 	br	200b754 <___vfiprintf_internal_r+0x860>
 200bb6c:	d8813b17 	ldw	r2,1260(sp)
 200bb70:	3c000017 	ldw	r16,0(r7)
 200bb74:	00c080b4 	movhi	r3,514
 200bb78:	18e91f04 	addi	r3,r3,-23428
 200bb7c:	10800094 	ori	r2,r2,2
 200bb80:	d8813b15 	stw	r2,1260(sp)
 200bb84:	39c00104 	addi	r7,r7,4
 200bb88:	d8c13615 	stw	r3,1240(sp)
 200bb8c:	00800c04 	movi	r2,48
 200bb90:	00c01e04 	movi	r3,120
 200bb94:	0023883a 	mov	r17,zero
 200bb98:	01000084 	movi	r4,2
 200bb9c:	d9c13515 	stw	r7,1236(sp)
 200bba0:	d8800045 	stb	r2,1(sp)
 200bba4:	d8c00085 	stb	r3,2(sp)
 200bba8:	d8000005 	stb	zero,0(sp)
 200bbac:	003ed706 	br	200b70c <___vfiprintf_internal_r+0x818>
 200bbb0:	d9813b17 	ldw	r6,1260(sp)
 200bbb4:	a0c00007 	ldb	r3,0(r20)
 200bbb8:	31801014 	ori	r6,r6,64
 200bbbc:	d9813b15 	stw	r6,1260(sp)
 200bbc0:	003d4006 	br	200b0c4 <___vfiprintf_internal_r+0x1d0>
 200bbc4:	d9413b17 	ldw	r5,1260(sp)
 200bbc8:	a0c00007 	ldb	r3,0(r20)
 200bbcc:	29400814 	ori	r5,r5,32
 200bbd0:	d9413b15 	stw	r5,1260(sp)
 200bbd4:	003d3b06 	br	200b0c4 <___vfiprintf_internal_r+0x1d0>
 200bbd8:	a0c00007 	ldb	r3,0(r20)
 200bbdc:	003d3906 	br	200b0c4 <___vfiprintf_internal_r+0x1d0>
 200bbe0:	20c03fcc 	andi	r3,r4,255
 200bbe4:	00800044 	movi	r2,1
 200bbe8:	18802b26 	beq	r3,r2,200bc98 <___vfiprintf_internal_r+0xda4>
 200bbec:	18800b36 	bltu	r3,r2,200bc1c <___vfiprintf_internal_r+0xd28>
 200bbf0:	00800084 	movi	r2,2
 200bbf4:	18808426 	beq	r3,r2,200be08 <___vfiprintf_internal_r+0xf14>
 200bbf8:	010080b4 	movhi	r4,514
 200bbfc:	21292f04 	addi	r4,r4,-23364
 200bc00:	ddc13815 	stw	r23,1248(sp)
 200bc04:	2004d2c0 	call	2004d2c <strlen>
 200bc08:	d8813715 	stw	r2,1244(sp)
 200bc0c:	008080b4 	movhi	r2,514
 200bc10:	10a92f04 	addi	r2,r2,-23364
 200bc14:	d8813c15 	stw	r2,1264(sp)
 200bc18:	003ece06 	br	200b754 <___vfiprintf_internal_r+0x860>
 200bc1c:	d8800e04 	addi	r2,sp,56
 200bc20:	df000404 	addi	fp,sp,16
 200bc24:	d8813c15 	stw	r2,1264(sp)
 200bc28:	880a977a 	slli	r5,r17,29
 200bc2c:	8004d0fa 	srli	r2,r16,3
 200bc30:	8806d0fa 	srli	r3,r17,3
 200bc34:	810001cc 	andi	r4,r16,7
 200bc38:	2884b03a 	or	r2,r5,r2
 200bc3c:	d9413c17 	ldw	r5,1264(sp)
 200bc40:	21000c04 	addi	r4,r4,48
 200bc44:	1021883a 	mov	r16,r2
 200bc48:	297fffc4 	addi	r5,r5,-1
 200bc4c:	d9413c15 	stw	r5,1264(sp)
 200bc50:	29000005 	stb	r4,0(r5)
 200bc54:	10cab03a 	or	r5,r2,r3
 200bc58:	1823883a 	mov	r17,r3
 200bc5c:	283ff21e 	bne	r5,zero,200bc28 <___vfiprintf_internal_r+0xd34>
 200bc60:	d9813b17 	ldw	r6,1260(sp)
 200bc64:	3080004c 	andi	r2,r6,1
 200bc68:	1005003a 	cmpeq	r2,r2,zero
 200bc6c:	103eb41e 	bne	r2,zero,200b740 <___vfiprintf_internal_r+0x84c>
 200bc70:	20803fcc 	andi	r2,r4,255
 200bc74:	1080201c 	xori	r2,r2,128
 200bc78:	10bfe004 	addi	r2,r2,-128
 200bc7c:	00c00c04 	movi	r3,48
 200bc80:	10feaf26 	beq	r2,r3,200b740 <___vfiprintf_internal_r+0x84c>
 200bc84:	d8813c17 	ldw	r2,1264(sp)
 200bc88:	10bfffc4 	addi	r2,r2,-1
 200bc8c:	d8813c15 	stw	r2,1264(sp)
 200bc90:	10c00005 	stb	r3,0(r2)
 200bc94:	003eaa06 	br	200b740 <___vfiprintf_internal_r+0x84c>
 200bc98:	88800068 	cmpgeui	r2,r17,1
 200bc9c:	10000d1e 	bne	r2,zero,200bcd4 <___vfiprintf_internal_r+0xde0>
 200bca0:	8800021e 	bne	r17,zero,200bcac <___vfiprintf_internal_r+0xdb8>
 200bca4:	00800244 	movi	r2,9
 200bca8:	14000a36 	bltu	r2,r16,200bcd4 <___vfiprintf_internal_r+0xde0>
 200bcac:	d9800dc4 	addi	r6,sp,55
 200bcb0:	df000404 	addi	fp,sp,16
 200bcb4:	d9813c15 	stw	r6,1264(sp)
 200bcb8:	d8c13c17 	ldw	r3,1264(sp)
 200bcbc:	80800c04 	addi	r2,r16,48
 200bcc0:	18800005 	stb	r2,0(r3)
 200bcc4:	003e9e06 	br	200b740 <___vfiprintf_internal_r+0x84c>
 200bcc8:	01000084 	movi	r4,2
 200bccc:	d8000005 	stb	zero,0(sp)
 200bcd0:	003e8e06 	br	200b70c <___vfiprintf_internal_r+0x818>
 200bcd4:	df000404 	addi	fp,sp,16
 200bcd8:	dcc00e04 	addi	r19,sp,56
 200bcdc:	8009883a 	mov	r4,r16
 200bce0:	880b883a 	mov	r5,r17
 200bce4:	01800284 	movi	r6,10
 200bce8:	000f883a 	mov	r7,zero
 200bcec:	200caec0 	call	200caec <__umoddi3>
 200bcf0:	12000c04 	addi	r8,r2,48
 200bcf4:	9cffffc4 	addi	r19,r19,-1
 200bcf8:	8009883a 	mov	r4,r16
 200bcfc:	880b883a 	mov	r5,r17
 200bd00:	01800284 	movi	r6,10
 200bd04:	000f883a 	mov	r7,zero
 200bd08:	9a000005 	stb	r8,0(r19)
 200bd0c:	200c4800 	call	200c480 <__udivdi3>
 200bd10:	1009883a 	mov	r4,r2
 200bd14:	1021883a 	mov	r16,r2
 200bd18:	18800068 	cmpgeui	r2,r3,1
 200bd1c:	1823883a 	mov	r17,r3
 200bd20:	103fee1e 	bne	r2,zero,200bcdc <___vfiprintf_internal_r+0xde8>
 200bd24:	1800021e 	bne	r3,zero,200bd30 <___vfiprintf_internal_r+0xe3c>
 200bd28:	00800244 	movi	r2,9
 200bd2c:	113feb36 	bltu	r2,r4,200bcdc <___vfiprintf_internal_r+0xde8>
 200bd30:	9cffffc4 	addi	r19,r19,-1
 200bd34:	dcc13c15 	stw	r19,1264(sp)
 200bd38:	003fdf06 	br	200bcb8 <___vfiprintf_internal_r+0xdc4>
 200bd3c:	05c080b4 	movhi	r23,514
 200bd40:	bde99c04 	addi	r23,r23,-22928
 200bd44:	003dbe06 	br	200b440 <___vfiprintf_internal_r+0x54c>
 200bd48:	d9013b17 	ldw	r4,1260(sp)
 200bd4c:	2080004c 	andi	r2,r4,1
 200bd50:	1000421e 	bne	r2,zero,200be5c <___vfiprintf_internal_r+0xf68>
 200bd54:	d9400e04 	addi	r5,sp,56
 200bd58:	df000404 	addi	fp,sp,16
 200bd5c:	d9413c15 	stw	r5,1264(sp)
 200bd60:	003e7706 	br	200b740 <___vfiprintf_internal_r+0x84c>
 200bd64:	d9413b17 	ldw	r5,1260(sp)
 200bd68:	2880040c 	andi	r2,r5,16
 200bd6c:	10001c1e 	bne	r2,zero,200bde0 <___vfiprintf_internal_r+0xeec>
 200bd70:	d9813b17 	ldw	r6,1260(sp)
 200bd74:	3080100c 	andi	r2,r6,64
 200bd78:	10001926 	beq	r2,zero,200bde0 <___vfiprintf_internal_r+0xeec>
 200bd7c:	3c00000b 	ldhu	r16,0(r7)
 200bd80:	0023883a 	mov	r17,zero
 200bd84:	39c00104 	addi	r7,r7,4
 200bd88:	d9c13515 	stw	r7,1236(sp)
 200bd8c:	003f3706 	br	200ba6c <___vfiprintf_internal_r+0xb78>
 200bd90:	3c000017 	ldw	r16,0(r7)
 200bd94:	0009883a 	mov	r4,zero
 200bd98:	39c00104 	addi	r7,r7,4
 200bd9c:	0023883a 	mov	r17,zero
 200bda0:	d9c13515 	stw	r7,1236(sp)
 200bda4:	d8000005 	stb	zero,0(sp)
 200bda8:	003e5806 	br	200b70c <___vfiprintf_internal_r+0x818>
 200bdac:	3c000017 	ldw	r16,0(r7)
 200bdb0:	01000044 	movi	r4,1
 200bdb4:	39c00104 	addi	r7,r7,4
 200bdb8:	0023883a 	mov	r17,zero
 200bdbc:	d9c13515 	stw	r7,1236(sp)
 200bdc0:	d8000005 	stb	zero,0(sp)
 200bdc4:	003e5106 	br	200b70c <___vfiprintf_internal_r+0x818>
 200bdc8:	38800017 	ldw	r2,0(r7)
 200bdcc:	39c00104 	addi	r7,r7,4
 200bdd0:	d9c13515 	stw	r7,1236(sp)
 200bdd4:	1023d7fa 	srai	r17,r2,31
 200bdd8:	1021883a 	mov	r16,r2
 200bddc:	003e4906 	br	200b704 <___vfiprintf_internal_r+0x810>
 200bde0:	3c000017 	ldw	r16,0(r7)
 200bde4:	0023883a 	mov	r17,zero
 200bde8:	39c00104 	addi	r7,r7,4
 200bdec:	d9c13515 	stw	r7,1236(sp)
 200bdf0:	003f1e06 	br	200ba6c <___vfiprintf_internal_r+0xb78>
 200bdf4:	d9400317 	ldw	r5,12(sp)
 200bdf8:	d9000217 	ldw	r4,8(sp)
 200bdfc:	05c080b4 	movhi	r23,514
 200be00:	bde9a004 	addi	r23,r23,-22912
 200be04:	003d4706 	br	200b324 <___vfiprintf_internal_r+0x430>
 200be08:	d9000e04 	addi	r4,sp,56
 200be0c:	df000404 	addi	fp,sp,16
 200be10:	d9013c15 	stw	r4,1264(sp)
 200be14:	d9813617 	ldw	r6,1240(sp)
 200be18:	880a973a 	slli	r5,r17,28
 200be1c:	8004d13a 	srli	r2,r16,4
 200be20:	810003cc 	andi	r4,r16,15
 200be24:	3109883a 	add	r4,r6,r4
 200be28:	2884b03a 	or	r2,r5,r2
 200be2c:	21400003 	ldbu	r5,0(r4)
 200be30:	d9013c17 	ldw	r4,1264(sp)
 200be34:	8806d13a 	srli	r3,r17,4
 200be38:	1021883a 	mov	r16,r2
 200be3c:	213fffc4 	addi	r4,r4,-1
 200be40:	d9013c15 	stw	r4,1264(sp)
 200be44:	d9813c17 	ldw	r6,1264(sp)
 200be48:	10c8b03a 	or	r4,r2,r3
 200be4c:	1823883a 	mov	r17,r3
 200be50:	31400005 	stb	r5,0(r6)
 200be54:	203fef1e 	bne	r4,zero,200be14 <___vfiprintf_internal_r+0xf20>
 200be58:	003e3906 	br	200b740 <___vfiprintf_internal_r+0x84c>
 200be5c:	00800c04 	movi	r2,48
 200be60:	d9800dc4 	addi	r6,sp,55
 200be64:	df000404 	addi	fp,sp,16
 200be68:	d8800dc5 	stb	r2,55(sp)
 200be6c:	d9813c15 	stw	r6,1264(sp)
 200be70:	003e3306 	br	200b740 <___vfiprintf_internal_r+0x84c>
 200be74:	d9413b17 	ldw	r5,1260(sp)
 200be78:	2880040c 	andi	r2,r5,16
 200be7c:	10002326 	beq	r2,zero,200bf0c <___vfiprintf_internal_r+0x1018>
 200be80:	38800017 	ldw	r2,0(r7)
 200be84:	d9813a17 	ldw	r6,1256(sp)
 200be88:	39c00104 	addi	r7,r7,4
 200be8c:	11800015 	stw	r6,0(r2)
 200be90:	003c6906 	br	200b038 <___vfiprintf_internal_r+0x144>
 200be94:	d9000217 	ldw	r4,8(sp)
 200be98:	05c080b4 	movhi	r23,514
 200be9c:	bde9a004 	addi	r23,r23,-22912
 200bea0:	003d9d06 	br	200b518 <___vfiprintf_internal_r+0x624>
 200bea4:	0005883a 	mov	r2,zero
 200bea8:	1409c83a 	sub	r4,r2,r16
 200beac:	1105803a 	cmpltu	r2,r2,r4
 200beb0:	044bc83a 	sub	r5,zero,r17
 200beb4:	2885c83a 	sub	r2,r5,r2
 200beb8:	2021883a 	mov	r16,r4
 200bebc:	1023883a 	mov	r17,r2
 200bec0:	01000044 	movi	r4,1
 200bec4:	00800b44 	movi	r2,45
 200bec8:	d8800005 	stb	r2,0(sp)
 200becc:	003e0f06 	br	200b70c <___vfiprintf_internal_r+0x818>
 200bed0:	b009883a 	mov	r4,r22
 200bed4:	a80b883a 	mov	r5,r21
 200bed8:	d9800104 	addi	r6,sp,4
 200bedc:	200ae9c0 	call	200ae9c <__sprint_r>
 200bee0:	103da31e 	bne	r2,zero,200b570 <___vfiprintf_internal_r+0x67c>
 200bee4:	003da106 	br	200b56c <___vfiprintf_internal_r+0x678>
 200bee8:	05c080b4 	movhi	r23,514
 200beec:	bde99c04 	addi	r23,r23,-22928
 200bef0:	003dc306 	br	200b600 <___vfiprintf_internal_r+0x70c>
 200bef4:	d8813b17 	ldw	r2,1260(sp)
 200bef8:	a5000044 	addi	r20,r20,1
 200befc:	a0c00007 	ldb	r3,0(r20)
 200bf00:	10800814 	ori	r2,r2,32
 200bf04:	d8813b15 	stw	r2,1260(sp)
 200bf08:	003c6e06 	br	200b0c4 <___vfiprintf_internal_r+0x1d0>
 200bf0c:	d8c13b17 	ldw	r3,1260(sp)
 200bf10:	1880100c 	andi	r2,r3,64
 200bf14:	10001a26 	beq	r2,zero,200bf80 <___vfiprintf_internal_r+0x108c>
 200bf18:	38800017 	ldw	r2,0(r7)
 200bf1c:	d9013a17 	ldw	r4,1256(sp)
 200bf20:	39c00104 	addi	r7,r7,4
 200bf24:	1100000d 	sth	r4,0(r2)
 200bf28:	003c4306 	br	200b038 <___vfiprintf_internal_r+0x144>
 200bf2c:	d9013c17 	ldw	r4,1264(sp)
 200bf30:	2004d2c0 	call	2004d2c <strlen>
 200bf34:	d8813715 	stw	r2,1244(sp)
 200bf38:	d8013815 	stw	zero,1248(sp)
 200bf3c:	003e0506 	br	200b754 <___vfiprintf_internal_r+0x860>
 200bf40:	00800184 	movi	r2,6
 200bf44:	15c00836 	bltu	r2,r23,200bf68 <___vfiprintf_internal_r+0x1074>
 200bf48:	b839883a 	mov	fp,r23
 200bf4c:	b800010e 	bge	r23,zero,200bf54 <___vfiprintf_internal_r+0x1060>
 200bf50:	0039883a 	mov	fp,zero
 200bf54:	014080b4 	movhi	r5,514
 200bf58:	29692804 	addi	r5,r5,-23392
 200bf5c:	ddc13715 	stw	r23,1244(sp)
 200bf60:	d9413c15 	stw	r5,1264(sp)
 200bf64:	003cc406 	br	200b278 <___vfiprintf_internal_r+0x384>
 200bf68:	010080b4 	movhi	r4,514
 200bf6c:	21292804 	addi	r4,r4,-23392
 200bf70:	1039883a 	mov	fp,r2
 200bf74:	d9013c15 	stw	r4,1264(sp)
 200bf78:	d8813715 	stw	r2,1244(sp)
 200bf7c:	003cbe06 	br	200b278 <___vfiprintf_internal_r+0x384>
 200bf80:	38800017 	ldw	r2,0(r7)
 200bf84:	d9413a17 	ldw	r5,1256(sp)
 200bf88:	39c00104 	addi	r7,r7,4
 200bf8c:	11400015 	stw	r5,0(r2)
 200bf90:	003c2906 	br	200b038 <___vfiprintf_internal_r+0x144>
 200bf94:	002f883a 	mov	r23,zero
 200bf98:	003c4c06 	br	200b0cc <___vfiprintf_internal_r+0x1d8>
 200bf9c:	3dc00017 	ldw	r23,0(r7)
 200bfa0:	39c00104 	addi	r7,r7,4
 200bfa4:	b83f0c0e 	bge	r23,zero,200bbd8 <___vfiprintf_internal_r+0xce4>
 200bfa8:	a0c00007 	ldb	r3,0(r20)
 200bfac:	05ffffc4 	movi	r23,-1
 200bfb0:	003c4406 	br	200b0c4 <___vfiprintf_internal_r+0x1d0>

0200bfb4 <__vfiprintf_internal>:
 200bfb4:	008080b4 	movhi	r2,514
 200bfb8:	10b0e304 	addi	r2,r2,-15476
 200bfbc:	2013883a 	mov	r9,r4
 200bfc0:	11000017 	ldw	r4,0(r2)
 200bfc4:	2805883a 	mov	r2,r5
 200bfc8:	300f883a 	mov	r7,r6
 200bfcc:	480b883a 	mov	r5,r9
 200bfd0:	100d883a 	mov	r6,r2
 200bfd4:	200aef41 	jmpi	200aef4 <___vfiprintf_internal_r>

0200bfd8 <_write_r>:
 200bfd8:	defffd04 	addi	sp,sp,-12
 200bfdc:	dc000015 	stw	r16,0(sp)
 200bfe0:	040080b4 	movhi	r16,514
 200bfe4:	8437f704 	addi	r16,r16,-8228
 200bfe8:	dc400115 	stw	r17,4(sp)
 200bfec:	80000015 	stw	zero,0(r16)
 200bff0:	2023883a 	mov	r17,r4
 200bff4:	2809883a 	mov	r4,r5
 200bff8:	300b883a 	mov	r5,r6
 200bffc:	380d883a 	mov	r6,r7
 200c000:	dfc00215 	stw	ra,8(sp)
 200c004:	200f0c80 	call	200f0c8 <write>
 200c008:	1007883a 	mov	r3,r2
 200c00c:	00bfffc4 	movi	r2,-1
 200c010:	18800626 	beq	r3,r2,200c02c <_write_r+0x54>
 200c014:	1805883a 	mov	r2,r3
 200c018:	dfc00217 	ldw	ra,8(sp)
 200c01c:	dc400117 	ldw	r17,4(sp)
 200c020:	dc000017 	ldw	r16,0(sp)
 200c024:	dec00304 	addi	sp,sp,12
 200c028:	f800283a 	ret
 200c02c:	80800017 	ldw	r2,0(r16)
 200c030:	103ff826 	beq	r2,zero,200c014 <_write_r+0x3c>
 200c034:	88800015 	stw	r2,0(r17)
 200c038:	1805883a 	mov	r2,r3
 200c03c:	dfc00217 	ldw	ra,8(sp)
 200c040:	dc400117 	ldw	r17,4(sp)
 200c044:	dc000017 	ldw	r16,0(sp)
 200c048:	dec00304 	addi	sp,sp,12
 200c04c:	f800283a 	ret

0200c050 <_calloc_r>:
 200c050:	defffe04 	addi	sp,sp,-8
 200c054:	dc400015 	stw	r17,0(sp)
 200c058:	2023883a 	mov	r17,r4
 200c05c:	2809883a 	mov	r4,r5
 200c060:	300b883a 	mov	r5,r6
 200c064:	dfc00115 	stw	ra,4(sp)
 200c068:	20032ac0 	call	20032ac <__mulsi3>
 200c06c:	100b883a 	mov	r5,r2
 200c070:	8809883a 	mov	r4,r17
 200c074:	20039040 	call	2003904 <_malloc_r>
 200c078:	1023883a 	mov	r17,r2
 200c07c:	01c00904 	movi	r7,36
 200c080:	10000d26 	beq	r2,zero,200c0b8 <_calloc_r+0x68>
 200c084:	10ffff17 	ldw	r3,-4(r2)
 200c088:	1009883a 	mov	r4,r2
 200c08c:	00bfff04 	movi	r2,-4
 200c090:	1886703a 	and	r3,r3,r2
 200c094:	1887883a 	add	r3,r3,r2
 200c098:	180d883a 	mov	r6,r3
 200c09c:	000b883a 	mov	r5,zero
 200c0a0:	38c01736 	bltu	r7,r3,200c100 <_calloc_r+0xb0>
 200c0a4:	008004c4 	movi	r2,19
 200c0a8:	10c00836 	bltu	r2,r3,200c0cc <_calloc_r+0x7c>
 200c0ac:	20000215 	stw	zero,8(r4)
 200c0b0:	20000015 	stw	zero,0(r4)
 200c0b4:	20000115 	stw	zero,4(r4)
 200c0b8:	8805883a 	mov	r2,r17
 200c0bc:	dfc00117 	ldw	ra,4(sp)
 200c0c0:	dc400017 	ldw	r17,0(sp)
 200c0c4:	dec00204 	addi	sp,sp,8
 200c0c8:	f800283a 	ret
 200c0cc:	008006c4 	movi	r2,27
 200c0d0:	88000015 	stw	zero,0(r17)
 200c0d4:	88000115 	stw	zero,4(r17)
 200c0d8:	89000204 	addi	r4,r17,8
 200c0dc:	10fff32e 	bgeu	r2,r3,200c0ac <_calloc_r+0x5c>
 200c0e0:	88000215 	stw	zero,8(r17)
 200c0e4:	88000315 	stw	zero,12(r17)
 200c0e8:	89000404 	addi	r4,r17,16
 200c0ec:	19ffef1e 	bne	r3,r7,200c0ac <_calloc_r+0x5c>
 200c0f0:	89000604 	addi	r4,r17,24
 200c0f4:	88000415 	stw	zero,16(r17)
 200c0f8:	88000515 	stw	zero,20(r17)
 200c0fc:	003feb06 	br	200c0ac <_calloc_r+0x5c>
 200c100:	20041c40 	call	20041c4 <memset>
 200c104:	8805883a 	mov	r2,r17
 200c108:	dfc00117 	ldw	ra,4(sp)
 200c10c:	dc400017 	ldw	r17,0(sp)
 200c110:	dec00204 	addi	sp,sp,8
 200c114:	f800283a 	ret

0200c118 <_close_r>:
 200c118:	defffd04 	addi	sp,sp,-12
 200c11c:	dc000015 	stw	r16,0(sp)
 200c120:	040080b4 	movhi	r16,514
 200c124:	8437f704 	addi	r16,r16,-8228
 200c128:	dc400115 	stw	r17,4(sp)
 200c12c:	80000015 	stw	zero,0(r16)
 200c130:	2023883a 	mov	r17,r4
 200c134:	2809883a 	mov	r4,r5
 200c138:	dfc00215 	stw	ra,8(sp)
 200c13c:	200e06c0 	call	200e06c <close>
 200c140:	1007883a 	mov	r3,r2
 200c144:	00bfffc4 	movi	r2,-1
 200c148:	18800626 	beq	r3,r2,200c164 <_close_r+0x4c>
 200c14c:	1805883a 	mov	r2,r3
 200c150:	dfc00217 	ldw	ra,8(sp)
 200c154:	dc400117 	ldw	r17,4(sp)
 200c158:	dc000017 	ldw	r16,0(sp)
 200c15c:	dec00304 	addi	sp,sp,12
 200c160:	f800283a 	ret
 200c164:	80800017 	ldw	r2,0(r16)
 200c168:	103ff826 	beq	r2,zero,200c14c <_close_r+0x34>
 200c16c:	88800015 	stw	r2,0(r17)
 200c170:	1805883a 	mov	r2,r3
 200c174:	dfc00217 	ldw	ra,8(sp)
 200c178:	dc400117 	ldw	r17,4(sp)
 200c17c:	dc000017 	ldw	r16,0(sp)
 200c180:	dec00304 	addi	sp,sp,12
 200c184:	f800283a 	ret

0200c188 <_fclose_r>:
 200c188:	defffc04 	addi	sp,sp,-16
 200c18c:	dc400115 	stw	r17,4(sp)
 200c190:	dc000015 	stw	r16,0(sp)
 200c194:	dfc00315 	stw	ra,12(sp)
 200c198:	dc800215 	stw	r18,8(sp)
 200c19c:	2821883a 	mov	r16,r5
 200c1a0:	2023883a 	mov	r17,r4
 200c1a4:	28002926 	beq	r5,zero,200c24c <_fclose_r+0xc4>
 200c1a8:	20088d00 	call	20088d0 <__sfp_lock_acquire>
 200c1ac:	88000226 	beq	r17,zero,200c1b8 <_fclose_r+0x30>
 200c1b0:	88800e17 	ldw	r2,56(r17)
 200c1b4:	10002d26 	beq	r2,zero,200c26c <_fclose_r+0xe4>
 200c1b8:	8080030f 	ldh	r2,12(r16)
 200c1bc:	10002226 	beq	r2,zero,200c248 <_fclose_r+0xc0>
 200c1c0:	8809883a 	mov	r4,r17
 200c1c4:	800b883a 	mov	r5,r16
 200c1c8:	20086480 	call	2008648 <_fflush_r>
 200c1cc:	1025883a 	mov	r18,r2
 200c1d0:	80800b17 	ldw	r2,44(r16)
 200c1d4:	10000426 	beq	r2,zero,200c1e8 <_fclose_r+0x60>
 200c1d8:	81400717 	ldw	r5,28(r16)
 200c1dc:	8809883a 	mov	r4,r17
 200c1e0:	103ee83a 	callr	r2
 200c1e4:	10002a16 	blt	r2,zero,200c290 <_fclose_r+0x108>
 200c1e8:	8080030b 	ldhu	r2,12(r16)
 200c1ec:	1080200c 	andi	r2,r2,128
 200c1f0:	1000231e 	bne	r2,zero,200c280 <_fclose_r+0xf8>
 200c1f4:	81400c17 	ldw	r5,48(r16)
 200c1f8:	28000526 	beq	r5,zero,200c210 <_fclose_r+0x88>
 200c1fc:	80801004 	addi	r2,r16,64
 200c200:	28800226 	beq	r5,r2,200c20c <_fclose_r+0x84>
 200c204:	8809883a 	mov	r4,r17
 200c208:	2008c980 	call	2008c98 <_free_r>
 200c20c:	80000c15 	stw	zero,48(r16)
 200c210:	81401117 	ldw	r5,68(r16)
 200c214:	28000326 	beq	r5,zero,200c224 <_fclose_r+0x9c>
 200c218:	8809883a 	mov	r4,r17
 200c21c:	2008c980 	call	2008c98 <_free_r>
 200c220:	80001115 	stw	zero,68(r16)
 200c224:	8000030d 	sth	zero,12(r16)
 200c228:	20088d40 	call	20088d4 <__sfp_lock_release>
 200c22c:	9005883a 	mov	r2,r18
 200c230:	dfc00317 	ldw	ra,12(sp)
 200c234:	dc800217 	ldw	r18,8(sp)
 200c238:	dc400117 	ldw	r17,4(sp)
 200c23c:	dc000017 	ldw	r16,0(sp)
 200c240:	dec00404 	addi	sp,sp,16
 200c244:	f800283a 	ret
 200c248:	20088d40 	call	20088d4 <__sfp_lock_release>
 200c24c:	0025883a 	mov	r18,zero
 200c250:	9005883a 	mov	r2,r18
 200c254:	dfc00317 	ldw	ra,12(sp)
 200c258:	dc800217 	ldw	r18,8(sp)
 200c25c:	dc400117 	ldw	r17,4(sp)
 200c260:	dc000017 	ldw	r16,0(sp)
 200c264:	dec00404 	addi	sp,sp,16
 200c268:	f800283a 	ret
 200c26c:	8809883a 	mov	r4,r17
 200c270:	20088e00 	call	20088e0 <__sinit>
 200c274:	8080030f 	ldh	r2,12(r16)
 200c278:	103fd11e 	bne	r2,zero,200c1c0 <_fclose_r+0x38>
 200c27c:	003ff206 	br	200c248 <_fclose_r+0xc0>
 200c280:	81400417 	ldw	r5,16(r16)
 200c284:	8809883a 	mov	r4,r17
 200c288:	2008c980 	call	2008c98 <_free_r>
 200c28c:	003fd906 	br	200c1f4 <_fclose_r+0x6c>
 200c290:	04bfffc4 	movi	r18,-1
 200c294:	003fd406 	br	200c1e8 <_fclose_r+0x60>

0200c298 <fclose>:
 200c298:	008080b4 	movhi	r2,514
 200c29c:	10b0e304 	addi	r2,r2,-15476
 200c2a0:	200b883a 	mov	r5,r4
 200c2a4:	11000017 	ldw	r4,0(r2)
 200c2a8:	200c1881 	jmpi	200c188 <_fclose_r>

0200c2ac <_fstat_r>:
 200c2ac:	defffd04 	addi	sp,sp,-12
 200c2b0:	dc000015 	stw	r16,0(sp)
 200c2b4:	040080b4 	movhi	r16,514
 200c2b8:	8437f704 	addi	r16,r16,-8228
 200c2bc:	dc400115 	stw	r17,4(sp)
 200c2c0:	80000015 	stw	zero,0(r16)
 200c2c4:	2023883a 	mov	r17,r4
 200c2c8:	2809883a 	mov	r4,r5
 200c2cc:	300b883a 	mov	r5,r6
 200c2d0:	dfc00215 	stw	ra,8(sp)
 200c2d4:	200e2640 	call	200e264 <fstat>
 200c2d8:	1007883a 	mov	r3,r2
 200c2dc:	00bfffc4 	movi	r2,-1
 200c2e0:	18800626 	beq	r3,r2,200c2fc <_fstat_r+0x50>
 200c2e4:	1805883a 	mov	r2,r3
 200c2e8:	dfc00217 	ldw	ra,8(sp)
 200c2ec:	dc400117 	ldw	r17,4(sp)
 200c2f0:	dc000017 	ldw	r16,0(sp)
 200c2f4:	dec00304 	addi	sp,sp,12
 200c2f8:	f800283a 	ret
 200c2fc:	80800017 	ldw	r2,0(r16)
 200c300:	103ff826 	beq	r2,zero,200c2e4 <_fstat_r+0x38>
 200c304:	88800015 	stw	r2,0(r17)
 200c308:	1805883a 	mov	r2,r3
 200c30c:	dfc00217 	ldw	ra,8(sp)
 200c310:	dc400117 	ldw	r17,4(sp)
 200c314:	dc000017 	ldw	r16,0(sp)
 200c318:	dec00304 	addi	sp,sp,12
 200c31c:	f800283a 	ret

0200c320 <_isatty_r>:
 200c320:	defffd04 	addi	sp,sp,-12
 200c324:	dc000015 	stw	r16,0(sp)
 200c328:	040080b4 	movhi	r16,514
 200c32c:	8437f704 	addi	r16,r16,-8228
 200c330:	dc400115 	stw	r17,4(sp)
 200c334:	80000015 	stw	zero,0(r16)
 200c338:	2023883a 	mov	r17,r4
 200c33c:	2809883a 	mov	r4,r5
 200c340:	dfc00215 	stw	ra,8(sp)
 200c344:	200e57c0 	call	200e57c <isatty>
 200c348:	1007883a 	mov	r3,r2
 200c34c:	00bfffc4 	movi	r2,-1
 200c350:	18800626 	beq	r3,r2,200c36c <_isatty_r+0x4c>
 200c354:	1805883a 	mov	r2,r3
 200c358:	dfc00217 	ldw	ra,8(sp)
 200c35c:	dc400117 	ldw	r17,4(sp)
 200c360:	dc000017 	ldw	r16,0(sp)
 200c364:	dec00304 	addi	sp,sp,12
 200c368:	f800283a 	ret
 200c36c:	80800017 	ldw	r2,0(r16)
 200c370:	103ff826 	beq	r2,zero,200c354 <_isatty_r+0x34>
 200c374:	88800015 	stw	r2,0(r17)
 200c378:	1805883a 	mov	r2,r3
 200c37c:	dfc00217 	ldw	ra,8(sp)
 200c380:	dc400117 	ldw	r17,4(sp)
 200c384:	dc000017 	ldw	r16,0(sp)
 200c388:	dec00304 	addi	sp,sp,12
 200c38c:	f800283a 	ret

0200c390 <_lseek_r>:
 200c390:	defffd04 	addi	sp,sp,-12
 200c394:	dc000015 	stw	r16,0(sp)
 200c398:	040080b4 	movhi	r16,514
 200c39c:	8437f704 	addi	r16,r16,-8228
 200c3a0:	dc400115 	stw	r17,4(sp)
 200c3a4:	80000015 	stw	zero,0(r16)
 200c3a8:	2023883a 	mov	r17,r4
 200c3ac:	2809883a 	mov	r4,r5
 200c3b0:	300b883a 	mov	r5,r6
 200c3b4:	380d883a 	mov	r6,r7
 200c3b8:	dfc00215 	stw	ra,8(sp)
 200c3bc:	200e92c0 	call	200e92c <lseek>
 200c3c0:	1007883a 	mov	r3,r2
 200c3c4:	00bfffc4 	movi	r2,-1
 200c3c8:	18800626 	beq	r3,r2,200c3e4 <_lseek_r+0x54>
 200c3cc:	1805883a 	mov	r2,r3
 200c3d0:	dfc00217 	ldw	ra,8(sp)
 200c3d4:	dc400117 	ldw	r17,4(sp)
 200c3d8:	dc000017 	ldw	r16,0(sp)
 200c3dc:	dec00304 	addi	sp,sp,12
 200c3e0:	f800283a 	ret
 200c3e4:	80800017 	ldw	r2,0(r16)
 200c3e8:	103ff826 	beq	r2,zero,200c3cc <_lseek_r+0x3c>
 200c3ec:	88800015 	stw	r2,0(r17)
 200c3f0:	1805883a 	mov	r2,r3
 200c3f4:	dfc00217 	ldw	ra,8(sp)
 200c3f8:	dc400117 	ldw	r17,4(sp)
 200c3fc:	dc000017 	ldw	r16,0(sp)
 200c400:	dec00304 	addi	sp,sp,12
 200c404:	f800283a 	ret

0200c408 <_read_r>:
 200c408:	defffd04 	addi	sp,sp,-12
 200c40c:	dc000015 	stw	r16,0(sp)
 200c410:	040080b4 	movhi	r16,514
 200c414:	8437f704 	addi	r16,r16,-8228
 200c418:	dc400115 	stw	r17,4(sp)
 200c41c:	80000015 	stw	zero,0(r16)
 200c420:	2023883a 	mov	r17,r4
 200c424:	2809883a 	mov	r4,r5
 200c428:	300b883a 	mov	r5,r6
 200c42c:	380d883a 	mov	r6,r7
 200c430:	dfc00215 	stw	ra,8(sp)
 200c434:	200eb480 	call	200eb48 <read>
 200c438:	1007883a 	mov	r3,r2
 200c43c:	00bfffc4 	movi	r2,-1
 200c440:	18800626 	beq	r3,r2,200c45c <_read_r+0x54>
 200c444:	1805883a 	mov	r2,r3
 200c448:	dfc00217 	ldw	ra,8(sp)
 200c44c:	dc400117 	ldw	r17,4(sp)
 200c450:	dc000017 	ldw	r16,0(sp)
 200c454:	dec00304 	addi	sp,sp,12
 200c458:	f800283a 	ret
 200c45c:	80800017 	ldw	r2,0(r16)
 200c460:	103ff826 	beq	r2,zero,200c444 <_read_r+0x3c>
 200c464:	88800015 	stw	r2,0(r17)
 200c468:	1805883a 	mov	r2,r3
 200c46c:	dfc00217 	ldw	ra,8(sp)
 200c470:	dc400117 	ldw	r17,4(sp)
 200c474:	dc000017 	ldw	r16,0(sp)
 200c478:	dec00304 	addi	sp,sp,12
 200c47c:	f800283a 	ret

0200c480 <__udivdi3>:
 200c480:	defff104 	addi	sp,sp,-60
 200c484:	0015883a 	mov	r10,zero
 200c488:	2005883a 	mov	r2,r4
 200c48c:	3011883a 	mov	r8,r6
 200c490:	df000d15 	stw	fp,52(sp)
 200c494:	dd400a15 	stw	r21,40(sp)
 200c498:	dcc00815 	stw	r19,32(sp)
 200c49c:	dfc00e15 	stw	ra,56(sp)
 200c4a0:	ddc00c15 	stw	r23,48(sp)
 200c4a4:	dd800b15 	stw	r22,44(sp)
 200c4a8:	dd000915 	stw	r20,36(sp)
 200c4ac:	dc800715 	stw	r18,28(sp)
 200c4b0:	dc400615 	stw	r17,24(sp)
 200c4b4:	dc000515 	stw	r16,20(sp)
 200c4b8:	da800315 	stw	r10,12(sp)
 200c4bc:	4027883a 	mov	r19,r8
 200c4c0:	1039883a 	mov	fp,r2
 200c4c4:	282b883a 	mov	r21,r5
 200c4c8:	da800415 	stw	r10,16(sp)
 200c4cc:	3800401e 	bne	r7,zero,200c5d0 <__udivdi3+0x150>
 200c4d0:	2a006536 	bltu	r5,r8,200c668 <__udivdi3+0x1e8>
 200c4d4:	4000b526 	beq	r8,zero,200c7ac <__udivdi3+0x32c>
 200c4d8:	00bfffd4 	movui	r2,65535
 200c4dc:	14c0ad36 	bltu	r2,r19,200c794 <__udivdi3+0x314>
 200c4e0:	00803fc4 	movi	r2,255
 200c4e4:	14c15e36 	bltu	r2,r19,200ca60 <__udivdi3+0x5e0>
 200c4e8:	000b883a 	mov	r5,zero
 200c4ec:	0005883a 	mov	r2,zero
 200c4f0:	9884d83a 	srl	r2,r19,r2
 200c4f4:	010080b4 	movhi	r4,514
 200c4f8:	2129a404 	addi	r4,r4,-22896
 200c4fc:	01800804 	movi	r6,32
 200c500:	1105883a 	add	r2,r2,r4
 200c504:	10c00003 	ldbu	r3,0(r2)
 200c508:	28c7883a 	add	r3,r5,r3
 200c50c:	30e9c83a 	sub	r20,r6,r3
 200c510:	a0010a1e 	bne	r20,zero,200c93c <__udivdi3+0x4bc>
 200c514:	982ed43a 	srli	r23,r19,16
 200c518:	acebc83a 	sub	r21,r21,r19
 200c51c:	9dbfffcc 	andi	r22,r19,65535
 200c520:	05000044 	movi	r20,1
 200c524:	a809883a 	mov	r4,r21
 200c528:	b80b883a 	mov	r5,r23
 200c52c:	200329c0 	call	200329c <__udivsi3>
 200c530:	100b883a 	mov	r5,r2
 200c534:	b009883a 	mov	r4,r22
 200c538:	1021883a 	mov	r16,r2
 200c53c:	20032ac0 	call	20032ac <__mulsi3>
 200c540:	a809883a 	mov	r4,r21
 200c544:	b80b883a 	mov	r5,r23
 200c548:	1023883a 	mov	r17,r2
 200c54c:	20032a40 	call	20032a4 <__umodsi3>
 200c550:	1004943a 	slli	r2,r2,16
 200c554:	e006d43a 	srli	r3,fp,16
 200c558:	10c4b03a 	or	r2,r2,r3
 200c55c:	1440042e 	bgeu	r2,r17,200c570 <__udivdi3+0xf0>
 200c560:	14c5883a 	add	r2,r2,r19
 200c564:	843fffc4 	addi	r16,r16,-1
 200c568:	14c00136 	bltu	r2,r19,200c570 <__udivdi3+0xf0>
 200c56c:	14415c36 	bltu	r2,r17,200cae0 <__udivdi3+0x660>
 200c570:	1463c83a 	sub	r17,r2,r17
 200c574:	8809883a 	mov	r4,r17
 200c578:	b80b883a 	mov	r5,r23
 200c57c:	200329c0 	call	200329c <__udivsi3>
 200c580:	100b883a 	mov	r5,r2
 200c584:	b009883a 	mov	r4,r22
 200c588:	102b883a 	mov	r21,r2
 200c58c:	20032ac0 	call	20032ac <__mulsi3>
 200c590:	8809883a 	mov	r4,r17
 200c594:	b80b883a 	mov	r5,r23
 200c598:	1025883a 	mov	r18,r2
 200c59c:	20032a40 	call	20032a4 <__umodsi3>
 200c5a0:	1004943a 	slli	r2,r2,16
 200c5a4:	e0ffffcc 	andi	r3,fp,65535
 200c5a8:	10c4b03a 	or	r2,r2,r3
 200c5ac:	1480042e 	bgeu	r2,r18,200c5c0 <__udivdi3+0x140>
 200c5b0:	9885883a 	add	r2,r19,r2
 200c5b4:	ad7fffc4 	addi	r21,r21,-1
 200c5b8:	14c00136 	bltu	r2,r19,200c5c0 <__udivdi3+0x140>
 200c5bc:	14813c36 	bltu	r2,r18,200cab0 <__udivdi3+0x630>
 200c5c0:	8004943a 	slli	r2,r16,16
 200c5c4:	a009883a 	mov	r4,r20
 200c5c8:	a884b03a 	or	r2,r21,r2
 200c5cc:	00001506 	br	200c624 <__udivdi3+0x1a4>
 200c5d0:	380d883a 	mov	r6,r7
 200c5d4:	29c06c36 	bltu	r5,r7,200c788 <__udivdi3+0x308>
 200c5d8:	00bfffd4 	movui	r2,65535
 200c5dc:	11c06436 	bltu	r2,r7,200c770 <__udivdi3+0x2f0>
 200c5e0:	00803fc4 	movi	r2,255
 200c5e4:	11c11836 	bltu	r2,r7,200ca48 <__udivdi3+0x5c8>
 200c5e8:	000b883a 	mov	r5,zero
 200c5ec:	0005883a 	mov	r2,zero
 200c5f0:	3084d83a 	srl	r2,r6,r2
 200c5f4:	010080b4 	movhi	r4,514
 200c5f8:	2129a404 	addi	r4,r4,-22896
 200c5fc:	01c00804 	movi	r7,32
 200c600:	1105883a 	add	r2,r2,r4
 200c604:	10c00003 	ldbu	r3,0(r2)
 200c608:	28c7883a 	add	r3,r5,r3
 200c60c:	38edc83a 	sub	r22,r7,r3
 200c610:	b000731e 	bne	r22,zero,200c7e0 <__udivdi3+0x360>
 200c614:	35400136 	bltu	r6,r21,200c61c <__udivdi3+0x19c>
 200c618:	e4c05b36 	bltu	fp,r19,200c788 <__udivdi3+0x308>
 200c61c:	00800044 	movi	r2,1
 200c620:	0009883a 	mov	r4,zero
 200c624:	d8800315 	stw	r2,12(sp)
 200c628:	d9400317 	ldw	r5,12(sp)
 200c62c:	2007883a 	mov	r3,r4
 200c630:	d9000415 	stw	r4,16(sp)
 200c634:	2805883a 	mov	r2,r5
 200c638:	dfc00e17 	ldw	ra,56(sp)
 200c63c:	df000d17 	ldw	fp,52(sp)
 200c640:	ddc00c17 	ldw	r23,48(sp)
 200c644:	dd800b17 	ldw	r22,44(sp)
 200c648:	dd400a17 	ldw	r21,40(sp)
 200c64c:	dd000917 	ldw	r20,36(sp)
 200c650:	dcc00817 	ldw	r19,32(sp)
 200c654:	dc800717 	ldw	r18,28(sp)
 200c658:	dc400617 	ldw	r17,24(sp)
 200c65c:	dc000517 	ldw	r16,20(sp)
 200c660:	dec00f04 	addi	sp,sp,60
 200c664:	f800283a 	ret
 200c668:	00bfffd4 	movui	r2,65535
 200c66c:	12005636 	bltu	r2,r8,200c7c8 <__udivdi3+0x348>
 200c670:	00803fc4 	movi	r2,255
 200c674:	12010036 	bltu	r2,r8,200ca78 <__udivdi3+0x5f8>
 200c678:	000b883a 	mov	r5,zero
 200c67c:	0005883a 	mov	r2,zero
 200c680:	9884d83a 	srl	r2,r19,r2
 200c684:	010080b4 	movhi	r4,514
 200c688:	2129a404 	addi	r4,r4,-22896
 200c68c:	01800804 	movi	r6,32
 200c690:	1105883a 	add	r2,r2,r4
 200c694:	10c00003 	ldbu	r3,0(r2)
 200c698:	28c7883a 	add	r3,r5,r3
 200c69c:	30cbc83a 	sub	r5,r6,r3
 200c6a0:	28000626 	beq	r5,zero,200c6bc <__udivdi3+0x23c>
 200c6a4:	3145c83a 	sub	r2,r6,r5
 200c6a8:	e084d83a 	srl	r2,fp,r2
 200c6ac:	a946983a 	sll	r3,r21,r5
 200c6b0:	e178983a 	sll	fp,fp,r5
 200c6b4:	9966983a 	sll	r19,r19,r5
 200c6b8:	18aab03a 	or	r21,r3,r2
 200c6bc:	982ed43a 	srli	r23,r19,16
 200c6c0:	a809883a 	mov	r4,r21
 200c6c4:	9cbfffcc 	andi	r18,r19,65535
 200c6c8:	b80b883a 	mov	r5,r23
 200c6cc:	200329c0 	call	200329c <__udivsi3>
 200c6d0:	100b883a 	mov	r5,r2
 200c6d4:	9009883a 	mov	r4,r18
 200c6d8:	1021883a 	mov	r16,r2
 200c6dc:	20032ac0 	call	20032ac <__mulsi3>
 200c6e0:	a809883a 	mov	r4,r21
 200c6e4:	b80b883a 	mov	r5,r23
 200c6e8:	1023883a 	mov	r17,r2
 200c6ec:	20032a40 	call	20032a4 <__umodsi3>
 200c6f0:	1004943a 	slli	r2,r2,16
 200c6f4:	e006d43a 	srli	r3,fp,16
 200c6f8:	10c4b03a 	or	r2,r2,r3
 200c6fc:	1440042e 	bgeu	r2,r17,200c710 <__udivdi3+0x290>
 200c700:	14c5883a 	add	r2,r2,r19
 200c704:	843fffc4 	addi	r16,r16,-1
 200c708:	14c00136 	bltu	r2,r19,200c710 <__udivdi3+0x290>
 200c70c:	1440ea36 	bltu	r2,r17,200cab8 <__udivdi3+0x638>
 200c710:	1463c83a 	sub	r17,r2,r17
 200c714:	8809883a 	mov	r4,r17
 200c718:	b80b883a 	mov	r5,r23
 200c71c:	200329c0 	call	200329c <__udivsi3>
 200c720:	100b883a 	mov	r5,r2
 200c724:	9009883a 	mov	r4,r18
 200c728:	102b883a 	mov	r21,r2
 200c72c:	20032ac0 	call	20032ac <__mulsi3>
 200c730:	8809883a 	mov	r4,r17
 200c734:	b80b883a 	mov	r5,r23
 200c738:	1025883a 	mov	r18,r2
 200c73c:	20032a40 	call	20032a4 <__umodsi3>
 200c740:	1004943a 	slli	r2,r2,16
 200c744:	e0ffffcc 	andi	r3,fp,65535
 200c748:	10c4b03a 	or	r2,r2,r3
 200c74c:	1480042e 	bgeu	r2,r18,200c760 <__udivdi3+0x2e0>
 200c750:	9885883a 	add	r2,r19,r2
 200c754:	ad7fffc4 	addi	r21,r21,-1
 200c758:	14c00136 	bltu	r2,r19,200c760 <__udivdi3+0x2e0>
 200c75c:	1480d936 	bltu	r2,r18,200cac4 <__udivdi3+0x644>
 200c760:	8004943a 	slli	r2,r16,16
 200c764:	0009883a 	mov	r4,zero
 200c768:	a884b03a 	or	r2,r21,r2
 200c76c:	003fad06 	br	200c624 <__udivdi3+0x1a4>
 200c770:	00804034 	movhi	r2,256
 200c774:	10bfffc4 	addi	r2,r2,-1
 200c778:	11c0b636 	bltu	r2,r7,200ca54 <__udivdi3+0x5d4>
 200c77c:	01400404 	movi	r5,16
 200c780:	2805883a 	mov	r2,r5
 200c784:	003f9a06 	br	200c5f0 <__udivdi3+0x170>
 200c788:	0005883a 	mov	r2,zero
 200c78c:	0009883a 	mov	r4,zero
 200c790:	003fa406 	br	200c624 <__udivdi3+0x1a4>
 200c794:	00804034 	movhi	r2,256
 200c798:	10bfffc4 	addi	r2,r2,-1
 200c79c:	14c0b336 	bltu	r2,r19,200ca6c <__udivdi3+0x5ec>
 200c7a0:	01400404 	movi	r5,16
 200c7a4:	2805883a 	mov	r2,r5
 200c7a8:	003f5106 	br	200c4f0 <__udivdi3+0x70>
 200c7ac:	01000044 	movi	r4,1
 200c7b0:	000b883a 	mov	r5,zero
 200c7b4:	200329c0 	call	200329c <__udivsi3>
 200c7b8:	1027883a 	mov	r19,r2
 200c7bc:	00bfffd4 	movui	r2,65535
 200c7c0:	14fff436 	bltu	r2,r19,200c794 <__udivdi3+0x314>
 200c7c4:	003f4606 	br	200c4e0 <__udivdi3+0x60>
 200c7c8:	00804034 	movhi	r2,256
 200c7cc:	10bfffc4 	addi	r2,r2,-1
 200c7d0:	1200ac36 	bltu	r2,r8,200ca84 <__udivdi3+0x604>
 200c7d4:	01400404 	movi	r5,16
 200c7d8:	2805883a 	mov	r2,r5
 200c7dc:	003fa806 	br	200c680 <__udivdi3+0x200>
 200c7e0:	3d85c83a 	sub	r2,r7,r22
 200c7e4:	3588983a 	sll	r4,r6,r22
 200c7e8:	9886d83a 	srl	r3,r19,r2
 200c7ec:	a8a2d83a 	srl	r17,r21,r2
 200c7f0:	e084d83a 	srl	r2,fp,r2
 200c7f4:	20eeb03a 	or	r23,r4,r3
 200c7f8:	b824d43a 	srli	r18,r23,16
 200c7fc:	ad86983a 	sll	r3,r21,r22
 200c800:	8809883a 	mov	r4,r17
 200c804:	900b883a 	mov	r5,r18
 200c808:	1886b03a 	or	r3,r3,r2
 200c80c:	d8c00115 	stw	r3,4(sp)
 200c810:	bc3fffcc 	andi	r16,r23,65535
 200c814:	200329c0 	call	200329c <__udivsi3>
 200c818:	100b883a 	mov	r5,r2
 200c81c:	8009883a 	mov	r4,r16
 200c820:	1029883a 	mov	r20,r2
 200c824:	20032ac0 	call	20032ac <__mulsi3>
 200c828:	900b883a 	mov	r5,r18
 200c82c:	8809883a 	mov	r4,r17
 200c830:	102b883a 	mov	r21,r2
 200c834:	20032a40 	call	20032a4 <__umodsi3>
 200c838:	d9400117 	ldw	r5,4(sp)
 200c83c:	1004943a 	slli	r2,r2,16
 200c840:	9da6983a 	sll	r19,r19,r22
 200c844:	2806d43a 	srli	r3,r5,16
 200c848:	10c4b03a 	or	r2,r2,r3
 200c84c:	1540032e 	bgeu	r2,r21,200c85c <__udivdi3+0x3dc>
 200c850:	15c5883a 	add	r2,r2,r23
 200c854:	a53fffc4 	addi	r20,r20,-1
 200c858:	15c0912e 	bgeu	r2,r23,200caa0 <__udivdi3+0x620>
 200c85c:	1563c83a 	sub	r17,r2,r21
 200c860:	8809883a 	mov	r4,r17
 200c864:	900b883a 	mov	r5,r18
 200c868:	200329c0 	call	200329c <__udivsi3>
 200c86c:	100b883a 	mov	r5,r2
 200c870:	8009883a 	mov	r4,r16
 200c874:	102b883a 	mov	r21,r2
 200c878:	20032ac0 	call	20032ac <__mulsi3>
 200c87c:	8809883a 	mov	r4,r17
 200c880:	900b883a 	mov	r5,r18
 200c884:	1021883a 	mov	r16,r2
 200c888:	20032a40 	call	20032a4 <__umodsi3>
 200c88c:	da800117 	ldw	r10,4(sp)
 200c890:	1004943a 	slli	r2,r2,16
 200c894:	50ffffcc 	andi	r3,r10,65535
 200c898:	10c6b03a 	or	r3,r2,r3
 200c89c:	1c00032e 	bgeu	r3,r16,200c8ac <__udivdi3+0x42c>
 200c8a0:	1dc7883a 	add	r3,r3,r23
 200c8a4:	ad7fffc4 	addi	r21,r21,-1
 200c8a8:	1dc0792e 	bgeu	r3,r23,200ca90 <__udivdi3+0x610>
 200c8ac:	a004943a 	slli	r2,r20,16
 200c8b0:	982ed43a 	srli	r23,r19,16
 200c8b4:	9cffffcc 	andi	r19,r19,65535
 200c8b8:	a8a4b03a 	or	r18,r21,r2
 200c8bc:	947fffcc 	andi	r17,r18,65535
 200c8c0:	902ad43a 	srli	r21,r18,16
 200c8c4:	8809883a 	mov	r4,r17
 200c8c8:	980b883a 	mov	r5,r19
 200c8cc:	1c21c83a 	sub	r16,r3,r16
 200c8d0:	20032ac0 	call	20032ac <__mulsi3>
 200c8d4:	8809883a 	mov	r4,r17
 200c8d8:	b80b883a 	mov	r5,r23
 200c8dc:	1029883a 	mov	r20,r2
 200c8e0:	20032ac0 	call	20032ac <__mulsi3>
 200c8e4:	980b883a 	mov	r5,r19
 200c8e8:	a809883a 	mov	r4,r21
 200c8ec:	1023883a 	mov	r17,r2
 200c8f0:	20032ac0 	call	20032ac <__mulsi3>
 200c8f4:	a809883a 	mov	r4,r21
 200c8f8:	b80b883a 	mov	r5,r23
 200c8fc:	1027883a 	mov	r19,r2
 200c900:	20032ac0 	call	20032ac <__mulsi3>
 200c904:	1009883a 	mov	r4,r2
 200c908:	a004d43a 	srli	r2,r20,16
 200c90c:	8ce3883a 	add	r17,r17,r19
 200c910:	1447883a 	add	r3,r2,r17
 200c914:	1cc0022e 	bgeu	r3,r19,200c920 <__udivdi3+0x4a0>
 200c918:	00800074 	movhi	r2,1
 200c91c:	2089883a 	add	r4,r4,r2
 200c920:	1804d43a 	srli	r2,r3,16
 200c924:	2085883a 	add	r2,r4,r2
 200c928:	80804436 	bltu	r16,r2,200ca3c <__udivdi3+0x5bc>
 200c92c:	80803e26 	beq	r16,r2,200ca28 <__udivdi3+0x5a8>
 200c930:	9005883a 	mov	r2,r18
 200c934:	0009883a 	mov	r4,zero
 200c938:	003f3a06 	br	200c624 <__udivdi3+0x1a4>
 200c93c:	9d26983a 	sll	r19,r19,r20
 200c940:	3505c83a 	sub	r2,r6,r20
 200c944:	a8a2d83a 	srl	r17,r21,r2
 200c948:	982ed43a 	srli	r23,r19,16
 200c94c:	e084d83a 	srl	r2,fp,r2
 200c950:	ad06983a 	sll	r3,r21,r20
 200c954:	8809883a 	mov	r4,r17
 200c958:	b80b883a 	mov	r5,r23
 200c95c:	1886b03a 	or	r3,r3,r2
 200c960:	d8c00015 	stw	r3,0(sp)
 200c964:	9dbfffcc 	andi	r22,r19,65535
 200c968:	200329c0 	call	200329c <__udivsi3>
 200c96c:	100b883a 	mov	r5,r2
 200c970:	b009883a 	mov	r4,r22
 200c974:	d8800215 	stw	r2,8(sp)
 200c978:	20032ac0 	call	20032ac <__mulsi3>
 200c97c:	8809883a 	mov	r4,r17
 200c980:	b80b883a 	mov	r5,r23
 200c984:	102b883a 	mov	r21,r2
 200c988:	20032a40 	call	20032a4 <__umodsi3>
 200c98c:	d9000017 	ldw	r4,0(sp)
 200c990:	1004943a 	slli	r2,r2,16
 200c994:	2006d43a 	srli	r3,r4,16
 200c998:	10c4b03a 	or	r2,r2,r3
 200c99c:	1540052e 	bgeu	r2,r21,200c9b4 <__udivdi3+0x534>
 200c9a0:	d9400217 	ldw	r5,8(sp)
 200c9a4:	14c5883a 	add	r2,r2,r19
 200c9a8:	297fffc4 	addi	r5,r5,-1
 200c9ac:	d9400215 	stw	r5,8(sp)
 200c9b0:	14c0462e 	bgeu	r2,r19,200cacc <__udivdi3+0x64c>
 200c9b4:	1563c83a 	sub	r17,r2,r21
 200c9b8:	8809883a 	mov	r4,r17
 200c9bc:	b80b883a 	mov	r5,r23
 200c9c0:	200329c0 	call	200329c <__udivsi3>
 200c9c4:	100b883a 	mov	r5,r2
 200c9c8:	b009883a 	mov	r4,r22
 200c9cc:	1025883a 	mov	r18,r2
 200c9d0:	20032ac0 	call	20032ac <__mulsi3>
 200c9d4:	8809883a 	mov	r4,r17
 200c9d8:	b80b883a 	mov	r5,r23
 200c9dc:	1021883a 	mov	r16,r2
 200c9e0:	20032a40 	call	20032a4 <__umodsi3>
 200c9e4:	da800017 	ldw	r10,0(sp)
 200c9e8:	1004943a 	slli	r2,r2,16
 200c9ec:	50ffffcc 	andi	r3,r10,65535
 200c9f0:	10c6b03a 	or	r3,r2,r3
 200c9f4:	1c00062e 	bgeu	r3,r16,200ca10 <__udivdi3+0x590>
 200c9f8:	1cc7883a 	add	r3,r3,r19
 200c9fc:	94bfffc4 	addi	r18,r18,-1
 200ca00:	1cc00336 	bltu	r3,r19,200ca10 <__udivdi3+0x590>
 200ca04:	1c00022e 	bgeu	r3,r16,200ca10 <__udivdi3+0x590>
 200ca08:	94bfffc4 	addi	r18,r18,-1
 200ca0c:	1cc7883a 	add	r3,r3,r19
 200ca10:	d9000217 	ldw	r4,8(sp)
 200ca14:	e538983a 	sll	fp,fp,r20
 200ca18:	1c2bc83a 	sub	r21,r3,r16
 200ca1c:	2004943a 	slli	r2,r4,16
 200ca20:	90a8b03a 	or	r20,r18,r2
 200ca24:	003ebf06 	br	200c524 <__udivdi3+0xa4>
 200ca28:	1804943a 	slli	r2,r3,16
 200ca2c:	e588983a 	sll	r4,fp,r22
 200ca30:	a0ffffcc 	andi	r3,r20,65535
 200ca34:	10c5883a 	add	r2,r2,r3
 200ca38:	20bfbd2e 	bgeu	r4,r2,200c930 <__udivdi3+0x4b0>
 200ca3c:	90bfffc4 	addi	r2,r18,-1
 200ca40:	0009883a 	mov	r4,zero
 200ca44:	003ef706 	br	200c624 <__udivdi3+0x1a4>
 200ca48:	01400204 	movi	r5,8
 200ca4c:	2805883a 	mov	r2,r5
 200ca50:	003ee706 	br	200c5f0 <__udivdi3+0x170>
 200ca54:	01400604 	movi	r5,24
 200ca58:	2805883a 	mov	r2,r5
 200ca5c:	003ee406 	br	200c5f0 <__udivdi3+0x170>
 200ca60:	01400204 	movi	r5,8
 200ca64:	2805883a 	mov	r2,r5
 200ca68:	003ea106 	br	200c4f0 <__udivdi3+0x70>
 200ca6c:	01400604 	movi	r5,24
 200ca70:	2805883a 	mov	r2,r5
 200ca74:	003e9e06 	br	200c4f0 <__udivdi3+0x70>
 200ca78:	01400204 	movi	r5,8
 200ca7c:	2805883a 	mov	r2,r5
 200ca80:	003eff06 	br	200c680 <__udivdi3+0x200>
 200ca84:	01400604 	movi	r5,24
 200ca88:	2805883a 	mov	r2,r5
 200ca8c:	003efc06 	br	200c680 <__udivdi3+0x200>
 200ca90:	1c3f862e 	bgeu	r3,r16,200c8ac <__udivdi3+0x42c>
 200ca94:	1dc7883a 	add	r3,r3,r23
 200ca98:	ad7fffc4 	addi	r21,r21,-1
 200ca9c:	003f8306 	br	200c8ac <__udivdi3+0x42c>
 200caa0:	157f6e2e 	bgeu	r2,r21,200c85c <__udivdi3+0x3dc>
 200caa4:	a53fffc4 	addi	r20,r20,-1
 200caa8:	15c5883a 	add	r2,r2,r23
 200caac:	003f6b06 	br	200c85c <__udivdi3+0x3dc>
 200cab0:	ad7fffc4 	addi	r21,r21,-1
 200cab4:	003ec206 	br	200c5c0 <__udivdi3+0x140>
 200cab8:	843fffc4 	addi	r16,r16,-1
 200cabc:	14c5883a 	add	r2,r2,r19
 200cac0:	003f1306 	br	200c710 <__udivdi3+0x290>
 200cac4:	ad7fffc4 	addi	r21,r21,-1
 200cac8:	003f2506 	br	200c760 <__udivdi3+0x2e0>
 200cacc:	157fb92e 	bgeu	r2,r21,200c9b4 <__udivdi3+0x534>
 200cad0:	297fffc4 	addi	r5,r5,-1
 200cad4:	14c5883a 	add	r2,r2,r19
 200cad8:	d9400215 	stw	r5,8(sp)
 200cadc:	003fb506 	br	200c9b4 <__udivdi3+0x534>
 200cae0:	843fffc4 	addi	r16,r16,-1
 200cae4:	14c5883a 	add	r2,r2,r19
 200cae8:	003ea106 	br	200c570 <__udivdi3+0xf0>

0200caec <__umoddi3>:
 200caec:	defff004 	addi	sp,sp,-64
 200caf0:	3011883a 	mov	r8,r6
 200caf4:	000d883a 	mov	r6,zero
 200caf8:	dd400b15 	stw	r21,44(sp)
 200cafc:	dcc00915 	stw	r19,36(sp)
 200cb00:	dc000615 	stw	r16,24(sp)
 200cb04:	dfc00f15 	stw	ra,60(sp)
 200cb08:	df000e15 	stw	fp,56(sp)
 200cb0c:	ddc00d15 	stw	r23,52(sp)
 200cb10:	dd800c15 	stw	r22,48(sp)
 200cb14:	dd000a15 	stw	r20,40(sp)
 200cb18:	dc800815 	stw	r18,32(sp)
 200cb1c:	dc400715 	stw	r17,28(sp)
 200cb20:	2817883a 	mov	r11,r5
 200cb24:	d9800415 	stw	r6,16(sp)
 200cb28:	4027883a 	mov	r19,r8
 200cb2c:	d9800515 	stw	r6,20(sp)
 200cb30:	2021883a 	mov	r16,r4
 200cb34:	282b883a 	mov	r21,r5
 200cb38:	38002c1e 	bne	r7,zero,200cbec <__umoddi3+0x100>
 200cb3c:	2a005636 	bltu	r5,r8,200cc98 <__umoddi3+0x1ac>
 200cb40:	40009a26 	beq	r8,zero,200cdac <__umoddi3+0x2c0>
 200cb44:	00bfffd4 	movui	r2,65535
 200cb48:	14c09236 	bltu	r2,r19,200cd94 <__umoddi3+0x2a8>
 200cb4c:	00803fc4 	movi	r2,255
 200cb50:	14c15c36 	bltu	r2,r19,200d0c4 <__umoddi3+0x5d8>
 200cb54:	000b883a 	mov	r5,zero
 200cb58:	0005883a 	mov	r2,zero
 200cb5c:	9884d83a 	srl	r2,r19,r2
 200cb60:	010080b4 	movhi	r4,514
 200cb64:	2129a404 	addi	r4,r4,-22896
 200cb68:	01800804 	movi	r6,32
 200cb6c:	1105883a 	add	r2,r2,r4
 200cb70:	10c00003 	ldbu	r3,0(r2)
 200cb74:	28c7883a 	add	r3,r5,r3
 200cb78:	30e5c83a 	sub	r18,r6,r3
 200cb7c:	9000a41e 	bne	r18,zero,200ce10 <__umoddi3+0x324>
 200cb80:	982ed43a 	srli	r23,r19,16
 200cb84:	acebc83a 	sub	r21,r21,r19
 200cb88:	9d3fffcc 	andi	r20,r19,65535
 200cb8c:	002d883a 	mov	r22,zero
 200cb90:	a809883a 	mov	r4,r21
 200cb94:	b80b883a 	mov	r5,r23
 200cb98:	200329c0 	call	200329c <__udivsi3>
 200cb9c:	100b883a 	mov	r5,r2
 200cba0:	a009883a 	mov	r4,r20
 200cba4:	20032ac0 	call	20032ac <__mulsi3>
 200cba8:	a809883a 	mov	r4,r21
 200cbac:	b80b883a 	mov	r5,r23
 200cbb0:	1023883a 	mov	r17,r2
 200cbb4:	20032a40 	call	20032a4 <__umodsi3>
 200cbb8:	1004943a 	slli	r2,r2,16
 200cbbc:	8006d43a 	srli	r3,r16,16
 200cbc0:	10c4b03a 	or	r2,r2,r3
 200cbc4:	1440032e 	bgeu	r2,r17,200cbd4 <__umoddi3+0xe8>
 200cbc8:	14c5883a 	add	r2,r2,r19
 200cbcc:	14c00136 	bltu	r2,r19,200cbd4 <__umoddi3+0xe8>
 200cbd0:	14415836 	bltu	r2,r17,200d134 <__umoddi3+0x648>
 200cbd4:	1463c83a 	sub	r17,r2,r17
 200cbd8:	8809883a 	mov	r4,r17
 200cbdc:	b80b883a 	mov	r5,r23
 200cbe0:	200329c0 	call	200329c <__udivsi3>
 200cbe4:	a009883a 	mov	r4,r20
 200cbe8:	00005306 	br	200cd38 <__umoddi3+0x24c>
 200cbec:	380d883a 	mov	r6,r7
 200cbf0:	29c0132e 	bgeu	r5,r7,200cc40 <__umoddi3+0x154>
 200cbf4:	d9000415 	stw	r4,16(sp)
 200cbf8:	d9400515 	stw	r5,20(sp)
 200cbfc:	d9400417 	ldw	r5,16(sp)
 200cc00:	5813883a 	mov	r9,r11
 200cc04:	2811883a 	mov	r8,r5
 200cc08:	4005883a 	mov	r2,r8
 200cc0c:	4807883a 	mov	r3,r9
 200cc10:	dfc00f17 	ldw	ra,60(sp)
 200cc14:	df000e17 	ldw	fp,56(sp)
 200cc18:	ddc00d17 	ldw	r23,52(sp)
 200cc1c:	dd800c17 	ldw	r22,48(sp)
 200cc20:	dd400b17 	ldw	r21,44(sp)
 200cc24:	dd000a17 	ldw	r20,40(sp)
 200cc28:	dcc00917 	ldw	r19,36(sp)
 200cc2c:	dc800817 	ldw	r18,32(sp)
 200cc30:	dc400717 	ldw	r17,28(sp)
 200cc34:	dc000617 	ldw	r16,24(sp)
 200cc38:	dec01004 	addi	sp,sp,64
 200cc3c:	f800283a 	ret
 200cc40:	00bfffd4 	movui	r2,65535
 200cc44:	11c06636 	bltu	r2,r7,200cde0 <__umoddi3+0x2f4>
 200cc48:	00803fc4 	movi	r2,255
 200cc4c:	11c12036 	bltu	r2,r7,200d0d0 <__umoddi3+0x5e4>
 200cc50:	000b883a 	mov	r5,zero
 200cc54:	0005883a 	mov	r2,zero
 200cc58:	3084d83a 	srl	r2,r6,r2
 200cc5c:	010080b4 	movhi	r4,514
 200cc60:	2129a404 	addi	r4,r4,-22896
 200cc64:	01c00804 	movi	r7,32
 200cc68:	1105883a 	add	r2,r2,r4
 200cc6c:	10c00003 	ldbu	r3,0(r2)
 200cc70:	28c7883a 	add	r3,r5,r3
 200cc74:	38e5c83a 	sub	r18,r7,r3
 200cc78:	9000941e 	bne	r18,zero,200cecc <__umoddi3+0x3e0>
 200cc7c:	35405e36 	bltu	r6,r21,200cdf8 <__umoddi3+0x30c>
 200cc80:	84c05d2e 	bgeu	r16,r19,200cdf8 <__umoddi3+0x30c>
 200cc84:	8011883a 	mov	r8,r16
 200cc88:	a813883a 	mov	r9,r21
 200cc8c:	dc000415 	stw	r16,16(sp)
 200cc90:	dd400515 	stw	r21,20(sp)
 200cc94:	003fdc06 	br	200cc08 <__umoddi3+0x11c>
 200cc98:	00bfffd4 	movui	r2,65535
 200cc9c:	12004a36 	bltu	r2,r8,200cdc8 <__umoddi3+0x2dc>
 200cca0:	00803fc4 	movi	r2,255
 200cca4:	12010d36 	bltu	r2,r8,200d0dc <__umoddi3+0x5f0>
 200cca8:	000b883a 	mov	r5,zero
 200ccac:	0005883a 	mov	r2,zero
 200ccb0:	9884d83a 	srl	r2,r19,r2
 200ccb4:	010080b4 	movhi	r4,514
 200ccb8:	2129a404 	addi	r4,r4,-22896
 200ccbc:	01800804 	movi	r6,32
 200ccc0:	1105883a 	add	r2,r2,r4
 200ccc4:	10c00003 	ldbu	r3,0(r2)
 200ccc8:	28c7883a 	add	r3,r5,r3
 200cccc:	30c7c83a 	sub	r3,r6,r3
 200ccd0:	1800dc1e 	bne	r3,zero,200d044 <__umoddi3+0x558>
 200ccd4:	002d883a 	mov	r22,zero
 200ccd8:	982ed43a 	srli	r23,r19,16
 200ccdc:	a809883a 	mov	r4,r21
 200cce0:	9cbfffcc 	andi	r18,r19,65535
 200cce4:	b80b883a 	mov	r5,r23
 200cce8:	200329c0 	call	200329c <__udivsi3>
 200ccec:	100b883a 	mov	r5,r2
 200ccf0:	9009883a 	mov	r4,r18
 200ccf4:	20032ac0 	call	20032ac <__mulsi3>
 200ccf8:	a809883a 	mov	r4,r21
 200ccfc:	b80b883a 	mov	r5,r23
 200cd00:	1023883a 	mov	r17,r2
 200cd04:	20032a40 	call	20032a4 <__umodsi3>
 200cd08:	1004943a 	slli	r2,r2,16
 200cd0c:	8006d43a 	srli	r3,r16,16
 200cd10:	10c4b03a 	or	r2,r2,r3
 200cd14:	1440032e 	bgeu	r2,r17,200cd24 <__umoddi3+0x238>
 200cd18:	14c5883a 	add	r2,r2,r19
 200cd1c:	14c00136 	bltu	r2,r19,200cd24 <__umoddi3+0x238>
 200cd20:	14410236 	bltu	r2,r17,200d12c <__umoddi3+0x640>
 200cd24:	1463c83a 	sub	r17,r2,r17
 200cd28:	8809883a 	mov	r4,r17
 200cd2c:	b80b883a 	mov	r5,r23
 200cd30:	200329c0 	call	200329c <__udivsi3>
 200cd34:	9009883a 	mov	r4,r18
 200cd38:	100b883a 	mov	r5,r2
 200cd3c:	20032ac0 	call	20032ac <__mulsi3>
 200cd40:	8809883a 	mov	r4,r17
 200cd44:	b80b883a 	mov	r5,r23
 200cd48:	102b883a 	mov	r21,r2
 200cd4c:	20032a40 	call	20032a4 <__umodsi3>
 200cd50:	1004943a 	slli	r2,r2,16
 200cd54:	80ffffcc 	andi	r3,r16,65535
 200cd58:	10c4b03a 	or	r2,r2,r3
 200cd5c:	1540042e 	bgeu	r2,r21,200cd70 <__umoddi3+0x284>
 200cd60:	14c5883a 	add	r2,r2,r19
 200cd64:	14c00236 	bltu	r2,r19,200cd70 <__umoddi3+0x284>
 200cd68:	1540012e 	bgeu	r2,r21,200cd70 <__umoddi3+0x284>
 200cd6c:	14c5883a 	add	r2,r2,r19
 200cd70:	1545c83a 	sub	r2,r2,r21
 200cd74:	1584d83a 	srl	r2,r2,r22
 200cd78:	0013883a 	mov	r9,zero
 200cd7c:	d8800415 	stw	r2,16(sp)
 200cd80:	d8c00417 	ldw	r3,16(sp)
 200cd84:	0005883a 	mov	r2,zero
 200cd88:	d8800515 	stw	r2,20(sp)
 200cd8c:	1811883a 	mov	r8,r3
 200cd90:	003f9d06 	br	200cc08 <__umoddi3+0x11c>
 200cd94:	00804034 	movhi	r2,256
 200cd98:	10bfffc4 	addi	r2,r2,-1
 200cd9c:	14c0c636 	bltu	r2,r19,200d0b8 <__umoddi3+0x5cc>
 200cda0:	01400404 	movi	r5,16
 200cda4:	2805883a 	mov	r2,r5
 200cda8:	003f6c06 	br	200cb5c <__umoddi3+0x70>
 200cdac:	01000044 	movi	r4,1
 200cdb0:	000b883a 	mov	r5,zero
 200cdb4:	200329c0 	call	200329c <__udivsi3>
 200cdb8:	1027883a 	mov	r19,r2
 200cdbc:	00bfffd4 	movui	r2,65535
 200cdc0:	14fff436 	bltu	r2,r19,200cd94 <__umoddi3+0x2a8>
 200cdc4:	003f6106 	br	200cb4c <__umoddi3+0x60>
 200cdc8:	00804034 	movhi	r2,256
 200cdcc:	10bfffc4 	addi	r2,r2,-1
 200cdd0:	1200c536 	bltu	r2,r8,200d0e8 <__umoddi3+0x5fc>
 200cdd4:	01400404 	movi	r5,16
 200cdd8:	2805883a 	mov	r2,r5
 200cddc:	003fb406 	br	200ccb0 <__umoddi3+0x1c4>
 200cde0:	00804034 	movhi	r2,256
 200cde4:	10bfffc4 	addi	r2,r2,-1
 200cde8:	11c0c236 	bltu	r2,r7,200d0f4 <__umoddi3+0x608>
 200cdec:	01400404 	movi	r5,16
 200cdf0:	2805883a 	mov	r2,r5
 200cdf4:	003f9806 	br	200cc58 <__umoddi3+0x16c>
 200cdf8:	84c9c83a 	sub	r4,r16,r19
 200cdfc:	8105803a 	cmpltu	r2,r16,r4
 200ce00:	a987c83a 	sub	r3,r21,r6
 200ce04:	18abc83a 	sub	r21,r3,r2
 200ce08:	2021883a 	mov	r16,r4
 200ce0c:	003f9d06 	br	200cc84 <__umoddi3+0x198>
 200ce10:	9ca6983a 	sll	r19,r19,r18
 200ce14:	3485c83a 	sub	r2,r6,r18
 200ce18:	a8a2d83a 	srl	r17,r21,r2
 200ce1c:	982ed43a 	srli	r23,r19,16
 200ce20:	ac86983a 	sll	r3,r21,r18
 200ce24:	8084d83a 	srl	r2,r16,r2
 200ce28:	8809883a 	mov	r4,r17
 200ce2c:	b80b883a 	mov	r5,r23
 200ce30:	18b8b03a 	or	fp,r3,r2
 200ce34:	9d3fffcc 	andi	r20,r19,65535
 200ce38:	200329c0 	call	200329c <__udivsi3>
 200ce3c:	100b883a 	mov	r5,r2
 200ce40:	a009883a 	mov	r4,r20
 200ce44:	20032ac0 	call	20032ac <__mulsi3>
 200ce48:	8809883a 	mov	r4,r17
 200ce4c:	b80b883a 	mov	r5,r23
 200ce50:	102b883a 	mov	r21,r2
 200ce54:	20032a40 	call	20032a4 <__umodsi3>
 200ce58:	1004943a 	slli	r2,r2,16
 200ce5c:	e006d43a 	srli	r3,fp,16
 200ce60:	902d883a 	mov	r22,r18
 200ce64:	10c4b03a 	or	r2,r2,r3
 200ce68:	1540022e 	bgeu	r2,r21,200ce74 <__umoddi3+0x388>
 200ce6c:	14c5883a 	add	r2,r2,r19
 200ce70:	14c0ab2e 	bgeu	r2,r19,200d120 <__umoddi3+0x634>
 200ce74:	1563c83a 	sub	r17,r2,r21
 200ce78:	8809883a 	mov	r4,r17
 200ce7c:	b80b883a 	mov	r5,r23
 200ce80:	200329c0 	call	200329c <__udivsi3>
 200ce84:	100b883a 	mov	r5,r2
 200ce88:	a009883a 	mov	r4,r20
 200ce8c:	20032ac0 	call	20032ac <__mulsi3>
 200ce90:	8809883a 	mov	r4,r17
 200ce94:	b80b883a 	mov	r5,r23
 200ce98:	102b883a 	mov	r21,r2
 200ce9c:	20032a40 	call	20032a4 <__umodsi3>
 200cea0:	1004943a 	slli	r2,r2,16
 200cea4:	e0ffffcc 	andi	r3,fp,65535
 200cea8:	10c4b03a 	or	r2,r2,r3
 200ceac:	1540042e 	bgeu	r2,r21,200cec0 <__umoddi3+0x3d4>
 200ceb0:	14c5883a 	add	r2,r2,r19
 200ceb4:	14c00236 	bltu	r2,r19,200cec0 <__umoddi3+0x3d4>
 200ceb8:	1540012e 	bgeu	r2,r21,200cec0 <__umoddi3+0x3d4>
 200cebc:	14c5883a 	add	r2,r2,r19
 200cec0:	84a0983a 	sll	r16,r16,r18
 200cec4:	156bc83a 	sub	r21,r2,r21
 200cec8:	003f3106 	br	200cb90 <__umoddi3+0xa4>
 200cecc:	3c8fc83a 	sub	r7,r7,r18
 200ced0:	3486983a 	sll	r3,r6,r18
 200ced4:	99c4d83a 	srl	r2,r19,r7
 200ced8:	a9e2d83a 	srl	r17,r21,r7
 200cedc:	ac8c983a 	sll	r6,r21,r18
 200cee0:	18acb03a 	or	r22,r3,r2
 200cee4:	b02ed43a 	srli	r23,r22,16
 200cee8:	81c4d83a 	srl	r2,r16,r7
 200ceec:	8809883a 	mov	r4,r17
 200cef0:	b80b883a 	mov	r5,r23
 200cef4:	308cb03a 	or	r6,r6,r2
 200cef8:	d9c00315 	stw	r7,12(sp)
 200cefc:	d9800215 	stw	r6,8(sp)
 200cf00:	b53fffcc 	andi	r20,r22,65535
 200cf04:	200329c0 	call	200329c <__udivsi3>
 200cf08:	100b883a 	mov	r5,r2
 200cf0c:	a009883a 	mov	r4,r20
 200cf10:	1039883a 	mov	fp,r2
 200cf14:	20032ac0 	call	20032ac <__mulsi3>
 200cf18:	8809883a 	mov	r4,r17
 200cf1c:	b80b883a 	mov	r5,r23
 200cf20:	102b883a 	mov	r21,r2
 200cf24:	20032a40 	call	20032a4 <__umodsi3>
 200cf28:	d9000217 	ldw	r4,8(sp)
 200cf2c:	1004943a 	slli	r2,r2,16
 200cf30:	9ca6983a 	sll	r19,r19,r18
 200cf34:	2006d43a 	srli	r3,r4,16
 200cf38:	84a0983a 	sll	r16,r16,r18
 200cf3c:	dcc00015 	stw	r19,0(sp)
 200cf40:	10c4b03a 	or	r2,r2,r3
 200cf44:	dc000115 	stw	r16,4(sp)
 200cf48:	1540032e 	bgeu	r2,r21,200cf58 <__umoddi3+0x46c>
 200cf4c:	1585883a 	add	r2,r2,r22
 200cf50:	e73fffc4 	addi	fp,fp,-1
 200cf54:	15806e2e 	bgeu	r2,r22,200d110 <__umoddi3+0x624>
 200cf58:	1563c83a 	sub	r17,r2,r21
 200cf5c:	8809883a 	mov	r4,r17
 200cf60:	b80b883a 	mov	r5,r23
 200cf64:	200329c0 	call	200329c <__udivsi3>
 200cf68:	100b883a 	mov	r5,r2
 200cf6c:	a009883a 	mov	r4,r20
 200cf70:	1021883a 	mov	r16,r2
 200cf74:	20032ac0 	call	20032ac <__mulsi3>
 200cf78:	b80b883a 	mov	r5,r23
 200cf7c:	8809883a 	mov	r4,r17
 200cf80:	1029883a 	mov	r20,r2
 200cf84:	20032a40 	call	20032a4 <__umodsi3>
 200cf88:	d9400217 	ldw	r5,8(sp)
 200cf8c:	1004943a 	slli	r2,r2,16
 200cf90:	28ffffcc 	andi	r3,r5,65535
 200cf94:	10c4b03a 	or	r2,r2,r3
 200cf98:	1500032e 	bgeu	r2,r20,200cfa8 <__umoddi3+0x4bc>
 200cf9c:	1585883a 	add	r2,r2,r22
 200cfa0:	843fffc4 	addi	r16,r16,-1
 200cfa4:	1580562e 	bgeu	r2,r22,200d100 <__umoddi3+0x614>
 200cfa8:	d9800017 	ldw	r6,0(sp)
 200cfac:	e022943a 	slli	r17,fp,16
 200cfb0:	302ed43a 	srli	r23,r6,16
 200cfb4:	8462b03a 	or	r17,r16,r17
 200cfb8:	34ffffcc 	andi	r19,r6,65535
 200cfbc:	882ad43a 	srli	r21,r17,16
 200cfc0:	8c7fffcc 	andi	r17,r17,65535
 200cfc4:	8809883a 	mov	r4,r17
 200cfc8:	980b883a 	mov	r5,r19
 200cfcc:	1521c83a 	sub	r16,r2,r20
 200cfd0:	20032ac0 	call	20032ac <__mulsi3>
 200cfd4:	8809883a 	mov	r4,r17
 200cfd8:	b80b883a 	mov	r5,r23
 200cfdc:	1029883a 	mov	r20,r2
 200cfe0:	20032ac0 	call	20032ac <__mulsi3>
 200cfe4:	980b883a 	mov	r5,r19
 200cfe8:	a809883a 	mov	r4,r21
 200cfec:	1023883a 	mov	r17,r2
 200cff0:	20032ac0 	call	20032ac <__mulsi3>
 200cff4:	a809883a 	mov	r4,r21
 200cff8:	b80b883a 	mov	r5,r23
 200cffc:	1027883a 	mov	r19,r2
 200d000:	20032ac0 	call	20032ac <__mulsi3>
 200d004:	100b883a 	mov	r5,r2
 200d008:	a004d43a 	srli	r2,r20,16
 200d00c:	8ce3883a 	add	r17,r17,r19
 200d010:	1449883a 	add	r4,r2,r17
 200d014:	24c0022e 	bgeu	r4,r19,200d020 <__umoddi3+0x534>
 200d018:	00800074 	movhi	r2,1
 200d01c:	288b883a 	add	r5,r5,r2
 200d020:	2004d43a 	srli	r2,r4,16
 200d024:	2008943a 	slli	r4,r4,16
 200d028:	a0ffffcc 	andi	r3,r20,65535
 200d02c:	288d883a 	add	r6,r5,r2
 200d030:	20c9883a 	add	r4,r4,r3
 200d034:	81800b36 	bltu	r16,r6,200d064 <__umoddi3+0x578>
 200d038:	81804026 	beq	r16,r6,200d13c <__umoddi3+0x650>
 200d03c:	818dc83a 	sub	r6,r16,r6
 200d040:	00000f06 	br	200d080 <__umoddi3+0x594>
 200d044:	30c5c83a 	sub	r2,r6,r3
 200d048:	182d883a 	mov	r22,r3
 200d04c:	8084d83a 	srl	r2,r16,r2
 200d050:	a8c6983a 	sll	r3,r21,r3
 200d054:	9da6983a 	sll	r19,r19,r22
 200d058:	85a0983a 	sll	r16,r16,r22
 200d05c:	18aab03a 	or	r21,r3,r2
 200d060:	003f1d06 	br	200ccd8 <__umoddi3+0x1ec>
 200d064:	d8c00017 	ldw	r3,0(sp)
 200d068:	20c5c83a 	sub	r2,r4,r3
 200d06c:	2089803a 	cmpltu	r4,r4,r2
 200d070:	3587c83a 	sub	r3,r6,r22
 200d074:	1907c83a 	sub	r3,r3,r4
 200d078:	80cdc83a 	sub	r6,r16,r3
 200d07c:	1009883a 	mov	r4,r2
 200d080:	d9400117 	ldw	r5,4(sp)
 200d084:	2905c83a 	sub	r2,r5,r4
 200d088:	2887803a 	cmpltu	r3,r5,r2
 200d08c:	30c7c83a 	sub	r3,r6,r3
 200d090:	d9800317 	ldw	r6,12(sp)
 200d094:	1484d83a 	srl	r2,r2,r18
 200d098:	1988983a 	sll	r4,r3,r6
 200d09c:	1c86d83a 	srl	r3,r3,r18
 200d0a0:	2088b03a 	or	r4,r4,r2
 200d0a4:	2011883a 	mov	r8,r4
 200d0a8:	1813883a 	mov	r9,r3
 200d0ac:	d9000415 	stw	r4,16(sp)
 200d0b0:	d8c00515 	stw	r3,20(sp)
 200d0b4:	003ed406 	br	200cc08 <__umoddi3+0x11c>
 200d0b8:	01400604 	movi	r5,24
 200d0bc:	2805883a 	mov	r2,r5
 200d0c0:	003ea606 	br	200cb5c <__umoddi3+0x70>
 200d0c4:	01400204 	movi	r5,8
 200d0c8:	2805883a 	mov	r2,r5
 200d0cc:	003ea306 	br	200cb5c <__umoddi3+0x70>
 200d0d0:	01400204 	movi	r5,8
 200d0d4:	2805883a 	mov	r2,r5
 200d0d8:	003edf06 	br	200cc58 <__umoddi3+0x16c>
 200d0dc:	01400204 	movi	r5,8
 200d0e0:	2805883a 	mov	r2,r5
 200d0e4:	003ef206 	br	200ccb0 <__umoddi3+0x1c4>
 200d0e8:	01400604 	movi	r5,24
 200d0ec:	2805883a 	mov	r2,r5
 200d0f0:	003eef06 	br	200ccb0 <__umoddi3+0x1c4>
 200d0f4:	01400604 	movi	r5,24
 200d0f8:	2805883a 	mov	r2,r5
 200d0fc:	003ed606 	br	200cc58 <__umoddi3+0x16c>
 200d100:	153fa92e 	bgeu	r2,r20,200cfa8 <__umoddi3+0x4bc>
 200d104:	843fffc4 	addi	r16,r16,-1
 200d108:	1585883a 	add	r2,r2,r22
 200d10c:	003fa606 	br	200cfa8 <__umoddi3+0x4bc>
 200d110:	157f912e 	bgeu	r2,r21,200cf58 <__umoddi3+0x46c>
 200d114:	e73fffc4 	addi	fp,fp,-1
 200d118:	1585883a 	add	r2,r2,r22
 200d11c:	003f8e06 	br	200cf58 <__umoddi3+0x46c>
 200d120:	157f542e 	bgeu	r2,r21,200ce74 <__umoddi3+0x388>
 200d124:	14c5883a 	add	r2,r2,r19
 200d128:	003f5206 	br	200ce74 <__umoddi3+0x388>
 200d12c:	14c5883a 	add	r2,r2,r19
 200d130:	003efc06 	br	200cd24 <__umoddi3+0x238>
 200d134:	14c5883a 	add	r2,r2,r19
 200d138:	003ea606 	br	200cbd4 <__umoddi3+0xe8>
 200d13c:	d8800117 	ldw	r2,4(sp)
 200d140:	113fc836 	bltu	r2,r4,200d064 <__umoddi3+0x578>
 200d144:	000d883a 	mov	r6,zero
 200d148:	003fcd06 	br	200d080 <__umoddi3+0x594>

0200d14c <__muldf3>:
 200d14c:	deffe004 	addi	sp,sp,-128
 200d150:	dc401815 	stw	r17,96(sp)
 200d154:	dc400404 	addi	r17,sp,16
 200d158:	2011883a 	mov	r8,r4
 200d15c:	2813883a 	mov	r9,r5
 200d160:	dc001715 	stw	r16,92(sp)
 200d164:	d809883a 	mov	r4,sp
 200d168:	880b883a 	mov	r5,r17
 200d16c:	dc000904 	addi	r16,sp,36
 200d170:	dfc01f15 	stw	ra,124(sp)
 200d174:	da400115 	stw	r9,4(sp)
 200d178:	d9c00315 	stw	r7,12(sp)
 200d17c:	da000015 	stw	r8,0(sp)
 200d180:	d9800215 	stw	r6,8(sp)
 200d184:	ddc01e15 	stw	r23,120(sp)
 200d188:	dd801d15 	stw	r22,116(sp)
 200d18c:	dd401c15 	stw	r21,112(sp)
 200d190:	dd001b15 	stw	r20,108(sp)
 200d194:	dcc01a15 	stw	r19,104(sp)
 200d198:	dc801915 	stw	r18,100(sp)
 200d19c:	20035f80 	call	20035f8 <__unpack_d>
 200d1a0:	d9000204 	addi	r4,sp,8
 200d1a4:	800b883a 	mov	r5,r16
 200d1a8:	20035f80 	call	20035f8 <__unpack_d>
 200d1ac:	d9000417 	ldw	r4,16(sp)
 200d1b0:	00800044 	movi	r2,1
 200d1b4:	1100102e 	bgeu	r2,r4,200d1f8 <__muldf3+0xac>
 200d1b8:	d8c00917 	ldw	r3,36(sp)
 200d1bc:	10c0062e 	bgeu	r2,r3,200d1d8 <__muldf3+0x8c>
 200d1c0:	00800104 	movi	r2,4
 200d1c4:	20800a26 	beq	r4,r2,200d1f0 <__muldf3+0xa4>
 200d1c8:	1880cc26 	beq	r3,r2,200d4fc <__muldf3+0x3b0>
 200d1cc:	00800084 	movi	r2,2
 200d1d0:	20800926 	beq	r4,r2,200d1f8 <__muldf3+0xac>
 200d1d4:	1880191e 	bne	r3,r2,200d23c <__muldf3+0xf0>
 200d1d8:	d8c00a17 	ldw	r3,40(sp)
 200d1dc:	d8800517 	ldw	r2,20(sp)
 200d1e0:	8009883a 	mov	r4,r16
 200d1e4:	10c4c03a 	cmpne	r2,r2,r3
 200d1e8:	d8800a15 	stw	r2,40(sp)
 200d1ec:	00000706 	br	200d20c <__muldf3+0xc0>
 200d1f0:	00800084 	movi	r2,2
 200d1f4:	1880c326 	beq	r3,r2,200d504 <__muldf3+0x3b8>
 200d1f8:	d8800517 	ldw	r2,20(sp)
 200d1fc:	d8c00a17 	ldw	r3,40(sp)
 200d200:	8809883a 	mov	r4,r17
 200d204:	10c4c03a 	cmpne	r2,r2,r3
 200d208:	d8800515 	stw	r2,20(sp)
 200d20c:	20032e40 	call	20032e4 <__pack_d>
 200d210:	dfc01f17 	ldw	ra,124(sp)
 200d214:	ddc01e17 	ldw	r23,120(sp)
 200d218:	dd801d17 	ldw	r22,116(sp)
 200d21c:	dd401c17 	ldw	r21,112(sp)
 200d220:	dd001b17 	ldw	r20,108(sp)
 200d224:	dcc01a17 	ldw	r19,104(sp)
 200d228:	dc801917 	ldw	r18,100(sp)
 200d22c:	dc401817 	ldw	r17,96(sp)
 200d230:	dc001717 	ldw	r16,92(sp)
 200d234:	dec02004 	addi	sp,sp,128
 200d238:	f800283a 	ret
 200d23c:	dd800717 	ldw	r22,28(sp)
 200d240:	dc800c17 	ldw	r18,48(sp)
 200d244:	002b883a 	mov	r21,zero
 200d248:	0023883a 	mov	r17,zero
 200d24c:	a80b883a 	mov	r5,r21
 200d250:	b00d883a 	mov	r6,r22
 200d254:	880f883a 	mov	r7,r17
 200d258:	ddc00817 	ldw	r23,32(sp)
 200d25c:	dcc00d17 	ldw	r19,52(sp)
 200d260:	9009883a 	mov	r4,r18
 200d264:	200dd740 	call	200dd74 <__muldi3>
 200d268:	001b883a 	mov	r13,zero
 200d26c:	680f883a 	mov	r7,r13
 200d270:	b009883a 	mov	r4,r22
 200d274:	000b883a 	mov	r5,zero
 200d278:	980d883a 	mov	r6,r19
 200d27c:	b82d883a 	mov	r22,r23
 200d280:	002f883a 	mov	r23,zero
 200d284:	db401615 	stw	r13,88(sp)
 200d288:	d8801315 	stw	r2,76(sp)
 200d28c:	d8c01415 	stw	r3,80(sp)
 200d290:	dcc01515 	stw	r19,84(sp)
 200d294:	200dd740 	call	200dd74 <__muldi3>
 200d298:	b00d883a 	mov	r6,r22
 200d29c:	000b883a 	mov	r5,zero
 200d2a0:	9009883a 	mov	r4,r18
 200d2a4:	b80f883a 	mov	r7,r23
 200d2a8:	1021883a 	mov	r16,r2
 200d2ac:	1823883a 	mov	r17,r3
 200d2b0:	200dd740 	call	200dd74 <__muldi3>
 200d2b4:	8085883a 	add	r2,r16,r2
 200d2b8:	140d803a 	cmpltu	r6,r2,r16
 200d2bc:	88c7883a 	add	r3,r17,r3
 200d2c0:	30cd883a 	add	r6,r6,r3
 200d2c4:	1029883a 	mov	r20,r2
 200d2c8:	302b883a 	mov	r21,r6
 200d2cc:	da801317 	ldw	r10,76(sp)
 200d2d0:	dac01417 	ldw	r11,80(sp)
 200d2d4:	db001517 	ldw	r12,84(sp)
 200d2d8:	db401617 	ldw	r13,88(sp)
 200d2dc:	3440612e 	bgeu	r6,r17,200d464 <__muldf3+0x318>
 200d2e0:	0009883a 	mov	r4,zero
 200d2e4:	5105883a 	add	r2,r10,r4
 200d2e8:	128d803a 	cmpltu	r6,r2,r10
 200d2ec:	5d07883a 	add	r3,r11,r20
 200d2f0:	30cd883a 	add	r6,r6,r3
 200d2f4:	0021883a 	mov	r16,zero
 200d2f8:	04400044 	movi	r17,1
 200d2fc:	1025883a 	mov	r18,r2
 200d300:	3027883a 	mov	r19,r6
 200d304:	32c06236 	bltu	r6,r11,200d490 <__muldf3+0x344>
 200d308:	59807a26 	beq	r11,r6,200d4f4 <__muldf3+0x3a8>
 200d30c:	680b883a 	mov	r5,r13
 200d310:	b80f883a 	mov	r7,r23
 200d314:	6009883a 	mov	r4,r12
 200d318:	b00d883a 	mov	r6,r22
 200d31c:	200dd740 	call	200dd74 <__muldi3>
 200d320:	1009883a 	mov	r4,r2
 200d324:	000f883a 	mov	r7,zero
 200d328:	1545883a 	add	r2,r2,r21
 200d32c:	1111803a 	cmpltu	r8,r2,r4
 200d330:	19c7883a 	add	r3,r3,r7
 200d334:	40c7883a 	add	r3,r8,r3
 200d338:	88cb883a 	add	r5,r17,r3
 200d33c:	d8c00617 	ldw	r3,24(sp)
 200d340:	8089883a 	add	r4,r16,r2
 200d344:	d8800b17 	ldw	r2,44(sp)
 200d348:	18c00104 	addi	r3,r3,4
 200d34c:	240d803a 	cmpltu	r6,r4,r16
 200d350:	10c7883a 	add	r3,r2,r3
 200d354:	2013883a 	mov	r9,r4
 200d358:	d8800a17 	ldw	r2,40(sp)
 200d35c:	d9000517 	ldw	r4,20(sp)
 200d360:	314d883a 	add	r6,r6,r5
 200d364:	3015883a 	mov	r10,r6
 200d368:	2088c03a 	cmpne	r4,r4,r2
 200d36c:	00880034 	movhi	r2,8192
 200d370:	10bfffc4 	addi	r2,r2,-1
 200d374:	d9000f15 	stw	r4,60(sp)
 200d378:	d8c01015 	stw	r3,64(sp)
 200d37c:	1180162e 	bgeu	r2,r6,200d3d8 <__muldf3+0x28c>
 200d380:	1811883a 	mov	r8,r3
 200d384:	101f883a 	mov	r15,r2
 200d388:	980497fa 	slli	r2,r19,31
 200d38c:	9016d07a 	srli	r11,r18,1
 200d390:	500697fa 	slli	r3,r10,31
 200d394:	480cd07a 	srli	r6,r9,1
 200d398:	500ed07a 	srli	r7,r10,1
 200d39c:	12d6b03a 	or	r11,r2,r11
 200d3a0:	00800044 	movi	r2,1
 200d3a4:	198cb03a 	or	r6,r3,r6
 200d3a8:	4888703a 	and	r4,r9,r2
 200d3ac:	9818d07a 	srli	r12,r19,1
 200d3b0:	001b883a 	mov	r13,zero
 200d3b4:	03a00034 	movhi	r14,32768
 200d3b8:	3013883a 	mov	r9,r6
 200d3bc:	3815883a 	mov	r10,r7
 200d3c0:	4091883a 	add	r8,r8,r2
 200d3c4:	20000226 	beq	r4,zero,200d3d0 <__muldf3+0x284>
 200d3c8:	5b64b03a 	or	r18,r11,r13
 200d3cc:	63a6b03a 	or	r19,r12,r14
 200d3d0:	7abfed36 	bltu	r15,r10,200d388 <__muldf3+0x23c>
 200d3d4:	da001015 	stw	r8,64(sp)
 200d3d8:	00840034 	movhi	r2,4096
 200d3dc:	10bfffc4 	addi	r2,r2,-1
 200d3e0:	12801436 	bltu	r2,r10,200d434 <__muldf3+0x2e8>
 200d3e4:	da001017 	ldw	r8,64(sp)
 200d3e8:	101f883a 	mov	r15,r2
 200d3ec:	4a45883a 	add	r2,r9,r9
 200d3f0:	124d803a 	cmpltu	r6,r2,r9
 200d3f4:	5287883a 	add	r3,r10,r10
 200d3f8:	9497883a 	add	r11,r18,r18
 200d3fc:	5c8f803a 	cmpltu	r7,r11,r18
 200d400:	9cd9883a 	add	r12,r19,r19
 200d404:	01000044 	movi	r4,1
 200d408:	30cd883a 	add	r6,r6,r3
 200d40c:	3b0f883a 	add	r7,r7,r12
 200d410:	423fffc4 	addi	r8,r8,-1
 200d414:	1013883a 	mov	r9,r2
 200d418:	3015883a 	mov	r10,r6
 200d41c:	111ab03a 	or	r13,r2,r4
 200d420:	98003016 	blt	r19,zero,200d4e4 <__muldf3+0x398>
 200d424:	5825883a 	mov	r18,r11
 200d428:	3827883a 	mov	r19,r7
 200d42c:	7abfef2e 	bgeu	r15,r10,200d3ec <__muldf3+0x2a0>
 200d430:	da001015 	stw	r8,64(sp)
 200d434:	00803fc4 	movi	r2,255
 200d438:	488e703a 	and	r7,r9,r2
 200d43c:	00802004 	movi	r2,128
 200d440:	0007883a 	mov	r3,zero
 200d444:	0011883a 	mov	r8,zero
 200d448:	38801826 	beq	r7,r2,200d4ac <__muldf3+0x360>
 200d44c:	008000c4 	movi	r2,3
 200d450:	d9000e04 	addi	r4,sp,56
 200d454:	da801215 	stw	r10,72(sp)
 200d458:	d8800e15 	stw	r2,56(sp)
 200d45c:	da401115 	stw	r9,68(sp)
 200d460:	003f6a06 	br	200d20c <__muldf3+0xc0>
 200d464:	89802126 	beq	r17,r6,200d4ec <__muldf3+0x3a0>
 200d468:	0009883a 	mov	r4,zero
 200d46c:	5105883a 	add	r2,r10,r4
 200d470:	128d803a 	cmpltu	r6,r2,r10
 200d474:	5d07883a 	add	r3,r11,r20
 200d478:	30cd883a 	add	r6,r6,r3
 200d47c:	0021883a 	mov	r16,zero
 200d480:	0023883a 	mov	r17,zero
 200d484:	1025883a 	mov	r18,r2
 200d488:	3027883a 	mov	r19,r6
 200d48c:	32ff9e2e 	bgeu	r6,r11,200d308 <__muldf3+0x1bc>
 200d490:	00800044 	movi	r2,1
 200d494:	8089883a 	add	r4,r16,r2
 200d498:	240d803a 	cmpltu	r6,r4,r16
 200d49c:	344d883a 	add	r6,r6,r17
 200d4a0:	2021883a 	mov	r16,r4
 200d4a4:	3023883a 	mov	r17,r6
 200d4a8:	003f9806 	br	200d30c <__muldf3+0x1c0>
 200d4ac:	403fe71e 	bne	r8,zero,200d44c <__muldf3+0x300>
 200d4b0:	01004004 	movi	r4,256
 200d4b4:	4904703a 	and	r2,r9,r4
 200d4b8:	10c4b03a 	or	r2,r2,r3
 200d4bc:	103fe31e 	bne	r2,zero,200d44c <__muldf3+0x300>
 200d4c0:	94c4b03a 	or	r2,r18,r19
 200d4c4:	103fe126 	beq	r2,zero,200d44c <__muldf3+0x300>
 200d4c8:	49c5883a 	add	r2,r9,r7
 200d4cc:	1251803a 	cmpltu	r8,r2,r9
 200d4d0:	4291883a 	add	r8,r8,r10
 200d4d4:	013fc004 	movi	r4,-256
 200d4d8:	1112703a 	and	r9,r2,r4
 200d4dc:	4015883a 	mov	r10,r8
 200d4e0:	003fda06 	br	200d44c <__muldf3+0x300>
 200d4e4:	6813883a 	mov	r9,r13
 200d4e8:	003fce06 	br	200d424 <__muldf3+0x2d8>
 200d4ec:	143f7c36 	bltu	r2,r16,200d2e0 <__muldf3+0x194>
 200d4f0:	003fdd06 	br	200d468 <__muldf3+0x31c>
 200d4f4:	12bf852e 	bgeu	r2,r10,200d30c <__muldf3+0x1c0>
 200d4f8:	003fe506 	br	200d490 <__muldf3+0x344>
 200d4fc:	00800084 	movi	r2,2
 200d500:	20bf351e 	bne	r4,r2,200d1d8 <__muldf3+0x8c>
 200d504:	010080b4 	movhi	r4,514
 200d508:	21290804 	addi	r4,r4,-23520
 200d50c:	003f3f06 	br	200d20c <__muldf3+0xc0>

0200d510 <__divdf3>:
 200d510:	deffed04 	addi	sp,sp,-76
 200d514:	dcc01115 	stw	r19,68(sp)
 200d518:	dcc00404 	addi	r19,sp,16
 200d51c:	2011883a 	mov	r8,r4
 200d520:	2813883a 	mov	r9,r5
 200d524:	dc000e15 	stw	r16,56(sp)
 200d528:	d809883a 	mov	r4,sp
 200d52c:	980b883a 	mov	r5,r19
 200d530:	dc000904 	addi	r16,sp,36
 200d534:	dfc01215 	stw	ra,72(sp)
 200d538:	da400115 	stw	r9,4(sp)
 200d53c:	d9c00315 	stw	r7,12(sp)
 200d540:	da000015 	stw	r8,0(sp)
 200d544:	d9800215 	stw	r6,8(sp)
 200d548:	dc801015 	stw	r18,64(sp)
 200d54c:	dc400f15 	stw	r17,60(sp)
 200d550:	20035f80 	call	20035f8 <__unpack_d>
 200d554:	d9000204 	addi	r4,sp,8
 200d558:	800b883a 	mov	r5,r16
 200d55c:	20035f80 	call	20035f8 <__unpack_d>
 200d560:	d9000417 	ldw	r4,16(sp)
 200d564:	00800044 	movi	r2,1
 200d568:	11000b2e 	bgeu	r2,r4,200d598 <__divdf3+0x88>
 200d56c:	d9400917 	ldw	r5,36(sp)
 200d570:	1140762e 	bgeu	r2,r5,200d74c <__divdf3+0x23c>
 200d574:	d8800517 	ldw	r2,20(sp)
 200d578:	d8c00a17 	ldw	r3,40(sp)
 200d57c:	01800104 	movi	r6,4
 200d580:	10c4f03a 	xor	r2,r2,r3
 200d584:	d8800515 	stw	r2,20(sp)
 200d588:	21800226 	beq	r4,r6,200d594 <__divdf3+0x84>
 200d58c:	00800084 	movi	r2,2
 200d590:	2080141e 	bne	r4,r2,200d5e4 <__divdf3+0xd4>
 200d594:	29000926 	beq	r5,r4,200d5bc <__divdf3+0xac>
 200d598:	9809883a 	mov	r4,r19
 200d59c:	20032e40 	call	20032e4 <__pack_d>
 200d5a0:	dfc01217 	ldw	ra,72(sp)
 200d5a4:	dcc01117 	ldw	r19,68(sp)
 200d5a8:	dc801017 	ldw	r18,64(sp)
 200d5ac:	dc400f17 	ldw	r17,60(sp)
 200d5b0:	dc000e17 	ldw	r16,56(sp)
 200d5b4:	dec01304 	addi	sp,sp,76
 200d5b8:	f800283a 	ret
 200d5bc:	010080b4 	movhi	r4,514
 200d5c0:	21290804 	addi	r4,r4,-23520
 200d5c4:	20032e40 	call	20032e4 <__pack_d>
 200d5c8:	dfc01217 	ldw	ra,72(sp)
 200d5cc:	dcc01117 	ldw	r19,68(sp)
 200d5d0:	dc801017 	ldw	r18,64(sp)
 200d5d4:	dc400f17 	ldw	r17,60(sp)
 200d5d8:	dc000e17 	ldw	r16,56(sp)
 200d5dc:	dec01304 	addi	sp,sp,76
 200d5e0:	f800283a 	ret
 200d5e4:	29805b26 	beq	r5,r6,200d754 <__divdf3+0x244>
 200d5e8:	28802d26 	beq	r5,r2,200d6a0 <__divdf3+0x190>
 200d5ec:	d8c00617 	ldw	r3,24(sp)
 200d5f0:	d8800b17 	ldw	r2,44(sp)
 200d5f4:	d9c00817 	ldw	r7,32(sp)
 200d5f8:	dc400d17 	ldw	r17,52(sp)
 200d5fc:	188bc83a 	sub	r5,r3,r2
 200d600:	d9800717 	ldw	r6,28(sp)
 200d604:	dc000c17 	ldw	r16,48(sp)
 200d608:	d9400615 	stw	r5,24(sp)
 200d60c:	3c403836 	bltu	r7,r17,200d6f0 <__divdf3+0x1e0>
 200d610:	89c03626 	beq	r17,r7,200d6ec <__divdf3+0x1dc>
 200d614:	0015883a 	mov	r10,zero
 200d618:	001d883a 	mov	r14,zero
 200d61c:	02c40034 	movhi	r11,4096
 200d620:	001f883a 	mov	r15,zero
 200d624:	003f883a 	mov	ra,zero
 200d628:	04800f44 	movi	r18,61
 200d62c:	00000f06 	br	200d66c <__divdf3+0x15c>
 200d630:	601d883a 	mov	r14,r12
 200d634:	681f883a 	mov	r15,r13
 200d638:	400d883a 	mov	r6,r8
 200d63c:	100f883a 	mov	r7,r2
 200d640:	3191883a 	add	r8,r6,r6
 200d644:	5808d07a 	srli	r4,r11,1
 200d648:	4185803a 	cmpltu	r2,r8,r6
 200d64c:	39d3883a 	add	r9,r7,r7
 200d650:	28c6b03a 	or	r3,r5,r3
 200d654:	1245883a 	add	r2,r2,r9
 200d658:	1815883a 	mov	r10,r3
 200d65c:	2017883a 	mov	r11,r4
 200d660:	400d883a 	mov	r6,r8
 200d664:	100f883a 	mov	r7,r2
 200d668:	fc801726 	beq	ra,r18,200d6c8 <__divdf3+0x1b8>
 200d66c:	580a97fa 	slli	r5,r11,31
 200d670:	5006d07a 	srli	r3,r10,1
 200d674:	ffc00044 	addi	ra,ra,1
 200d678:	3c7ff136 	bltu	r7,r17,200d640 <__divdf3+0x130>
 200d67c:	3411c83a 	sub	r8,r6,r16
 200d680:	3205803a 	cmpltu	r2,r6,r8
 200d684:	3c53c83a 	sub	r9,r7,r17
 200d688:	7298b03a 	or	r12,r14,r10
 200d68c:	7adab03a 	or	r13,r15,r11
 200d690:	4885c83a 	sub	r2,r9,r2
 200d694:	89ffe61e 	bne	r17,r7,200d630 <__divdf3+0x120>
 200d698:	343fe936 	bltu	r6,r16,200d640 <__divdf3+0x130>
 200d69c:	003fe406 	br	200d630 <__divdf3+0x120>
 200d6a0:	9809883a 	mov	r4,r19
 200d6a4:	d9800415 	stw	r6,16(sp)
 200d6a8:	20032e40 	call	20032e4 <__pack_d>
 200d6ac:	dfc01217 	ldw	ra,72(sp)
 200d6b0:	dcc01117 	ldw	r19,68(sp)
 200d6b4:	dc801017 	ldw	r18,64(sp)
 200d6b8:	dc400f17 	ldw	r17,60(sp)
 200d6bc:	dc000e17 	ldw	r16,56(sp)
 200d6c0:	dec01304 	addi	sp,sp,76
 200d6c4:	f800283a 	ret
 200d6c8:	00803fc4 	movi	r2,255
 200d6cc:	7090703a 	and	r8,r14,r2
 200d6d0:	00802004 	movi	r2,128
 200d6d4:	0007883a 	mov	r3,zero
 200d6d8:	0013883a 	mov	r9,zero
 200d6dc:	40800d26 	beq	r8,r2,200d714 <__divdf3+0x204>
 200d6e0:	dbc00815 	stw	r15,32(sp)
 200d6e4:	db800715 	stw	r14,28(sp)
 200d6e8:	003fab06 	br	200d598 <__divdf3+0x88>
 200d6ec:	343fc92e 	bgeu	r6,r16,200d614 <__divdf3+0x104>
 200d6f0:	3185883a 	add	r2,r6,r6
 200d6f4:	1189803a 	cmpltu	r4,r2,r6
 200d6f8:	39c7883a 	add	r3,r7,r7
 200d6fc:	20c9883a 	add	r4,r4,r3
 200d700:	297fffc4 	addi	r5,r5,-1
 200d704:	100d883a 	mov	r6,r2
 200d708:	200f883a 	mov	r7,r4
 200d70c:	d9400615 	stw	r5,24(sp)
 200d710:	003fc006 	br	200d614 <__divdf3+0x104>
 200d714:	483ff21e 	bne	r9,zero,200d6e0 <__divdf3+0x1d0>
 200d718:	01004004 	movi	r4,256
 200d71c:	7104703a 	and	r2,r14,r4
 200d720:	10c4b03a 	or	r2,r2,r3
 200d724:	103fee1e 	bne	r2,zero,200d6e0 <__divdf3+0x1d0>
 200d728:	31c4b03a 	or	r2,r6,r7
 200d72c:	103fec26 	beq	r2,zero,200d6e0 <__divdf3+0x1d0>
 200d730:	7205883a 	add	r2,r14,r8
 200d734:	1391803a 	cmpltu	r8,r2,r14
 200d738:	43d1883a 	add	r8,r8,r15
 200d73c:	013fc004 	movi	r4,-256
 200d740:	111c703a 	and	r14,r2,r4
 200d744:	401f883a 	mov	r15,r8
 200d748:	003fe506 	br	200d6e0 <__divdf3+0x1d0>
 200d74c:	8009883a 	mov	r4,r16
 200d750:	003f9206 	br	200d59c <__divdf3+0x8c>
 200d754:	9809883a 	mov	r4,r19
 200d758:	d8000715 	stw	zero,28(sp)
 200d75c:	d8000815 	stw	zero,32(sp)
 200d760:	d8000615 	stw	zero,24(sp)
 200d764:	003f8d06 	br	200d59c <__divdf3+0x8c>

0200d768 <__eqdf2>:
 200d768:	deffef04 	addi	sp,sp,-68
 200d76c:	dc400f15 	stw	r17,60(sp)
 200d770:	dc400404 	addi	r17,sp,16
 200d774:	2005883a 	mov	r2,r4
 200d778:	2807883a 	mov	r3,r5
 200d77c:	dc000e15 	stw	r16,56(sp)
 200d780:	d809883a 	mov	r4,sp
 200d784:	880b883a 	mov	r5,r17
 200d788:	dc000904 	addi	r16,sp,36
 200d78c:	d8c00115 	stw	r3,4(sp)
 200d790:	d8800015 	stw	r2,0(sp)
 200d794:	d9800215 	stw	r6,8(sp)
 200d798:	dfc01015 	stw	ra,64(sp)
 200d79c:	d9c00315 	stw	r7,12(sp)
 200d7a0:	20035f80 	call	20035f8 <__unpack_d>
 200d7a4:	d9000204 	addi	r4,sp,8
 200d7a8:	800b883a 	mov	r5,r16
 200d7ac:	20035f80 	call	20035f8 <__unpack_d>
 200d7b0:	d8800417 	ldw	r2,16(sp)
 200d7b4:	00c00044 	movi	r3,1
 200d7b8:	180d883a 	mov	r6,r3
 200d7bc:	1880062e 	bgeu	r3,r2,200d7d8 <__eqdf2+0x70>
 200d7c0:	d8800917 	ldw	r2,36(sp)
 200d7c4:	8809883a 	mov	r4,r17
 200d7c8:	800b883a 	mov	r5,r16
 200d7cc:	1880022e 	bgeu	r3,r2,200d7d8 <__eqdf2+0x70>
 200d7d0:	20037300 	call	2003730 <__fpcmp_parts_d>
 200d7d4:	100d883a 	mov	r6,r2
 200d7d8:	3005883a 	mov	r2,r6
 200d7dc:	dfc01017 	ldw	ra,64(sp)
 200d7e0:	dc400f17 	ldw	r17,60(sp)
 200d7e4:	dc000e17 	ldw	r16,56(sp)
 200d7e8:	dec01104 	addi	sp,sp,68
 200d7ec:	f800283a 	ret

0200d7f0 <__nedf2>:
 200d7f0:	deffef04 	addi	sp,sp,-68
 200d7f4:	dc400f15 	stw	r17,60(sp)
 200d7f8:	dc400404 	addi	r17,sp,16
 200d7fc:	2005883a 	mov	r2,r4
 200d800:	2807883a 	mov	r3,r5
 200d804:	dc000e15 	stw	r16,56(sp)
 200d808:	d809883a 	mov	r4,sp
 200d80c:	880b883a 	mov	r5,r17
 200d810:	dc000904 	addi	r16,sp,36
 200d814:	d8c00115 	stw	r3,4(sp)
 200d818:	d8800015 	stw	r2,0(sp)
 200d81c:	d9800215 	stw	r6,8(sp)
 200d820:	dfc01015 	stw	ra,64(sp)
 200d824:	d9c00315 	stw	r7,12(sp)
 200d828:	20035f80 	call	20035f8 <__unpack_d>
 200d82c:	d9000204 	addi	r4,sp,8
 200d830:	800b883a 	mov	r5,r16
 200d834:	20035f80 	call	20035f8 <__unpack_d>
 200d838:	d8800417 	ldw	r2,16(sp)
 200d83c:	00c00044 	movi	r3,1
 200d840:	180d883a 	mov	r6,r3
 200d844:	1880062e 	bgeu	r3,r2,200d860 <__nedf2+0x70>
 200d848:	d8800917 	ldw	r2,36(sp)
 200d84c:	8809883a 	mov	r4,r17
 200d850:	800b883a 	mov	r5,r16
 200d854:	1880022e 	bgeu	r3,r2,200d860 <__nedf2+0x70>
 200d858:	20037300 	call	2003730 <__fpcmp_parts_d>
 200d85c:	100d883a 	mov	r6,r2
 200d860:	3005883a 	mov	r2,r6
 200d864:	dfc01017 	ldw	ra,64(sp)
 200d868:	dc400f17 	ldw	r17,60(sp)
 200d86c:	dc000e17 	ldw	r16,56(sp)
 200d870:	dec01104 	addi	sp,sp,68
 200d874:	f800283a 	ret

0200d878 <__gtdf2>:
 200d878:	deffef04 	addi	sp,sp,-68
 200d87c:	dc400f15 	stw	r17,60(sp)
 200d880:	dc400404 	addi	r17,sp,16
 200d884:	2005883a 	mov	r2,r4
 200d888:	2807883a 	mov	r3,r5
 200d88c:	dc000e15 	stw	r16,56(sp)
 200d890:	d809883a 	mov	r4,sp
 200d894:	880b883a 	mov	r5,r17
 200d898:	dc000904 	addi	r16,sp,36
 200d89c:	d8c00115 	stw	r3,4(sp)
 200d8a0:	d8800015 	stw	r2,0(sp)
 200d8a4:	d9800215 	stw	r6,8(sp)
 200d8a8:	dfc01015 	stw	ra,64(sp)
 200d8ac:	d9c00315 	stw	r7,12(sp)
 200d8b0:	20035f80 	call	20035f8 <__unpack_d>
 200d8b4:	d9000204 	addi	r4,sp,8
 200d8b8:	800b883a 	mov	r5,r16
 200d8bc:	20035f80 	call	20035f8 <__unpack_d>
 200d8c0:	d8800417 	ldw	r2,16(sp)
 200d8c4:	00c00044 	movi	r3,1
 200d8c8:	01bfffc4 	movi	r6,-1
 200d8cc:	1880062e 	bgeu	r3,r2,200d8e8 <__gtdf2+0x70>
 200d8d0:	d8800917 	ldw	r2,36(sp)
 200d8d4:	8809883a 	mov	r4,r17
 200d8d8:	800b883a 	mov	r5,r16
 200d8dc:	1880022e 	bgeu	r3,r2,200d8e8 <__gtdf2+0x70>
 200d8e0:	20037300 	call	2003730 <__fpcmp_parts_d>
 200d8e4:	100d883a 	mov	r6,r2
 200d8e8:	3005883a 	mov	r2,r6
 200d8ec:	dfc01017 	ldw	ra,64(sp)
 200d8f0:	dc400f17 	ldw	r17,60(sp)
 200d8f4:	dc000e17 	ldw	r16,56(sp)
 200d8f8:	dec01104 	addi	sp,sp,68
 200d8fc:	f800283a 	ret

0200d900 <__gedf2>:
 200d900:	deffef04 	addi	sp,sp,-68
 200d904:	dc400f15 	stw	r17,60(sp)
 200d908:	dc400404 	addi	r17,sp,16
 200d90c:	2005883a 	mov	r2,r4
 200d910:	2807883a 	mov	r3,r5
 200d914:	dc000e15 	stw	r16,56(sp)
 200d918:	d809883a 	mov	r4,sp
 200d91c:	880b883a 	mov	r5,r17
 200d920:	dc000904 	addi	r16,sp,36
 200d924:	d8c00115 	stw	r3,4(sp)
 200d928:	d8800015 	stw	r2,0(sp)
 200d92c:	d9800215 	stw	r6,8(sp)
 200d930:	dfc01015 	stw	ra,64(sp)
 200d934:	d9c00315 	stw	r7,12(sp)
 200d938:	20035f80 	call	20035f8 <__unpack_d>
 200d93c:	d9000204 	addi	r4,sp,8
 200d940:	800b883a 	mov	r5,r16
 200d944:	20035f80 	call	20035f8 <__unpack_d>
 200d948:	d8800417 	ldw	r2,16(sp)
 200d94c:	00c00044 	movi	r3,1
 200d950:	01bfffc4 	movi	r6,-1
 200d954:	1880062e 	bgeu	r3,r2,200d970 <__gedf2+0x70>
 200d958:	d8800917 	ldw	r2,36(sp)
 200d95c:	8809883a 	mov	r4,r17
 200d960:	800b883a 	mov	r5,r16
 200d964:	1880022e 	bgeu	r3,r2,200d970 <__gedf2+0x70>
 200d968:	20037300 	call	2003730 <__fpcmp_parts_d>
 200d96c:	100d883a 	mov	r6,r2
 200d970:	3005883a 	mov	r2,r6
 200d974:	dfc01017 	ldw	ra,64(sp)
 200d978:	dc400f17 	ldw	r17,60(sp)
 200d97c:	dc000e17 	ldw	r16,56(sp)
 200d980:	dec01104 	addi	sp,sp,68
 200d984:	f800283a 	ret

0200d988 <__ltdf2>:
 200d988:	deffef04 	addi	sp,sp,-68
 200d98c:	dc400f15 	stw	r17,60(sp)
 200d990:	dc400404 	addi	r17,sp,16
 200d994:	2005883a 	mov	r2,r4
 200d998:	2807883a 	mov	r3,r5
 200d99c:	dc000e15 	stw	r16,56(sp)
 200d9a0:	d809883a 	mov	r4,sp
 200d9a4:	880b883a 	mov	r5,r17
 200d9a8:	dc000904 	addi	r16,sp,36
 200d9ac:	d8c00115 	stw	r3,4(sp)
 200d9b0:	d8800015 	stw	r2,0(sp)
 200d9b4:	d9800215 	stw	r6,8(sp)
 200d9b8:	dfc01015 	stw	ra,64(sp)
 200d9bc:	d9c00315 	stw	r7,12(sp)
 200d9c0:	20035f80 	call	20035f8 <__unpack_d>
 200d9c4:	d9000204 	addi	r4,sp,8
 200d9c8:	800b883a 	mov	r5,r16
 200d9cc:	20035f80 	call	20035f8 <__unpack_d>
 200d9d0:	d8800417 	ldw	r2,16(sp)
 200d9d4:	00c00044 	movi	r3,1
 200d9d8:	180d883a 	mov	r6,r3
 200d9dc:	1880062e 	bgeu	r3,r2,200d9f8 <__ltdf2+0x70>
 200d9e0:	d8800917 	ldw	r2,36(sp)
 200d9e4:	8809883a 	mov	r4,r17
 200d9e8:	800b883a 	mov	r5,r16
 200d9ec:	1880022e 	bgeu	r3,r2,200d9f8 <__ltdf2+0x70>
 200d9f0:	20037300 	call	2003730 <__fpcmp_parts_d>
 200d9f4:	100d883a 	mov	r6,r2
 200d9f8:	3005883a 	mov	r2,r6
 200d9fc:	dfc01017 	ldw	ra,64(sp)
 200da00:	dc400f17 	ldw	r17,60(sp)
 200da04:	dc000e17 	ldw	r16,56(sp)
 200da08:	dec01104 	addi	sp,sp,68
 200da0c:	f800283a 	ret

0200da10 <__floatsidf>:
 200da10:	2006d7fa 	srli	r3,r4,31
 200da14:	defff604 	addi	sp,sp,-40
 200da18:	008000c4 	movi	r2,3
 200da1c:	dfc00915 	stw	ra,36(sp)
 200da20:	dcc00815 	stw	r19,32(sp)
 200da24:	dc800715 	stw	r18,28(sp)
 200da28:	dc400615 	stw	r17,24(sp)
 200da2c:	dc000515 	stw	r16,20(sp)
 200da30:	d8800015 	stw	r2,0(sp)
 200da34:	d8c00115 	stw	r3,4(sp)
 200da38:	20000f1e 	bne	r4,zero,200da78 <__floatsidf+0x68>
 200da3c:	00800084 	movi	r2,2
 200da40:	d8800015 	stw	r2,0(sp)
 200da44:	d809883a 	mov	r4,sp
 200da48:	20032e40 	call	20032e4 <__pack_d>
 200da4c:	1009883a 	mov	r4,r2
 200da50:	180b883a 	mov	r5,r3
 200da54:	2005883a 	mov	r2,r4
 200da58:	2807883a 	mov	r3,r5
 200da5c:	dfc00917 	ldw	ra,36(sp)
 200da60:	dcc00817 	ldw	r19,32(sp)
 200da64:	dc800717 	ldw	r18,28(sp)
 200da68:	dc400617 	ldw	r17,24(sp)
 200da6c:	dc000517 	ldw	r16,20(sp)
 200da70:	dec00a04 	addi	sp,sp,40
 200da74:	f800283a 	ret
 200da78:	00800f04 	movi	r2,60
 200da7c:	1807003a 	cmpeq	r3,r3,zero
 200da80:	d8800215 	stw	r2,8(sp)
 200da84:	18001126 	beq	r3,zero,200dacc <__floatsidf+0xbc>
 200da88:	0027883a 	mov	r19,zero
 200da8c:	2025883a 	mov	r18,r4
 200da90:	d9000315 	stw	r4,12(sp)
 200da94:	dcc00415 	stw	r19,16(sp)
 200da98:	200de980 	call	200de98 <__clzsi2>
 200da9c:	11000744 	addi	r4,r2,29
 200daa0:	013fe80e 	bge	zero,r4,200da44 <__floatsidf+0x34>
 200daa4:	10bfff44 	addi	r2,r2,-3
 200daa8:	10000c16 	blt	r2,zero,200dadc <__floatsidf+0xcc>
 200daac:	90a2983a 	sll	r17,r18,r2
 200dab0:	0021883a 	mov	r16,zero
 200dab4:	d8800217 	ldw	r2,8(sp)
 200dab8:	dc400415 	stw	r17,16(sp)
 200dabc:	dc000315 	stw	r16,12(sp)
 200dac0:	1105c83a 	sub	r2,r2,r4
 200dac4:	d8800215 	stw	r2,8(sp)
 200dac8:	003fde06 	br	200da44 <__floatsidf+0x34>
 200dacc:	00a00034 	movhi	r2,32768
 200dad0:	20800a26 	beq	r4,r2,200dafc <__floatsidf+0xec>
 200dad4:	0109c83a 	sub	r4,zero,r4
 200dad8:	003feb06 	br	200da88 <__floatsidf+0x78>
 200dadc:	9006d07a 	srli	r3,r18,1
 200dae0:	008007c4 	movi	r2,31
 200dae4:	1105c83a 	sub	r2,r2,r4
 200dae8:	1886d83a 	srl	r3,r3,r2
 200daec:	9922983a 	sll	r17,r19,r4
 200daf0:	9120983a 	sll	r16,r18,r4
 200daf4:	1c62b03a 	or	r17,r3,r17
 200daf8:	003fee06 	br	200dab4 <__floatsidf+0xa4>
 200dafc:	0009883a 	mov	r4,zero
 200db00:	01707834 	movhi	r5,49632
 200db04:	003fd306 	br	200da54 <__floatsidf+0x44>

0200db08 <__fixdfsi>:
 200db08:	defff804 	addi	sp,sp,-32
 200db0c:	2005883a 	mov	r2,r4
 200db10:	2807883a 	mov	r3,r5
 200db14:	d809883a 	mov	r4,sp
 200db18:	d9400204 	addi	r5,sp,8
 200db1c:	d8c00115 	stw	r3,4(sp)
 200db20:	d8800015 	stw	r2,0(sp)
 200db24:	dfc00715 	stw	ra,28(sp)
 200db28:	20035f80 	call	20035f8 <__unpack_d>
 200db2c:	d8c00217 	ldw	r3,8(sp)
 200db30:	00800084 	movi	r2,2
 200db34:	1880051e 	bne	r3,r2,200db4c <__fixdfsi+0x44>
 200db38:	0007883a 	mov	r3,zero
 200db3c:	1805883a 	mov	r2,r3
 200db40:	dfc00717 	ldw	ra,28(sp)
 200db44:	dec00804 	addi	sp,sp,32
 200db48:	f800283a 	ret
 200db4c:	00800044 	movi	r2,1
 200db50:	10fff92e 	bgeu	r2,r3,200db38 <__fixdfsi+0x30>
 200db54:	00800104 	movi	r2,4
 200db58:	18800426 	beq	r3,r2,200db6c <__fixdfsi+0x64>
 200db5c:	d8c00417 	ldw	r3,16(sp)
 200db60:	183ff516 	blt	r3,zero,200db38 <__fixdfsi+0x30>
 200db64:	00800784 	movi	r2,30
 200db68:	10c0080e 	bge	r2,r3,200db8c <__fixdfsi+0x84>
 200db6c:	d8800317 	ldw	r2,12(sp)
 200db70:	1000121e 	bne	r2,zero,200dbbc <__fixdfsi+0xb4>
 200db74:	00e00034 	movhi	r3,32768
 200db78:	18ffffc4 	addi	r3,r3,-1
 200db7c:	1805883a 	mov	r2,r3
 200db80:	dfc00717 	ldw	ra,28(sp)
 200db84:	dec00804 	addi	sp,sp,32
 200db88:	f800283a 	ret
 200db8c:	00800f04 	movi	r2,60
 200db90:	10d1c83a 	sub	r8,r2,r3
 200db94:	40bff804 	addi	r2,r8,-32
 200db98:	d9800517 	ldw	r6,20(sp)
 200db9c:	d9c00617 	ldw	r7,24(sp)
 200dba0:	10000816 	blt	r2,zero,200dbc4 <__fixdfsi+0xbc>
 200dba4:	3888d83a 	srl	r4,r7,r2
 200dba8:	d8800317 	ldw	r2,12(sp)
 200dbac:	2007883a 	mov	r3,r4
 200dbb0:	103fe226 	beq	r2,zero,200db3c <__fixdfsi+0x34>
 200dbb4:	0107c83a 	sub	r3,zero,r4
 200dbb8:	003fe006 	br	200db3c <__fixdfsi+0x34>
 200dbbc:	00e00034 	movhi	r3,32768
 200dbc0:	003fde06 	br	200db3c <__fixdfsi+0x34>
 200dbc4:	39c7883a 	add	r3,r7,r7
 200dbc8:	008007c4 	movi	r2,31
 200dbcc:	1205c83a 	sub	r2,r2,r8
 200dbd0:	1886983a 	sll	r3,r3,r2
 200dbd4:	3208d83a 	srl	r4,r6,r8
 200dbd8:	1908b03a 	or	r4,r3,r4
 200dbdc:	003ff206 	br	200dba8 <__fixdfsi+0xa0>

0200dbe0 <__floatunsidf>:
 200dbe0:	defff204 	addi	sp,sp,-56
 200dbe4:	dfc00d15 	stw	ra,52(sp)
 200dbe8:	ddc00c15 	stw	r23,48(sp)
 200dbec:	dd800b15 	stw	r22,44(sp)
 200dbf0:	dd400a15 	stw	r21,40(sp)
 200dbf4:	dd000915 	stw	r20,36(sp)
 200dbf8:	dcc00815 	stw	r19,32(sp)
 200dbfc:	dc800715 	stw	r18,28(sp)
 200dc00:	dc400615 	stw	r17,24(sp)
 200dc04:	dc000515 	stw	r16,20(sp)
 200dc08:	d8000115 	stw	zero,4(sp)
 200dc0c:	20000f1e 	bne	r4,zero,200dc4c <__floatunsidf+0x6c>
 200dc10:	00800084 	movi	r2,2
 200dc14:	d8800015 	stw	r2,0(sp)
 200dc18:	d809883a 	mov	r4,sp
 200dc1c:	20032e40 	call	20032e4 <__pack_d>
 200dc20:	dfc00d17 	ldw	ra,52(sp)
 200dc24:	ddc00c17 	ldw	r23,48(sp)
 200dc28:	dd800b17 	ldw	r22,44(sp)
 200dc2c:	dd400a17 	ldw	r21,40(sp)
 200dc30:	dd000917 	ldw	r20,36(sp)
 200dc34:	dcc00817 	ldw	r19,32(sp)
 200dc38:	dc800717 	ldw	r18,28(sp)
 200dc3c:	dc400617 	ldw	r17,24(sp)
 200dc40:	dc000517 	ldw	r16,20(sp)
 200dc44:	dec00e04 	addi	sp,sp,56
 200dc48:	f800283a 	ret
 200dc4c:	008000c4 	movi	r2,3
 200dc50:	00c00f04 	movi	r3,60
 200dc54:	002f883a 	mov	r23,zero
 200dc58:	202d883a 	mov	r22,r4
 200dc5c:	d8800015 	stw	r2,0(sp)
 200dc60:	d8c00215 	stw	r3,8(sp)
 200dc64:	d9000315 	stw	r4,12(sp)
 200dc68:	ddc00415 	stw	r23,16(sp)
 200dc6c:	200de980 	call	200de98 <__clzsi2>
 200dc70:	12400744 	addi	r9,r2,29
 200dc74:	48000b16 	blt	r9,zero,200dca4 <__floatunsidf+0xc4>
 200dc78:	483fe726 	beq	r9,zero,200dc18 <__floatunsidf+0x38>
 200dc7c:	10bfff44 	addi	r2,r2,-3
 200dc80:	10002e16 	blt	r2,zero,200dd3c <__floatunsidf+0x15c>
 200dc84:	b0a2983a 	sll	r17,r22,r2
 200dc88:	0021883a 	mov	r16,zero
 200dc8c:	d8800217 	ldw	r2,8(sp)
 200dc90:	dc400415 	stw	r17,16(sp)
 200dc94:	dc000315 	stw	r16,12(sp)
 200dc98:	1245c83a 	sub	r2,r2,r9
 200dc9c:	d8800215 	stw	r2,8(sp)
 200dca0:	003fdd06 	br	200dc18 <__floatunsidf+0x38>
 200dca4:	0255c83a 	sub	r10,zero,r9
 200dca8:	51bff804 	addi	r6,r10,-32
 200dcac:	30001b16 	blt	r6,zero,200dd1c <__floatunsidf+0x13c>
 200dcb0:	b9a8d83a 	srl	r20,r23,r6
 200dcb4:	002b883a 	mov	r21,zero
 200dcb8:	000f883a 	mov	r7,zero
 200dcbc:	01000044 	movi	r4,1
 200dcc0:	0011883a 	mov	r8,zero
 200dcc4:	30002516 	blt	r6,zero,200dd5c <__floatunsidf+0x17c>
 200dcc8:	21a6983a 	sll	r19,r4,r6
 200dccc:	0025883a 	mov	r18,zero
 200dcd0:	00bfffc4 	movi	r2,-1
 200dcd4:	9089883a 	add	r4,r18,r2
 200dcd8:	988b883a 	add	r5,r19,r2
 200dcdc:	248d803a 	cmpltu	r6,r4,r18
 200dce0:	314b883a 	add	r5,r6,r5
 200dce4:	b104703a 	and	r2,r22,r4
 200dce8:	b946703a 	and	r3,r23,r5
 200dcec:	10c4b03a 	or	r2,r2,r3
 200dcf0:	10000226 	beq	r2,zero,200dcfc <__floatunsidf+0x11c>
 200dcf4:	01c00044 	movi	r7,1
 200dcf8:	0011883a 	mov	r8,zero
 200dcfc:	d9000217 	ldw	r4,8(sp)
 200dd00:	a1c4b03a 	or	r2,r20,r7
 200dd04:	aa06b03a 	or	r3,r21,r8
 200dd08:	2249c83a 	sub	r4,r4,r9
 200dd0c:	d8c00415 	stw	r3,16(sp)
 200dd10:	d9000215 	stw	r4,8(sp)
 200dd14:	d8800315 	stw	r2,12(sp)
 200dd18:	003fbf06 	br	200dc18 <__floatunsidf+0x38>
 200dd1c:	bdc7883a 	add	r3,r23,r23
 200dd20:	008007c4 	movi	r2,31
 200dd24:	1285c83a 	sub	r2,r2,r10
 200dd28:	1886983a 	sll	r3,r3,r2
 200dd2c:	b2a8d83a 	srl	r20,r22,r10
 200dd30:	baaad83a 	srl	r21,r23,r10
 200dd34:	1d28b03a 	or	r20,r3,r20
 200dd38:	003fdf06 	br	200dcb8 <__floatunsidf+0xd8>
 200dd3c:	b006d07a 	srli	r3,r22,1
 200dd40:	008007c4 	movi	r2,31
 200dd44:	1245c83a 	sub	r2,r2,r9
 200dd48:	1886d83a 	srl	r3,r3,r2
 200dd4c:	ba62983a 	sll	r17,r23,r9
 200dd50:	b260983a 	sll	r16,r22,r9
 200dd54:	1c62b03a 	or	r17,r3,r17
 200dd58:	003fcc06 	br	200dc8c <__floatunsidf+0xac>
 200dd5c:	2006d07a 	srli	r3,r4,1
 200dd60:	008007c4 	movi	r2,31
 200dd64:	1285c83a 	sub	r2,r2,r10
 200dd68:	18a6d83a 	srl	r19,r3,r2
 200dd6c:	22a4983a 	sll	r18,r4,r10
 200dd70:	003fd706 	br	200dcd0 <__floatunsidf+0xf0>

0200dd74 <__muldi3>:
 200dd74:	defff204 	addi	sp,sp,-56
 200dd78:	df000c15 	stw	fp,48(sp)
 200dd7c:	3038d43a 	srli	fp,r6,16
 200dd80:	dd000815 	stw	r20,32(sp)
 200dd84:	dc400515 	stw	r17,20(sp)
 200dd88:	2028d43a 	srli	r20,r4,16
 200dd8c:	247fffcc 	andi	r17,r4,65535
 200dd90:	dc000415 	stw	r16,16(sp)
 200dd94:	343fffcc 	andi	r16,r6,65535
 200dd98:	dcc00715 	stw	r19,28(sp)
 200dd9c:	d9000015 	stw	r4,0(sp)
 200dda0:	2827883a 	mov	r19,r5
 200dda4:	8809883a 	mov	r4,r17
 200dda8:	d9400115 	stw	r5,4(sp)
 200ddac:	800b883a 	mov	r5,r16
 200ddb0:	d9800215 	stw	r6,8(sp)
 200ddb4:	dfc00d15 	stw	ra,52(sp)
 200ddb8:	d9c00315 	stw	r7,12(sp)
 200ddbc:	dd800a15 	stw	r22,40(sp)
 200ddc0:	dd400915 	stw	r21,36(sp)
 200ddc4:	302d883a 	mov	r22,r6
 200ddc8:	ddc00b15 	stw	r23,44(sp)
 200ddcc:	dc800615 	stw	r18,24(sp)
 200ddd0:	20032ac0 	call	20032ac <__mulsi3>
 200ddd4:	8809883a 	mov	r4,r17
 200ddd8:	e00b883a 	mov	r5,fp
 200dddc:	102b883a 	mov	r21,r2
 200dde0:	20032ac0 	call	20032ac <__mulsi3>
 200dde4:	800b883a 	mov	r5,r16
 200dde8:	a009883a 	mov	r4,r20
 200ddec:	1023883a 	mov	r17,r2
 200ddf0:	20032ac0 	call	20032ac <__mulsi3>
 200ddf4:	a009883a 	mov	r4,r20
 200ddf8:	e00b883a 	mov	r5,fp
 200ddfc:	1021883a 	mov	r16,r2
 200de00:	20032ac0 	call	20032ac <__mulsi3>
 200de04:	a8ffffcc 	andi	r3,r21,65535
 200de08:	a82ad43a 	srli	r21,r21,16
 200de0c:	8c23883a 	add	r17,r17,r16
 200de10:	1011883a 	mov	r8,r2
 200de14:	ac6b883a 	add	r21,r21,r17
 200de18:	a804943a 	slli	r2,r21,16
 200de1c:	b009883a 	mov	r4,r22
 200de20:	980b883a 	mov	r5,r19
 200de24:	10c7883a 	add	r3,r2,r3
 200de28:	a812d43a 	srli	r9,r21,16
 200de2c:	180d883a 	mov	r6,r3
 200de30:	ac00022e 	bgeu	r21,r16,200de3c <__muldi3+0xc8>
 200de34:	00800074 	movhi	r2,1
 200de38:	4091883a 	add	r8,r8,r2
 200de3c:	4267883a 	add	r19,r8,r9
 200de40:	302d883a 	mov	r22,r6
 200de44:	20032ac0 	call	20032ac <__mulsi3>
 200de48:	d9400317 	ldw	r5,12(sp)
 200de4c:	d9000017 	ldw	r4,0(sp)
 200de50:	1023883a 	mov	r17,r2
 200de54:	20032ac0 	call	20032ac <__mulsi3>
 200de58:	14cb883a 	add	r5,r2,r19
 200de5c:	894b883a 	add	r5,r17,r5
 200de60:	b005883a 	mov	r2,r22
 200de64:	2807883a 	mov	r3,r5
 200de68:	dfc00d17 	ldw	ra,52(sp)
 200de6c:	df000c17 	ldw	fp,48(sp)
 200de70:	ddc00b17 	ldw	r23,44(sp)
 200de74:	dd800a17 	ldw	r22,40(sp)
 200de78:	dd400917 	ldw	r21,36(sp)
 200de7c:	dd000817 	ldw	r20,32(sp)
 200de80:	dcc00717 	ldw	r19,28(sp)
 200de84:	dc800617 	ldw	r18,24(sp)
 200de88:	dc400517 	ldw	r17,20(sp)
 200de8c:	dc000417 	ldw	r16,16(sp)
 200de90:	dec00e04 	addi	sp,sp,56
 200de94:	f800283a 	ret

0200de98 <__clzsi2>:
 200de98:	00bfffd4 	movui	r2,65535
 200de9c:	11000e36 	bltu	r2,r4,200ded8 <__clzsi2+0x40>
 200dea0:	00803fc4 	movi	r2,255
 200dea4:	01400204 	movi	r5,8
 200dea8:	0007883a 	mov	r3,zero
 200deac:	11001036 	bltu	r2,r4,200def0 <__clzsi2+0x58>
 200deb0:	000b883a 	mov	r5,zero
 200deb4:	20c6d83a 	srl	r3,r4,r3
 200deb8:	008080b4 	movhi	r2,514
 200debc:	10a9a404 	addi	r2,r2,-22896
 200dec0:	1887883a 	add	r3,r3,r2
 200dec4:	18800003 	ldbu	r2,0(r3)
 200dec8:	00c00804 	movi	r3,32
 200decc:	2885883a 	add	r2,r5,r2
 200ded0:	1885c83a 	sub	r2,r3,r2
 200ded4:	f800283a 	ret
 200ded8:	01400404 	movi	r5,16
 200dedc:	00804034 	movhi	r2,256
 200dee0:	10bfffc4 	addi	r2,r2,-1
 200dee4:	2807883a 	mov	r3,r5
 200dee8:	113ff22e 	bgeu	r2,r4,200deb4 <__clzsi2+0x1c>
 200deec:	01400604 	movi	r5,24
 200def0:	2807883a 	mov	r3,r5
 200def4:	20c6d83a 	srl	r3,r4,r3
 200def8:	008080b4 	movhi	r2,514
 200defc:	10a9a404 	addi	r2,r2,-22896
 200df00:	1887883a 	add	r3,r3,r2
 200df04:	18800003 	ldbu	r2,0(r3)
 200df08:	00c00804 	movi	r3,32
 200df0c:	2885883a 	add	r2,r5,r2
 200df10:	1885c83a 	sub	r2,r3,r2
 200df14:	f800283a 	ret

0200df18 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 200df18:	defff404 	addi	sp,sp,-48
 200df1c:	df000b15 	stw	fp,44(sp)
 200df20:	df000b04 	addi	fp,sp,44
 200df24:	e13ffb15 	stw	r4,-20(fp)
 200df28:	e17ffc15 	stw	r5,-16(fp)
 200df2c:	e1bffd15 	stw	r6,-12(fp)
 200df30:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 200df34:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200df38:	008080b4 	movhi	r2,514
 200df3c:	10b80004 	addi	r2,r2,-8192
 200df40:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 200df44:	1005003a 	cmpeq	r2,r2,zero
 200df48:	1000411e 	bne	r2,zero,200e050 <alt_alarm_start+0x138>
  {
    if (alarm)
 200df4c:	e0bffb17 	ldw	r2,-20(fp)
 200df50:	1005003a 	cmpeq	r2,r2,zero
 200df54:	10003b1e 	bne	r2,zero,200e044 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 200df58:	e0fffb17 	ldw	r3,-20(fp)
 200df5c:	e0bffd17 	ldw	r2,-12(fp)
 200df60:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 200df64:	e0fffb17 	ldw	r3,-20(fp)
 200df68:	e0bffe17 	ldw	r2,-8(fp)
 200df6c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200df70:	0005303a 	rdctl	r2,status
 200df74:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200df78:	e0fff817 	ldw	r3,-32(fp)
 200df7c:	00bfff84 	movi	r2,-2
 200df80:	1884703a 	and	r2,r3,r2
 200df84:	1001703a 	wrctl	status,r2
  
  return context;
 200df88:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 200df8c:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 200df90:	008080b4 	movhi	r2,514
 200df94:	10b80104 	addi	r2,r2,-8188
 200df98:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 200df9c:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 200dfa0:	e0fffc17 	ldw	r3,-16(fp)
 200dfa4:	e0bff917 	ldw	r2,-28(fp)
 200dfa8:	1885883a 	add	r2,r3,r2
 200dfac:	10c00044 	addi	r3,r2,1
 200dfb0:	e0bffb17 	ldw	r2,-20(fp)
 200dfb4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 200dfb8:	e0bffb17 	ldw	r2,-20(fp)
 200dfbc:	10c00217 	ldw	r3,8(r2)
 200dfc0:	e0bff917 	ldw	r2,-28(fp)
 200dfc4:	1880042e 	bgeu	r3,r2,200dfd8 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 200dfc8:	e0fffb17 	ldw	r3,-20(fp)
 200dfcc:	00800044 	movi	r2,1
 200dfd0:	18800405 	stb	r2,16(r3)
 200dfd4:	00000206 	br	200dfe0 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 200dfd8:	e0bffb17 	ldw	r2,-20(fp)
 200dfdc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 200dfe0:	e0fffb17 	ldw	r3,-20(fp)
 200dfe4:	008080b4 	movhi	r2,514
 200dfe8:	10b0f104 	addi	r2,r2,-15420
 200dfec:	e0bff615 	stw	r2,-40(fp)
 200dff0:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 200dff4:	e0fff717 	ldw	r3,-36(fp)
 200dff8:	e0bff617 	ldw	r2,-40(fp)
 200dffc:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 200e000:	e0bff617 	ldw	r2,-40(fp)
 200e004:	10c00017 	ldw	r3,0(r2)
 200e008:	e0bff717 	ldw	r2,-36(fp)
 200e00c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 200e010:	e0bff617 	ldw	r2,-40(fp)
 200e014:	10c00017 	ldw	r3,0(r2)
 200e018:	e0bff717 	ldw	r2,-36(fp)
 200e01c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 200e020:	e0fff617 	ldw	r3,-40(fp)
 200e024:	e0bff717 	ldw	r2,-36(fp)
 200e028:	18800015 	stw	r2,0(r3)
 200e02c:	e0bffa17 	ldw	r2,-24(fp)
 200e030:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e034:	e0bff517 	ldw	r2,-44(fp)
 200e038:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 200e03c:	e03fff15 	stw	zero,-4(fp)
 200e040:	00000506 	br	200e058 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 200e044:	00bffa84 	movi	r2,-22
 200e048:	e0bfff15 	stw	r2,-4(fp)
 200e04c:	00000206 	br	200e058 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 200e050:	00bfde84 	movi	r2,-134
 200e054:	e0bfff15 	stw	r2,-4(fp)
 200e058:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 200e05c:	e037883a 	mov	sp,fp
 200e060:	df000017 	ldw	fp,0(sp)
 200e064:	dec00104 	addi	sp,sp,4
 200e068:	f800283a 	ret

0200e06c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 200e06c:	defff804 	addi	sp,sp,-32
 200e070:	dfc00715 	stw	ra,28(sp)
 200e074:	df000615 	stw	fp,24(sp)
 200e078:	df000604 	addi	fp,sp,24
 200e07c:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 200e080:	e0bffc17 	ldw	r2,-16(fp)
 200e084:	1004803a 	cmplt	r2,r2,zero
 200e088:	1000091e 	bne	r2,zero,200e0b0 <close+0x44>
 200e08c:	e13ffc17 	ldw	r4,-16(fp)
 200e090:	01400304 	movi	r5,12
 200e094:	20032ac0 	call	20032ac <__mulsi3>
 200e098:	1007883a 	mov	r3,r2
 200e09c:	008080b4 	movhi	r2,514
 200e0a0:	10ac5204 	addi	r2,r2,-20152
 200e0a4:	1887883a 	add	r3,r3,r2
 200e0a8:	e0ffff15 	stw	r3,-4(fp)
 200e0ac:	00000106 	br	200e0b4 <close+0x48>
 200e0b0:	e03fff15 	stw	zero,-4(fp)
 200e0b4:	e0bfff17 	ldw	r2,-4(fp)
 200e0b8:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 200e0bc:	e0bffb17 	ldw	r2,-20(fp)
 200e0c0:	1005003a 	cmpeq	r2,r2,zero
 200e0c4:	10001d1e 	bne	r2,zero,200e13c <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 200e0c8:	e0bffb17 	ldw	r2,-20(fp)
 200e0cc:	10800017 	ldw	r2,0(r2)
 200e0d0:	10800417 	ldw	r2,16(r2)
 200e0d4:	1005003a 	cmpeq	r2,r2,zero
 200e0d8:	1000071e 	bne	r2,zero,200e0f8 <close+0x8c>
 200e0dc:	e0bffb17 	ldw	r2,-20(fp)
 200e0e0:	10800017 	ldw	r2,0(r2)
 200e0e4:	10800417 	ldw	r2,16(r2)
 200e0e8:	e13ffb17 	ldw	r4,-20(fp)
 200e0ec:	103ee83a 	callr	r2
 200e0f0:	e0bffe15 	stw	r2,-8(fp)
 200e0f4:	00000106 	br	200e0fc <close+0x90>
 200e0f8:	e03ffe15 	stw	zero,-8(fp)
 200e0fc:	e0bffe17 	ldw	r2,-8(fp)
 200e100:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 200e104:	e13ffc17 	ldw	r4,-16(fp)
 200e108:	200eccc0 	call	200eccc <alt_release_fd>
    if (rval < 0)
 200e10c:	e0bffa17 	ldw	r2,-24(fp)
 200e110:	1004403a 	cmpge	r2,r2,zero
 200e114:	1000071e 	bne	r2,zero,200e134 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 200e118:	200e16c0 	call	200e16c <alt_get_errno>
 200e11c:	e0fffa17 	ldw	r3,-24(fp)
 200e120:	00c7c83a 	sub	r3,zero,r3
 200e124:	10c00015 	stw	r3,0(r2)
      return -1;
 200e128:	00bfffc4 	movi	r2,-1
 200e12c:	e0bffd15 	stw	r2,-12(fp)
 200e130:	00000806 	br	200e154 <close+0xe8>
    }
    return 0;
 200e134:	e03ffd15 	stw	zero,-12(fp)
 200e138:	00000606 	br	200e154 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200e13c:	200e16c0 	call	200e16c <alt_get_errno>
 200e140:	1007883a 	mov	r3,r2
 200e144:	00801444 	movi	r2,81
 200e148:	18800015 	stw	r2,0(r3)
    return -1;
 200e14c:	00bfffc4 	movi	r2,-1
 200e150:	e0bffd15 	stw	r2,-12(fp)
 200e154:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 200e158:	e037883a 	mov	sp,fp
 200e15c:	dfc00117 	ldw	ra,4(sp)
 200e160:	df000017 	ldw	fp,0(sp)
 200e164:	dec00204 	addi	sp,sp,8
 200e168:	f800283a 	ret

0200e16c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e16c:	defffd04 	addi	sp,sp,-12
 200e170:	dfc00215 	stw	ra,8(sp)
 200e174:	df000115 	stw	fp,4(sp)
 200e178:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200e17c:	008080b4 	movhi	r2,514
 200e180:	10b0ee04 	addi	r2,r2,-15432
 200e184:	10800017 	ldw	r2,0(r2)
 200e188:	1005003a 	cmpeq	r2,r2,zero
 200e18c:	1000061e 	bne	r2,zero,200e1a8 <alt_get_errno+0x3c>
 200e190:	008080b4 	movhi	r2,514
 200e194:	10b0ee04 	addi	r2,r2,-15432
 200e198:	10800017 	ldw	r2,0(r2)
 200e19c:	103ee83a 	callr	r2
 200e1a0:	e0bfff15 	stw	r2,-4(fp)
 200e1a4:	00000306 	br	200e1b4 <alt_get_errno+0x48>
 200e1a8:	008080b4 	movhi	r2,514
 200e1ac:	10b7f704 	addi	r2,r2,-8228
 200e1b0:	e0bfff15 	stw	r2,-4(fp)
 200e1b4:	e0bfff17 	ldw	r2,-4(fp)
}
 200e1b8:	e037883a 	mov	sp,fp
 200e1bc:	dfc00117 	ldw	ra,4(sp)
 200e1c0:	df000017 	ldw	fp,0(sp)
 200e1c4:	dec00204 	addi	sp,sp,8
 200e1c8:	f800283a 	ret

0200e1cc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 200e1cc:	defffc04 	addi	sp,sp,-16
 200e1d0:	df000315 	stw	fp,12(sp)
 200e1d4:	df000304 	addi	fp,sp,12
 200e1d8:	e13ffd15 	stw	r4,-12(fp)
 200e1dc:	e17ffe15 	stw	r5,-8(fp)
 200e1e0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 200e1e4:	e0bfff17 	ldw	r2,-4(fp)
}
 200e1e8:	e037883a 	mov	sp,fp
 200e1ec:	df000017 	ldw	fp,0(sp)
 200e1f0:	dec00104 	addi	sp,sp,4
 200e1f4:	f800283a 	ret

0200e1f8 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 200e1f8:	defffd04 	addi	sp,sp,-12
 200e1fc:	df000215 	stw	fp,8(sp)
 200e200:	df000204 	addi	fp,sp,8
 200e204:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 200e208:	e0bfff17 	ldw	r2,-4(fp)
 200e20c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 200e210:	e0bffe17 	ldw	r2,-8(fp)
 200e214:	1005003a 	cmpeq	r2,r2,zero
 200e218:	1000021e 	bne	r2,zero,200e224 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 200e21c:	002af070 	cmpltui	zero,zero,43969
 200e220:	00000106 	br	200e228 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 200e224:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 200e228:	e037883a 	mov	sp,fp
 200e22c:	df000017 	ldw	fp,0(sp)
 200e230:	dec00104 	addi	sp,sp,4
 200e234:	f800283a 	ret

0200e238 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 200e238:	defffd04 	addi	sp,sp,-12
 200e23c:	dfc00215 	stw	ra,8(sp)
 200e240:	df000115 	stw	fp,4(sp)
 200e244:	df000104 	addi	fp,sp,4
 200e248:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 200e24c:	008080b4 	movhi	r2,514
 200e250:	10b80644 	addi	r2,r2,-8167
 200e254:	10000005 	stb	zero,0(r2)

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 200e258:	e13fff17 	ldw	r4,-4(fp)
 200e25c:	200e1f80 	call	200e1f8 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 200e260:	003fff06 	br	200e260 <_exit+0x28>

0200e264 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 200e264:	defff904 	addi	sp,sp,-28
 200e268:	dfc00615 	stw	ra,24(sp)
 200e26c:	df000515 	stw	fp,20(sp)
 200e270:	df000504 	addi	fp,sp,20
 200e274:	e13ffc15 	stw	r4,-16(fp)
 200e278:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e27c:	e0bffc17 	ldw	r2,-16(fp)
 200e280:	1004803a 	cmplt	r2,r2,zero
 200e284:	1000091e 	bne	r2,zero,200e2ac <fstat+0x48>
 200e288:	e13ffc17 	ldw	r4,-16(fp)
 200e28c:	01400304 	movi	r5,12
 200e290:	20032ac0 	call	20032ac <__mulsi3>
 200e294:	1007883a 	mov	r3,r2
 200e298:	008080b4 	movhi	r2,514
 200e29c:	10ac5204 	addi	r2,r2,-20152
 200e2a0:	1887883a 	add	r3,r3,r2
 200e2a4:	e0ffff15 	stw	r3,-4(fp)
 200e2a8:	00000106 	br	200e2b0 <fstat+0x4c>
 200e2ac:	e03fff15 	stw	zero,-4(fp)
 200e2b0:	e0bfff17 	ldw	r2,-4(fp)
 200e2b4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200e2b8:	e0bffb17 	ldw	r2,-20(fp)
 200e2bc:	1005003a 	cmpeq	r2,r2,zero
 200e2c0:	1000121e 	bne	r2,zero,200e30c <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 200e2c4:	e0bffb17 	ldw	r2,-20(fp)
 200e2c8:	10800017 	ldw	r2,0(r2)
 200e2cc:	10800817 	ldw	r2,32(r2)
 200e2d0:	1005003a 	cmpeq	r2,r2,zero
 200e2d4:	1000081e 	bne	r2,zero,200e2f8 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 200e2d8:	e0bffb17 	ldw	r2,-20(fp)
 200e2dc:	10800017 	ldw	r2,0(r2)
 200e2e0:	10800817 	ldw	r2,32(r2)
 200e2e4:	e13ffb17 	ldw	r4,-20(fp)
 200e2e8:	e17ffd17 	ldw	r5,-12(fp)
 200e2ec:	103ee83a 	callr	r2
 200e2f0:	e0bffe15 	stw	r2,-8(fp)
 200e2f4:	00000b06 	br	200e324 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 200e2f8:	e0fffd17 	ldw	r3,-12(fp)
 200e2fc:	00880004 	movi	r2,8192
 200e300:	18800115 	stw	r2,4(r3)
      return 0;
 200e304:	e03ffe15 	stw	zero,-8(fp)
 200e308:	00000606 	br	200e324 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200e30c:	200e33c0 	call	200e33c <alt_get_errno>
 200e310:	1007883a 	mov	r3,r2
 200e314:	00801444 	movi	r2,81
 200e318:	18800015 	stw	r2,0(r3)
    return -1;
 200e31c:	00bfffc4 	movi	r2,-1
 200e320:	e0bffe15 	stw	r2,-8(fp)
 200e324:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 200e328:	e037883a 	mov	sp,fp
 200e32c:	dfc00117 	ldw	ra,4(sp)
 200e330:	df000017 	ldw	fp,0(sp)
 200e334:	dec00204 	addi	sp,sp,8
 200e338:	f800283a 	ret

0200e33c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e33c:	defffd04 	addi	sp,sp,-12
 200e340:	dfc00215 	stw	ra,8(sp)
 200e344:	df000115 	stw	fp,4(sp)
 200e348:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200e34c:	008080b4 	movhi	r2,514
 200e350:	10b0ee04 	addi	r2,r2,-15432
 200e354:	10800017 	ldw	r2,0(r2)
 200e358:	1005003a 	cmpeq	r2,r2,zero
 200e35c:	1000061e 	bne	r2,zero,200e378 <alt_get_errno+0x3c>
 200e360:	008080b4 	movhi	r2,514
 200e364:	10b0ee04 	addi	r2,r2,-15432
 200e368:	10800017 	ldw	r2,0(r2)
 200e36c:	103ee83a 	callr	r2
 200e370:	e0bfff15 	stw	r2,-4(fp)
 200e374:	00000306 	br	200e384 <alt_get_errno+0x48>
 200e378:	008080b4 	movhi	r2,514
 200e37c:	10b7f704 	addi	r2,r2,-8228
 200e380:	e0bfff15 	stw	r2,-4(fp)
 200e384:	e0bfff17 	ldw	r2,-4(fp)
}
 200e388:	e037883a 	mov	sp,fp
 200e38c:	dfc00117 	ldw	ra,4(sp)
 200e390:	df000017 	ldw	fp,0(sp)
 200e394:	dec00204 	addi	sp,sp,8
 200e398:	f800283a 	ret

0200e39c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 200e39c:	deffff04 	addi	sp,sp,-4
 200e3a0:	df000015 	stw	fp,0(sp)
 200e3a4:	d839883a 	mov	fp,sp
  return 0;
 200e3a8:	0005883a 	mov	r2,zero
}
 200e3ac:	e037883a 	mov	sp,fp
 200e3b0:	df000017 	ldw	fp,0(sp)
 200e3b4:	dec00104 	addi	sp,sp,4
 200e3b8:	f800283a 	ret

0200e3bc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 200e3bc:	deffef04 	addi	sp,sp,-68
 200e3c0:	df001015 	stw	fp,64(sp)
 200e3c4:	df001004 	addi	fp,sp,64
 200e3c8:	e13ffc15 	stw	r4,-16(fp)
 200e3cc:	e17ffd15 	stw	r5,-12(fp)
 200e3d0:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 200e3d4:	00bffa84 	movi	r2,-22
 200e3d8:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 200e3dc:	e0bffc17 	ldw	r2,-16(fp)
 200e3e0:	10800828 	cmpgeui	r2,r2,32
 200e3e4:	1000601e 	bne	r2,zero,200e568 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e3e8:	0005303a 	rdctl	r2,status
 200e3ec:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e3f0:	e0fff917 	ldw	r3,-28(fp)
 200e3f4:	00bfff84 	movi	r2,-2
 200e3f8:	1884703a 	and	r2,r3,r2
 200e3fc:	1001703a 	wrctl	status,r2
  
  return context;
 200e400:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 200e404:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 200e408:	e0bffc17 	ldw	r2,-16(fp)
 200e40c:	00c080f4 	movhi	r3,515
 200e410:	18e67f04 	addi	r3,r3,-26116
 200e414:	100490fa 	slli	r2,r2,3
 200e418:	10c7883a 	add	r3,r2,r3
 200e41c:	e0bffe17 	ldw	r2,-8(fp)
 200e420:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 200e424:	e0bffc17 	ldw	r2,-16(fp)
 200e428:	00c080f4 	movhi	r3,515
 200e42c:	18e67f04 	addi	r3,r3,-26116
 200e430:	100490fa 	slli	r2,r2,3
 200e434:	10c5883a 	add	r2,r2,r3
 200e438:	10c00104 	addi	r3,r2,4
 200e43c:	e0bffd17 	ldw	r2,-12(fp)
 200e440:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 200e444:	e0bffe17 	ldw	r2,-8(fp)
 200e448:	1005003a 	cmpeq	r2,r2,zero
 200e44c:	1000201e 	bne	r2,zero,200e4d0 <alt_irq_register+0x114>
 200e450:	e0bffc17 	ldw	r2,-16(fp)
 200e454:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e458:	0005303a 	rdctl	r2,status
 200e45c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e460:	e0fff617 	ldw	r3,-40(fp)
 200e464:	00bfff84 	movi	r2,-2
 200e468:	1884703a 	and	r2,r3,r2
 200e46c:	1001703a 	wrctl	status,r2
  
  return context;
 200e470:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200e474:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 200e478:	e0fff717 	ldw	r3,-36(fp)
 200e47c:	00800044 	movi	r2,1
 200e480:	10c4983a 	sll	r2,r2,r3
 200e484:	1007883a 	mov	r3,r2
 200e488:	008080b4 	movhi	r2,514
 200e48c:	10b7fc04 	addi	r2,r2,-8208
 200e490:	10800017 	ldw	r2,0(r2)
 200e494:	1886b03a 	or	r3,r3,r2
 200e498:	008080b4 	movhi	r2,514
 200e49c:	10b7fc04 	addi	r2,r2,-8208
 200e4a0:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200e4a4:	008080b4 	movhi	r2,514
 200e4a8:	10b7fc04 	addi	r2,r2,-8208
 200e4ac:	10800017 	ldw	r2,0(r2)
 200e4b0:	100170fa 	wrctl	ienable,r2
 200e4b4:	e0bff817 	ldw	r2,-32(fp)
 200e4b8:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e4bc:	e0bff517 	ldw	r2,-44(fp)
 200e4c0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200e4c4:	0005883a 	mov	r2,zero
 200e4c8:	e0bfff15 	stw	r2,-4(fp)
 200e4cc:	00002006 	br	200e550 <alt_irq_register+0x194>
 200e4d0:	e0bffc17 	ldw	r2,-16(fp)
 200e4d4:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200e4d8:	0005303a 	rdctl	r2,status
 200e4dc:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200e4e0:	e0fff217 	ldw	r3,-56(fp)
 200e4e4:	00bfff84 	movi	r2,-2
 200e4e8:	1884703a 	and	r2,r3,r2
 200e4ec:	1001703a 	wrctl	status,r2
  
  return context;
 200e4f0:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 200e4f4:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 200e4f8:	e0fff317 	ldw	r3,-52(fp)
 200e4fc:	00800044 	movi	r2,1
 200e500:	10c4983a 	sll	r2,r2,r3
 200e504:	0084303a 	nor	r2,zero,r2
 200e508:	1007883a 	mov	r3,r2
 200e50c:	008080b4 	movhi	r2,514
 200e510:	10b7fc04 	addi	r2,r2,-8208
 200e514:	10800017 	ldw	r2,0(r2)
 200e518:	1886703a 	and	r3,r3,r2
 200e51c:	008080b4 	movhi	r2,514
 200e520:	10b7fc04 	addi	r2,r2,-8208
 200e524:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 200e528:	008080b4 	movhi	r2,514
 200e52c:	10b7fc04 	addi	r2,r2,-8208
 200e530:	10800017 	ldw	r2,0(r2)
 200e534:	100170fa 	wrctl	ienable,r2
 200e538:	e0bff417 	ldw	r2,-48(fp)
 200e53c:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200e540:	e0bff117 	ldw	r2,-60(fp)
 200e544:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 200e548:	0005883a 	mov	r2,zero
 200e54c:	e0bfff15 	stw	r2,-4(fp)
 200e550:	e0bfff17 	ldw	r2,-4(fp)
 200e554:	e0bffb15 	stw	r2,-20(fp)
 200e558:	e0bffa17 	ldw	r2,-24(fp)
 200e55c:	e0bff015 	stw	r2,-64(fp)
 200e560:	e0bff017 	ldw	r2,-64(fp)
 200e564:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 200e568:	e0bffb17 	ldw	r2,-20(fp)
}
 200e56c:	e037883a 	mov	sp,fp
 200e570:	df000017 	ldw	fp,0(sp)
 200e574:	dec00104 	addi	sp,sp,4
 200e578:	f800283a 	ret

0200e57c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 200e57c:	deffeb04 	addi	sp,sp,-84
 200e580:	dfc01415 	stw	ra,80(sp)
 200e584:	df001315 	stw	fp,76(sp)
 200e588:	df001304 	addi	fp,sp,76
 200e58c:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e590:	e0bffd17 	ldw	r2,-12(fp)
 200e594:	1004803a 	cmplt	r2,r2,zero
 200e598:	1000091e 	bne	r2,zero,200e5c0 <isatty+0x44>
 200e59c:	e13ffd17 	ldw	r4,-12(fp)
 200e5a0:	01400304 	movi	r5,12
 200e5a4:	20032ac0 	call	20032ac <__mulsi3>
 200e5a8:	1007883a 	mov	r3,r2
 200e5ac:	008080b4 	movhi	r2,514
 200e5b0:	10ac5204 	addi	r2,r2,-20152
 200e5b4:	1887883a 	add	r3,r3,r2
 200e5b8:	e0ffff15 	stw	r3,-4(fp)
 200e5bc:	00000106 	br	200e5c4 <isatty+0x48>
 200e5c0:	e03fff15 	stw	zero,-4(fp)
 200e5c4:	e0bfff17 	ldw	r2,-4(fp)
 200e5c8:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 200e5cc:	e0bfed17 	ldw	r2,-76(fp)
 200e5d0:	1005003a 	cmpeq	r2,r2,zero
 200e5d4:	10000f1e 	bne	r2,zero,200e614 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 200e5d8:	e0bfed17 	ldw	r2,-76(fp)
 200e5dc:	10800017 	ldw	r2,0(r2)
 200e5e0:	10800817 	ldw	r2,32(r2)
 200e5e4:	1004c03a 	cmpne	r2,r2,zero
 200e5e8:	1000031e 	bne	r2,zero,200e5f8 <isatty+0x7c>
    {
      return 1;
 200e5ec:	00800044 	movi	r2,1
 200e5f0:	e0bffe15 	stw	r2,-8(fp)
 200e5f4:	00000c06 	br	200e628 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 200e5f8:	e17fee04 	addi	r5,fp,-72
 200e5fc:	e13ffd17 	ldw	r4,-12(fp)
 200e600:	200e2640 	call	200e264 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 200e604:	e0bfef17 	ldw	r2,-68(fp)
 200e608:	10880020 	cmpeqi	r2,r2,8192
 200e60c:	e0bffe15 	stw	r2,-8(fp)
 200e610:	00000506 	br	200e628 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 200e614:	200e6400 	call	200e640 <alt_get_errno>
 200e618:	1007883a 	mov	r3,r2
 200e61c:	00801444 	movi	r2,81
 200e620:	18800015 	stw	r2,0(r3)
    return 0;
 200e624:	e03ffe15 	stw	zero,-8(fp)
 200e628:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 200e62c:	e037883a 	mov	sp,fp
 200e630:	dfc00117 	ldw	ra,4(sp)
 200e634:	df000017 	ldw	fp,0(sp)
 200e638:	dec00204 	addi	sp,sp,8
 200e63c:	f800283a 	ret

0200e640 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e640:	defffd04 	addi	sp,sp,-12
 200e644:	dfc00215 	stw	ra,8(sp)
 200e648:	df000115 	stw	fp,4(sp)
 200e64c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200e650:	008080b4 	movhi	r2,514
 200e654:	10b0ee04 	addi	r2,r2,-15432
 200e658:	10800017 	ldw	r2,0(r2)
 200e65c:	1005003a 	cmpeq	r2,r2,zero
 200e660:	1000061e 	bne	r2,zero,200e67c <alt_get_errno+0x3c>
 200e664:	008080b4 	movhi	r2,514
 200e668:	10b0ee04 	addi	r2,r2,-15432
 200e66c:	10800017 	ldw	r2,0(r2)
 200e670:	103ee83a 	callr	r2
 200e674:	e0bfff15 	stw	r2,-4(fp)
 200e678:	00000306 	br	200e688 <alt_get_errno+0x48>
 200e67c:	008080b4 	movhi	r2,514
 200e680:	10b7f704 	addi	r2,r2,-8228
 200e684:	e0bfff15 	stw	r2,-4(fp)
 200e688:	e0bfff17 	ldw	r2,-4(fp)
}
 200e68c:	e037883a 	mov	sp,fp
 200e690:	dfc00117 	ldw	ra,4(sp)
 200e694:	df000017 	ldw	fp,0(sp)
 200e698:	dec00204 	addi	sp,sp,8
 200e69c:	f800283a 	ret

0200e6a0 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 200e6a0:	defffa04 	addi	sp,sp,-24
 200e6a4:	dfc00515 	stw	ra,20(sp)
 200e6a8:	df000415 	stw	fp,16(sp)
 200e6ac:	df000404 	addi	fp,sp,16
 200e6b0:	e13ffd15 	stw	r4,-12(fp)
 200e6b4:	e17ffe15 	stw	r5,-8(fp)
  int status = 0;
 200e6b8:	e03ffc15 	stw	zero,-16(fp)

  if (pid <= 0)
 200e6bc:	e0bffd17 	ldw	r2,-12(fp)
 200e6c0:	10800048 	cmpgei	r2,r2,1
 200e6c4:	1000301e 	bne	r2,zero,200e788 <kill+0xe8>
  {
    switch (sig)
 200e6c8:	e0bffe17 	ldw	r2,-8(fp)
 200e6cc:	10800828 	cmpgeui	r2,r2,32
 200e6d0:	10002a1e 	bne	r2,zero,200e77c <kill+0xdc>
 200e6d4:	e0bffe17 	ldw	r2,-8(fp)
 200e6d8:	1085883a 	add	r2,r2,r2
 200e6dc:	1087883a 	add	r3,r2,r2
 200e6e0:	00808074 	movhi	r2,513
 200e6e4:	10b9bd04 	addi	r2,r2,-6412
 200e6e8:	1885883a 	add	r2,r3,r2
 200e6ec:	10800017 	ldw	r2,0(r2)
 200e6f0:	1000683a 	jmp	r2
 200e6f4:	0200e79c 	xori	r8,zero,926
 200e6f8:	0200e77c 	xorhi	r8,zero,925
 200e6fc:	0200e77c 	xorhi	r8,zero,925
 200e700:	0200e774 	movhi	r8,925
 200e704:	0200e774 	movhi	r8,925
 200e708:	0200e774 	movhi	r8,925
 200e70c:	0200e774 	movhi	r8,925
 200e710:	0200e77c 	xorhi	r8,zero,925
 200e714:	0200e774 	movhi	r8,925
 200e718:	0200e774 	movhi	r8,925
 200e71c:	0200e774 	movhi	r8,925
 200e720:	0200e774 	movhi	r8,925
 200e724:	0200e774 	movhi	r8,925
 200e728:	0200e774 	movhi	r8,925
 200e72c:	0200e774 	movhi	r8,925
 200e730:	0200e774 	movhi	r8,925
 200e734:	0200e79c 	xori	r8,zero,926
 200e738:	0200e77c 	xorhi	r8,zero,925
 200e73c:	0200e77c 	xorhi	r8,zero,925
 200e740:	0200e77c 	xorhi	r8,zero,925
 200e744:	0200e79c 	xori	r8,zero,926
 200e748:	0200e77c 	xorhi	r8,zero,925
 200e74c:	0200e77c 	xorhi	r8,zero,925
 200e750:	0200e774 	movhi	r8,925
 200e754:	0200e774 	movhi	r8,925
 200e758:	0200e774 	movhi	r8,925
 200e75c:	0200e774 	movhi	r8,925
 200e760:	0200e774 	movhi	r8,925
 200e764:	0200e77c 	xorhi	r8,zero,925
 200e768:	0200e77c 	xorhi	r8,zero,925
 200e76c:	0200e774 	movhi	r8,925
 200e770:	0200e774 	movhi	r8,925
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 200e774:	0009883a 	mov	r4,zero
 200e778:	200e2380 	call	200e238 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 200e77c:	00800584 	movi	r2,22
 200e780:	e0bffc15 	stw	r2,-16(fp)
 200e784:	00000506 	br	200e79c <kill+0xfc>
    }
  }

  else if (pid > 0)
 200e788:	e0bffd17 	ldw	r2,-12(fp)
 200e78c:	10800050 	cmplti	r2,r2,1
 200e790:	1000021e 	bne	r2,zero,200e79c <kill+0xfc>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 200e794:	008000c4 	movi	r2,3
 200e798:	e0bffc15 	stw	r2,-16(fp)
  }

  if (status)
 200e79c:	e0bffc17 	ldw	r2,-16(fp)
 200e7a0:	1005003a 	cmpeq	r2,r2,zero
 200e7a4:	1000071e 	bne	r2,zero,200e7c4 <kill+0x124>
  {
    ALT_ERRNO = status;
 200e7a8:	200e7e00 	call	200e7e0 <alt_get_errno>
 200e7ac:	1007883a 	mov	r3,r2
 200e7b0:	e0bffc17 	ldw	r2,-16(fp)
 200e7b4:	18800015 	stw	r2,0(r3)
    return -1;
 200e7b8:	00bfffc4 	movi	r2,-1
 200e7bc:	e0bfff15 	stw	r2,-4(fp)
 200e7c0:	00000106 	br	200e7c8 <kill+0x128>
  }

  return 0;
 200e7c4:	e03fff15 	stw	zero,-4(fp)
 200e7c8:	e0bfff17 	ldw	r2,-4(fp)
}
 200e7cc:	e037883a 	mov	sp,fp
 200e7d0:	dfc00117 	ldw	ra,4(sp)
 200e7d4:	df000017 	ldw	fp,0(sp)
 200e7d8:	dec00204 	addi	sp,sp,8
 200e7dc:	f800283a 	ret

0200e7e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200e7e0:	defffd04 	addi	sp,sp,-12
 200e7e4:	dfc00215 	stw	ra,8(sp)
 200e7e8:	df000115 	stw	fp,4(sp)
 200e7ec:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200e7f0:	008080b4 	movhi	r2,514
 200e7f4:	10b0ee04 	addi	r2,r2,-15432
 200e7f8:	10800017 	ldw	r2,0(r2)
 200e7fc:	1005003a 	cmpeq	r2,r2,zero
 200e800:	1000061e 	bne	r2,zero,200e81c <alt_get_errno+0x3c>
 200e804:	008080b4 	movhi	r2,514
 200e808:	10b0ee04 	addi	r2,r2,-15432
 200e80c:	10800017 	ldw	r2,0(r2)
 200e810:	103ee83a 	callr	r2
 200e814:	e0bfff15 	stw	r2,-4(fp)
 200e818:	00000306 	br	200e828 <alt_get_errno+0x48>
 200e81c:	008080b4 	movhi	r2,514
 200e820:	10b7f704 	addi	r2,r2,-8228
 200e824:	e0bfff15 	stw	r2,-4(fp)
 200e828:	e0bfff17 	ldw	r2,-4(fp)
}
 200e82c:	e037883a 	mov	sp,fp
 200e830:	dfc00117 	ldw	ra,4(sp)
 200e834:	df000017 	ldw	fp,0(sp)
 200e838:	dec00204 	addi	sp,sp,8
 200e83c:	f800283a 	ret

0200e840 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 200e840:	defffe04 	addi	sp,sp,-8
 200e844:	dfc00115 	stw	ra,4(sp)
 200e848:	df000015 	stw	fp,0(sp)
 200e84c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 200e850:	010080b4 	movhi	r4,514
 200e854:	21311204 	addi	r4,r4,-15288
 200e858:	014080b4 	movhi	r5,514
 200e85c:	296a4304 	addi	r5,r5,-22260
 200e860:	018080b4 	movhi	r6,514
 200e864:	31b11204 	addi	r6,r6,-15288
 200e868:	200e8c00 	call	200e8c0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 200e86c:	01008034 	movhi	r4,512
 200e870:	21000004 	addi	r4,r4,0
 200e874:	01410034 	movhi	r5,1024
 200e878:	29500804 	addi	r5,r5,16416
 200e87c:	01810034 	movhi	r6,1024
 200e880:	31907004 	addi	r6,r6,16832
 200e884:	200e8c00 	call	200e8c0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 200e888:	010080b4 	movhi	r4,514
 200e88c:	2127e704 	addi	r4,r4,-24676
 200e890:	014080b4 	movhi	r5,514
 200e894:	2967e704 	addi	r5,r5,-24676
 200e898:	018080b4 	movhi	r6,514
 200e89c:	31aa4304 	addi	r6,r6,-22260
 200e8a0:	200e8c00 	call	200e8c0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 200e8a4:	2018de80 	call	2018de8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 200e8a8:	20190740 	call	2019074 <alt_icache_flush_all>
}
 200e8ac:	e037883a 	mov	sp,fp
 200e8b0:	dfc00117 	ldw	ra,4(sp)
 200e8b4:	df000017 	ldw	fp,0(sp)
 200e8b8:	dec00204 	addi	sp,sp,8
 200e8bc:	f800283a 	ret

0200e8c0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 200e8c0:	defffc04 	addi	sp,sp,-16
 200e8c4:	df000315 	stw	fp,12(sp)
 200e8c8:	df000304 	addi	fp,sp,12
 200e8cc:	e13ffd15 	stw	r4,-12(fp)
 200e8d0:	e17ffe15 	stw	r5,-8(fp)
 200e8d4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 200e8d8:	e0fffe17 	ldw	r3,-8(fp)
 200e8dc:	e0bffd17 	ldw	r2,-12(fp)
 200e8e0:	18800e26 	beq	r3,r2,200e91c <alt_load_section+0x5c>
  {
    while( to != end )
 200e8e4:	00000a06 	br	200e910 <alt_load_section+0x50>
    {
      *to++ = *from++;
 200e8e8:	e0bffd17 	ldw	r2,-12(fp)
 200e8ec:	10c00017 	ldw	r3,0(r2)
 200e8f0:	e0bffe17 	ldw	r2,-8(fp)
 200e8f4:	10c00015 	stw	r3,0(r2)
 200e8f8:	e0bffe17 	ldw	r2,-8(fp)
 200e8fc:	10800104 	addi	r2,r2,4
 200e900:	e0bffe15 	stw	r2,-8(fp)
 200e904:	e0bffd17 	ldw	r2,-12(fp)
 200e908:	10800104 	addi	r2,r2,4
 200e90c:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 200e910:	e0fffe17 	ldw	r3,-8(fp)
 200e914:	e0bfff17 	ldw	r2,-4(fp)
 200e918:	18bff31e 	bne	r3,r2,200e8e8 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 200e91c:	e037883a 	mov	sp,fp
 200e920:	df000017 	ldw	fp,0(sp)
 200e924:	dec00104 	addi	sp,sp,4
 200e928:	f800283a 	ret

0200e92c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 200e92c:	defff804 	addi	sp,sp,-32
 200e930:	dfc00715 	stw	ra,28(sp)
 200e934:	df000615 	stw	fp,24(sp)
 200e938:	df000604 	addi	fp,sp,24
 200e93c:	e13ffc15 	stw	r4,-16(fp)
 200e940:	e17ffd15 	stw	r5,-12(fp)
 200e944:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 200e948:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200e94c:	e0bffc17 	ldw	r2,-16(fp)
 200e950:	1004803a 	cmplt	r2,r2,zero
 200e954:	1000091e 	bne	r2,zero,200e97c <lseek+0x50>
 200e958:	e13ffc17 	ldw	r4,-16(fp)
 200e95c:	01400304 	movi	r5,12
 200e960:	20032ac0 	call	20032ac <__mulsi3>
 200e964:	1007883a 	mov	r3,r2
 200e968:	008080b4 	movhi	r2,514
 200e96c:	10ac5204 	addi	r2,r2,-20152
 200e970:	1887883a 	add	r3,r3,r2
 200e974:	e0ffff15 	stw	r3,-4(fp)
 200e978:	00000106 	br	200e980 <lseek+0x54>
 200e97c:	e03fff15 	stw	zero,-4(fp)
 200e980:	e0bfff17 	ldw	r2,-4(fp)
 200e984:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 200e988:	e0bffb17 	ldw	r2,-20(fp)
 200e98c:	1005003a 	cmpeq	r2,r2,zero
 200e990:	1000111e 	bne	r2,zero,200e9d8 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 200e994:	e0bffb17 	ldw	r2,-20(fp)
 200e998:	10800017 	ldw	r2,0(r2)
 200e99c:	10800717 	ldw	r2,28(r2)
 200e9a0:	1005003a 	cmpeq	r2,r2,zero
 200e9a4:	1000091e 	bne	r2,zero,200e9cc <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 200e9a8:	e0bffb17 	ldw	r2,-20(fp)
 200e9ac:	10800017 	ldw	r2,0(r2)
 200e9b0:	10800717 	ldw	r2,28(r2)
 200e9b4:	e13ffb17 	ldw	r4,-20(fp)
 200e9b8:	e17ffd17 	ldw	r5,-12(fp)
 200e9bc:	e1bffe17 	ldw	r6,-8(fp)
 200e9c0:	103ee83a 	callr	r2
 200e9c4:	e0bffa15 	stw	r2,-24(fp)
 200e9c8:	00000506 	br	200e9e0 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 200e9cc:	00bfde84 	movi	r2,-134
 200e9d0:	e0bffa15 	stw	r2,-24(fp)
 200e9d4:	00000206 	br	200e9e0 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 200e9d8:	00bfebc4 	movi	r2,-81
 200e9dc:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 200e9e0:	e0bffa17 	ldw	r2,-24(fp)
 200e9e4:	1004403a 	cmpge	r2,r2,zero
 200e9e8:	1000071e 	bne	r2,zero,200ea08 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 200e9ec:	200ea200 	call	200ea20 <alt_get_errno>
 200e9f0:	1007883a 	mov	r3,r2
 200e9f4:	e0bffa17 	ldw	r2,-24(fp)
 200e9f8:	0085c83a 	sub	r2,zero,r2
 200e9fc:	18800015 	stw	r2,0(r3)
    rc = -1;
 200ea00:	00bfffc4 	movi	r2,-1
 200ea04:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 200ea08:	e0bffa17 	ldw	r2,-24(fp)
}
 200ea0c:	e037883a 	mov	sp,fp
 200ea10:	dfc00117 	ldw	ra,4(sp)
 200ea14:	df000017 	ldw	fp,0(sp)
 200ea18:	dec00204 	addi	sp,sp,8
 200ea1c:	f800283a 	ret

0200ea20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200ea20:	defffd04 	addi	sp,sp,-12
 200ea24:	dfc00215 	stw	ra,8(sp)
 200ea28:	df000115 	stw	fp,4(sp)
 200ea2c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200ea30:	008080b4 	movhi	r2,514
 200ea34:	10b0ee04 	addi	r2,r2,-15432
 200ea38:	10800017 	ldw	r2,0(r2)
 200ea3c:	1005003a 	cmpeq	r2,r2,zero
 200ea40:	1000061e 	bne	r2,zero,200ea5c <alt_get_errno+0x3c>
 200ea44:	008080b4 	movhi	r2,514
 200ea48:	10b0ee04 	addi	r2,r2,-15432
 200ea4c:	10800017 	ldw	r2,0(r2)
 200ea50:	103ee83a 	callr	r2
 200ea54:	e0bfff15 	stw	r2,-4(fp)
 200ea58:	00000306 	br	200ea68 <alt_get_errno+0x48>
 200ea5c:	008080b4 	movhi	r2,514
 200ea60:	10b7f704 	addi	r2,r2,-8228
 200ea64:	e0bfff15 	stw	r2,-4(fp)
 200ea68:	e0bfff17 	ldw	r2,-4(fp)
}
 200ea6c:	e037883a 	mov	sp,fp
 200ea70:	dfc00117 	ldw	ra,4(sp)
 200ea74:	df000017 	ldw	fp,0(sp)
 200ea78:	dec00204 	addi	sp,sp,8
 200ea7c:	f800283a 	ret

0200ea80 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 200ea80:	defffb04 	addi	sp,sp,-20
 200ea84:	dfc00415 	stw	ra,16(sp)
 200ea88:	df000315 	stw	fp,12(sp)
 200ea8c:	df000304 	addi	fp,sp,12
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 200ea90:	0009883a 	mov	r4,zero
 200ea94:	20178180 	call	2017818 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 200ea98:	200fe540 	call	200fe54 <OSInit>
 200ea9c:	01000044 	movi	r4,1
 200eaa0:	2014d1c0 	call	2014d1c <OSSemCreate>
 200eaa4:	1007883a 	mov	r3,r2
 200eaa8:	008080b4 	movhi	r2,514
 200eaac:	10b80304 	addi	r2,r2,-8180
 200eab0:	10c00015 	stw	r3,0(r2)
 200eab4:	01000044 	movi	r4,1
 200eab8:	2014d1c0 	call	2014d1c <OSSemCreate>
 200eabc:	1007883a 	mov	r3,r2
 200eac0:	008080b4 	movhi	r2,514
 200eac4:	10b80504 	addi	r2,r2,-8172
 200eac8:	10c00015 	stw	r3,0(r2)
 200eacc:	008080b4 	movhi	r2,514
 200ead0:	10b7fb04 	addi	r2,r2,-8212
 200ead4:	e0bffd15 	stw	r2,-12(fp)
 200ead8:	00800044 	movi	r2,1
 200eadc:	e0bffe0d 	sth	r2,-8(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 200eae0:	e13ffe0b 	ldhu	r4,-8(fp)
 200eae4:	2014d1c0 	call	2014d1c <OSSemCreate>
 200eae8:	1007883a 	mov	r3,r2
 200eaec:	e0bffd17 	ldw	r2,-12(fp)
 200eaf0:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 200eaf4:	201784c0 	call	201784c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 200eaf8:	010080b4 	movhi	r4,514
 200eafc:	2129e704 	addi	r4,r4,-22628
 200eb00:	014080b4 	movhi	r5,514
 200eb04:	2969e704 	addi	r5,r5,-22628
 200eb08:	018080b4 	movhi	r6,514
 200eb0c:	31a9e704 	addi	r6,r6,-22628
 200eb10:	20191680 	call	2019168 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200eb14:	2018f180 	call	2018f18 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 200eb18:	010080b4 	movhi	r4,514
 200eb1c:	2123df04 	addi	r4,r4,-28804
 200eb20:	2019bf00 	call	2019bf0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200eb24:	d1271a17 	ldw	r4,-25496(gp)
 200eb28:	d1671b17 	ldw	r5,-25492(gp)
 200eb2c:	d1a71c17 	ldw	r6,-25488(gp)
 200eb30:	2000a1c0 	call	2000a1c <main>
 200eb34:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 200eb38:	01000044 	movi	r4,1
 200eb3c:	200e06c0 	call	200e06c <close>
  exit (result);
 200eb40:	e13fff17 	ldw	r4,-4(fp)
 200eb44:	2019c040 	call	2019c04 <exit>

0200eb48 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 200eb48:	defff704 	addi	sp,sp,-36
 200eb4c:	dfc00815 	stw	ra,32(sp)
 200eb50:	df000715 	stw	fp,28(sp)
 200eb54:	df000704 	addi	fp,sp,28
 200eb58:	e13ffb15 	stw	r4,-20(fp)
 200eb5c:	e17ffc15 	stw	r5,-16(fp)
 200eb60:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200eb64:	e0bffb17 	ldw	r2,-20(fp)
 200eb68:	1004803a 	cmplt	r2,r2,zero
 200eb6c:	1000091e 	bne	r2,zero,200eb94 <read+0x4c>
 200eb70:	e13ffb17 	ldw	r4,-20(fp)
 200eb74:	01400304 	movi	r5,12
 200eb78:	20032ac0 	call	20032ac <__mulsi3>
 200eb7c:	1007883a 	mov	r3,r2
 200eb80:	008080b4 	movhi	r2,514
 200eb84:	10ac5204 	addi	r2,r2,-20152
 200eb88:	1887883a 	add	r3,r3,r2
 200eb8c:	e0ffff15 	stw	r3,-4(fp)
 200eb90:	00000106 	br	200eb98 <read+0x50>
 200eb94:	e03fff15 	stw	zero,-4(fp)
 200eb98:	e0bfff17 	ldw	r2,-4(fp)
 200eb9c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 200eba0:	e0bffa17 	ldw	r2,-24(fp)
 200eba4:	1005003a 	cmpeq	r2,r2,zero
 200eba8:	1000241e 	bne	r2,zero,200ec3c <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 200ebac:	e0bffa17 	ldw	r2,-24(fp)
 200ebb0:	10800217 	ldw	r2,8(r2)
 200ebb4:	108000cc 	andi	r2,r2,3
 200ebb8:	10800060 	cmpeqi	r2,r2,1
 200ebbc:	10001a1e 	bne	r2,zero,200ec28 <read+0xe0>
 200ebc0:	e0bffa17 	ldw	r2,-24(fp)
 200ebc4:	10800017 	ldw	r2,0(r2)
 200ebc8:	10800517 	ldw	r2,20(r2)
 200ebcc:	1005003a 	cmpeq	r2,r2,zero
 200ebd0:	1000151e 	bne	r2,zero,200ec28 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 200ebd4:	e0bffa17 	ldw	r2,-24(fp)
 200ebd8:	10800017 	ldw	r2,0(r2)
 200ebdc:	10800517 	ldw	r2,20(r2)
 200ebe0:	e17ffc17 	ldw	r5,-16(fp)
 200ebe4:	e1bffd17 	ldw	r6,-12(fp)
 200ebe8:	e13ffa17 	ldw	r4,-24(fp)
 200ebec:	103ee83a 	callr	r2
 200ebf0:	e0bff915 	stw	r2,-28(fp)
 200ebf4:	e0bff917 	ldw	r2,-28(fp)
 200ebf8:	1004403a 	cmpge	r2,r2,zero
 200ebfc:	1000071e 	bne	r2,zero,200ec1c <read+0xd4>
        {
          ALT_ERRNO = -rval;
 200ec00:	200ec6c0 	call	200ec6c <alt_get_errno>
 200ec04:	e0fff917 	ldw	r3,-28(fp)
 200ec08:	00c7c83a 	sub	r3,zero,r3
 200ec0c:	10c00015 	stw	r3,0(r2)
          return -1;
 200ec10:	00bfffc4 	movi	r2,-1
 200ec14:	e0bffe15 	stw	r2,-8(fp)
 200ec18:	00000e06 	br	200ec54 <read+0x10c>
        }
        return rval;
 200ec1c:	e0bff917 	ldw	r2,-28(fp)
 200ec20:	e0bffe15 	stw	r2,-8(fp)
 200ec24:	00000b06 	br	200ec54 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 200ec28:	200ec6c0 	call	200ec6c <alt_get_errno>
 200ec2c:	1007883a 	mov	r3,r2
 200ec30:	00800344 	movi	r2,13
 200ec34:	18800015 	stw	r2,0(r3)
 200ec38:	00000406 	br	200ec4c <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 200ec3c:	200ec6c0 	call	200ec6c <alt_get_errno>
 200ec40:	1007883a 	mov	r3,r2
 200ec44:	00801444 	movi	r2,81
 200ec48:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200ec4c:	00bfffc4 	movi	r2,-1
 200ec50:	e0bffe15 	stw	r2,-8(fp)
 200ec54:	e0bffe17 	ldw	r2,-8(fp)
}
 200ec58:	e037883a 	mov	sp,fp
 200ec5c:	dfc00117 	ldw	ra,4(sp)
 200ec60:	df000017 	ldw	fp,0(sp)
 200ec64:	dec00204 	addi	sp,sp,8
 200ec68:	f800283a 	ret

0200ec6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200ec6c:	defffd04 	addi	sp,sp,-12
 200ec70:	dfc00215 	stw	ra,8(sp)
 200ec74:	df000115 	stw	fp,4(sp)
 200ec78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200ec7c:	008080b4 	movhi	r2,514
 200ec80:	10b0ee04 	addi	r2,r2,-15432
 200ec84:	10800017 	ldw	r2,0(r2)
 200ec88:	1005003a 	cmpeq	r2,r2,zero
 200ec8c:	1000061e 	bne	r2,zero,200eca8 <alt_get_errno+0x3c>
 200ec90:	008080b4 	movhi	r2,514
 200ec94:	10b0ee04 	addi	r2,r2,-15432
 200ec98:	10800017 	ldw	r2,0(r2)
 200ec9c:	103ee83a 	callr	r2
 200eca0:	e0bfff15 	stw	r2,-4(fp)
 200eca4:	00000306 	br	200ecb4 <alt_get_errno+0x48>
 200eca8:	008080b4 	movhi	r2,514
 200ecac:	10b7f704 	addi	r2,r2,-8228
 200ecb0:	e0bfff15 	stw	r2,-4(fp)
 200ecb4:	e0bfff17 	ldw	r2,-4(fp)
}
 200ecb8:	e037883a 	mov	sp,fp
 200ecbc:	dfc00117 	ldw	ra,4(sp)
 200ecc0:	df000017 	ldw	fp,0(sp)
 200ecc4:	dec00204 	addi	sp,sp,8
 200ecc8:	f800283a 	ret

0200eccc <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 200eccc:	defffc04 	addi	sp,sp,-16
 200ecd0:	dfc00315 	stw	ra,12(sp)
 200ecd4:	df000215 	stw	fp,8(sp)
 200ecd8:	dc000115 	stw	r16,4(sp)
 200ecdc:	df000104 	addi	fp,sp,4
 200ece0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 200ece4:	e0bfff17 	ldw	r2,-4(fp)
 200ece8:	108000d0 	cmplti	r2,r2,3
 200ecec:	10000f1e 	bne	r2,zero,200ed2c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 200ecf0:	e13fff17 	ldw	r4,-4(fp)
 200ecf4:	040080b4 	movhi	r16,514
 200ecf8:	842c5204 	addi	r16,r16,-20152
 200ecfc:	01400304 	movi	r5,12
 200ed00:	20032ac0 	call	20032ac <__mulsi3>
 200ed04:	1405883a 	add	r2,r2,r16
 200ed08:	10800204 	addi	r2,r2,8
 200ed0c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 200ed10:	e13fff17 	ldw	r4,-4(fp)
 200ed14:	040080b4 	movhi	r16,514
 200ed18:	842c5204 	addi	r16,r16,-20152
 200ed1c:	01400304 	movi	r5,12
 200ed20:	20032ac0 	call	20032ac <__mulsi3>
 200ed24:	1405883a 	add	r2,r2,r16
 200ed28:	10000015 	stw	zero,0(r2)
  }
}
 200ed2c:	e037883a 	mov	sp,fp
 200ed30:	dfc00217 	ldw	ra,8(sp)
 200ed34:	df000117 	ldw	fp,4(sp)
 200ed38:	dc000017 	ldw	r16,0(sp)
 200ed3c:	dec00304 	addi	sp,sp,12
 200ed40:	f800283a 	ret

0200ed44 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 200ed44:	defff804 	addi	sp,sp,-32
 200ed48:	df000715 	stw	fp,28(sp)
 200ed4c:	df000704 	addi	fp,sp,28
 200ed50:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ed54:	0005303a 	rdctl	r2,status
 200ed58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ed5c:	e0fffb17 	ldw	r3,-20(fp)
 200ed60:	00bfff84 	movi	r2,-2
 200ed64:	1884703a 	and	r2,r3,r2
 200ed68:	1001703a 	wrctl	status,r2
  
  return context;
 200ed6c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 200ed70:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 200ed74:	d0a00d17 	ldw	r2,-32716(gp)
 200ed78:	10c000c4 	addi	r3,r2,3
 200ed7c:	00bfff04 	movi	r2,-4
 200ed80:	1884703a 	and	r2,r3,r2
 200ed84:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 200ed88:	d0e00d17 	ldw	r3,-32716(gp)
 200ed8c:	e0bffe17 	ldw	r2,-8(fp)
 200ed90:	1887883a 	add	r3,r3,r2
 200ed94:	00810034 	movhi	r2,1024
 200ed98:	10800004 	addi	r2,r2,0
 200ed9c:	10c0072e 	bgeu	r2,r3,200edbc <sbrk+0x78>
 200eda0:	e0bffd17 	ldw	r2,-12(fp)
 200eda4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200eda8:	e0bffa17 	ldw	r2,-24(fp)
 200edac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 200edb0:	00bfffc4 	movi	r2,-1
 200edb4:	e0bfff15 	stw	r2,-4(fp)
 200edb8:	00000c06 	br	200edec <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 200edbc:	d0a00d17 	ldw	r2,-32716(gp)
 200edc0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 200edc4:	d0e00d17 	ldw	r3,-32716(gp)
 200edc8:	e0bffe17 	ldw	r2,-8(fp)
 200edcc:	1885883a 	add	r2,r3,r2
 200edd0:	d0a00d15 	stw	r2,-32716(gp)
 200edd4:	e0bffd17 	ldw	r2,-12(fp)
 200edd8:	e0bff915 	stw	r2,-28(fp)
 200eddc:	e0bff917 	ldw	r2,-28(fp)
 200ede0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 200ede4:	e0bffc17 	ldw	r2,-16(fp)
 200ede8:	e0bfff15 	stw	r2,-4(fp)
 200edec:	e0bfff17 	ldw	r2,-4(fp)
} 
 200edf0:	e037883a 	mov	sp,fp
 200edf4:	df000017 	ldw	fp,0(sp)
 200edf8:	dec00104 	addi	sp,sp,4
 200edfc:	f800283a 	ret

0200ee00 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 200ee00:	defffa04 	addi	sp,sp,-24
 200ee04:	df000515 	stw	fp,20(sp)
 200ee08:	df000504 	addi	fp,sp,20
 200ee0c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ee10:	0005303a 	rdctl	r2,status
 200ee14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ee18:	e0fffd17 	ldw	r3,-12(fp)
 200ee1c:	00bfff84 	movi	r2,-2
 200ee20:	1884703a 	and	r2,r3,r2
 200ee24:	1001703a 	wrctl	status,r2
  
  return context;
 200ee28:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 200ee2c:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 200ee30:	e0bfff17 	ldw	r2,-4(fp)
 200ee34:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 200ee38:	e0bffc17 	ldw	r2,-16(fp)
 200ee3c:	10c00017 	ldw	r3,0(r2)
 200ee40:	e0bffc17 	ldw	r2,-16(fp)
 200ee44:	10800117 	ldw	r2,4(r2)
 200ee48:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 200ee4c:	e0bffc17 	ldw	r2,-16(fp)
 200ee50:	10c00117 	ldw	r3,4(r2)
 200ee54:	e0bffc17 	ldw	r2,-16(fp)
 200ee58:	10800017 	ldw	r2,0(r2)
 200ee5c:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 200ee60:	e0fffc17 	ldw	r3,-16(fp)
 200ee64:	e0bffc17 	ldw	r2,-16(fp)
 200ee68:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 200ee6c:	e0fffc17 	ldw	r3,-16(fp)
 200ee70:	e0bffc17 	ldw	r2,-16(fp)
 200ee74:	18800015 	stw	r2,0(r3)
 200ee78:	e0bffe17 	ldw	r2,-8(fp)
 200ee7c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ee80:	e0bffb17 	ldw	r2,-20(fp)
 200ee84:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 200ee88:	e037883a 	mov	sp,fp
 200ee8c:	df000017 	ldw	fp,0(sp)
 200ee90:	dec00104 	addi	sp,sp,4
 200ee94:	f800283a 	ret

0200ee98 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 200ee98:	defffb04 	addi	sp,sp,-20
 200ee9c:	dfc00415 	stw	ra,16(sp)
 200eea0:	df000315 	stw	fp,12(sp)
 200eea4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 200eea8:	d0a00e17 	ldw	r2,-32712(gp)
 200eeac:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 200eeb0:	d0a71e17 	ldw	r2,-25480(gp)
 200eeb4:	10800044 	addi	r2,r2,1
 200eeb8:	d0a71e15 	stw	r2,-25480(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200eebc:	00003106 	br	200ef84 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 200eec0:	e0bffe17 	ldw	r2,-8(fp)
 200eec4:	10800017 	ldw	r2,0(r2)
 200eec8:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 200eecc:	e0bffe17 	ldw	r2,-8(fp)
 200eed0:	10800403 	ldbu	r2,16(r2)
 200eed4:	10803fcc 	andi	r2,r2,255
 200eed8:	1005003a 	cmpeq	r2,r2,zero
 200eedc:	1000051e 	bne	r2,zero,200eef4 <alt_tick+0x5c>
 200eee0:	d0a71e17 	ldw	r2,-25480(gp)
 200eee4:	1004c03a 	cmpne	r2,r2,zero
 200eee8:	1000021e 	bne	r2,zero,200eef4 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 200eeec:	e0bffe17 	ldw	r2,-8(fp)
 200eef0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 200eef4:	e0bffe17 	ldw	r2,-8(fp)
 200eef8:	10c00217 	ldw	r3,8(r2)
 200eefc:	d0a71e17 	ldw	r2,-25480(gp)
 200ef00:	10c01e36 	bltu	r2,r3,200ef7c <alt_tick+0xe4>
 200ef04:	e0bffe17 	ldw	r2,-8(fp)
 200ef08:	10800403 	ldbu	r2,16(r2)
 200ef0c:	10803fcc 	andi	r2,r2,255
 200ef10:	1004c03a 	cmpne	r2,r2,zero
 200ef14:	1000191e 	bne	r2,zero,200ef7c <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 200ef18:	e0bffe17 	ldw	r2,-8(fp)
 200ef1c:	10c00317 	ldw	r3,12(r2)
 200ef20:	e0bffe17 	ldw	r2,-8(fp)
 200ef24:	11000517 	ldw	r4,20(r2)
 200ef28:	183ee83a 	callr	r3
 200ef2c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 200ef30:	e0bffd17 	ldw	r2,-12(fp)
 200ef34:	1004c03a 	cmpne	r2,r2,zero
 200ef38:	1000031e 	bne	r2,zero,200ef48 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 200ef3c:	e13ffe17 	ldw	r4,-8(fp)
 200ef40:	200ee000 	call	200ee00 <alt_alarm_stop>
 200ef44:	00000d06 	br	200ef7c <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 200ef48:	e0bffe17 	ldw	r2,-8(fp)
 200ef4c:	10c00217 	ldw	r3,8(r2)
 200ef50:	e0bffd17 	ldw	r2,-12(fp)
 200ef54:	1887883a 	add	r3,r3,r2
 200ef58:	e0bffe17 	ldw	r2,-8(fp)
 200ef5c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 200ef60:	e0bffe17 	ldw	r2,-8(fp)
 200ef64:	10c00217 	ldw	r3,8(r2)
 200ef68:	d0a71e17 	ldw	r2,-25480(gp)
 200ef6c:	1880032e 	bgeu	r3,r2,200ef7c <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 200ef70:	e0fffe17 	ldw	r3,-8(fp)
 200ef74:	00800044 	movi	r2,1
 200ef78:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 200ef7c:	e0bfff17 	ldw	r2,-4(fp)
 200ef80:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 200ef84:	d0e00e04 	addi	r3,gp,-32712
 200ef88:	e0bffe17 	ldw	r2,-8(fp)
 200ef8c:	10ffcc1e 	bne	r2,r3,200eec0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 200ef90:	20102b00 	call	20102b0 <OSTimeTick>
}
 200ef94:	e037883a 	mov	sp,fp
 200ef98:	dfc00117 	ldw	ra,4(sp)
 200ef9c:	df000017 	ldw	fp,0(sp)
 200efa0:	dec00204 	addi	sp,sp,8
 200efa4:	f800283a 	ret

0200efa8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 200efa8:	defff904 	addi	sp,sp,-28
 200efac:	dfc00615 	stw	ra,24(sp)
 200efb0:	df000515 	stw	fp,20(sp)
 200efb4:	dc000415 	stw	r16,16(sp)
 200efb8:	df000404 	addi	fp,sp,16
 200efbc:	e13ffe15 	stw	r4,-8(fp)
   * If the O/S hasn't started yet, then we delay using a busy loop, rather than
   * OSTimeDly (since this would fail). The use of a busy loop is acceptable,
   * since the system is still running in a single-threaded mode.
   */ 

  if (OSRunning == OS_FALSE)
 200efc0:	008080b4 	movhi	r2,514
 200efc4:	10b80644 	addi	r2,r2,-8167
 200efc8:	10800003 	ldbu	r2,0(r2)
 200efcc:	10803fcc 	andi	r2,r2,255
 200efd0:	1004c03a 	cmpne	r2,r2,zero
 200efd4:	1000041e 	bne	r2,zero,200efe8 <usleep+0x40>
  {
    return alt_busy_sleep (us);
 200efd8:	e13ffe17 	ldw	r4,-8(fp)
 200efdc:	2018c8c0 	call	2018c8c <alt_busy_sleep>
 200efe0:	e0bfff15 	stw	r2,-4(fp)
 200efe4:	00003106 	br	200f0ac <usleep+0x104>
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 200efe8:	008080b4 	movhi	r2,514
 200efec:	10b80004 	addi	r2,r2,-8192
 200eff0:	10800017 	ldw	r2,0(r2)

  /* 
   * Calculate the number of whole system clock ticks to delay.
   */

  tick_rate = alt_ticks_per_second ();
 200eff4:	e0bffc15 	stw	r2,-16(fp)
  ticks     = (us/ALT_US)* tick_rate + ((us%ALT_US)*tick_rate)/ALT_US;
 200eff8:	e13ffe17 	ldw	r4,-8(fp)
 200effc:	014003f4 	movhi	r5,15
 200f000:	29509004 	addi	r5,r5,16960
 200f004:	200329c0 	call	200329c <__udivsi3>
 200f008:	1009883a 	mov	r4,r2
 200f00c:	e17ffc17 	ldw	r5,-16(fp)
 200f010:	20032ac0 	call	20032ac <__mulsi3>
 200f014:	1021883a 	mov	r16,r2
 200f018:	e13ffe17 	ldw	r4,-8(fp)
 200f01c:	014003f4 	movhi	r5,15
 200f020:	29509004 	addi	r5,r5,16960
 200f024:	20032a40 	call	20032a4 <__umodsi3>
 200f028:	1009883a 	mov	r4,r2
 200f02c:	e17ffc17 	ldw	r5,-16(fp)
 200f030:	20032ac0 	call	20032ac <__mulsi3>
 200f034:	1009883a 	mov	r4,r2
 200f038:	014003f4 	movhi	r5,15
 200f03c:	29509004 	addi	r5,r5,16960
 200f040:	200329c0 	call	200329c <__udivsi3>
 200f044:	8085883a 	add	r2,r16,r2
 200f048:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 200f04c:	00000706 	br	200f06c <usleep+0xc4>
  {
    OSTimeDly(0xffff);
 200f050:	013fffd4 	movui	r4,65535
 200f054:	20172640 	call	2017264 <OSTimeDly>
    ticks -= 0xffff;
 200f058:	e0bffd17 	ldw	r2,-12(fp)
 200f05c:	00fffff4 	movhi	r3,65535
 200f060:	18c00044 	addi	r3,r3,1
 200f064:	10c5883a 	add	r2,r2,r3
 200f068:	e0bffd15 	stw	r2,-12(fp)
   * OSTimeDly can only delay for a maximum of 0xffff ticks, so if the requested
   * delay is greater than that, we need to break it down into a number of
   * seperate delays.
   */

  while (ticks > 0xffff)
 200f06c:	e0fffd17 	ldw	r3,-12(fp)
 200f070:	00bfffd4 	movui	r2,65535
 200f074:	10fff636 	bltu	r2,r3,200f050 <usleep+0xa8>
  {
    OSTimeDly(0xffff);
    ticks -= 0xffff;
  }

  OSTimeDly ((INT16U) (ticks));
 200f078:	e0bffd17 	ldw	r2,-12(fp)
 200f07c:	113fffcc 	andi	r4,r2,65535
 200f080:	20172640 	call	2017264 <OSTimeDly>
  /*
   * Now delay by the remainder using a busy loop. This is here in order to
   * provide very short delays of less than one clock tick.
   */

  alt_busy_sleep (us%(ALT_US/tick_rate));  
 200f084:	010003f4 	movhi	r4,15
 200f088:	21109004 	addi	r4,r4,16960
 200f08c:	e17ffc17 	ldw	r5,-16(fp)
 200f090:	200329c0 	call	200329c <__udivsi3>
 200f094:	100b883a 	mov	r5,r2
 200f098:	e13ffe17 	ldw	r4,-8(fp)
 200f09c:	20032a40 	call	20032a4 <__umodsi3>
 200f0a0:	1009883a 	mov	r4,r2
 200f0a4:	2018c8c0 	call	2018c8c <alt_busy_sleep>

  return 0;  
 200f0a8:	e03fff15 	stw	zero,-4(fp)
 200f0ac:	e0bfff17 	ldw	r2,-4(fp)
}
 200f0b0:	e037883a 	mov	sp,fp
 200f0b4:	dfc00217 	ldw	ra,8(sp)
 200f0b8:	df000117 	ldw	fp,4(sp)
 200f0bc:	dc000017 	ldw	r16,0(sp)
 200f0c0:	dec00304 	addi	sp,sp,12
 200f0c4:	f800283a 	ret

0200f0c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 200f0c8:	defff704 	addi	sp,sp,-36
 200f0cc:	dfc00815 	stw	ra,32(sp)
 200f0d0:	df000715 	stw	fp,28(sp)
 200f0d4:	df000704 	addi	fp,sp,28
 200f0d8:	e13ffb15 	stw	r4,-20(fp)
 200f0dc:	e17ffc15 	stw	r5,-16(fp)
 200f0e0:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 200f0e4:	e0bffb17 	ldw	r2,-20(fp)
 200f0e8:	1004803a 	cmplt	r2,r2,zero
 200f0ec:	1000091e 	bne	r2,zero,200f114 <write+0x4c>
 200f0f0:	e13ffb17 	ldw	r4,-20(fp)
 200f0f4:	01400304 	movi	r5,12
 200f0f8:	20032ac0 	call	20032ac <__mulsi3>
 200f0fc:	1007883a 	mov	r3,r2
 200f100:	008080b4 	movhi	r2,514
 200f104:	10ac5204 	addi	r2,r2,-20152
 200f108:	1887883a 	add	r3,r3,r2
 200f10c:	e0ffff15 	stw	r3,-4(fp)
 200f110:	00000106 	br	200f118 <write+0x50>
 200f114:	e03fff15 	stw	zero,-4(fp)
 200f118:	e0bfff17 	ldw	r2,-4(fp)
 200f11c:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 200f120:	e0bffa17 	ldw	r2,-24(fp)
 200f124:	1005003a 	cmpeq	r2,r2,zero
 200f128:	1000241e 	bne	r2,zero,200f1bc <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 200f12c:	e0bffa17 	ldw	r2,-24(fp)
 200f130:	10800217 	ldw	r2,8(r2)
 200f134:	108000cc 	andi	r2,r2,3
 200f138:	1005003a 	cmpeq	r2,r2,zero
 200f13c:	10001a1e 	bne	r2,zero,200f1a8 <write+0xe0>
 200f140:	e0bffa17 	ldw	r2,-24(fp)
 200f144:	10800017 	ldw	r2,0(r2)
 200f148:	10800617 	ldw	r2,24(r2)
 200f14c:	1005003a 	cmpeq	r2,r2,zero
 200f150:	1000151e 	bne	r2,zero,200f1a8 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 200f154:	e0bffa17 	ldw	r2,-24(fp)
 200f158:	10800017 	ldw	r2,0(r2)
 200f15c:	10800617 	ldw	r2,24(r2)
 200f160:	e17ffc17 	ldw	r5,-16(fp)
 200f164:	e1bffd17 	ldw	r6,-12(fp)
 200f168:	e13ffa17 	ldw	r4,-24(fp)
 200f16c:	103ee83a 	callr	r2
 200f170:	e0bff915 	stw	r2,-28(fp)
 200f174:	e0bff917 	ldw	r2,-28(fp)
 200f178:	1004403a 	cmpge	r2,r2,zero
 200f17c:	1000071e 	bne	r2,zero,200f19c <write+0xd4>
      {
        ALT_ERRNO = -rval;
 200f180:	200f1ec0 	call	200f1ec <alt_get_errno>
 200f184:	e0fff917 	ldw	r3,-28(fp)
 200f188:	00c7c83a 	sub	r3,zero,r3
 200f18c:	10c00015 	stw	r3,0(r2)
        return -1;
 200f190:	00bfffc4 	movi	r2,-1
 200f194:	e0bffe15 	stw	r2,-8(fp)
 200f198:	00000e06 	br	200f1d4 <write+0x10c>
      }
      return rval;
 200f19c:	e0bff917 	ldw	r2,-28(fp)
 200f1a0:	e0bffe15 	stw	r2,-8(fp)
 200f1a4:	00000b06 	br	200f1d4 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 200f1a8:	200f1ec0 	call	200f1ec <alt_get_errno>
 200f1ac:	1007883a 	mov	r3,r2
 200f1b0:	00800344 	movi	r2,13
 200f1b4:	18800015 	stw	r2,0(r3)
 200f1b8:	00000406 	br	200f1cc <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 200f1bc:	200f1ec0 	call	200f1ec <alt_get_errno>
 200f1c0:	1007883a 	mov	r3,r2
 200f1c4:	00801444 	movi	r2,81
 200f1c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 200f1cc:	00bfffc4 	movi	r2,-1
 200f1d0:	e0bffe15 	stw	r2,-8(fp)
 200f1d4:	e0bffe17 	ldw	r2,-8(fp)
}
 200f1d8:	e037883a 	mov	sp,fp
 200f1dc:	dfc00117 	ldw	ra,4(sp)
 200f1e0:	df000017 	ldw	fp,0(sp)
 200f1e4:	dec00204 	addi	sp,sp,8
 200f1e8:	f800283a 	ret

0200f1ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 200f1ec:	defffd04 	addi	sp,sp,-12
 200f1f0:	dfc00215 	stw	ra,8(sp)
 200f1f4:	df000115 	stw	fp,4(sp)
 200f1f8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 200f1fc:	008080b4 	movhi	r2,514
 200f200:	10b0ee04 	addi	r2,r2,-15432
 200f204:	10800017 	ldw	r2,0(r2)
 200f208:	1005003a 	cmpeq	r2,r2,zero
 200f20c:	1000061e 	bne	r2,zero,200f228 <alt_get_errno+0x3c>
 200f210:	008080b4 	movhi	r2,514
 200f214:	10b0ee04 	addi	r2,r2,-15432
 200f218:	10800017 	ldw	r2,0(r2)
 200f21c:	103ee83a 	callr	r2
 200f220:	e0bfff15 	stw	r2,-4(fp)
 200f224:	00000306 	br	200f234 <alt_get_errno+0x48>
 200f228:	008080b4 	movhi	r2,514
 200f22c:	10b7f704 	addi	r2,r2,-8228
 200f230:	e0bfff15 	stw	r2,-4(fp)
 200f234:	e0bfff17 	ldw	r2,-4(fp)
}
 200f238:	e037883a 	mov	sp,fp
 200f23c:	dfc00117 	ldw	ra,4(sp)
 200f240:	df000017 	ldw	fp,0(sp)
 200f244:	dec00204 	addi	sp,sp,8
 200f248:	f800283a 	ret

0200f24c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 200f24c:	deffdf04 	addi	sp,sp,-132
 200f250:	dfc02015 	stw	ra,128(sp)
 200f254:	df001f15 	stw	fp,124(sp)
 200f258:	df001f04 	addi	fp,sp,124
 200f25c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 200f260:	e17fe204 	addi	r5,fp,-120
 200f264:	01003fc4 	movi	r4,255
 200f268:	20170a40 	call	20170a4 <OSTaskQuery>
 200f26c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 200f270:	e0bffe83 	ldbu	r2,-6(fp)
 200f274:	10803fcc 	andi	r2,r2,255
 200f278:	1004c03a 	cmpne	r2,r2,zero
 200f27c:	1000191e 	bne	r2,zero,200f2e4 <__env_lock+0x98>
    return;

  id = tcb.OSTCBPrio;
 200f280:	e0bfee83 	ldbu	r2,-70(fp)
 200f284:	10803fcc 	andi	r2,r2,255
 200f288:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 200f28c:	d1272017 	ldw	r4,-25472(gp)
 200f290:	e17ffd04 	addi	r5,fp,-12
 200f294:	20155f00 	call	20155f0 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 200f298:	e0bffe43 	ldbu	r2,-7(fp)
 200f29c:	10803fcc 	andi	r2,r2,255
 200f2a0:	1005003a 	cmpeq	r2,r2,zero
 200f2a4:	1000071e 	bne	r2,zero,200f2c4 <__env_lock+0x78>
 200f2a8:	d0e01017 	ldw	r3,-32704(gp)
 200f2ac:	e0bfe117 	ldw	r2,-124(fp)
 200f2b0:	10c0041e 	bne	r2,r3,200f2c4 <__env_lock+0x78>
  {
    /* we do; just count the recursion */

    locks++;
 200f2b4:	d0a71f17 	ldw	r2,-25476(gp)
 200f2b8:	10800044 	addi	r2,r2,1
 200f2bc:	d0a71f15 	stw	r2,-25476(gp)
  id = tcb.OSTCBPrio;
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
  if( semdata.OSEventGrp && id == lockid ) 
 200f2c0:	00000806 	br	200f2e4 <__env_lock+0x98>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 200f2c4:	d1272017 	ldw	r4,-25472(gp)
 200f2c8:	e1bffe84 	addi	r6,fp,-6
 200f2cc:	000b883a 	mov	r5,zero
 200f2d0:	20150d00 	call	20150d0 <OSSemPend>
    locks  = 1;
 200f2d4:	00800044 	movi	r2,1
 200f2d8:	d0a71f15 	stw	r2,-25476(gp)
    lockid = id;
 200f2dc:	e0bfe117 	ldw	r2,-124(fp)
 200f2e0:	d0a01015 	stw	r2,-32704(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 200f2e4:	e037883a 	mov	sp,fp
 200f2e8:	dfc00117 	ldw	ra,4(sp)
 200f2ec:	df000017 	ldw	fp,0(sp)
 200f2f0:	dec00204 	addi	sp,sp,8
 200f2f4:	f800283a 	ret

0200f2f8 <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 200f2f8:	defffd04 	addi	sp,sp,-12
 200f2fc:	dfc00215 	stw	ra,8(sp)
 200f300:	df000115 	stw	fp,4(sp)
 200f304:	df000104 	addi	fp,sp,4
 200f308:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 200f30c:	d0a71f17 	ldw	r2,-25476(gp)
 200f310:	1005003a 	cmpeq	r2,r2,zero
 200f314:	10000a1e 	bne	r2,zero,200f340 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 200f318:	d0a71f17 	ldw	r2,-25476(gp)
 200f31c:	10bfffc4 	addi	r2,r2,-1
 200f320:	d0a71f15 	stw	r2,-25476(gp)
 200f324:	d0a71f17 	ldw	r2,-25476(gp)
 200f328:	1004c03a 	cmpne	r2,r2,zero
 200f32c:	1000041e 	bne	r2,zero,200f340 <__env_unlock+0x48>
  {
    lockid = -1;
 200f330:	00bfffc4 	movi	r2,-1
 200f334:	d0a01015 	stw	r2,-32704(gp)
    OSSemPost( alt_envsem );
 200f338:	d1272017 	ldw	r4,-25472(gp)
 200f33c:	20154c80 	call	20154c8 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 200f340:	e037883a 	mov	sp,fp
 200f344:	dfc00117 	ldw	ra,4(sp)
 200f348:	df000017 	ldw	fp,0(sp)
 200f34c:	dec00204 	addi	sp,sp,8
 200f350:	f800283a 	ret

0200f354 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 200f354:	deffdb04 	addi	sp,sp,-148
 200f358:	dfc02415 	stw	ra,144(sp)
 200f35c:	df002315 	stw	fp,140(sp)
 200f360:	df002304 	addi	fp,sp,140
 200f364:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200f368:	e03fe015 	stw	zero,-128(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 200f36c:	008080b4 	movhi	r2,514
 200f370:	10b80644 	addi	r2,r2,-8167
 200f374:	10800003 	ldbu	r2,0(r2)
 200f378:	10803fcc 	andi	r2,r2,255
 200f37c:	10800058 	cmpnei	r2,r2,1
 200f380:	1000311e 	bne	r2,zero,200f448 <__malloc_lock+0xf4>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 200f384:	e17fe204 	addi	r5,fp,-120
 200f388:	01003fc4 	movi	r4,255
 200f38c:	20170a40 	call	20170a4 <OSTaskQuery>
 200f390:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 200f394:	e0bffe83 	ldbu	r2,-6(fp)
 200f398:	10803fcc 	andi	r2,r2,255
 200f39c:	1004c03a 	cmpne	r2,r2,zero
 200f3a0:	1000291e 	bne	r2,zero,200f448 <__malloc_lock+0xf4>
    return;

  id = tcb.OSTCBPrio;
 200f3a4:	e0bfee83 	ldbu	r2,-70(fp)
 200f3a8:	10803fcc 	andi	r2,r2,255
 200f3ac:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 200f3b0:	d1272217 	ldw	r4,-25464(gp)
 200f3b4:	e17ffd04 	addi	r5,fp,-12
 200f3b8:	20155f00 	call	20155f0 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f3bc:	0005303a 	rdctl	r2,status
 200f3c0:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f3c4:	e0ffdf17 	ldw	r3,-132(fp)
 200f3c8:	00bfff84 	movi	r2,-2
 200f3cc:	1884703a 	and	r2,r3,r2
 200f3d0:	1001703a 	wrctl	status,r2
  
  return context;
 200f3d4:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
 200f3d8:	e0bfe015 	stw	r2,-128(fp)

  if( !semdata.OSCnt && id == lockid ) 
 200f3dc:	e0bffd0b 	ldhu	r2,-12(fp)
 200f3e0:	10bfffcc 	andi	r2,r2,65535
 200f3e4:	1004c03a 	cmpne	r2,r2,zero
 200f3e8:	10000b1e 	bne	r2,zero,200f418 <__malloc_lock+0xc4>
 200f3ec:	d0e01117 	ldw	r3,-32700(gp)
 200f3f0:	e0bfe117 	ldw	r2,-124(fp)
 200f3f4:	10c0081e 	bne	r2,r3,200f418 <__malloc_lock+0xc4>
  {
    /* we do; just count the recursion */
    locks++;
 200f3f8:	d0a72117 	ldw	r2,-25468(gp)
 200f3fc:	10800044 	addi	r2,r2,1
 200f400:	d0a72115 	stw	r2,-25468(gp)
 200f404:	e0bfe017 	ldw	r2,-128(fp)
 200f408:	e0bfde15 	stw	r2,-136(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f40c:	e0bfde17 	ldw	r2,-136(fp)
 200f410:	1001703a 	wrctl	status,r2

  OSSemQuery( alt_heapsem, &semdata );
  
  OS_ENTER_CRITICAL();

  if( !semdata.OSCnt && id == lockid ) 
 200f414:	00000c06 	br	200f448 <__malloc_lock+0xf4>
 200f418:	e0bfe017 	ldw	r2,-128(fp)
 200f41c:	e0bfdd15 	stw	r2,-140(fp)
 200f420:	e0bfdd17 	ldw	r2,-140(fp)
 200f424:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 200f428:	d1272217 	ldw	r4,-25464(gp)
 200f42c:	e1bffe84 	addi	r6,fp,-6
 200f430:	000b883a 	mov	r5,zero
 200f434:	20150d00 	call	20150d0 <OSSemPend>
    locks  = 1;
 200f438:	00800044 	movi	r2,1
 200f43c:	d0a72115 	stw	r2,-25468(gp)
    lockid = id;
 200f440:	e0bfe117 	ldw	r2,-124(fp)
 200f444:	d0a01115 	stw	r2,-32700(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 200f448:	e037883a 	mov	sp,fp
 200f44c:	dfc00117 	ldw	ra,4(sp)
 200f450:	df000017 	ldw	fp,0(sp)
 200f454:	dec00204 	addi	sp,sp,8
 200f458:	f800283a 	ret

0200f45c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 200f45c:	defff804 	addi	sp,sp,-32
 200f460:	dfc00715 	stw	ra,28(sp)
 200f464:	df000615 	stw	fp,24(sp)
 200f468:	df000604 	addi	fp,sp,24
 200f46c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200f470:	e03ffe15 	stw	zero,-8(fp)
#endif 

  if (OSRunning != OS_TRUE)
 200f474:	008080b4 	movhi	r2,514
 200f478:	10b80644 	addi	r2,r2,-8167
 200f47c:	10800003 	ldbu	r2,0(r2)
 200f480:	10803fcc 	andi	r2,r2,255
 200f484:	10800058 	cmpnei	r2,r2,1
 200f488:	1000231e 	bne	r2,zero,200f518 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f48c:	0005303a 	rdctl	r2,status
 200f490:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f494:	e0fffd17 	ldw	r3,-12(fp)
 200f498:	00bfff84 	movi	r2,-2
 200f49c:	1884703a 	and	r2,r3,r2
 200f4a0:	1001703a 	wrctl	status,r2
  
  return context;
 200f4a4:	e0bffd17 	ldw	r2,-12(fp)
      return;

  OS_ENTER_CRITICAL();
 200f4a8:	e0bffe15 	stw	r2,-8(fp)
  if (locks == 0)
 200f4ac:	d0a72117 	ldw	r2,-25468(gp)
 200f4b0:	1004c03a 	cmpne	r2,r2,zero
 200f4b4:	1000051e 	bne	r2,zero,200f4cc <__malloc_unlock+0x70>
 200f4b8:	e0bffe17 	ldw	r2,-8(fp)
 200f4bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f4c0:	e0bffc17 	ldw	r2,-16(fp)
 200f4c4:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 200f4c8:	00001306 	br	200f518 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 200f4cc:	d0a72117 	ldw	r2,-25468(gp)
 200f4d0:	10bfffc4 	addi	r2,r2,-1
 200f4d4:	d0a72115 	stw	r2,-25468(gp)
 200f4d8:	d0a72117 	ldw	r2,-25468(gp)
 200f4dc:	1004c03a 	cmpne	r2,r2,zero
 200f4e0:	1000091e 	bne	r2,zero,200f508 <__malloc_unlock+0xac>
  {
    lockid = -1;
 200f4e4:	00bfffc4 	movi	r2,-1
 200f4e8:	d0a01115 	stw	r2,-32700(gp)
 200f4ec:	e0bffe17 	ldw	r2,-8(fp)
 200f4f0:	e0bffb15 	stw	r2,-20(fp)
 200f4f4:	e0bffb17 	ldw	r2,-20(fp)
 200f4f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 200f4fc:	d1272217 	ldw	r4,-25464(gp)
 200f500:	20154c80 	call	20154c8 <OSSemPost>
 200f504:	00000406 	br	200f518 <__malloc_unlock+0xbc>
 200f508:	e0bffe17 	ldw	r2,-8(fp)
 200f50c:	e0bffa15 	stw	r2,-24(fp)
 200f510:	e0bffa17 	ldw	r2,-24(fp)
 200f514:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 200f518:	e037883a 	mov	sp,fp
 200f51c:	dfc00117 	ldw	ra,4(sp)
 200f520:	df000017 	ldw	fp,0(sp)
 200f524:	dec00204 	addi	sp,sp,8
 200f528:	f800283a 	ret

0200f52c <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 200f52c:	defff604 	addi	sp,sp,-40
 200f530:	dfc00915 	stw	ra,36(sp)
 200f534:	df000815 	stw	fp,32(sp)
 200f538:	df000804 	addi	fp,sp,32
 200f53c:	e13ffc15 	stw	r4,-16(fp)
 200f540:	e17ffd15 	stw	r5,-12(fp)
 200f544:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200f548:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 200f54c:	e0bffe17 	ldw	r2,-8(fp)
 200f550:	1004c03a 	cmpne	r2,r2,zero
 200f554:	1000021e 	bne	r2,zero,200f560 <OSEventNameGet+0x34>
        return (0);
 200f558:	e03fff15 	stw	zero,-4(fp)
 200f55c:	00003906 	br	200f644 <OSEventNameGet+0x118>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 200f560:	e0bffc17 	ldw	r2,-16(fp)
 200f564:	1004c03a 	cmpne	r2,r2,zero
 200f568:	1000051e 	bne	r2,zero,200f580 <OSEventNameGet+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 200f56c:	e0fffe17 	ldw	r3,-8(fp)
 200f570:	00800104 	movi	r2,4
 200f574:	18800005 	stb	r2,0(r3)
        return (0);
 200f578:	e03fff15 	stw	zero,-4(fp)
 200f57c:	00003106 	br	200f644 <OSEventNameGet+0x118>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 200f580:	e0bffd17 	ldw	r2,-12(fp)
 200f584:	1004c03a 	cmpne	r2,r2,zero
 200f588:	1000051e 	bne	r2,zero,200f5a0 <OSEventNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 200f58c:	e0fffe17 	ldw	r3,-8(fp)
 200f590:	00800304 	movi	r2,12
 200f594:	18800005 	stb	r2,0(r3)
        return (0);
 200f598:	e03fff15 	stw	zero,-4(fp)
 200f59c:	00002906 	br	200f644 <OSEventNameGet+0x118>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 200f5a0:	d0a73103 	ldbu	r2,-25404(gp)
 200f5a4:	10803fcc 	andi	r2,r2,255
 200f5a8:	1005003a 	cmpeq	r2,r2,zero
 200f5ac:	1000051e 	bne	r2,zero,200f5c4 <OSEventNameGet+0x98>
        *perr  = OS_ERR_NAME_GET_ISR;
 200f5b0:	e0fffe17 	ldw	r3,-8(fp)
 200f5b4:	00800444 	movi	r2,17
 200f5b8:	18800005 	stb	r2,0(r3)
        return (0);
 200f5bc:	e03fff15 	stw	zero,-4(fp)
 200f5c0:	00002006 	br	200f644 <OSEventNameGet+0x118>
    }
    switch (pevent->OSEventType) {
 200f5c4:	e0bffc17 	ldw	r2,-16(fp)
 200f5c8:	10800003 	ldbu	r2,0(r2)
 200f5cc:	10803fcc 	andi	r2,r2,255
 200f5d0:	10bfffc4 	addi	r2,r2,-1
 200f5d4:	10800128 	cmpgeui	r2,r2,4
 200f5d8:	1000161e 	bne	r2,zero,200f634 <OSEventNameGet+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f5dc:	0005303a 	rdctl	r2,status
 200f5e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f5e4:	e0fff917 	ldw	r3,-28(fp)
 200f5e8:	00bfff84 	movi	r2,-2
 200f5ec:	1884703a 	and	r2,r3,r2
 200f5f0:	1001703a 	wrctl	status,r2
  
  return context;
 200f5f4:	e0bff917 	ldw	r2,-28(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 200f5f8:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 200f5fc:	e0bffc17 	ldw	r2,-16(fp)
 200f600:	11400384 	addi	r5,r2,14
 200f604:	e13ffd17 	ldw	r4,-12(fp)
 200f608:	20110b00 	call	20110b0 <OS_StrCopy>
 200f60c:	e0bffb05 	stb	r2,-20(fp)
 200f610:	e0bffa17 	ldw	r2,-24(fp)
 200f614:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f618:	e0bff817 	ldw	r2,-32(fp)
 200f61c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 200f620:	e0bffe17 	ldw	r2,-8(fp)
 200f624:	10000005 	stb	zero,0(r2)
    return (len);
 200f628:	e0bffb03 	ldbu	r2,-20(fp)
 200f62c:	e0bfff15 	stw	r2,-4(fp)
 200f630:	00000406 	br	200f644 <OSEventNameGet+0x118>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 200f634:	e0fffe17 	ldw	r3,-8(fp)
 200f638:	00800044 	movi	r2,1
 200f63c:	18800005 	stb	r2,0(r3)
             return (0);
 200f640:	e03fff15 	stw	zero,-4(fp)
 200f644:	e0bfff17 	ldw	r2,-4(fp)
    OS_ENTER_CRITICAL();
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return (len);
}
 200f648:	e037883a 	mov	sp,fp
 200f64c:	dfc00117 	ldw	ra,4(sp)
 200f650:	df000017 	ldw	fp,0(sp)
 200f654:	dec00204 	addi	sp,sp,8
 200f658:	f800283a 	ret

0200f65c <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 200f65c:	defff604 	addi	sp,sp,-40
 200f660:	dfc00915 	stw	ra,36(sp)
 200f664:	df000815 	stw	fp,32(sp)
 200f668:	df000804 	addi	fp,sp,32
 200f66c:	e13ffd15 	stw	r4,-12(fp)
 200f670:	e17ffe15 	stw	r5,-8(fp)
 200f674:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 200f678:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 200f67c:	e0bfff17 	ldw	r2,-4(fp)
 200f680:	1005003a 	cmpeq	r2,r2,zero
 200f684:	1000411e 	bne	r2,zero,200f78c <OSEventNameSet+0x130>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 200f688:	e0bffd17 	ldw	r2,-12(fp)
 200f68c:	1004c03a 	cmpne	r2,r2,zero
 200f690:	1000041e 	bne	r2,zero,200f6a4 <OSEventNameSet+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 200f694:	e0ffff17 	ldw	r3,-4(fp)
 200f698:	00800104 	movi	r2,4
 200f69c:	18800005 	stb	r2,0(r3)
        return;
 200f6a0:	00003a06 	br	200f78c <OSEventNameSet+0x130>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 200f6a4:	e0bffe17 	ldw	r2,-8(fp)
 200f6a8:	1004c03a 	cmpne	r2,r2,zero
 200f6ac:	1000041e 	bne	r2,zero,200f6c0 <OSEventNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 200f6b0:	e0ffff17 	ldw	r3,-4(fp)
 200f6b4:	00800304 	movi	r2,12
 200f6b8:	18800005 	stb	r2,0(r3)
        return;
 200f6bc:	00003306 	br	200f78c <OSEventNameSet+0x130>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 200f6c0:	d0a73103 	ldbu	r2,-25404(gp)
 200f6c4:	10803fcc 	andi	r2,r2,255
 200f6c8:	1005003a 	cmpeq	r2,r2,zero
 200f6cc:	1000041e 	bne	r2,zero,200f6e0 <OSEventNameSet+0x84>
        *perr = OS_ERR_NAME_SET_ISR;
 200f6d0:	e0ffff17 	ldw	r3,-4(fp)
 200f6d4:	00800484 	movi	r2,18
 200f6d8:	18800005 	stb	r2,0(r3)
        return;
 200f6dc:	00002b06 	br	200f78c <OSEventNameSet+0x130>
    }
    switch (pevent->OSEventType) {
 200f6e0:	e0bffd17 	ldw	r2,-12(fp)
 200f6e4:	10800003 	ldbu	r2,0(r2)
 200f6e8:	10803fcc 	andi	r2,r2,255
 200f6ec:	10bfffc4 	addi	r2,r2,-1
 200f6f0:	10800128 	cmpgeui	r2,r2,4
 200f6f4:	10000f1e 	bne	r2,zero,200f734 <OSEventNameSet+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f6f8:	0005303a 	rdctl	r2,status
 200f6fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f700:	e0fffa17 	ldw	r3,-24(fp)
 200f704:	00bfff84 	movi	r2,-2
 200f708:	1884703a 	and	r2,r3,r2
 200f70c:	1001703a 	wrctl	status,r2
  
  return context;
 200f710:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 200f714:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 200f718:	e13ffe17 	ldw	r4,-8(fp)
 200f71c:	20111300 	call	2011130 <OS_StrLen>
 200f720:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 200f724:	e0bffc03 	ldbu	r2,-16(fp)
 200f728:	10800828 	cmpgeui	r2,r2,32
 200f72c:	1000051e 	bne	r2,zero,200f744 <OSEventNameSet+0xe8>
 200f730:	00000c06 	br	200f764 <OSEventNameSet+0x108>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 200f734:	e0ffff17 	ldw	r3,-4(fp)
 200f738:	00800044 	movi	r2,1
 200f73c:	18800005 	stb	r2,0(r3)
             return;
 200f740:	00001206 	br	200f78c <OSEventNameSet+0x130>
 200f744:	e0bffb17 	ldw	r2,-20(fp)
 200f748:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200f74c:	e0bff917 	ldw	r2,-28(fp)
 200f750:	1001703a 	wrctl	status,r2
    }
    OS_ENTER_CRITICAL();
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 200f754:	e0ffff17 	ldw	r3,-4(fp)
 200f758:	008002c4 	movi	r2,11
 200f75c:	18800005 	stb	r2,0(r3)
        return;
 200f760:	00000a06 	br	200f78c <OSEventNameSet+0x130>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 200f764:	e0bffd17 	ldw	r2,-12(fp)
 200f768:	11000384 	addi	r4,r2,14
 200f76c:	e17ffe17 	ldw	r5,-8(fp)
 200f770:	20110b00 	call	20110b0 <OS_StrCopy>
 200f774:	e0bffb17 	ldw	r2,-20(fp)
 200f778:	e0bff815 	stw	r2,-32(fp)
 200f77c:	e0bff817 	ldw	r2,-32(fp)
 200f780:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 200f784:	e0bfff17 	ldw	r2,-4(fp)
 200f788:	10000005 	stb	zero,0(r2)
}
 200f78c:	e037883a 	mov	sp,fp
 200f790:	dfc00117 	ldw	ra,4(sp)
 200f794:	df000017 	ldw	fp,0(sp)
 200f798:	dec00204 	addi	sp,sp,8
 200f79c:	f800283a 	ret

0200f7a0 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 200f7a0:	deffe704 	addi	sp,sp,-100
 200f7a4:	dfc01815 	stw	ra,96(sp)
 200f7a8:	df001715 	stw	fp,92(sp)
 200f7ac:	df001704 	addi	fp,sp,92
 200f7b0:	e13ff615 	stw	r4,-40(fp)
 200f7b4:	e17ff715 	stw	r5,-36(fp)
 200f7b8:	e1bff815 	stw	r6,-32(fp)
 200f7bc:	e1fff90d 	sth	r7,-28(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 200f7c0:	e03ff015 	stw	zero,-64(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 200f7c4:	e0800217 	ldw	r2,8(fp)
 200f7c8:	1004c03a 	cmpne	r2,r2,zero
 200f7cc:	1000021e 	bne	r2,zero,200f7d8 <OSEventPendMulti+0x38>
        return (0);
 200f7d0:	e03fff15 	stw	zero,-4(fp)
 200f7d4:	00019906 	br	200fe3c <OSEventPendMulti+0x69c>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 200f7d8:	e0bff617 	ldw	r2,-40(fp)
 200f7dc:	1004c03a 	cmpne	r2,r2,zero
 200f7e0:	1000051e 	bne	r2,zero,200f7f8 <OSEventPendMulti+0x58>
       *perr =  OS_ERR_PEVENT_NULL;
 200f7e4:	e0c00217 	ldw	r3,8(fp)
 200f7e8:	00800104 	movi	r2,4
 200f7ec:	18800005 	stb	r2,0(r3)
        return (0);
 200f7f0:	e03fff15 	stw	zero,-4(fp)
 200f7f4:	00019106 	br	200fe3c <OSEventPendMulti+0x69c>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 200f7f8:	e0bff717 	ldw	r2,-36(fp)
 200f7fc:	1004c03a 	cmpne	r2,r2,zero
 200f800:	1000051e 	bne	r2,zero,200f818 <OSEventPendMulti+0x78>
       *perr =  OS_ERR_PEVENT_NULL;
 200f804:	e0c00217 	ldw	r3,8(fp)
 200f808:	00800104 	movi	r2,4
 200f80c:	18800005 	stb	r2,0(r3)
        return (0);
 200f810:	e03fff15 	stw	zero,-4(fp)
 200f814:	00018906 	br	200fe3c <OSEventPendMulti+0x69c>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 200f818:	e0bff817 	ldw	r2,-32(fp)
 200f81c:	1004c03a 	cmpne	r2,r2,zero
 200f820:	1000051e 	bne	r2,zero,200f838 <OSEventPendMulti+0x98>
       *perr =  OS_ERR_PEVENT_NULL;
 200f824:	e0c00217 	ldw	r3,8(fp)
 200f828:	00800104 	movi	r2,4
 200f82c:	18800005 	stb	r2,0(r3)
        return (0);
 200f830:	e03fff15 	stw	zero,-4(fp)
 200f834:	00018106 	br	200fe3c <OSEventPendMulti+0x69c>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 200f838:	e0bff717 	ldw	r2,-36(fp)
 200f83c:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 200f840:	e0bff617 	ldw	r2,-40(fp)
 200f844:	e0bff515 	stw	r2,-44(fp)
    pevent      = *pevents;
 200f848:	e0bff517 	ldw	r2,-44(fp)
 200f84c:	10800017 	ldw	r2,0(r2)
 200f850:	e0bff415 	stw	r2,-48(fp)
    while  (pevent != (OS_EVENT *)0) {
 200f854:	00001806 	br	200f8b8 <OSEventPendMulti+0x118>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 200f858:	e0bff417 	ldw	r2,-48(fp)
 200f85c:	10800003 	ldbu	r2,0(r2)
 200f860:	10803fcc 	andi	r2,r2,255
 200f864:	e0bffe15 	stw	r2,-8(fp)
 200f868:	e0fffe17 	ldw	r3,-8(fp)
 200f86c:	188000a0 	cmpeqi	r2,r3,2
 200f870:	10000b1e 	bne	r2,zero,200f8a0 <OSEventPendMulti+0x100>
 200f874:	e0fffe17 	ldw	r3,-8(fp)
 200f878:	188000e0 	cmpeqi	r2,r3,3
 200f87c:	1000081e 	bne	r2,zero,200f8a0 <OSEventPendMulti+0x100>
 200f880:	e0fffe17 	ldw	r3,-8(fp)
 200f884:	18800060 	cmpeqi	r2,r3,1
 200f888:	1000051e 	bne	r2,zero,200f8a0 <OSEventPendMulti+0x100>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 200f88c:	e0c00217 	ldw	r3,8(fp)
 200f890:	00800044 	movi	r2,1
 200f894:	18800005 	stb	r2,0(r3)
                 return (0);
 200f898:	e03fff15 	stw	zero,-4(fp)
 200f89c:	00016706 	br	200fe3c <OSEventPendMulti+0x69c>
        }
        pevents++;
 200f8a0:	e0bff517 	ldw	r2,-44(fp)
 200f8a4:	10800104 	addi	r2,r2,4
 200f8a8:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 200f8ac:	e0bff517 	ldw	r2,-44(fp)
 200f8b0:	10800017 	ldw	r2,0(r2)
 200f8b4:	e0bff415 	stw	r2,-48(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 200f8b8:	e0bff417 	ldw	r2,-48(fp)
 200f8bc:	1004c03a 	cmpne	r2,r2,zero
 200f8c0:	103fe51e 	bne	r2,zero,200f858 <OSEventPendMulti+0xb8>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 200f8c4:	d0a73103 	ldbu	r2,-25404(gp)
 200f8c8:	10803fcc 	andi	r2,r2,255
 200f8cc:	1005003a 	cmpeq	r2,r2,zero
 200f8d0:	1000051e 	bne	r2,zero,200f8e8 <OSEventPendMulti+0x148>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 200f8d4:	e0c00217 	ldw	r3,8(fp)
 200f8d8:	00800084 	movi	r2,2
 200f8dc:	18800005 	stb	r2,0(r3)
        return (0);
 200f8e0:	e03fff15 	stw	zero,-4(fp)
 200f8e4:	00015506 	br	200fe3c <OSEventPendMulti+0x69c>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 200f8e8:	d0a72303 	ldbu	r2,-25460(gp)
 200f8ec:	10803fcc 	andi	r2,r2,255
 200f8f0:	1005003a 	cmpeq	r2,r2,zero
 200f8f4:	1000051e 	bne	r2,zero,200f90c <OSEventPendMulti+0x16c>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 200f8f8:	e0c00217 	ldw	r3,8(fp)
 200f8fc:	00800344 	movi	r2,13
 200f900:	18800005 	stb	r2,0(r3)
        return (0);
 200f904:	e03fff15 	stw	zero,-4(fp)
 200f908:	00014c06 	br	200fe3c <OSEventPendMulti+0x69c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200f90c:	0005303a 	rdctl	r2,status
 200f910:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200f914:	e0ffef17 	ldw	r3,-68(fp)
 200f918:	00bfff84 	movi	r2,-2
 200f91c:	1884703a 	and	r2,r3,r2
 200f920:	1001703a 	wrctl	status,r2
  
  return context;
 200f924:	e0bfef17 	ldw	r2,-68(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 200f928:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
 200f92c:	e03ff205 	stb	zero,-56(fp)
    events_rdy_nbr =  0;
 200f930:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 200f934:	e03ff105 	stb	zero,-60(fp)
    pevents        =  pevents_pend;
 200f938:	e0bff617 	ldw	r2,-40(fp)
 200f93c:	e0bff515 	stw	r2,-44(fp)
    pevent         = *pevents;
 200f940:	e0bff517 	ldw	r2,-44(fp)
 200f944:	10800017 	ldw	r2,0(r2)
 200f948:	e0bff415 	stw	r2,-48(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 200f94c:	00008f06 	br	200fb8c <OSEventPendMulti+0x3ec>
        switch (pevent->OSEventType) {
 200f950:	e0bff417 	ldw	r2,-48(fp)
 200f954:	10800003 	ldbu	r2,0(r2)
 200f958:	10803fcc 	andi	r2,r2,255
 200f95c:	e0bffd15 	stw	r2,-12(fp)
 200f960:	e0fffd17 	ldw	r3,-12(fp)
 200f964:	188000a0 	cmpeqi	r2,r3,2
 200f968:	1000441e 	bne	r2,zero,200fa7c <OSEventPendMulti+0x2dc>
 200f96c:	e0fffd17 	ldw	r3,-12(fp)
 200f970:	188000e0 	cmpeqi	r2,r3,3
 200f974:	1000041e 	bne	r2,zero,200f988 <OSEventPendMulti+0x1e8>
 200f978:	e0fffd17 	ldw	r3,-12(fp)
 200f97c:	18800060 	cmpeqi	r2,r3,1
 200f980:	1000211e 	bne	r2,zero,200fa08 <OSEventPendMulti+0x268>
 200f984:	00006f06 	br	200fb44 <OSEventPendMulti+0x3a4>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 200f988:	e0bff417 	ldw	r2,-48(fp)
 200f98c:	1080020b 	ldhu	r2,8(r2)
 200f990:	10bfffcc 	andi	r2,r2,65535
 200f994:	1005003a 	cmpeq	r2,r2,zero
 200f998:	1000171e 	bne	r2,zero,200f9f8 <OSEventPendMulti+0x258>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 200f99c:	e0bff417 	ldw	r2,-48(fp)
 200f9a0:	1080020b 	ldhu	r2,8(r2)
 200f9a4:	10bfffc4 	addi	r2,r2,-1
 200f9a8:	1007883a 	mov	r3,r2
 200f9ac:	e0bff417 	ldw	r2,-48(fp)
 200f9b0:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 200f9b4:	e0fff717 	ldw	r3,-36(fp)
 200f9b8:	e0bff417 	ldw	r2,-48(fp)
 200f9bc:	18800015 	stw	r2,0(r3)
 200f9c0:	e0bff717 	ldw	r2,-36(fp)
 200f9c4:	10800104 	addi	r2,r2,4
 200f9c8:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   =  OS_TRUE;
 200f9cc:	00800044 	movi	r2,1
 200f9d0:	e0bff205 	stb	r2,-56(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 200f9d4:	e0bff817 	ldw	r2,-32(fp)
 200f9d8:	10000015 	stw	zero,0(r2)
 200f9dc:	e0bff817 	ldw	r2,-32(fp)
 200f9e0:	10800104 	addi	r2,r2,4
 200f9e4:	e0bff815 	stw	r2,-32(fp)
                      events_rdy_nbr++;
 200f9e8:	e0bff18b 	ldhu	r2,-58(fp)
 200f9ec:	10800044 	addi	r2,r2,1
 200f9f0:	e0bff18d 	sth	r2,-58(fp)
 200f9f4:	00005f06 	br	200fb74 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 200f9f8:	e0bff103 	ldbu	r2,-60(fp)
 200f9fc:	10800054 	ori	r2,r2,1
 200fa00:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 200fa04:	00005b06 	br	200fb74 <OSEventPendMulti+0x3d4>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 200fa08:	e0bff417 	ldw	r2,-48(fp)
 200fa0c:	10800117 	ldw	r2,4(r2)
 200fa10:	1005003a 	cmpeq	r2,r2,zero
 200fa14:	1000151e 	bne	r2,zero,200fa6c <OSEventPendMulti+0x2cc>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 200fa18:	e0bff417 	ldw	r2,-48(fp)
 200fa1c:	10c00117 	ldw	r3,4(r2)
 200fa20:	e0bff817 	ldw	r2,-32(fp)
 200fa24:	10c00015 	stw	r3,0(r2)
 200fa28:	e0bff817 	ldw	r2,-32(fp)
 200fa2c:	10800104 	addi	r2,r2,4
 200fa30:	e0bff815 	stw	r2,-32(fp)
                     pevent->OSEventPtr  = (void *)0;
 200fa34:	e0bff417 	ldw	r2,-48(fp)
 200fa38:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 200fa3c:	e0fff717 	ldw	r3,-36(fp)
 200fa40:	e0bff417 	ldw	r2,-48(fp)
 200fa44:	18800015 	stw	r2,0(r3)
 200fa48:	e0bff717 	ldw	r2,-36(fp)
 200fa4c:	10800104 	addi	r2,r2,4
 200fa50:	e0bff715 	stw	r2,-36(fp)
                      events_rdy         =  OS_TRUE;
 200fa54:	00800044 	movi	r2,1
 200fa58:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 200fa5c:	e0bff18b 	ldhu	r2,-58(fp)
 200fa60:	10800044 	addi	r2,r2,1
 200fa64:	e0bff18d 	sth	r2,-58(fp)
 200fa68:	00004206 	br	200fb74 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 200fa6c:	e0bff103 	ldbu	r2,-60(fp)
 200fa70:	10800094 	ori	r2,r2,2
 200fa74:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 200fa78:	00003e06 	br	200fb74 <OSEventPendMulti+0x3d4>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 200fa7c:	e0bff417 	ldw	r2,-48(fp)
 200fa80:	10800117 	ldw	r2,4(r2)
 200fa84:	e0bff315 	stw	r2,-52(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 200fa88:	e0bff317 	ldw	r2,-52(fp)
 200fa8c:	1080058b 	ldhu	r2,22(r2)
 200fa90:	10bfffcc 	andi	r2,r2,65535
 200fa94:	1005003a 	cmpeq	r2,r2,zero
 200fa98:	1000261e 	bne	r2,zero,200fb34 <OSEventPendMulti+0x394>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 200fa9c:	e0bff317 	ldw	r2,-52(fp)
 200faa0:	11000417 	ldw	r4,16(r2)
 200faa4:	20c00017 	ldw	r3,0(r4)
 200faa8:	e0bff817 	ldw	r2,-32(fp)
 200faac:	10c00015 	stw	r3,0(r2)
 200fab0:	e0bff817 	ldw	r2,-32(fp)
 200fab4:	10800104 	addi	r2,r2,4
 200fab8:	e0bff815 	stw	r2,-32(fp)
 200fabc:	20c00104 	addi	r3,r4,4
 200fac0:	e0bff317 	ldw	r2,-52(fp)
 200fac4:	10c00415 	stw	r3,16(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 200fac8:	e0bff317 	ldw	r2,-52(fp)
 200facc:	10c00417 	ldw	r3,16(r2)
 200fad0:	e0bff317 	ldw	r2,-52(fp)
 200fad4:	10800217 	ldw	r2,8(r2)
 200fad8:	1880041e 	bne	r3,r2,200faec <OSEventPendMulti+0x34c>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 200fadc:	e0bff317 	ldw	r2,-52(fp)
 200fae0:	10c00117 	ldw	r3,4(r2)
 200fae4:	e0bff317 	ldw	r2,-52(fp)
 200fae8:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 200faec:	e0bff317 	ldw	r2,-52(fp)
 200faf0:	1080058b 	ldhu	r2,22(r2)
 200faf4:	10bfffc4 	addi	r2,r2,-1
 200faf8:	1007883a 	mov	r3,r2
 200fafc:	e0bff317 	ldw	r2,-52(fp)
 200fb00:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 200fb04:	e0fff717 	ldw	r3,-36(fp)
 200fb08:	e0bff417 	ldw	r2,-48(fp)
 200fb0c:	18800015 	stw	r2,0(r3)
 200fb10:	e0bff717 	ldw	r2,-36(fp)
 200fb14:	10800104 	addi	r2,r2,4
 200fb18:	e0bff715 	stw	r2,-36(fp)
                      events_rdy   = OS_TRUE;
 200fb1c:	00800044 	movi	r2,1
 200fb20:	e0bff205 	stb	r2,-56(fp)
                      events_rdy_nbr++;
 200fb24:	e0bff18b 	ldhu	r2,-58(fp)
 200fb28:	10800044 	addi	r2,r2,1
 200fb2c:	e0bff18d 	sth	r2,-58(fp)
 200fb30:	00001006 	br	200fb74 <OSEventPendMulti+0x3d4>

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 200fb34:	e0bff103 	ldbu	r2,-60(fp)
 200fb38:	10800114 	ori	r2,r2,4
 200fb3c:	e0bff105 	stb	r2,-60(fp)
                 }
                 break;
 200fb40:	00000c06 	br	200fb74 <OSEventPendMulti+0x3d4>
 200fb44:	e0bff017 	ldw	r2,-64(fp)
 200fb48:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200fb4c:	e0bfee17 	ldw	r2,-72(fp)
 200fb50:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 200fb54:	e0bff717 	ldw	r2,-36(fp)
 200fb58:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 200fb5c:	e0c00217 	ldw	r3,8(fp)
 200fb60:	00800044 	movi	r2,1
 200fb64:	18800005 	stb	r2,0(r3)
                 return (events_rdy_nbr);
 200fb68:	e0bff18b 	ldhu	r2,-58(fp)
 200fb6c:	e0bfff15 	stw	r2,-4(fp)
 200fb70:	0000b206 	br	200fe3c <OSEventPendMulti+0x69c>
        }
        pevents++;
 200fb74:	e0bff517 	ldw	r2,-44(fp)
 200fb78:	10800104 	addi	r2,r2,4
 200fb7c:	e0bff515 	stw	r2,-44(fp)
        pevent = *pevents;
 200fb80:	e0bff517 	ldw	r2,-44(fp)
 200fb84:	10800017 	ldw	r2,0(r2)
 200fb88:	e0bff415 	stw	r2,-48(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 200fb8c:	e0bff417 	ldw	r2,-48(fp)
 200fb90:	1004c03a 	cmpne	r2,r2,zero
 200fb94:	103f6e1e 	bne	r2,zero,200f950 <OSEventPendMulti+0x1b0>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 200fb98:	e0bff203 	ldbu	r2,-56(fp)
 200fb9c:	10800058 	cmpnei	r2,r2,1
 200fba0:	10000b1e 	bne	r2,zero,200fbd0 <OSEventPendMulti+0x430>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 200fba4:	e0bff717 	ldw	r2,-36(fp)
 200fba8:	10000015 	stw	zero,0(r2)
 200fbac:	e0bff017 	ldw	r2,-64(fp)
 200fbb0:	e0bfed15 	stw	r2,-76(fp)
 200fbb4:	e0bfed17 	ldw	r2,-76(fp)
 200fbb8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 200fbbc:	e0800217 	ldw	r2,8(fp)
 200fbc0:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 200fbc4:	e0fff18b 	ldhu	r3,-58(fp)
 200fbc8:	e0ffff15 	stw	r3,-4(fp)
 200fbcc:	00009b06 	br	200fe3c <OSEventPendMulti+0x69c>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 200fbd0:	d1273217 	ldw	r4,-25400(gp)
 200fbd4:	d0a73217 	ldw	r2,-25400(gp)
 200fbd8:	10c00c03 	ldbu	r3,48(r2)
 200fbdc:	e0bff103 	ldbu	r2,-60(fp)
 200fbe0:	1884b03a 	or	r2,r3,r2
 200fbe4:	1007883a 	mov	r3,r2
 200fbe8:	00bfe004 	movi	r2,-128
 200fbec:	1884b03a 	or	r2,r3,r2
 200fbf0:	20800c05 	stb	r2,48(r4)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 200fbf4:	d0a73217 	ldw	r2,-25400(gp)
 200fbf8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 200fbfc:	d0e73217 	ldw	r3,-25400(gp)
 200fc00:	e0bff90b 	ldhu	r2,-28(fp)
 200fc04:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 200fc08:	e13ff617 	ldw	r4,-40(fp)
 200fc0c:	20107d00 	call	20107d0 <OS_EventTaskWaitMulti>
 200fc10:	e0bff017 	ldw	r2,-64(fp)
 200fc14:	e0bfec15 	stw	r2,-80(fp)
 200fc18:	e0bfec17 	ldw	r2,-80(fp)
 200fc1c:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 200fc20:	2010f6c0 	call	2010f6c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200fc24:	0005303a 	rdctl	r2,status
 200fc28:	e0bfeb15 	stw	r2,-84(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200fc2c:	e0ffeb17 	ldw	r3,-84(fp)
 200fc30:	00bfff84 	movi	r2,-2
 200fc34:	1884703a 	and	r2,r3,r2
 200fc38:	1001703a 	wrctl	status,r2
  
  return context;
 200fc3c:	e0bfeb17 	ldw	r2,-84(fp)
    OS_ENTER_CRITICAL();
 200fc40:	e0bff015 	stw	r2,-64(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 200fc44:	d0a73217 	ldw	r2,-25400(gp)
 200fc48:	10800c43 	ldbu	r2,49(r2)
 200fc4c:	10803fcc 	andi	r2,r2,255
 200fc50:	e0bffc15 	stw	r2,-16(fp)
 200fc54:	e0fffc17 	ldw	r3,-16(fp)
 200fc58:	1805003a 	cmpeq	r2,r3,zero
 200fc5c:	1000041e 	bne	r2,zero,200fc70 <OSEventPendMulti+0x4d0>
 200fc60:	e0fffc17 	ldw	r3,-16(fp)
 200fc64:	188000a0 	cmpeqi	r2,r3,2
 200fc68:	1000011e 	bne	r2,zero,200fc70 <OSEventPendMulti+0x4d0>
 200fc6c:	00001906 	br	200fcd4 <OSEventPendMulti+0x534>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 200fc70:	d0a73217 	ldw	r2,-25400(gp)
 200fc74:	10800717 	ldw	r2,28(r2)
 200fc78:	e0bff415 	stw	r2,-48(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 200fc7c:	e0bff417 	ldw	r2,-48(fp)
 200fc80:	1005003a 	cmpeq	r2,r2,zero
 200fc84:	10000c1e 	bne	r2,zero,200fcb8 <OSEventPendMulti+0x518>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 200fc88:	e0fff717 	ldw	r3,-36(fp)
 200fc8c:	e0bff417 	ldw	r2,-48(fp)
 200fc90:	18800015 	stw	r2,0(r3)
 200fc94:	e0bff717 	ldw	r2,-36(fp)
 200fc98:	10800104 	addi	r2,r2,4
 200fc9c:	e0bff715 	stw	r2,-36(fp)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 200fca0:	e0bff717 	ldw	r2,-36(fp)
 200fca4:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 200fca8:	e0bff18b 	ldhu	r2,-58(fp)
 200fcac:	10800044 	addi	r2,r2,1
 200fcb0:	e0bff18d 	sth	r2,-58(fp)
 200fcb4:	00000a06 	br	200fce0 <OSEventPendMulti+0x540>

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 200fcb8:	d0a73217 	ldw	r2,-25400(gp)
 200fcbc:	00c00044 	movi	r3,1
 200fcc0:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 200fcc4:	d1273217 	ldw	r4,-25400(gp)
 200fcc8:	e17ff617 	ldw	r5,-40(fp)
 200fccc:	20109dc0 	call	20109dc <OS_EventTaskRemoveMulti>
             }
			 break;
 200fcd0:	00000306 	br	200fce0 <OSEventPendMulti+0x540>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 200fcd4:	d1273217 	ldw	r4,-25400(gp)
 200fcd8:	e17ff617 	ldw	r5,-40(fp)
 200fcdc:	20109dc0 	call	20109dc <OS_EventTaskRemoveMulti>
             break;
    }

    switch (OSTCBCur->OSTCBStatPend) {
 200fce0:	d0a73217 	ldw	r2,-25400(gp)
 200fce4:	10800c43 	ldbu	r2,49(r2)
 200fce8:	10803fcc 	andi	r2,r2,255
 200fcec:	e0bffb15 	stw	r2,-20(fp)
 200fcf0:	e0fffb17 	ldw	r3,-20(fp)
 200fcf4:	1805003a 	cmpeq	r2,r3,zero
 200fcf8:	1000041e 	bne	r2,zero,200fd0c <OSEventPendMulti+0x56c>
 200fcfc:	e0fffb17 	ldw	r3,-20(fp)
 200fd00:	188000a0 	cmpeqi	r2,r3,2
 200fd04:	10002c1e 	bne	r2,zero,200fdb8 <OSEventPendMulti+0x618>
 200fd08:	00003406 	br	200fddc <OSEventPendMulti+0x63c>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 200fd0c:	e0bff417 	ldw	r2,-48(fp)
 200fd10:	10800003 	ldbu	r2,0(r2)
 200fd14:	10803fcc 	andi	r2,r2,255
 200fd18:	e0bffa15 	stw	r2,-24(fp)
 200fd1c:	e0fffa17 	ldw	r3,-24(fp)
 200fd20:	18800050 	cmplti	r2,r3,1
 200fd24:	1000151e 	bne	r2,zero,200fd7c <OSEventPendMulti+0x5dc>
 200fd28:	e0fffa17 	ldw	r3,-24(fp)
 200fd2c:	188000d0 	cmplti	r2,r3,3
 200fd30:	10000a1e 	bne	r2,zero,200fd5c <OSEventPendMulti+0x5bc>
 200fd34:	e0fffa17 	ldw	r3,-24(fp)
 200fd38:	188000e0 	cmpeqi	r2,r3,3
 200fd3c:	1000011e 	bne	r2,zero,200fd44 <OSEventPendMulti+0x5a4>
 200fd40:	00000e06 	br	200fd7c <OSEventPendMulti+0x5dc>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 200fd44:	e0bff817 	ldw	r2,-32(fp)
 200fd48:	10000015 	stw	zero,0(r2)
 200fd4c:	e0bff817 	ldw	r2,-32(fp)
 200fd50:	10800104 	addi	r2,r2,4
 200fd54:	e0bff815 	stw	r2,-32(fp)
                      break;
 200fd58:	00001406 	br	200fdac <OSEventPendMulti+0x60c>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 200fd5c:	d0a73217 	ldw	r2,-25400(gp)
 200fd60:	10c00917 	ldw	r3,36(r2)
 200fd64:	e0bff817 	ldw	r2,-32(fp)
 200fd68:	10c00015 	stw	r3,0(r2)
 200fd6c:	e0bff817 	ldw	r2,-32(fp)
 200fd70:	10800104 	addi	r2,r2,4
 200fd74:	e0bff815 	stw	r2,-32(fp)
                      break;
 200fd78:	00000c06 	br	200fdac <OSEventPendMulti+0x60c>
 200fd7c:	e0bff017 	ldw	r2,-64(fp)
 200fd80:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200fd84:	e0bfea17 	ldw	r2,-88(fp)
 200fd88:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 200fd8c:	e0bff717 	ldw	r2,-36(fp)
 200fd90:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 200fd94:	e0c00217 	ldw	r3,8(fp)
 200fd98:	00800044 	movi	r2,1
 200fd9c:	18800005 	stb	r2,0(r3)
                      return (events_rdy_nbr);
 200fda0:	e0bff18b 	ldhu	r2,-58(fp)
 200fda4:	e0bfff15 	stw	r2,-4(fp)
 200fda8:	00002406 	br	200fe3c <OSEventPendMulti+0x69c>
             }
            *perr = OS_ERR_NONE;
 200fdac:	e0800217 	ldw	r2,8(fp)
 200fdb0:	10000005 	stb	zero,0(r2)
             break;
 200fdb4:	00001106 	br	200fdfc <OSEventPendMulti+0x65c>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 200fdb8:	e0bff817 	ldw	r2,-32(fp)
 200fdbc:	10000015 	stw	zero,0(r2)
 200fdc0:	e0bff817 	ldw	r2,-32(fp)
 200fdc4:	10800104 	addi	r2,r2,4
 200fdc8:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 200fdcc:	e0c00217 	ldw	r3,8(fp)
 200fdd0:	00800384 	movi	r2,14
 200fdd4:	18800005 	stb	r2,0(r3)
             break;
 200fdd8:	00000806 	br	200fdfc <OSEventPendMulti+0x65c>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 200fddc:	e0bff817 	ldw	r2,-32(fp)
 200fde0:	10000015 	stw	zero,0(r2)
 200fde4:	e0bff817 	ldw	r2,-32(fp)
 200fde8:	10800104 	addi	r2,r2,4
 200fdec:	e0bff815 	stw	r2,-32(fp)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 200fdf0:	e0c00217 	ldw	r3,8(fp)
 200fdf4:	00800284 	movi	r2,10
 200fdf8:	18800005 	stb	r2,0(r3)
             break;
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 200fdfc:	d0a73217 	ldw	r2,-25400(gp)
 200fe00:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 200fe04:	d0a73217 	ldw	r2,-25400(gp)
 200fe08:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 200fe0c:	d0a73217 	ldw	r2,-25400(gp)
 200fe10:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 200fe14:	d0a73217 	ldw	r2,-25400(gp)
 200fe18:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 200fe1c:	d0a73217 	ldw	r2,-25400(gp)
 200fe20:	10000915 	stw	zero,36(r2)
 200fe24:	e0bff017 	ldw	r2,-64(fp)
 200fe28:	e0bfe915 	stw	r2,-92(fp)
 200fe2c:	e0bfe917 	ldw	r2,-92(fp)
 200fe30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 200fe34:	e0fff18b 	ldhu	r3,-58(fp)
 200fe38:	e0ffff15 	stw	r3,-4(fp)
 200fe3c:	e0bfff17 	ldw	r2,-4(fp)
}
 200fe40:	e037883a 	mov	sp,fp
 200fe44:	dfc00117 	ldw	ra,4(sp)
 200fe48:	df000017 	ldw	fp,0(sp)
 200fe4c:	dec00204 	addi	sp,sp,8
 200fe50:	f800283a 	ret

0200fe54 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 200fe54:	defffe04 	addi	sp,sp,-8
 200fe58:	dfc00115 	stw	ra,4(sp)
 200fe5c:	df000015 	stw	fp,0(sp)
 200fe60:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 200fe64:	20199580 	call	2019958 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 200fe68:	2010c240 	call	2010c24 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 200fe6c:	2010c680 	call	2010c68 <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 200fe70:	2010dcc0 	call	2010dcc <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 200fe74:	2010b480 	call	2010b48 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 200fe78:	2012e7c0 	call	2012e7c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 200fe7c:	20138540 	call	2013854 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 200fe80:	2014bb00 	call	2014bb0 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 200fe84:	2010cd40 	call	2010cd4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 200fe88:	2010d500 	call	2010d50 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 200fe8c:	20199740 	call	2019974 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 200fe90:	20116540 	call	2011654 <OSDebugInit>
#endif
}
 200fe94:	e037883a 	mov	sp,fp
 200fe98:	dfc00117 	ldw	ra,4(sp)
 200fe9c:	df000017 	ldw	fp,0(sp)
 200fea0:	dec00204 	addi	sp,sp,8
 200fea4:	f800283a 	ret

0200fea8 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 200fea8:	defffc04 	addi	sp,sp,-16
 200feac:	df000315 	stw	fp,12(sp)
 200feb0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 200feb4:	e03fff15 	stw	zero,-4(fp)
#endif

    if (OSRunning == OS_TRUE) {
 200feb8:	d0a72343 	ldbu	r2,-25459(gp)
 200febc:	10803fcc 	andi	r2,r2,255
 200fec0:	10800058 	cmpnei	r2,r2,1
 200fec4:	1000131e 	bne	r2,zero,200ff14 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200fec8:	0005303a 	rdctl	r2,status
 200fecc:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200fed0:	e0fffe17 	ldw	r3,-8(fp)
 200fed4:	00bfff84 	movi	r2,-2
 200fed8:	1884703a 	and	r2,r3,r2
 200fedc:	1001703a 	wrctl	status,r2
  
  return context;
 200fee0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 200fee4:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting < 255u) {
 200fee8:	d0a73103 	ldbu	r2,-25404(gp)
 200feec:	10803fcc 	andi	r2,r2,255
 200fef0:	10803fe0 	cmpeqi	r2,r2,255
 200fef4:	1000031e 	bne	r2,zero,200ff04 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 200fef8:	d0a73103 	ldbu	r2,-25404(gp)
 200fefc:	10800044 	addi	r2,r2,1
 200ff00:	d0a73105 	stb	r2,-25404(gp)
 200ff04:	e0bfff17 	ldw	r2,-4(fp)
 200ff08:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200ff0c:	e0bffd17 	ldw	r2,-12(fp)
 200ff10:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 200ff14:	e037883a 	mov	sp,fp
 200ff18:	df000017 	ldw	fp,0(sp)
 200ff1c:	dec00104 	addi	sp,sp,4
 200ff20:	f800283a 	ret

0200ff24 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 200ff24:	defffb04 	addi	sp,sp,-20
 200ff28:	dfc00415 	stw	ra,16(sp)
 200ff2c:	df000315 	stw	fp,12(sp)
 200ff30:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 200ff34:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {
 200ff38:	d0a72343 	ldbu	r2,-25459(gp)
 200ff3c:	10803fcc 	andi	r2,r2,255
 200ff40:	10800058 	cmpnei	r2,r2,1
 200ff44:	1000321e 	bne	r2,zero,2010010 <OSIntExit+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200ff48:	0005303a 	rdctl	r2,status
 200ff4c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200ff50:	e0fffe17 	ldw	r3,-8(fp)
 200ff54:	00bfff84 	movi	r2,-2
 200ff58:	1884703a 	and	r2,r3,r2
 200ff5c:	1001703a 	wrctl	status,r2
  
  return context;
 200ff60:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 200ff64:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 200ff68:	d0a73103 	ldbu	r2,-25404(gp)
 200ff6c:	10803fcc 	andi	r2,r2,255
 200ff70:	1005003a 	cmpeq	r2,r2,zero
 200ff74:	1000031e 	bne	r2,zero,200ff84 <OSIntExit+0x60>
            OSIntNesting--;
 200ff78:	d0a73103 	ldbu	r2,-25404(gp)
 200ff7c:	10bfffc4 	addi	r2,r2,-1
 200ff80:	d0a73105 	stb	r2,-25404(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 200ff84:	d0a73103 	ldbu	r2,-25404(gp)
 200ff88:	10803fcc 	andi	r2,r2,255
 200ff8c:	1004c03a 	cmpne	r2,r2,zero
 200ff90:	10001b1e 	bne	r2,zero,2010000 <OSIntExit+0xdc>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 200ff94:	d0a72303 	ldbu	r2,-25460(gp)
 200ff98:	10803fcc 	andi	r2,r2,255
 200ff9c:	1004c03a 	cmpne	r2,r2,zero
 200ffa0:	1000171e 	bne	r2,zero,2010000 <OSIntExit+0xdc>
                OS_SchedNew();
 200ffa4:	20110400 	call	2011040 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 200ffa8:	d0a72503 	ldbu	r2,-25452(gp)
 200ffac:	d0e72543 	ldbu	r3,-25451(gp)
 200ffb0:	11003fcc 	andi	r4,r2,255
 200ffb4:	18803fcc 	andi	r2,r3,255
 200ffb8:	20801126 	beq	r4,r2,2010000 <OSIntExit+0xdc>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 200ffbc:	d0a72503 	ldbu	r2,-25452(gp)
 200ffc0:	10803fcc 	andi	r2,r2,255
 200ffc4:	00c080f4 	movhi	r3,515
 200ffc8:	18e66a04 	addi	r3,r3,-26200
 200ffcc:	1085883a 	add	r2,r2,r2
 200ffd0:	1085883a 	add	r2,r2,r2
 200ffd4:	10c5883a 	add	r2,r2,r3
 200ffd8:	10800017 	ldw	r2,0(r2)
 200ffdc:	d0a72d15 	stw	r2,-25420(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 200ffe0:	d0e72d17 	ldw	r3,-25420(gp)
 200ffe4:	18800e17 	ldw	r2,56(r3)
 200ffe8:	10800044 	addi	r2,r2,1
 200ffec:	18800e15 	stw	r2,56(r3)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 200fff0:	d0a72817 	ldw	r2,-25440(gp)
 200fff4:	10800044 	addi	r2,r2,1
 200fff8:	d0a72815 	stw	r2,-25440(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 200fffc:	20194e40 	call	20194e4 <OSCtxSw>
 2010000:	e0bfff17 	ldw	r2,-4(fp)
 2010004:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010008:	e0bffd17 	ldw	r2,-12(fp)
 201000c:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 2010010:	e037883a 	mov	sp,fp
 2010014:	dfc00117 	ldw	ra,4(sp)
 2010018:	df000017 	ldw	fp,0(sp)
 201001c:	dec00204 	addi	sp,sp,8
 2010020:	f800283a 	ret

02010024 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 2010024:	defffc04 	addi	sp,sp,-16
 2010028:	df000315 	stw	fp,12(sp)
 201002c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2010030:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 2010034:	d0a72343 	ldbu	r2,-25459(gp)
 2010038:	10803fcc 	andi	r2,r2,255
 201003c:	10800058 	cmpnei	r2,r2,1
 2010040:	1000171e 	bne	r2,zero,20100a0 <OSSchedLock+0x7c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010044:	0005303a 	rdctl	r2,status
 2010048:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201004c:	e0fffe17 	ldw	r3,-8(fp)
 2010050:	00bfff84 	movi	r2,-2
 2010054:	1884703a 	and	r2,r3,r2
 2010058:	1001703a 	wrctl	status,r2
  
  return context;
 201005c:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 2010060:	e0bfff15 	stw	r2,-4(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 2010064:	d0a73103 	ldbu	r2,-25404(gp)
 2010068:	10803fcc 	andi	r2,r2,255
 201006c:	1004c03a 	cmpne	r2,r2,zero
 2010070:	1000071e 	bne	r2,zero,2010090 <OSSchedLock+0x6c>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 2010074:	d0a72303 	ldbu	r2,-25460(gp)
 2010078:	10803fcc 	andi	r2,r2,255
 201007c:	10803fe0 	cmpeqi	r2,r2,255
 2010080:	1000031e 	bne	r2,zero,2010090 <OSSchedLock+0x6c>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 2010084:	d0a72303 	ldbu	r2,-25460(gp)
 2010088:	10800044 	addi	r2,r2,1
 201008c:	d0a72305 	stb	r2,-25460(gp)
 2010090:	e0bfff17 	ldw	r2,-4(fp)
 2010094:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010098:	e0bffd17 	ldw	r2,-12(fp)
 201009c:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 20100a0:	e037883a 	mov	sp,fp
 20100a4:	df000017 	ldw	fp,0(sp)
 20100a8:	dec00104 	addi	sp,sp,4
 20100ac:	f800283a 	ret

020100b0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 20100b0:	defff804 	addi	sp,sp,-32
 20100b4:	dfc00715 	stw	ra,28(sp)
 20100b8:	df000615 	stw	fp,24(sp)
 20100bc:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 20100c0:	e03fff15 	stw	zero,-4(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 20100c4:	d0a72343 	ldbu	r2,-25459(gp)
 20100c8:	10803fcc 	andi	r2,r2,255
 20100cc:	10800058 	cmpnei	r2,r2,1
 20100d0:	10002b1e 	bne	r2,zero,2010180 <OSSchedUnlock+0xd0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20100d4:	0005303a 	rdctl	r2,status
 20100d8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20100dc:	e0fffe17 	ldw	r3,-8(fp)
 20100e0:	00bfff84 	movi	r2,-2
 20100e4:	1884703a 	and	r2,r3,r2
 20100e8:	1001703a 	wrctl	status,r2
  
  return context;
 20100ec:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 20100f0:	e0bfff15 	stw	r2,-4(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 20100f4:	d0a72303 	ldbu	r2,-25460(gp)
 20100f8:	10803fcc 	andi	r2,r2,255
 20100fc:	1005003a 	cmpeq	r2,r2,zero
 2010100:	10001b1e 	bne	r2,zero,2010170 <OSSchedUnlock+0xc0>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 2010104:	d0a72303 	ldbu	r2,-25460(gp)
 2010108:	10bfffc4 	addi	r2,r2,-1
 201010c:	d0a72305 	stb	r2,-25460(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 2010110:	d0a72303 	ldbu	r2,-25460(gp)
 2010114:	10803fcc 	andi	r2,r2,255
 2010118:	1004c03a 	cmpne	r2,r2,zero
 201011c:	10000f1e 	bne	r2,zero,201015c <OSSchedUnlock+0xac>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 2010120:	d0a73103 	ldbu	r2,-25404(gp)
 2010124:	10803fcc 	andi	r2,r2,255
 2010128:	1004c03a 	cmpne	r2,r2,zero
 201012c:	1000061e 	bne	r2,zero,2010148 <OSSchedUnlock+0x98>
 2010130:	e0bfff17 	ldw	r2,-4(fp)
 2010134:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010138:	e0bffd17 	ldw	r2,-12(fp)
 201013c:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 2010140:	2010f6c0 	call	2010f6c <OS_Sched>
 2010144:	00000e06 	br	2010180 <OSSchedUnlock+0xd0>
 2010148:	e0bfff17 	ldw	r2,-4(fp)
 201014c:	e0bffc15 	stw	r2,-16(fp)
 2010150:	e0bffc17 	ldw	r2,-16(fp)
 2010154:	1001703a 	wrctl	status,r2
 2010158:	00000906 	br	2010180 <OSSchedUnlock+0xd0>
 201015c:	e0bfff17 	ldw	r2,-4(fp)
 2010160:	e0bffb15 	stw	r2,-20(fp)
 2010164:	e0bffb17 	ldw	r2,-20(fp)
 2010168:	1001703a 	wrctl	status,r2
 201016c:	00000406 	br	2010180 <OSSchedUnlock+0xd0>
 2010170:	e0bfff17 	ldw	r2,-4(fp)
 2010174:	e0bffa15 	stw	r2,-24(fp)
 2010178:	e0bffa17 	ldw	r2,-24(fp)
 201017c:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 2010180:	e037883a 	mov	sp,fp
 2010184:	dfc00117 	ldw	ra,4(sp)
 2010188:	df000017 	ldw	fp,0(sp)
 201018c:	dec00204 	addi	sp,sp,8
 2010190:	f800283a 	ret

02010194 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 2010194:	defffe04 	addi	sp,sp,-8
 2010198:	dfc00115 	stw	ra,4(sp)
 201019c:	df000015 	stw	fp,0(sp)
 20101a0:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 20101a4:	d0a72343 	ldbu	r2,-25459(gp)
 20101a8:	10803fcc 	andi	r2,r2,255
 20101ac:	1004c03a 	cmpne	r2,r2,zero
 20101b0:	10000f1e 	bne	r2,zero,20101f0 <OSStart+0x5c>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 20101b4:	20110400 	call	2011040 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 20101b8:	d0a72503 	ldbu	r2,-25452(gp)
 20101bc:	d0a72545 	stb	r2,-25451(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 20101c0:	d0a72503 	ldbu	r2,-25452(gp)
 20101c4:	10803fcc 	andi	r2,r2,255
 20101c8:	00c080f4 	movhi	r3,515
 20101cc:	18e66a04 	addi	r3,r3,-26200
 20101d0:	1085883a 	add	r2,r2,r2
 20101d4:	1085883a 	add	r2,r2,r2
 20101d8:	10c5883a 	add	r2,r2,r3
 20101dc:	10800017 	ldw	r2,0(r2)
 20101e0:	d0a72d15 	stw	r2,-25420(gp)
        OSTCBCur      = OSTCBHighRdy;
 20101e4:	d0a72d17 	ldw	r2,-25420(gp)
 20101e8:	d0a73215 	stw	r2,-25400(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 20101ec:	20195700 	call	2019570 <OSStartHighRdy>
    }
}
 20101f0:	e037883a 	mov	sp,fp
 20101f4:	dfc00117 	ldw	ra,4(sp)
 20101f8:	df000017 	ldw	fp,0(sp)
 20101fc:	dec00204 	addi	sp,sp,8
 2010200:	f800283a 	ret

02010204 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 2010204:	defff904 	addi	sp,sp,-28
 2010208:	dfc00615 	stw	ra,24(sp)
 201020c:	df000515 	stw	fp,20(sp)
 2010210:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2010214:	e03fff15 	stw	zero,-4(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 2010218:	01000084 	movi	r4,2
 201021c:	20172640 	call	2017264 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010220:	0005303a 	rdctl	r2,status
 2010224:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010228:	e0fffe17 	ldw	r3,-8(fp)
 201022c:	00bfff84 	movi	r2,-2
 2010230:	1884703a 	and	r2,r3,r2
 2010234:	1001703a 	wrctl	status,r2
  
  return context;
 2010238:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 201023c:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 2010240:	d0272415 	stw	zero,-25456(gp)
 2010244:	e0bfff17 	ldw	r2,-4(fp)
 2010248:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201024c:	e0bffd17 	ldw	r2,-12(fp)
 2010250:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 2010254:	01001904 	movi	r4,100
 2010258:	20172640 	call	2017264 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201025c:	0005303a 	rdctl	r2,status
 2010260:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010264:	e0fffc17 	ldw	r3,-16(fp)
 2010268:	00bfff84 	movi	r2,-2
 201026c:	1884703a 	and	r2,r3,r2
 2010270:	1001703a 	wrctl	status,r2
  
  return context;
 2010274:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 2010278:	e0bfff15 	stw	r2,-4(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 201027c:	d0a72417 	ldw	r2,-25456(gp)
 2010280:	d0a72915 	stw	r2,-25436(gp)
    OSStatRdy    = OS_TRUE;
 2010284:	00800044 	movi	r2,1
 2010288:	d0a73505 	stb	r2,-25388(gp)
 201028c:	e0bfff17 	ldw	r2,-4(fp)
 2010290:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2010294:	e0bffb17 	ldw	r2,-20(fp)
 2010298:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 201029c:	e037883a 	mov	sp,fp
 20102a0:	dfc00117 	ldw	ra,4(sp)
 20102a4:	df000017 	ldw	fp,0(sp)
 20102a8:	dec00204 	addi	sp,sp,8
 20102ac:	f800283a 	ret

020102b0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 20102b0:	defff604 	addi	sp,sp,-40
 20102b4:	dfc00915 	stw	ra,36(sp)
 20102b8:	df000815 	stw	fp,32(sp)
 20102bc:	df000804 	addi	fp,sp,32
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 20102c0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 20102c4:	201993c0 	call	201993c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20102c8:	0005303a 	rdctl	r2,status
 20102cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20102d0:	e0fffb17 	ldw	r3,-20(fp)
 20102d4:	00bfff84 	movi	r2,-2
 20102d8:	1884703a 	and	r2,r3,r2
 20102dc:	1001703a 	wrctl	status,r2
  
  return context;
 20102e0:	e0bffb17 	ldw	r2,-20(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 20102e4:	e0bffc15 	stw	r2,-16(fp)
    OSTime++;
 20102e8:	d0a73317 	ldw	r2,-25396(gp)
 20102ec:	10800044 	addi	r2,r2,1
 20102f0:	d0a73315 	stw	r2,-25396(gp)
 20102f4:	e0bffc17 	ldw	r2,-16(fp)
 20102f8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20102fc:	e0bffa17 	ldw	r2,-24(fp)
 2010300:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 2010304:	d0a72343 	ldbu	r2,-25459(gp)
 2010308:	10803fcc 	andi	r2,r2,255
 201030c:	10800058 	cmpnei	r2,r2,1
 2010310:	1000721e 	bne	r2,zero,20104dc <OSTimeTick+0x22c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 2010314:	d0a72703 	ldbu	r2,-25444(gp)
 2010318:	10803fcc 	andi	r2,r2,255
 201031c:	e0bfff15 	stw	r2,-4(fp)
 2010320:	e0ffff17 	ldw	r3,-4(fp)
 2010324:	18800060 	cmpeqi	r2,r3,1
 2010328:	10000a1e 	bne	r2,zero,2010354 <OSTimeTick+0xa4>
 201032c:	e0ffff17 	ldw	r3,-4(fp)
 2010330:	188000a0 	cmpeqi	r2,r3,2
 2010334:	1000091e 	bne	r2,zero,201035c <OSTimeTick+0xac>
 2010338:	e0ffff17 	ldw	r3,-4(fp)
 201033c:	1805003a 	cmpeq	r2,r3,zero
 2010340:	1000011e 	bne	r2,zero,2010348 <OSTimeTick+0x98>
 2010344:	00000a06 	br	2010370 <OSTimeTick+0xc0>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 2010348:	00800044 	movi	r2,1
 201034c:	e0bffd05 	stb	r2,-12(fp)
                 break;
 2010350:	00000a06 	br	201037c <OSTimeTick+0xcc>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 2010354:	e03ffd05 	stb	zero,-12(fp)
                 break;
 2010358:	00000806 	br	201037c <OSTimeTick+0xcc>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 201035c:	00800044 	movi	r2,1
 2010360:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 2010364:	00800044 	movi	r2,1
 2010368:	d0a72705 	stb	r2,-25444(gp)
                 break;
 201036c:	00000306 	br	201037c <OSTimeTick+0xcc>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 2010370:	00800044 	movi	r2,1
 2010374:	e0bffd05 	stb	r2,-12(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 2010378:	d0272705 	stb	zero,-25444(gp)
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 201037c:	e0bffd03 	ldbu	r2,-12(fp)
 2010380:	1005003a 	cmpeq	r2,r2,zero
 2010384:	1000551e 	bne	r2,zero,20104dc <OSTimeTick+0x22c>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 2010388:	d0a72617 	ldw	r2,-25448(gp)
 201038c:	e0bffe15 	stw	r2,-8(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 2010390:	00004d06 	br	20104c8 <OSTimeTick+0x218>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010394:	0005303a 	rdctl	r2,status
 2010398:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201039c:	e0fff917 	ldw	r3,-28(fp)
 20103a0:	00bfff84 	movi	r2,-2
 20103a4:	1884703a 	and	r2,r3,r2
 20103a8:	1001703a 	wrctl	status,r2
  
  return context;
 20103ac:	e0bff917 	ldw	r2,-28(fp)
            OS_ENTER_CRITICAL();
 20103b0:	e0bffc15 	stw	r2,-16(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 20103b4:	e0bffe17 	ldw	r2,-8(fp)
 20103b8:	10800b8b 	ldhu	r2,46(r2)
 20103bc:	10bfffcc 	andi	r2,r2,65535
 20103c0:	1005003a 	cmpeq	r2,r2,zero
 20103c4:	1000391e 	bne	r2,zero,20104ac <OSTimeTick+0x1fc>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 20103c8:	e0bffe17 	ldw	r2,-8(fp)
 20103cc:	10800b8b 	ldhu	r2,46(r2)
 20103d0:	10bfffc4 	addi	r2,r2,-1
 20103d4:	1007883a 	mov	r3,r2
 20103d8:	e0bffe17 	ldw	r2,-8(fp)
 20103dc:	10c00b8d 	sth	r3,46(r2)
 20103e0:	e0bffe17 	ldw	r2,-8(fp)
 20103e4:	10800b8b 	ldhu	r2,46(r2)
 20103e8:	10bfffcc 	andi	r2,r2,65535
 20103ec:	1004c03a 	cmpne	r2,r2,zero
 20103f0:	10002e1e 	bne	r2,zero,20104ac <OSTimeTick+0x1fc>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 20103f4:	e0bffe17 	ldw	r2,-8(fp)
 20103f8:	10800c03 	ldbu	r2,48(r2)
 20103fc:	10803fcc 	andi	r2,r2,255
 2010400:	10800dcc 	andi	r2,r2,55
 2010404:	1005003a 	cmpeq	r2,r2,zero
 2010408:	10000b1e 	bne	r2,zero,2010438 <OSTimeTick+0x188>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 201040c:	e0bffe17 	ldw	r2,-8(fp)
 2010410:	10c00c03 	ldbu	r3,48(r2)
 2010414:	00bff204 	movi	r2,-56
 2010418:	1884703a 	and	r2,r3,r2
 201041c:	1007883a 	mov	r3,r2
 2010420:	e0bffe17 	ldw	r2,-8(fp)
 2010424:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 2010428:	e0fffe17 	ldw	r3,-8(fp)
 201042c:	00800044 	movi	r2,1
 2010430:	18800c45 	stb	r2,49(r3)
 2010434:	00000206 	br	2010440 <OSTimeTick+0x190>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 2010438:	e0bffe17 	ldw	r2,-8(fp)
 201043c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 2010440:	e0bffe17 	ldw	r2,-8(fp)
 2010444:	10800c03 	ldbu	r2,48(r2)
 2010448:	10803fcc 	andi	r2,r2,255
 201044c:	1080020c 	andi	r2,r2,8
 2010450:	1004c03a 	cmpne	r2,r2,zero
 2010454:	1000151e 	bne	r2,zero,20104ac <OSTimeTick+0x1fc>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 2010458:	e0bffe17 	ldw	r2,-8(fp)
 201045c:	10c00d83 	ldbu	r3,54(r2)
 2010460:	d0a72f03 	ldbu	r2,-25412(gp)
 2010464:	1884b03a 	or	r2,r3,r2
 2010468:	d0a72f05 	stb	r2,-25412(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 201046c:	e0bffe17 	ldw	r2,-8(fp)
 2010470:	10800d03 	ldbu	r2,52(r2)
 2010474:	11003fcc 	andi	r4,r2,255
 2010478:	e0bffe17 	ldw	r2,-8(fp)
 201047c:	10800d03 	ldbu	r2,52(r2)
 2010480:	10c03fcc 	andi	r3,r2,255
 2010484:	d0a72f44 	addi	r2,gp,-25411
 2010488:	1885883a 	add	r2,r3,r2
 201048c:	10c00003 	ldbu	r3,0(r2)
 2010490:	e0bffe17 	ldw	r2,-8(fp)
 2010494:	10800d43 	ldbu	r2,53(r2)
 2010498:	1884b03a 	or	r2,r3,r2
 201049c:	1007883a 	mov	r3,r2
 20104a0:	d0a72f44 	addi	r2,gp,-25411
 20104a4:	2085883a 	add	r2,r4,r2
 20104a8:	10c00005 	stb	r3,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 20104ac:	e0bffe17 	ldw	r2,-8(fp)
 20104b0:	10800517 	ldw	r2,20(r2)
 20104b4:	e0bffe15 	stw	r2,-8(fp)
 20104b8:	e0bffc17 	ldw	r2,-16(fp)
 20104bc:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20104c0:	e0bff817 	ldw	r2,-32(fp)
 20104c4:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 20104c8:	e0bffe17 	ldw	r2,-8(fp)
 20104cc:	10800c83 	ldbu	r2,50(r2)
 20104d0:	10803fcc 	andi	r2,r2,255
 20104d4:	10800518 	cmpnei	r2,r2,20
 20104d8:	103fae1e 	bne	r2,zero,2010394 <OSTimeTick+0xe4>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 20104dc:	e037883a 	mov	sp,fp
 20104e0:	dfc00117 	ldw	ra,4(sp)
 20104e4:	df000017 	ldw	fp,0(sp)
 20104e8:	dec00204 	addi	sp,sp,8
 20104ec:	f800283a 	ret

020104f0 <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 20104f0:	deffff04 	addi	sp,sp,-4
 20104f4:	df000015 	stw	fp,0(sp)
 20104f8:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 20104fc:	00804784 	movi	r2,286
}
 2010500:	e037883a 	mov	sp,fp
 2010504:	df000017 	ldw	fp,0(sp)
 2010508:	dec00104 	addi	sp,sp,4
 201050c:	f800283a 	ret

02010510 <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 2010510:	deffff04 	addi	sp,sp,-4
 2010514:	df000015 	stw	fp,0(sp)
 2010518:	d839883a 	mov	fp,sp
}
 201051c:	e037883a 	mov	sp,fp
 2010520:	df000017 	ldw	fp,0(sp)
 2010524:	dec00104 	addi	sp,sp,4
 2010528:	f800283a 	ret

0201052c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 201052c:	defff804 	addi	sp,sp,-32
 2010530:	dfc00715 	stw	ra,28(sp)
 2010534:	df000615 	stw	fp,24(sp)
 2010538:	df000604 	addi	fp,sp,24
 201053c:	e13ffc15 	stw	r4,-16(fp)
 2010540:	e17ffd15 	stw	r5,-12(fp)
 2010544:	e1bffe05 	stb	r6,-8(fp)
 2010548:	e1ffff05 	stb	r7,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 201054c:	e0bffc17 	ldw	r2,-16(fp)
 2010550:	10800283 	ldbu	r2,10(r2)
 2010554:	10c03fcc 	andi	r3,r2,255
 2010558:	008080b4 	movhi	r2,514
 201055c:	10a9ec04 	addi	r2,r2,-22608
 2010560:	10c5883a 	add	r2,r2,r3
 2010564:	10800003 	ldbu	r2,0(r2)
 2010568:	e0bffa85 	stb	r2,-22(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 201056c:	e0fffa83 	ldbu	r3,-22(fp)
 2010570:	e0bffc17 	ldw	r2,-16(fp)
 2010574:	1885883a 	add	r2,r3,r2
 2010578:	10800204 	addi	r2,r2,8
 201057c:	108000c3 	ldbu	r2,3(r2)
 2010580:	10c03fcc 	andi	r3,r2,255
 2010584:	008080b4 	movhi	r2,514
 2010588:	10a9ec04 	addi	r2,r2,-22608
 201058c:	10c5883a 	add	r2,r2,r3
 2010590:	10800003 	ldbu	r2,0(r2)
 2010594:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 2010598:	e0bffa83 	ldbu	r2,-22(fp)
 201059c:	100490fa 	slli	r2,r2,3
 20105a0:	1007883a 	mov	r3,r2
 20105a4:	e0bffa43 	ldbu	r2,-23(fp)
 20105a8:	1885883a 	add	r2,r3,r2
 20105ac:	e0bffa05 	stb	r2,-24(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 20105b0:	e0bffa03 	ldbu	r2,-24(fp)
 20105b4:	00c080f4 	movhi	r3,515
 20105b8:	18e66a04 	addi	r3,r3,-26200
 20105bc:	1085883a 	add	r2,r2,r2
 20105c0:	1085883a 	add	r2,r2,r2
 20105c4:	10c5883a 	add	r2,r2,r3
 20105c8:	10800017 	ldw	r2,0(r2)
 20105cc:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 20105d0:	e0bffb17 	ldw	r2,-20(fp)
 20105d4:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 20105d8:	e0fffb17 	ldw	r3,-20(fp)
 20105dc:	e0bffd17 	ldw	r2,-12(fp)
 20105e0:	18800915 	stw	r2,36(r3)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 20105e4:	e0bffb17 	ldw	r2,-20(fp)
 20105e8:	10800c03 	ldbu	r2,48(r2)
 20105ec:	1007883a 	mov	r3,r2
 20105f0:	e0bffe03 	ldbu	r2,-8(fp)
 20105f4:	0084303a 	nor	r2,zero,r2
 20105f8:	1884703a 	and	r2,r3,r2
 20105fc:	1007883a 	mov	r3,r2
 2010600:	e0bffb17 	ldw	r2,-20(fp)
 2010604:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 2010608:	e0fffb17 	ldw	r3,-20(fp)
 201060c:	e0bfff03 	ldbu	r2,-4(fp)
 2010610:	18800c45 	stb	r2,49(r3)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 2010614:	e0bffb17 	ldw	r2,-20(fp)
 2010618:	10800c03 	ldbu	r2,48(r2)
 201061c:	10803fcc 	andi	r2,r2,255
 2010620:	1080020c 	andi	r2,r2,8
 2010624:	1004c03a 	cmpne	r2,r2,zero
 2010628:	1000111e 	bne	r2,zero,2010670 <OS_EventTaskRdy+0x144>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 201062c:	e0bffb17 	ldw	r2,-20(fp)
 2010630:	10c00d83 	ldbu	r3,54(r2)
 2010634:	d0a72f03 	ldbu	r2,-25412(gp)
 2010638:	1884b03a 	or	r2,r3,r2
 201063c:	d0a72f05 	stb	r2,-25412(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 2010640:	e13ffa83 	ldbu	r4,-22(fp)
 2010644:	e0fffa83 	ldbu	r3,-22(fp)
 2010648:	d0a72f44 	addi	r2,gp,-25411
 201064c:	1885883a 	add	r2,r3,r2
 2010650:	10c00003 	ldbu	r3,0(r2)
 2010654:	e0bffb17 	ldw	r2,-20(fp)
 2010658:	10800d43 	ldbu	r2,53(r2)
 201065c:	1884b03a 	or	r2,r3,r2
 2010660:	1007883a 	mov	r3,r2
 2010664:	d0a72f44 	addi	r2,gp,-25411
 2010668:	2085883a 	add	r2,r4,r2
 201066c:	10c00005 	stb	r3,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 2010670:	e13ffb17 	ldw	r4,-20(fp)
 2010674:	e17ffc17 	ldw	r5,-16(fp)
 2010678:	20109240 	call	2010924 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 201067c:	e0bffb17 	ldw	r2,-20(fp)
 2010680:	10800817 	ldw	r2,32(r2)
 2010684:	1005003a 	cmpeq	r2,r2,zero
 2010688:	1000071e 	bne	r2,zero,20106a8 <OS_EventTaskRdy+0x17c>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 201068c:	e0bffb17 	ldw	r2,-20(fp)
 2010690:	11400817 	ldw	r5,32(r2)
 2010694:	e13ffb17 	ldw	r4,-20(fp)
 2010698:	20109dc0 	call	20109dc <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 201069c:	e0fffb17 	ldw	r3,-20(fp)
 20106a0:	e0bffc17 	ldw	r2,-16(fp)
 20106a4:	18800715 	stw	r2,28(r3)
    }
#endif

    return (prio);
 20106a8:	e0bffa03 	ldbu	r2,-24(fp)
}
 20106ac:	e037883a 	mov	sp,fp
 20106b0:	dfc00117 	ldw	ra,4(sp)
 20106b4:	df000017 	ldw	fp,0(sp)
 20106b8:	dec00204 	addi	sp,sp,8
 20106bc:	f800283a 	ret

020106c0 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 20106c0:	defffd04 	addi	sp,sp,-12
 20106c4:	df000215 	stw	fp,8(sp)
 20106c8:	df000204 	addi	fp,sp,8
 20106cc:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 20106d0:	d0e73217 	ldw	r3,-25400(gp)
 20106d4:	e0bfff17 	ldw	r2,-4(fp)
 20106d8:	18800715 	stw	r2,28(r3)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 20106dc:	d0a73217 	ldw	r2,-25400(gp)
 20106e0:	10800d03 	ldbu	r2,52(r2)
 20106e4:	11003fcc 	andi	r4,r2,255
 20106e8:	d0a73217 	ldw	r2,-25400(gp)
 20106ec:	10800d03 	ldbu	r2,52(r2)
 20106f0:	10c03fcc 	andi	r3,r2,255
 20106f4:	e0bfff17 	ldw	r2,-4(fp)
 20106f8:	1885883a 	add	r2,r3,r2
 20106fc:	10800204 	addi	r2,r2,8
 2010700:	10c000c3 	ldbu	r3,3(r2)
 2010704:	d0a73217 	ldw	r2,-25400(gp)
 2010708:	10800d43 	ldbu	r2,53(r2)
 201070c:	1884b03a 	or	r2,r3,r2
 2010710:	1007883a 	mov	r3,r2
 2010714:	e0bfff17 	ldw	r2,-4(fp)
 2010718:	2085883a 	add	r2,r4,r2
 201071c:	10800204 	addi	r2,r2,8
 2010720:	10c000c5 	stb	r3,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2010724:	e0bfff17 	ldw	r2,-4(fp)
 2010728:	10c00283 	ldbu	r3,10(r2)
 201072c:	d0a73217 	ldw	r2,-25400(gp)
 2010730:	10800d83 	ldbu	r2,54(r2)
 2010734:	1884b03a 	or	r2,r3,r2
 2010738:	1007883a 	mov	r3,r2
 201073c:	e0bfff17 	ldw	r2,-4(fp)
 2010740:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2010744:	d0a73217 	ldw	r2,-25400(gp)
 2010748:	10800d03 	ldbu	r2,52(r2)
 201074c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 2010750:	e13ffe03 	ldbu	r4,-8(fp)
 2010754:	e0fffe03 	ldbu	r3,-8(fp)
 2010758:	d0a72f44 	addi	r2,gp,-25411
 201075c:	1885883a 	add	r2,r3,r2
 2010760:	10800003 	ldbu	r2,0(r2)
 2010764:	1007883a 	mov	r3,r2
 2010768:	d0a73217 	ldw	r2,-25400(gp)
 201076c:	10800d43 	ldbu	r2,53(r2)
 2010770:	0084303a 	nor	r2,zero,r2
 2010774:	1884703a 	and	r2,r3,r2
 2010778:	1007883a 	mov	r3,r2
 201077c:	d0a72f44 	addi	r2,gp,-25411
 2010780:	2085883a 	add	r2,r4,r2
 2010784:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 2010788:	e0fffe03 	ldbu	r3,-8(fp)
 201078c:	d0a72f44 	addi	r2,gp,-25411
 2010790:	1885883a 	add	r2,r3,r2
 2010794:	10800003 	ldbu	r2,0(r2)
 2010798:	10803fcc 	andi	r2,r2,255
 201079c:	1004c03a 	cmpne	r2,r2,zero
 20107a0:	1000071e 	bne	r2,zero,20107c0 <OS_EventTaskWait+0x100>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 20107a4:	d0a73217 	ldw	r2,-25400(gp)
 20107a8:	10800d83 	ldbu	r2,54(r2)
 20107ac:	0084303a 	nor	r2,zero,r2
 20107b0:	1007883a 	mov	r3,r2
 20107b4:	d0a72f03 	ldbu	r2,-25412(gp)
 20107b8:	1884703a 	and	r2,r3,r2
 20107bc:	d0a72f05 	stb	r2,-25412(gp)
    }
}
 20107c0:	e037883a 	mov	sp,fp
 20107c4:	df000017 	ldw	fp,0(sp)
 20107c8:	dec00104 	addi	sp,sp,4
 20107cc:	f800283a 	ret

020107d0 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 20107d0:	defffb04 	addi	sp,sp,-20
 20107d4:	df000415 	stw	fp,16(sp)
 20107d8:	df000404 	addi	fp,sp,16
 20107dc:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 20107e0:	d0a73217 	ldw	r2,-25400(gp)
 20107e4:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 20107e8:	d0e73217 	ldw	r3,-25400(gp)
 20107ec:	e0bfff17 	ldw	r2,-4(fp)
 20107f0:	18800815 	stw	r2,32(r3)

    pevents =  pevents_wait;
 20107f4:	e0bfff17 	ldw	r2,-4(fp)
 20107f8:	e0bffe15 	stw	r2,-8(fp)
    pevent  = *pevents;
 20107fc:	e0bffe17 	ldw	r2,-8(fp)
 2010800:	10800017 	ldw	r2,0(r2)
 2010804:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 2010808:	00002006 	br	201088c <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 201080c:	d0a73217 	ldw	r2,-25400(gp)
 2010810:	10800d03 	ldbu	r2,52(r2)
 2010814:	11003fcc 	andi	r4,r2,255
 2010818:	d0a73217 	ldw	r2,-25400(gp)
 201081c:	10800d03 	ldbu	r2,52(r2)
 2010820:	10c03fcc 	andi	r3,r2,255
 2010824:	e0bffd17 	ldw	r2,-12(fp)
 2010828:	1885883a 	add	r2,r3,r2
 201082c:	10800204 	addi	r2,r2,8
 2010830:	10c000c3 	ldbu	r3,3(r2)
 2010834:	d0a73217 	ldw	r2,-25400(gp)
 2010838:	10800d43 	ldbu	r2,53(r2)
 201083c:	1884b03a 	or	r2,r3,r2
 2010840:	1007883a 	mov	r3,r2
 2010844:	e0bffd17 	ldw	r2,-12(fp)
 2010848:	2085883a 	add	r2,r4,r2
 201084c:	10800204 	addi	r2,r2,8
 2010850:	10c000c5 	stb	r3,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 2010854:	e0bffd17 	ldw	r2,-12(fp)
 2010858:	10c00283 	ldbu	r3,10(r2)
 201085c:	d0a73217 	ldw	r2,-25400(gp)
 2010860:	10800d83 	ldbu	r2,54(r2)
 2010864:	1884b03a 	or	r2,r3,r2
 2010868:	1007883a 	mov	r3,r2
 201086c:	e0bffd17 	ldw	r2,-12(fp)
 2010870:	10c00285 	stb	r3,10(r2)
        pevents++;
 2010874:	e0bffe17 	ldw	r2,-8(fp)
 2010878:	10800104 	addi	r2,r2,4
 201087c:	e0bffe15 	stw	r2,-8(fp)
        pevent = *pevents;
 2010880:	e0bffe17 	ldw	r2,-8(fp)
 2010884:	10800017 	ldw	r2,0(r2)
 2010888:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 201088c:	e0bffd17 	ldw	r2,-12(fp)
 2010890:	1004c03a 	cmpne	r2,r2,zero
 2010894:	103fdd1e 	bne	r2,zero,201080c <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 2010898:	d0a73217 	ldw	r2,-25400(gp)
 201089c:	10800d03 	ldbu	r2,52(r2)
 20108a0:	e0bffc05 	stb	r2,-16(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 20108a4:	e13ffc03 	ldbu	r4,-16(fp)
 20108a8:	e0fffc03 	ldbu	r3,-16(fp)
 20108ac:	d0a72f44 	addi	r2,gp,-25411
 20108b0:	1885883a 	add	r2,r3,r2
 20108b4:	10800003 	ldbu	r2,0(r2)
 20108b8:	1007883a 	mov	r3,r2
 20108bc:	d0a73217 	ldw	r2,-25400(gp)
 20108c0:	10800d43 	ldbu	r2,53(r2)
 20108c4:	0084303a 	nor	r2,zero,r2
 20108c8:	1884703a 	and	r2,r3,r2
 20108cc:	1007883a 	mov	r3,r2
 20108d0:	d0a72f44 	addi	r2,gp,-25411
 20108d4:	2085883a 	add	r2,r4,r2
 20108d8:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 20108dc:	e0fffc03 	ldbu	r3,-16(fp)
 20108e0:	d0a72f44 	addi	r2,gp,-25411
 20108e4:	1885883a 	add	r2,r3,r2
 20108e8:	10800003 	ldbu	r2,0(r2)
 20108ec:	10803fcc 	andi	r2,r2,255
 20108f0:	1004c03a 	cmpne	r2,r2,zero
 20108f4:	1000071e 	bne	r2,zero,2010914 <OS_EventTaskWaitMulti+0x144>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 20108f8:	d0a73217 	ldw	r2,-25400(gp)
 20108fc:	10800d83 	ldbu	r2,54(r2)
 2010900:	0084303a 	nor	r2,zero,r2
 2010904:	1007883a 	mov	r3,r2
 2010908:	d0a72f03 	ldbu	r2,-25412(gp)
 201090c:	1884703a 	and	r2,r3,r2
 2010910:	d0a72f05 	stb	r2,-25412(gp)
    }
}
 2010914:	e037883a 	mov	sp,fp
 2010918:	df000017 	ldw	fp,0(sp)
 201091c:	dec00104 	addi	sp,sp,4
 2010920:	f800283a 	ret

02010924 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 2010924:	defffc04 	addi	sp,sp,-16
 2010928:	df000315 	stw	fp,12(sp)
 201092c:	df000304 	addi	fp,sp,12
 2010930:	e13ffe15 	stw	r4,-8(fp)
 2010934:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 2010938:	e0bffe17 	ldw	r2,-8(fp)
 201093c:	10800d03 	ldbu	r2,52(r2)
 2010940:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 2010944:	e13ffd03 	ldbu	r4,-12(fp)
 2010948:	e0fffd03 	ldbu	r3,-12(fp)
 201094c:	e0bfff17 	ldw	r2,-4(fp)
 2010950:	1885883a 	add	r2,r3,r2
 2010954:	10800204 	addi	r2,r2,8
 2010958:	108000c3 	ldbu	r2,3(r2)
 201095c:	1007883a 	mov	r3,r2
 2010960:	e0bffe17 	ldw	r2,-8(fp)
 2010964:	10800d43 	ldbu	r2,53(r2)
 2010968:	0084303a 	nor	r2,zero,r2
 201096c:	1884703a 	and	r2,r3,r2
 2010970:	1007883a 	mov	r3,r2
 2010974:	e0bfff17 	ldw	r2,-4(fp)
 2010978:	2085883a 	add	r2,r4,r2
 201097c:	10800204 	addi	r2,r2,8
 2010980:	10c000c5 	stb	r3,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 2010984:	e0fffd03 	ldbu	r3,-12(fp)
 2010988:	e0bfff17 	ldw	r2,-4(fp)
 201098c:	1885883a 	add	r2,r3,r2
 2010990:	10800204 	addi	r2,r2,8
 2010994:	108000c3 	ldbu	r2,3(r2)
 2010998:	10803fcc 	andi	r2,r2,255
 201099c:	1004c03a 	cmpne	r2,r2,zero
 20109a0:	10000a1e 	bne	r2,zero,20109cc <OS_EventTaskRemove+0xa8>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 20109a4:	e0bfff17 	ldw	r2,-4(fp)
 20109a8:	10800283 	ldbu	r2,10(r2)
 20109ac:	1007883a 	mov	r3,r2
 20109b0:	e0bffe17 	ldw	r2,-8(fp)
 20109b4:	10800d83 	ldbu	r2,54(r2)
 20109b8:	0084303a 	nor	r2,zero,r2
 20109bc:	1884703a 	and	r2,r3,r2
 20109c0:	1007883a 	mov	r3,r2
 20109c4:	e0bfff17 	ldw	r2,-4(fp)
 20109c8:	10c00285 	stb	r3,10(r2)
    }
}
 20109cc:	e037883a 	mov	sp,fp
 20109d0:	df000017 	ldw	fp,0(sp)
 20109d4:	dec00104 	addi	sp,sp,4
 20109d8:	f800283a 	ret

020109dc <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 20109dc:	defffa04 	addi	sp,sp,-24
 20109e0:	df000515 	stw	fp,20(sp)
 20109e4:	df000504 	addi	fp,sp,20
 20109e8:	e13ffe15 	stw	r4,-8(fp)
 20109ec:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 20109f0:	e0bffe17 	ldw	r2,-8(fp)
 20109f4:	10800d03 	ldbu	r2,52(r2)
 20109f8:	e0bffb85 	stb	r2,-18(fp)
    bity    =  ptcb->OSTCBBitY;
 20109fc:	e0bffe17 	ldw	r2,-8(fp)
 2010a00:	10800d83 	ldbu	r2,54(r2)
 2010a04:	e0bffb45 	stb	r2,-19(fp)
    bitx    =  ptcb->OSTCBBitX;
 2010a08:	e0bffe17 	ldw	r2,-8(fp)
 2010a0c:	10800d43 	ldbu	r2,53(r2)
 2010a10:	e0bffb05 	stb	r2,-20(fp)
    pevents =  pevents_multi;
 2010a14:	e0bfff17 	ldw	r2,-4(fp)
 2010a18:	e0bffd15 	stw	r2,-12(fp)
    pevent  = *pevents;
 2010a1c:	e0bffd17 	ldw	r2,-12(fp)
 2010a20:	10800017 	ldw	r2,0(r2)
 2010a24:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2010a28:	00002606 	br	2010ac4 <OS_EventTaskRemoveMulti+0xe8>
        pevent->OSEventTbl[y]  &= ~bitx;
 2010a2c:	e13ffb83 	ldbu	r4,-18(fp)
 2010a30:	e0fffb83 	ldbu	r3,-18(fp)
 2010a34:	e0bffc17 	ldw	r2,-16(fp)
 2010a38:	1885883a 	add	r2,r3,r2
 2010a3c:	10800204 	addi	r2,r2,8
 2010a40:	108000c3 	ldbu	r2,3(r2)
 2010a44:	1007883a 	mov	r3,r2
 2010a48:	e0bffb03 	ldbu	r2,-20(fp)
 2010a4c:	0084303a 	nor	r2,zero,r2
 2010a50:	1884703a 	and	r2,r3,r2
 2010a54:	1007883a 	mov	r3,r2
 2010a58:	e0bffc17 	ldw	r2,-16(fp)
 2010a5c:	2085883a 	add	r2,r4,r2
 2010a60:	10800204 	addi	r2,r2,8
 2010a64:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 2010a68:	e0fffb83 	ldbu	r3,-18(fp)
 2010a6c:	e0bffc17 	ldw	r2,-16(fp)
 2010a70:	1885883a 	add	r2,r3,r2
 2010a74:	10800204 	addi	r2,r2,8
 2010a78:	108000c3 	ldbu	r2,3(r2)
 2010a7c:	10803fcc 	andi	r2,r2,255
 2010a80:	1004c03a 	cmpne	r2,r2,zero
 2010a84:	1000091e 	bne	r2,zero,2010aac <OS_EventTaskRemoveMulti+0xd0>
            pevent->OSEventGrp &= ~bity;
 2010a88:	e0bffc17 	ldw	r2,-16(fp)
 2010a8c:	10800283 	ldbu	r2,10(r2)
 2010a90:	1007883a 	mov	r3,r2
 2010a94:	e0bffb43 	ldbu	r2,-19(fp)
 2010a98:	0084303a 	nor	r2,zero,r2
 2010a9c:	1884703a 	and	r2,r3,r2
 2010aa0:	1007883a 	mov	r3,r2
 2010aa4:	e0bffc17 	ldw	r2,-16(fp)
 2010aa8:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 2010aac:	e0bffd17 	ldw	r2,-12(fp)
 2010ab0:	10800104 	addi	r2,r2,4
 2010ab4:	e0bffd15 	stw	r2,-12(fp)
        pevent = *pevents;
 2010ab8:	e0bffd17 	ldw	r2,-12(fp)
 2010abc:	10800017 	ldw	r2,0(r2)
 2010ac0:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 2010ac4:	e0bffc17 	ldw	r2,-16(fp)
 2010ac8:	1004c03a 	cmpne	r2,r2,zero
 2010acc:	103fd71e 	bne	r2,zero,2010a2c <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 2010ad0:	e037883a 	mov	sp,fp
 2010ad4:	df000017 	ldw	fp,0(sp)
 2010ad8:	dec00104 	addi	sp,sp,4
 2010adc:	f800283a 	ret

02010ae0 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 2010ae0:	defffc04 	addi	sp,sp,-16
 2010ae4:	df000315 	stw	fp,12(sp)
 2010ae8:	df000304 	addi	fp,sp,12
 2010aec:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 2010af0:	e0bfff17 	ldw	r2,-4(fp)
 2010af4:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 2010af8:	e0bfff17 	ldw	r2,-4(fp)
 2010afc:	108002c4 	addi	r2,r2,11
 2010b00:	e0bffe15 	stw	r2,-8(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2010b04:	e03ffd05 	stb	zero,-12(fp)
 2010b08:	00000806 	br	2010b2c <OS_EventWaitListInit+0x4c>
        *ptbl++ = 0;
 2010b0c:	e0bffe17 	ldw	r2,-8(fp)
 2010b10:	10000005 	stb	zero,0(r2)
 2010b14:	e0bffe17 	ldw	r2,-8(fp)
 2010b18:	10800044 	addi	r2,r2,1
 2010b1c:	e0bffe15 	stw	r2,-8(fp)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2010b20:	e0bffd03 	ldbu	r2,-12(fp)
 2010b24:	10800044 	addi	r2,r2,1
 2010b28:	e0bffd05 	stb	r2,-12(fp)
 2010b2c:	e0bffd03 	ldbu	r2,-12(fp)
 2010b30:	108000f0 	cmpltui	r2,r2,3
 2010b34:	103ff51e 	bne	r2,zero,2010b0c <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 2010b38:	e037883a 	mov	sp,fp
 2010b3c:	df000017 	ldw	fp,0(sp)
 2010b40:	dec00104 	addi	sp,sp,4
 2010b44:	f800283a 	ret

02010b48 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 2010b48:	defffb04 	addi	sp,sp,-20
 2010b4c:	dfc00415 	stw	ra,16(sp)
 2010b50:	df000315 	stw	fp,12(sp)
 2010b54:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 2010b58:	010080f4 	movhi	r4,515
 2010b5c:	21225604 	addi	r4,r4,-30376
 2010b60:	0142d004 	movi	r5,2880
 2010b64:	2010eac0 	call	2010eac <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 2010b68:	008080f4 	movhi	r2,515
 2010b6c:	10a25604 	addi	r2,r2,-30376
 2010b70:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 2010b74:	008080f4 	movhi	r2,515
 2010b78:	10a26204 	addi	r2,r2,-30328
 2010b7c:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 2010b80:	e03fff0d 	sth	zero,-4(fp)
 2010b84:	00001306 	br	2010bd4 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2010b88:	e0bffe17 	ldw	r2,-8(fp)
 2010b8c:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 2010b90:	e0fffe17 	ldw	r3,-8(fp)
 2010b94:	e0bffd17 	ldw	r2,-12(fp)
 2010b98:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 2010b9c:	e0fffe17 	ldw	r3,-8(fp)
 2010ba0:	00800fc4 	movi	r2,63
 2010ba4:	18800385 	stb	r2,14(r3)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 2010ba8:	e0bffe17 	ldw	r2,-8(fp)
 2010bac:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 2010bb0:	e0bffe17 	ldw	r2,-8(fp)
 2010bb4:	10800c04 	addi	r2,r2,48
 2010bb8:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 2010bbc:	e0bffd17 	ldw	r2,-12(fp)
 2010bc0:	10800c04 	addi	r2,r2,48
 2010bc4:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 2010bc8:	e0bfff0b 	ldhu	r2,-4(fp)
 2010bcc:	10800044 	addi	r2,r2,1
 2010bd0:	e0bfff0d 	sth	r2,-4(fp)
 2010bd4:	e0bfff0b 	ldhu	r2,-4(fp)
 2010bd8:	10800ef0 	cmpltui	r2,r2,59
 2010bdc:	103fea1e 	bne	r2,zero,2010b88 <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 2010be0:	e0bffe17 	ldw	r2,-8(fp)
 2010be4:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 2010be8:	e0bffe17 	ldw	r2,-8(fp)
 2010bec:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 2010bf0:	e0fffe17 	ldw	r3,-8(fp)
 2010bf4:	00800fc4 	movi	r2,63
 2010bf8:	18800385 	stb	r2,14(r3)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 2010bfc:	e0bffe17 	ldw	r2,-8(fp)
 2010c00:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 2010c04:	008080f4 	movhi	r2,515
 2010c08:	10a25604 	addi	r2,r2,-30376
 2010c0c:	d0a73015 	stw	r2,-25408(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 2010c10:	e037883a 	mov	sp,fp
 2010c14:	dfc00117 	ldw	ra,4(sp)
 2010c18:	df000017 	ldw	fp,0(sp)
 2010c1c:	dec00204 	addi	sp,sp,8
 2010c20:	f800283a 	ret

02010c24 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 2010c24:	deffff04 	addi	sp,sp,-4
 2010c28:	df000015 	stw	fp,0(sp)
 2010c2c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 2010c30:	d0273315 	stw	zero,-25396(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 2010c34:	d0273105 	stb	zero,-25404(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 2010c38:	d0272305 	stb	zero,-25460(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 2010c3c:	d0272b45 	stb	zero,-25427(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 2010c40:	d0272345 	stb	zero,-25459(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 2010c44:	d0272815 	stw	zero,-25440(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 2010c48:	d0272415 	stw	zero,-25456(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 2010c4c:	d0273615 	stw	zero,-25384(gp)
    OSIdleCtrMax  = 0L;
 2010c50:	d0272915 	stw	zero,-25436(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 2010c54:	d0273505 	stb	zero,-25388(gp)
#endif
}
 2010c58:	e037883a 	mov	sp,fp
 2010c5c:	df000017 	ldw	fp,0(sp)
 2010c60:	dec00104 	addi	sp,sp,4
 2010c64:	f800283a 	ret

02010c68 <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 2010c68:	defffd04 	addi	sp,sp,-12
 2010c6c:	df000215 	stw	fp,8(sp)
 2010c70:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 2010c74:	d0272f05 	stb	zero,-25412(gp)
    prdytbl       = &OSRdyTbl[0];
 2010c78:	d0a72f44 	addi	r2,gp,-25411
 2010c7c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2010c80:	e03fff05 	stb	zero,-4(fp)
 2010c84:	00000806 	br	2010ca8 <OS_InitRdyList+0x40>
        *prdytbl++ = 0;
 2010c88:	e0bffe17 	ldw	r2,-8(fp)
 2010c8c:	10000005 	stb	zero,0(r2)
 2010c90:	e0bffe17 	ldw	r2,-8(fp)
 2010c94:	10800044 	addi	r2,r2,1
 2010c98:	e0bffe15 	stw	r2,-8(fp)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 2010c9c:	e0bfff03 	ldbu	r2,-4(fp)
 2010ca0:	10800044 	addi	r2,r2,1
 2010ca4:	e0bfff05 	stb	r2,-4(fp)
 2010ca8:	e0bfff03 	ldbu	r2,-4(fp)
 2010cac:	108000f0 	cmpltui	r2,r2,3
 2010cb0:	103ff51e 	bne	r2,zero,2010c88 <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 2010cb4:	d0272545 	stb	zero,-25451(gp)
    OSPrioHighRdy = 0;
 2010cb8:	d0272505 	stb	zero,-25452(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 2010cbc:	d0272d15 	stw	zero,-25420(gp)
    OSTCBCur      = (OS_TCB *)0;
 2010cc0:	d0273215 	stw	zero,-25400(gp)
}
 2010cc4:	e037883a 	mov	sp,fp
 2010cc8:	df000017 	ldw	fp,0(sp)
 2010ccc:	dec00104 	addi	sp,sp,4
 2010cd0:	f800283a 	ret

02010cd4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 2010cd4:	defff804 	addi	sp,sp,-32
 2010cd8:	dfc00715 	stw	ra,28(sp)
 2010cdc:	df000615 	stw	fp,24(sp)
 2010ce0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 2010ce4:	018080f4 	movhi	r6,515
 2010ce8:	31a25504 	addi	r6,r6,-30380
 2010cec:	00bfffd4 	movui	r2,65535
 2010cf0:	d8800015 	stw	r2,0(sp)
 2010cf4:	008080f4 	movhi	r2,515
 2010cf8:	10a05604 	addi	r2,r2,-32424
 2010cfc:	d8800115 	stw	r2,4(sp)
 2010d00:	00808004 	movi	r2,512
 2010d04:	d8800215 	stw	r2,8(sp)
 2010d08:	d8000315 	stw	zero,12(sp)
 2010d0c:	008000c4 	movi	r2,3
 2010d10:	d8800415 	stw	r2,16(sp)
 2010d14:	01008074 	movhi	r4,513
 2010d18:	21046204 	addi	r4,r4,4488
 2010d1c:	000b883a 	mov	r5,zero
 2010d20:	01c00504 	movi	r7,20
 2010d24:	2015f6c0 	call	2015f6c <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 2010d28:	014080b4 	movhi	r5,514
 2010d2c:	296a2c04 	addi	r5,r5,-22352
 2010d30:	01000504 	movi	r4,20
 2010d34:	e1bfff04 	addi	r6,fp,-4
 2010d38:	20168a00 	call	20168a0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 2010d3c:	e037883a 	mov	sp,fp
 2010d40:	dfc00117 	ldw	ra,4(sp)
 2010d44:	df000017 	ldw	fp,0(sp)
 2010d48:	dec00204 	addi	sp,sp,8
 2010d4c:	f800283a 	ret

02010d50 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 2010d50:	defff804 	addi	sp,sp,-32
 2010d54:	dfc00715 	stw	ra,28(sp)
 2010d58:	df000615 	stw	fp,24(sp)
 2010d5c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 2010d60:	018080b4 	movhi	r6,514
 2010d64:	319fdd04 	addi	r6,r6,32628
 2010d68:	00bfff94 	movui	r2,65534
 2010d6c:	d8800015 	stw	r2,0(sp)
 2010d70:	008080b4 	movhi	r2,514
 2010d74:	109dde04 	addi	r2,r2,30584
 2010d78:	d8800115 	stw	r2,4(sp)
 2010d7c:	00808004 	movi	r2,512
 2010d80:	d8800215 	stw	r2,8(sp)
 2010d84:	d8000315 	stw	zero,12(sp)
 2010d88:	008000c4 	movi	r2,3
 2010d8c:	d8800415 	stw	r2,16(sp)
 2010d90:	01008074 	movhi	r4,513
 2010d94:	21047904 	addi	r4,r4,4580
 2010d98:	000b883a 	mov	r5,zero
 2010d9c:	01c004c4 	movi	r7,19
 2010da0:	2015f6c0 	call	2015f6c <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 2010da4:	014080b4 	movhi	r5,514
 2010da8:	296a3004 	addi	r5,r5,-22336
 2010dac:	010004c4 	movi	r4,19
 2010db0:	e1bfff04 	addi	r6,fp,-4
 2010db4:	20168a00 	call	20168a0 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 2010db8:	e037883a 	mov	sp,fp
 2010dbc:	dfc00117 	ldw	ra,4(sp)
 2010dc0:	df000017 	ldw	fp,0(sp)
 2010dc4:	dec00204 	addi	sp,sp,8
 2010dc8:	f800283a 	ret

02010dcc <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 2010dcc:	defffb04 	addi	sp,sp,-20
 2010dd0:	dfc00415 	stw	ra,16(sp)
 2010dd4:	df000315 	stw	fp,12(sp)
 2010dd8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 2010ddc:	010080f4 	movhi	r4,515
 2010de0:	21252604 	addi	r4,r4,-27496
 2010de4:	01414404 	movi	r5,1296
 2010de8:	2010eac0 	call	2010eac <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 2010dec:	010080f4 	movhi	r4,515
 2010df0:	21266a04 	addi	r4,r4,-26200
 2010df4:	01401504 	movi	r5,84
 2010df8:	2010eac0 	call	2010eac <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 2010dfc:	008080f4 	movhi	r2,515
 2010e00:	10a52604 	addi	r2,r2,-27496
 2010e04:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 2010e08:	008080f4 	movhi	r2,515
 2010e0c:	10a54104 	addi	r2,r2,-27388
 2010e10:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2010e14:	e03fff05 	stb	zero,-4(fp)
 2010e18:	00001106 	br	2010e60 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 2010e1c:	e0fffe17 	ldw	r3,-8(fp)
 2010e20:	e0bffd17 	ldw	r2,-12(fp)
 2010e24:	18800515 	stw	r2,20(r3)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 2010e28:	e0fffe17 	ldw	r3,-8(fp)
 2010e2c:	00800fc4 	movi	r2,63
 2010e30:	18801305 	stb	r2,76(r3)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2010e34:	e0bffe17 	ldw	r2,-8(fp)
 2010e38:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 2010e3c:	e0bffe17 	ldw	r2,-8(fp)
 2010e40:	10801b04 	addi	r2,r2,108
 2010e44:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 2010e48:	e0bffd17 	ldw	r2,-12(fp)
 2010e4c:	10801b04 	addi	r2,r2,108
 2010e50:	e0bffd15 	stw	r2,-12(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 2010e54:	e0bfff03 	ldbu	r2,-4(fp)
 2010e58:	10800044 	addi	r2,r2,1
 2010e5c:	e0bfff05 	stb	r2,-4(fp)
 2010e60:	e0bfff03 	ldbu	r2,-4(fp)
 2010e64:	108002f0 	cmpltui	r2,r2,11
 2010e68:	103fec1e 	bne	r2,zero,2010e1c <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 2010e6c:	e0bffe17 	ldw	r2,-8(fp)
 2010e70:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 2010e74:	e0fffe17 	ldw	r3,-8(fp)
 2010e78:	00800fc4 	movi	r2,63
 2010e7c:	18801305 	stb	r2,76(r3)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 2010e80:	e0bffe17 	ldw	r2,-8(fp)
 2010e84:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 2010e88:	d0272615 	stw	zero,-25448(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 2010e8c:	008080f4 	movhi	r2,515
 2010e90:	10a52604 	addi	r2,r2,-27496
 2010e94:	d0a72a15 	stw	r2,-25432(gp)
}
 2010e98:	e037883a 	mov	sp,fp
 2010e9c:	dfc00117 	ldw	ra,4(sp)
 2010ea0:	df000017 	ldw	fp,0(sp)
 2010ea4:	dec00204 	addi	sp,sp,8
 2010ea8:	f800283a 	ret

02010eac <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 2010eac:	defffd04 	addi	sp,sp,-12
 2010eb0:	df000215 	stw	fp,8(sp)
 2010eb4:	df000204 	addi	fp,sp,8
 2010eb8:	e13ffe15 	stw	r4,-8(fp)
 2010ebc:	e17fff0d 	sth	r5,-4(fp)
    while (size > 0) {
 2010ec0:	00000806 	br	2010ee4 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 2010ec4:	e0bffe17 	ldw	r2,-8(fp)
 2010ec8:	10000005 	stb	zero,0(r2)
 2010ecc:	e0bffe17 	ldw	r2,-8(fp)
 2010ed0:	10800044 	addi	r2,r2,1
 2010ed4:	e0bffe15 	stw	r2,-8(fp)
        size--;
 2010ed8:	e0bfff0b 	ldhu	r2,-4(fp)
 2010edc:	10bfffc4 	addi	r2,r2,-1
 2010ee0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 2010ee4:	e0bfff0b 	ldhu	r2,-4(fp)
 2010ee8:	1004c03a 	cmpne	r2,r2,zero
 2010eec:	103ff51e 	bne	r2,zero,2010ec4 <OS_MemClr+0x18>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 2010ef0:	e037883a 	mov	sp,fp
 2010ef4:	df000017 	ldw	fp,0(sp)
 2010ef8:	dec00104 	addi	sp,sp,4
 2010efc:	f800283a 	ret

02010f00 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 2010f00:	defffc04 	addi	sp,sp,-16
 2010f04:	df000315 	stw	fp,12(sp)
 2010f08:	df000304 	addi	fp,sp,12
 2010f0c:	e13ffd15 	stw	r4,-12(fp)
 2010f10:	e17ffe15 	stw	r5,-8(fp)
 2010f14:	e1bfff0d 	sth	r6,-4(fp)
    while (size > 0) {
 2010f18:	00000d06 	br	2010f50 <OS_MemCopy+0x50>
        *pdest++ = *psrc++;
 2010f1c:	e0bffe17 	ldw	r2,-8(fp)
 2010f20:	10c00003 	ldbu	r3,0(r2)
 2010f24:	e0bffd17 	ldw	r2,-12(fp)
 2010f28:	10c00005 	stb	r3,0(r2)
 2010f2c:	e0bffd17 	ldw	r2,-12(fp)
 2010f30:	10800044 	addi	r2,r2,1
 2010f34:	e0bffd15 	stw	r2,-12(fp)
 2010f38:	e0bffe17 	ldw	r2,-8(fp)
 2010f3c:	10800044 	addi	r2,r2,1
 2010f40:	e0bffe15 	stw	r2,-8(fp)
        size--;
 2010f44:	e0bfff0b 	ldhu	r2,-4(fp)
 2010f48:	10bfffc4 	addi	r2,r2,-1
 2010f4c:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 2010f50:	e0bfff0b 	ldhu	r2,-4(fp)
 2010f54:	1004c03a 	cmpne	r2,r2,zero
 2010f58:	103ff01e 	bne	r2,zero,2010f1c <OS_MemCopy+0x1c>
        *pdest++ = *psrc++;
        size--;
    }
}
 2010f5c:	e037883a 	mov	sp,fp
 2010f60:	df000017 	ldw	fp,0(sp)
 2010f64:	dec00104 	addi	sp,sp,4
 2010f68:	f800283a 	ret

02010f6c <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 2010f6c:	defffb04 	addi	sp,sp,-20
 2010f70:	dfc00415 	stw	ra,16(sp)
 2010f74:	df000315 	stw	fp,12(sp)
 2010f78:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2010f7c:	e03fff15 	stw	zero,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2010f80:	0005303a 	rdctl	r2,status
 2010f84:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2010f88:	e0fffe17 	ldw	r3,-8(fp)
 2010f8c:	00bfff84 	movi	r2,-2
 2010f90:	1884703a 	and	r2,r3,r2
 2010f94:	1001703a 	wrctl	status,r2
  
  return context;
 2010f98:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 2010f9c:	e0bfff15 	stw	r2,-4(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 2010fa0:	d0a73103 	ldbu	r2,-25404(gp)
 2010fa4:	10803fcc 	andi	r2,r2,255
 2010fa8:	1004c03a 	cmpne	r2,r2,zero
 2010fac:	10001b1e 	bne	r2,zero,201101c <OS_Sched+0xb0>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 2010fb0:	d0a72303 	ldbu	r2,-25460(gp)
 2010fb4:	10803fcc 	andi	r2,r2,255
 2010fb8:	1004c03a 	cmpne	r2,r2,zero
 2010fbc:	1000171e 	bne	r2,zero,201101c <OS_Sched+0xb0>
            OS_SchedNew();
 2010fc0:	20110400 	call	2011040 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 2010fc4:	d0a72503 	ldbu	r2,-25452(gp)
 2010fc8:	d0e72543 	ldbu	r3,-25451(gp)
 2010fcc:	11003fcc 	andi	r4,r2,255
 2010fd0:	18803fcc 	andi	r2,r3,255
 2010fd4:	20801126 	beq	r4,r2,201101c <OS_Sched+0xb0>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 2010fd8:	d0a72503 	ldbu	r2,-25452(gp)
 2010fdc:	10803fcc 	andi	r2,r2,255
 2010fe0:	00c080f4 	movhi	r3,515
 2010fe4:	18e66a04 	addi	r3,r3,-26200
 2010fe8:	1085883a 	add	r2,r2,r2
 2010fec:	1085883a 	add	r2,r2,r2
 2010ff0:	10c5883a 	add	r2,r2,r3
 2010ff4:	10800017 	ldw	r2,0(r2)
 2010ff8:	d0a72d15 	stw	r2,-25420(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 2010ffc:	d0e72d17 	ldw	r3,-25420(gp)
 2011000:	18800e17 	ldw	r2,56(r3)
 2011004:	10800044 	addi	r2,r2,1
 2011008:	18800e15 	stw	r2,56(r3)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 201100c:	d0a72817 	ldw	r2,-25440(gp)
 2011010:	10800044 	addi	r2,r2,1
 2011014:	d0a72815 	stw	r2,-25440(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 2011018:	20194e40 	call	20194e4 <OSCtxSw>
 201101c:	e0bfff17 	ldw	r2,-4(fp)
 2011020:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011024:	e0bffd17 	ldw	r2,-12(fp)
 2011028:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 201102c:	e037883a 	mov	sp,fp
 2011030:	dfc00117 	ldw	ra,4(sp)
 2011034:	df000017 	ldw	fp,0(sp)
 2011038:	dec00204 	addi	sp,sp,8
 201103c:	f800283a 	ret

02011040 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 2011040:	defffe04 	addi	sp,sp,-8
 2011044:	df000115 	stw	fp,4(sp)
 2011048:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 201104c:	d0a72f03 	ldbu	r2,-25412(gp)
 2011050:	10c03fcc 	andi	r3,r2,255
 2011054:	008080b4 	movhi	r2,514
 2011058:	10a9ec04 	addi	r2,r2,-22608
 201105c:	10c5883a 	add	r2,r2,r3
 2011060:	10800003 	ldbu	r2,0(r2)
 2011064:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 2011068:	e0bfff03 	ldbu	r2,-4(fp)
 201106c:	100490fa 	slli	r2,r2,3
 2011070:	1009883a 	mov	r4,r2
 2011074:	e0ffff03 	ldbu	r3,-4(fp)
 2011078:	d0a72f44 	addi	r2,gp,-25411
 201107c:	1885883a 	add	r2,r3,r2
 2011080:	10800003 	ldbu	r2,0(r2)
 2011084:	10c03fcc 	andi	r3,r2,255
 2011088:	008080b4 	movhi	r2,514
 201108c:	10a9ec04 	addi	r2,r2,-22608
 2011090:	10c5883a 	add	r2,r2,r3
 2011094:	10800003 	ldbu	r2,0(r2)
 2011098:	2085883a 	add	r2,r4,r2
 201109c:	d0a72505 	stb	r2,-25452(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 20110a0:	e037883a 	mov	sp,fp
 20110a4:	df000017 	ldw	fp,0(sp)
 20110a8:	dec00104 	addi	sp,sp,4
 20110ac:	f800283a 	ret

020110b0 <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 20110b0:	defffc04 	addi	sp,sp,-16
 20110b4:	df000315 	stw	fp,12(sp)
 20110b8:	df000304 	addi	fp,sp,12
 20110bc:	e13ffe15 	stw	r4,-8(fp)
 20110c0:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 20110c4:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 20110c8:	00000d06 	br	2011100 <OS_StrCopy+0x50>
        *pdest++ = *psrc++;
 20110cc:	e0bfff17 	ldw	r2,-4(fp)
 20110d0:	10c00003 	ldbu	r3,0(r2)
 20110d4:	e0bffe17 	ldw	r2,-8(fp)
 20110d8:	10c00005 	stb	r3,0(r2)
 20110dc:	e0bffe17 	ldw	r2,-8(fp)
 20110e0:	10800044 	addi	r2,r2,1
 20110e4:	e0bffe15 	stw	r2,-8(fp)
 20110e8:	e0bfff17 	ldw	r2,-4(fp)
 20110ec:	10800044 	addi	r2,r2,1
 20110f0:	e0bfff15 	stw	r2,-4(fp)
        len++;
 20110f4:	e0bffd03 	ldbu	r2,-12(fp)
 20110f8:	10800044 	addi	r2,r2,1
 20110fc:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2011100:	e0bfff17 	ldw	r2,-4(fp)
 2011104:	10800003 	ldbu	r2,0(r2)
 2011108:	10803fcc 	andi	r2,r2,255
 201110c:	1004c03a 	cmpne	r2,r2,zero
 2011110:	103fee1e 	bne	r2,zero,20110cc <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 2011114:	e0bffe17 	ldw	r2,-8(fp)
 2011118:	10000005 	stb	zero,0(r2)
    return (len);
 201111c:	e0bffd03 	ldbu	r2,-12(fp)
}
 2011120:	e037883a 	mov	sp,fp
 2011124:	df000017 	ldw	fp,0(sp)
 2011128:	dec00104 	addi	sp,sp,4
 201112c:	f800283a 	ret

02011130 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 2011130:	defffd04 	addi	sp,sp,-12
 2011134:	df000215 	stw	fp,8(sp)
 2011138:	df000204 	addi	fp,sp,8
 201113c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 2011140:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 2011144:	00000606 	br	2011160 <OS_StrLen+0x30>
        psrc++;
 2011148:	e0bfff17 	ldw	r2,-4(fp)
 201114c:	10800044 	addi	r2,r2,1
 2011150:	e0bfff15 	stw	r2,-4(fp)
        len++;
 2011154:	e0bffe03 	ldbu	r2,-8(fp)
 2011158:	10800044 	addi	r2,r2,1
 201115c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 2011160:	e0bfff17 	ldw	r2,-4(fp)
 2011164:	10800003 	ldbu	r2,0(r2)
 2011168:	10803fcc 	andi	r2,r2,255
 201116c:	1004c03a 	cmpne	r2,r2,zero
 2011170:	103ff51e 	bne	r2,zero,2011148 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 2011174:	e0bffe03 	ldbu	r2,-8(fp)
}
 2011178:	e037883a 	mov	sp,fp
 201117c:	df000017 	ldw	fp,0(sp)
 2011180:	dec00104 	addi	sp,sp,4
 2011184:	f800283a 	ret

02011188 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 2011188:	defffa04 	addi	sp,sp,-24
 201118c:	dfc00515 	stw	ra,20(sp)
 2011190:	df000415 	stw	fp,16(sp)
 2011194:	df000404 	addi	fp,sp,16
 2011198:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201119c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20111a0:	0005303a 	rdctl	r2,status
 20111a4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20111a8:	e0fffd17 	ldw	r3,-12(fp)
 20111ac:	00bfff84 	movi	r2,-2
 20111b0:	1884703a 	and	r2,r3,r2
 20111b4:	1001703a 	wrctl	status,r2
  
  return context;
 20111b8:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 20111bc:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtr++;
 20111c0:	d0a72417 	ldw	r2,-25456(gp)
 20111c4:	10800044 	addi	r2,r2,1
 20111c8:	d0a72415 	stw	r2,-25456(gp)
 20111cc:	e0bffe17 	ldw	r2,-8(fp)
 20111d0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20111d4:	e0bffc17 	ldw	r2,-16(fp)
 20111d8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 20111dc:	20199900 	call	2019990 <OSTaskIdleHook>
    }
 20111e0:	003fef06 	br	20111a0 <OS_TaskIdle+0x18>

020111e4 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 20111e4:	defffa04 	addi	sp,sp,-24
 20111e8:	dfc00515 	stw	ra,20(sp)
 20111ec:	df000415 	stw	fp,16(sp)
 20111f0:	df000404 	addi	fp,sp,16
 20111f4:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20111f8:	e03ffe15 	stw	zero,-8(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 20111fc:	00000206 	br	2011208 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 2011200:	01003204 	movi	r4,200
 2011204:	20172640 	call	2017264 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 2011208:	d0a73503 	ldbu	r2,-25388(gp)
 201120c:	10803fcc 	andi	r2,r2,255
 2011210:	1005003a 	cmpeq	r2,r2,zero
 2011214:	103ffa1e 	bne	r2,zero,2011200 <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 2011218:	d1272917 	ldw	r4,-25436(gp)
 201121c:	01401904 	movi	r5,100
 2011220:	200329c0 	call	200329c <__udivsi3>
 2011224:	d0a72915 	stw	r2,-25436(gp)
    if (OSIdleCtrMax == 0L) {
 2011228:	d0a72917 	ldw	r2,-25436(gp)
 201122c:	1004c03a 	cmpne	r2,r2,zero
 2011230:	1000031e 	bne	r2,zero,2011240 <OS_TaskStat+0x5c>
        OSCPUUsage = 0;
 2011234:	d0272b05 	stb	zero,-25428(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 2011238:	01003fc4 	movi	r4,255
 201123c:	2016e780 	call	2016e78 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011240:	0005303a 	rdctl	r2,status
 2011244:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011248:	e0fffd17 	ldw	r3,-12(fp)
 201124c:	00bfff84 	movi	r2,-2
 2011250:	1884703a 	and	r2,r3,r2
 2011254:	1001703a 	wrctl	status,r2
  
  return context;
 2011258:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 201125c:	e0bffe15 	stw	r2,-8(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 2011260:	d0a72417 	ldw	r2,-25456(gp)
 2011264:	d0a73615 	stw	r2,-25384(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 2011268:	d0272415 	stw	zero,-25456(gp)
 201126c:	e0bffe17 	ldw	r2,-8(fp)
 2011270:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011274:	e0bffc17 	ldw	r2,-16(fp)
 2011278:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 201127c:	d1273617 	ldw	r4,-25384(gp)
 2011280:	d1672917 	ldw	r5,-25436(gp)
 2011284:	200329c0 	call	200329c <__udivsi3>
 2011288:	1007883a 	mov	r3,r2
 201128c:	00801904 	movi	r2,100
 2011290:	10c5c83a 	sub	r2,r2,r3
 2011294:	d0a72b05 	stb	r2,-25428(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 2011298:	20199200 	call	2019920 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 201129c:	20112ac0 	call	20112ac <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 20112a0:	01001904 	movi	r4,100
 20112a4:	20172640 	call	2017264 <OSTimeDly>
    }
 20112a8:	003fe506 	br	2011240 <OS_TaskStat+0x5c>

020112ac <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 20112ac:	defffa04 	addi	sp,sp,-24
 20112b0:	dfc00515 	stw	ra,20(sp)
 20112b4:	df000415 	stw	fp,16(sp)
 20112b8:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 20112bc:	e03ffc05 	stb	zero,-16(fp)
 20112c0:	00002406 	br	2011354 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 20112c4:	e13ffc03 	ldbu	r4,-16(fp)
 20112c8:	e17ffe04 	addi	r5,fp,-8
 20112cc:	2016c7c0 	call	2016c7c <OSTaskStkChk>
 20112d0:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 20112d4:	e0bffc43 	ldbu	r2,-15(fp)
 20112d8:	1004c03a 	cmpne	r2,r2,zero
 20112dc:	10001a1e 	bne	r2,zero,2011348 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 20112e0:	e0bffc03 	ldbu	r2,-16(fp)
 20112e4:	00c080f4 	movhi	r3,515
 20112e8:	18e66a04 	addi	r3,r3,-26200
 20112ec:	1085883a 	add	r2,r2,r2
 20112f0:	1085883a 	add	r2,r2,r2
 20112f4:	10c5883a 	add	r2,r2,r3
 20112f8:	10800017 	ldw	r2,0(r2)
 20112fc:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 2011300:	e0bffd17 	ldw	r2,-12(fp)
 2011304:	1005003a 	cmpeq	r2,r2,zero
 2011308:	10000f1e 	bne	r2,zero,2011348 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 201130c:	e0bffd17 	ldw	r2,-12(fp)
 2011310:	10800060 	cmpeqi	r2,r2,1
 2011314:	10000c1e 	bne	r2,zero,2011348 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 2011318:	e0bffd17 	ldw	r2,-12(fp)
 201131c:	10c00217 	ldw	r3,8(r2)
 2011320:	e0bffd17 	ldw	r2,-12(fp)
 2011324:	10800317 	ldw	r2,12(r2)
 2011328:	1085883a 	add	r2,r2,r2
 201132c:	1085883a 	add	r2,r2,r2
 2011330:	1887883a 	add	r3,r3,r2
 2011334:	e0bffd17 	ldw	r2,-12(fp)
 2011338:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 201133c:	e0ffff17 	ldw	r3,-4(fp)
 2011340:	e0bffd17 	ldw	r2,-12(fp)
 2011344:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 2011348:	e0bffc03 	ldbu	r2,-16(fp)
 201134c:	10800044 	addi	r2,r2,1
 2011350:	e0bffc05 	stb	r2,-16(fp)
 2011354:	e0bffc03 	ldbu	r2,-16(fp)
 2011358:	10800570 	cmpltui	r2,r2,21
 201135c:	103fd91e 	bne	r2,zero,20112c4 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 2011360:	e037883a 	mov	sp,fp
 2011364:	dfc00117 	ldw	ra,4(sp)
 2011368:	df000017 	ldw	fp,0(sp)
 201136c:	dec00204 	addi	sp,sp,8
 2011370:	f800283a 	ret

02011374 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 2011374:	defff104 	addi	sp,sp,-60
 2011378:	dfc00e15 	stw	ra,56(sp)
 201137c:	df000d15 	stw	fp,52(sp)
 2011380:	df000d04 	addi	fp,sp,52
 2011384:	e17ffb15 	stw	r5,-20(fp)
 2011388:	e1bffc15 	stw	r6,-16(fp)
 201138c:	e0800417 	ldw	r2,16(fp)
 2011390:	e13ffa05 	stb	r4,-24(fp)
 2011394:	e1fffd0d 	sth	r7,-12(fp)
 2011398:	e0bffe0d 	sth	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 201139c:	e03ff815 	stw	zero,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20113a0:	0005303a 	rdctl	r2,status
 20113a4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20113a8:	e0fff717 	ldw	r3,-36(fp)
 20113ac:	00bfff84 	movi	r2,-2
 20113b0:	1884703a 	and	r2,r3,r2
 20113b4:	1001703a 	wrctl	status,r2
  
  return context;
 20113b8:	e0bff717 	ldw	r2,-36(fp)
#endif



    OS_ENTER_CRITICAL();
 20113bc:	e0bff815 	stw	r2,-32(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 20113c0:	d0a72a17 	ldw	r2,-25432(gp)
 20113c4:	e0bff915 	stw	r2,-28(fp)
    if (ptcb != (OS_TCB *)0) {
 20113c8:	e0bff917 	ldw	r2,-28(fp)
 20113cc:	1005003a 	cmpeq	r2,r2,zero
 20113d0:	1000941e 	bne	r2,zero,2011624 <OS_TCBInit+0x2b0>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 20113d4:	e0bff917 	ldw	r2,-28(fp)
 20113d8:	10800517 	ldw	r2,20(r2)
 20113dc:	d0a72a15 	stw	r2,-25432(gp)
 20113e0:	e0bff817 	ldw	r2,-32(fp)
 20113e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20113e8:	e0bff617 	ldw	r2,-40(fp)
 20113ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 20113f0:	e0fff917 	ldw	r3,-28(fp)
 20113f4:	e0bffb17 	ldw	r2,-20(fp)
 20113f8:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 20113fc:	e0fff917 	ldw	r3,-28(fp)
 2011400:	e0bffa03 	ldbu	r2,-24(fp)
 2011404:	18800c85 	stb	r2,50(r3)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 2011408:	e0bff917 	ldw	r2,-28(fp)
 201140c:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 2011410:	e0bff917 	ldw	r2,-28(fp)
 2011414:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 2011418:	e0bff917 	ldw	r2,-28(fp)
 201141c:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 2011420:	e0fff917 	ldw	r3,-28(fp)
 2011424:	e0800317 	ldw	r2,12(fp)
 2011428:	18800115 	stw	r2,4(r3)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 201142c:	e0fff917 	ldw	r3,-28(fp)
 2011430:	e0800217 	ldw	r2,8(fp)
 2011434:	18800315 	stw	r2,12(r3)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 2011438:	e0fff917 	ldw	r3,-28(fp)
 201143c:	e0bffc17 	ldw	r2,-16(fp)
 2011440:	18800215 	stw	r2,8(r3)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 2011444:	e0fff917 	ldw	r3,-28(fp)
 2011448:	e0bffe0b 	ldhu	r2,-8(fp)
 201144c:	1880040d 	sth	r2,16(r3)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 2011450:	e0fff917 	ldw	r3,-28(fp)
 2011454:	e0bffd0b 	ldhu	r2,-12(fp)
 2011458:	1880048d 	sth	r2,18(r3)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 201145c:	e0bff917 	ldw	r2,-28(fp)
 2011460:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 2011464:	e0bffa03 	ldbu	r2,-24(fp)
 2011468:	1004d0fa 	srli	r2,r2,3
 201146c:	1007883a 	mov	r3,r2
 2011470:	e0bff917 	ldw	r2,-28(fp)
 2011474:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 2011478:	e0bffa03 	ldbu	r2,-24(fp)
 201147c:	108001cc 	andi	r2,r2,7
 2011480:	1007883a 	mov	r3,r2
 2011484:	e0bff917 	ldw	r2,-28(fp)
 2011488:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 201148c:	e0bff917 	ldw	r2,-28(fp)
 2011490:	10800d03 	ldbu	r2,52(r2)
 2011494:	10c03fcc 	andi	r3,r2,255
 2011498:	00800044 	movi	r2,1
 201149c:	10c4983a 	sll	r2,r2,r3
 20114a0:	1007883a 	mov	r3,r2
 20114a4:	e0bff917 	ldw	r2,-28(fp)
 20114a8:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 20114ac:	e0bff917 	ldw	r2,-28(fp)
 20114b0:	10800cc3 	ldbu	r2,51(r2)
 20114b4:	10c03fcc 	andi	r3,r2,255
 20114b8:	00800044 	movi	r2,1
 20114bc:	10c4983a 	sll	r2,r2,r3
 20114c0:	1007883a 	mov	r3,r2
 20114c4:	e0bff917 	ldw	r2,-28(fp)
 20114c8:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 20114cc:	e0bff917 	ldw	r2,-28(fp)
 20114d0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 20114d4:	e0bff917 	ldw	r2,-28(fp)
 20114d8:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 20114dc:	e0bff917 	ldw	r2,-28(fp)
 20114e0:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 20114e4:	e0bff917 	ldw	r2,-28(fp)
 20114e8:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 20114ec:	e0bff917 	ldw	r2,-28(fp)
 20114f0:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 20114f4:	e0bff917 	ldw	r2,-28(fp)
 20114f8:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 20114fc:	e0bff917 	ldw	r2,-28(fp)
 2011500:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 2011504:	e0bff917 	ldw	r2,-28(fp)
 2011508:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 201150c:	e0bff917 	ldw	r2,-28(fp)
 2011510:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 2011514:	e0fff917 	ldw	r3,-28(fp)
 2011518:	00800fc4 	movi	r2,63
 201151c:	18801305 	stb	r2,76(r3)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2011520:	e0bff917 	ldw	r2,-28(fp)
 2011524:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 2011528:	e13ff917 	ldw	r4,-28(fp)
 201152c:	20199ac0 	call	20199ac <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 2011530:	e13ff917 	ldw	r4,-28(fp)
 2011534:	20198c40 	call	20198c4 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011538:	0005303a 	rdctl	r2,status
 201153c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011540:	e0fff517 	ldw	r3,-44(fp)
 2011544:	00bfff84 	movi	r2,-2
 2011548:	1884703a 	and	r2,r3,r2
 201154c:	1001703a 	wrctl	status,r2
  
  return context;
 2011550:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 2011554:	e0bff815 	stw	r2,-32(fp)
        OSTCBPrioTbl[prio] = ptcb;
 2011558:	e0bffa03 	ldbu	r2,-24(fp)
 201155c:	00c080f4 	movhi	r3,515
 2011560:	18e66a04 	addi	r3,r3,-26200
 2011564:	1085883a 	add	r2,r2,r2
 2011568:	1085883a 	add	r2,r2,r2
 201156c:	10c7883a 	add	r3,r2,r3
 2011570:	e0bff917 	ldw	r2,-28(fp)
 2011574:	18800015 	stw	r2,0(r3)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 2011578:	d0e72617 	ldw	r3,-25448(gp)
 201157c:	e0bff917 	ldw	r2,-28(fp)
 2011580:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 2011584:	e0bff917 	ldw	r2,-28(fp)
 2011588:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 201158c:	d0a72617 	ldw	r2,-25448(gp)
 2011590:	1005003a 	cmpeq	r2,r2,zero
 2011594:	1000031e 	bne	r2,zero,20115a4 <OS_TCBInit+0x230>
            OSTCBList->OSTCBPrev = ptcb;
 2011598:	d0e72617 	ldw	r3,-25448(gp)
 201159c:	e0bff917 	ldw	r2,-28(fp)
 20115a0:	18800615 	stw	r2,24(r3)
        }
        OSTCBList               = ptcb;
 20115a4:	e0bff917 	ldw	r2,-28(fp)
 20115a8:	d0a72615 	stw	r2,-25448(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 20115ac:	e0bff917 	ldw	r2,-28(fp)
 20115b0:	10c00d83 	ldbu	r3,54(r2)
 20115b4:	d0a72f03 	ldbu	r2,-25412(gp)
 20115b8:	1884b03a 	or	r2,r3,r2
 20115bc:	d0a72f05 	stb	r2,-25412(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 20115c0:	e0bff917 	ldw	r2,-28(fp)
 20115c4:	10800d03 	ldbu	r2,52(r2)
 20115c8:	11003fcc 	andi	r4,r2,255
 20115cc:	e0bff917 	ldw	r2,-28(fp)
 20115d0:	10800d03 	ldbu	r2,52(r2)
 20115d4:	10c03fcc 	andi	r3,r2,255
 20115d8:	d0a72f44 	addi	r2,gp,-25411
 20115dc:	1885883a 	add	r2,r3,r2
 20115e0:	10c00003 	ldbu	r3,0(r2)
 20115e4:	e0bff917 	ldw	r2,-28(fp)
 20115e8:	10800d43 	ldbu	r2,53(r2)
 20115ec:	1884b03a 	or	r2,r3,r2
 20115f0:	1007883a 	mov	r3,r2
 20115f4:	d0a72f44 	addi	r2,gp,-25411
 20115f8:	2085883a 	add	r2,r4,r2
 20115fc:	10c00005 	stb	r3,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 2011600:	d0a72b43 	ldbu	r2,-25427(gp)
 2011604:	10800044 	addi	r2,r2,1
 2011608:	d0a72b45 	stb	r2,-25427(gp)
 201160c:	e0bff817 	ldw	r2,-32(fp)
 2011610:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011614:	e0bff417 	ldw	r2,-48(fp)
 2011618:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 201161c:	e03fff15 	stw	zero,-4(fp)
 2011620:	00000606 	br	201163c <OS_TCBInit+0x2c8>
 2011624:	e0bff817 	ldw	r2,-32(fp)
 2011628:	e0bff315 	stw	r2,-52(fp)
 201162c:	e0bff317 	ldw	r2,-52(fp)
 2011630:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 2011634:	00801084 	movi	r2,66
 2011638:	e0bfff15 	stw	r2,-4(fp)
 201163c:	e0bfff17 	ldw	r2,-4(fp)
}
 2011640:	e037883a 	mov	sp,fp
 2011644:	dfc00117 	ldw	ra,4(sp)
 2011648:	df000017 	ldw	fp,0(sp)
 201164c:	dec00204 	addi	sp,sp,8
 2011650:	f800283a 	ret

02011654 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 2011654:	defffe04 	addi	sp,sp,-8
 2011658:	df000115 	stw	fp,4(sp)
 201165c:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 2011660:	d0a01204 	addi	r2,gp,-32696
 2011664:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 2011668:	d0a01304 	addi	r2,gp,-32692
 201166c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 2011670:	d0a01484 	addi	r2,gp,-32686
 2011674:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 2011678:	d0a01504 	addi	r2,gp,-32684
 201167c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 2011680:	d0a01404 	addi	r2,gp,-32688
 2011684:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 2011688:	d0a01584 	addi	r2,gp,-32682
 201168c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 2011690:	d0a01604 	addi	r2,gp,-32680
 2011694:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 2011698:	d0a01684 	addi	r2,gp,-32678
 201169c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 20116a0:	d0a01704 	addi	r2,gp,-32676
 20116a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 20116a8:	d0a01784 	addi	r2,gp,-32674
 20116ac:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 20116b0:	d0a01804 	addi	r2,gp,-32672
 20116b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 20116b8:	d0a01884 	addi	r2,gp,-32670
 20116bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 20116c0:	d0a01904 	addi	r2,gp,-32668
 20116c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 20116c8:	d0a01984 	addi	r2,gp,-32666
 20116cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 20116d0:	d0a01a04 	addi	r2,gp,-32664
 20116d4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 20116d8:	d0a01a84 	addi	r2,gp,-32662
 20116dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 20116e0:	d0a01b04 	addi	r2,gp,-32660
 20116e4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 20116e8:	d0a01b84 	addi	r2,gp,-32658
 20116ec:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 20116f0:	d0a01c04 	addi	r2,gp,-32656
 20116f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 20116f8:	d0a01c84 	addi	r2,gp,-32654
 20116fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 2011700:	d0a01d04 	addi	r2,gp,-32652
 2011704:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 2011708:	d0a01d84 	addi	r2,gp,-32650
 201170c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 2011710:	d0a01e04 	addi	r2,gp,-32648
 2011714:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 2011718:	d0a01e84 	addi	r2,gp,-32646
 201171c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 2011720:	d0a01f04 	addi	r2,gp,-32644
 2011724:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 2011728:	d0a01f84 	addi	r2,gp,-32642
 201172c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 2011730:	d0a02004 	addi	r2,gp,-32640
 2011734:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 2011738:	d0a02084 	addi	r2,gp,-32638
 201173c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 2011740:	d0a02104 	addi	r2,gp,-32636
 2011744:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 2011748:	d0a02184 	addi	r2,gp,-32634
 201174c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 2011750:	d0a02204 	addi	r2,gp,-32632
 2011754:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 2011758:	d0a02284 	addi	r2,gp,-32630
 201175c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 2011760:	d0a02304 	addi	r2,gp,-32628
 2011764:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 2011768:	d0a02384 	addi	r2,gp,-32626
 201176c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 2011770:	d0a02404 	addi	r2,gp,-32624
 2011774:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 2011778:	d0a02484 	addi	r2,gp,-32622
 201177c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 2011780:	d0a02504 	addi	r2,gp,-32620
 2011784:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 2011788:	d0a02584 	addi	r2,gp,-32618
 201178c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 2011790:	d0a02604 	addi	r2,gp,-32616
 2011794:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 2011798:	d0a02684 	addi	r2,gp,-32614
 201179c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 20117a0:	d0a02704 	addi	r2,gp,-32612
 20117a4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 20117a8:	d0a02784 	addi	r2,gp,-32610
 20117ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 20117b0:	d0a02804 	addi	r2,gp,-32608
 20117b4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 20117b8:	d0a02884 	addi	r2,gp,-32606
 20117bc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 20117c0:	d0a02904 	addi	r2,gp,-32604
 20117c4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 20117c8:	d0a02e04 	addi	r2,gp,-32584
 20117cc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 20117d0:	e037883a 	mov	sp,fp
 20117d4:	df000017 	ldw	fp,0(sp)
 20117d8:	dec00104 	addi	sp,sp,4
 20117dc:	f800283a 	ret

020117e0 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 20117e0:	defff104 	addi	sp,sp,-60
 20117e4:	df000e15 	stw	fp,56(sp)
 20117e8:	df000e04 	addi	fp,sp,56
 20117ec:	e13ffa15 	stw	r4,-24(fp)
 20117f0:	e1fffd15 	stw	r7,-12(fp)
 20117f4:	e17ffb0d 	sth	r5,-20(fp)
 20117f8:	e1bffc05 	stb	r6,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 20117fc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2011800:	e0bffd17 	ldw	r2,-12(fp)
 2011804:	1004c03a 	cmpne	r2,r2,zero
 2011808:	1000021e 	bne	r2,zero,2011814 <OSFlagAccept+0x34>
        return ((OS_FLAGS)0);
 201180c:	e03fff15 	stw	zero,-4(fp)
 2011810:	0000bb06 	br	2011b00 <OSFlagAccept+0x320>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2011814:	e0bffa17 	ldw	r2,-24(fp)
 2011818:	1004c03a 	cmpne	r2,r2,zero
 201181c:	1000051e 	bne	r2,zero,2011834 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2011820:	e0fffd17 	ldw	r3,-12(fp)
 2011824:	00801b84 	movi	r2,110
 2011828:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 201182c:	e03fff15 	stw	zero,-4(fp)
 2011830:	0000b306 	br	2011b00 <OSFlagAccept+0x320>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2011834:	e0bffa17 	ldw	r2,-24(fp)
 2011838:	10800003 	ldbu	r2,0(r2)
 201183c:	10803fcc 	andi	r2,r2,255
 2011840:	10800160 	cmpeqi	r2,r2,5
 2011844:	1000051e 	bne	r2,zero,201185c <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 2011848:	e0fffd17 	ldw	r3,-12(fp)
 201184c:	00800044 	movi	r2,1
 2011850:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 2011854:	e03fff15 	stw	zero,-4(fp)
 2011858:	0000a906 	br	2011b00 <OSFlagAccept+0x320>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 201185c:	e0fffc03 	ldbu	r3,-16(fp)
 2011860:	00bfe004 	movi	r2,-128
 2011864:	1884703a 	and	r2,r3,r2
 2011868:	e0bff945 	stb	r2,-27(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 201186c:	e0bff943 	ldbu	r2,-27(fp)
 2011870:	1005003a 	cmpeq	r2,r2,zero
 2011874:	1000061e 	bne	r2,zero,2011890 <OSFlagAccept+0xb0>
        wait_type &= ~OS_FLAG_CONSUME;
 2011878:	e0bffc03 	ldbu	r2,-16(fp)
 201187c:	10801fcc 	andi	r2,r2,127
 2011880:	e0bffc05 	stb	r2,-16(fp)
        consume    = OS_TRUE;
 2011884:	00800044 	movi	r2,1
 2011888:	e0bff905 	stb	r2,-28(fp)
 201188c:	00000106 	br	2011894 <OSFlagAccept+0xb4>
    } else {
        consume    = OS_FALSE;
 2011890:	e03ff905 	stb	zero,-28(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 2011894:	e0bffd17 	ldw	r2,-12(fp)
 2011898:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201189c:	0005303a 	rdctl	r2,status
 20118a0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20118a4:	e0fff717 	ldw	r3,-36(fp)
 20118a8:	00bfff84 	movi	r2,-2
 20118ac:	1884703a 	and	r2,r3,r2
 20118b0:	1001703a 	wrctl	status,r2
  
  return context;
 20118b4:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 20118b8:	e0bff815 	stw	r2,-32(fp)
    switch (wait_type) {
 20118bc:	e0bffc03 	ldbu	r2,-16(fp)
 20118c0:	e0bffe15 	stw	r2,-8(fp)
 20118c4:	e0fffe17 	ldw	r3,-8(fp)
 20118c8:	18800060 	cmpeqi	r2,r3,1
 20118cc:	1000651e 	bne	r2,zero,2011a64 <OSFlagAccept+0x284>
 20118d0:	e0fffe17 	ldw	r3,-8(fp)
 20118d4:	18800088 	cmpgei	r2,r3,2
 20118d8:	1000041e 	bne	r2,zero,20118ec <OSFlagAccept+0x10c>
 20118dc:	e0fffe17 	ldw	r3,-8(fp)
 20118e0:	1805003a 	cmpeq	r2,r3,zero
 20118e4:	1000421e 	bne	r2,zero,20119f0 <OSFlagAccept+0x210>
 20118e8:	00007b06 	br	2011ad8 <OSFlagAccept+0x2f8>
 20118ec:	e0fffe17 	ldw	r3,-8(fp)
 20118f0:	188000a0 	cmpeqi	r2,r3,2
 20118f4:	1000041e 	bne	r2,zero,2011908 <OSFlagAccept+0x128>
 20118f8:	e0fffe17 	ldw	r3,-8(fp)
 20118fc:	188000e0 	cmpeqi	r2,r3,3
 2011900:	10001e1e 	bne	r2,zero,201197c <OSFlagAccept+0x19c>
 2011904:	00007406 	br	2011ad8 <OSFlagAccept+0x2f8>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 2011908:	e0bffa17 	ldw	r2,-24(fp)
 201190c:	10c0020b 	ldhu	r3,8(r2)
 2011910:	e0bffb0b 	ldhu	r2,-20(fp)
 2011914:	1884703a 	and	r2,r3,r2
 2011918:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 201191c:	e0fff98b 	ldhu	r3,-26(fp)
 2011920:	e0bffb0b 	ldhu	r2,-20(fp)
 2011924:	18800d1e 	bne	r3,r2,201195c <OSFlagAccept+0x17c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2011928:	e0bff903 	ldbu	r2,-28(fp)
 201192c:	10800058 	cmpnei	r2,r2,1
 2011930:	10000d1e 	bne	r2,zero,2011968 <OSFlagAccept+0x188>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 2011934:	e0bffa17 	ldw	r2,-24(fp)
 2011938:	1080020b 	ldhu	r2,8(r2)
 201193c:	1007883a 	mov	r3,r2
 2011940:	e0bff98b 	ldhu	r2,-26(fp)
 2011944:	0084303a 	nor	r2,zero,r2
 2011948:	1884703a 	and	r2,r3,r2
 201194c:	1007883a 	mov	r3,r2
 2011950:	e0bffa17 	ldw	r2,-24(fp)
 2011954:	10c0020d 	sth	r3,8(r2)
 2011958:	00000306 	br	2011968 <OSFlagAccept+0x188>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 201195c:	e0fffd17 	ldw	r3,-12(fp)
 2011960:	00801c04 	movi	r2,112
 2011964:	18800005 	stb	r2,0(r3)
 2011968:	e0bff817 	ldw	r2,-32(fp)
 201196c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011970:	e0bff617 	ldw	r2,-40(fp)
 2011974:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2011978:	00005f06 	br	2011af8 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 201197c:	e0bffa17 	ldw	r2,-24(fp)
 2011980:	10c0020b 	ldhu	r3,8(r2)
 2011984:	e0bffb0b 	ldhu	r2,-20(fp)
 2011988:	1884703a 	and	r2,r3,r2
 201198c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 2011990:	e0bff98b 	ldhu	r2,-26(fp)
 2011994:	1005003a 	cmpeq	r2,r2,zero
 2011998:	10000d1e 	bne	r2,zero,20119d0 <OSFlagAccept+0x1f0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 201199c:	e0bff903 	ldbu	r2,-28(fp)
 20119a0:	10800058 	cmpnei	r2,r2,1
 20119a4:	10000d1e 	bne	r2,zero,20119dc <OSFlagAccept+0x1fc>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 20119a8:	e0bffa17 	ldw	r2,-24(fp)
 20119ac:	1080020b 	ldhu	r2,8(r2)
 20119b0:	1007883a 	mov	r3,r2
 20119b4:	e0bff98b 	ldhu	r2,-26(fp)
 20119b8:	0084303a 	nor	r2,zero,r2
 20119bc:	1884703a 	and	r2,r3,r2
 20119c0:	1007883a 	mov	r3,r2
 20119c4:	e0bffa17 	ldw	r2,-24(fp)
 20119c8:	10c0020d 	sth	r3,8(r2)
 20119cc:	00000306 	br	20119dc <OSFlagAccept+0x1fc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 20119d0:	e0fffd17 	ldw	r3,-12(fp)
 20119d4:	00801c04 	movi	r2,112
 20119d8:	18800005 	stb	r2,0(r3)
 20119dc:	e0bff817 	ldw	r2,-32(fp)
 20119e0:	e0bff515 	stw	r2,-44(fp)
 20119e4:	e0bff517 	ldw	r2,-44(fp)
 20119e8:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 20119ec:	00004206 	br	2011af8 <OSFlagAccept+0x318>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 20119f0:	e0bffa17 	ldw	r2,-24(fp)
 20119f4:	1080020b 	ldhu	r2,8(r2)
 20119f8:	0084303a 	nor	r2,zero,r2
 20119fc:	1007883a 	mov	r3,r2
 2011a00:	e0bffb0b 	ldhu	r2,-20(fp)
 2011a04:	1884703a 	and	r2,r3,r2
 2011a08:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2011a0c:	e0fff98b 	ldhu	r3,-26(fp)
 2011a10:	e0bffb0b 	ldhu	r2,-20(fp)
 2011a14:	18800b1e 	bne	r3,r2,2011a44 <OSFlagAccept+0x264>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2011a18:	e0bff903 	ldbu	r2,-28(fp)
 2011a1c:	10800058 	cmpnei	r2,r2,1
 2011a20:	10000b1e 	bne	r2,zero,2011a50 <OSFlagAccept+0x270>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 2011a24:	e0bffa17 	ldw	r2,-24(fp)
 2011a28:	10c0020b 	ldhu	r3,8(r2)
 2011a2c:	e0bff98b 	ldhu	r2,-26(fp)
 2011a30:	1884b03a 	or	r2,r3,r2
 2011a34:	1007883a 	mov	r3,r2
 2011a38:	e0bffa17 	ldw	r2,-24(fp)
 2011a3c:	10c0020d 	sth	r3,8(r2)
 2011a40:	00000306 	br	2011a50 <OSFlagAccept+0x270>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2011a44:	e0fffd17 	ldw	r3,-12(fp)
 2011a48:	00801c04 	movi	r2,112
 2011a4c:	18800005 	stb	r2,0(r3)
 2011a50:	e0bff817 	ldw	r2,-32(fp)
 2011a54:	e0bff415 	stw	r2,-48(fp)
 2011a58:	e0bff417 	ldw	r2,-48(fp)
 2011a5c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2011a60:	00002506 	br	2011af8 <OSFlagAccept+0x318>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2011a64:	e0bffa17 	ldw	r2,-24(fp)
 2011a68:	1080020b 	ldhu	r2,8(r2)
 2011a6c:	0084303a 	nor	r2,zero,r2
 2011a70:	1007883a 	mov	r3,r2
 2011a74:	e0bffb0b 	ldhu	r2,-20(fp)
 2011a78:	1884703a 	and	r2,r3,r2
 2011a7c:	e0bff98d 	sth	r2,-26(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2011a80:	e0bff98b 	ldhu	r2,-26(fp)
 2011a84:	1005003a 	cmpeq	r2,r2,zero
 2011a88:	10000b1e 	bne	r2,zero,2011ab8 <OSFlagAccept+0x2d8>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2011a8c:	e0bff903 	ldbu	r2,-28(fp)
 2011a90:	10800058 	cmpnei	r2,r2,1
 2011a94:	10000b1e 	bne	r2,zero,2011ac4 <OSFlagAccept+0x2e4>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 2011a98:	e0bffa17 	ldw	r2,-24(fp)
 2011a9c:	10c0020b 	ldhu	r3,8(r2)
 2011aa0:	e0bff98b 	ldhu	r2,-26(fp)
 2011aa4:	1884b03a 	or	r2,r3,r2
 2011aa8:	1007883a 	mov	r3,r2
 2011aac:	e0bffa17 	ldw	r2,-24(fp)
 2011ab0:	10c0020d 	sth	r3,8(r2)
 2011ab4:	00000306 	br	2011ac4 <OSFlagAccept+0x2e4>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 2011ab8:	e0fffd17 	ldw	r3,-12(fp)
 2011abc:	00801c04 	movi	r2,112
 2011ac0:	18800005 	stb	r2,0(r3)
 2011ac4:	e0bff817 	ldw	r2,-32(fp)
 2011ac8:	e0bff315 	stw	r2,-52(fp)
 2011acc:	e0bff317 	ldw	r2,-52(fp)
 2011ad0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 2011ad4:	00000806 	br	2011af8 <OSFlagAccept+0x318>
 2011ad8:	e0bff817 	ldw	r2,-32(fp)
 2011adc:	e0bff215 	stw	r2,-56(fp)
 2011ae0:	e0bff217 	ldw	r2,-56(fp)
 2011ae4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 2011ae8:	e03ff98d 	sth	zero,-26(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 2011aec:	e0fffd17 	ldw	r3,-12(fp)
 2011af0:	00801bc4 	movi	r2,111
 2011af4:	18800005 	stb	r2,0(r3)
             break;
    }
    return (flags_rdy);
 2011af8:	e0bff98b 	ldhu	r2,-26(fp)
 2011afc:	e0bfff15 	stw	r2,-4(fp)
 2011b00:	e0bfff17 	ldw	r2,-4(fp)
}
 2011b04:	e037883a 	mov	sp,fp
 2011b08:	df000017 	ldw	fp,0(sp)
 2011b0c:	dec00104 	addi	sp,sp,4
 2011b10:	f800283a 	ret

02011b14 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 2011b14:	defff704 	addi	sp,sp,-36
 2011b18:	df000815 	stw	fp,32(sp)
 2011b1c:	df000804 	addi	fp,sp,32
 2011b20:	e17ffe15 	stw	r5,-8(fp)
 2011b24:	e13ffd0d 	sth	r4,-12(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 2011b28:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 2011b2c:	e0bffe17 	ldw	r2,-8(fp)
 2011b30:	1004c03a 	cmpne	r2,r2,zero
 2011b34:	1000021e 	bne	r2,zero,2011b40 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 2011b38:	e03fff15 	stw	zero,-4(fp)
 2011b3c:	00003f06 	br	2011c3c <OSFlagCreate+0x128>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 2011b40:	008080b4 	movhi	r2,514
 2011b44:	10b81404 	addi	r2,r2,-8112
 2011b48:	10800003 	ldbu	r2,0(r2)
 2011b4c:	10803fcc 	andi	r2,r2,255
 2011b50:	1005003a 	cmpeq	r2,r2,zero
 2011b54:	1000051e 	bne	r2,zero,2011b6c <OSFlagCreate+0x58>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 2011b58:	e0fffe17 	ldw	r3,-8(fp)
 2011b5c:	00800404 	movi	r2,16
 2011b60:	18800005 	stb	r2,0(r3)
        return ((OS_FLAG_GRP *)0);
 2011b64:	e03fff15 	stw	zero,-4(fp)
 2011b68:	00003406 	br	2011c3c <OSFlagCreate+0x128>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011b6c:	0005303a 	rdctl	r2,status
 2011b70:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011b74:	e0fffa17 	ldw	r3,-24(fp)
 2011b78:	00bfff84 	movi	r2,-2
 2011b7c:	1884703a 	and	r2,r3,r2
 2011b80:	1001703a 	wrctl	status,r2
  
  return context;
 2011b84:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2011b88:	e0bffb15 	stw	r2,-20(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 2011b8c:	008080b4 	movhi	r2,514
 2011b90:	10b81704 	addi	r2,r2,-8100
 2011b94:	10800017 	ldw	r2,0(r2)
 2011b98:	e0bffc15 	stw	r2,-16(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 2011b9c:	e0bffc17 	ldw	r2,-16(fp)
 2011ba0:	1005003a 	cmpeq	r2,r2,zero
 2011ba4:	10001c1e 	bne	r2,zero,2011c18 <OSFlagCreate+0x104>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 2011ba8:	008080b4 	movhi	r2,514
 2011bac:	10b81704 	addi	r2,r2,-8100
 2011bb0:	10800017 	ldw	r2,0(r2)
 2011bb4:	10800117 	ldw	r2,4(r2)
 2011bb8:	1007883a 	mov	r3,r2
 2011bbc:	008080b4 	movhi	r2,514
 2011bc0:	10b81704 	addi	r2,r2,-8100
 2011bc4:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 2011bc8:	e0fffc17 	ldw	r3,-16(fp)
 2011bcc:	00800144 	movi	r2,5
 2011bd0:	18800005 	stb	r2,0(r3)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 2011bd4:	e0fffc17 	ldw	r3,-16(fp)
 2011bd8:	e0bffd0b 	ldhu	r2,-12(fp)
 2011bdc:	1880020d 	sth	r2,8(r3)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 2011be0:	e0bffc17 	ldw	r2,-16(fp)
 2011be4:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 2011be8:	e0fffc17 	ldw	r3,-16(fp)
 2011bec:	00800fc4 	movi	r2,63
 2011bf0:	18800285 	stb	r2,10(r3)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2011bf4:	e0bffc17 	ldw	r2,-16(fp)
 2011bf8:	100002c5 	stb	zero,11(r2)
 2011bfc:	e0bffb17 	ldw	r2,-20(fp)
 2011c00:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011c04:	e0bff917 	ldw	r2,-28(fp)
 2011c08:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 2011c0c:	e0bffe17 	ldw	r2,-8(fp)
 2011c10:	10000005 	stb	zero,0(r2)
 2011c14:	00000706 	br	2011c34 <OSFlagCreate+0x120>
 2011c18:	e0bffb17 	ldw	r2,-20(fp)
 2011c1c:	e0bff815 	stw	r2,-32(fp)
 2011c20:	e0bff817 	ldw	r2,-32(fp)
 2011c24:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 2011c28:	e0fffe17 	ldw	r3,-8(fp)
 2011c2c:	00801c84 	movi	r2,114
 2011c30:	18800005 	stb	r2,0(r3)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 2011c34:	e0bffc17 	ldw	r2,-16(fp)
 2011c38:	e0bfff15 	stw	r2,-4(fp)
 2011c3c:	e0bfff17 	ldw	r2,-4(fp)
}
 2011c40:	e037883a 	mov	sp,fp
 2011c44:	df000017 	ldw	fp,0(sp)
 2011c48:	dec00104 	addi	sp,sp,4
 2011c4c:	f800283a 	ret

02011c50 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 2011c50:	defff004 	addi	sp,sp,-64
 2011c54:	dfc00f15 	stw	ra,60(sp)
 2011c58:	df000e15 	stw	fp,56(sp)
 2011c5c:	df000e04 	addi	fp,sp,56
 2011c60:	e13ffb15 	stw	r4,-20(fp)
 2011c64:	e1bffd15 	stw	r6,-12(fp)
 2011c68:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 2011c6c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2011c70:	e0bffd17 	ldw	r2,-12(fp)
 2011c74:	1004c03a 	cmpne	r2,r2,zero
 2011c78:	1000031e 	bne	r2,zero,2011c88 <OSFlagDel+0x38>
        return (pgrp);
 2011c7c:	e0bffb17 	ldw	r2,-20(fp)
 2011c80:	e0bfff15 	stw	r2,-4(fp)
 2011c84:	00009606 	br	2011ee0 <OSFlagDel+0x290>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 2011c88:	e0bffb17 	ldw	r2,-20(fp)
 2011c8c:	1004c03a 	cmpne	r2,r2,zero
 2011c90:	1000061e 	bne	r2,zero,2011cac <OSFlagDel+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2011c94:	e0fffd17 	ldw	r3,-12(fp)
 2011c98:	00801b84 	movi	r2,110
 2011c9c:	18800005 	stb	r2,0(r3)
        return (pgrp);
 2011ca0:	e0fffb17 	ldw	r3,-20(fp)
 2011ca4:	e0ffff15 	stw	r3,-4(fp)
 2011ca8:	00008d06 	br	2011ee0 <OSFlagDel+0x290>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2011cac:	008080b4 	movhi	r2,514
 2011cb0:	10b81404 	addi	r2,r2,-8112
 2011cb4:	10800003 	ldbu	r2,0(r2)
 2011cb8:	10803fcc 	andi	r2,r2,255
 2011cbc:	1005003a 	cmpeq	r2,r2,zero
 2011cc0:	1000061e 	bne	r2,zero,2011cdc <OSFlagDel+0x8c>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2011cc4:	e0fffd17 	ldw	r3,-12(fp)
 2011cc8:	008003c4 	movi	r2,15
 2011ccc:	18800005 	stb	r2,0(r3)
        return (pgrp);
 2011cd0:	e0bffb17 	ldw	r2,-20(fp)
 2011cd4:	e0bfff15 	stw	r2,-4(fp)
 2011cd8:	00008106 	br	2011ee0 <OSFlagDel+0x290>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 2011cdc:	e0bffb17 	ldw	r2,-20(fp)
 2011ce0:	10800003 	ldbu	r2,0(r2)
 2011ce4:	10803fcc 	andi	r2,r2,255
 2011ce8:	10800160 	cmpeqi	r2,r2,5
 2011cec:	1000061e 	bne	r2,zero,2011d08 <OSFlagDel+0xb8>
        *perr = OS_ERR_EVENT_TYPE;
 2011cf0:	e0fffd17 	ldw	r3,-12(fp)
 2011cf4:	00800044 	movi	r2,1
 2011cf8:	18800005 	stb	r2,0(r3)
        return (pgrp);
 2011cfc:	e0fffb17 	ldw	r3,-20(fp)
 2011d00:	e0ffff15 	stw	r3,-4(fp)
 2011d04:	00007606 	br	2011ee0 <OSFlagDel+0x290>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011d08:	0005303a 	rdctl	r2,status
 2011d0c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011d10:	e0fff617 	ldw	r3,-40(fp)
 2011d14:	00bfff84 	movi	r2,-2
 2011d18:	1884703a 	and	r2,r3,r2
 2011d1c:	1001703a 	wrctl	status,r2
  
  return context;
 2011d20:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 2011d24:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 2011d28:	e0bffb17 	ldw	r2,-20(fp)
 2011d2c:	10800117 	ldw	r2,4(r2)
 2011d30:	1005003a 	cmpeq	r2,r2,zero
 2011d34:	1000031e 	bne	r2,zero,2011d44 <OSFlagDel+0xf4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2011d38:	00800044 	movi	r2,1
 2011d3c:	e0bffa05 	stb	r2,-24(fp)
 2011d40:	00000106 	br	2011d48 <OSFlagDel+0xf8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2011d44:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 2011d48:	e0bffc03 	ldbu	r2,-16(fp)
 2011d4c:	e0bffe15 	stw	r2,-8(fp)
 2011d50:	e0fffe17 	ldw	r3,-8(fp)
 2011d54:	1805003a 	cmpeq	r2,r3,zero
 2011d58:	1000041e 	bne	r2,zero,2011d6c <OSFlagDel+0x11c>
 2011d5c:	e0fffe17 	ldw	r3,-8(fp)
 2011d60:	18800060 	cmpeqi	r2,r3,1
 2011d64:	1000281e 	bne	r2,zero,2011e08 <OSFlagDel+0x1b8>
 2011d68:	00005206 	br	2011eb4 <OSFlagDel+0x264>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 2011d6c:	e0bffa03 	ldbu	r2,-24(fp)
 2011d70:	1004c03a 	cmpne	r2,r2,zero
 2011d74:	10001a1e 	bne	r2,zero,2011de0 <OSFlagDel+0x190>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 2011d78:	e0fffb17 	ldw	r3,-20(fp)
 2011d7c:	00800fc4 	movi	r2,63
 2011d80:	18800285 	stb	r2,10(r3)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2011d84:	e0bffb17 	ldw	r2,-20(fp)
 2011d88:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2011d8c:	e0bffb17 	ldw	r2,-20(fp)
 2011d90:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 2011d94:	008080b4 	movhi	r2,514
 2011d98:	10b81704 	addi	r2,r2,-8100
 2011d9c:	10c00017 	ldw	r3,0(r2)
 2011da0:	e0bffb17 	ldw	r2,-20(fp)
 2011da4:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2011da8:	e0bffb17 	ldw	r2,-20(fp)
 2011dac:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 2011db0:	00c080b4 	movhi	r3,514
 2011db4:	18f81704 	addi	r3,r3,-8100
 2011db8:	e0bffb17 	ldw	r2,-20(fp)
 2011dbc:	18800015 	stw	r2,0(r3)
 2011dc0:	e0bff717 	ldw	r2,-36(fp)
 2011dc4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011dc8:	e0bff517 	ldw	r2,-44(fp)
 2011dcc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 2011dd0:	e0bffd17 	ldw	r2,-12(fp)
 2011dd4:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 2011dd8:	e03ff815 	stw	zero,-32(fp)
 2011ddc:	00003e06 	br	2011ed8 <OSFlagDel+0x288>
 2011de0:	e0bff717 	ldw	r2,-36(fp)
 2011de4:	e0bff415 	stw	r2,-48(fp)
 2011de8:	e0bff417 	ldw	r2,-48(fp)
 2011dec:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 2011df0:	e0fffd17 	ldw	r3,-12(fp)
 2011df4:	00801244 	movi	r2,73
 2011df8:	18800005 	stb	r2,0(r3)
                 pgrp_return          = pgrp;
 2011dfc:	e0bffb17 	ldw	r2,-20(fp)
 2011e00:	e0bff815 	stw	r2,-32(fp)
             }
             break;
 2011e04:	00003406 	br	2011ed8 <OSFlagDel+0x288>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2011e08:	e0bffb17 	ldw	r2,-20(fp)
 2011e0c:	10800117 	ldw	r2,4(r2)
 2011e10:	e0bff915 	stw	r2,-28(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2011e14:	00000606 	br	2011e30 <OSFlagDel+0x1e0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 2011e18:	e13ff917 	ldw	r4,-28(fp)
 2011e1c:	000b883a 	mov	r5,zero
 2011e20:	2012f600 	call	2012f60 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 2011e24:	e0bff917 	ldw	r2,-28(fp)
 2011e28:	10800017 	ldw	r2,0(r2)
 2011e2c:	e0bff915 	stw	r2,-28(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 2011e30:	e0bff917 	ldw	r2,-28(fp)
 2011e34:	1004c03a 	cmpne	r2,r2,zero
 2011e38:	103ff71e 	bne	r2,zero,2011e18 <OSFlagDel+0x1c8>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 2011e3c:	e0fffb17 	ldw	r3,-20(fp)
 2011e40:	00800fc4 	movi	r2,63
 2011e44:	18800285 	stb	r2,10(r3)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 2011e48:	e0bffb17 	ldw	r2,-20(fp)
 2011e4c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2011e50:	e0bffb17 	ldw	r2,-20(fp)
 2011e54:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 2011e58:	008080b4 	movhi	r2,514
 2011e5c:	10b81704 	addi	r2,r2,-8100
 2011e60:	10c00017 	ldw	r3,0(r2)
 2011e64:	e0bffb17 	ldw	r2,-20(fp)
 2011e68:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 2011e6c:	e0bffb17 	ldw	r2,-20(fp)
 2011e70:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 2011e74:	00c080b4 	movhi	r3,514
 2011e78:	18f81704 	addi	r3,r3,-8100
 2011e7c:	e0bffb17 	ldw	r2,-20(fp)
 2011e80:	18800015 	stw	r2,0(r3)
 2011e84:	e0bff717 	ldw	r2,-36(fp)
 2011e88:	e0bff315 	stw	r2,-52(fp)
 2011e8c:	e0bff317 	ldw	r2,-52(fp)
 2011e90:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2011e94:	e0bffa03 	ldbu	r2,-24(fp)
 2011e98:	10800058 	cmpnei	r2,r2,1
 2011e9c:	1000011e 	bne	r2,zero,2011ea4 <OSFlagDel+0x254>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2011ea0:	2010f6c0 	call	2010f6c <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 2011ea4:	e0bffd17 	ldw	r2,-12(fp)
 2011ea8:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 2011eac:	e03ff815 	stw	zero,-32(fp)
             break;
 2011eb0:	00000906 	br	2011ed8 <OSFlagDel+0x288>
 2011eb4:	e0bff717 	ldw	r2,-36(fp)
 2011eb8:	e0bff215 	stw	r2,-56(fp)
 2011ebc:	e0bff217 	ldw	r2,-56(fp)
 2011ec0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 2011ec4:	e0fffd17 	ldw	r3,-12(fp)
 2011ec8:	008001c4 	movi	r2,7
 2011ecc:	18800005 	stb	r2,0(r3)
             pgrp_return          = pgrp;
 2011ed0:	e0bffb17 	ldw	r2,-20(fp)
 2011ed4:	e0bff815 	stw	r2,-32(fp)
             break;
    }
    return (pgrp_return);
 2011ed8:	e0bff817 	ldw	r2,-32(fp)
 2011edc:	e0bfff15 	stw	r2,-4(fp)
 2011ee0:	e0bfff17 	ldw	r2,-4(fp)
}
 2011ee4:	e037883a 	mov	sp,fp
 2011ee8:	dfc00117 	ldw	ra,4(sp)
 2011eec:	df000017 	ldw	fp,0(sp)
 2011ef0:	dec00204 	addi	sp,sp,8
 2011ef4:	f800283a 	ret

02011ef8 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 2011ef8:	defff504 	addi	sp,sp,-44
 2011efc:	dfc00a15 	stw	ra,40(sp)
 2011f00:	df000915 	stw	fp,36(sp)
 2011f04:	df000904 	addi	fp,sp,36
 2011f08:	e13ffc15 	stw	r4,-16(fp)
 2011f0c:	e17ffd15 	stw	r5,-12(fp)
 2011f10:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2011f14:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2011f18:	e0bffe17 	ldw	r2,-8(fp)
 2011f1c:	1004c03a 	cmpne	r2,r2,zero
 2011f20:	1000021e 	bne	r2,zero,2011f2c <OSFlagNameGet+0x34>
        return (0);
 2011f24:	e03fff15 	stw	zero,-4(fp)
 2011f28:	00003e06 	br	2012024 <OSFlagNameGet+0x12c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2011f2c:	e0bffc17 	ldw	r2,-16(fp)
 2011f30:	1004c03a 	cmpne	r2,r2,zero
 2011f34:	1000051e 	bne	r2,zero,2011f4c <OSFlagNameGet+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2011f38:	e0fffe17 	ldw	r3,-8(fp)
 2011f3c:	00801b84 	movi	r2,110
 2011f40:	18800005 	stb	r2,0(r3)
        return (0);
 2011f44:	e03fff15 	stw	zero,-4(fp)
 2011f48:	00003606 	br	2012024 <OSFlagNameGet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2011f4c:	e0bffd17 	ldw	r2,-12(fp)
 2011f50:	1004c03a 	cmpne	r2,r2,zero
 2011f54:	1000051e 	bne	r2,zero,2011f6c <OSFlagNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 2011f58:	e0fffe17 	ldw	r3,-8(fp)
 2011f5c:	00800304 	movi	r2,12
 2011f60:	18800005 	stb	r2,0(r3)
        return (0);
 2011f64:	e03fff15 	stw	zero,-4(fp)
 2011f68:	00002e06 	br	2012024 <OSFlagNameGet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 2011f6c:	008080b4 	movhi	r2,514
 2011f70:	10b81404 	addi	r2,r2,-8112
 2011f74:	10800003 	ldbu	r2,0(r2)
 2011f78:	10803fcc 	andi	r2,r2,255
 2011f7c:	1005003a 	cmpeq	r2,r2,zero
 2011f80:	1000051e 	bne	r2,zero,2011f98 <OSFlagNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 2011f84:	e0fffe17 	ldw	r3,-8(fp)
 2011f88:	00800444 	movi	r2,17
 2011f8c:	18800005 	stb	r2,0(r3)
        return (0);
 2011f90:	e03fff15 	stw	zero,-4(fp)
 2011f94:	00002306 	br	2012024 <OSFlagNameGet+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2011f98:	0005303a 	rdctl	r2,status
 2011f9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2011fa0:	e0fff917 	ldw	r3,-28(fp)
 2011fa4:	00bfff84 	movi	r2,-2
 2011fa8:	1884703a 	and	r2,r3,r2
 2011fac:	1001703a 	wrctl	status,r2
  
  return context;
 2011fb0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2011fb4:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 2011fb8:	e0bffc17 	ldw	r2,-16(fp)
 2011fbc:	10800003 	ldbu	r2,0(r2)
 2011fc0:	10803fcc 	andi	r2,r2,255
 2011fc4:	10800160 	cmpeqi	r2,r2,5
 2011fc8:	1000091e 	bne	r2,zero,2011ff0 <OSFlagNameGet+0xf8>
 2011fcc:	e0bffa17 	ldw	r2,-24(fp)
 2011fd0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2011fd4:	e0bff817 	ldw	r2,-32(fp)
 2011fd8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 2011fdc:	e0fffe17 	ldw	r3,-8(fp)
 2011fe0:	00800044 	movi	r2,1
 2011fe4:	18800005 	stb	r2,0(r3)
        return (0);
 2011fe8:	e03fff15 	stw	zero,-4(fp)
 2011fec:	00000d06 	br	2012024 <OSFlagNameGet+0x12c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 2011ff0:	e0bffc17 	ldw	r2,-16(fp)
 2011ff4:	11400284 	addi	r5,r2,10
 2011ff8:	e13ffd17 	ldw	r4,-12(fp)
 2011ffc:	20110b00 	call	20110b0 <OS_StrCopy>
 2012000:	e0bffb05 	stb	r2,-20(fp)
 2012004:	e0bffa17 	ldw	r2,-24(fp)
 2012008:	e0bff715 	stw	r2,-36(fp)
 201200c:	e0bff717 	ldw	r2,-36(fp)
 2012010:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2012014:	e0bffe17 	ldw	r2,-8(fp)
 2012018:	10000005 	stb	zero,0(r2)
    return (len);
 201201c:	e0bffb03 	ldbu	r2,-20(fp)
 2012020:	e0bfff15 	stw	r2,-4(fp)
 2012024:	e0bfff17 	ldw	r2,-4(fp)
}
 2012028:	e037883a 	mov	sp,fp
 201202c:	dfc00117 	ldw	ra,4(sp)
 2012030:	df000017 	ldw	fp,0(sp)
 2012034:	dec00204 	addi	sp,sp,8
 2012038:	f800283a 	ret

0201203c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 201203c:	defff504 	addi	sp,sp,-44
 2012040:	dfc00a15 	stw	ra,40(sp)
 2012044:	df000915 	stw	fp,36(sp)
 2012048:	df000904 	addi	fp,sp,36
 201204c:	e13ffd15 	stw	r4,-12(fp)
 2012050:	e17ffe15 	stw	r5,-8(fp)
 2012054:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2012058:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201205c:	e0bfff17 	ldw	r2,-4(fp)
 2012060:	1005003a 	cmpeq	r2,r2,zero
 2012064:	1000451e 	bne	r2,zero,201217c <OSFlagNameSet+0x140>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 2012068:	e0bffd17 	ldw	r2,-12(fp)
 201206c:	1004c03a 	cmpne	r2,r2,zero
 2012070:	1000041e 	bne	r2,zero,2012084 <OSFlagNameSet+0x48>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2012074:	e0ffff17 	ldw	r3,-4(fp)
 2012078:	00801b84 	movi	r2,110
 201207c:	18800005 	stb	r2,0(r3)
        return;
 2012080:	00003e06 	br	201217c <OSFlagNameSet+0x140>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2012084:	e0bffe17 	ldw	r2,-8(fp)
 2012088:	1004c03a 	cmpne	r2,r2,zero
 201208c:	1000041e 	bne	r2,zero,20120a0 <OSFlagNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 2012090:	e0ffff17 	ldw	r3,-4(fp)
 2012094:	00800304 	movi	r2,12
 2012098:	18800005 	stb	r2,0(r3)
        return;
 201209c:	00003706 	br	201217c <OSFlagNameSet+0x140>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20120a0:	008080b4 	movhi	r2,514
 20120a4:	10b81404 	addi	r2,r2,-8112
 20120a8:	10800003 	ldbu	r2,0(r2)
 20120ac:	10803fcc 	andi	r2,r2,255
 20120b0:	1005003a 	cmpeq	r2,r2,zero
 20120b4:	1000041e 	bne	r2,zero,20120c8 <OSFlagNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 20120b8:	e0ffff17 	ldw	r3,-4(fp)
 20120bc:	00800484 	movi	r2,18
 20120c0:	18800005 	stb	r2,0(r3)
        return;
 20120c4:	00002d06 	br	201217c <OSFlagNameSet+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20120c8:	0005303a 	rdctl	r2,status
 20120cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20120d0:	e0fffa17 	ldw	r3,-24(fp)
 20120d4:	00bfff84 	movi	r2,-2
 20120d8:	1884703a 	and	r2,r3,r2
 20120dc:	1001703a 	wrctl	status,r2
  
  return context;
 20120e0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 20120e4:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 20120e8:	e0bffd17 	ldw	r2,-12(fp)
 20120ec:	10800003 	ldbu	r2,0(r2)
 20120f0:	10803fcc 	andi	r2,r2,255
 20120f4:	10800160 	cmpeqi	r2,r2,5
 20120f8:	1000081e 	bne	r2,zero,201211c <OSFlagNameSet+0xe0>
 20120fc:	e0bffb17 	ldw	r2,-20(fp)
 2012100:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012104:	e0bff917 	ldw	r2,-28(fp)
 2012108:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 201210c:	e0ffff17 	ldw	r3,-4(fp)
 2012110:	00800044 	movi	r2,1
 2012114:	18800005 	stb	r2,0(r3)
        return;
 2012118:	00001806 	br	201217c <OSFlagNameSet+0x140>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 201211c:	e13ffe17 	ldw	r4,-8(fp)
 2012120:	20111300 	call	2011130 <OS_StrLen>
 2012124:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 2012128:	e0bffc03 	ldbu	r2,-16(fp)
 201212c:	10800830 	cmpltui	r2,r2,32
 2012130:	1000081e 	bne	r2,zero,2012154 <OSFlagNameSet+0x118>
 2012134:	e0bffb17 	ldw	r2,-20(fp)
 2012138:	e0bff815 	stw	r2,-32(fp)
 201213c:	e0bff817 	ldw	r2,-32(fp)
 2012140:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 2012144:	e0ffff17 	ldw	r3,-4(fp)
 2012148:	00801cc4 	movi	r2,115
 201214c:	18800005 	stb	r2,0(r3)
        return;
 2012150:	00000a06 	br	201217c <OSFlagNameSet+0x140>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 2012154:	e0bffd17 	ldw	r2,-12(fp)
 2012158:	11000284 	addi	r4,r2,10
 201215c:	e17ffe17 	ldw	r5,-8(fp)
 2012160:	20110b00 	call	20110b0 <OS_StrCopy>
 2012164:	e0bffb17 	ldw	r2,-20(fp)
 2012168:	e0bff715 	stw	r2,-36(fp)
 201216c:	e0bff717 	ldw	r2,-36(fp)
 2012170:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2012174:	e0bfff17 	ldw	r2,-4(fp)
 2012178:	10000005 	stb	zero,0(r2)
    return;
}
 201217c:	e037883a 	mov	sp,fp
 2012180:	dfc00117 	ldw	ra,4(sp)
 2012184:	df000017 	ldw	fp,0(sp)
 2012188:	dec00204 	addi	sp,sp,8
 201218c:	f800283a 	ret

02012190 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 2012190:	deffe004 	addi	sp,sp,-128
 2012194:	dfc01f15 	stw	ra,124(sp)
 2012198:	df001e15 	stw	fp,120(sp)
 201219c:	df001e04 	addi	fp,sp,120
 20121a0:	e13ff915 	stw	r4,-28(fp)
 20121a4:	e17ffa0d 	sth	r5,-24(fp)
 20121a8:	e1bffb05 	stb	r6,-20(fp)
 20121ac:	e1fffc0d 	sth	r7,-16(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 20121b0:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 20121b4:	e0800217 	ldw	r2,8(fp)
 20121b8:	1004c03a 	cmpne	r2,r2,zero
 20121bc:	1000021e 	bne	r2,zero,20121c8 <OSFlagPend+0x38>
        return ((OS_FLAGS)0);
 20121c0:	e03fff15 	stw	zero,-4(fp)
 20121c4:	00017d06 	br	20127bc <OSFlagPend+0x62c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 20121c8:	e0bff917 	ldw	r2,-28(fp)
 20121cc:	1004c03a 	cmpne	r2,r2,zero
 20121d0:	1000051e 	bne	r2,zero,20121e8 <OSFlagPend+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 20121d4:	e0c00217 	ldw	r3,8(fp)
 20121d8:	00801b84 	movi	r2,110
 20121dc:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 20121e0:	e03fff15 	stw	zero,-4(fp)
 20121e4:	00017506 	br	20127bc <OSFlagPend+0x62c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 20121e8:	008080b4 	movhi	r2,514
 20121ec:	10b81404 	addi	r2,r2,-8112
 20121f0:	10800003 	ldbu	r2,0(r2)
 20121f4:	10803fcc 	andi	r2,r2,255
 20121f8:	1005003a 	cmpeq	r2,r2,zero
 20121fc:	1000051e 	bne	r2,zero,2012214 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 2012200:	e0c00217 	ldw	r3,8(fp)
 2012204:	00800084 	movi	r2,2
 2012208:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 201220c:	e03fff15 	stw	zero,-4(fp)
 2012210:	00016a06 	br	20127bc <OSFlagPend+0x62c>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 2012214:	008080b4 	movhi	r2,514
 2012218:	10b80604 	addi	r2,r2,-8168
 201221c:	10800003 	ldbu	r2,0(r2)
 2012220:	10803fcc 	andi	r2,r2,255
 2012224:	1005003a 	cmpeq	r2,r2,zero
 2012228:	1000051e 	bne	r2,zero,2012240 <OSFlagPend+0xb0>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 201222c:	e0c00217 	ldw	r3,8(fp)
 2012230:	00800344 	movi	r2,13
 2012234:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 2012238:	e03fff15 	stw	zero,-4(fp)
 201223c:	00015f06 	br	20127bc <OSFlagPend+0x62c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 2012240:	e0bff917 	ldw	r2,-28(fp)
 2012244:	10800003 	ldbu	r2,0(r2)
 2012248:	10803fcc 	andi	r2,r2,255
 201224c:	10800160 	cmpeqi	r2,r2,5
 2012250:	1000051e 	bne	r2,zero,2012268 <OSFlagPend+0xd8>
        *perr = OS_ERR_EVENT_TYPE;
 2012254:	e0c00217 	ldw	r3,8(fp)
 2012258:	00800044 	movi	r2,1
 201225c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 2012260:	e03fff15 	stw	zero,-4(fp)
 2012264:	00015506 	br	20127bc <OSFlagPend+0x62c>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 2012268:	e0fffb03 	ldbu	r3,-20(fp)
 201226c:	00bfe004 	movi	r2,-128
 2012270:	1884703a 	and	r2,r3,r2
 2012274:	e0bff285 	stb	r2,-54(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 2012278:	e0bff283 	ldbu	r2,-54(fp)
 201227c:	1005003a 	cmpeq	r2,r2,zero
 2012280:	1000071e 	bne	r2,zero,20122a0 <OSFlagPend+0x110>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 2012284:	00c01fc4 	movi	r3,127
 2012288:	e0bffb03 	ldbu	r2,-20(fp)
 201228c:	10c4703a 	and	r2,r2,r3
 2012290:	e0bffb05 	stb	r2,-20(fp)
        consume    = OS_TRUE;
 2012294:	00800044 	movi	r2,1
 2012298:	e0bff205 	stb	r2,-56(fp)
 201229c:	00000106 	br	20122a4 <OSFlagPend+0x114>
    } else {
        consume    = OS_FALSE;
 20122a0:	e03ff205 	stb	zero,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20122a4:	0005303a 	rdctl	r2,status
 20122a8:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20122ac:	e0fff017 	ldw	r3,-64(fp)
 20122b0:	00bfff84 	movi	r2,-2
 20122b4:	1884703a 	and	r2,r3,r2
 20122b8:	1001703a 	wrctl	status,r2
  
  return context;
 20122bc:	e0bff017 	ldw	r2,-64(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 20122c0:	e0bff115 	stw	r2,-60(fp)
    switch (wait_type) {
 20122c4:	e0bffb03 	ldbu	r2,-20(fp)
 20122c8:	e0bffe15 	stw	r2,-8(fp)
 20122cc:	e0fffe17 	ldw	r3,-8(fp)
 20122d0:	18800060 	cmpeqi	r2,r3,1
 20122d4:	1000981e 	bne	r2,zero,2012538 <OSFlagPend+0x3a8>
 20122d8:	e0fffe17 	ldw	r3,-8(fp)
 20122dc:	18800088 	cmpgei	r2,r3,2
 20122e0:	1000041e 	bne	r2,zero,20122f4 <OSFlagPend+0x164>
 20122e4:	e0fffe17 	ldw	r3,-8(fp)
 20122e8:	1805003a 	cmpeq	r2,r3,zero
 20122ec:	1000641e 	bne	r2,zero,2012480 <OSFlagPend+0x2f0>
 20122f0:	0000bf06 	br	20125f0 <OSFlagPend+0x460>
 20122f4:	e0fffe17 	ldw	r3,-8(fp)
 20122f8:	188000a0 	cmpeqi	r2,r3,2
 20122fc:	1000041e 	bne	r2,zero,2012310 <OSFlagPend+0x180>
 2012300:	e0fffe17 	ldw	r3,-8(fp)
 2012304:	188000e0 	cmpeqi	r2,r3,3
 2012308:	10002f1e 	bne	r2,zero,20123c8 <OSFlagPend+0x238>
 201230c:	0000b806 	br	20125f0 <OSFlagPend+0x460>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 2012310:	e0bff917 	ldw	r2,-28(fp)
 2012314:	10c0020b 	ldhu	r3,8(r2)
 2012318:	e0bffa0b 	ldhu	r2,-24(fp)
 201231c:	1884703a 	and	r2,r3,r2
 2012320:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 2012324:	e0fff30b 	ldhu	r3,-52(fp)
 2012328:	e0bffa0b 	ldhu	r2,-24(fp)
 201232c:	18801a1e 	bne	r3,r2,2012398 <OSFlagPend+0x208>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2012330:	e0bff203 	ldbu	r2,-56(fp)
 2012334:	10800058 	cmpnei	r2,r2,1
 2012338:	1000091e 	bne	r2,zero,2012360 <OSFlagPend+0x1d0>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 201233c:	e0bff917 	ldw	r2,-28(fp)
 2012340:	1080020b 	ldhu	r2,8(r2)
 2012344:	1007883a 	mov	r3,r2
 2012348:	e0bff30b 	ldhu	r2,-52(fp)
 201234c:	0084303a 	nor	r2,zero,r2
 2012350:	1884703a 	and	r2,r3,r2
 2012354:	1007883a 	mov	r3,r2
 2012358:	e0bff917 	ldw	r2,-28(fp)
 201235c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2012360:	008080b4 	movhi	r2,514
 2012364:	10b81504 	addi	r2,r2,-8108
 2012368:	10c00017 	ldw	r3,0(r2)
 201236c:	e0bff30b 	ldhu	r2,-52(fp)
 2012370:	18800b0d 	sth	r2,44(r3)
 2012374:	e0bff117 	ldw	r2,-60(fp)
 2012378:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201237c:	e0bfef17 	ldw	r2,-68(fp)
 2012380:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 2012384:	e0800217 	ldw	r2,8(fp)
 2012388:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 201238c:	e0bff30b 	ldhu	r2,-52(fp)
 2012390:	e0bfff15 	stw	r2,-4(fp)
 2012394:	00010906 	br	20127bc <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2012398:	e1bffa0b 	ldhu	r6,-24(fp)
 201239c:	e1fffb03 	ldbu	r7,-20(fp)
 20123a0:	e0bffc0b 	ldhu	r2,-16(fp)
 20123a4:	e17ff404 	addi	r5,fp,-48
 20123a8:	d8800015 	stw	r2,0(sp)
 20123ac:	e13ff917 	ldw	r4,-28(fp)
 20123b0:	2012cb80 	call	2012cb8 <OS_FlagBlock>
 20123b4:	e0bff117 	ldw	r2,-60(fp)
 20123b8:	e0bfee15 	stw	r2,-72(fp)
 20123bc:	e0bfee17 	ldw	r2,-72(fp)
 20123c0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 20123c4:	00009506 	br	201261c <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 20123c8:	e0bff917 	ldw	r2,-28(fp)
 20123cc:	10c0020b 	ldhu	r3,8(r2)
 20123d0:	e0bffa0b 	ldhu	r2,-24(fp)
 20123d4:	1884703a 	and	r2,r3,r2
 20123d8:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 20123dc:	e0bff30b 	ldhu	r2,-52(fp)
 20123e0:	1005003a 	cmpeq	r2,r2,zero
 20123e4:	10001a1e 	bne	r2,zero,2012450 <OSFlagPend+0x2c0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20123e8:	e0bff203 	ldbu	r2,-56(fp)
 20123ec:	10800058 	cmpnei	r2,r2,1
 20123f0:	1000091e 	bne	r2,zero,2012418 <OSFlagPend+0x288>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 20123f4:	e0bff917 	ldw	r2,-28(fp)
 20123f8:	1080020b 	ldhu	r2,8(r2)
 20123fc:	1007883a 	mov	r3,r2
 2012400:	e0bff30b 	ldhu	r2,-52(fp)
 2012404:	0084303a 	nor	r2,zero,r2
 2012408:	1884703a 	and	r2,r3,r2
 201240c:	1007883a 	mov	r3,r2
 2012410:	e0bff917 	ldw	r2,-28(fp)
 2012414:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2012418:	008080b4 	movhi	r2,514
 201241c:	10b81504 	addi	r2,r2,-8108
 2012420:	10c00017 	ldw	r3,0(r2)
 2012424:	e0bff30b 	ldhu	r2,-52(fp)
 2012428:	18800b0d 	sth	r2,44(r3)
 201242c:	e0bff117 	ldw	r2,-60(fp)
 2012430:	e0bfed15 	stw	r2,-76(fp)
 2012434:	e0bfed17 	ldw	r2,-76(fp)
 2012438:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 201243c:	e0800217 	ldw	r2,8(fp)
 2012440:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 2012444:	e0fff30b 	ldhu	r3,-52(fp)
 2012448:	e0ffff15 	stw	r3,-4(fp)
 201244c:	0000db06 	br	20127bc <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2012450:	e1bffa0b 	ldhu	r6,-24(fp)
 2012454:	e1fffb03 	ldbu	r7,-20(fp)
 2012458:	e0bffc0b 	ldhu	r2,-16(fp)
 201245c:	e17ff404 	addi	r5,fp,-48
 2012460:	d8800015 	stw	r2,0(sp)
 2012464:	e13ff917 	ldw	r4,-28(fp)
 2012468:	2012cb80 	call	2012cb8 <OS_FlagBlock>
 201246c:	e0bff117 	ldw	r2,-60(fp)
 2012470:	e0bfec15 	stw	r2,-80(fp)
 2012474:	e0bfec17 	ldw	r2,-80(fp)
 2012478:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 201247c:	00006706 	br	201261c <OSFlagPend+0x48c>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 2012480:	e0bff917 	ldw	r2,-28(fp)
 2012484:	1080020b 	ldhu	r2,8(r2)
 2012488:	0084303a 	nor	r2,zero,r2
 201248c:	1007883a 	mov	r3,r2
 2012490:	e0bffa0b 	ldhu	r2,-24(fp)
 2012494:	1884703a 	and	r2,r3,r2
 2012498:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 201249c:	e0fff30b 	ldhu	r3,-52(fp)
 20124a0:	e0bffa0b 	ldhu	r2,-24(fp)
 20124a4:	1880181e 	bne	r3,r2,2012508 <OSFlagPend+0x378>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 20124a8:	e0bff203 	ldbu	r2,-56(fp)
 20124ac:	10800058 	cmpnei	r2,r2,1
 20124b0:	1000071e 	bne	r2,zero,20124d0 <OSFlagPend+0x340>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 20124b4:	e0bff917 	ldw	r2,-28(fp)
 20124b8:	10c0020b 	ldhu	r3,8(r2)
 20124bc:	e0bff30b 	ldhu	r2,-52(fp)
 20124c0:	1884b03a 	or	r2,r3,r2
 20124c4:	1007883a 	mov	r3,r2
 20124c8:	e0bff917 	ldw	r2,-28(fp)
 20124cc:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 20124d0:	008080b4 	movhi	r2,514
 20124d4:	10b81504 	addi	r2,r2,-8108
 20124d8:	10c00017 	ldw	r3,0(r2)
 20124dc:	e0bff30b 	ldhu	r2,-52(fp)
 20124e0:	18800b0d 	sth	r2,44(r3)
 20124e4:	e0bff117 	ldw	r2,-60(fp)
 20124e8:	e0bfeb15 	stw	r2,-84(fp)
 20124ec:	e0bfeb17 	ldw	r2,-84(fp)
 20124f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 20124f4:	e0800217 	ldw	r2,8(fp)
 20124f8:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 20124fc:	e0bff30b 	ldhu	r2,-52(fp)
 2012500:	e0bfff15 	stw	r2,-4(fp)
 2012504:	0000ad06 	br	20127bc <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 2012508:	e1bffa0b 	ldhu	r6,-24(fp)
 201250c:	e1fffb03 	ldbu	r7,-20(fp)
 2012510:	e0bffc0b 	ldhu	r2,-16(fp)
 2012514:	e17ff404 	addi	r5,fp,-48
 2012518:	d8800015 	stw	r2,0(sp)
 201251c:	e13ff917 	ldw	r4,-28(fp)
 2012520:	2012cb80 	call	2012cb8 <OS_FlagBlock>
 2012524:	e0bff117 	ldw	r2,-60(fp)
 2012528:	e0bfea15 	stw	r2,-88(fp)
 201252c:	e0bfea17 	ldw	r2,-88(fp)
 2012530:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 2012534:	00003906 	br	201261c <OSFlagPend+0x48c>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 2012538:	e0bff917 	ldw	r2,-28(fp)
 201253c:	1080020b 	ldhu	r2,8(r2)
 2012540:	0084303a 	nor	r2,zero,r2
 2012544:	1007883a 	mov	r3,r2
 2012548:	e0bffa0b 	ldhu	r2,-24(fp)
 201254c:	1884703a 	and	r2,r3,r2
 2012550:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 2012554:	e0bff30b 	ldhu	r2,-52(fp)
 2012558:	1005003a 	cmpeq	r2,r2,zero
 201255c:	1000181e 	bne	r2,zero,20125c0 <OSFlagPend+0x430>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 2012560:	e0bff203 	ldbu	r2,-56(fp)
 2012564:	10800058 	cmpnei	r2,r2,1
 2012568:	1000071e 	bne	r2,zero,2012588 <OSFlagPend+0x3f8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 201256c:	e0bff917 	ldw	r2,-28(fp)
 2012570:	10c0020b 	ldhu	r3,8(r2)
 2012574:	e0bff30b 	ldhu	r2,-52(fp)
 2012578:	1884b03a 	or	r2,r3,r2
 201257c:	1007883a 	mov	r3,r2
 2012580:	e0bff917 	ldw	r2,-28(fp)
 2012584:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 2012588:	008080b4 	movhi	r2,514
 201258c:	10b81504 	addi	r2,r2,-8108
 2012590:	10c00017 	ldw	r3,0(r2)
 2012594:	e0bff30b 	ldhu	r2,-52(fp)
 2012598:	18800b0d 	sth	r2,44(r3)
 201259c:	e0bff117 	ldw	r2,-60(fp)
 20125a0:	e0bfe915 	stw	r2,-92(fp)
 20125a4:	e0bfe917 	ldw	r2,-92(fp)
 20125a8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 20125ac:	e0800217 	ldw	r2,8(fp)
 20125b0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 20125b4:	e0fff30b 	ldhu	r3,-52(fp)
 20125b8:	e0ffff15 	stw	r3,-4(fp)
 20125bc:	00007f06 	br	20127bc <OSFlagPend+0x62c>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 20125c0:	e1bffa0b 	ldhu	r6,-24(fp)
 20125c4:	e1fffb03 	ldbu	r7,-20(fp)
 20125c8:	e0bffc0b 	ldhu	r2,-16(fp)
 20125cc:	e17ff404 	addi	r5,fp,-48
 20125d0:	d8800015 	stw	r2,0(sp)
 20125d4:	e13ff917 	ldw	r4,-28(fp)
 20125d8:	2012cb80 	call	2012cb8 <OS_FlagBlock>
 20125dc:	e0bff117 	ldw	r2,-60(fp)
 20125e0:	e0bfe815 	stw	r2,-96(fp)
 20125e4:	e0bfe817 	ldw	r2,-96(fp)
 20125e8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 20125ec:	00000b06 	br	201261c <OSFlagPend+0x48c>
 20125f0:	e0bff117 	ldw	r2,-60(fp)
 20125f4:	e0bfe715 	stw	r2,-100(fp)
 20125f8:	e0bfe717 	ldw	r2,-100(fp)
 20125fc:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 2012600:	e03ff30d 	sth	zero,-52(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 2012604:	e0c00217 	ldw	r3,8(fp)
 2012608:	00801bc4 	movi	r2,111
 201260c:	18800005 	stb	r2,0(r3)
             return (flags_rdy);
 2012610:	e0bff30b 	ldhu	r2,-52(fp)
 2012614:	e0bfff15 	stw	r2,-4(fp)
 2012618:	00006806 	br	20127bc <OSFlagPend+0x62c>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 201261c:	2010f6c0 	call	2010f6c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012620:	0005303a 	rdctl	r2,status
 2012624:	e0bfe615 	stw	r2,-104(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012628:	e0ffe617 	ldw	r3,-104(fp)
 201262c:	00bfff84 	movi	r2,-2
 2012630:	1884703a 	and	r2,r3,r2
 2012634:	1001703a 	wrctl	status,r2
  
  return context;
 2012638:	e0bfe617 	ldw	r2,-104(fp)
    OS_ENTER_CRITICAL();
 201263c:	e0bff115 	stw	r2,-60(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 2012640:	008080b4 	movhi	r2,514
 2012644:	10b81504 	addi	r2,r2,-8108
 2012648:	10800017 	ldw	r2,0(r2)
 201264c:	10800c43 	ldbu	r2,49(r2)
 2012650:	10803fcc 	andi	r2,r2,255
 2012654:	1005003a 	cmpeq	r2,r2,zero
 2012658:	1000221e 	bne	r2,zero,20126e4 <OSFlagPend+0x554>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 201265c:	008080b4 	movhi	r2,514
 2012660:	10b81504 	addi	r2,r2,-8108
 2012664:	10800017 	ldw	r2,0(r2)
 2012668:	10800c43 	ldbu	r2,49(r2)
 201266c:	e0bff245 	stb	r2,-55(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2012670:	008080b4 	movhi	r2,514
 2012674:	10b81504 	addi	r2,r2,-8108
 2012678:	10800017 	ldw	r2,0(r2)
 201267c:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 2012680:	e13ff404 	addi	r4,fp,-48
 2012684:	20130700 	call	2013070 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 2012688:	008080b4 	movhi	r2,514
 201268c:	10b81504 	addi	r2,r2,-8108
 2012690:	10800017 	ldw	r2,0(r2)
 2012694:	10000c05 	stb	zero,48(r2)
 2012698:	e0bff117 	ldw	r2,-60(fp)
 201269c:	e0bfe515 	stw	r2,-108(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20126a0:	e0bfe517 	ldw	r2,-108(fp)
 20126a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 20126a8:	e03ff30d 	sth	zero,-52(fp)
        switch (pend_stat) {
 20126ac:	e0bff243 	ldbu	r2,-55(fp)
 20126b0:	108000a0 	cmpeqi	r2,r2,2
 20126b4:	1000011e 	bne	r2,zero,20126bc <OSFlagPend+0x52c>
 20126b8:	00000406 	br	20126cc <OSFlagPend+0x53c>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 20126bc:	e0c00217 	ldw	r3,8(fp)
 20126c0:	00800384 	movi	r2,14
 20126c4:	18800005 	stb	r2,0(r3)
                 break;
 20126c8:	00000306 	br	20126d8 <OSFlagPend+0x548>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 20126cc:	e0c00217 	ldw	r3,8(fp)
 20126d0:	00800284 	movi	r2,10
 20126d4:	18800005 	stb	r2,0(r3)
                 break;
        }
        return (flags_rdy);
 20126d8:	e0fff30b 	ldhu	r3,-52(fp)
 20126dc:	e0ffff15 	stw	r3,-4(fp)
 20126e0:	00003606 	br	20127bc <OSFlagPend+0x62c>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 20126e4:	008080b4 	movhi	r2,514
 20126e8:	10b81504 	addi	r2,r2,-8108
 20126ec:	10800017 	ldw	r2,0(r2)
 20126f0:	10800b0b 	ldhu	r2,44(r2)
 20126f4:	e0bff30d 	sth	r2,-52(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 20126f8:	e0bff203 	ldbu	r2,-56(fp)
 20126fc:	10800058 	cmpnei	r2,r2,1
 2012700:	1000261e 	bne	r2,zero,201279c <OSFlagPend+0x60c>
        switch (wait_type) {
 2012704:	e0bffb03 	ldbu	r2,-20(fp)
 2012708:	e0bffd15 	stw	r2,-12(fp)
 201270c:	e0fffd17 	ldw	r3,-12(fp)
 2012710:	1804803a 	cmplt	r2,r3,zero
 2012714:	1000181e 	bne	r2,zero,2012778 <OSFlagPend+0x5e8>
 2012718:	e0fffd17 	ldw	r3,-12(fp)
 201271c:	18800090 	cmplti	r2,r3,2
 2012720:	10000d1e 	bne	r2,zero,2012758 <OSFlagPend+0x5c8>
 2012724:	e0fffd17 	ldw	r3,-12(fp)
 2012728:	18800108 	cmpgei	r2,r3,4
 201272c:	1000121e 	bne	r2,zero,2012778 <OSFlagPend+0x5e8>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 2012730:	e0bff917 	ldw	r2,-28(fp)
 2012734:	1080020b 	ldhu	r2,8(r2)
 2012738:	1007883a 	mov	r3,r2
 201273c:	e0bff30b 	ldhu	r2,-52(fp)
 2012740:	0084303a 	nor	r2,zero,r2
 2012744:	1884703a 	and	r2,r3,r2
 2012748:	1007883a 	mov	r3,r2
 201274c:	e0bff917 	ldw	r2,-28(fp)
 2012750:	10c0020d 	sth	r3,8(r2)
                 break;
 2012754:	00001106 	br	201279c <OSFlagPend+0x60c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 2012758:	e0bff917 	ldw	r2,-28(fp)
 201275c:	10c0020b 	ldhu	r3,8(r2)
 2012760:	e0bff30b 	ldhu	r2,-52(fp)
 2012764:	1884b03a 	or	r2,r3,r2
 2012768:	1007883a 	mov	r3,r2
 201276c:	e0bff917 	ldw	r2,-28(fp)
 2012770:	10c0020d 	sth	r3,8(r2)
                 break;
 2012774:	00000906 	br	201279c <OSFlagPend+0x60c>
 2012778:	e0bff117 	ldw	r2,-60(fp)
 201277c:	e0bfe415 	stw	r2,-112(fp)
 2012780:	e0bfe417 	ldw	r2,-112(fp)
 2012784:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2012788:	e0c00217 	ldw	r3,8(fp)
 201278c:	00801bc4 	movi	r2,111
 2012790:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 2012794:	e03fff15 	stw	zero,-4(fp)
 2012798:	00000806 	br	20127bc <OSFlagPend+0x62c>
 201279c:	e0bff117 	ldw	r2,-60(fp)
 20127a0:	e0bfe315 	stw	r2,-116(fp)
 20127a4:	e0bfe317 	ldw	r2,-116(fp)
 20127a8:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 20127ac:	e0800217 	ldw	r2,8(fp)
 20127b0:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 20127b4:	e0bff30b 	ldhu	r2,-52(fp)
 20127b8:	e0bfff15 	stw	r2,-4(fp)
 20127bc:	e0bfff17 	ldw	r2,-4(fp)
}
 20127c0:	e037883a 	mov	sp,fp
 20127c4:	dfc00117 	ldw	ra,4(sp)
 20127c8:	df000017 	ldw	fp,0(sp)
 20127cc:	dec00204 	addi	sp,sp,8
 20127d0:	f800283a 	ret

020127d4 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 20127d4:	defffb04 	addi	sp,sp,-20
 20127d8:	df000415 	stw	fp,16(sp)
 20127dc:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 20127e0:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20127e4:	0005303a 	rdctl	r2,status
 20127e8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20127ec:	e0fffd17 	ldw	r3,-12(fp)
 20127f0:	00bfff84 	movi	r2,-2
 20127f4:	1884703a 	and	r2,r3,r2
 20127f8:	1001703a 	wrctl	status,r2
  
  return context;
 20127fc:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 2012800:	e0bffe15 	stw	r2,-8(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 2012804:	008080b4 	movhi	r2,514
 2012808:	10b81504 	addi	r2,r2,-8108
 201280c:	10800017 	ldw	r2,0(r2)
 2012810:	10800b0b 	ldhu	r2,44(r2)
 2012814:	e0bfff0d 	sth	r2,-4(fp)
 2012818:	e0bffe17 	ldw	r2,-8(fp)
 201281c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012820:	e0bffc17 	ldw	r2,-16(fp)
 2012824:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 2012828:	e0bfff0b 	ldhu	r2,-4(fp)
}
 201282c:	e037883a 	mov	sp,fp
 2012830:	df000017 	ldw	fp,0(sp)
 2012834:	dec00104 	addi	sp,sp,4
 2012838:	f800283a 	ret

0201283c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 201283c:	deffed04 	addi	sp,sp,-76
 2012840:	dfc01215 	stw	ra,72(sp)
 2012844:	df001115 	stw	fp,68(sp)
 2012848:	df001104 	addi	fp,sp,68
 201284c:	e13ff915 	stw	r4,-28(fp)
 2012850:	e1fffc15 	stw	r7,-16(fp)
 2012854:	e17ffa0d 	sth	r5,-24(fp)
 2012858:	e1bffb05 	stb	r6,-20(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 201285c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 2012860:	e0bffc17 	ldw	r2,-16(fp)
 2012864:	1004c03a 	cmpne	r2,r2,zero
 2012868:	1000021e 	bne	r2,zero,2012874 <OSFlagPost+0x38>
        return ((OS_FLAGS)0);
 201286c:	e03fff15 	stw	zero,-4(fp)
 2012870:	0000d606 	br	2012bcc <OSFlagPost+0x390>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 2012874:	e0bff917 	ldw	r2,-28(fp)
 2012878:	1004c03a 	cmpne	r2,r2,zero
 201287c:	1000051e 	bne	r2,zero,2012894 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2012880:	e0fffc17 	ldw	r3,-16(fp)
 2012884:	00801b84 	movi	r2,110
 2012888:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 201288c:	e03fff15 	stw	zero,-4(fp)
 2012890:	0000ce06 	br	2012bcc <OSFlagPost+0x390>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 2012894:	e0bff917 	ldw	r2,-28(fp)
 2012898:	10800003 	ldbu	r2,0(r2)
 201289c:	10803fcc 	andi	r2,r2,255
 20128a0:	10800160 	cmpeqi	r2,r2,5
 20128a4:	1000051e 	bne	r2,zero,20128bc <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 20128a8:	e0fffc17 	ldw	r3,-16(fp)
 20128ac:	00800044 	movi	r2,1
 20128b0:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 20128b4:	e03fff15 	stw	zero,-4(fp)
 20128b8:	0000c406 	br	2012bcc <OSFlagPost+0x390>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20128bc:	0005303a 	rdctl	r2,status
 20128c0:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20128c4:	e0fff417 	ldw	r3,-48(fp)
 20128c8:	00bfff84 	movi	r2,-2
 20128cc:	1884703a 	and	r2,r3,r2
 20128d0:	1001703a 	wrctl	status,r2
  
  return context;
 20128d4:	e0bff417 	ldw	r2,-48(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 20128d8:	e0bff515 	stw	r2,-44(fp)
    switch (opt) {
 20128dc:	e0bffb03 	ldbu	r2,-20(fp)
 20128e0:	e0bffe15 	stw	r2,-8(fp)
 20128e4:	e0fffe17 	ldw	r3,-8(fp)
 20128e8:	1805003a 	cmpeq	r2,r3,zero
 20128ec:	1000041e 	bne	r2,zero,2012900 <OSFlagPost+0xc4>
 20128f0:	e0fffe17 	ldw	r3,-8(fp)
 20128f4:	18800060 	cmpeqi	r2,r3,1
 20128f8:	10000b1e 	bne	r2,zero,2012928 <OSFlagPost+0xec>
 20128fc:	00001206 	br	2012948 <OSFlagPost+0x10c>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 2012900:	e0bff917 	ldw	r2,-28(fp)
 2012904:	1080020b 	ldhu	r2,8(r2)
 2012908:	1007883a 	mov	r3,r2
 201290c:	e0bffa0b 	ldhu	r2,-24(fp)
 2012910:	0084303a 	nor	r2,zero,r2
 2012914:	1884703a 	and	r2,r3,r2
 2012918:	1007883a 	mov	r3,r2
 201291c:	e0bff917 	ldw	r2,-28(fp)
 2012920:	10c0020d 	sth	r3,8(r2)
             break;
 2012924:	00001106 	br	201296c <OSFlagPost+0x130>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 2012928:	e0bff917 	ldw	r2,-28(fp)
 201292c:	10c0020b 	ldhu	r3,8(r2)
 2012930:	e0bffa0b 	ldhu	r2,-24(fp)
 2012934:	1884b03a 	or	r2,r3,r2
 2012938:	1007883a 	mov	r3,r2
 201293c:	e0bff917 	ldw	r2,-28(fp)
 2012940:	10c0020d 	sth	r3,8(r2)
             break;
 2012944:	00000906 	br	201296c <OSFlagPost+0x130>
 2012948:	e0bff517 	ldw	r2,-44(fp)
 201294c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012950:	e0bff317 	ldw	r2,-52(fp)
 2012954:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 2012958:	e0fffc17 	ldw	r3,-16(fp)
 201295c:	00801c44 	movi	r2,113
 2012960:	18800005 	stb	r2,0(r3)
             return ((OS_FLAGS)0);
 2012964:	e03fff15 	stw	zero,-4(fp)
 2012968:	00009806 	br	2012bcc <OSFlagPost+0x390>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 201296c:	e03ff785 	stb	zero,-34(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2012970:	e0bff917 	ldw	r2,-28(fp)
 2012974:	10800117 	ldw	r2,4(r2)
 2012978:	e0bff815 	stw	r2,-32(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 201297c:	00007506 	br	2012b54 <OSFlagPost+0x318>
        switch (pnode->OSFlagNodeWaitType) {
 2012980:	e0bff817 	ldw	r2,-32(fp)
 2012984:	10800483 	ldbu	r2,18(r2)
 2012988:	10803fcc 	andi	r2,r2,255
 201298c:	e0bffd15 	stw	r2,-12(fp)
 2012990:	e0fffd17 	ldw	r3,-12(fp)
 2012994:	18800060 	cmpeqi	r2,r3,1
 2012998:	10004d1e 	bne	r2,zero,2012ad0 <OSFlagPost+0x294>
 201299c:	e0fffd17 	ldw	r3,-12(fp)
 20129a0:	18800088 	cmpgei	r2,r3,2
 20129a4:	1000041e 	bne	r2,zero,20129b8 <OSFlagPost+0x17c>
 20129a8:	e0fffd17 	ldw	r3,-12(fp)
 20129ac:	1805003a 	cmpeq	r2,r3,zero
 20129b0:	1000301e 	bne	r2,zero,2012a74 <OSFlagPost+0x238>
 20129b4:	00005b06 	br	2012b24 <OSFlagPost+0x2e8>
 20129b8:	e0fffd17 	ldw	r3,-12(fp)
 20129bc:	188000a0 	cmpeqi	r2,r3,2
 20129c0:	1000041e 	bne	r2,zero,20129d4 <OSFlagPost+0x198>
 20129c4:	e0fffd17 	ldw	r3,-12(fp)
 20129c8:	188000e0 	cmpeqi	r2,r3,3
 20129cc:	1000161e 	bne	r2,zero,2012a28 <OSFlagPost+0x1ec>
 20129d0:	00005406 	br	2012b24 <OSFlagPost+0x2e8>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 20129d4:	e0bff917 	ldw	r2,-28(fp)
 20129d8:	10c0020b 	ldhu	r3,8(r2)
 20129dc:	e0bff817 	ldw	r2,-32(fp)
 20129e0:	1080040b 	ldhu	r2,16(r2)
 20129e4:	1884703a 	and	r2,r3,r2
 20129e8:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 20129ec:	e0bff817 	ldw	r2,-32(fp)
 20129f0:	1080040b 	ldhu	r2,16(r2)
 20129f4:	10ffffcc 	andi	r3,r2,65535
 20129f8:	e0bff68b 	ldhu	r2,-38(fp)
 20129fc:	1880521e 	bne	r3,r2,2012b48 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2012a00:	e17ff68b 	ldhu	r5,-38(fp)
 2012a04:	e13ff817 	ldw	r4,-32(fp)
 2012a08:	2012f600 	call	2012f60 <OS_FlagTaskRdy>
 2012a0c:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 2012a10:	e0bff603 	ldbu	r2,-40(fp)
 2012a14:	10800058 	cmpnei	r2,r2,1
 2012a18:	10004b1e 	bne	r2,zero,2012b48 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2012a1c:	00800044 	movi	r2,1
 2012a20:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 2012a24:	00004806 	br	2012b48 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2012a28:	e0bff917 	ldw	r2,-28(fp)
 2012a2c:	10c0020b 	ldhu	r3,8(r2)
 2012a30:	e0bff817 	ldw	r2,-32(fp)
 2012a34:	1080040b 	ldhu	r2,16(r2)
 2012a38:	1884703a 	and	r2,r3,r2
 2012a3c:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2012a40:	e0bff68b 	ldhu	r2,-38(fp)
 2012a44:	1005003a 	cmpeq	r2,r2,zero
 2012a48:	10003f1e 	bne	r2,zero,2012b48 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2012a4c:	e17ff68b 	ldhu	r5,-38(fp)
 2012a50:	e13ff817 	ldw	r4,-32(fp)
 2012a54:	2012f600 	call	2012f60 <OS_FlagTaskRdy>
 2012a58:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 2012a5c:	e0bff603 	ldbu	r2,-40(fp)
 2012a60:	10800058 	cmpnei	r2,r2,1
 2012a64:	1000381e 	bne	r2,zero,2012b48 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2012a68:	00800044 	movi	r2,1
 2012a6c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 2012a70:	00003506 	br	2012b48 <OSFlagPost+0x30c>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2012a74:	e0bff917 	ldw	r2,-28(fp)
 2012a78:	1080020b 	ldhu	r2,8(r2)
 2012a7c:	0084303a 	nor	r2,zero,r2
 2012a80:	1007883a 	mov	r3,r2
 2012a84:	e0bff817 	ldw	r2,-32(fp)
 2012a88:	1080040b 	ldhu	r2,16(r2)
 2012a8c:	1884703a 	and	r2,r3,r2
 2012a90:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 2012a94:	e0bff817 	ldw	r2,-32(fp)
 2012a98:	1080040b 	ldhu	r2,16(r2)
 2012a9c:	10ffffcc 	andi	r3,r2,65535
 2012aa0:	e0bff68b 	ldhu	r2,-38(fp)
 2012aa4:	1880281e 	bne	r3,r2,2012b48 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2012aa8:	e17ff68b 	ldhu	r5,-38(fp)
 2012aac:	e13ff817 	ldw	r4,-32(fp)
 2012ab0:	2012f600 	call	2012f60 <OS_FlagTaskRdy>
 2012ab4:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 2012ab8:	e0bff603 	ldbu	r2,-40(fp)
 2012abc:	10800058 	cmpnei	r2,r2,1
 2012ac0:	1000211e 	bne	r2,zero,2012b48 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2012ac4:	00800044 	movi	r2,1
 2012ac8:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 2012acc:	00001e06 	br	2012b48 <OSFlagPost+0x30c>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 2012ad0:	e0bff917 	ldw	r2,-28(fp)
 2012ad4:	1080020b 	ldhu	r2,8(r2)
 2012ad8:	0084303a 	nor	r2,zero,r2
 2012adc:	1007883a 	mov	r3,r2
 2012ae0:	e0bff817 	ldw	r2,-32(fp)
 2012ae4:	1080040b 	ldhu	r2,16(r2)
 2012ae8:	1884703a 	and	r2,r3,r2
 2012aec:	e0bff68d 	sth	r2,-38(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 2012af0:	e0bff68b 	ldhu	r2,-38(fp)
 2012af4:	1005003a 	cmpeq	r2,r2,zero
 2012af8:	1000131e 	bne	r2,zero,2012b48 <OSFlagPost+0x30c>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 2012afc:	e17ff68b 	ldhu	r5,-38(fp)
 2012b00:	e13ff817 	ldw	r4,-32(fp)
 2012b04:	2012f600 	call	2012f60 <OS_FlagTaskRdy>
 2012b08:	e0bff605 	stb	r2,-40(fp)
                     if (rdy == OS_TRUE) {
 2012b0c:	e0bff603 	ldbu	r2,-40(fp)
 2012b10:	10800058 	cmpnei	r2,r2,1
 2012b14:	10000c1e 	bne	r2,zero,2012b48 <OSFlagPost+0x30c>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 2012b18:	00800044 	movi	r2,1
 2012b1c:	e0bff785 	stb	r2,-34(fp)
                     }
                 }
                 break;
 2012b20:	00000906 	br	2012b48 <OSFlagPost+0x30c>
 2012b24:	e0bff517 	ldw	r2,-44(fp)
 2012b28:	e0bff215 	stw	r2,-56(fp)
 2012b2c:	e0bff217 	ldw	r2,-56(fp)
 2012b30:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 2012b34:	e0fffc17 	ldw	r3,-16(fp)
 2012b38:	00801bc4 	movi	r2,111
 2012b3c:	18800005 	stb	r2,0(r3)
                 return ((OS_FLAGS)0);
 2012b40:	e03fff15 	stw	zero,-4(fp)
 2012b44:	00002106 	br	2012bcc <OSFlagPost+0x390>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 2012b48:	e0bff817 	ldw	r2,-32(fp)
 2012b4c:	10800017 	ldw	r2,0(r2)
 2012b50:	e0bff815 	stw	r2,-32(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 2012b54:	e0bff817 	ldw	r2,-32(fp)
 2012b58:	1004c03a 	cmpne	r2,r2,zero
 2012b5c:	103f881e 	bne	r2,zero,2012980 <OSFlagPost+0x144>
 2012b60:	e0bff517 	ldw	r2,-44(fp)
 2012b64:	e0bff115 	stw	r2,-60(fp)
 2012b68:	e0bff117 	ldw	r2,-60(fp)
 2012b6c:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 2012b70:	e0bff783 	ldbu	r2,-34(fp)
 2012b74:	10800058 	cmpnei	r2,r2,1
 2012b78:	1000011e 	bne	r2,zero,2012b80 <OSFlagPost+0x344>
        OS_Sched();
 2012b7c:	2010f6c0 	call	2010f6c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012b80:	0005303a 	rdctl	r2,status
 2012b84:	e0bff015 	stw	r2,-64(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012b88:	e0fff017 	ldw	r3,-64(fp)
 2012b8c:	00bfff84 	movi	r2,-2
 2012b90:	1884703a 	and	r2,r3,r2
 2012b94:	1001703a 	wrctl	status,r2
  
  return context;
 2012b98:	e0bff017 	ldw	r2,-64(fp)
    }
    OS_ENTER_CRITICAL();
 2012b9c:	e0bff515 	stw	r2,-44(fp)
    flags_cur = pgrp->OSFlagFlags;
 2012ba0:	e0bff917 	ldw	r2,-28(fp)
 2012ba4:	1080020b 	ldhu	r2,8(r2)
 2012ba8:	e0bff70d 	sth	r2,-36(fp)
 2012bac:	e0bff517 	ldw	r2,-44(fp)
 2012bb0:	e0bfef15 	stw	r2,-68(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012bb4:	e0bfef17 	ldw	r2,-68(fp)
 2012bb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 2012bbc:	e0bffc17 	ldw	r2,-16(fp)
 2012bc0:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 2012bc4:	e0bff70b 	ldhu	r2,-36(fp)
 2012bc8:	e0bfff15 	stw	r2,-4(fp)
 2012bcc:	e0bfff17 	ldw	r2,-4(fp)
}
 2012bd0:	e037883a 	mov	sp,fp
 2012bd4:	dfc00117 	ldw	ra,4(sp)
 2012bd8:	df000017 	ldw	fp,0(sp)
 2012bdc:	dec00204 	addi	sp,sp,8
 2012be0:	f800283a 	ret

02012be4 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 2012be4:	defff804 	addi	sp,sp,-32
 2012be8:	df000715 	stw	fp,28(sp)
 2012bec:	df000704 	addi	fp,sp,28
 2012bf0:	e13ffd15 	stw	r4,-12(fp)
 2012bf4:	e17ffe15 	stw	r5,-8(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 2012bf8:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 2012bfc:	e0bffe17 	ldw	r2,-8(fp)
 2012c00:	1004c03a 	cmpne	r2,r2,zero
 2012c04:	1000021e 	bne	r2,zero,2012c10 <OSFlagQuery+0x2c>
        return ((OS_FLAGS)0);
 2012c08:	e03fff15 	stw	zero,-4(fp)
 2012c0c:	00002506 	br	2012ca4 <OSFlagQuery+0xc0>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 2012c10:	e0bffd17 	ldw	r2,-12(fp)
 2012c14:	1004c03a 	cmpne	r2,r2,zero
 2012c18:	1000051e 	bne	r2,zero,2012c30 <OSFlagQuery+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 2012c1c:	e0fffe17 	ldw	r3,-8(fp)
 2012c20:	00801b84 	movi	r2,110
 2012c24:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 2012c28:	e03fff15 	stw	zero,-4(fp)
 2012c2c:	00001d06 	br	2012ca4 <OSFlagQuery+0xc0>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 2012c30:	e0bffd17 	ldw	r2,-12(fp)
 2012c34:	10800003 	ldbu	r2,0(r2)
 2012c38:	10803fcc 	andi	r2,r2,255
 2012c3c:	10800160 	cmpeqi	r2,r2,5
 2012c40:	1000051e 	bne	r2,zero,2012c58 <OSFlagQuery+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 2012c44:	e0fffe17 	ldw	r3,-8(fp)
 2012c48:	00800044 	movi	r2,1
 2012c4c:	18800005 	stb	r2,0(r3)
        return ((OS_FLAGS)0);
 2012c50:	e03fff15 	stw	zero,-4(fp)
 2012c54:	00001306 	br	2012ca4 <OSFlagQuery+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2012c58:	0005303a 	rdctl	r2,status
 2012c5c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2012c60:	e0fffa17 	ldw	r3,-24(fp)
 2012c64:	00bfff84 	movi	r2,-2
 2012c68:	1884703a 	and	r2,r3,r2
 2012c6c:	1001703a 	wrctl	status,r2
  
  return context;
 2012c70:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2012c74:	e0bffb15 	stw	r2,-20(fp)
    flags = pgrp->OSFlagFlags;
 2012c78:	e0bffd17 	ldw	r2,-12(fp)
 2012c7c:	1080020b 	ldhu	r2,8(r2)
 2012c80:	e0bffc0d 	sth	r2,-16(fp)
 2012c84:	e0bffb17 	ldw	r2,-20(fp)
 2012c88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2012c8c:	e0bff917 	ldw	r2,-28(fp)
 2012c90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2012c94:	e0bffe17 	ldw	r2,-8(fp)
 2012c98:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 2012c9c:	e0bffc0b 	ldhu	r2,-16(fp)
 2012ca0:	e0bfff15 	stw	r2,-4(fp)
 2012ca4:	e0bfff17 	ldw	r2,-4(fp)
}
 2012ca8:	e037883a 	mov	sp,fp
 2012cac:	df000017 	ldw	fp,0(sp)
 2012cb0:	dec00104 	addi	sp,sp,4
 2012cb4:	f800283a 	ret

02012cb8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 2012cb8:	defff804 	addi	sp,sp,-32
 2012cbc:	df000715 	stw	fp,28(sp)
 2012cc0:	df000704 	addi	fp,sp,28
 2012cc4:	e13ffb15 	stw	r4,-20(fp)
 2012cc8:	e17ffc15 	stw	r5,-16(fp)
 2012ccc:	e0800117 	ldw	r2,4(fp)
 2012cd0:	e1bffd0d 	sth	r6,-12(fp)
 2012cd4:	e1fffe05 	stb	r7,-8(fp)
 2012cd8:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 2012cdc:	008080b4 	movhi	r2,514
 2012ce0:	10b81504 	addi	r2,r2,-8108
 2012ce4:	10c00017 	ldw	r3,0(r2)
 2012ce8:	008080b4 	movhi	r2,514
 2012cec:	10b81504 	addi	r2,r2,-8108
 2012cf0:	10800017 	ldw	r2,0(r2)
 2012cf4:	10800c03 	ldbu	r2,48(r2)
 2012cf8:	10800814 	ori	r2,r2,32
 2012cfc:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 2012d00:	008080b4 	movhi	r2,514
 2012d04:	10b81504 	addi	r2,r2,-8108
 2012d08:	10800017 	ldw	r2,0(r2)
 2012d0c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 2012d10:	008080b4 	movhi	r2,514
 2012d14:	10b81504 	addi	r2,r2,-8108
 2012d18:	10c00017 	ldw	r3,0(r2)
 2012d1c:	e0bfff0b 	ldhu	r2,-4(fp)
 2012d20:	18800b8d 	sth	r2,46(r3)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 2012d24:	008080b4 	movhi	r2,514
 2012d28:	10b81504 	addi	r2,r2,-8108
 2012d2c:	10c00017 	ldw	r3,0(r2)
 2012d30:	e0bffc17 	ldw	r2,-16(fp)
 2012d34:	18800a15 	stw	r2,40(r3)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 2012d38:	e0fffc17 	ldw	r3,-16(fp)
 2012d3c:	e0bffd0b 	ldhu	r2,-12(fp)
 2012d40:	1880040d 	sth	r2,16(r3)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 2012d44:	e0fffc17 	ldw	r3,-16(fp)
 2012d48:	e0bffe03 	ldbu	r2,-8(fp)
 2012d4c:	18800485 	stb	r2,18(r3)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 2012d50:	008080b4 	movhi	r2,514
 2012d54:	10b81504 	addi	r2,r2,-8108
 2012d58:	10c00017 	ldw	r3,0(r2)
 2012d5c:	e0bffc17 	ldw	r2,-16(fp)
 2012d60:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 2012d64:	e0bffb17 	ldw	r2,-20(fp)
 2012d68:	10c00117 	ldw	r3,4(r2)
 2012d6c:	e0bffc17 	ldw	r2,-16(fp)
 2012d70:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 2012d74:	e0bffc17 	ldw	r2,-16(fp)
 2012d78:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 2012d7c:	e0fffc17 	ldw	r3,-16(fp)
 2012d80:	e0bffb17 	ldw	r2,-20(fp)
 2012d84:	18800315 	stw	r2,12(r3)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 2012d88:	e0bffb17 	ldw	r2,-20(fp)
 2012d8c:	10800117 	ldw	r2,4(r2)
 2012d90:	e0bffa15 	stw	r2,-24(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 2012d94:	e0bffa17 	ldw	r2,-24(fp)
 2012d98:	1005003a 	cmpeq	r2,r2,zero
 2012d9c:	1000031e 	bne	r2,zero,2012dac <OS_FlagBlock+0xf4>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 2012da0:	e0fffa17 	ldw	r3,-24(fp)
 2012da4:	e0bffc17 	ldw	r2,-16(fp)
 2012da8:	18800115 	stw	r2,4(r3)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 2012dac:	e0fffb17 	ldw	r3,-20(fp)
 2012db0:	e0bffc17 	ldw	r2,-16(fp)
 2012db4:	18800115 	stw	r2,4(r3)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 2012db8:	008080b4 	movhi	r2,514
 2012dbc:	10b81504 	addi	r2,r2,-8108
 2012dc0:	10800017 	ldw	r2,0(r2)
 2012dc4:	10800d03 	ldbu	r2,52(r2)
 2012dc8:	e0bff905 	stb	r2,-28(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 2012dcc:	e13ff903 	ldbu	r4,-28(fp)
 2012dd0:	e0fff903 	ldbu	r3,-28(fp)
 2012dd4:	008080b4 	movhi	r2,514
 2012dd8:	10b81244 	addi	r2,r2,-8119
 2012ddc:	10c5883a 	add	r2,r2,r3
 2012de0:	10800003 	ldbu	r2,0(r2)
 2012de4:	1007883a 	mov	r3,r2
 2012de8:	008080b4 	movhi	r2,514
 2012dec:	10b81504 	addi	r2,r2,-8108
 2012df0:	10800017 	ldw	r2,0(r2)
 2012df4:	10800d43 	ldbu	r2,53(r2)
 2012df8:	0084303a 	nor	r2,zero,r2
 2012dfc:	1884703a 	and	r2,r3,r2
 2012e00:	1007883a 	mov	r3,r2
 2012e04:	008080b4 	movhi	r2,514
 2012e08:	10b81244 	addi	r2,r2,-8119
 2012e0c:	1105883a 	add	r2,r2,r4
 2012e10:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 2012e14:	e0fff903 	ldbu	r3,-28(fp)
 2012e18:	008080b4 	movhi	r2,514
 2012e1c:	10b81244 	addi	r2,r2,-8119
 2012e20:	10c5883a 	add	r2,r2,r3
 2012e24:	10800003 	ldbu	r2,0(r2)
 2012e28:	10803fcc 	andi	r2,r2,255
 2012e2c:	1004c03a 	cmpne	r2,r2,zero
 2012e30:	10000e1e 	bne	r2,zero,2012e6c <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 2012e34:	008080b4 	movhi	r2,514
 2012e38:	10b81504 	addi	r2,r2,-8108
 2012e3c:	10800017 	ldw	r2,0(r2)
 2012e40:	10800d83 	ldbu	r2,54(r2)
 2012e44:	0084303a 	nor	r2,zero,r2
 2012e48:	1007883a 	mov	r3,r2
 2012e4c:	008080b4 	movhi	r2,514
 2012e50:	10b81204 	addi	r2,r2,-8120
 2012e54:	10800003 	ldbu	r2,0(r2)
 2012e58:	1884703a 	and	r2,r3,r2
 2012e5c:	1007883a 	mov	r3,r2
 2012e60:	008080b4 	movhi	r2,514
 2012e64:	10b81204 	addi	r2,r2,-8120
 2012e68:	10c00005 	stb	r3,0(r2)
    }
}
 2012e6c:	e037883a 	mov	sp,fp
 2012e70:	df000017 	ldw	fp,0(sp)
 2012e74:	dec00104 	addi	sp,sp,4
 2012e78:	f800283a 	ret

02012e7c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 2012e7c:	defffb04 	addi	sp,sp,-20
 2012e80:	dfc00415 	stw	ra,16(sp)
 2012e84:	df000315 	stw	fp,12(sp)
 2012e88:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 2012e8c:	010080b4 	movhi	r4,514
 2012e90:	2119f604 	addi	r4,r4,26584
 2012e94:	0140dc04 	movi	r5,880
 2012e98:	2010eac0 	call	2010eac <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 2012e9c:	008080b4 	movhi	r2,514
 2012ea0:	1099f604 	addi	r2,r2,26584
 2012ea4:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 2012ea8:	008080b4 	movhi	r2,514
 2012eac:	109a0104 	addi	r2,r2,26628
 2012eb0:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 2012eb4:	e03fff0d 	sth	zero,-4(fp)
 2012eb8:	00001306 	br	2012f08 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2012ebc:	e0bffe17 	ldw	r2,-8(fp)
 2012ec0:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 2012ec4:	e0fffe17 	ldw	r3,-8(fp)
 2012ec8:	e0bffd17 	ldw	r2,-12(fp)
 2012ecc:	18800115 	stw	r2,4(r3)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 2012ed0:	e0fffe17 	ldw	r3,-8(fp)
 2012ed4:	00800fc4 	movi	r2,63
 2012ed8:	18800285 	stb	r2,10(r3)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 2012edc:	e0bffe17 	ldw	r2,-8(fp)
 2012ee0:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 2012ee4:	e0bffe17 	ldw	r2,-8(fp)
 2012ee8:	10800b04 	addi	r2,r2,44
 2012eec:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 2012ef0:	e0bffd17 	ldw	r2,-12(fp)
 2012ef4:	10800b04 	addi	r2,r2,44
 2012ef8:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 2012efc:	e0bfff0b 	ldhu	r2,-4(fp)
 2012f00:	10800044 	addi	r2,r2,1
 2012f04:	e0bfff0d 	sth	r2,-4(fp)
 2012f08:	e0bfff0b 	ldhu	r2,-4(fp)
 2012f0c:	108004f0 	cmpltui	r2,r2,19
 2012f10:	103fea1e 	bne	r2,zero,2012ebc <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 2012f14:	e0bffe17 	ldw	r2,-8(fp)
 2012f18:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 2012f1c:	e0bffe17 	ldw	r2,-8(fp)
 2012f20:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 2012f24:	e0fffe17 	ldw	r3,-8(fp)
 2012f28:	00800fc4 	movi	r2,63
 2012f2c:	18800285 	stb	r2,10(r3)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 2012f30:	e0bffe17 	ldw	r2,-8(fp)
 2012f34:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 2012f38:	00c080b4 	movhi	r3,514
 2012f3c:	18f81704 	addi	r3,r3,-8100
 2012f40:	008080b4 	movhi	r2,514
 2012f44:	1099f604 	addi	r2,r2,26584
 2012f48:	18800015 	stw	r2,0(r3)
#endif
}
 2012f4c:	e037883a 	mov	sp,fp
 2012f50:	dfc00117 	ldw	ra,4(sp)
 2012f54:	df000017 	ldw	fp,0(sp)
 2012f58:	dec00204 	addi	sp,sp,8
 2012f5c:	f800283a 	ret

02012f60 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 2012f60:	defffa04 	addi	sp,sp,-24
 2012f64:	dfc00515 	stw	ra,20(sp)
 2012f68:	df000415 	stw	fp,16(sp)
 2012f6c:	df000404 	addi	fp,sp,16
 2012f70:	e13ffe15 	stw	r4,-8(fp)
 2012f74:	e17fff0d 	sth	r5,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 2012f78:	e0bffe17 	ldw	r2,-8(fp)
 2012f7c:	10800217 	ldw	r2,8(r2)
 2012f80:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 2012f84:	e0bffd17 	ldw	r2,-12(fp)
 2012f88:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 2012f8c:	e0fffd17 	ldw	r3,-12(fp)
 2012f90:	e0bfff0b 	ldhu	r2,-4(fp)
 2012f94:	18800b0d 	sth	r2,44(r3)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 2012f98:	e0bffd17 	ldw	r2,-12(fp)
 2012f9c:	10c00c03 	ldbu	r3,48(r2)
 2012fa0:	00bff7c4 	movi	r2,-33
 2012fa4:	1884703a 	and	r2,r3,r2
 2012fa8:	1007883a 	mov	r3,r2
 2012fac:	e0bffd17 	ldw	r2,-12(fp)
 2012fb0:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 2012fb4:	e0bffd17 	ldw	r2,-12(fp)
 2012fb8:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 2012fbc:	e0bffd17 	ldw	r2,-12(fp)
 2012fc0:	10800c03 	ldbu	r2,48(r2)
 2012fc4:	10803fcc 	andi	r2,r2,255
 2012fc8:	1004c03a 	cmpne	r2,r2,zero
 2012fcc:	10001f1e 	bne	r2,zero,201304c <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 2012fd0:	e0bffd17 	ldw	r2,-12(fp)
 2012fd4:	10c00d83 	ldbu	r3,54(r2)
 2012fd8:	008080b4 	movhi	r2,514
 2012fdc:	10b81204 	addi	r2,r2,-8120
 2012fe0:	10800003 	ldbu	r2,0(r2)
 2012fe4:	1884b03a 	or	r2,r3,r2
 2012fe8:	1007883a 	mov	r3,r2
 2012fec:	008080b4 	movhi	r2,514
 2012ff0:	10b81204 	addi	r2,r2,-8120
 2012ff4:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2012ff8:	e0bffd17 	ldw	r2,-12(fp)
 2012ffc:	10800d03 	ldbu	r2,52(r2)
 2013000:	11003fcc 	andi	r4,r2,255
 2013004:	e0bffd17 	ldw	r2,-12(fp)
 2013008:	10800d03 	ldbu	r2,52(r2)
 201300c:	10c03fcc 	andi	r3,r2,255
 2013010:	008080b4 	movhi	r2,514
 2013014:	10b81244 	addi	r2,r2,-8119
 2013018:	10c5883a 	add	r2,r2,r3
 201301c:	10c00003 	ldbu	r3,0(r2)
 2013020:	e0bffd17 	ldw	r2,-12(fp)
 2013024:	10800d43 	ldbu	r2,53(r2)
 2013028:	1884b03a 	or	r2,r3,r2
 201302c:	1007883a 	mov	r3,r2
 2013030:	008080b4 	movhi	r2,514
 2013034:	10b81244 	addi	r2,r2,-8119
 2013038:	1105883a 	add	r2,r2,r4
 201303c:	10c00005 	stb	r3,0(r2)
        sched                   = OS_TRUE;
 2013040:	00800044 	movi	r2,1
 2013044:	e0bffc05 	stb	r2,-16(fp)
 2013048:	00000106 	br	2013050 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
 201304c:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 2013050:	e13ffe17 	ldw	r4,-8(fp)
 2013054:	20130700 	call	2013070 <OS_FlagUnlink>
    return (sched);
 2013058:	e0bffc03 	ldbu	r2,-16(fp)
}
 201305c:	e037883a 	mov	sp,fp
 2013060:	dfc00117 	ldw	ra,4(sp)
 2013064:	df000017 	ldw	fp,0(sp)
 2013068:	dec00204 	addi	sp,sp,8
 201306c:	f800283a 	ret

02013070 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 2013070:	defffa04 	addi	sp,sp,-24
 2013074:	df000515 	stw	fp,20(sp)
 2013078:	df000504 	addi	fp,sp,20
 201307c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 2013080:	e0bfff17 	ldw	r2,-4(fp)
 2013084:	10800117 	ldw	r2,4(r2)
 2013088:	e0bffc15 	stw	r2,-16(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 201308c:	e0bfff17 	ldw	r2,-4(fp)
 2013090:	10800017 	ldw	r2,0(r2)
 2013094:	e0bffb15 	stw	r2,-20(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 2013098:	e0bffc17 	ldw	r2,-16(fp)
 201309c:	1004c03a 	cmpne	r2,r2,zero
 20130a0:	10000c1e 	bne	r2,zero,20130d4 <OS_FlagUnlink+0x64>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 20130a4:	e0bfff17 	ldw	r2,-4(fp)
 20130a8:	10800317 	ldw	r2,12(r2)
 20130ac:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 20130b0:	e0fffd17 	ldw	r3,-12(fp)
 20130b4:	e0bffb17 	ldw	r2,-20(fp)
 20130b8:	18800115 	stw	r2,4(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 20130bc:	e0bffb17 	ldw	r2,-20(fp)
 20130c0:	1005003a 	cmpeq	r2,r2,zero
 20130c4:	10000c1e 	bne	r2,zero,20130f8 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 20130c8:	e0bffb17 	ldw	r2,-20(fp)
 20130cc:	10000115 	stw	zero,4(r2)
 20130d0:	00000906 	br	20130f8 <OS_FlagUnlink+0x88>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 20130d4:	e0fffc17 	ldw	r3,-16(fp)
 20130d8:	e0bffb17 	ldw	r2,-20(fp)
 20130dc:	18800015 	stw	r2,0(r3)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 20130e0:	e0bffb17 	ldw	r2,-20(fp)
 20130e4:	1005003a 	cmpeq	r2,r2,zero
 20130e8:	1000031e 	bne	r2,zero,20130f8 <OS_FlagUnlink+0x88>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 20130ec:	e0fffb17 	ldw	r3,-20(fp)
 20130f0:	e0bffc17 	ldw	r2,-16(fp)
 20130f4:	18800115 	stw	r2,4(r3)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 20130f8:	e0bfff17 	ldw	r2,-4(fp)
 20130fc:	10800217 	ldw	r2,8(r2)
 2013100:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 2013104:	e0bffe17 	ldw	r2,-8(fp)
 2013108:	10000a15 	stw	zero,40(r2)
#endif
}
 201310c:	e037883a 	mov	sp,fp
 2013110:	df000017 	ldw	fp,0(sp)
 2013114:	dec00104 	addi	sp,sp,4
 2013118:	f800283a 	ret

0201311c <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 201311c:	defff304 	addi	sp,sp,-52
 2013120:	df000c15 	stw	fp,48(sp)
 2013124:	df000c04 	addi	fp,sp,48
 2013128:	e13ffb15 	stw	r4,-20(fp)
 201312c:	e17ffc15 	stw	r5,-16(fp)
 2013130:	e1bffd15 	stw	r6,-12(fp)
 2013134:	e1fffe15 	stw	r7,-8(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2013138:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201313c:	e0bffe17 	ldw	r2,-8(fp)
 2013140:	1004c03a 	cmpne	r2,r2,zero
 2013144:	1000021e 	bne	r2,zero,2013150 <OSMemCreate+0x34>
        return ((OS_MEM *)0);
 2013148:	e03fff15 	stw	zero,-4(fp)
 201314c:	00007506 	br	2013324 <OSMemCreate+0x208>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 2013150:	e0bffb17 	ldw	r2,-20(fp)
 2013154:	1004c03a 	cmpne	r2,r2,zero
 2013158:	1000051e 	bne	r2,zero,2013170 <OSMemCreate+0x54>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 201315c:	e0fffe17 	ldw	r3,-8(fp)
 2013160:	00801884 	movi	r2,98
 2013164:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 2013168:	e03fff15 	stw	zero,-4(fp)
 201316c:	00006d06 	br	2013324 <OSMemCreate+0x208>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 2013170:	e0bffb17 	ldw	r2,-20(fp)
 2013174:	108000cc 	andi	r2,r2,3
 2013178:	1005003a 	cmpeq	r2,r2,zero
 201317c:	1000051e 	bne	r2,zero,2013194 <OSMemCreate+0x78>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 2013180:	e0fffe17 	ldw	r3,-8(fp)
 2013184:	00801884 	movi	r2,98
 2013188:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 201318c:	e03fff15 	stw	zero,-4(fp)
 2013190:	00006406 	br	2013324 <OSMemCreate+0x208>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 2013194:	e0bffc17 	ldw	r2,-16(fp)
 2013198:	108000a8 	cmpgeui	r2,r2,2
 201319c:	1000051e 	bne	r2,zero,20131b4 <OSMemCreate+0x98>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 20131a0:	e0fffe17 	ldw	r3,-8(fp)
 20131a4:	008016c4 	movi	r2,91
 20131a8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 20131ac:	e03fff15 	stw	zero,-4(fp)
 20131b0:	00005c06 	br	2013324 <OSMemCreate+0x208>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 20131b4:	e0bffd17 	ldw	r2,-12(fp)
 20131b8:	10800128 	cmpgeui	r2,r2,4
 20131bc:	1000051e 	bne	r2,zero,20131d4 <OSMemCreate+0xb8>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 20131c0:	e0fffe17 	ldw	r3,-8(fp)
 20131c4:	00801704 	movi	r2,92
 20131c8:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 20131cc:	e03fff15 	stw	zero,-4(fp)
 20131d0:	00005406 	br	2013324 <OSMemCreate+0x208>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20131d4:	0005303a 	rdctl	r2,status
 20131d8:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20131dc:	e0fff517 	ldw	r3,-44(fp)
 20131e0:	00bfff84 	movi	r2,-2
 20131e4:	1884703a 	and	r2,r3,r2
 20131e8:	1001703a 	wrctl	status,r2
  
  return context;
 20131ec:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20131f0:	e0bff615 	stw	r2,-40(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 20131f4:	008080b4 	movhi	r2,514
 20131f8:	10b80f04 	addi	r2,r2,-8132
 20131fc:	10800017 	ldw	r2,0(r2)
 2013200:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 2013204:	008080b4 	movhi	r2,514
 2013208:	10b80f04 	addi	r2,r2,-8132
 201320c:	10800017 	ldw	r2,0(r2)
 2013210:	1005003a 	cmpeq	r2,r2,zero
 2013214:	1000081e 	bne	r2,zero,2013238 <OSMemCreate+0x11c>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 2013218:	008080b4 	movhi	r2,514
 201321c:	10b80f04 	addi	r2,r2,-8132
 2013220:	10800017 	ldw	r2,0(r2)
 2013224:	10800117 	ldw	r2,4(r2)
 2013228:	1007883a 	mov	r3,r2
 201322c:	008080b4 	movhi	r2,514
 2013230:	10b80f04 	addi	r2,r2,-8132
 2013234:	10c00015 	stw	r3,0(r2)
 2013238:	e0bff617 	ldw	r2,-40(fp)
 201323c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013240:	e0bff417 	ldw	r2,-48(fp)
 2013244:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 2013248:	e0bffa17 	ldw	r2,-24(fp)
 201324c:	1004c03a 	cmpne	r2,r2,zero
 2013250:	1000051e 	bne	r2,zero,2013268 <OSMemCreate+0x14c>
        *perr = OS_ERR_MEM_INVALID_PART;
 2013254:	e0fffe17 	ldw	r3,-8(fp)
 2013258:	00801684 	movi	r2,90
 201325c:	18800005 	stb	r2,0(r3)
        return ((OS_MEM *)0);
 2013260:	e03fff15 	stw	zero,-4(fp)
 2013264:	00002f06 	br	2013324 <OSMemCreate+0x208>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 2013268:	e0bffb17 	ldw	r2,-20(fp)
 201326c:	e0bff815 	stw	r2,-32(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 2013270:	e0bffb17 	ldw	r2,-20(fp)
 2013274:	1007883a 	mov	r3,r2
 2013278:	e0bffd17 	ldw	r2,-12(fp)
 201327c:	1885883a 	add	r2,r3,r2
 2013280:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < (nblks - 1); i++) {
 2013284:	e03ff715 	stw	zero,-36(fp)
 2013288:	00000d06 	br	20132c0 <OSMemCreate+0x1a4>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 201328c:	e0fff817 	ldw	r3,-32(fp)
 2013290:	e0bff917 	ldw	r2,-28(fp)
 2013294:	18800015 	stw	r2,0(r3)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 2013298:	e0bff917 	ldw	r2,-28(fp)
 201329c:	e0bff815 	stw	r2,-32(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 20132a0:	e0bff917 	ldw	r2,-28(fp)
 20132a4:	1007883a 	mov	r3,r2
 20132a8:	e0bffd17 	ldw	r2,-12(fp)
 20132ac:	1885883a 	add	r2,r3,r2
 20132b0:	e0bff915 	stw	r2,-28(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 20132b4:	e0bff717 	ldw	r2,-36(fp)
 20132b8:	10800044 	addi	r2,r2,1
 20132bc:	e0bff715 	stw	r2,-36(fp)
 20132c0:	e0bffc17 	ldw	r2,-16(fp)
 20132c4:	10ffffc4 	addi	r3,r2,-1
 20132c8:	e0bff717 	ldw	r2,-36(fp)
 20132cc:	10ffef36 	bltu	r2,r3,201328c <OSMemCreate+0x170>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 20132d0:	e0bff817 	ldw	r2,-32(fp)
 20132d4:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 20132d8:	e0fffa17 	ldw	r3,-24(fp)
 20132dc:	e0bffb17 	ldw	r2,-20(fp)
 20132e0:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 20132e4:	e0fffa17 	ldw	r3,-24(fp)
 20132e8:	e0bffb17 	ldw	r2,-20(fp)
 20132ec:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 20132f0:	e0fffa17 	ldw	r3,-24(fp)
 20132f4:	e0bffc17 	ldw	r2,-16(fp)
 20132f8:	18800415 	stw	r2,16(r3)
    pmem->OSMemNBlks    = nblks;
 20132fc:	e0fffa17 	ldw	r3,-24(fp)
 2013300:	e0bffc17 	ldw	r2,-16(fp)
 2013304:	18800315 	stw	r2,12(r3)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 2013308:	e0fffa17 	ldw	r3,-24(fp)
 201330c:	e0bffd17 	ldw	r2,-12(fp)
 2013310:	18800215 	stw	r2,8(r3)
    *perr               = OS_ERR_NONE;
 2013314:	e0bffe17 	ldw	r2,-8(fp)
 2013318:	10000005 	stb	zero,0(r2)
    return (pmem);
 201331c:	e0bffa17 	ldw	r2,-24(fp)
 2013320:	e0bfff15 	stw	r2,-4(fp)
 2013324:	e0bfff17 	ldw	r2,-4(fp)
}
 2013328:	e037883a 	mov	sp,fp
 201332c:	df000017 	ldw	fp,0(sp)
 2013330:	dec00104 	addi	sp,sp,4
 2013334:	f800283a 	ret

02013338 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 2013338:	defff704 	addi	sp,sp,-36
 201333c:	df000815 	stw	fp,32(sp)
 2013340:	df000804 	addi	fp,sp,32
 2013344:	e13ffd15 	stw	r4,-12(fp)
 2013348:	e17ffe15 	stw	r5,-8(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201334c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 2013350:	e0bffe17 	ldw	r2,-8(fp)
 2013354:	1004c03a 	cmpne	r2,r2,zero
 2013358:	1000021e 	bne	r2,zero,2013364 <OSMemGet+0x2c>
        return ((void *)0);
 201335c:	e03fff15 	stw	zero,-4(fp)
 2013360:	00003106 	br	2013428 <OSMemGet+0xf0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 2013364:	e0bffd17 	ldw	r2,-12(fp)
 2013368:	1004c03a 	cmpne	r2,r2,zero
 201336c:	1000051e 	bne	r2,zero,2013384 <OSMemGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2013370:	e0fffe17 	ldw	r3,-8(fp)
 2013374:	00801804 	movi	r2,96
 2013378:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 201337c:	e03fff15 	stw	zero,-4(fp)
 2013380:	00002906 	br	2013428 <OSMemGet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013384:	0005303a 	rdctl	r2,status
 2013388:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201338c:	e0fffa17 	ldw	r3,-24(fp)
 2013390:	00bfff84 	movi	r2,-2
 2013394:	1884703a 	and	r2,r3,r2
 2013398:	1001703a 	wrctl	status,r2
  
  return context;
 201339c:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20133a0:	e0bffb15 	stw	r2,-20(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 20133a4:	e0bffd17 	ldw	r2,-12(fp)
 20133a8:	10800417 	ldw	r2,16(r2)
 20133ac:	1005003a 	cmpeq	r2,r2,zero
 20133b0:	1000151e 	bne	r2,zero,2013408 <OSMemGet+0xd0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 20133b4:	e0bffd17 	ldw	r2,-12(fp)
 20133b8:	10800117 	ldw	r2,4(r2)
 20133bc:	e0bffc15 	stw	r2,-16(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 20133c0:	e0bffc17 	ldw	r2,-16(fp)
 20133c4:	10c00017 	ldw	r3,0(r2)
 20133c8:	e0bffd17 	ldw	r2,-12(fp)
 20133cc:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 20133d0:	e0bffd17 	ldw	r2,-12(fp)
 20133d4:	10800417 	ldw	r2,16(r2)
 20133d8:	10ffffc4 	addi	r3,r2,-1
 20133dc:	e0bffd17 	ldw	r2,-12(fp)
 20133e0:	10c00415 	stw	r3,16(r2)
 20133e4:	e0bffb17 	ldw	r2,-20(fp)
 20133e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20133ec:	e0bff917 	ldw	r2,-28(fp)
 20133f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 20133f4:	e0bffe17 	ldw	r2,-8(fp)
 20133f8:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 20133fc:	e0bffc17 	ldw	r2,-16(fp)
 2013400:	e0bfff15 	stw	r2,-4(fp)
 2013404:	00000806 	br	2013428 <OSMemGet+0xf0>
 2013408:	e0bffb17 	ldw	r2,-20(fp)
 201340c:	e0bff815 	stw	r2,-32(fp)
 2013410:	e0bff817 	ldw	r2,-32(fp)
 2013414:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 2013418:	e0fffe17 	ldw	r3,-8(fp)
 201341c:	00801744 	movi	r2,93
 2013420:	18800005 	stb	r2,0(r3)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 2013424:	e03fff15 	stw	zero,-4(fp)
 2013428:	e0bfff17 	ldw	r2,-4(fp)
}
 201342c:	e037883a 	mov	sp,fp
 2013430:	df000017 	ldw	fp,0(sp)
 2013434:	dec00104 	addi	sp,sp,4
 2013438:	f800283a 	ret

0201343c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 201343c:	defff604 	addi	sp,sp,-40
 2013440:	dfc00915 	stw	ra,36(sp)
 2013444:	df000815 	stw	fp,32(sp)
 2013448:	df000804 	addi	fp,sp,32
 201344c:	e13ffc15 	stw	r4,-16(fp)
 2013450:	e17ffd15 	stw	r5,-12(fp)
 2013454:	e1bffe15 	stw	r6,-8(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013458:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 201345c:	e0bffe17 	ldw	r2,-8(fp)
 2013460:	1004c03a 	cmpne	r2,r2,zero
 2013464:	1000021e 	bne	r2,zero,2013470 <OSMemNameGet+0x34>
        return (0);
 2013468:	e03fff15 	stw	zero,-4(fp)
 201346c:	00003006 	br	2013530 <OSMemNameGet+0xf4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 2013470:	e0bffc17 	ldw	r2,-16(fp)
 2013474:	1004c03a 	cmpne	r2,r2,zero
 2013478:	1000051e 	bne	r2,zero,2013490 <OSMemNameGet+0x54>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 201347c:	e0fffe17 	ldw	r3,-8(fp)
 2013480:	00801804 	movi	r2,96
 2013484:	18800005 	stb	r2,0(r3)
        return (0);
 2013488:	e03fff15 	stw	zero,-4(fp)
 201348c:	00002806 	br	2013530 <OSMemNameGet+0xf4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2013490:	e0bffd17 	ldw	r2,-12(fp)
 2013494:	1004c03a 	cmpne	r2,r2,zero
 2013498:	1000051e 	bne	r2,zero,20134b0 <OSMemNameGet+0x74>
        *perr = OS_ERR_PNAME_NULL;
 201349c:	e0fffe17 	ldw	r3,-8(fp)
 20134a0:	00800304 	movi	r2,12
 20134a4:	18800005 	stb	r2,0(r3)
        return (0);
 20134a8:	e03fff15 	stw	zero,-4(fp)
 20134ac:	00002006 	br	2013530 <OSMemNameGet+0xf4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20134b0:	008080b4 	movhi	r2,514
 20134b4:	10b81404 	addi	r2,r2,-8112
 20134b8:	10800003 	ldbu	r2,0(r2)
 20134bc:	10803fcc 	andi	r2,r2,255
 20134c0:	1005003a 	cmpeq	r2,r2,zero
 20134c4:	1000051e 	bne	r2,zero,20134dc <OSMemNameGet+0xa0>
        *perr = OS_ERR_NAME_GET_ISR;
 20134c8:	e0fffe17 	ldw	r3,-8(fp)
 20134cc:	00800444 	movi	r2,17
 20134d0:	18800005 	stb	r2,0(r3)
        return (0);
 20134d4:	e03fff15 	stw	zero,-4(fp)
 20134d8:	00001506 	br	2013530 <OSMemNameGet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20134dc:	0005303a 	rdctl	r2,status
 20134e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20134e4:	e0fff917 	ldw	r3,-28(fp)
 20134e8:	00bfff84 	movi	r2,-2
 20134ec:	1884703a 	and	r2,r3,r2
 20134f0:	1001703a 	wrctl	status,r2
  
  return context;
 20134f4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 20134f8:	e0bffa15 	stw	r2,-24(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 20134fc:	e0bffc17 	ldw	r2,-16(fp)
 2013500:	11400504 	addi	r5,r2,20
 2013504:	e13ffd17 	ldw	r4,-12(fp)
 2013508:	20110b00 	call	20110b0 <OS_StrCopy>
 201350c:	e0bffb05 	stb	r2,-20(fp)
 2013510:	e0bffa17 	ldw	r2,-24(fp)
 2013514:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013518:	e0bff817 	ldw	r2,-32(fp)
 201351c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2013520:	e0bffe17 	ldw	r2,-8(fp)
 2013524:	10000005 	stb	zero,0(r2)
    return (len);
 2013528:	e0bffb03 	ldbu	r2,-20(fp)
 201352c:	e0bfff15 	stw	r2,-4(fp)
 2013530:	e0bfff17 	ldw	r2,-4(fp)
}
 2013534:	e037883a 	mov	sp,fp
 2013538:	dfc00117 	ldw	ra,4(sp)
 201353c:	df000017 	ldw	fp,0(sp)
 2013540:	dec00204 	addi	sp,sp,8
 2013544:	f800283a 	ret

02013548 <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 2013548:	defff604 	addi	sp,sp,-40
 201354c:	dfc00915 	stw	ra,36(sp)
 2013550:	df000815 	stw	fp,32(sp)
 2013554:	df000804 	addi	fp,sp,32
 2013558:	e13ffd15 	stw	r4,-12(fp)
 201355c:	e17ffe15 	stw	r5,-8(fp)
 2013560:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013564:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2013568:	e0bfff17 	ldw	r2,-4(fp)
 201356c:	1005003a 	cmpeq	r2,r2,zero
 2013570:	1000381e 	bne	r2,zero,2013654 <OSMemNameSet+0x10c>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 2013574:	e0bffd17 	ldw	r2,-12(fp)
 2013578:	1004c03a 	cmpne	r2,r2,zero
 201357c:	1000041e 	bne	r2,zero,2013590 <OSMemNameSet+0x48>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 2013580:	e0ffff17 	ldw	r3,-4(fp)
 2013584:	00801804 	movi	r2,96
 2013588:	18800005 	stb	r2,0(r3)
        return;
 201358c:	00003106 	br	2013654 <OSMemNameSet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 2013590:	e0bffe17 	ldw	r2,-8(fp)
 2013594:	1004c03a 	cmpne	r2,r2,zero
 2013598:	1000041e 	bne	r2,zero,20135ac <OSMemNameSet+0x64>
        *perr = OS_ERR_PNAME_NULL;
 201359c:	e0ffff17 	ldw	r3,-4(fp)
 20135a0:	00800304 	movi	r2,12
 20135a4:	18800005 	stb	r2,0(r3)
        return;
 20135a8:	00002a06 	br	2013654 <OSMemNameSet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20135ac:	008080b4 	movhi	r2,514
 20135b0:	10b81404 	addi	r2,r2,-8112
 20135b4:	10800003 	ldbu	r2,0(r2)
 20135b8:	10803fcc 	andi	r2,r2,255
 20135bc:	1005003a 	cmpeq	r2,r2,zero
 20135c0:	1000041e 	bne	r2,zero,20135d4 <OSMemNameSet+0x8c>
        *perr = OS_ERR_NAME_SET_ISR;
 20135c4:	e0ffff17 	ldw	r3,-4(fp)
 20135c8:	00800484 	movi	r2,18
 20135cc:	18800005 	stb	r2,0(r3)
        return;
 20135d0:	00002006 	br	2013654 <OSMemNameSet+0x10c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20135d4:	0005303a 	rdctl	r2,status
 20135d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20135dc:	e0fffa17 	ldw	r3,-24(fp)
 20135e0:	00bfff84 	movi	r2,-2
 20135e4:	1884703a 	and	r2,r3,r2
 20135e8:	1001703a 	wrctl	status,r2
  
  return context;
 20135ec:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 20135f0:	e0bffb15 	stw	r2,-20(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 20135f4:	e13ffe17 	ldw	r4,-8(fp)
 20135f8:	20111300 	call	2011130 <OS_StrLen>
 20135fc:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 2013600:	e0bffc03 	ldbu	r2,-16(fp)
 2013604:	10800830 	cmpltui	r2,r2,32
 2013608:	1000081e 	bne	r2,zero,201362c <OSMemNameSet+0xe4>
 201360c:	e0bffb17 	ldw	r2,-20(fp)
 2013610:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013614:	e0bff917 	ldw	r2,-28(fp)
 2013618:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 201361c:	e0ffff17 	ldw	r3,-4(fp)
 2013620:	008018c4 	movi	r2,99
 2013624:	18800005 	stb	r2,0(r3)
        return;
 2013628:	00000a06 	br	2013654 <OSMemNameSet+0x10c>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 201362c:	e0bffd17 	ldw	r2,-12(fp)
 2013630:	11000504 	addi	r4,r2,20
 2013634:	e17ffe17 	ldw	r5,-8(fp)
 2013638:	20110b00 	call	20110b0 <OS_StrCopy>
 201363c:	e0bffb17 	ldw	r2,-20(fp)
 2013640:	e0bff815 	stw	r2,-32(fp)
 2013644:	e0bff817 	ldw	r2,-32(fp)
 2013648:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 201364c:	e0bfff17 	ldw	r2,-4(fp)
 2013650:	10000005 	stb	zero,0(r2)
}
 2013654:	e037883a 	mov	sp,fp
 2013658:	dfc00117 	ldw	ra,4(sp)
 201365c:	df000017 	ldw	fp,0(sp)
 2013660:	dec00204 	addi	sp,sp,8
 2013664:	f800283a 	ret

02013668 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 2013668:	defff804 	addi	sp,sp,-32
 201366c:	df000715 	stw	fp,28(sp)
 2013670:	df000704 	addi	fp,sp,28
 2013674:	e13ffd15 	stw	r4,-12(fp)
 2013678:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201367c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 2013680:	e0bffd17 	ldw	r2,-12(fp)
 2013684:	1004c03a 	cmpne	r2,r2,zero
 2013688:	1000031e 	bne	r2,zero,2013698 <OSMemPut+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 201368c:	00801804 	movi	r2,96
 2013690:	e0bfff15 	stw	r2,-4(fp)
 2013694:	00002b06 	br	2013744 <OSMemPut+0xdc>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 2013698:	e0bffe17 	ldw	r2,-8(fp)
 201369c:	1004c03a 	cmpne	r2,r2,zero
 20136a0:	1000031e 	bne	r2,zero,20136b0 <OSMemPut+0x48>
        return (OS_ERR_MEM_INVALID_PBLK);
 20136a4:	008017c4 	movi	r2,95
 20136a8:	e0bfff15 	stw	r2,-4(fp)
 20136ac:	00002506 	br	2013744 <OSMemPut+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20136b0:	0005303a 	rdctl	r2,status
 20136b4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20136b8:	e0fffb17 	ldw	r3,-20(fp)
 20136bc:	00bfff84 	movi	r2,-2
 20136c0:	1884703a 	and	r2,r3,r2
 20136c4:	1001703a 	wrctl	status,r2
  
  return context;
 20136c8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20136cc:	e0bffc15 	stw	r2,-16(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 20136d0:	e0bffd17 	ldw	r2,-12(fp)
 20136d4:	10c00417 	ldw	r3,16(r2)
 20136d8:	e0bffd17 	ldw	r2,-12(fp)
 20136dc:	10800317 	ldw	r2,12(r2)
 20136e0:	18800736 	bltu	r3,r2,2013700 <OSMemPut+0x98>
 20136e4:	e0bffc17 	ldw	r2,-16(fp)
 20136e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20136ec:	e0bffa17 	ldw	r2,-24(fp)
 20136f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 20136f4:	00801784 	movi	r2,94
 20136f8:	e0bfff15 	stw	r2,-4(fp)
 20136fc:	00001106 	br	2013744 <OSMemPut+0xdc>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 2013700:	e0fffe17 	ldw	r3,-8(fp)
 2013704:	e0bffd17 	ldw	r2,-12(fp)
 2013708:	10800117 	ldw	r2,4(r2)
 201370c:	18800015 	stw	r2,0(r3)
    pmem->OSMemFreeList = pblk;
 2013710:	e0fffd17 	ldw	r3,-12(fp)
 2013714:	e0bffe17 	ldw	r2,-8(fp)
 2013718:	18800115 	stw	r2,4(r3)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 201371c:	e0bffd17 	ldw	r2,-12(fp)
 2013720:	10800417 	ldw	r2,16(r2)
 2013724:	10c00044 	addi	r3,r2,1
 2013728:	e0bffd17 	ldw	r2,-12(fp)
 201372c:	10c00415 	stw	r3,16(r2)
 2013730:	e0bffc17 	ldw	r2,-16(fp)
 2013734:	e0bff915 	stw	r2,-28(fp)
 2013738:	e0bff917 	ldw	r2,-28(fp)
 201373c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 2013740:	e03fff15 	stw	zero,-4(fp)
 2013744:	e0bfff17 	ldw	r2,-4(fp)
}
 2013748:	e037883a 	mov	sp,fp
 201374c:	df000017 	ldw	fp,0(sp)
 2013750:	dec00104 	addi	sp,sp,4
 2013754:	f800283a 	ret

02013758 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 2013758:	defff904 	addi	sp,sp,-28
 201375c:	df000615 	stw	fp,24(sp)
 2013760:	df000604 	addi	fp,sp,24
 2013764:	e13ffd15 	stw	r4,-12(fp)
 2013768:	e17ffe15 	stw	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201376c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 2013770:	e0bffd17 	ldw	r2,-12(fp)
 2013774:	1004c03a 	cmpne	r2,r2,zero
 2013778:	1000031e 	bne	r2,zero,2013788 <OSMemQuery+0x30>
        return (OS_ERR_MEM_INVALID_PMEM);
 201377c:	00801804 	movi	r2,96
 2013780:	e0bfff15 	stw	r2,-4(fp)
 2013784:	00002e06 	br	2013840 <OSMemQuery+0xe8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 2013788:	e0bffe17 	ldw	r2,-8(fp)
 201378c:	1004c03a 	cmpne	r2,r2,zero
 2013790:	1000031e 	bne	r2,zero,20137a0 <OSMemQuery+0x48>
        return (OS_ERR_MEM_INVALID_PDATA);
 2013794:	00801844 	movi	r2,97
 2013798:	e0bfff15 	stw	r2,-4(fp)
 201379c:	00002806 	br	2013840 <OSMemQuery+0xe8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20137a0:	0005303a 	rdctl	r2,status
 20137a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20137a8:	e0fffb17 	ldw	r3,-20(fp)
 20137ac:	00bfff84 	movi	r2,-2
 20137b0:	1884703a 	and	r2,r3,r2
 20137b4:	1001703a 	wrctl	status,r2
  
  return context;
 20137b8:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 20137bc:	e0bffc15 	stw	r2,-16(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 20137c0:	e0bffd17 	ldw	r2,-12(fp)
 20137c4:	10c00017 	ldw	r3,0(r2)
 20137c8:	e0bffe17 	ldw	r2,-8(fp)
 20137cc:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 20137d0:	e0bffd17 	ldw	r2,-12(fp)
 20137d4:	10c00117 	ldw	r3,4(r2)
 20137d8:	e0bffe17 	ldw	r2,-8(fp)
 20137dc:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 20137e0:	e0bffd17 	ldw	r2,-12(fp)
 20137e4:	10c00217 	ldw	r3,8(r2)
 20137e8:	e0bffe17 	ldw	r2,-8(fp)
 20137ec:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 20137f0:	e0bffd17 	ldw	r2,-12(fp)
 20137f4:	10c00317 	ldw	r3,12(r2)
 20137f8:	e0bffe17 	ldw	r2,-8(fp)
 20137fc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 2013800:	e0bffd17 	ldw	r2,-12(fp)
 2013804:	10c00417 	ldw	r3,16(r2)
 2013808:	e0bffe17 	ldw	r2,-8(fp)
 201380c:	10c00415 	stw	r3,16(r2)
 2013810:	e0bffc17 	ldw	r2,-16(fp)
 2013814:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013818:	e0bffa17 	ldw	r2,-24(fp)
 201381c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 2013820:	e0bffe17 	ldw	r2,-8(fp)
 2013824:	10c00317 	ldw	r3,12(r2)
 2013828:	e0bffe17 	ldw	r2,-8(fp)
 201382c:	10800417 	ldw	r2,16(r2)
 2013830:	1887c83a 	sub	r3,r3,r2
 2013834:	e0bffe17 	ldw	r2,-8(fp)
 2013838:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 201383c:	e03fff15 	stw	zero,-4(fp)
 2013840:	e0bfff17 	ldw	r2,-4(fp)
}
 2013844:	e037883a 	mov	sp,fp
 2013848:	df000017 	ldw	fp,0(sp)
 201384c:	dec00104 	addi	sp,sp,4
 2013850:	f800283a 	ret

02013854 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 2013854:	defffc04 	addi	sp,sp,-16
 2013858:	dfc00315 	stw	ra,12(sp)
 201385c:	df000215 	stw	fp,8(sp)
 2013860:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 2013864:	010080b4 	movhi	r4,514
 2013868:	211ad204 	addi	r4,r4,27464
 201386c:	01430c04 	movi	r5,3120
 2013870:	2010eac0 	call	2010eac <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 2013874:	008080b4 	movhi	r2,514
 2013878:	109ad204 	addi	r2,r2,27464
 201387c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 2013880:	e03ffe0d 	sth	zero,-8(fp)
 2013884:	00001406 	br	20138d8 <OS_MemInit+0x84>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 2013888:	e13ffe0b 	ldhu	r4,-8(fp)
 201388c:	01400d04 	movi	r5,52
 2013890:	20032ac0 	call	20032ac <__mulsi3>
 2013894:	1007883a 	mov	r3,r2
 2013898:	008080b4 	movhi	r2,514
 201389c:	109adf04 	addi	r2,r2,27516
 20138a0:	1887883a 	add	r3,r3,r2
 20138a4:	e0bfff17 	ldw	r2,-4(fp)
 20138a8:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 20138ac:	e0ffff17 	ldw	r3,-4(fp)
 20138b0:	00800fc4 	movi	r2,63
 20138b4:	18800505 	stb	r2,20(r3)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 20138b8:	e0bfff17 	ldw	r2,-4(fp)
 20138bc:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 20138c0:	e0bfff17 	ldw	r2,-4(fp)
 20138c4:	10800d04 	addi	r2,r2,52
 20138c8:	e0bfff15 	stw	r2,-4(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 20138cc:	e0bffe0b 	ldhu	r2,-8(fp)
 20138d0:	10800044 	addi	r2,r2,1
 20138d4:	e0bffe0d 	sth	r2,-8(fp)
 20138d8:	e0bffe0b 	ldhu	r2,-8(fp)
 20138dc:	10800ef0 	cmpltui	r2,r2,59
 20138e0:	103fe91e 	bne	r2,zero,2013888 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 20138e4:	e0bfff17 	ldw	r2,-4(fp)
 20138e8:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 20138ec:	e0ffff17 	ldw	r3,-4(fp)
 20138f0:	00800fc4 	movi	r2,63
 20138f4:	18800505 	stb	r2,20(r3)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 20138f8:	e0bfff17 	ldw	r2,-4(fp)
 20138fc:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 2013900:	00c080b4 	movhi	r3,514
 2013904:	18f80f04 	addi	r3,r3,-8132
 2013908:	008080b4 	movhi	r2,514
 201390c:	109ad204 	addi	r2,r2,27464
 2013910:	18800015 	stw	r2,0(r3)
#endif
}
 2013914:	e037883a 	mov	sp,fp
 2013918:	dfc00117 	ldw	ra,4(sp)
 201391c:	df000017 	ldw	fp,0(sp)
 2013920:	dec00204 	addi	sp,sp,8
 2013924:	f800283a 	ret

02013928 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 2013928:	defff704 	addi	sp,sp,-36
 201392c:	df000815 	stw	fp,32(sp)
 2013930:	df000804 	addi	fp,sp,32
 2013934:	e13ffd15 	stw	r4,-12(fp)
 2013938:	e17ffe15 	stw	r5,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201393c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2013940:	e0bffe17 	ldw	r2,-8(fp)
 2013944:	1004c03a 	cmpne	r2,r2,zero
 2013948:	1000021e 	bne	r2,zero,2013954 <OSQAccept+0x2c>
        return ((void *)0);
 201394c:	e03fff15 	stw	zero,-4(fp)
 2013950:	00004506 	br	2013a68 <OSQAccept+0x140>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 2013954:	e0bffd17 	ldw	r2,-12(fp)
 2013958:	1004c03a 	cmpne	r2,r2,zero
 201395c:	1000051e 	bne	r2,zero,2013974 <OSQAccept+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 2013960:	e0fffe17 	ldw	r3,-8(fp)
 2013964:	00800104 	movi	r2,4
 2013968:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 201396c:	e03fff15 	stw	zero,-4(fp)
 2013970:	00003d06 	br	2013a68 <OSQAccept+0x140>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 2013974:	e0bffd17 	ldw	r2,-12(fp)
 2013978:	10800003 	ldbu	r2,0(r2)
 201397c:	10803fcc 	andi	r2,r2,255
 2013980:	108000a0 	cmpeqi	r2,r2,2
 2013984:	1000051e 	bne	r2,zero,201399c <OSQAccept+0x74>
        *perr = OS_ERR_EVENT_TYPE;
 2013988:	e0fffe17 	ldw	r3,-8(fp)
 201398c:	00800044 	movi	r2,1
 2013990:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 2013994:	e03fff15 	stw	zero,-4(fp)
 2013998:	00003306 	br	2013a68 <OSQAccept+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201399c:	0005303a 	rdctl	r2,status
 20139a0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20139a4:	e0fff917 	ldw	r3,-28(fp)
 20139a8:	00bfff84 	movi	r2,-2
 20139ac:	1884703a 	and	r2,r3,r2
 20139b0:	1001703a 	wrctl	status,r2
  
  return context;
 20139b4:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 20139b8:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 20139bc:	e0bffd17 	ldw	r2,-12(fp)
 20139c0:	10800117 	ldw	r2,4(r2)
 20139c4:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 20139c8:	e0bffb17 	ldw	r2,-20(fp)
 20139cc:	1080058b 	ldhu	r2,22(r2)
 20139d0:	10bfffcc 	andi	r2,r2,65535
 20139d4:	1005003a 	cmpeq	r2,r2,zero
 20139d8:	1000191e 	bne	r2,zero,2013a40 <OSQAccept+0x118>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 20139dc:	e0bffb17 	ldw	r2,-20(fp)
 20139e0:	10c00417 	ldw	r3,16(r2)
 20139e4:	18800017 	ldw	r2,0(r3)
 20139e8:	e0bffc15 	stw	r2,-16(fp)
 20139ec:	18c00104 	addi	r3,r3,4
 20139f0:	e0bffb17 	ldw	r2,-20(fp)
 20139f4:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 20139f8:	e0bffb17 	ldw	r2,-20(fp)
 20139fc:	1080058b 	ldhu	r2,22(r2)
 2013a00:	10bfffc4 	addi	r2,r2,-1
 2013a04:	1007883a 	mov	r3,r2
 2013a08:	e0bffb17 	ldw	r2,-20(fp)
 2013a0c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 2013a10:	e0bffb17 	ldw	r2,-20(fp)
 2013a14:	10c00417 	ldw	r3,16(r2)
 2013a18:	e0bffb17 	ldw	r2,-20(fp)
 2013a1c:	10800217 	ldw	r2,8(r2)
 2013a20:	1880041e 	bne	r3,r2,2013a34 <OSQAccept+0x10c>
            pq->OSQOut = pq->OSQStart;
 2013a24:	e0bffb17 	ldw	r2,-20(fp)
 2013a28:	10c00117 	ldw	r3,4(r2)
 2013a2c:	e0bffb17 	ldw	r2,-20(fp)
 2013a30:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 2013a34:	e0bffe17 	ldw	r2,-8(fp)
 2013a38:	10000005 	stb	zero,0(r2)
 2013a3c:	00000406 	br	2013a50 <OSQAccept+0x128>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 2013a40:	e0fffe17 	ldw	r3,-8(fp)
 2013a44:	008007c4 	movi	r2,31
 2013a48:	18800005 	stb	r2,0(r3)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 2013a4c:	e03ffc15 	stw	zero,-16(fp)
 2013a50:	e0bffa17 	ldw	r2,-24(fp)
 2013a54:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013a58:	e0bff817 	ldw	r2,-32(fp)
 2013a5c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 2013a60:	e0bffc17 	ldw	r2,-16(fp)
 2013a64:	e0bfff15 	stw	r2,-4(fp)
 2013a68:	e0bfff17 	ldw	r2,-4(fp)
}
 2013a6c:	e037883a 	mov	sp,fp
 2013a70:	df000017 	ldw	fp,0(sp)
 2013a74:	dec00104 	addi	sp,sp,4
 2013a78:	f800283a 	ret

02013a7c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 2013a7c:	defff304 	addi	sp,sp,-52
 2013a80:	dfc00c15 	stw	ra,48(sp)
 2013a84:	df000b15 	stw	fp,44(sp)
 2013a88:	df000b04 	addi	fp,sp,44
 2013a8c:	e13ffd15 	stw	r4,-12(fp)
 2013a90:	e17ffe0d 	sth	r5,-8(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2013a94:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 2013a98:	008080b4 	movhi	r2,514
 2013a9c:	10b81404 	addi	r2,r2,-8112
 2013aa0:	10800003 	ldbu	r2,0(r2)
 2013aa4:	10803fcc 	andi	r2,r2,255
 2013aa8:	1005003a 	cmpeq	r2,r2,zero
 2013aac:	1000021e 	bne	r2,zero,2013ab8 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 2013ab0:	e03fff15 	stw	zero,-4(fp)
 2013ab4:	00007006 	br	2013c78 <OSQCreate+0x1fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013ab8:	0005303a 	rdctl	r2,status
 2013abc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013ac0:	e0fff917 	ldw	r3,-28(fp)
 2013ac4:	00bfff84 	movi	r2,-2
 2013ac8:	1884703a 	and	r2,r3,r2
 2013acc:	1001703a 	wrctl	status,r2
  
  return context;
 2013ad0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2013ad4:	e0bffa15 	stw	r2,-24(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 2013ad8:	008080b4 	movhi	r2,514
 2013adc:	10b81304 	addi	r2,r2,-8116
 2013ae0:	10800017 	ldw	r2,0(r2)
 2013ae4:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 2013ae8:	008080b4 	movhi	r2,514
 2013aec:	10b81304 	addi	r2,r2,-8116
 2013af0:	10800017 	ldw	r2,0(r2)
 2013af4:	1005003a 	cmpeq	r2,r2,zero
 2013af8:	1000081e 	bne	r2,zero,2013b1c <OSQCreate+0xa0>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2013afc:	008080b4 	movhi	r2,514
 2013b00:	10b81304 	addi	r2,r2,-8116
 2013b04:	10800017 	ldw	r2,0(r2)
 2013b08:	10800117 	ldw	r2,4(r2)
 2013b0c:	1007883a 	mov	r3,r2
 2013b10:	008080b4 	movhi	r2,514
 2013b14:	10b81304 	addi	r2,r2,-8116
 2013b18:	10c00015 	stw	r3,0(r2)
 2013b1c:	e0bffa17 	ldw	r2,-24(fp)
 2013b20:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013b24:	e0bff817 	ldw	r2,-32(fp)
 2013b28:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 2013b2c:	e0bffc17 	ldw	r2,-16(fp)
 2013b30:	1005003a 	cmpeq	r2,r2,zero
 2013b34:	10004e1e 	bne	r2,zero,2013c70 <OSQCreate+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013b38:	0005303a 	rdctl	r2,status
 2013b3c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013b40:	e0fff717 	ldw	r3,-36(fp)
 2013b44:	00bfff84 	movi	r2,-2
 2013b48:	1884703a 	and	r2,r3,r2
 2013b4c:	1001703a 	wrctl	status,r2
  
  return context;
 2013b50:	e0bff717 	ldw	r2,-36(fp)
        OS_ENTER_CRITICAL();
 2013b54:	e0bffa15 	stw	r2,-24(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 2013b58:	008080b4 	movhi	r2,514
 2013b5c:	10b81104 	addi	r2,r2,-8124
 2013b60:	10800017 	ldw	r2,0(r2)
 2013b64:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 2013b68:	e0bffb17 	ldw	r2,-20(fp)
 2013b6c:	1005003a 	cmpeq	r2,r2,zero
 2013b70:	1000311e 	bne	r2,zero,2013c38 <OSQCreate+0x1bc>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 2013b74:	008080b4 	movhi	r2,514
 2013b78:	10b81104 	addi	r2,r2,-8124
 2013b7c:	10800017 	ldw	r2,0(r2)
 2013b80:	10c00017 	ldw	r3,0(r2)
 2013b84:	008080b4 	movhi	r2,514
 2013b88:	10b81104 	addi	r2,r2,-8124
 2013b8c:	10c00015 	stw	r3,0(r2)
 2013b90:	e0bffa17 	ldw	r2,-24(fp)
 2013b94:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013b98:	e0bff617 	ldw	r2,-40(fp)
 2013b9c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 2013ba0:	e0fffb17 	ldw	r3,-20(fp)
 2013ba4:	e0bffd17 	ldw	r2,-12(fp)
 2013ba8:	18800115 	stw	r2,4(r3)
            pq->OSQEnd             = &start[size];
 2013bac:	e0bffe0b 	ldhu	r2,-8(fp)
 2013bb0:	1085883a 	add	r2,r2,r2
 2013bb4:	1085883a 	add	r2,r2,r2
 2013bb8:	1007883a 	mov	r3,r2
 2013bbc:	e0bffd17 	ldw	r2,-12(fp)
 2013bc0:	1887883a 	add	r3,r3,r2
 2013bc4:	e0bffb17 	ldw	r2,-20(fp)
 2013bc8:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 2013bcc:	e0fffb17 	ldw	r3,-20(fp)
 2013bd0:	e0bffd17 	ldw	r2,-12(fp)
 2013bd4:	18800315 	stw	r2,12(r3)
            pq->OSQOut             = start;
 2013bd8:	e0fffb17 	ldw	r3,-20(fp)
 2013bdc:	e0bffd17 	ldw	r2,-12(fp)
 2013be0:	18800415 	stw	r2,16(r3)
            pq->OSQSize            = size;
 2013be4:	e0fffb17 	ldw	r3,-20(fp)
 2013be8:	e0bffe0b 	ldhu	r2,-8(fp)
 2013bec:	1880050d 	sth	r2,20(r3)
            pq->OSQEntries         = 0;
 2013bf0:	e0bffb17 	ldw	r2,-20(fp)
 2013bf4:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 2013bf8:	e0fffc17 	ldw	r3,-16(fp)
 2013bfc:	00800084 	movi	r2,2
 2013c00:	18800005 	stb	r2,0(r3)
            pevent->OSEventCnt     = 0;
 2013c04:	e0bffc17 	ldw	r2,-16(fp)
 2013c08:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 2013c0c:	e0fffc17 	ldw	r3,-16(fp)
 2013c10:	e0bffb17 	ldw	r2,-20(fp)
 2013c14:	18800115 	stw	r2,4(r3)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 2013c18:	e0fffc17 	ldw	r3,-16(fp)
 2013c1c:	00800fc4 	movi	r2,63
 2013c20:	18800385 	stb	r2,14(r3)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 2013c24:	e0bffc17 	ldw	r2,-16(fp)
 2013c28:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 2013c2c:	e13ffc17 	ldw	r4,-16(fp)
 2013c30:	2010ae00 	call	2010ae0 <OS_EventWaitListInit>
 2013c34:	00000e06 	br	2013c70 <OSQCreate+0x1f4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 2013c38:	008080b4 	movhi	r2,514
 2013c3c:	10b81304 	addi	r2,r2,-8116
 2013c40:	10c00017 	ldw	r3,0(r2)
 2013c44:	e0bffc17 	ldw	r2,-16(fp)
 2013c48:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 2013c4c:	00c080b4 	movhi	r3,514
 2013c50:	18f81304 	addi	r3,r3,-8116
 2013c54:	e0bffc17 	ldw	r2,-16(fp)
 2013c58:	18800015 	stw	r2,0(r3)
 2013c5c:	e0bffa17 	ldw	r2,-24(fp)
 2013c60:	e0bff515 	stw	r2,-44(fp)
 2013c64:	e0bff517 	ldw	r2,-44(fp)
 2013c68:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 2013c6c:	e03ffc15 	stw	zero,-16(fp)
        }
    }
    return (pevent);
 2013c70:	e0bffc17 	ldw	r2,-16(fp)
 2013c74:	e0bfff15 	stw	r2,-4(fp)
 2013c78:	e0bfff17 	ldw	r2,-4(fp)
}
 2013c7c:	e037883a 	mov	sp,fp
 2013c80:	dfc00117 	ldw	ra,4(sp)
 2013c84:	df000017 	ldw	fp,0(sp)
 2013c88:	dec00204 	addi	sp,sp,8
 2013c8c:	f800283a 	ret

02013c90 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2013c90:	defff004 	addi	sp,sp,-64
 2013c94:	dfc00f15 	stw	ra,60(sp)
 2013c98:	df000e15 	stw	fp,56(sp)
 2013c9c:	df000e04 	addi	fp,sp,56
 2013ca0:	e13ffb15 	stw	r4,-20(fp)
 2013ca4:	e1bffd15 	stw	r6,-12(fp)
 2013ca8:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2013cac:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2013cb0:	e0bffd17 	ldw	r2,-12(fp)
 2013cb4:	1004c03a 	cmpne	r2,r2,zero
 2013cb8:	1000031e 	bne	r2,zero,2013cc8 <OSQDel+0x38>
        return (pevent);
 2013cbc:	e0bffb17 	ldw	r2,-20(fp)
 2013cc0:	e0bfff15 	stw	r2,-4(fp)
 2013cc4:	0000ac06 	br	2013f78 <OSQDel+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2013cc8:	e0bffb17 	ldw	r2,-20(fp)
 2013ccc:	1004c03a 	cmpne	r2,r2,zero
 2013cd0:	1000061e 	bne	r2,zero,2013cec <OSQDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 2013cd4:	e0fffd17 	ldw	r3,-12(fp)
 2013cd8:	00800104 	movi	r2,4
 2013cdc:	18800005 	stb	r2,0(r3)
        return (pevent);
 2013ce0:	e0fffb17 	ldw	r3,-20(fp)
 2013ce4:	e0ffff15 	stw	r3,-4(fp)
 2013ce8:	0000a306 	br	2013f78 <OSQDel+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 2013cec:	e0bffb17 	ldw	r2,-20(fp)
 2013cf0:	10800003 	ldbu	r2,0(r2)
 2013cf4:	10803fcc 	andi	r2,r2,255
 2013cf8:	108000a0 	cmpeqi	r2,r2,2
 2013cfc:	1000061e 	bne	r2,zero,2013d18 <OSQDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 2013d00:	e0fffd17 	ldw	r3,-12(fp)
 2013d04:	00800044 	movi	r2,1
 2013d08:	18800005 	stb	r2,0(r3)
        return (pevent);
 2013d0c:	e0bffb17 	ldw	r2,-20(fp)
 2013d10:	e0bfff15 	stw	r2,-4(fp)
 2013d14:	00009806 	br	2013f78 <OSQDel+0x2e8>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2013d18:	008080b4 	movhi	r2,514
 2013d1c:	10b81404 	addi	r2,r2,-8112
 2013d20:	10800003 	ldbu	r2,0(r2)
 2013d24:	10803fcc 	andi	r2,r2,255
 2013d28:	1005003a 	cmpeq	r2,r2,zero
 2013d2c:	1000061e 	bne	r2,zero,2013d48 <OSQDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 2013d30:	e0fffd17 	ldw	r3,-12(fp)
 2013d34:	008003c4 	movi	r2,15
 2013d38:	18800005 	stb	r2,0(r3)
        return (pevent);
 2013d3c:	e0fffb17 	ldw	r3,-20(fp)
 2013d40:	e0ffff15 	stw	r3,-4(fp)
 2013d44:	00008c06 	br	2013f78 <OSQDel+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013d48:	0005303a 	rdctl	r2,status
 2013d4c:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013d50:	e0fff617 	ldw	r3,-40(fp)
 2013d54:	00bfff84 	movi	r2,-2
 2013d58:	1884703a 	and	r2,r3,r2
 2013d5c:	1001703a 	wrctl	status,r2
  
  return context;
 2013d60:	e0bff617 	ldw	r2,-40(fp)
    }
    OS_ENTER_CRITICAL();
 2013d64:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 2013d68:	e0bffb17 	ldw	r2,-20(fp)
 2013d6c:	10800283 	ldbu	r2,10(r2)
 2013d70:	10803fcc 	andi	r2,r2,255
 2013d74:	1005003a 	cmpeq	r2,r2,zero
 2013d78:	1000031e 	bne	r2,zero,2013d88 <OSQDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2013d7c:	00800044 	movi	r2,1
 2013d80:	e0bffa05 	stb	r2,-24(fp)
 2013d84:	00000106 	br	2013d8c <OSQDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2013d88:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 2013d8c:	e0bffc03 	ldbu	r2,-16(fp)
 2013d90:	e0bffe15 	stw	r2,-8(fp)
 2013d94:	e0fffe17 	ldw	r3,-8(fp)
 2013d98:	1805003a 	cmpeq	r2,r3,zero
 2013d9c:	1000041e 	bne	r2,zero,2013db0 <OSQDel+0x120>
 2013da0:	e0fffe17 	ldw	r3,-8(fp)
 2013da4:	18800060 	cmpeqi	r2,r3,1
 2013da8:	1000391e 	bne	r2,zero,2013e90 <OSQDel+0x200>
 2013dac:	00006706 	br	2013f4c <OSQDel+0x2bc>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 2013db0:	e0bffa03 	ldbu	r2,-24(fp)
 2013db4:	1004c03a 	cmpne	r2,r2,zero
 2013db8:	1000261e 	bne	r2,zero,2013e54 <OSQDel+0x1c4>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2013dbc:	e0fffb17 	ldw	r3,-20(fp)
 2013dc0:	00800fc4 	movi	r2,63
 2013dc4:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2013dc8:	e0bffb17 	ldw	r2,-20(fp)
 2013dcc:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 2013dd0:	e0bffb17 	ldw	r2,-20(fp)
 2013dd4:	10800117 	ldw	r2,4(r2)
 2013dd8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 2013ddc:	008080b4 	movhi	r2,514
 2013de0:	10b81104 	addi	r2,r2,-8124
 2013de4:	10c00017 	ldw	r3,0(r2)
 2013de8:	e0bff817 	ldw	r2,-32(fp)
 2013dec:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 2013df0:	00c080b4 	movhi	r3,514
 2013df4:	18f81104 	addi	r3,r3,-8124
 2013df8:	e0bff817 	ldw	r2,-32(fp)
 2013dfc:	18800015 	stw	r2,0(r3)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2013e00:	e0bffb17 	ldw	r2,-20(fp)
 2013e04:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2013e08:	008080b4 	movhi	r2,514
 2013e0c:	10b81304 	addi	r2,r2,-8116
 2013e10:	10c00017 	ldw	r3,0(r2)
 2013e14:	e0bffb17 	ldw	r2,-20(fp)
 2013e18:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2013e1c:	e0bffb17 	ldw	r2,-20(fp)
 2013e20:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2013e24:	00c080b4 	movhi	r3,514
 2013e28:	18f81304 	addi	r3,r3,-8116
 2013e2c:	e0bffb17 	ldw	r2,-20(fp)
 2013e30:	18800015 	stw	r2,0(r3)
 2013e34:	e0bff717 	ldw	r2,-36(fp)
 2013e38:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2013e3c:	e0bff517 	ldw	r2,-44(fp)
 2013e40:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2013e44:	e0bffd17 	ldw	r2,-12(fp)
 2013e48:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 2013e4c:	e03ff915 	stw	zero,-28(fp)
 2013e50:	00004706 	br	2013f70 <OSQDel+0x2e0>
 2013e54:	e0bff717 	ldw	r2,-36(fp)
 2013e58:	e0bff415 	stw	r2,-48(fp)
 2013e5c:	e0bff417 	ldw	r2,-48(fp)
 2013e60:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2013e64:	e0fffd17 	ldw	r3,-12(fp)
 2013e68:	00801244 	movi	r2,73
 2013e6c:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 2013e70:	e0bffb17 	ldw	r2,-20(fp)
 2013e74:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 2013e78:	00003d06 	br	2013f70 <OSQDel+0x2e0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 2013e7c:	e13ffb17 	ldw	r4,-20(fp)
 2013e80:	000b883a 	mov	r5,zero
 2013e84:	01800104 	movi	r6,4
 2013e88:	000f883a 	mov	r7,zero
 2013e8c:	201052c0 	call	201052c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 2013e90:	e0bffb17 	ldw	r2,-20(fp)
 2013e94:	10800283 	ldbu	r2,10(r2)
 2013e98:	10803fcc 	andi	r2,r2,255
 2013e9c:	1004c03a 	cmpne	r2,r2,zero
 2013ea0:	103ff61e 	bne	r2,zero,2013e7c <OSQDel+0x1ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2013ea4:	e0fffb17 	ldw	r3,-20(fp)
 2013ea8:	00800fc4 	movi	r2,63
 2013eac:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2013eb0:	e0bffb17 	ldw	r2,-20(fp)
 2013eb4:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 2013eb8:	e0bffb17 	ldw	r2,-20(fp)
 2013ebc:	10800117 	ldw	r2,4(r2)
 2013ec0:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 2013ec4:	008080b4 	movhi	r2,514
 2013ec8:	10b81104 	addi	r2,r2,-8124
 2013ecc:	10c00017 	ldw	r3,0(r2)
 2013ed0:	e0bff817 	ldw	r2,-32(fp)
 2013ed4:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 2013ed8:	00c080b4 	movhi	r3,514
 2013edc:	18f81104 	addi	r3,r3,-8124
 2013ee0:	e0bff817 	ldw	r2,-32(fp)
 2013ee4:	18800015 	stw	r2,0(r3)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2013ee8:	e0bffb17 	ldw	r2,-20(fp)
 2013eec:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2013ef0:	008080b4 	movhi	r2,514
 2013ef4:	10b81304 	addi	r2,r2,-8116
 2013ef8:	10c00017 	ldw	r3,0(r2)
 2013efc:	e0bffb17 	ldw	r2,-20(fp)
 2013f00:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2013f04:	e0bffb17 	ldw	r2,-20(fp)
 2013f08:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 2013f0c:	00c080b4 	movhi	r3,514
 2013f10:	18f81304 	addi	r3,r3,-8116
 2013f14:	e0bffb17 	ldw	r2,-20(fp)
 2013f18:	18800015 	stw	r2,0(r3)
 2013f1c:	e0bff717 	ldw	r2,-36(fp)
 2013f20:	e0bff315 	stw	r2,-52(fp)
 2013f24:	e0bff317 	ldw	r2,-52(fp)
 2013f28:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 2013f2c:	e0bffa03 	ldbu	r2,-24(fp)
 2013f30:	10800058 	cmpnei	r2,r2,1
 2013f34:	1000011e 	bne	r2,zero,2013f3c <OSQDel+0x2ac>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2013f38:	2010f6c0 	call	2010f6c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 2013f3c:	e0bffd17 	ldw	r2,-12(fp)
 2013f40:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 2013f44:	e03ff915 	stw	zero,-28(fp)
             break;
 2013f48:	00000906 	br	2013f70 <OSQDel+0x2e0>
 2013f4c:	e0bff717 	ldw	r2,-36(fp)
 2013f50:	e0bff215 	stw	r2,-56(fp)
 2013f54:	e0bff217 	ldw	r2,-56(fp)
 2013f58:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 2013f5c:	e0fffd17 	ldw	r3,-12(fp)
 2013f60:	008001c4 	movi	r2,7
 2013f64:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 2013f68:	e0bffb17 	ldw	r2,-20(fp)
 2013f6c:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 2013f70:	e0bff917 	ldw	r2,-28(fp)
 2013f74:	e0bfff15 	stw	r2,-4(fp)
 2013f78:	e0bfff17 	ldw	r2,-4(fp)
}
 2013f7c:	e037883a 	mov	sp,fp
 2013f80:	dfc00117 	ldw	ra,4(sp)
 2013f84:	df000017 	ldw	fp,0(sp)
 2013f88:	dec00204 	addi	sp,sp,8
 2013f8c:	f800283a 	ret

02013f90 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 2013f90:	defff904 	addi	sp,sp,-28
 2013f94:	df000615 	stw	fp,24(sp)
 2013f98:	df000604 	addi	fp,sp,24
 2013f9c:	e13ffe15 	stw	r4,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2013fa0:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2013fa4:	e0bffe17 	ldw	r2,-8(fp)
 2013fa8:	1004c03a 	cmpne	r2,r2,zero
 2013fac:	1000031e 	bne	r2,zero,2013fbc <OSQFlush+0x2c>
        return (OS_ERR_PEVENT_NULL);
 2013fb0:	00800104 	movi	r2,4
 2013fb4:	e0bfff15 	stw	r2,-4(fp)
 2013fb8:	00002206 	br	2014044 <OSQFlush+0xb4>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2013fbc:	e0bffe17 	ldw	r2,-8(fp)
 2013fc0:	10800003 	ldbu	r2,0(r2)
 2013fc4:	10803fcc 	andi	r2,r2,255
 2013fc8:	108000a0 	cmpeqi	r2,r2,2
 2013fcc:	1000031e 	bne	r2,zero,2013fdc <OSQFlush+0x4c>
        return (OS_ERR_EVENT_TYPE);
 2013fd0:	00800044 	movi	r2,1
 2013fd4:	e0bfff15 	stw	r2,-4(fp)
 2013fd8:	00001a06 	br	2014044 <OSQFlush+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2013fdc:	0005303a 	rdctl	r2,status
 2013fe0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2013fe4:	e0fffb17 	ldw	r3,-20(fp)
 2013fe8:	00bfff84 	movi	r2,-2
 2013fec:	1884703a 	and	r2,r3,r2
 2013ff0:	1001703a 	wrctl	status,r2
  
  return context;
 2013ff4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2013ff8:	e0bffc15 	stw	r2,-16(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 2013ffc:	e0bffe17 	ldw	r2,-8(fp)
 2014000:	10800117 	ldw	r2,4(r2)
 2014004:	e0bffd15 	stw	r2,-12(fp)
    pq->OSQIn      = pq->OSQStart;
 2014008:	e0bffd17 	ldw	r2,-12(fp)
 201400c:	10c00117 	ldw	r3,4(r2)
 2014010:	e0bffd17 	ldw	r2,-12(fp)
 2014014:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 2014018:	e0bffd17 	ldw	r2,-12(fp)
 201401c:	10c00117 	ldw	r3,4(r2)
 2014020:	e0bffd17 	ldw	r2,-12(fp)
 2014024:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 2014028:	e0bffd17 	ldw	r2,-12(fp)
 201402c:	1000058d 	sth	zero,22(r2)
 2014030:	e0bffc17 	ldw	r2,-16(fp)
 2014034:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014038:	e0bffa17 	ldw	r2,-24(fp)
 201403c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2014040:	e03fff15 	stw	zero,-4(fp)
 2014044:	e0bfff17 	ldw	r2,-4(fp)
}
 2014048:	e037883a 	mov	sp,fp
 201404c:	df000017 	ldw	fp,0(sp)
 2014050:	dec00104 	addi	sp,sp,4
 2014054:	f800283a 	ret

02014058 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 2014058:	defff104 	addi	sp,sp,-60
 201405c:	dfc00e15 	stw	ra,56(sp)
 2014060:	df000d15 	stw	fp,52(sp)
 2014064:	df000d04 	addi	fp,sp,52
 2014068:	e13ffb15 	stw	r4,-20(fp)
 201406c:	e1bffd15 	stw	r6,-12(fp)
 2014070:	e17ffc0d 	sth	r5,-16(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2014074:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 2014078:	e0bffd17 	ldw	r2,-12(fp)
 201407c:	1004c03a 	cmpne	r2,r2,zero
 2014080:	1000021e 	bne	r2,zero,201408c <OSQPend+0x34>
        return ((void *)0);
 2014084:	e03fff15 	stw	zero,-4(fp)
 2014088:	0000b506 	br	2014360 <OSQPend+0x308>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 201408c:	e0bffb17 	ldw	r2,-20(fp)
 2014090:	1004c03a 	cmpne	r2,r2,zero
 2014094:	1000051e 	bne	r2,zero,20140ac <OSQPend+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 2014098:	e0fffd17 	ldw	r3,-12(fp)
 201409c:	00800104 	movi	r2,4
 20140a0:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 20140a4:	e03fff15 	stw	zero,-4(fp)
 20140a8:	0000ad06 	br	2014360 <OSQPend+0x308>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 20140ac:	e0bffb17 	ldw	r2,-20(fp)
 20140b0:	10800003 	ldbu	r2,0(r2)
 20140b4:	10803fcc 	andi	r2,r2,255
 20140b8:	108000a0 	cmpeqi	r2,r2,2
 20140bc:	1000051e 	bne	r2,zero,20140d4 <OSQPend+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 20140c0:	e0fffd17 	ldw	r3,-12(fp)
 20140c4:	00800044 	movi	r2,1
 20140c8:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 20140cc:	e03fff15 	stw	zero,-4(fp)
 20140d0:	0000a306 	br	2014360 <OSQPend+0x308>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 20140d4:	008080b4 	movhi	r2,514
 20140d8:	10b81404 	addi	r2,r2,-8112
 20140dc:	10800003 	ldbu	r2,0(r2)
 20140e0:	10803fcc 	andi	r2,r2,255
 20140e4:	1005003a 	cmpeq	r2,r2,zero
 20140e8:	1000051e 	bne	r2,zero,2014100 <OSQPend+0xa8>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 20140ec:	e0fffd17 	ldw	r3,-12(fp)
 20140f0:	00800084 	movi	r2,2
 20140f4:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 20140f8:	e03fff15 	stw	zero,-4(fp)
 20140fc:	00009806 	br	2014360 <OSQPend+0x308>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 2014100:	008080b4 	movhi	r2,514
 2014104:	10b80604 	addi	r2,r2,-8168
 2014108:	10800003 	ldbu	r2,0(r2)
 201410c:	10803fcc 	andi	r2,r2,255
 2014110:	1005003a 	cmpeq	r2,r2,zero
 2014114:	1000051e 	bne	r2,zero,201412c <OSQPend+0xd4>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 2014118:	e0fffd17 	ldw	r3,-12(fp)
 201411c:	00800344 	movi	r2,13
 2014120:	18800005 	stb	r2,0(r3)
        return ((void *)0);
 2014124:	e03fff15 	stw	zero,-4(fp)
 2014128:	00008d06 	br	2014360 <OSQPend+0x308>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201412c:	0005303a 	rdctl	r2,status
 2014130:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014134:	e0fff717 	ldw	r3,-36(fp)
 2014138:	00bfff84 	movi	r2,-2
 201413c:	1884703a 	and	r2,r3,r2
 2014140:	1001703a 	wrctl	status,r2
  
  return context;
 2014144:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 2014148:	e0bff815 	stw	r2,-32(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 201414c:	e0bffb17 	ldw	r2,-20(fp)
 2014150:	10800117 	ldw	r2,4(r2)
 2014154:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 2014158:	e0bff917 	ldw	r2,-28(fp)
 201415c:	1080058b 	ldhu	r2,22(r2)
 2014160:	10bfffcc 	andi	r2,r2,65535
 2014164:	1005003a 	cmpeq	r2,r2,zero
 2014168:	10001f1e 	bne	r2,zero,20141e8 <OSQPend+0x190>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 201416c:	e0bff917 	ldw	r2,-28(fp)
 2014170:	10c00417 	ldw	r3,16(r2)
 2014174:	18800017 	ldw	r2,0(r3)
 2014178:	e0bffa15 	stw	r2,-24(fp)
 201417c:	18c00104 	addi	r3,r3,4
 2014180:	e0bff917 	ldw	r2,-28(fp)
 2014184:	10c00415 	stw	r3,16(r2)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 2014188:	e0bff917 	ldw	r2,-28(fp)
 201418c:	1080058b 	ldhu	r2,22(r2)
 2014190:	10bfffc4 	addi	r2,r2,-1
 2014194:	1007883a 	mov	r3,r2
 2014198:	e0bff917 	ldw	r2,-28(fp)
 201419c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 20141a0:	e0bff917 	ldw	r2,-28(fp)
 20141a4:	10c00417 	ldw	r3,16(r2)
 20141a8:	e0bff917 	ldw	r2,-28(fp)
 20141ac:	10800217 	ldw	r2,8(r2)
 20141b0:	1880041e 	bne	r3,r2,20141c4 <OSQPend+0x16c>
            pq->OSQOut = pq->OSQStart;
 20141b4:	e0bff917 	ldw	r2,-28(fp)
 20141b8:	10c00117 	ldw	r3,4(r2)
 20141bc:	e0bff917 	ldw	r2,-28(fp)
 20141c0:	10c00415 	stw	r3,16(r2)
 20141c4:	e0bff817 	ldw	r2,-32(fp)
 20141c8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20141cc:	e0bff617 	ldw	r2,-40(fp)
 20141d0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 20141d4:	e0bffd17 	ldw	r2,-12(fp)
 20141d8:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 20141dc:	e0bffa17 	ldw	r2,-24(fp)
 20141e0:	e0bfff15 	stw	r2,-4(fp)
 20141e4:	00005e06 	br	2014360 <OSQPend+0x308>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 20141e8:	008080b4 	movhi	r2,514
 20141ec:	10b81504 	addi	r2,r2,-8108
 20141f0:	10c00017 	ldw	r3,0(r2)
 20141f4:	008080b4 	movhi	r2,514
 20141f8:	10b81504 	addi	r2,r2,-8108
 20141fc:	10800017 	ldw	r2,0(r2)
 2014200:	10800c03 	ldbu	r2,48(r2)
 2014204:	10800114 	ori	r2,r2,4
 2014208:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 201420c:	008080b4 	movhi	r2,514
 2014210:	10b81504 	addi	r2,r2,-8108
 2014214:	10800017 	ldw	r2,0(r2)
 2014218:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 201421c:	008080b4 	movhi	r2,514
 2014220:	10b81504 	addi	r2,r2,-8108
 2014224:	10c00017 	ldw	r3,0(r2)
 2014228:	e0bffc0b 	ldhu	r2,-16(fp)
 201422c:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 2014230:	e13ffb17 	ldw	r4,-20(fp)
 2014234:	20106c00 	call	20106c0 <OS_EventTaskWait>
 2014238:	e0bff817 	ldw	r2,-32(fp)
 201423c:	e0bff515 	stw	r2,-44(fp)
 2014240:	e0bff517 	ldw	r2,-44(fp)
 2014244:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 2014248:	2010f6c0 	call	2010f6c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201424c:	0005303a 	rdctl	r2,status
 2014250:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014254:	e0fff417 	ldw	r3,-48(fp)
 2014258:	00bfff84 	movi	r2,-2
 201425c:	1884703a 	and	r2,r3,r2
 2014260:	1001703a 	wrctl	status,r2
  
  return context;
 2014264:	e0bff417 	ldw	r2,-48(fp)
    OS_ENTER_CRITICAL();
 2014268:	e0bff815 	stw	r2,-32(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 201426c:	008080b4 	movhi	r2,514
 2014270:	10b81504 	addi	r2,r2,-8108
 2014274:	10800017 	ldw	r2,0(r2)
 2014278:	10800c43 	ldbu	r2,49(r2)
 201427c:	10803fcc 	andi	r2,r2,255
 2014280:	e0bffe15 	stw	r2,-8(fp)
 2014284:	e0fffe17 	ldw	r3,-8(fp)
 2014288:	1805003a 	cmpeq	r2,r3,zero
 201428c:	1000041e 	bne	r2,zero,20142a0 <OSQPend+0x248>
 2014290:	e0fffe17 	ldw	r3,-8(fp)
 2014294:	188000a0 	cmpeqi	r2,r3,2
 2014298:	1000091e 	bne	r2,zero,20142c0 <OSQPend+0x268>
 201429c:	00000d06 	br	20142d4 <OSQPend+0x27c>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 20142a0:	008080b4 	movhi	r2,514
 20142a4:	10b81504 	addi	r2,r2,-8108
 20142a8:	10800017 	ldw	r2,0(r2)
 20142ac:	10800917 	ldw	r2,36(r2)
 20142b0:	e0bffa15 	stw	r2,-24(fp)
            *perr =  OS_ERR_NONE;
 20142b4:	e0bffd17 	ldw	r2,-12(fp)
 20142b8:	10000005 	stb	zero,0(r2)
             break;
 20142bc:	00000e06 	br	20142f8 <OSQPend+0x2a0>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 20142c0:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 20142c4:	e0fffd17 	ldw	r3,-12(fp)
 20142c8:	00800384 	movi	r2,14
 20142cc:	18800005 	stb	r2,0(r3)
             break;
 20142d0:	00000906 	br	20142f8 <OSQPend+0x2a0>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 20142d4:	008080b4 	movhi	r2,514
 20142d8:	10b81504 	addi	r2,r2,-8108
 20142dc:	11000017 	ldw	r4,0(r2)
 20142e0:	e17ffb17 	ldw	r5,-20(fp)
 20142e4:	20109240 	call	2010924 <OS_EventTaskRemove>
             pmsg = (void *)0;
 20142e8:	e03ffa15 	stw	zero,-24(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 20142ec:	e0fffd17 	ldw	r3,-12(fp)
 20142f0:	00800284 	movi	r2,10
 20142f4:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 20142f8:	008080b4 	movhi	r2,514
 20142fc:	10b81504 	addi	r2,r2,-8108
 2014300:	10800017 	ldw	r2,0(r2)
 2014304:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 2014308:	008080b4 	movhi	r2,514
 201430c:	10b81504 	addi	r2,r2,-8108
 2014310:	10800017 	ldw	r2,0(r2)
 2014314:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2014318:	008080b4 	movhi	r2,514
 201431c:	10b81504 	addi	r2,r2,-8108
 2014320:	10800017 	ldw	r2,0(r2)
 2014324:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2014328:	008080b4 	movhi	r2,514
 201432c:	10b81504 	addi	r2,r2,-8108
 2014330:	10800017 	ldw	r2,0(r2)
 2014334:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 2014338:	008080b4 	movhi	r2,514
 201433c:	10b81504 	addi	r2,r2,-8108
 2014340:	10800017 	ldw	r2,0(r2)
 2014344:	10000915 	stw	zero,36(r2)
 2014348:	e0bff817 	ldw	r2,-32(fp)
 201434c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014350:	e0bff317 	ldw	r2,-52(fp)
 2014354:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 2014358:	e0bffa17 	ldw	r2,-24(fp)
 201435c:	e0bfff15 	stw	r2,-4(fp)
 2014360:	e0bfff17 	ldw	r2,-4(fp)
}
 2014364:	e037883a 	mov	sp,fp
 2014368:	dfc00117 	ldw	ra,4(sp)
 201436c:	df000017 	ldw	fp,0(sp)
 2014370:	dec00204 	addi	sp,sp,8
 2014374:	f800283a 	ret

02014378 <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2014378:	defff504 	addi	sp,sp,-44
 201437c:	dfc00a15 	stw	ra,40(sp)
 2014380:	df000915 	stw	fp,36(sp)
 2014384:	df000904 	addi	fp,sp,36
 2014388:	e13ffc15 	stw	r4,-16(fp)
 201438c:	e1bffe15 	stw	r6,-8(fp)
 2014390:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2014394:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2014398:	e0bffe17 	ldw	r2,-8(fp)
 201439c:	1004c03a 	cmpne	r2,r2,zero
 20143a0:	1000021e 	bne	r2,zero,20143ac <OSQPendAbort+0x34>
        return (0);
 20143a4:	e03fff15 	stw	zero,-4(fp)
 20143a8:	00004c06 	br	20144dc <OSQPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 20143ac:	e0bffc17 	ldw	r2,-16(fp)
 20143b0:	1004c03a 	cmpne	r2,r2,zero
 20143b4:	1000051e 	bne	r2,zero,20143cc <OSQPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 20143b8:	e0fffe17 	ldw	r3,-8(fp)
 20143bc:	00800104 	movi	r2,4
 20143c0:	18800005 	stb	r2,0(r3)
        return (0);
 20143c4:	e03fff15 	stw	zero,-4(fp)
 20143c8:	00004406 	br	20144dc <OSQPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 20143cc:	e0bffc17 	ldw	r2,-16(fp)
 20143d0:	10800003 	ldbu	r2,0(r2)
 20143d4:	10803fcc 	andi	r2,r2,255
 20143d8:	108000a0 	cmpeqi	r2,r2,2
 20143dc:	1000051e 	bne	r2,zero,20143f4 <OSQPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 20143e0:	e0fffe17 	ldw	r3,-8(fp)
 20143e4:	00800044 	movi	r2,1
 20143e8:	18800005 	stb	r2,0(r3)
        return (0);
 20143ec:	e03fff15 	stw	zero,-4(fp)
 20143f0:	00003a06 	br	20144dc <OSQPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20143f4:	0005303a 	rdctl	r2,status
 20143f8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20143fc:	e0fff917 	ldw	r3,-28(fp)
 2014400:	00bfff84 	movi	r2,-2
 2014404:	1884703a 	and	r2,r3,r2
 2014408:	1001703a 	wrctl	status,r2
  
  return context;
 201440c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2014410:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 2014414:	e0bffc17 	ldw	r2,-16(fp)
 2014418:	10800283 	ldbu	r2,10(r2)
 201441c:	10803fcc 	andi	r2,r2,255
 2014420:	1005003a 	cmpeq	r2,r2,zero
 2014424:	1000261e 	bne	r2,zero,20144c0 <OSQPendAbort+0x148>
        nbr_tasks = 0;
 2014428:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 201442c:	e0bffd03 	ldbu	r2,-12(fp)
 2014430:	10800060 	cmpeqi	r2,r2,1
 2014434:	1000091e 	bne	r2,zero,201445c <OSQPendAbort+0xe4>
 2014438:	00000e06 	br	2014474 <OSQPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 201443c:	e13ffc17 	ldw	r4,-16(fp)
 2014440:	000b883a 	mov	r5,zero
 2014444:	01800104 	movi	r6,4
 2014448:	01c00084 	movi	r7,2
 201444c:	201052c0 	call	201052c <OS_EventTaskRdy>
                     nbr_tasks++;
 2014450:	e0bffb03 	ldbu	r2,-20(fp)
 2014454:	10800044 	addi	r2,r2,1
 2014458:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 201445c:	e0bffc17 	ldw	r2,-16(fp)
 2014460:	10800283 	ldbu	r2,10(r2)
 2014464:	10803fcc 	andi	r2,r2,255
 2014468:	1004c03a 	cmpne	r2,r2,zero
 201446c:	103ff31e 	bne	r2,zero,201443c <OSQPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 2014470:	00000806 	br	2014494 <OSQPendAbort+0x11c>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 2014474:	e13ffc17 	ldw	r4,-16(fp)
 2014478:	000b883a 	mov	r5,zero
 201447c:	01800104 	movi	r6,4
 2014480:	01c00084 	movi	r7,2
 2014484:	201052c0 	call	201052c <OS_EventTaskRdy>
                 nbr_tasks++;
 2014488:	e0bffb03 	ldbu	r2,-20(fp)
 201448c:	10800044 	addi	r2,r2,1
 2014490:	e0bffb05 	stb	r2,-20(fp)
 2014494:	e0bffa17 	ldw	r2,-24(fp)
 2014498:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201449c:	e0bff817 	ldw	r2,-32(fp)
 20144a0:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 20144a4:	2010f6c0 	call	2010f6c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 20144a8:	e0fffe17 	ldw	r3,-8(fp)
 20144ac:	00800384 	movi	r2,14
 20144b0:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 20144b4:	e0bffb03 	ldbu	r2,-20(fp)
 20144b8:	e0bfff15 	stw	r2,-4(fp)
 20144bc:	00000706 	br	20144dc <OSQPendAbort+0x164>
 20144c0:	e0bffa17 	ldw	r2,-24(fp)
 20144c4:	e0bff715 	stw	r2,-36(fp)
 20144c8:	e0bff717 	ldw	r2,-36(fp)
 20144cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20144d0:	e0bffe17 	ldw	r2,-8(fp)
 20144d4:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 20144d8:	e03fff15 	stw	zero,-4(fp)
 20144dc:	e0bfff17 	ldw	r2,-4(fp)
}
 20144e0:	e037883a 	mov	sp,fp
 20144e4:	dfc00117 	ldw	ra,4(sp)
 20144e8:	df000017 	ldw	fp,0(sp)
 20144ec:	dec00204 	addi	sp,sp,8
 20144f0:	f800283a 	ret

020144f4 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 20144f4:	defff504 	addi	sp,sp,-44
 20144f8:	dfc00a15 	stw	ra,40(sp)
 20144fc:	df000915 	stw	fp,36(sp)
 2014500:	df000904 	addi	fp,sp,36
 2014504:	e13ffd15 	stw	r4,-12(fp)
 2014508:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 201450c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2014510:	e0bffd17 	ldw	r2,-12(fp)
 2014514:	1004c03a 	cmpne	r2,r2,zero
 2014518:	1000031e 	bne	r2,zero,2014528 <OSQPost+0x34>
        return (OS_ERR_PEVENT_NULL);
 201451c:	00800104 	movi	r2,4
 2014520:	e0bfff15 	stw	r2,-4(fp)
 2014524:	00004d06 	br	201465c <OSQPost+0x168>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 2014528:	e0bffd17 	ldw	r2,-12(fp)
 201452c:	10800003 	ldbu	r2,0(r2)
 2014530:	10803fcc 	andi	r2,r2,255
 2014534:	108000a0 	cmpeqi	r2,r2,2
 2014538:	1000031e 	bne	r2,zero,2014548 <OSQPost+0x54>
        return (OS_ERR_EVENT_TYPE);
 201453c:	00800044 	movi	r2,1
 2014540:	e0bfff15 	stw	r2,-4(fp)
 2014544:	00004506 	br	201465c <OSQPost+0x168>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014548:	0005303a 	rdctl	r2,status
 201454c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014550:	e0fffa17 	ldw	r3,-24(fp)
 2014554:	00bfff84 	movi	r2,-2
 2014558:	1884703a 	and	r2,r3,r2
 201455c:	1001703a 	wrctl	status,r2
  
  return context;
 2014560:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 2014564:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 2014568:	e0bffd17 	ldw	r2,-12(fp)
 201456c:	10800283 	ldbu	r2,10(r2)
 2014570:	10803fcc 	andi	r2,r2,255
 2014574:	1005003a 	cmpeq	r2,r2,zero
 2014578:	10000c1e 	bne	r2,zero,20145ac <OSQPost+0xb8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 201457c:	e13ffd17 	ldw	r4,-12(fp)
 2014580:	e17ffe17 	ldw	r5,-8(fp)
 2014584:	01800104 	movi	r6,4
 2014588:	000f883a 	mov	r7,zero
 201458c:	201052c0 	call	201052c <OS_EventTaskRdy>
 2014590:	e0bffb17 	ldw	r2,-20(fp)
 2014594:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014598:	e0bff917 	ldw	r2,-28(fp)
 201459c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 20145a0:	2010f6c0 	call	2010f6c <OS_Sched>
        return (OS_ERR_NONE);
 20145a4:	e03fff15 	stw	zero,-4(fp)
 20145a8:	00002c06 	br	201465c <OSQPost+0x168>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 20145ac:	e0bffd17 	ldw	r2,-12(fp)
 20145b0:	10800117 	ldw	r2,4(r2)
 20145b4:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 20145b8:	e0bffc17 	ldw	r2,-16(fp)
 20145bc:	10c0058b 	ldhu	r3,22(r2)
 20145c0:	e0bffc17 	ldw	r2,-16(fp)
 20145c4:	1080050b 	ldhu	r2,20(r2)
 20145c8:	18ffffcc 	andi	r3,r3,65535
 20145cc:	10bfffcc 	andi	r2,r2,65535
 20145d0:	18800736 	bltu	r3,r2,20145f0 <OSQPost+0xfc>
 20145d4:	e0bffb17 	ldw	r2,-20(fp)
 20145d8:	e0bff815 	stw	r2,-32(fp)
 20145dc:	e0bff817 	ldw	r2,-32(fp)
 20145e0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 20145e4:	00800784 	movi	r2,30
 20145e8:	e0bfff15 	stw	r2,-4(fp)
 20145ec:	00001b06 	br	201465c <OSQPost+0x168>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 20145f0:	e0bffc17 	ldw	r2,-16(fp)
 20145f4:	10c00317 	ldw	r3,12(r2)
 20145f8:	e0bffe17 	ldw	r2,-8(fp)
 20145fc:	18800015 	stw	r2,0(r3)
 2014600:	18c00104 	addi	r3,r3,4
 2014604:	e0bffc17 	ldw	r2,-16(fp)
 2014608:	10c00315 	stw	r3,12(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 201460c:	e0bffc17 	ldw	r2,-16(fp)
 2014610:	1080058b 	ldhu	r2,22(r2)
 2014614:	10800044 	addi	r2,r2,1
 2014618:	1007883a 	mov	r3,r2
 201461c:	e0bffc17 	ldw	r2,-16(fp)
 2014620:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 2014624:	e0bffc17 	ldw	r2,-16(fp)
 2014628:	10c00317 	ldw	r3,12(r2)
 201462c:	e0bffc17 	ldw	r2,-16(fp)
 2014630:	10800217 	ldw	r2,8(r2)
 2014634:	1880041e 	bne	r3,r2,2014648 <OSQPost+0x154>
        pq->OSQIn = pq->OSQStart;
 2014638:	e0bffc17 	ldw	r2,-16(fp)
 201463c:	10c00117 	ldw	r3,4(r2)
 2014640:	e0bffc17 	ldw	r2,-16(fp)
 2014644:	10c00315 	stw	r3,12(r2)
 2014648:	e0bffb17 	ldw	r2,-20(fp)
 201464c:	e0bff715 	stw	r2,-36(fp)
 2014650:	e0bff717 	ldw	r2,-36(fp)
 2014654:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2014658:	e03fff15 	stw	zero,-4(fp)
 201465c:	e0bfff17 	ldw	r2,-4(fp)
}
 2014660:	e037883a 	mov	sp,fp
 2014664:	dfc00117 	ldw	ra,4(sp)
 2014668:	df000017 	ldw	fp,0(sp)
 201466c:	dec00204 	addi	sp,sp,8
 2014670:	f800283a 	ret

02014674 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 2014674:	defff504 	addi	sp,sp,-44
 2014678:	dfc00a15 	stw	ra,40(sp)
 201467c:	df000915 	stw	fp,36(sp)
 2014680:	df000904 	addi	fp,sp,36
 2014684:	e13ffd15 	stw	r4,-12(fp)
 2014688:	e17ffe15 	stw	r5,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 201468c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2014690:	e0bffd17 	ldw	r2,-12(fp)
 2014694:	1004c03a 	cmpne	r2,r2,zero
 2014698:	1000031e 	bne	r2,zero,20146a8 <OSQPostFront+0x34>
        return (OS_ERR_PEVENT_NULL);
 201469c:	00800104 	movi	r2,4
 20146a0:	e0bfff15 	stw	r2,-4(fp)
 20146a4:	00004f06 	br	20147e4 <OSQPostFront+0x170>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 20146a8:	e0bffd17 	ldw	r2,-12(fp)
 20146ac:	10800003 	ldbu	r2,0(r2)
 20146b0:	10803fcc 	andi	r2,r2,255
 20146b4:	108000a0 	cmpeqi	r2,r2,2
 20146b8:	1000031e 	bne	r2,zero,20146c8 <OSQPostFront+0x54>
        return (OS_ERR_EVENT_TYPE);
 20146bc:	00800044 	movi	r2,1
 20146c0:	e0bfff15 	stw	r2,-4(fp)
 20146c4:	00004706 	br	20147e4 <OSQPostFront+0x170>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20146c8:	0005303a 	rdctl	r2,status
 20146cc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20146d0:	e0fffa17 	ldw	r3,-24(fp)
 20146d4:	00bfff84 	movi	r2,-2
 20146d8:	1884703a 	and	r2,r3,r2
 20146dc:	1001703a 	wrctl	status,r2
  
  return context;
 20146e0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 20146e4:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 20146e8:	e0bffd17 	ldw	r2,-12(fp)
 20146ec:	10800283 	ldbu	r2,10(r2)
 20146f0:	10803fcc 	andi	r2,r2,255
 20146f4:	1005003a 	cmpeq	r2,r2,zero
 20146f8:	10000c1e 	bne	r2,zero,201472c <OSQPostFront+0xb8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 20146fc:	e13ffd17 	ldw	r4,-12(fp)
 2014700:	e17ffe17 	ldw	r5,-8(fp)
 2014704:	01800104 	movi	r6,4
 2014708:	000f883a 	mov	r7,zero
 201470c:	201052c0 	call	201052c <OS_EventTaskRdy>
 2014710:	e0bffb17 	ldw	r2,-20(fp)
 2014714:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014718:	e0bff917 	ldw	r2,-28(fp)
 201471c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 2014720:	2010f6c0 	call	2010f6c <OS_Sched>
        return (OS_ERR_NONE);
 2014724:	e03fff15 	stw	zero,-4(fp)
 2014728:	00002e06 	br	20147e4 <OSQPostFront+0x170>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 201472c:	e0bffd17 	ldw	r2,-12(fp)
 2014730:	10800117 	ldw	r2,4(r2)
 2014734:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 2014738:	e0bffc17 	ldw	r2,-16(fp)
 201473c:	10c0058b 	ldhu	r3,22(r2)
 2014740:	e0bffc17 	ldw	r2,-16(fp)
 2014744:	1080050b 	ldhu	r2,20(r2)
 2014748:	18ffffcc 	andi	r3,r3,65535
 201474c:	10bfffcc 	andi	r2,r2,65535
 2014750:	18800736 	bltu	r3,r2,2014770 <OSQPostFront+0xfc>
 2014754:	e0bffb17 	ldw	r2,-20(fp)
 2014758:	e0bff815 	stw	r2,-32(fp)
 201475c:	e0bff817 	ldw	r2,-32(fp)
 2014760:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2014764:	00800784 	movi	r2,30
 2014768:	e0bfff15 	stw	r2,-4(fp)
 201476c:	00001d06 	br	20147e4 <OSQPostFront+0x170>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 2014770:	e0bffc17 	ldw	r2,-16(fp)
 2014774:	10c00417 	ldw	r3,16(r2)
 2014778:	e0bffc17 	ldw	r2,-16(fp)
 201477c:	10800117 	ldw	r2,4(r2)
 2014780:	1880041e 	bne	r3,r2,2014794 <OSQPostFront+0x120>
        pq->OSQOut = pq->OSQEnd;
 2014784:	e0bffc17 	ldw	r2,-16(fp)
 2014788:	10c00217 	ldw	r3,8(r2)
 201478c:	e0bffc17 	ldw	r2,-16(fp)
 2014790:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 2014794:	e0bffc17 	ldw	r2,-16(fp)
 2014798:	10800417 	ldw	r2,16(r2)
 201479c:	10ffff04 	addi	r3,r2,-4
 20147a0:	e0bffc17 	ldw	r2,-16(fp)
 20147a4:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 20147a8:	e0bffc17 	ldw	r2,-16(fp)
 20147ac:	10c00417 	ldw	r3,16(r2)
 20147b0:	e0bffe17 	ldw	r2,-8(fp)
 20147b4:	18800015 	stw	r2,0(r3)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 20147b8:	e0bffc17 	ldw	r2,-16(fp)
 20147bc:	1080058b 	ldhu	r2,22(r2)
 20147c0:	10800044 	addi	r2,r2,1
 20147c4:	1007883a 	mov	r3,r2
 20147c8:	e0bffc17 	ldw	r2,-16(fp)
 20147cc:	10c0058d 	sth	r3,22(r2)
 20147d0:	e0bffb17 	ldw	r2,-20(fp)
 20147d4:	e0bff715 	stw	r2,-36(fp)
 20147d8:	e0bff717 	ldw	r2,-36(fp)
 20147dc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20147e0:	e03fff15 	stw	zero,-4(fp)
 20147e4:	e0bfff17 	ldw	r2,-4(fp)
}
 20147e8:	e037883a 	mov	sp,fp
 20147ec:	dfc00117 	ldw	ra,4(sp)
 20147f0:	df000017 	ldw	fp,0(sp)
 20147f4:	dec00204 	addi	sp,sp,8
 20147f8:	f800283a 	ret

020147fc <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 20147fc:	defff404 	addi	sp,sp,-48
 2014800:	dfc00b15 	stw	ra,44(sp)
 2014804:	df000a15 	stw	fp,40(sp)
 2014808:	df000a04 	addi	fp,sp,40
 201480c:	e13ffc15 	stw	r4,-16(fp)
 2014810:	e17ffd15 	stw	r5,-12(fp)
 2014814:	e1bffe05 	stb	r6,-8(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2014818:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 201481c:	e0bffc17 	ldw	r2,-16(fp)
 2014820:	1004c03a 	cmpne	r2,r2,zero
 2014824:	1000031e 	bne	r2,zero,2014834 <OSQPostOpt+0x38>
        return (OS_ERR_PEVENT_NULL);
 2014828:	00800104 	movi	r2,4
 201482c:	e0bfff15 	stw	r2,-4(fp)
 2014830:	00007906 	br	2014a18 <OSQPostOpt+0x21c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 2014834:	e0bffc17 	ldw	r2,-16(fp)
 2014838:	10800003 	ldbu	r2,0(r2)
 201483c:	10803fcc 	andi	r2,r2,255
 2014840:	108000a0 	cmpeqi	r2,r2,2
 2014844:	1000031e 	bne	r2,zero,2014854 <OSQPostOpt+0x58>
        return (OS_ERR_EVENT_TYPE);
 2014848:	00800044 	movi	r2,1
 201484c:	e0bfff15 	stw	r2,-4(fp)
 2014850:	00007106 	br	2014a18 <OSQPostOpt+0x21c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014854:	0005303a 	rdctl	r2,status
 2014858:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201485c:	e0fff917 	ldw	r3,-28(fp)
 2014860:	00bfff84 	movi	r2,-2
 2014864:	1884703a 	and	r2,r3,r2
 2014868:	1001703a 	wrctl	status,r2
  
  return context;
 201486c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2014870:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 2014874:	e0bffc17 	ldw	r2,-16(fp)
 2014878:	10800283 	ldbu	r2,10(r2)
 201487c:	10803fcc 	andi	r2,r2,255
 2014880:	1005003a 	cmpeq	r2,r2,zero
 2014884:	1000211e 	bne	r2,zero,201490c <OSQPostOpt+0x110>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 2014888:	e0bffe03 	ldbu	r2,-8(fp)
 201488c:	1080004c 	andi	r2,r2,1
 2014890:	10803fcc 	andi	r2,r2,255
 2014894:	1005003a 	cmpeq	r2,r2,zero
 2014898:	10000c1e 	bne	r2,zero,20148cc <OSQPostOpt+0xd0>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 201489c:	00000506 	br	20148b4 <OSQPostOpt+0xb8>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 20148a0:	e13ffc17 	ldw	r4,-16(fp)
 20148a4:	e17ffd17 	ldw	r5,-12(fp)
 20148a8:	01800104 	movi	r6,4
 20148ac:	000f883a 	mov	r7,zero
 20148b0:	201052c0 	call	201052c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 20148b4:	e0bffc17 	ldw	r2,-16(fp)
 20148b8:	10800283 	ldbu	r2,10(r2)
 20148bc:	10803fcc 	andi	r2,r2,255
 20148c0:	1004c03a 	cmpne	r2,r2,zero
 20148c4:	103ff61e 	bne	r2,zero,20148a0 <OSQPostOpt+0xa4>
 20148c8:	00000506 	br	20148e0 <OSQPostOpt+0xe4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 20148cc:	e13ffc17 	ldw	r4,-16(fp)
 20148d0:	e17ffd17 	ldw	r5,-12(fp)
 20148d4:	01800104 	movi	r6,4
 20148d8:	000f883a 	mov	r7,zero
 20148dc:	201052c0 	call	201052c <OS_EventTaskRdy>
 20148e0:	e0bffa17 	ldw	r2,-24(fp)
 20148e4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20148e8:	e0bff817 	ldw	r2,-32(fp)
 20148ec:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 20148f0:	e0bffe03 	ldbu	r2,-8(fp)
 20148f4:	1080010c 	andi	r2,r2,4
 20148f8:	1004c03a 	cmpne	r2,r2,zero
 20148fc:	1000011e 	bne	r2,zero,2014904 <OSQPostOpt+0x108>
            OS_Sched();                               /* Find highest priority task ready to run       */
 2014900:	2010f6c0 	call	2010f6c <OS_Sched>
        }
        return (OS_ERR_NONE);
 2014904:	e03fff15 	stw	zero,-4(fp)
 2014908:	00004306 	br	2014a18 <OSQPostOpt+0x21c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 201490c:	e0bffc17 	ldw	r2,-16(fp)
 2014910:	10800117 	ldw	r2,4(r2)
 2014914:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 2014918:	e0bffb17 	ldw	r2,-20(fp)
 201491c:	10c0058b 	ldhu	r3,22(r2)
 2014920:	e0bffb17 	ldw	r2,-20(fp)
 2014924:	1080050b 	ldhu	r2,20(r2)
 2014928:	18ffffcc 	andi	r3,r3,65535
 201492c:	10bfffcc 	andi	r2,r2,65535
 2014930:	18800736 	bltu	r3,r2,2014950 <OSQPostOpt+0x154>
 2014934:	e0bffa17 	ldw	r2,-24(fp)
 2014938:	e0bff715 	stw	r2,-36(fp)
 201493c:	e0bff717 	ldw	r2,-36(fp)
 2014940:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 2014944:	00800784 	movi	r2,30
 2014948:	e0bfff15 	stw	r2,-4(fp)
 201494c:	00003206 	br	2014a18 <OSQPostOpt+0x21c>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 2014950:	e0bffe03 	ldbu	r2,-8(fp)
 2014954:	1080008c 	andi	r2,r2,2
 2014958:	1005003a 	cmpeq	r2,r2,zero
 201495c:	1000131e 	bne	r2,zero,20149ac <OSQPostOpt+0x1b0>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 2014960:	e0bffb17 	ldw	r2,-20(fp)
 2014964:	10c00417 	ldw	r3,16(r2)
 2014968:	e0bffb17 	ldw	r2,-20(fp)
 201496c:	10800117 	ldw	r2,4(r2)
 2014970:	1880041e 	bne	r3,r2,2014984 <OSQPostOpt+0x188>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 2014974:	e0bffb17 	ldw	r2,-20(fp)
 2014978:	10c00217 	ldw	r3,8(r2)
 201497c:	e0bffb17 	ldw	r2,-20(fp)
 2014980:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 2014984:	e0bffb17 	ldw	r2,-20(fp)
 2014988:	10800417 	ldw	r2,16(r2)
 201498c:	10ffff04 	addi	r3,r2,-4
 2014990:	e0bffb17 	ldw	r2,-20(fp)
 2014994:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 2014998:	e0bffb17 	ldw	r2,-20(fp)
 201499c:	10c00417 	ldw	r3,16(r2)
 20149a0:	e0bffd17 	ldw	r2,-12(fp)
 20149a4:	18800015 	stw	r2,0(r3)
 20149a8:	00001006 	br	20149ec <OSQPostOpt+0x1f0>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 20149ac:	e0bffb17 	ldw	r2,-20(fp)
 20149b0:	10c00317 	ldw	r3,12(r2)
 20149b4:	e0bffd17 	ldw	r2,-12(fp)
 20149b8:	18800015 	stw	r2,0(r3)
 20149bc:	18c00104 	addi	r3,r3,4
 20149c0:	e0bffb17 	ldw	r2,-20(fp)
 20149c4:	10c00315 	stw	r3,12(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 20149c8:	e0bffb17 	ldw	r2,-20(fp)
 20149cc:	10c00317 	ldw	r3,12(r2)
 20149d0:	e0bffb17 	ldw	r2,-20(fp)
 20149d4:	10800217 	ldw	r2,8(r2)
 20149d8:	1880041e 	bne	r3,r2,20149ec <OSQPostOpt+0x1f0>
            pq->OSQIn = pq->OSQStart;
 20149dc:	e0bffb17 	ldw	r2,-20(fp)
 20149e0:	10c00117 	ldw	r3,4(r2)
 20149e4:	e0bffb17 	ldw	r2,-20(fp)
 20149e8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 20149ec:	e0bffb17 	ldw	r2,-20(fp)
 20149f0:	1080058b 	ldhu	r2,22(r2)
 20149f4:	10800044 	addi	r2,r2,1
 20149f8:	1007883a 	mov	r3,r2
 20149fc:	e0bffb17 	ldw	r2,-20(fp)
 2014a00:	10c0058d 	sth	r3,22(r2)
 2014a04:	e0bffa17 	ldw	r2,-24(fp)
 2014a08:	e0bff615 	stw	r2,-40(fp)
 2014a0c:	e0bff617 	ldw	r2,-40(fp)
 2014a10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2014a14:	e03fff15 	stw	zero,-4(fp)
 2014a18:	e0bfff17 	ldw	r2,-4(fp)
}
 2014a1c:	e037883a 	mov	sp,fp
 2014a20:	dfc00117 	ldw	ra,4(sp)
 2014a24:	df000017 	ldw	fp,0(sp)
 2014a28:	dec00204 	addi	sp,sp,8
 2014a2c:	f800283a 	ret

02014a30 <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 2014a30:	defff504 	addi	sp,sp,-44
 2014a34:	df000a15 	stw	fp,40(sp)
 2014a38:	df000a04 	addi	fp,sp,40
 2014a3c:	e13ffd15 	stw	r4,-12(fp)
 2014a40:	e17ffe15 	stw	r5,-8(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2014a44:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 2014a48:	e0bffd17 	ldw	r2,-12(fp)
 2014a4c:	1004c03a 	cmpne	r2,r2,zero
 2014a50:	1000031e 	bne	r2,zero,2014a60 <OSQQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 2014a54:	00800104 	movi	r2,4
 2014a58:	e0bfff15 	stw	r2,-4(fp)
 2014a5c:	00004f06 	br	2014b9c <OSQQuery+0x16c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 2014a60:	e0bffe17 	ldw	r2,-8(fp)
 2014a64:	1004c03a 	cmpne	r2,r2,zero
 2014a68:	1000031e 	bne	r2,zero,2014a78 <OSQQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 2014a6c:	00800244 	movi	r2,9
 2014a70:	e0bfff15 	stw	r2,-4(fp)
 2014a74:	00004906 	br	2014b9c <OSQQuery+0x16c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 2014a78:	e0bffd17 	ldw	r2,-12(fp)
 2014a7c:	10800003 	ldbu	r2,0(r2)
 2014a80:	10803fcc 	andi	r2,r2,255
 2014a84:	108000a0 	cmpeqi	r2,r2,2
 2014a88:	1000031e 	bne	r2,zero,2014a98 <OSQQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 2014a8c:	00800044 	movi	r2,1
 2014a90:	e0bfff15 	stw	r2,-4(fp)
 2014a94:	00004106 	br	2014b9c <OSQQuery+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014a98:	0005303a 	rdctl	r2,status
 2014a9c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014aa0:	e0fff717 	ldw	r3,-36(fp)
 2014aa4:	00bfff84 	movi	r2,-2
 2014aa8:	1884703a 	and	r2,r3,r2
 2014aac:	1001703a 	wrctl	status,r2
  
  return context;
 2014ab0:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 2014ab4:	e0bff815 	stw	r2,-32(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 2014ab8:	e0bffd17 	ldw	r2,-12(fp)
 2014abc:	10c00283 	ldbu	r3,10(r2)
 2014ac0:	e0bffe17 	ldw	r2,-8(fp)
 2014ac4:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 2014ac8:	e0bffd17 	ldw	r2,-12(fp)
 2014acc:	108002c4 	addi	r2,r2,11
 2014ad0:	e0bffa15 	stw	r2,-24(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 2014ad4:	e0bffe17 	ldw	r2,-8(fp)
 2014ad8:	10800204 	addi	r2,r2,8
 2014adc:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2014ae0:	e03ffb05 	stb	zero,-20(fp)
 2014ae4:	00000d06 	br	2014b1c <OSQQuery+0xec>
        *pdest++ = *psrc++;
 2014ae8:	e0bffa17 	ldw	r2,-24(fp)
 2014aec:	10c00003 	ldbu	r3,0(r2)
 2014af0:	e0bff917 	ldw	r2,-28(fp)
 2014af4:	10c00005 	stb	r3,0(r2)
 2014af8:	e0bff917 	ldw	r2,-28(fp)
 2014afc:	10800044 	addi	r2,r2,1
 2014b00:	e0bff915 	stw	r2,-28(fp)
 2014b04:	e0bffa17 	ldw	r2,-24(fp)
 2014b08:	10800044 	addi	r2,r2,1
 2014b0c:	e0bffa15 	stw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 2014b10:	e0bffb03 	ldbu	r2,-20(fp)
 2014b14:	10800044 	addi	r2,r2,1
 2014b18:	e0bffb05 	stb	r2,-20(fp)
 2014b1c:	e0bffb03 	ldbu	r2,-20(fp)
 2014b20:	108000f0 	cmpltui	r2,r2,3
 2014b24:	103ff01e 	bne	r2,zero,2014ae8 <OSQQuery+0xb8>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 2014b28:	e0bffd17 	ldw	r2,-12(fp)
 2014b2c:	10800117 	ldw	r2,4(r2)
 2014b30:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 2014b34:	e0bffc17 	ldw	r2,-16(fp)
 2014b38:	1080058b 	ldhu	r2,22(r2)
 2014b3c:	10bfffcc 	andi	r2,r2,65535
 2014b40:	1005003a 	cmpeq	r2,r2,zero
 2014b44:	1000061e 	bne	r2,zero,2014b60 <OSQQuery+0x130>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 2014b48:	e0bffc17 	ldw	r2,-16(fp)
 2014b4c:	10800417 	ldw	r2,16(r2)
 2014b50:	10c00017 	ldw	r3,0(r2)
 2014b54:	e0bffe17 	ldw	r2,-8(fp)
 2014b58:	10c00015 	stw	r3,0(r2)
 2014b5c:	00000206 	br	2014b68 <OSQQuery+0x138>
    } else {
        p_q_data->OSMsg = (void *)0;
 2014b60:	e0bffe17 	ldw	r2,-8(fp)
 2014b64:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 2014b68:	e0bffc17 	ldw	r2,-16(fp)
 2014b6c:	10c0058b 	ldhu	r3,22(r2)
 2014b70:	e0bffe17 	ldw	r2,-8(fp)
 2014b74:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 2014b78:	e0bffc17 	ldw	r2,-16(fp)
 2014b7c:	10c0050b 	ldhu	r3,20(r2)
 2014b80:	e0bffe17 	ldw	r2,-8(fp)
 2014b84:	10c0018d 	sth	r3,6(r2)
 2014b88:	e0bff817 	ldw	r2,-32(fp)
 2014b8c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014b90:	e0bff617 	ldw	r2,-40(fp)
 2014b94:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2014b98:	e03fff15 	stw	zero,-4(fp)
 2014b9c:	e0bfff17 	ldw	r2,-4(fp)
}
 2014ba0:	e037883a 	mov	sp,fp
 2014ba4:	df000017 	ldw	fp,0(sp)
 2014ba8:	dec00104 	addi	sp,sp,4
 2014bac:	f800283a 	ret

02014bb0 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 2014bb0:	defffb04 	addi	sp,sp,-20
 2014bb4:	dfc00415 	stw	ra,16(sp)
 2014bb8:	df000315 	stw	fp,12(sp)
 2014bbc:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 2014bc0:	010080b4 	movhi	r4,514
 2014bc4:	211fde04 	addi	r4,r4,32632
 2014bc8:	01407804 	movi	r5,480
 2014bcc:	2010eac0 	call	2010eac <OS_MemClr>
    pq1 = &OSQTbl[0];
 2014bd0:	008080b4 	movhi	r2,514
 2014bd4:	109fde04 	addi	r2,r2,32632
 2014bd8:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 2014bdc:	008080b4 	movhi	r2,514
 2014be0:	109fe404 	addi	r2,r2,32656
 2014be4:	e0bffd15 	stw	r2,-12(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2014be8:	e03fff0d 	sth	zero,-4(fp)
 2014bec:	00000c06 	br	2014c20 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 2014bf0:	e0fffe17 	ldw	r3,-8(fp)
 2014bf4:	e0bffd17 	ldw	r2,-12(fp)
 2014bf8:	18800015 	stw	r2,0(r3)
        pq1++;
 2014bfc:	e0bffe17 	ldw	r2,-8(fp)
 2014c00:	10800604 	addi	r2,r2,24
 2014c04:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 2014c08:	e0bffd17 	ldw	r2,-12(fp)
 2014c0c:	10800604 	addi	r2,r2,24
 2014c10:	e0bffd15 	stw	r2,-12(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 2014c14:	e0bfff0b 	ldhu	r2,-4(fp)
 2014c18:	10800044 	addi	r2,r2,1
 2014c1c:	e0bfff0d 	sth	r2,-4(fp)
 2014c20:	e0bfff0b 	ldhu	r2,-4(fp)
 2014c24:	108004f0 	cmpltui	r2,r2,19
 2014c28:	103ff11e 	bne	r2,zero,2014bf0 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 2014c2c:	e0bffe17 	ldw	r2,-8(fp)
 2014c30:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 2014c34:	00c080b4 	movhi	r3,514
 2014c38:	18f81104 	addi	r3,r3,-8124
 2014c3c:	008080b4 	movhi	r2,514
 2014c40:	109fde04 	addi	r2,r2,32632
 2014c44:	18800015 	stw	r2,0(r3)
#endif
}
 2014c48:	e037883a 	mov	sp,fp
 2014c4c:	dfc00117 	ldw	ra,4(sp)
 2014c50:	df000017 	ldw	fp,0(sp)
 2014c54:	dec00204 	addi	sp,sp,8
 2014c58:	f800283a 	ret

02014c5c <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 2014c5c:	defff904 	addi	sp,sp,-28
 2014c60:	df000615 	stw	fp,24(sp)
 2014c64:	df000604 	addi	fp,sp,24
 2014c68:	e13ffe15 	stw	r4,-8(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2014c6c:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2014c70:	e0bffe17 	ldw	r2,-8(fp)
 2014c74:	1004c03a 	cmpne	r2,r2,zero
 2014c78:	1000021e 	bne	r2,zero,2014c84 <OSSemAccept+0x28>
        return (0);
 2014c7c:	e03fff15 	stw	zero,-4(fp)
 2014c80:	00002106 	br	2014d08 <OSSemAccept+0xac>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2014c84:	e0bffe17 	ldw	r2,-8(fp)
 2014c88:	10800003 	ldbu	r2,0(r2)
 2014c8c:	10803fcc 	andi	r2,r2,255
 2014c90:	108000e0 	cmpeqi	r2,r2,3
 2014c94:	1000021e 	bne	r2,zero,2014ca0 <OSSemAccept+0x44>
        return (0);
 2014c98:	e03fff15 	stw	zero,-4(fp)
 2014c9c:	00001a06 	br	2014d08 <OSSemAccept+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014ca0:	0005303a 	rdctl	r2,status
 2014ca4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014ca8:	e0fffb17 	ldw	r3,-20(fp)
 2014cac:	00bfff84 	movi	r2,-2
 2014cb0:	1884703a 	and	r2,r3,r2
 2014cb4:	1001703a 	wrctl	status,r2
  
  return context;
 2014cb8:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 2014cbc:	e0bffc15 	stw	r2,-16(fp)
    cnt = pevent->OSEventCnt;
 2014cc0:	e0bffe17 	ldw	r2,-8(fp)
 2014cc4:	1080020b 	ldhu	r2,8(r2)
 2014cc8:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 2014ccc:	e0bffd0b 	ldhu	r2,-12(fp)
 2014cd0:	1005003a 	cmpeq	r2,r2,zero
 2014cd4:	1000061e 	bne	r2,zero,2014cf0 <OSSemAccept+0x94>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 2014cd8:	e0bffe17 	ldw	r2,-8(fp)
 2014cdc:	1080020b 	ldhu	r2,8(r2)
 2014ce0:	10bfffc4 	addi	r2,r2,-1
 2014ce4:	1007883a 	mov	r3,r2
 2014ce8:	e0bffe17 	ldw	r2,-8(fp)
 2014cec:	10c0020d 	sth	r3,8(r2)
 2014cf0:	e0bffc17 	ldw	r2,-16(fp)
 2014cf4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014cf8:	e0bffa17 	ldw	r2,-24(fp)
 2014cfc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 2014d00:	e0bffd0b 	ldhu	r2,-12(fp)
 2014d04:	e0bfff15 	stw	r2,-4(fp)
 2014d08:	e0bfff17 	ldw	r2,-4(fp)
}
 2014d0c:	e037883a 	mov	sp,fp
 2014d10:	df000017 	ldw	fp,0(sp)
 2014d14:	dec00104 	addi	sp,sp,4
 2014d18:	f800283a 	ret

02014d1c <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 2014d1c:	defff804 	addi	sp,sp,-32
 2014d20:	dfc00715 	stw	ra,28(sp)
 2014d24:	df000615 	stw	fp,24(sp)
 2014d28:	df000604 	addi	fp,sp,24
 2014d2c:	e13ffe0d 	sth	r4,-8(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2014d30:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2014d34:	008080b4 	movhi	r2,514
 2014d38:	10b81404 	addi	r2,r2,-8112
 2014d3c:	10800003 	ldbu	r2,0(r2)
 2014d40:	10803fcc 	andi	r2,r2,255
 2014d44:	1005003a 	cmpeq	r2,r2,zero
 2014d48:	1000021e 	bne	r2,zero,2014d54 <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 2014d4c:	e03fff15 	stw	zero,-4(fp)
 2014d50:	00003106 	br	2014e18 <OSSemCreate+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014d54:	0005303a 	rdctl	r2,status
 2014d58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014d5c:	e0fffb17 	ldw	r3,-20(fp)
 2014d60:	00bfff84 	movi	r2,-2
 2014d64:	1884703a 	and	r2,r3,r2
 2014d68:	1001703a 	wrctl	status,r2
  
  return context;
 2014d6c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 2014d70:	e0bffc15 	stw	r2,-16(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 2014d74:	008080b4 	movhi	r2,514
 2014d78:	10b81304 	addi	r2,r2,-8116
 2014d7c:	10800017 	ldw	r2,0(r2)
 2014d80:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 2014d84:	008080b4 	movhi	r2,514
 2014d88:	10b81304 	addi	r2,r2,-8116
 2014d8c:	10800017 	ldw	r2,0(r2)
 2014d90:	1005003a 	cmpeq	r2,r2,zero
 2014d94:	1000081e 	bne	r2,zero,2014db8 <OSSemCreate+0x9c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 2014d98:	008080b4 	movhi	r2,514
 2014d9c:	10b81304 	addi	r2,r2,-8116
 2014da0:	10800017 	ldw	r2,0(r2)
 2014da4:	10800117 	ldw	r2,4(r2)
 2014da8:	1007883a 	mov	r3,r2
 2014dac:	008080b4 	movhi	r2,514
 2014db0:	10b81304 	addi	r2,r2,-8116
 2014db4:	10c00015 	stw	r3,0(r2)
 2014db8:	e0bffc17 	ldw	r2,-16(fp)
 2014dbc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014dc0:	e0bffa17 	ldw	r2,-24(fp)
 2014dc4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 2014dc8:	e0bffd17 	ldw	r2,-12(fp)
 2014dcc:	1005003a 	cmpeq	r2,r2,zero
 2014dd0:	10000f1e 	bne	r2,zero,2014e10 <OSSemCreate+0xf4>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 2014dd4:	e0fffd17 	ldw	r3,-12(fp)
 2014dd8:	008000c4 	movi	r2,3
 2014ddc:	18800005 	stb	r2,0(r3)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 2014de0:	e0fffd17 	ldw	r3,-12(fp)
 2014de4:	e0bffe0b 	ldhu	r2,-8(fp)
 2014de8:	1880020d 	sth	r2,8(r3)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 2014dec:	e0bffd17 	ldw	r2,-12(fp)
 2014df0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 2014df4:	e0fffd17 	ldw	r3,-12(fp)
 2014df8:	00800fc4 	movi	r2,63
 2014dfc:	18800385 	stb	r2,14(r3)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 2014e00:	e0bffd17 	ldw	r2,-12(fp)
 2014e04:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 2014e08:	e13ffd17 	ldw	r4,-12(fp)
 2014e0c:	2010ae00 	call	2010ae0 <OS_EventWaitListInit>
    }
    return (pevent);
 2014e10:	e0bffd17 	ldw	r2,-12(fp)
 2014e14:	e0bfff15 	stw	r2,-4(fp)
 2014e18:	e0bfff17 	ldw	r2,-4(fp)
}
 2014e1c:	e037883a 	mov	sp,fp
 2014e20:	dfc00117 	ldw	ra,4(sp)
 2014e24:	df000017 	ldw	fp,0(sp)
 2014e28:	dec00204 	addi	sp,sp,8
 2014e2c:	f800283a 	ret

02014e30 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 2014e30:	defff104 	addi	sp,sp,-60
 2014e34:	dfc00e15 	stw	ra,56(sp)
 2014e38:	df000d15 	stw	fp,52(sp)
 2014e3c:	df000d04 	addi	fp,sp,52
 2014e40:	e13ffb15 	stw	r4,-20(fp)
 2014e44:	e1bffd15 	stw	r6,-12(fp)
 2014e48:	e17ffc05 	stb	r5,-16(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2014e4c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 2014e50:	e0bffd17 	ldw	r2,-12(fp)
 2014e54:	1004c03a 	cmpne	r2,r2,zero
 2014e58:	1000031e 	bne	r2,zero,2014e68 <OSSemDel+0x38>
        return (pevent);
 2014e5c:	e0bffb17 	ldw	r2,-20(fp)
 2014e60:	e0bfff15 	stw	r2,-4(fp)
 2014e64:	00009406 	br	20150b8 <OSSemDel+0x288>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2014e68:	e0bffb17 	ldw	r2,-20(fp)
 2014e6c:	1004c03a 	cmpne	r2,r2,zero
 2014e70:	1000061e 	bne	r2,zero,2014e8c <OSSemDel+0x5c>
        *perr = OS_ERR_PEVENT_NULL;
 2014e74:	e0fffd17 	ldw	r3,-12(fp)
 2014e78:	00800104 	movi	r2,4
 2014e7c:	18800005 	stb	r2,0(r3)
        return (pevent);
 2014e80:	e0fffb17 	ldw	r3,-20(fp)
 2014e84:	e0ffff15 	stw	r3,-4(fp)
 2014e88:	00008b06 	br	20150b8 <OSSemDel+0x288>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 2014e8c:	e0bffb17 	ldw	r2,-20(fp)
 2014e90:	10800003 	ldbu	r2,0(r2)
 2014e94:	10803fcc 	andi	r2,r2,255
 2014e98:	108000e0 	cmpeqi	r2,r2,3
 2014e9c:	1000061e 	bne	r2,zero,2014eb8 <OSSemDel+0x88>
        *perr = OS_ERR_EVENT_TYPE;
 2014ea0:	e0fffd17 	ldw	r3,-12(fp)
 2014ea4:	00800044 	movi	r2,1
 2014ea8:	18800005 	stb	r2,0(r3)
        return (pevent);
 2014eac:	e0bffb17 	ldw	r2,-20(fp)
 2014eb0:	e0bfff15 	stw	r2,-4(fp)
 2014eb4:	00008006 	br	20150b8 <OSSemDel+0x288>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 2014eb8:	008080b4 	movhi	r2,514
 2014ebc:	10b81404 	addi	r2,r2,-8112
 2014ec0:	10800003 	ldbu	r2,0(r2)
 2014ec4:	10803fcc 	andi	r2,r2,255
 2014ec8:	1005003a 	cmpeq	r2,r2,zero
 2014ecc:	1000061e 	bne	r2,zero,2014ee8 <OSSemDel+0xb8>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 2014ed0:	e0fffd17 	ldw	r3,-12(fp)
 2014ed4:	008003c4 	movi	r2,15
 2014ed8:	18800005 	stb	r2,0(r3)
        return (pevent);
 2014edc:	e0fffb17 	ldw	r3,-20(fp)
 2014ee0:	e0ffff15 	stw	r3,-4(fp)
 2014ee4:	00007406 	br	20150b8 <OSSemDel+0x288>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2014ee8:	0005303a 	rdctl	r2,status
 2014eec:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2014ef0:	e0fff717 	ldw	r3,-36(fp)
 2014ef4:	00bfff84 	movi	r2,-2
 2014ef8:	1884703a 	and	r2,r3,r2
 2014efc:	1001703a 	wrctl	status,r2
  
  return context;
 2014f00:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 2014f04:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 2014f08:	e0bffb17 	ldw	r2,-20(fp)
 2014f0c:	10800283 	ldbu	r2,10(r2)
 2014f10:	10803fcc 	andi	r2,r2,255
 2014f14:	1005003a 	cmpeq	r2,r2,zero
 2014f18:	1000031e 	bne	r2,zero,2014f28 <OSSemDel+0xf8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 2014f1c:	00800044 	movi	r2,1
 2014f20:	e0bffa05 	stb	r2,-24(fp)
 2014f24:	00000106 	br	2014f2c <OSSemDel+0xfc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 2014f28:	e03ffa05 	stb	zero,-24(fp)
    }
    switch (opt) {
 2014f2c:	e0bffc03 	ldbu	r2,-16(fp)
 2014f30:	e0bffe15 	stw	r2,-8(fp)
 2014f34:	e0fffe17 	ldw	r3,-8(fp)
 2014f38:	1805003a 	cmpeq	r2,r3,zero
 2014f3c:	1000041e 	bne	r2,zero,2014f50 <OSSemDel+0x120>
 2014f40:	e0fffe17 	ldw	r3,-8(fp)
 2014f44:	18800060 	cmpeqi	r2,r3,1
 2014f48:	10002d1e 	bne	r2,zero,2015000 <OSSemDel+0x1d0>
 2014f4c:	00004f06 	br	201508c <OSSemDel+0x25c>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 2014f50:	e0bffa03 	ldbu	r2,-24(fp)
 2014f54:	1004c03a 	cmpne	r2,r2,zero
 2014f58:	10001a1e 	bne	r2,zero,2014fc4 <OSSemDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 2014f5c:	e0fffb17 	ldw	r3,-20(fp)
 2014f60:	00800fc4 	movi	r2,63
 2014f64:	18800385 	stb	r2,14(r3)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 2014f68:	e0bffb17 	ldw	r2,-20(fp)
 2014f6c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2014f70:	e0bffb17 	ldw	r2,-20(fp)
 2014f74:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 2014f78:	008080b4 	movhi	r2,514
 2014f7c:	10b81304 	addi	r2,r2,-8116
 2014f80:	10c00017 	ldw	r3,0(r2)
 2014f84:	e0bffb17 	ldw	r2,-20(fp)
 2014f88:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 2014f8c:	e0bffb17 	ldw	r2,-20(fp)
 2014f90:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 2014f94:	00c080b4 	movhi	r3,514
 2014f98:	18f81304 	addi	r3,r3,-8116
 2014f9c:	e0bffb17 	ldw	r2,-20(fp)
 2014fa0:	18800015 	stw	r2,0(r3)
 2014fa4:	e0bff817 	ldw	r2,-32(fp)
 2014fa8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2014fac:	e0bff617 	ldw	r2,-40(fp)
 2014fb0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 2014fb4:	e0bffd17 	ldw	r2,-12(fp)
 2014fb8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 2014fbc:	e03ff915 	stw	zero,-28(fp)
 2014fc0:	00003b06 	br	20150b0 <OSSemDel+0x280>
 2014fc4:	e0bff817 	ldw	r2,-32(fp)
 2014fc8:	e0bff515 	stw	r2,-44(fp)
 2014fcc:	e0bff517 	ldw	r2,-44(fp)
 2014fd0:	1001703a 	wrctl	status,r2
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 2014fd4:	e0fffd17 	ldw	r3,-12(fp)
 2014fd8:	00801244 	movi	r2,73
 2014fdc:	18800005 	stb	r2,0(r3)
                 pevent_return          = pevent;
 2014fe0:	e0bffb17 	ldw	r2,-20(fp)
 2014fe4:	e0bff915 	stw	r2,-28(fp)
             }
             break;
 2014fe8:	00003106 	br	20150b0 <OSSemDel+0x280>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 2014fec:	e13ffb17 	ldw	r4,-20(fp)
 2014ff0:	000b883a 	mov	r5,zero
 2014ff4:	01800044 	movi	r6,1
 2014ff8:	000f883a 	mov	r7,zero
 2014ffc:	201052c0 	call	201052c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 2015000:	e0bffb17 	ldw	r2,-20(fp)
 2015004:	10800283 	ldbu	r2,10(r2)
 2015008:	10803fcc 	andi	r2,r2,255
 201500c:	1004c03a 	cmpne	r2,r2,zero
 2015010:	103ff61e 	bne	r2,zero,2014fec <OSSemDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 2015014:	e0fffb17 	ldw	r3,-20(fp)
 2015018:	00800fc4 	movi	r2,63
 201501c:	18800385 	stb	r2,14(r3)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 2015020:	e0bffb17 	ldw	r2,-20(fp)
 2015024:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 2015028:	e0bffb17 	ldw	r2,-20(fp)
 201502c:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 2015030:	008080b4 	movhi	r2,514
 2015034:	10b81304 	addi	r2,r2,-8116
 2015038:	10c00017 	ldw	r3,0(r2)
 201503c:	e0bffb17 	ldw	r2,-20(fp)
 2015040:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 2015044:	e0bffb17 	ldw	r2,-20(fp)
 2015048:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 201504c:	00c080b4 	movhi	r3,514
 2015050:	18f81304 	addi	r3,r3,-8116
 2015054:	e0bffb17 	ldw	r2,-20(fp)
 2015058:	18800015 	stw	r2,0(r3)
 201505c:	e0bff817 	ldw	r2,-32(fp)
 2015060:	e0bff415 	stw	r2,-48(fp)
 2015064:	e0bff417 	ldw	r2,-48(fp)
 2015068:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 201506c:	e0bffa03 	ldbu	r2,-24(fp)
 2015070:	10800058 	cmpnei	r2,r2,1
 2015074:	1000011e 	bne	r2,zero,201507c <OSSemDel+0x24c>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 2015078:	2010f6c0 	call	2010f6c <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 201507c:	e0bffd17 	ldw	r2,-12(fp)
 2015080:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 2015084:	e03ff915 	stw	zero,-28(fp)
             break;
 2015088:	00000906 	br	20150b0 <OSSemDel+0x280>
 201508c:	e0bff817 	ldw	r2,-32(fp)
 2015090:	e0bff315 	stw	r2,-52(fp)
 2015094:	e0bff317 	ldw	r2,-52(fp)
 2015098:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 201509c:	e0fffd17 	ldw	r3,-12(fp)
 20150a0:	008001c4 	movi	r2,7
 20150a4:	18800005 	stb	r2,0(r3)
             pevent_return          = pevent;
 20150a8:	e0bffb17 	ldw	r2,-20(fp)
 20150ac:	e0bff915 	stw	r2,-28(fp)
             break;
    }
    return (pevent_return);
 20150b0:	e0bff917 	ldw	r2,-28(fp)
 20150b4:	e0bfff15 	stw	r2,-4(fp)
 20150b8:	e0bfff17 	ldw	r2,-4(fp)
}
 20150bc:	e037883a 	mov	sp,fp
 20150c0:	dfc00117 	ldw	ra,4(sp)
 20150c4:	df000017 	ldw	fp,0(sp)
 20150c8:	dec00204 	addi	sp,sp,8
 20150cc:	f800283a 	ret

020150d0 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 20150d0:	defff404 	addi	sp,sp,-48
 20150d4:	dfc00b15 	stw	ra,44(sp)
 20150d8:	df000a15 	stw	fp,40(sp)
 20150dc:	df000a04 	addi	fp,sp,40
 20150e0:	e13ffc15 	stw	r4,-16(fp)
 20150e4:	e1bffe15 	stw	r6,-8(fp)
 20150e8:	e17ffd0d 	sth	r5,-12(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20150ec:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 20150f0:	e0bffe17 	ldw	r2,-8(fp)
 20150f4:	1005003a 	cmpeq	r2,r2,zero
 20150f8:	10008f1e 	bne	r2,zero,2015338 <OSSemPend+0x268>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20150fc:	e0bffc17 	ldw	r2,-16(fp)
 2015100:	1004c03a 	cmpne	r2,r2,zero
 2015104:	1000041e 	bne	r2,zero,2015118 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 2015108:	e0fffe17 	ldw	r3,-8(fp)
 201510c:	00800104 	movi	r2,4
 2015110:	18800005 	stb	r2,0(r3)
        return;
 2015114:	00008806 	br	2015338 <OSSemPend+0x268>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2015118:	e0bffc17 	ldw	r2,-16(fp)
 201511c:	10800003 	ldbu	r2,0(r2)
 2015120:	10803fcc 	andi	r2,r2,255
 2015124:	108000e0 	cmpeqi	r2,r2,3
 2015128:	1000041e 	bne	r2,zero,201513c <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 201512c:	e0fffe17 	ldw	r3,-8(fp)
 2015130:	00800044 	movi	r2,1
 2015134:	18800005 	stb	r2,0(r3)
        return;
 2015138:	00007f06 	br	2015338 <OSSemPend+0x268>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 201513c:	008080b4 	movhi	r2,514
 2015140:	10b81404 	addi	r2,r2,-8112
 2015144:	10800003 	ldbu	r2,0(r2)
 2015148:	10803fcc 	andi	r2,r2,255
 201514c:	1005003a 	cmpeq	r2,r2,zero
 2015150:	1000041e 	bne	r2,zero,2015164 <OSSemPend+0x94>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 2015154:	e0fffe17 	ldw	r3,-8(fp)
 2015158:	00800084 	movi	r2,2
 201515c:	18800005 	stb	r2,0(r3)
        return;
 2015160:	00007506 	br	2015338 <OSSemPend+0x268>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 2015164:	008080b4 	movhi	r2,514
 2015168:	10b80604 	addi	r2,r2,-8168
 201516c:	10800003 	ldbu	r2,0(r2)
 2015170:	10803fcc 	andi	r2,r2,255
 2015174:	1005003a 	cmpeq	r2,r2,zero
 2015178:	1000041e 	bne	r2,zero,201518c <OSSemPend+0xbc>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 201517c:	e0fffe17 	ldw	r3,-8(fp)
 2015180:	00800344 	movi	r2,13
 2015184:	18800005 	stb	r2,0(r3)
        return;
 2015188:	00006b06 	br	2015338 <OSSemPend+0x268>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201518c:	0005303a 	rdctl	r2,status
 2015190:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015194:	e0fffa17 	ldw	r3,-24(fp)
 2015198:	00bfff84 	movi	r2,-2
 201519c:	1884703a 	and	r2,r3,r2
 20151a0:	1001703a 	wrctl	status,r2
  
  return context;
 20151a4:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 20151a8:	e0bffb15 	stw	r2,-20(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 20151ac:	e0bffc17 	ldw	r2,-16(fp)
 20151b0:	1080020b 	ldhu	r2,8(r2)
 20151b4:	10bfffcc 	andi	r2,r2,65535
 20151b8:	1005003a 	cmpeq	r2,r2,zero
 20151bc:	10000d1e 	bne	r2,zero,20151f4 <OSSemPend+0x124>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 20151c0:	e0bffc17 	ldw	r2,-16(fp)
 20151c4:	1080020b 	ldhu	r2,8(r2)
 20151c8:	10bfffc4 	addi	r2,r2,-1
 20151cc:	1007883a 	mov	r3,r2
 20151d0:	e0bffc17 	ldw	r2,-16(fp)
 20151d4:	10c0020d 	sth	r3,8(r2)
 20151d8:	e0bffb17 	ldw	r2,-20(fp)
 20151dc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20151e0:	e0bff917 	ldw	r2,-28(fp)
 20151e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 20151e8:	e0bffe17 	ldw	r2,-8(fp)
 20151ec:	10000005 	stb	zero,0(r2)
        return;
 20151f0:	00005106 	br	2015338 <OSSemPend+0x268>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 20151f4:	008080b4 	movhi	r2,514
 20151f8:	10b81504 	addi	r2,r2,-8108
 20151fc:	10c00017 	ldw	r3,0(r2)
 2015200:	008080b4 	movhi	r2,514
 2015204:	10b81504 	addi	r2,r2,-8108
 2015208:	10800017 	ldw	r2,0(r2)
 201520c:	10800c03 	ldbu	r2,48(r2)
 2015210:	10800054 	ori	r2,r2,1
 2015214:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 2015218:	008080b4 	movhi	r2,514
 201521c:	10b81504 	addi	r2,r2,-8108
 2015220:	10800017 	ldw	r2,0(r2)
 2015224:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 2015228:	008080b4 	movhi	r2,514
 201522c:	10b81504 	addi	r2,r2,-8108
 2015230:	10c00017 	ldw	r3,0(r2)
 2015234:	e0bffd0b 	ldhu	r2,-12(fp)
 2015238:	18800b8d 	sth	r2,46(r3)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 201523c:	e13ffc17 	ldw	r4,-16(fp)
 2015240:	20106c00 	call	20106c0 <OS_EventTaskWait>
 2015244:	e0bffb17 	ldw	r2,-20(fp)
 2015248:	e0bff815 	stw	r2,-32(fp)
 201524c:	e0bff817 	ldw	r2,-32(fp)
 2015250:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 2015254:	2010f6c0 	call	2010f6c <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015258:	0005303a 	rdctl	r2,status
 201525c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015260:	e0fff717 	ldw	r3,-36(fp)
 2015264:	00bfff84 	movi	r2,-2
 2015268:	1884703a 	and	r2,r3,r2
 201526c:	1001703a 	wrctl	status,r2
  
  return context;
 2015270:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 2015274:	e0bffb15 	stw	r2,-20(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 2015278:	008080b4 	movhi	r2,514
 201527c:	10b81504 	addi	r2,r2,-8108
 2015280:	10800017 	ldw	r2,0(r2)
 2015284:	10800c43 	ldbu	r2,49(r2)
 2015288:	10803fcc 	andi	r2,r2,255
 201528c:	e0bfff15 	stw	r2,-4(fp)
 2015290:	e0ffff17 	ldw	r3,-4(fp)
 2015294:	1805003a 	cmpeq	r2,r3,zero
 2015298:	1000041e 	bne	r2,zero,20152ac <OSSemPend+0x1dc>
 201529c:	e0ffff17 	ldw	r3,-4(fp)
 20152a0:	188000a0 	cmpeqi	r2,r3,2
 20152a4:	1000041e 	bne	r2,zero,20152b8 <OSSemPend+0x1e8>
 20152a8:	00000706 	br	20152c8 <OSSemPend+0x1f8>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 20152ac:	e0bffe17 	ldw	r2,-8(fp)
 20152b0:	10000005 	stb	zero,0(r2)
             break;
 20152b4:	00000c06 	br	20152e8 <OSSemPend+0x218>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 20152b8:	e0fffe17 	ldw	r3,-8(fp)
 20152bc:	00800384 	movi	r2,14
 20152c0:	18800005 	stb	r2,0(r3)
             break;
 20152c4:	00000806 	br	20152e8 <OSSemPend+0x218>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 20152c8:	008080b4 	movhi	r2,514
 20152cc:	10b81504 	addi	r2,r2,-8108
 20152d0:	11000017 	ldw	r4,0(r2)
 20152d4:	e17ffc17 	ldw	r5,-16(fp)
 20152d8:	20109240 	call	2010924 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 20152dc:	e0fffe17 	ldw	r3,-8(fp)
 20152e0:	00800284 	movi	r2,10
 20152e4:	18800005 	stb	r2,0(r3)
             break;
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 20152e8:	008080b4 	movhi	r2,514
 20152ec:	10b81504 	addi	r2,r2,-8108
 20152f0:	10800017 	ldw	r2,0(r2)
 20152f4:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 20152f8:	008080b4 	movhi	r2,514
 20152fc:	10b81504 	addi	r2,r2,-8108
 2015300:	10800017 	ldw	r2,0(r2)
 2015304:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 2015308:	008080b4 	movhi	r2,514
 201530c:	10b81504 	addi	r2,r2,-8108
 2015310:	10800017 	ldw	r2,0(r2)
 2015314:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 2015318:	008080b4 	movhi	r2,514
 201531c:	10b81504 	addi	r2,r2,-8108
 2015320:	10800017 	ldw	r2,0(r2)
 2015324:	10000815 	stw	zero,32(r2)
 2015328:	e0bffb17 	ldw	r2,-20(fp)
 201532c:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015330:	e0bff617 	ldw	r2,-40(fp)
 2015334:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 2015338:	e037883a 	mov	sp,fp
 201533c:	dfc00117 	ldw	ra,4(sp)
 2015340:	df000017 	ldw	fp,0(sp)
 2015344:	dec00204 	addi	sp,sp,8
 2015348:	f800283a 	ret

0201534c <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 201534c:	defff504 	addi	sp,sp,-44
 2015350:	dfc00a15 	stw	ra,40(sp)
 2015354:	df000915 	stw	fp,36(sp)
 2015358:	df000904 	addi	fp,sp,36
 201535c:	e13ffc15 	stw	r4,-16(fp)
 2015360:	e1bffe15 	stw	r6,-8(fp)
 2015364:	e17ffd05 	stb	r5,-12(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2015368:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201536c:	e0bffe17 	ldw	r2,-8(fp)
 2015370:	1004c03a 	cmpne	r2,r2,zero
 2015374:	1000021e 	bne	r2,zero,2015380 <OSSemPendAbort+0x34>
        return (0);
 2015378:	e03fff15 	stw	zero,-4(fp)
 201537c:	00004c06 	br	20154b0 <OSSemPendAbort+0x164>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2015380:	e0bffc17 	ldw	r2,-16(fp)
 2015384:	1004c03a 	cmpne	r2,r2,zero
 2015388:	1000051e 	bne	r2,zero,20153a0 <OSSemPendAbort+0x54>
        *perr = OS_ERR_PEVENT_NULL;
 201538c:	e0fffe17 	ldw	r3,-8(fp)
 2015390:	00800104 	movi	r2,4
 2015394:	18800005 	stb	r2,0(r3)
        return (0);
 2015398:	e03fff15 	stw	zero,-4(fp)
 201539c:	00004406 	br	20154b0 <OSSemPendAbort+0x164>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 20153a0:	e0bffc17 	ldw	r2,-16(fp)
 20153a4:	10800003 	ldbu	r2,0(r2)
 20153a8:	10803fcc 	andi	r2,r2,255
 20153ac:	108000e0 	cmpeqi	r2,r2,3
 20153b0:	1000051e 	bne	r2,zero,20153c8 <OSSemPendAbort+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 20153b4:	e0fffe17 	ldw	r3,-8(fp)
 20153b8:	00800044 	movi	r2,1
 20153bc:	18800005 	stb	r2,0(r3)
        return (0);
 20153c0:	e03fff15 	stw	zero,-4(fp)
 20153c4:	00003a06 	br	20154b0 <OSSemPendAbort+0x164>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20153c8:	0005303a 	rdctl	r2,status
 20153cc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20153d0:	e0fff917 	ldw	r3,-28(fp)
 20153d4:	00bfff84 	movi	r2,-2
 20153d8:	1884703a 	and	r2,r3,r2
 20153dc:	1001703a 	wrctl	status,r2
  
  return context;
 20153e0:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 20153e4:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 20153e8:	e0bffc17 	ldw	r2,-16(fp)
 20153ec:	10800283 	ldbu	r2,10(r2)
 20153f0:	10803fcc 	andi	r2,r2,255
 20153f4:	1005003a 	cmpeq	r2,r2,zero
 20153f8:	1000261e 	bne	r2,zero,2015494 <OSSemPendAbort+0x148>
        nbr_tasks = 0;
 20153fc:	e03ffb05 	stb	zero,-20(fp)
        switch (opt) {
 2015400:	e0bffd03 	ldbu	r2,-12(fp)
 2015404:	10800060 	cmpeqi	r2,r2,1
 2015408:	1000091e 	bne	r2,zero,2015430 <OSSemPendAbort+0xe4>
 201540c:	00000e06 	br	2015448 <OSSemPendAbort+0xfc>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 2015410:	e13ffc17 	ldw	r4,-16(fp)
 2015414:	000b883a 	mov	r5,zero
 2015418:	01800044 	movi	r6,1
 201541c:	01c00084 	movi	r7,2
 2015420:	201052c0 	call	201052c <OS_EventTaskRdy>
                     nbr_tasks++;
 2015424:	e0bffb03 	ldbu	r2,-20(fp)
 2015428:	10800044 	addi	r2,r2,1
 201542c:	e0bffb05 	stb	r2,-20(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 2015430:	e0bffc17 	ldw	r2,-16(fp)
 2015434:	10800283 	ldbu	r2,10(r2)
 2015438:	10803fcc 	andi	r2,r2,255
 201543c:	1004c03a 	cmpne	r2,r2,zero
 2015440:	103ff31e 	bne	r2,zero,2015410 <OSSemPendAbort+0xc4>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 2015444:	00000806 	br	2015468 <OSSemPendAbort+0x11c>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 2015448:	e13ffc17 	ldw	r4,-16(fp)
 201544c:	000b883a 	mov	r5,zero
 2015450:	01800044 	movi	r6,1
 2015454:	01c00084 	movi	r7,2
 2015458:	201052c0 	call	201052c <OS_EventTaskRdy>
                 nbr_tasks++;
 201545c:	e0bffb03 	ldbu	r2,-20(fp)
 2015460:	10800044 	addi	r2,r2,1
 2015464:	e0bffb05 	stb	r2,-20(fp)
 2015468:	e0bffa17 	ldw	r2,-24(fp)
 201546c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015470:	e0bff817 	ldw	r2,-32(fp)
 2015474:	1001703a 	wrctl	status,r2
                 break;
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 2015478:	2010f6c0 	call	2010f6c <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 201547c:	e0fffe17 	ldw	r3,-8(fp)
 2015480:	00800384 	movi	r2,14
 2015484:	18800005 	stb	r2,0(r3)
        return (nbr_tasks);
 2015488:	e0bffb03 	ldbu	r2,-20(fp)
 201548c:	e0bfff15 	stw	r2,-4(fp)
 2015490:	00000706 	br	20154b0 <OSSemPendAbort+0x164>
 2015494:	e0bffa17 	ldw	r2,-24(fp)
 2015498:	e0bff715 	stw	r2,-36(fp)
 201549c:	e0bff717 	ldw	r2,-36(fp)
 20154a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 20154a4:	e0bffe17 	ldw	r2,-8(fp)
 20154a8:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 20154ac:	e03fff15 	stw	zero,-4(fp)
 20154b0:	e0bfff17 	ldw	r2,-4(fp)
}
 20154b4:	e037883a 	mov	sp,fp
 20154b8:	dfc00117 	ldw	ra,4(sp)
 20154bc:	df000017 	ldw	fp,0(sp)
 20154c0:	dec00204 	addi	sp,sp,8
 20154c4:	f800283a 	ret

020154c8 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 20154c8:	defff704 	addi	sp,sp,-36
 20154cc:	dfc00815 	stw	ra,32(sp)
 20154d0:	df000715 	stw	fp,28(sp)
 20154d4:	df000704 	addi	fp,sp,28
 20154d8:	e13ffe15 	stw	r4,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 20154dc:	e03ffd15 	stw	zero,-12(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 20154e0:	e0bffe17 	ldw	r2,-8(fp)
 20154e4:	1004c03a 	cmpne	r2,r2,zero
 20154e8:	1000031e 	bne	r2,zero,20154f8 <OSSemPost+0x30>
        return (OS_ERR_PEVENT_NULL);
 20154ec:	00800104 	movi	r2,4
 20154f0:	e0bfff15 	stw	r2,-4(fp)
 20154f4:	00003806 	br	20155d8 <OSSemPost+0x110>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 20154f8:	e0bffe17 	ldw	r2,-8(fp)
 20154fc:	10800003 	ldbu	r2,0(r2)
 2015500:	10803fcc 	andi	r2,r2,255
 2015504:	108000e0 	cmpeqi	r2,r2,3
 2015508:	1000031e 	bne	r2,zero,2015518 <OSSemPost+0x50>
        return (OS_ERR_EVENT_TYPE);
 201550c:	00800044 	movi	r2,1
 2015510:	e0bfff15 	stw	r2,-4(fp)
 2015514:	00003006 	br	20155d8 <OSSemPost+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015518:	0005303a 	rdctl	r2,status
 201551c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015520:	e0fffc17 	ldw	r3,-16(fp)
 2015524:	00bfff84 	movi	r2,-2
 2015528:	1884703a 	and	r2,r3,r2
 201552c:	1001703a 	wrctl	status,r2
  
  return context;
 2015530:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 2015534:	e0bffd15 	stw	r2,-12(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 2015538:	e0bffe17 	ldw	r2,-8(fp)
 201553c:	10800283 	ldbu	r2,10(r2)
 2015540:	10803fcc 	andi	r2,r2,255
 2015544:	1005003a 	cmpeq	r2,r2,zero
 2015548:	10000c1e 	bne	r2,zero,201557c <OSSemPost+0xb4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 201554c:	e13ffe17 	ldw	r4,-8(fp)
 2015550:	000b883a 	mov	r5,zero
 2015554:	01800044 	movi	r6,1
 2015558:	000f883a 	mov	r7,zero
 201555c:	201052c0 	call	201052c <OS_EventTaskRdy>
 2015560:	e0bffd17 	ldw	r2,-12(fp)
 2015564:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015568:	e0bffb17 	ldw	r2,-20(fp)
 201556c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 2015570:	2010f6c0 	call	2010f6c <OS_Sched>
        return (OS_ERR_NONE);
 2015574:	e03fff15 	stw	zero,-4(fp)
 2015578:	00001706 	br	20155d8 <OSSemPost+0x110>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 201557c:	e0bffe17 	ldw	r2,-8(fp)
 2015580:	1080020b 	ldhu	r2,8(r2)
 2015584:	10ffffcc 	andi	r3,r2,65535
 2015588:	00bfffd4 	movui	r2,65535
 201558c:	18800c26 	beq	r3,r2,20155c0 <OSSemPost+0xf8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 2015590:	e0bffe17 	ldw	r2,-8(fp)
 2015594:	1080020b 	ldhu	r2,8(r2)
 2015598:	10800044 	addi	r2,r2,1
 201559c:	1007883a 	mov	r3,r2
 20155a0:	e0bffe17 	ldw	r2,-8(fp)
 20155a4:	10c0020d 	sth	r3,8(r2)
 20155a8:	e0bffd17 	ldw	r2,-12(fp)
 20155ac:	e0bffa15 	stw	r2,-24(fp)
 20155b0:	e0bffa17 	ldw	r2,-24(fp)
 20155b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 20155b8:	e03fff15 	stw	zero,-4(fp)
 20155bc:	00000606 	br	20155d8 <OSSemPost+0x110>
 20155c0:	e0bffd17 	ldw	r2,-12(fp)
 20155c4:	e0bff915 	stw	r2,-28(fp)
 20155c8:	e0bff917 	ldw	r2,-28(fp)
 20155cc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 20155d0:	00800c84 	movi	r2,50
 20155d4:	e0bfff15 	stw	r2,-4(fp)
 20155d8:	e0bfff17 	ldw	r2,-4(fp)
}
 20155dc:	e037883a 	mov	sp,fp
 20155e0:	dfc00117 	ldw	ra,4(sp)
 20155e4:	df000017 	ldw	fp,0(sp)
 20155e8:	dec00204 	addi	sp,sp,8
 20155ec:	f800283a 	ret

020155f0 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 20155f0:	defff604 	addi	sp,sp,-40
 20155f4:	df000915 	stw	fp,36(sp)
 20155f8:	df000904 	addi	fp,sp,36
 20155fc:	e13ffd15 	stw	r4,-12(fp)
 2015600:	e17ffe15 	stw	r5,-8(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 2015604:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 2015608:	e0bffd17 	ldw	r2,-12(fp)
 201560c:	1004c03a 	cmpne	r2,r2,zero
 2015610:	1000031e 	bne	r2,zero,2015620 <OSSemQuery+0x30>
        return (OS_ERR_PEVENT_NULL);
 2015614:	00800104 	movi	r2,4
 2015618:	e0bfff15 	stw	r2,-4(fp)
 201561c:	00003b06 	br	201570c <OSSemQuery+0x11c>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 2015620:	e0bffe17 	ldw	r2,-8(fp)
 2015624:	1004c03a 	cmpne	r2,r2,zero
 2015628:	1000031e 	bne	r2,zero,2015638 <OSSemQuery+0x48>
        return (OS_ERR_PDATA_NULL);
 201562c:	00800244 	movi	r2,9
 2015630:	e0bfff15 	stw	r2,-4(fp)
 2015634:	00003506 	br	201570c <OSSemQuery+0x11c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 2015638:	e0bffd17 	ldw	r2,-12(fp)
 201563c:	10800003 	ldbu	r2,0(r2)
 2015640:	10803fcc 	andi	r2,r2,255
 2015644:	108000e0 	cmpeqi	r2,r2,3
 2015648:	1000031e 	bne	r2,zero,2015658 <OSSemQuery+0x68>
        return (OS_ERR_EVENT_TYPE);
 201564c:	00800044 	movi	r2,1
 2015650:	e0bfff15 	stw	r2,-4(fp)
 2015654:	00002d06 	br	201570c <OSSemQuery+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015658:	0005303a 	rdctl	r2,status
 201565c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015660:	e0fff817 	ldw	r3,-32(fp)
 2015664:	00bfff84 	movi	r2,-2
 2015668:	1884703a 	and	r2,r3,r2
 201566c:	1001703a 	wrctl	status,r2
  
  return context;
 2015670:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 2015674:	e0bff915 	stw	r2,-28(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 2015678:	e0bffd17 	ldw	r2,-12(fp)
 201567c:	10c00283 	ldbu	r3,10(r2)
 2015680:	e0bffe17 	ldw	r2,-8(fp)
 2015684:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 2015688:	e0bffd17 	ldw	r2,-12(fp)
 201568c:	108002c4 	addi	r2,r2,11
 2015690:	e0bffc15 	stw	r2,-16(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 2015694:	e0bffe17 	ldw	r2,-8(fp)
 2015698:	10800084 	addi	r2,r2,2
 201569c:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20156a0:	e03ffa05 	stb	zero,-24(fp)
 20156a4:	00000d06 	br	20156dc <OSSemQuery+0xec>
        *pdest++ = *psrc++;
 20156a8:	e0bffc17 	ldw	r2,-16(fp)
 20156ac:	10c00003 	ldbu	r3,0(r2)
 20156b0:	e0bffb17 	ldw	r2,-20(fp)
 20156b4:	10c00005 	stb	r3,0(r2)
 20156b8:	e0bffb17 	ldw	r2,-20(fp)
 20156bc:	10800044 	addi	r2,r2,1
 20156c0:	e0bffb15 	stw	r2,-20(fp)
 20156c4:	e0bffc17 	ldw	r2,-16(fp)
 20156c8:	10800044 	addi	r2,r2,1
 20156cc:	e0bffc15 	stw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 20156d0:	e0bffa03 	ldbu	r2,-24(fp)
 20156d4:	10800044 	addi	r2,r2,1
 20156d8:	e0bffa05 	stb	r2,-24(fp)
 20156dc:	e0bffa03 	ldbu	r2,-24(fp)
 20156e0:	108000f0 	cmpltui	r2,r2,3
 20156e4:	103ff01e 	bne	r2,zero,20156a8 <OSSemQuery+0xb8>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 20156e8:	e0bffd17 	ldw	r2,-12(fp)
 20156ec:	10c0020b 	ldhu	r3,8(r2)
 20156f0:	e0bffe17 	ldw	r2,-8(fp)
 20156f4:	10c0000d 	sth	r3,0(r2)
 20156f8:	e0bff917 	ldw	r2,-28(fp)
 20156fc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015700:	e0bff717 	ldw	r2,-36(fp)
 2015704:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 2015708:	e03fff15 	stw	zero,-4(fp)
 201570c:	e0bfff17 	ldw	r2,-4(fp)
}
 2015710:	e037883a 	mov	sp,fp
 2015714:	df000017 	ldw	fp,0(sp)
 2015718:	dec00104 	addi	sp,sp,4
 201571c:	f800283a 	ret

02015720 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 2015720:	defff904 	addi	sp,sp,-28
 2015724:	df000615 	stw	fp,24(sp)
 2015728:	df000604 	addi	fp,sp,24
 201572c:	e13ffd15 	stw	r4,-12(fp)
 2015730:	e1bfff15 	stw	r6,-4(fp)
 2015734:	e17ffe0d 	sth	r5,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2015738:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 201573c:	e0bfff17 	ldw	r2,-4(fp)
 2015740:	1005003a 	cmpeq	r2,r2,zero
 2015744:	1000331e 	bne	r2,zero,2015814 <OSSemSet+0xf4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 2015748:	e0bffd17 	ldw	r2,-12(fp)
 201574c:	1004c03a 	cmpne	r2,r2,zero
 2015750:	1000041e 	bne	r2,zero,2015764 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 2015754:	e0ffff17 	ldw	r3,-4(fp)
 2015758:	00800104 	movi	r2,4
 201575c:	18800005 	stb	r2,0(r3)
        return;
 2015760:	00002c06 	br	2015814 <OSSemSet+0xf4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 2015764:	e0bffd17 	ldw	r2,-12(fp)
 2015768:	10800003 	ldbu	r2,0(r2)
 201576c:	10803fcc 	andi	r2,r2,255
 2015770:	108000e0 	cmpeqi	r2,r2,3
 2015774:	1000041e 	bne	r2,zero,2015788 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 2015778:	e0ffff17 	ldw	r3,-4(fp)
 201577c:	00800044 	movi	r2,1
 2015780:	18800005 	stb	r2,0(r3)
        return;
 2015784:	00002306 	br	2015814 <OSSemSet+0xf4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015788:	0005303a 	rdctl	r2,status
 201578c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015790:	e0fffb17 	ldw	r3,-20(fp)
 2015794:	00bfff84 	movi	r2,-2
 2015798:	1884703a 	and	r2,r3,r2
 201579c:	1001703a 	wrctl	status,r2
  
  return context;
 20157a0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 20157a4:	e0bffc15 	stw	r2,-16(fp)
    *perr = OS_ERR_NONE;
 20157a8:	e0bfff17 	ldw	r2,-4(fp)
 20157ac:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 20157b0:	e0bffd17 	ldw	r2,-12(fp)
 20157b4:	1080020b 	ldhu	r2,8(r2)
 20157b8:	10bfffcc 	andi	r2,r2,65535
 20157bc:	1005003a 	cmpeq	r2,r2,zero
 20157c0:	1000041e 	bne	r2,zero,20157d4 <OSSemSet+0xb4>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 20157c4:	e0fffd17 	ldw	r3,-12(fp)
 20157c8:	e0bffe0b 	ldhu	r2,-8(fp)
 20157cc:	1880020d 	sth	r2,8(r3)
 20157d0:	00000c06 	br	2015804 <OSSemSet+0xe4>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 20157d4:	e0bffd17 	ldw	r2,-12(fp)
 20157d8:	10800283 	ldbu	r2,10(r2)
 20157dc:	10803fcc 	andi	r2,r2,255
 20157e0:	1004c03a 	cmpne	r2,r2,zero
 20157e4:	1000041e 	bne	r2,zero,20157f8 <OSSemSet+0xd8>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 20157e8:	e0fffd17 	ldw	r3,-12(fp)
 20157ec:	e0bffe0b 	ldhu	r2,-8(fp)
 20157f0:	1880020d 	sth	r2,8(r3)
 20157f4:	00000306 	br	2015804 <OSSemSet+0xe4>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 20157f8:	e0ffff17 	ldw	r3,-4(fp)
 20157fc:	00801244 	movi	r2,73
 2015800:	18800005 	stb	r2,0(r3)
 2015804:	e0bffc17 	ldw	r2,-16(fp)
 2015808:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201580c:	e0bffa17 	ldw	r2,-24(fp)
 2015810:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 2015814:	e037883a 	mov	sp,fp
 2015818:	df000017 	ldw	fp,0(sp)
 201581c:	dec00104 	addi	sp,sp,4
 2015820:	f800283a 	ret

02015824 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 2015824:	defff004 	addi	sp,sp,-64
 2015828:	dfc00f15 	stw	ra,60(sp)
 201582c:	df000e15 	stw	fp,56(sp)
 2015830:	df000e04 	addi	fp,sp,56
 2015834:	e13ffd05 	stb	r4,-12(fp)
 2015838:	e17ffe05 	stb	r5,-8(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 201583c:	e03ff715 	stw	zero,-36(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 2015840:	e0bffd03 	ldbu	r2,-12(fp)
 2015844:	10800530 	cmpltui	r2,r2,20
 2015848:	1000061e 	bne	r2,zero,2015864 <OSTaskChangePrio+0x40>
        if (oldprio != OS_PRIO_SELF) {
 201584c:	e0bffd03 	ldbu	r2,-12(fp)
 2015850:	10803fe0 	cmpeqi	r2,r2,255
 2015854:	1000031e 	bne	r2,zero,2015864 <OSTaskChangePrio+0x40>
            return (OS_ERR_PRIO_INVALID);
 2015858:	00800a84 	movi	r2,42
 201585c:	e0bfff15 	stw	r2,-4(fp)
 2015860:	00014706 	br	2015d80 <OSTaskChangePrio+0x55c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 2015864:	e0bffe03 	ldbu	r2,-8(fp)
 2015868:	10800530 	cmpltui	r2,r2,20
 201586c:	1000031e 	bne	r2,zero,201587c <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 2015870:	00800a84 	movi	r2,42
 2015874:	e0bfff15 	stw	r2,-4(fp)
 2015878:	00014106 	br	2015d80 <OSTaskChangePrio+0x55c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 201587c:	0005303a 	rdctl	r2,status
 2015880:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015884:	e0fff617 	ldw	r3,-40(fp)
 2015888:	00bfff84 	movi	r2,-2
 201588c:	1884703a 	and	r2,r3,r2
 2015890:	1001703a 	wrctl	status,r2
  
  return context;
 2015894:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2015898:	e0bff715 	stw	r2,-36(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 201589c:	e0bffe03 	ldbu	r2,-8(fp)
 20158a0:	00c080f4 	movhi	r3,515
 20158a4:	18e66a04 	addi	r3,r3,-26200
 20158a8:	1085883a 	add	r2,r2,r2
 20158ac:	1085883a 	add	r2,r2,r2
 20158b0:	10c5883a 	add	r2,r2,r3
 20158b4:	10800017 	ldw	r2,0(r2)
 20158b8:	1005003a 	cmpeq	r2,r2,zero
 20158bc:	1000071e 	bne	r2,zero,20158dc <OSTaskChangePrio+0xb8>
 20158c0:	e0bff717 	ldw	r2,-36(fp)
 20158c4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20158c8:	e0bff517 	ldw	r2,-44(fp)
 20158cc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 20158d0:	00800a04 	movi	r2,40
 20158d4:	e0bfff15 	stw	r2,-4(fp)
 20158d8:	00012906 	br	2015d80 <OSTaskChangePrio+0x55c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 20158dc:	e0bffd03 	ldbu	r2,-12(fp)
 20158e0:	10803fd8 	cmpnei	r2,r2,255
 20158e4:	1000051e 	bne	r2,zero,20158fc <OSTaskChangePrio+0xd8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 20158e8:	008080b4 	movhi	r2,514
 20158ec:	10b81504 	addi	r2,r2,-8108
 20158f0:	10800017 	ldw	r2,0(r2)
 20158f4:	10800c83 	ldbu	r2,50(r2)
 20158f8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 20158fc:	e0bffd03 	ldbu	r2,-12(fp)
 2015900:	00c080f4 	movhi	r3,515
 2015904:	18e66a04 	addi	r3,r3,-26200
 2015908:	1085883a 	add	r2,r2,r2
 201590c:	1085883a 	add	r2,r2,r2
 2015910:	10c5883a 	add	r2,r2,r3
 2015914:	10800017 	ldw	r2,0(r2)
 2015918:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 201591c:	e0bffa17 	ldw	r2,-24(fp)
 2015920:	1004c03a 	cmpne	r2,r2,zero
 2015924:	1000071e 	bne	r2,zero,2015944 <OSTaskChangePrio+0x120>
 2015928:	e0bff717 	ldw	r2,-36(fp)
 201592c:	e0bff415 	stw	r2,-48(fp)
 2015930:	e0bff417 	ldw	r2,-48(fp)
 2015934:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 2015938:	00800a44 	movi	r2,41
 201593c:	e0bfff15 	stw	r2,-4(fp)
 2015940:	00010f06 	br	2015d80 <OSTaskChangePrio+0x55c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 2015944:	e0bffa17 	ldw	r2,-24(fp)
 2015948:	10800058 	cmpnei	r2,r2,1
 201594c:	1000071e 	bne	r2,zero,201596c <OSTaskChangePrio+0x148>
 2015950:	e0bff717 	ldw	r2,-36(fp)
 2015954:	e0bff315 	stw	r2,-52(fp)
 2015958:	e0bff317 	ldw	r2,-52(fp)
 201595c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 2015960:	008010c4 	movi	r2,67
 2015964:	e0bfff15 	stw	r2,-4(fp)
 2015968:	00010506 	br	2015d80 <OSTaskChangePrio+0x55c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 201596c:	e0bffe03 	ldbu	r2,-8(fp)
 2015970:	1004d0fa 	srli	r2,r2,3
 2015974:	e0bff985 	stb	r2,-26(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 2015978:	e0bffe03 	ldbu	r2,-8(fp)
 201597c:	108001cc 	andi	r2,r2,7
 2015980:	e0bff945 	stb	r2,-27(fp)
    bity_new              = (INT8U)(1 << y_new);
 2015984:	e0fff983 	ldbu	r3,-26(fp)
 2015988:	00800044 	movi	r2,1
 201598c:	10c4983a 	sll	r2,r2,r3
 2015990:	e0bff8c5 	stb	r2,-29(fp)
    bitx_new              = (INT8U)(1 << x_new);
 2015994:	e0fff943 	ldbu	r3,-27(fp)
 2015998:	00800044 	movi	r2,1
 201599c:	10c4983a 	sll	r2,r2,r3
 20159a0:	e0bff885 	stb	r2,-30(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 20159a4:	e0bffd03 	ldbu	r2,-12(fp)
 20159a8:	00c080f4 	movhi	r3,515
 20159ac:	18e66a04 	addi	r3,r3,-26200
 20159b0:	1085883a 	add	r2,r2,r2
 20159b4:	1085883a 	add	r2,r2,r2
 20159b8:	10c5883a 	add	r2,r2,r3
 20159bc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 20159c0:	e0bffe03 	ldbu	r2,-8(fp)
 20159c4:	00c080f4 	movhi	r3,515
 20159c8:	18e66a04 	addi	r3,r3,-26200
 20159cc:	1085883a 	add	r2,r2,r2
 20159d0:	1085883a 	add	r2,r2,r2
 20159d4:	10c7883a 	add	r3,r2,r3
 20159d8:	e0bffa17 	ldw	r2,-24(fp)
 20159dc:	18800015 	stw	r2,0(r3)
    y_old                 =  ptcb->OSTCBY;
 20159e0:	e0bffa17 	ldw	r2,-24(fp)
 20159e4:	10800d03 	ldbu	r2,52(r2)
 20159e8:	e0bff905 	stb	r2,-28(fp)
    bity_old              =  ptcb->OSTCBBitY;
 20159ec:	e0bffa17 	ldw	r2,-24(fp)
 20159f0:	10800d83 	ldbu	r2,54(r2)
 20159f4:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 20159f8:	e0bffa17 	ldw	r2,-24(fp)
 20159fc:	10800d43 	ldbu	r2,53(r2)
 2015a00:	e0bff805 	stb	r2,-32(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 2015a04:	e0fff903 	ldbu	r3,-28(fp)
 2015a08:	008080b4 	movhi	r2,514
 2015a0c:	10b81244 	addi	r2,r2,-8119
 2015a10:	10c5883a 	add	r2,r2,r3
 2015a14:	10c00003 	ldbu	r3,0(r2)
 2015a18:	e0bff803 	ldbu	r2,-32(fp)
 2015a1c:	1884703a 	and	r2,r3,r2
 2015a20:	10803fcc 	andi	r2,r2,255
 2015a24:	1005003a 	cmpeq	r2,r2,zero
 2015a28:	1000381e 	bne	r2,zero,2015b0c <OSTaskChangePrio+0x2e8>
         OSRdyTbl[y_old] &= ~bitx_old;
 2015a2c:	e13ff903 	ldbu	r4,-28(fp)
 2015a30:	e0fff903 	ldbu	r3,-28(fp)
 2015a34:	008080b4 	movhi	r2,514
 2015a38:	10b81244 	addi	r2,r2,-8119
 2015a3c:	10c5883a 	add	r2,r2,r3
 2015a40:	10800003 	ldbu	r2,0(r2)
 2015a44:	1007883a 	mov	r3,r2
 2015a48:	e0bff803 	ldbu	r2,-32(fp)
 2015a4c:	0084303a 	nor	r2,zero,r2
 2015a50:	1884703a 	and	r2,r3,r2
 2015a54:	1007883a 	mov	r3,r2
 2015a58:	008080b4 	movhi	r2,514
 2015a5c:	10b81244 	addi	r2,r2,-8119
 2015a60:	1105883a 	add	r2,r2,r4
 2015a64:	10c00005 	stb	r3,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 2015a68:	e0fff903 	ldbu	r3,-28(fp)
 2015a6c:	008080b4 	movhi	r2,514
 2015a70:	10b81244 	addi	r2,r2,-8119
 2015a74:	10c5883a 	add	r2,r2,r3
 2015a78:	10800003 	ldbu	r2,0(r2)
 2015a7c:	10803fcc 	andi	r2,r2,255
 2015a80:	1004c03a 	cmpne	r2,r2,zero
 2015a84:	10000b1e 	bne	r2,zero,2015ab4 <OSTaskChangePrio+0x290>
             OSRdyGrp &= ~bity_old;
 2015a88:	e0bff843 	ldbu	r2,-31(fp)
 2015a8c:	0084303a 	nor	r2,zero,r2
 2015a90:	1007883a 	mov	r3,r2
 2015a94:	008080b4 	movhi	r2,514
 2015a98:	10b81204 	addi	r2,r2,-8120
 2015a9c:	10800003 	ldbu	r2,0(r2)
 2015aa0:	1884703a 	and	r2,r3,r2
 2015aa4:	1007883a 	mov	r3,r2
 2015aa8:	008080b4 	movhi	r2,514
 2015aac:	10b81204 	addi	r2,r2,-8120
 2015ab0:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 2015ab4:	008080b4 	movhi	r2,514
 2015ab8:	10b81204 	addi	r2,r2,-8120
 2015abc:	10c00003 	ldbu	r3,0(r2)
 2015ac0:	e0bff8c3 	ldbu	r2,-29(fp)
 2015ac4:	1884b03a 	or	r2,r3,r2
 2015ac8:	1007883a 	mov	r3,r2
 2015acc:	008080b4 	movhi	r2,514
 2015ad0:	10b81204 	addi	r2,r2,-8120
 2015ad4:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 2015ad8:	e13ff983 	ldbu	r4,-26(fp)
 2015adc:	e0fff983 	ldbu	r3,-26(fp)
 2015ae0:	008080b4 	movhi	r2,514
 2015ae4:	10b81244 	addi	r2,r2,-8119
 2015ae8:	10c5883a 	add	r2,r2,r3
 2015aec:	10c00003 	ldbu	r3,0(r2)
 2015af0:	e0bff883 	ldbu	r2,-30(fp)
 2015af4:	1884b03a 	or	r2,r3,r2
 2015af8:	1007883a 	mov	r3,r2
 2015afc:	008080b4 	movhi	r2,514
 2015b00:	10b81244 	addi	r2,r2,-8119
 2015b04:	1105883a 	add	r2,r2,r4
 2015b08:	10c00005 	stb	r3,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 2015b0c:	e0bffa17 	ldw	r2,-24(fp)
 2015b10:	10800717 	ldw	r2,28(r2)
 2015b14:	e0bffc15 	stw	r2,-16(fp)
    if (pevent != (OS_EVENT *)0) {
 2015b18:	e0bffc17 	ldw	r2,-16(fp)
 2015b1c:	1005003a 	cmpeq	r2,r2,zero
 2015b20:	1000341e 	bne	r2,zero,2015bf4 <OSTaskChangePrio+0x3d0>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 2015b24:	e13ff903 	ldbu	r4,-28(fp)
 2015b28:	e0fff903 	ldbu	r3,-28(fp)
 2015b2c:	e0bffc17 	ldw	r2,-16(fp)
 2015b30:	1885883a 	add	r2,r3,r2
 2015b34:	10800204 	addi	r2,r2,8
 2015b38:	108000c3 	ldbu	r2,3(r2)
 2015b3c:	1007883a 	mov	r3,r2
 2015b40:	e0bff803 	ldbu	r2,-32(fp)
 2015b44:	0084303a 	nor	r2,zero,r2
 2015b48:	1884703a 	and	r2,r3,r2
 2015b4c:	1007883a 	mov	r3,r2
 2015b50:	e0bffc17 	ldw	r2,-16(fp)
 2015b54:	2085883a 	add	r2,r4,r2
 2015b58:	10800204 	addi	r2,r2,8
 2015b5c:	10c000c5 	stb	r3,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 2015b60:	e0fff903 	ldbu	r3,-28(fp)
 2015b64:	e0bffc17 	ldw	r2,-16(fp)
 2015b68:	1885883a 	add	r2,r3,r2
 2015b6c:	10800204 	addi	r2,r2,8
 2015b70:	108000c3 	ldbu	r2,3(r2)
 2015b74:	10803fcc 	andi	r2,r2,255
 2015b78:	1004c03a 	cmpne	r2,r2,zero
 2015b7c:	1000091e 	bne	r2,zero,2015ba4 <OSTaskChangePrio+0x380>
            pevent->OSEventGrp    &= ~bity_old;
 2015b80:	e0bffc17 	ldw	r2,-16(fp)
 2015b84:	10800283 	ldbu	r2,10(r2)
 2015b88:	1007883a 	mov	r3,r2
 2015b8c:	e0bff843 	ldbu	r2,-31(fp)
 2015b90:	0084303a 	nor	r2,zero,r2
 2015b94:	1884703a 	and	r2,r3,r2
 2015b98:	1007883a 	mov	r3,r2
 2015b9c:	e0bffc17 	ldw	r2,-16(fp)
 2015ba0:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 2015ba4:	e0bffc17 	ldw	r2,-16(fp)
 2015ba8:	10c00283 	ldbu	r3,10(r2)
 2015bac:	e0bff8c3 	ldbu	r2,-29(fp)
 2015bb0:	1884b03a 	or	r2,r3,r2
 2015bb4:	1007883a 	mov	r3,r2
 2015bb8:	e0bffc17 	ldw	r2,-16(fp)
 2015bbc:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 2015bc0:	e13ff983 	ldbu	r4,-26(fp)
 2015bc4:	e0fff983 	ldbu	r3,-26(fp)
 2015bc8:	e0bffc17 	ldw	r2,-16(fp)
 2015bcc:	1885883a 	add	r2,r3,r2
 2015bd0:	10800204 	addi	r2,r2,8
 2015bd4:	10c000c3 	ldbu	r3,3(r2)
 2015bd8:	e0bff883 	ldbu	r2,-30(fp)
 2015bdc:	1884b03a 	or	r2,r3,r2
 2015be0:	1007883a 	mov	r3,r2
 2015be4:	e0bffc17 	ldw	r2,-16(fp)
 2015be8:	2085883a 	add	r2,r4,r2
 2015bec:	10800204 	addi	r2,r2,8
 2015bf0:	10c000c5 	stb	r3,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 2015bf4:	e0bffa17 	ldw	r2,-24(fp)
 2015bf8:	10800817 	ldw	r2,32(r2)
 2015bfc:	1005003a 	cmpeq	r2,r2,zero
 2015c00:	1000441e 	bne	r2,zero,2015d14 <OSTaskChangePrio+0x4f0>
        pevents =  ptcb->OSTCBEventMultiPtr;
 2015c04:	e0bffa17 	ldw	r2,-24(fp)
 2015c08:	10800817 	ldw	r2,32(r2)
 2015c0c:	e0bffb15 	stw	r2,-20(fp)
        pevent  = *pevents;
 2015c10:	e0bffb17 	ldw	r2,-20(fp)
 2015c14:	10800017 	ldw	r2,0(r2)
 2015c18:	e0bffc15 	stw	r2,-16(fp)
        while (pevent != (OS_EVENT *)0) {
 2015c1c:	00003a06 	br	2015d08 <OSTaskChangePrio+0x4e4>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 2015c20:	e13ff903 	ldbu	r4,-28(fp)
 2015c24:	e0fff903 	ldbu	r3,-28(fp)
 2015c28:	e0bffc17 	ldw	r2,-16(fp)
 2015c2c:	1885883a 	add	r2,r3,r2
 2015c30:	10800204 	addi	r2,r2,8
 2015c34:	108000c3 	ldbu	r2,3(r2)
 2015c38:	1007883a 	mov	r3,r2
 2015c3c:	e0bff803 	ldbu	r2,-32(fp)
 2015c40:	0084303a 	nor	r2,zero,r2
 2015c44:	1884703a 	and	r2,r3,r2
 2015c48:	1007883a 	mov	r3,r2
 2015c4c:	e0bffc17 	ldw	r2,-16(fp)
 2015c50:	2085883a 	add	r2,r4,r2
 2015c54:	10800204 	addi	r2,r2,8
 2015c58:	10c000c5 	stb	r3,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 2015c5c:	e0fff903 	ldbu	r3,-28(fp)
 2015c60:	e0bffc17 	ldw	r2,-16(fp)
 2015c64:	1885883a 	add	r2,r3,r2
 2015c68:	10800204 	addi	r2,r2,8
 2015c6c:	108000c3 	ldbu	r2,3(r2)
 2015c70:	10803fcc 	andi	r2,r2,255
 2015c74:	1004c03a 	cmpne	r2,r2,zero
 2015c78:	1000091e 	bne	r2,zero,2015ca0 <OSTaskChangePrio+0x47c>
                pevent->OSEventGrp    &= ~bity_old;
 2015c7c:	e0bffc17 	ldw	r2,-16(fp)
 2015c80:	10800283 	ldbu	r2,10(r2)
 2015c84:	1007883a 	mov	r3,r2
 2015c88:	e0bff843 	ldbu	r2,-31(fp)
 2015c8c:	0084303a 	nor	r2,zero,r2
 2015c90:	1884703a 	and	r2,r3,r2
 2015c94:	1007883a 	mov	r3,r2
 2015c98:	e0bffc17 	ldw	r2,-16(fp)
 2015c9c:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 2015ca0:	e0bffc17 	ldw	r2,-16(fp)
 2015ca4:	10c00283 	ldbu	r3,10(r2)
 2015ca8:	e0bff8c3 	ldbu	r2,-29(fp)
 2015cac:	1884b03a 	or	r2,r3,r2
 2015cb0:	1007883a 	mov	r3,r2
 2015cb4:	e0bffc17 	ldw	r2,-16(fp)
 2015cb8:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 2015cbc:	e13ff983 	ldbu	r4,-26(fp)
 2015cc0:	e0fff983 	ldbu	r3,-26(fp)
 2015cc4:	e0bffc17 	ldw	r2,-16(fp)
 2015cc8:	1885883a 	add	r2,r3,r2
 2015ccc:	10800204 	addi	r2,r2,8
 2015cd0:	10c000c3 	ldbu	r3,3(r2)
 2015cd4:	e0bff883 	ldbu	r2,-30(fp)
 2015cd8:	1884b03a 	or	r2,r3,r2
 2015cdc:	1007883a 	mov	r3,r2
 2015ce0:	e0bffc17 	ldw	r2,-16(fp)
 2015ce4:	2085883a 	add	r2,r4,r2
 2015ce8:	10800204 	addi	r2,r2,8
 2015cec:	10c000c5 	stb	r3,3(r2)
            pevents++;
 2015cf0:	e0bffb17 	ldw	r2,-20(fp)
 2015cf4:	10800104 	addi	r2,r2,4
 2015cf8:	e0bffb15 	stw	r2,-20(fp)
            pevent                     = *pevents;
 2015cfc:	e0bffb17 	ldw	r2,-20(fp)
 2015d00:	10800017 	ldw	r2,0(r2)
 2015d04:	e0bffc15 	stw	r2,-16(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 2015d08:	e0bffc17 	ldw	r2,-16(fp)
 2015d0c:	1004c03a 	cmpne	r2,r2,zero
 2015d10:	103fc31e 	bne	r2,zero,2015c20 <OSTaskChangePrio+0x3fc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 2015d14:	e0fffa17 	ldw	r3,-24(fp)
 2015d18:	e0bffe03 	ldbu	r2,-8(fp)
 2015d1c:	18800c85 	stb	r2,50(r3)
    ptcb->OSTCBY    = y_new;
 2015d20:	e0fffa17 	ldw	r3,-24(fp)
 2015d24:	e0bff983 	ldbu	r2,-26(fp)
 2015d28:	18800d05 	stb	r2,52(r3)
    ptcb->OSTCBX    = x_new;
 2015d2c:	e0fffa17 	ldw	r3,-24(fp)
 2015d30:	e0bff943 	ldbu	r2,-27(fp)
 2015d34:	18800cc5 	stb	r2,51(r3)
    ptcb->OSTCBBitY = bity_new;
 2015d38:	e0fffa17 	ldw	r3,-24(fp)
 2015d3c:	e0bff8c3 	ldbu	r2,-29(fp)
 2015d40:	18800d85 	stb	r2,54(r3)
    ptcb->OSTCBBitX = bitx_new;
 2015d44:	e0fffa17 	ldw	r3,-24(fp)
 2015d48:	e0bff883 	ldbu	r2,-30(fp)
 2015d4c:	18800d45 	stb	r2,53(r3)
 2015d50:	e0bff717 	ldw	r2,-36(fp)
 2015d54:	e0bff215 	stw	r2,-56(fp)
 2015d58:	e0bff217 	ldw	r2,-56(fp)
 2015d5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 2015d60:	008080b4 	movhi	r2,514
 2015d64:	10b80644 	addi	r2,r2,-8167
 2015d68:	10800003 	ldbu	r2,0(r2)
 2015d6c:	10803fcc 	andi	r2,r2,255
 2015d70:	10800058 	cmpnei	r2,r2,1
 2015d74:	1000011e 	bne	r2,zero,2015d7c <OSTaskChangePrio+0x558>
        OS_Sched();                                         /* Find new highest priority task          */
 2015d78:	2010f6c0 	call	2010f6c <OS_Sched>
    }
    return (OS_ERR_NONE);
 2015d7c:	e03fff15 	stw	zero,-4(fp)
 2015d80:	e0bfff17 	ldw	r2,-4(fp)
}
 2015d84:	e037883a 	mov	sp,fp
 2015d88:	dfc00117 	ldw	ra,4(sp)
 2015d8c:	df000017 	ldw	fp,0(sp)
 2015d90:	dec00204 	addi	sp,sp,8
 2015d94:	f800283a 	ret

02015d98 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 2015d98:	deffed04 	addi	sp,sp,-76
 2015d9c:	dfc01215 	stw	ra,72(sp)
 2015da0:	df001115 	stw	fp,68(sp)
 2015da4:	df001104 	addi	fp,sp,68
 2015da8:	e13ffb15 	stw	r4,-20(fp)
 2015dac:	e17ffc15 	stw	r5,-16(fp)
 2015db0:	e1bffd15 	stw	r6,-12(fp)
 2015db4:	e1fffe05 	stb	r7,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 2015db8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 2015dbc:	e0bffe03 	ldbu	r2,-8(fp)
 2015dc0:	10800570 	cmpltui	r2,r2,21
 2015dc4:	1000031e 	bne	r2,zero,2015dd4 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 2015dc8:	00800a84 	movi	r2,42
 2015dcc:	e0bfff15 	stw	r2,-4(fp)
 2015dd0:	00006006 	br	2015f54 <OSTaskCreate+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015dd4:	0005303a 	rdctl	r2,status
 2015dd8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015ddc:	e0fff717 	ldw	r3,-36(fp)
 2015de0:	00bfff84 	movi	r2,-2
 2015de4:	1884703a 	and	r2,r3,r2
 2015de8:	1001703a 	wrctl	status,r2
  
  return context;
 2015dec:	e0bff717 	ldw	r2,-36(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2015df0:	e0bff815 	stw	r2,-32(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 2015df4:	008080b4 	movhi	r2,514
 2015df8:	10b81404 	addi	r2,r2,-8112
 2015dfc:	10800003 	ldbu	r2,0(r2)
 2015e00:	10803fcc 	andi	r2,r2,255
 2015e04:	1005003a 	cmpeq	r2,r2,zero
 2015e08:	1000071e 	bne	r2,zero,2015e28 <OSTaskCreate+0x90>
 2015e0c:	e0bff817 	ldw	r2,-32(fp)
 2015e10:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015e14:	e0bff617 	ldw	r2,-40(fp)
 2015e18:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 2015e1c:	00800f04 	movi	r2,60
 2015e20:	e0bfff15 	stw	r2,-4(fp)
 2015e24:	00004b06 	br	2015f54 <OSTaskCreate+0x1bc>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 2015e28:	e0bffe03 	ldbu	r2,-8(fp)
 2015e2c:	00c080f4 	movhi	r3,515
 2015e30:	18e66a04 	addi	r3,r3,-26200
 2015e34:	1085883a 	add	r2,r2,r2
 2015e38:	1085883a 	add	r2,r2,r2
 2015e3c:	10c5883a 	add	r2,r2,r3
 2015e40:	10800017 	ldw	r2,0(r2)
 2015e44:	1004c03a 	cmpne	r2,r2,zero
 2015e48:	10003c1e 	bne	r2,zero,2015f3c <OSTaskCreate+0x1a4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 2015e4c:	e0bffe03 	ldbu	r2,-8(fp)
 2015e50:	00c080f4 	movhi	r3,515
 2015e54:	18e66a04 	addi	r3,r3,-26200
 2015e58:	1085883a 	add	r2,r2,r2
 2015e5c:	1085883a 	add	r2,r2,r2
 2015e60:	10c7883a 	add	r3,r2,r3
 2015e64:	00800044 	movi	r2,1
 2015e68:	18800015 	stw	r2,0(r3)
 2015e6c:	e0bff817 	ldw	r2,-32(fp)
 2015e70:	e0bff515 	stw	r2,-44(fp)
 2015e74:	e0bff517 	ldw	r2,-44(fp)
 2015e78:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 2015e7c:	e13ffb17 	ldw	r4,-20(fp)
 2015e80:	e17ffc17 	ldw	r5,-16(fp)
 2015e84:	e1bffd17 	ldw	r6,-12(fp)
 2015e88:	000f883a 	mov	r7,zero
 2015e8c:	20195b40 	call	20195b4 <OSTaskStkInit>
 2015e90:	e0bffa15 	stw	r2,-24(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 2015e94:	e13ffe03 	ldbu	r4,-8(fp)
 2015e98:	d8000015 	stw	zero,0(sp)
 2015e9c:	d8000115 	stw	zero,4(sp)
 2015ea0:	d8000215 	stw	zero,8(sp)
 2015ea4:	e17ffa17 	ldw	r5,-24(fp)
 2015ea8:	000d883a 	mov	r6,zero
 2015eac:	000f883a 	mov	r7,zero
 2015eb0:	20113740 	call	2011374 <OS_TCBInit>
 2015eb4:	e0bff905 	stb	r2,-28(fp)
        if (err == OS_ERR_NONE) {
 2015eb8:	e0bff903 	ldbu	r2,-28(fp)
 2015ebc:	1004c03a 	cmpne	r2,r2,zero
 2015ec0:	1000081e 	bne	r2,zero,2015ee4 <OSTaskCreate+0x14c>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 2015ec4:	008080b4 	movhi	r2,514
 2015ec8:	10b80644 	addi	r2,r2,-8167
 2015ecc:	10800003 	ldbu	r2,0(r2)
 2015ed0:	10803fcc 	andi	r2,r2,255
 2015ed4:	10800058 	cmpnei	r2,r2,1
 2015ed8:	1000151e 	bne	r2,zero,2015f30 <OSTaskCreate+0x198>
                OS_Sched();
 2015edc:	2010f6c0 	call	2010f6c <OS_Sched>
 2015ee0:	00001306 	br	2015f30 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015ee4:	0005303a 	rdctl	r2,status
 2015ee8:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015eec:	e0fff417 	ldw	r3,-48(fp)
 2015ef0:	00bfff84 	movi	r2,-2
 2015ef4:	1884703a 	and	r2,r3,r2
 2015ef8:	1001703a 	wrctl	status,r2
  
  return context;
 2015efc:	e0bff417 	ldw	r2,-48(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 2015f00:	e0bff815 	stw	r2,-32(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 2015f04:	e0bffe03 	ldbu	r2,-8(fp)
 2015f08:	00c080f4 	movhi	r3,515
 2015f0c:	18e66a04 	addi	r3,r3,-26200
 2015f10:	1085883a 	add	r2,r2,r2
 2015f14:	1085883a 	add	r2,r2,r2
 2015f18:	10c5883a 	add	r2,r2,r3
 2015f1c:	10000015 	stw	zero,0(r2)
 2015f20:	e0bff817 	ldw	r2,-32(fp)
 2015f24:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015f28:	e0bff317 	ldw	r2,-52(fp)
 2015f2c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 2015f30:	e0bff903 	ldbu	r2,-28(fp)
 2015f34:	e0bfff15 	stw	r2,-4(fp)
 2015f38:	00000606 	br	2015f54 <OSTaskCreate+0x1bc>
 2015f3c:	e0bff817 	ldw	r2,-32(fp)
 2015f40:	e0bff215 	stw	r2,-56(fp)
 2015f44:	e0bff217 	ldw	r2,-56(fp)
 2015f48:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 2015f4c:	00800a04 	movi	r2,40
 2015f50:	e0bfff15 	stw	r2,-4(fp)
 2015f54:	e0bfff17 	ldw	r2,-4(fp)
}
 2015f58:	e037883a 	mov	sp,fp
 2015f5c:	dfc00117 	ldw	ra,4(sp)
 2015f60:	df000017 	ldw	fp,0(sp)
 2015f64:	dec00204 	addi	sp,sp,8
 2015f68:	f800283a 	ret

02015f6c <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 2015f6c:	deffeb04 	addi	sp,sp,-84
 2015f70:	dfc01415 	stw	ra,80(sp)
 2015f74:	df001315 	stw	fp,76(sp)
 2015f78:	df001304 	addi	fp,sp,76
 2015f7c:	e13ff915 	stw	r4,-28(fp)
 2015f80:	e17ffa15 	stw	r5,-24(fp)
 2015f84:	e1bffb15 	stw	r6,-20(fp)
 2015f88:	e0800217 	ldw	r2,8(fp)
 2015f8c:	e0c00617 	ldw	r3,24(fp)
 2015f90:	e1fffc05 	stb	r7,-16(fp)
 2015f94:	e0bffd0d 	sth	r2,-12(fp)
 2015f98:	e0fffe0d 	sth	r3,-8(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 2015f9c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 2015fa0:	e0bffc03 	ldbu	r2,-16(fp)
 2015fa4:	10800570 	cmpltui	r2,r2,21
 2015fa8:	1000031e 	bne	r2,zero,2015fb8 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 2015fac:	00800a84 	movi	r2,42
 2015fb0:	e0bfff15 	stw	r2,-4(fp)
 2015fb4:	00006706 	br	2016154 <OSTaskCreateExt+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2015fb8:	0005303a 	rdctl	r2,status
 2015fbc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2015fc0:	e0fff517 	ldw	r3,-44(fp)
 2015fc4:	00bfff84 	movi	r2,-2
 2015fc8:	1884703a 	and	r2,r3,r2
 2015fcc:	1001703a 	wrctl	status,r2
  
  return context;
 2015fd0:	e0bff517 	ldw	r2,-44(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2015fd4:	e0bff615 	stw	r2,-40(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 2015fd8:	008080b4 	movhi	r2,514
 2015fdc:	10b81404 	addi	r2,r2,-8112
 2015fe0:	10800003 	ldbu	r2,0(r2)
 2015fe4:	10803fcc 	andi	r2,r2,255
 2015fe8:	1005003a 	cmpeq	r2,r2,zero
 2015fec:	1000071e 	bne	r2,zero,201600c <OSTaskCreateExt+0xa0>
 2015ff0:	e0bff617 	ldw	r2,-40(fp)
 2015ff4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2015ff8:	e0bff417 	ldw	r2,-48(fp)
 2015ffc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 2016000:	00800f04 	movi	r2,60
 2016004:	e0bfff15 	stw	r2,-4(fp)
 2016008:	00005206 	br	2016154 <OSTaskCreateExt+0x1e8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 201600c:	e0bffc03 	ldbu	r2,-16(fp)
 2016010:	00c080f4 	movhi	r3,515
 2016014:	18e66a04 	addi	r3,r3,-26200
 2016018:	1085883a 	add	r2,r2,r2
 201601c:	1085883a 	add	r2,r2,r2
 2016020:	10c5883a 	add	r2,r2,r3
 2016024:	10800017 	ldw	r2,0(r2)
 2016028:	1004c03a 	cmpne	r2,r2,zero
 201602c:	1000431e 	bne	r2,zero,201613c <OSTaskCreateExt+0x1d0>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 2016030:	e0bffc03 	ldbu	r2,-16(fp)
 2016034:	00c080f4 	movhi	r3,515
 2016038:	18e66a04 	addi	r3,r3,-26200
 201603c:	1085883a 	add	r2,r2,r2
 2016040:	1085883a 	add	r2,r2,r2
 2016044:	10c7883a 	add	r3,r2,r3
 2016048:	00800044 	movi	r2,1
 201604c:	18800015 	stw	r2,0(r3)
 2016050:	e0bff617 	ldw	r2,-40(fp)
 2016054:	e0bff315 	stw	r2,-52(fp)
 2016058:	e0bff317 	ldw	r2,-52(fp)
 201605c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 2016060:	e1bffe0b 	ldhu	r6,-8(fp)
 2016064:	e1000317 	ldw	r4,12(fp)
 2016068:	e1400417 	ldw	r5,16(fp)
 201606c:	20171e80 	call	20171e8 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 2016070:	e1fffe0b 	ldhu	r7,-8(fp)
 2016074:	e13ff917 	ldw	r4,-28(fp)
 2016078:	e17ffa17 	ldw	r5,-24(fp)
 201607c:	e1bffb17 	ldw	r6,-20(fp)
 2016080:	20195b40 	call	20195b4 <OSTaskStkInit>
 2016084:	e0bff815 	stw	r2,-32(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 2016088:	e13ffc03 	ldbu	r4,-16(fp)
 201608c:	e1fffd0b 	ldhu	r7,-12(fp)
 2016090:	e0fffe0b 	ldhu	r3,-8(fp)
 2016094:	e0800417 	ldw	r2,16(fp)
 2016098:	d8800015 	stw	r2,0(sp)
 201609c:	e0800517 	ldw	r2,20(fp)
 20160a0:	d8800115 	stw	r2,4(sp)
 20160a4:	d8c00215 	stw	r3,8(sp)
 20160a8:	e17ff817 	ldw	r5,-32(fp)
 20160ac:	e1800317 	ldw	r6,12(fp)
 20160b0:	20113740 	call	2011374 <OS_TCBInit>
 20160b4:	e0bff705 	stb	r2,-36(fp)
        if (err == OS_ERR_NONE) {
 20160b8:	e0bff703 	ldbu	r2,-36(fp)
 20160bc:	1004c03a 	cmpne	r2,r2,zero
 20160c0:	1000081e 	bne	r2,zero,20160e4 <OSTaskCreateExt+0x178>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 20160c4:	008080b4 	movhi	r2,514
 20160c8:	10b80644 	addi	r2,r2,-8167
 20160cc:	10800003 	ldbu	r2,0(r2)
 20160d0:	10803fcc 	andi	r2,r2,255
 20160d4:	10800058 	cmpnei	r2,r2,1
 20160d8:	1000151e 	bne	r2,zero,2016130 <OSTaskCreateExt+0x1c4>
                OS_Sched();
 20160dc:	2010f6c0 	call	2010f6c <OS_Sched>
 20160e0:	00001306 	br	2016130 <OSTaskCreateExt+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20160e4:	0005303a 	rdctl	r2,status
 20160e8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20160ec:	e0fff217 	ldw	r3,-56(fp)
 20160f0:	00bfff84 	movi	r2,-2
 20160f4:	1884703a 	and	r2,r3,r2
 20160f8:	1001703a 	wrctl	status,r2
  
  return context;
 20160fc:	e0bff217 	ldw	r2,-56(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 2016100:	e0bff615 	stw	r2,-40(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 2016104:	e0bffc03 	ldbu	r2,-16(fp)
 2016108:	00c080f4 	movhi	r3,515
 201610c:	18e66a04 	addi	r3,r3,-26200
 2016110:	1085883a 	add	r2,r2,r2
 2016114:	1085883a 	add	r2,r2,r2
 2016118:	10c5883a 	add	r2,r2,r3
 201611c:	10000015 	stw	zero,0(r2)
 2016120:	e0bff617 	ldw	r2,-40(fp)
 2016124:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016128:	e0bff117 	ldw	r2,-60(fp)
 201612c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 2016130:	e0bff703 	ldbu	r2,-36(fp)
 2016134:	e0bfff15 	stw	r2,-4(fp)
 2016138:	00000606 	br	2016154 <OSTaskCreateExt+0x1e8>
 201613c:	e0bff617 	ldw	r2,-40(fp)
 2016140:	e0bff015 	stw	r2,-64(fp)
 2016144:	e0bff017 	ldw	r2,-64(fp)
 2016148:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 201614c:	00800a04 	movi	r2,40
 2016150:	e0bfff15 	stw	r2,-4(fp)
 2016154:	e0bfff17 	ldw	r2,-4(fp)
}
 2016158:	e037883a 	mov	sp,fp
 201615c:	dfc00117 	ldw	ra,4(sp)
 2016160:	df000017 	ldw	fp,0(sp)
 2016164:	dec00204 	addi	sp,sp,8
 2016168:	f800283a 	ret

0201616c <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 201616c:	defff304 	addi	sp,sp,-52
 2016170:	dfc00c15 	stw	ra,48(sp)
 2016174:	df000b15 	stw	fp,44(sp)
 2016178:	df000b04 	addi	fp,sp,44
 201617c:	e13ffe05 	stb	r4,-8(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 2016180:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 2016184:	008080b4 	movhi	r2,514
 2016188:	10b81404 	addi	r2,r2,-8112
 201618c:	10800003 	ldbu	r2,0(r2)
 2016190:	10803fcc 	andi	r2,r2,255
 2016194:	1005003a 	cmpeq	r2,r2,zero
 2016198:	1000031e 	bne	r2,zero,20161a8 <OSTaskDel+0x3c>
        return (OS_ERR_TASK_DEL_ISR);
 201619c:	00801004 	movi	r2,64
 20161a0:	e0bfff15 	stw	r2,-4(fp)
 20161a4:	0000ee06 	br	2016560 <OSTaskDel+0x3f4>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 20161a8:	e0bffe03 	ldbu	r2,-8(fp)
 20161ac:	10800518 	cmpnei	r2,r2,20
 20161b0:	1000031e 	bne	r2,zero,20161c0 <OSTaskDel+0x54>
        return (OS_ERR_TASK_DEL_IDLE);
 20161b4:	00800f84 	movi	r2,62
 20161b8:	e0bfff15 	stw	r2,-4(fp)
 20161bc:	0000e806 	br	2016560 <OSTaskDel+0x3f4>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 20161c0:	e0bffe03 	ldbu	r2,-8(fp)
 20161c4:	10800530 	cmpltui	r2,r2,20
 20161c8:	1000061e 	bne	r2,zero,20161e4 <OSTaskDel+0x78>
        if (prio != OS_PRIO_SELF) {
 20161cc:	e0bffe03 	ldbu	r2,-8(fp)
 20161d0:	10803fe0 	cmpeqi	r2,r2,255
 20161d4:	1000031e 	bne	r2,zero,20161e4 <OSTaskDel+0x78>
            return (OS_ERR_PRIO_INVALID);
 20161d8:	00800a84 	movi	r2,42
 20161dc:	e0bfff15 	stw	r2,-4(fp)
 20161e0:	0000df06 	br	2016560 <OSTaskDel+0x3f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20161e4:	0005303a 	rdctl	r2,status
 20161e8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20161ec:	e0fffa17 	ldw	r3,-24(fp)
 20161f0:	00bfff84 	movi	r2,-2
 20161f4:	1884703a 	and	r2,r3,r2
 20161f8:	1001703a 	wrctl	status,r2
  
  return context;
 20161fc:	e0bffa17 	ldw	r2,-24(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 2016200:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 2016204:	e0bffe03 	ldbu	r2,-8(fp)
 2016208:	10803fd8 	cmpnei	r2,r2,255
 201620c:	1000051e 	bne	r2,zero,2016224 <OSTaskDel+0xb8>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 2016210:	008080b4 	movhi	r2,514
 2016214:	10b81504 	addi	r2,r2,-8108
 2016218:	10800017 	ldw	r2,0(r2)
 201621c:	10800c83 	ldbu	r2,50(r2)
 2016220:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2016224:	e0bffe03 	ldbu	r2,-8(fp)
 2016228:	00c080f4 	movhi	r3,515
 201622c:	18e66a04 	addi	r3,r3,-26200
 2016230:	1085883a 	add	r2,r2,r2
 2016234:	1085883a 	add	r2,r2,r2
 2016238:	10c5883a 	add	r2,r2,r3
 201623c:	10800017 	ldw	r2,0(r2)
 2016240:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 2016244:	e0bffc17 	ldw	r2,-16(fp)
 2016248:	1004c03a 	cmpne	r2,r2,zero
 201624c:	1000071e 	bne	r2,zero,201626c <OSTaskDel+0x100>
 2016250:	e0bffb17 	ldw	r2,-20(fp)
 2016254:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016258:	e0bff917 	ldw	r2,-28(fp)
 201625c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2016260:	008010c4 	movi	r2,67
 2016264:	e0bfff15 	stw	r2,-4(fp)
 2016268:	0000bd06 	br	2016560 <OSTaskDel+0x3f4>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 201626c:	e0bffc17 	ldw	r2,-16(fp)
 2016270:	10800058 	cmpnei	r2,r2,1
 2016274:	1000071e 	bne	r2,zero,2016294 <OSTaskDel+0x128>
 2016278:	e0bffb17 	ldw	r2,-20(fp)
 201627c:	e0bff815 	stw	r2,-32(fp)
 2016280:	e0bff817 	ldw	r2,-32(fp)
 2016284:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 2016288:	00800f44 	movi	r2,61
 201628c:	e0bfff15 	stw	r2,-4(fp)
 2016290:	0000b306 	br	2016560 <OSTaskDel+0x3f4>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 2016294:	e0bffc17 	ldw	r2,-16(fp)
 2016298:	10800d03 	ldbu	r2,52(r2)
 201629c:	11003fcc 	andi	r4,r2,255
 20162a0:	e0bffc17 	ldw	r2,-16(fp)
 20162a4:	10800d03 	ldbu	r2,52(r2)
 20162a8:	10c03fcc 	andi	r3,r2,255
 20162ac:	008080b4 	movhi	r2,514
 20162b0:	10b81244 	addi	r2,r2,-8119
 20162b4:	10c5883a 	add	r2,r2,r3
 20162b8:	10800003 	ldbu	r2,0(r2)
 20162bc:	1007883a 	mov	r3,r2
 20162c0:	e0bffc17 	ldw	r2,-16(fp)
 20162c4:	10800d43 	ldbu	r2,53(r2)
 20162c8:	0084303a 	nor	r2,zero,r2
 20162cc:	1884703a 	and	r2,r3,r2
 20162d0:	1007883a 	mov	r3,r2
 20162d4:	008080b4 	movhi	r2,514
 20162d8:	10b81244 	addi	r2,r2,-8119
 20162dc:	1105883a 	add	r2,r2,r4
 20162e0:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 20162e4:	e0bffc17 	ldw	r2,-16(fp)
 20162e8:	10800d03 	ldbu	r2,52(r2)
 20162ec:	10c03fcc 	andi	r3,r2,255
 20162f0:	008080b4 	movhi	r2,514
 20162f4:	10b81244 	addi	r2,r2,-8119
 20162f8:	10c5883a 	add	r2,r2,r3
 20162fc:	10800003 	ldbu	r2,0(r2)
 2016300:	10803fcc 	andi	r2,r2,255
 2016304:	1004c03a 	cmpne	r2,r2,zero
 2016308:	10000c1e 	bne	r2,zero,201633c <OSTaskDel+0x1d0>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 201630c:	e0bffc17 	ldw	r2,-16(fp)
 2016310:	10800d83 	ldbu	r2,54(r2)
 2016314:	0084303a 	nor	r2,zero,r2
 2016318:	1007883a 	mov	r3,r2
 201631c:	008080b4 	movhi	r2,514
 2016320:	10b81204 	addi	r2,r2,-8120
 2016324:	10800003 	ldbu	r2,0(r2)
 2016328:	1884703a 	and	r2,r3,r2
 201632c:	1007883a 	mov	r3,r2
 2016330:	008080b4 	movhi	r2,514
 2016334:	10b81204 	addi	r2,r2,-8120
 2016338:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 201633c:	e0bffc17 	ldw	r2,-16(fp)
 2016340:	10800717 	ldw	r2,28(r2)
 2016344:	1005003a 	cmpeq	r2,r2,zero
 2016348:	1000041e 	bne	r2,zero,201635c <OSTaskDel+0x1f0>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 201634c:	e0bffc17 	ldw	r2,-16(fp)
 2016350:	11400717 	ldw	r5,28(r2)
 2016354:	e13ffc17 	ldw	r4,-16(fp)
 2016358:	20109240 	call	2010924 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 201635c:	e0bffc17 	ldw	r2,-16(fp)
 2016360:	10800817 	ldw	r2,32(r2)
 2016364:	1005003a 	cmpeq	r2,r2,zero
 2016368:	1000041e 	bne	r2,zero,201637c <OSTaskDel+0x210>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 201636c:	e0bffc17 	ldw	r2,-16(fp)
 2016370:	11400817 	ldw	r5,32(r2)
 2016374:	e13ffc17 	ldw	r4,-16(fp)
 2016378:	20109dc0 	call	20109dc <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 201637c:	e0bffc17 	ldw	r2,-16(fp)
 2016380:	10800a17 	ldw	r2,40(r2)
 2016384:	e0bffd15 	stw	r2,-12(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 2016388:	e0bffd17 	ldw	r2,-12(fp)
 201638c:	1005003a 	cmpeq	r2,r2,zero
 2016390:	1000021e 	bne	r2,zero,201639c <OSTaskDel+0x230>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 2016394:	e13ffd17 	ldw	r4,-12(fp)
 2016398:	20130700 	call	2013070 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 201639c:	e0bffc17 	ldw	r2,-16(fp)
 20163a0:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 20163a4:	e0bffc17 	ldw	r2,-16(fp)
 20163a8:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 20163ac:	e0bffc17 	ldw	r2,-16(fp)
 20163b0:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 20163b4:	008080b4 	movhi	r2,514
 20163b8:	10b80604 	addi	r2,r2,-8168
 20163bc:	10800003 	ldbu	r2,0(r2)
 20163c0:	10803fcc 	andi	r2,r2,255
 20163c4:	10803fe0 	cmpeqi	r2,r2,255
 20163c8:	1000081e 	bne	r2,zero,20163ec <OSTaskDel+0x280>
        OSLockNesting++;
 20163cc:	008080b4 	movhi	r2,514
 20163d0:	10b80604 	addi	r2,r2,-8168
 20163d4:	10800003 	ldbu	r2,0(r2)
 20163d8:	10800044 	addi	r2,r2,1
 20163dc:	1007883a 	mov	r3,r2
 20163e0:	008080b4 	movhi	r2,514
 20163e4:	10b80604 	addi	r2,r2,-8168
 20163e8:	10c00005 	stb	r3,0(r2)
 20163ec:	e0bffb17 	ldw	r2,-20(fp)
 20163f0:	e0bff715 	stw	r2,-36(fp)
 20163f4:	e0bff717 	ldw	r2,-36(fp)
 20163f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 20163fc:	20105100 	call	2010510 <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016400:	0005303a 	rdctl	r2,status
 2016404:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016408:	e0fff617 	ldw	r3,-40(fp)
 201640c:	00bfff84 	movi	r2,-2
 2016410:	1884703a 	and	r2,r3,r2
 2016414:	1001703a 	wrctl	status,r2
  
  return context;
 2016418:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 201641c:	e0bffb15 	stw	r2,-20(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 2016420:	008080b4 	movhi	r2,514
 2016424:	10b80604 	addi	r2,r2,-8168
 2016428:	10800003 	ldbu	r2,0(r2)
 201642c:	10803fcc 	andi	r2,r2,255
 2016430:	1005003a 	cmpeq	r2,r2,zero
 2016434:	1000081e 	bne	r2,zero,2016458 <OSTaskDel+0x2ec>
        OSLockNesting--;
 2016438:	008080b4 	movhi	r2,514
 201643c:	10b80604 	addi	r2,r2,-8168
 2016440:	10800003 	ldbu	r2,0(r2)
 2016444:	10bfffc4 	addi	r2,r2,-1
 2016448:	1007883a 	mov	r3,r2
 201644c:	008080b4 	movhi	r2,514
 2016450:	10b80604 	addi	r2,r2,-8168
 2016454:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 2016458:	e13ffc17 	ldw	r4,-16(fp)
 201645c:	20198e40 	call	20198e4 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 2016460:	008080b4 	movhi	r2,514
 2016464:	10b80e44 	addi	r2,r2,-8135
 2016468:	10800003 	ldbu	r2,0(r2)
 201646c:	10bfffc4 	addi	r2,r2,-1
 2016470:	1007883a 	mov	r3,r2
 2016474:	008080b4 	movhi	r2,514
 2016478:	10b80e44 	addi	r2,r2,-8135
 201647c:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 2016480:	e0bffe03 	ldbu	r2,-8(fp)
 2016484:	00c080f4 	movhi	r3,515
 2016488:	18e66a04 	addi	r3,r3,-26200
 201648c:	1085883a 	add	r2,r2,r2
 2016490:	1085883a 	add	r2,r2,r2
 2016494:	10c5883a 	add	r2,r2,r3
 2016498:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 201649c:	e0bffc17 	ldw	r2,-16(fp)
 20164a0:	10800617 	ldw	r2,24(r2)
 20164a4:	1004c03a 	cmpne	r2,r2,zero
 20164a8:	1000091e 	bne	r2,zero,20164d0 <OSTaskDel+0x364>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 20164ac:	e0bffc17 	ldw	r2,-16(fp)
 20164b0:	10800517 	ldw	r2,20(r2)
 20164b4:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 20164b8:	e0bffc17 	ldw	r2,-16(fp)
 20164bc:	10c00517 	ldw	r3,20(r2)
 20164c0:	008080b4 	movhi	r2,514
 20164c4:	10b80904 	addi	r2,r2,-8156
 20164c8:	10c00015 	stw	r3,0(r2)
 20164cc:	00000a06 	br	20164f8 <OSTaskDel+0x38c>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 20164d0:	e0bffc17 	ldw	r2,-16(fp)
 20164d4:	10c00617 	ldw	r3,24(r2)
 20164d8:	e0bffc17 	ldw	r2,-16(fp)
 20164dc:	10800517 	ldw	r2,20(r2)
 20164e0:	18800515 	stw	r2,20(r3)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 20164e4:	e0bffc17 	ldw	r2,-16(fp)
 20164e8:	10c00517 	ldw	r3,20(r2)
 20164ec:	e0bffc17 	ldw	r2,-16(fp)
 20164f0:	10800617 	ldw	r2,24(r2)
 20164f4:	18800615 	stw	r2,24(r3)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 20164f8:	008080b4 	movhi	r2,514
 20164fc:	10b80d04 	addi	r2,r2,-8140
 2016500:	10c00017 	ldw	r3,0(r2)
 2016504:	e0bffc17 	ldw	r2,-16(fp)
 2016508:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 201650c:	00c080b4 	movhi	r3,514
 2016510:	18f80d04 	addi	r3,r3,-8140
 2016514:	e0bffc17 	ldw	r2,-16(fp)
 2016518:	18800015 	stw	r2,0(r3)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 201651c:	e0fffc17 	ldw	r3,-16(fp)
 2016520:	00800fc4 	movi	r2,63
 2016524:	18801305 	stb	r2,76(r3)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 2016528:	e0bffc17 	ldw	r2,-16(fp)
 201652c:	10001345 	stb	zero,77(r2)
 2016530:	e0bffb17 	ldw	r2,-20(fp)
 2016534:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016538:	e0bff517 	ldw	r2,-44(fp)
 201653c:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 2016540:	008080b4 	movhi	r2,514
 2016544:	10b80644 	addi	r2,r2,-8167
 2016548:	10800003 	ldbu	r2,0(r2)
 201654c:	10803fcc 	andi	r2,r2,255
 2016550:	10800058 	cmpnei	r2,r2,1
 2016554:	1000011e 	bne	r2,zero,201655c <OSTaskDel+0x3f0>
        OS_Sched();                                     /* Find new highest priority task              */
 2016558:	2010f6c0 	call	2010f6c <OS_Sched>
    }
    return (OS_ERR_NONE);
 201655c:	e03fff15 	stw	zero,-4(fp)
 2016560:	e0bfff17 	ldw	r2,-4(fp)
}
 2016564:	e037883a 	mov	sp,fp
 2016568:	dfc00117 	ldw	ra,4(sp)
 201656c:	df000017 	ldw	fp,0(sp)
 2016570:	dec00204 	addi	sp,sp,8
 2016574:	f800283a 	ret

02016578 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 2016578:	defff404 	addi	sp,sp,-48
 201657c:	df000b15 	stw	fp,44(sp)
 2016580:	df000b04 	addi	fp,sp,44
 2016584:	e13ffe05 	stb	r4,-8(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016588:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 201658c:	e0bffe03 	ldbu	r2,-8(fp)
 2016590:	10800518 	cmpnei	r2,r2,20
 2016594:	1000031e 	bne	r2,zero,20165a4 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 2016598:	00800f84 	movi	r2,62
 201659c:	e0bfff15 	stw	r2,-4(fp)
 20165a0:	00004c06 	br	20166d4 <OSTaskDelReq+0x15c>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 20165a4:	e0bffe03 	ldbu	r2,-8(fp)
 20165a8:	10800530 	cmpltui	r2,r2,20
 20165ac:	1000061e 	bne	r2,zero,20165c8 <OSTaskDelReq+0x50>
        if (prio != OS_PRIO_SELF) {
 20165b0:	e0bffe03 	ldbu	r2,-8(fp)
 20165b4:	10803fe0 	cmpeqi	r2,r2,255
 20165b8:	1000031e 	bne	r2,zero,20165c8 <OSTaskDelReq+0x50>
            return (OS_ERR_PRIO_INVALID);
 20165bc:	00800a84 	movi	r2,42
 20165c0:	e0bfff15 	stw	r2,-4(fp)
 20165c4:	00004306 	br	20166d4 <OSTaskDelReq+0x15c>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 20165c8:	e0bffe03 	ldbu	r2,-8(fp)
 20165cc:	10803fd8 	cmpnei	r2,r2,255
 20165d0:	1000141e 	bne	r2,zero,2016624 <OSTaskDelReq+0xac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20165d4:	0005303a 	rdctl	r2,status
 20165d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20165dc:	e0fffa17 	ldw	r3,-24(fp)
 20165e0:	00bfff84 	movi	r2,-2
 20165e4:	1884703a 	and	r2,r3,r2
 20165e8:	1001703a 	wrctl	status,r2
  
  return context;
 20165ec:	e0bffa17 	ldw	r2,-24(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 20165f0:	e0bffb15 	stw	r2,-20(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 20165f4:	008080b4 	movhi	r2,514
 20165f8:	10b81504 	addi	r2,r2,-8108
 20165fc:	10800017 	ldw	r2,0(r2)
 2016600:	10800dc3 	ldbu	r2,55(r2)
 2016604:	e0bffd05 	stb	r2,-12(fp)
 2016608:	e0bffb17 	ldw	r2,-20(fp)
 201660c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016610:	e0bff917 	ldw	r2,-28(fp)
 2016614:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 2016618:	e0bffd03 	ldbu	r2,-12(fp)
 201661c:	e0bfff15 	stw	r2,-4(fp)
 2016620:	00002c06 	br	20166d4 <OSTaskDelReq+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016624:	0005303a 	rdctl	r2,status
 2016628:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201662c:	e0fff817 	ldw	r3,-32(fp)
 2016630:	00bfff84 	movi	r2,-2
 2016634:	1884703a 	and	r2,r3,r2
 2016638:	1001703a 	wrctl	status,r2
  
  return context;
 201663c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 2016640:	e0bffb15 	stw	r2,-20(fp)
    ptcb = OSTCBPrioTbl[prio];
 2016644:	e0bffe03 	ldbu	r2,-8(fp)
 2016648:	00c080f4 	movhi	r3,515
 201664c:	18e66a04 	addi	r3,r3,-26200
 2016650:	1085883a 	add	r2,r2,r2
 2016654:	1085883a 	add	r2,r2,r2
 2016658:	10c5883a 	add	r2,r2,r3
 201665c:	10800017 	ldw	r2,0(r2)
 2016660:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 2016664:	e0bffc17 	ldw	r2,-16(fp)
 2016668:	1004c03a 	cmpne	r2,r2,zero
 201666c:	1000071e 	bne	r2,zero,201668c <OSTaskDelReq+0x114>
 2016670:	e0bffb17 	ldw	r2,-20(fp)
 2016674:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016678:	e0bff717 	ldw	r2,-36(fp)
 201667c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 2016680:	008010c4 	movi	r2,67
 2016684:	e0bfff15 	stw	r2,-4(fp)
 2016688:	00001206 	br	20166d4 <OSTaskDelReq+0x15c>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 201668c:	e0bffc17 	ldw	r2,-16(fp)
 2016690:	10800058 	cmpnei	r2,r2,1
 2016694:	1000071e 	bne	r2,zero,20166b4 <OSTaskDelReq+0x13c>
 2016698:	e0bffb17 	ldw	r2,-20(fp)
 201669c:	e0bff615 	stw	r2,-40(fp)
 20166a0:	e0bff617 	ldw	r2,-40(fp)
 20166a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 20166a8:	00800f44 	movi	r2,61
 20166ac:	e0bfff15 	stw	r2,-4(fp)
 20166b0:	00000806 	br	20166d4 <OSTaskDelReq+0x15c>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 20166b4:	e0fffc17 	ldw	r3,-16(fp)
 20166b8:	00800fc4 	movi	r2,63
 20166bc:	18800dc5 	stb	r2,55(r3)
 20166c0:	e0bffb17 	ldw	r2,-20(fp)
 20166c4:	e0bff515 	stw	r2,-44(fp)
 20166c8:	e0bff517 	ldw	r2,-44(fp)
 20166cc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20166d0:	e03fff15 	stw	zero,-4(fp)
 20166d4:	e0bfff17 	ldw	r2,-4(fp)
}
 20166d8:	e037883a 	mov	sp,fp
 20166dc:	df000017 	ldw	fp,0(sp)
 20166e0:	dec00104 	addi	sp,sp,4
 20166e4:	f800283a 	ret

020166e8 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 20166e8:	defff304 	addi	sp,sp,-52
 20166ec:	dfc00c15 	stw	ra,48(sp)
 20166f0:	df000b15 	stw	fp,44(sp)
 20166f4:	df000b04 	addi	fp,sp,44
 20166f8:	e17ffd15 	stw	r5,-12(fp)
 20166fc:	e1bffe15 	stw	r6,-8(fp)
 2016700:	e13ffc05 	stb	r4,-16(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 2016704:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 2016708:	e0bffe17 	ldw	r2,-8(fp)
 201670c:	1004c03a 	cmpne	r2,r2,zero
 2016710:	1000021e 	bne	r2,zero,201671c <OSTaskNameGet+0x34>
        return (0);
 2016714:	e03fff15 	stw	zero,-4(fp)
 2016718:	00005b06 	br	2016888 <OSTaskNameGet+0x1a0>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 201671c:	e0bffc03 	ldbu	r2,-16(fp)
 2016720:	10800570 	cmpltui	r2,r2,21
 2016724:	1000081e 	bne	r2,zero,2016748 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 2016728:	e0bffc03 	ldbu	r2,-16(fp)
 201672c:	10803fe0 	cmpeqi	r2,r2,255
 2016730:	1000051e 	bne	r2,zero,2016748 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 2016734:	e0fffe17 	ldw	r3,-8(fp)
 2016738:	00800a84 	movi	r2,42
 201673c:	18800005 	stb	r2,0(r3)
            return (0);
 2016740:	e03fff15 	stw	zero,-4(fp)
 2016744:	00005006 	br	2016888 <OSTaskNameGet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 2016748:	e0bffd17 	ldw	r2,-12(fp)
 201674c:	1004c03a 	cmpne	r2,r2,zero
 2016750:	1000051e 	bne	r2,zero,2016768 <OSTaskNameGet+0x80>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 2016754:	e0fffe17 	ldw	r3,-8(fp)
 2016758:	00800304 	movi	r2,12
 201675c:	18800005 	stb	r2,0(r3)
        return (0);
 2016760:	e03fff15 	stw	zero,-4(fp)
 2016764:	00004806 	br	2016888 <OSTaskNameGet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 2016768:	008080b4 	movhi	r2,514
 201676c:	10b81404 	addi	r2,r2,-8112
 2016770:	10800003 	ldbu	r2,0(r2)
 2016774:	10803fcc 	andi	r2,r2,255
 2016778:	1005003a 	cmpeq	r2,r2,zero
 201677c:	1000051e 	bne	r2,zero,2016794 <OSTaskNameGet+0xac>
        *perr = OS_ERR_NAME_GET_ISR;
 2016780:	e0fffe17 	ldw	r3,-8(fp)
 2016784:	00800444 	movi	r2,17
 2016788:	18800005 	stb	r2,0(r3)
        return (0);
 201678c:	e03fff15 	stw	zero,-4(fp)
 2016790:	00003d06 	br	2016888 <OSTaskNameGet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016794:	0005303a 	rdctl	r2,status
 2016798:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 201679c:	e0fff817 	ldw	r3,-32(fp)
 20167a0:	00bfff84 	movi	r2,-2
 20167a4:	1884703a 	and	r2,r3,r2
 20167a8:	1001703a 	wrctl	status,r2
  
  return context;
 20167ac:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 20167b0:	e0bff915 	stw	r2,-28(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 20167b4:	e0bffc03 	ldbu	r2,-16(fp)
 20167b8:	10803fd8 	cmpnei	r2,r2,255
 20167bc:	1000051e 	bne	r2,zero,20167d4 <OSTaskNameGet+0xec>
        prio = OSTCBCur->OSTCBPrio;
 20167c0:	008080b4 	movhi	r2,514
 20167c4:	10b81504 	addi	r2,r2,-8108
 20167c8:	10800017 	ldw	r2,0(r2)
 20167cc:	10800c83 	ldbu	r2,50(r2)
 20167d0:	e0bffc05 	stb	r2,-16(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 20167d4:	e0bffc03 	ldbu	r2,-16(fp)
 20167d8:	00c080f4 	movhi	r3,515
 20167dc:	18e66a04 	addi	r3,r3,-26200
 20167e0:	1085883a 	add	r2,r2,r2
 20167e4:	1085883a 	add	r2,r2,r2
 20167e8:	10c5883a 	add	r2,r2,r3
 20167ec:	10800017 	ldw	r2,0(r2)
 20167f0:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 20167f4:	e0bffb17 	ldw	r2,-20(fp)
 20167f8:	1004c03a 	cmpne	r2,r2,zero
 20167fc:	1000091e 	bne	r2,zero,2016824 <OSTaskNameGet+0x13c>
 2016800:	e0bff917 	ldw	r2,-28(fp)
 2016804:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016808:	e0bff717 	ldw	r2,-36(fp)
 201680c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 2016810:	e0fffe17 	ldw	r3,-8(fp)
 2016814:	008010c4 	movi	r2,67
 2016818:	18800005 	stb	r2,0(r3)
        return (0);
 201681c:	e03fff15 	stw	zero,-4(fp)
 2016820:	00001906 	br	2016888 <OSTaskNameGet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 2016824:	e0bffb17 	ldw	r2,-20(fp)
 2016828:	10800058 	cmpnei	r2,r2,1
 201682c:	1000091e 	bne	r2,zero,2016854 <OSTaskNameGet+0x16c>
 2016830:	e0bff917 	ldw	r2,-28(fp)
 2016834:	e0bff615 	stw	r2,-40(fp)
 2016838:	e0bff617 	ldw	r2,-40(fp)
 201683c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 2016840:	e0fffe17 	ldw	r3,-8(fp)
 2016844:	008010c4 	movi	r2,67
 2016848:	18800005 	stb	r2,0(r3)
        return (0);
 201684c:	e03fff15 	stw	zero,-4(fp)
 2016850:	00000d06 	br	2016888 <OSTaskNameGet+0x1a0>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 2016854:	e0bffb17 	ldw	r2,-20(fp)
 2016858:	11401304 	addi	r5,r2,76
 201685c:	e13ffd17 	ldw	r4,-12(fp)
 2016860:	20110b00 	call	20110b0 <OS_StrCopy>
 2016864:	e0bffa05 	stb	r2,-24(fp)
 2016868:	e0bff917 	ldw	r2,-28(fp)
 201686c:	e0bff515 	stw	r2,-44(fp)
 2016870:	e0bff517 	ldw	r2,-44(fp)
 2016874:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2016878:	e0bffe17 	ldw	r2,-8(fp)
 201687c:	10000005 	stb	zero,0(r2)
    return (len);
 2016880:	e0bffa03 	ldbu	r2,-24(fp)
 2016884:	e0bfff15 	stw	r2,-4(fp)
 2016888:	e0bfff17 	ldw	r2,-4(fp)
}
 201688c:	e037883a 	mov	sp,fp
 2016890:	dfc00117 	ldw	ra,4(sp)
 2016894:	df000017 	ldw	fp,0(sp)
 2016898:	dec00204 	addi	sp,sp,8
 201689c:	f800283a 	ret

020168a0 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 20168a0:	defff304 	addi	sp,sp,-52
 20168a4:	dfc00c15 	stw	ra,48(sp)
 20168a8:	df000b15 	stw	fp,44(sp)
 20168ac:	df000b04 	addi	fp,sp,44
 20168b0:	e17ffe15 	stw	r5,-8(fp)
 20168b4:	e1bfff15 	stw	r6,-4(fp)
 20168b8:	e13ffd05 	stb	r4,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 20168bc:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 20168c0:	e0bfff17 	ldw	r2,-4(fp)
 20168c4:	1005003a 	cmpeq	r2,r2,zero
 20168c8:	1000611e 	bne	r2,zero,2016a50 <OSTaskNameSet+0x1b0>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 20168cc:	e0bffd03 	ldbu	r2,-12(fp)
 20168d0:	10800570 	cmpltui	r2,r2,21
 20168d4:	1000071e 	bne	r2,zero,20168f4 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 20168d8:	e0bffd03 	ldbu	r2,-12(fp)
 20168dc:	10803fe0 	cmpeqi	r2,r2,255
 20168e0:	1000041e 	bne	r2,zero,20168f4 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 20168e4:	e0ffff17 	ldw	r3,-4(fp)
 20168e8:	00800a84 	movi	r2,42
 20168ec:	18800005 	stb	r2,0(r3)
            return;
 20168f0:	00005706 	br	2016a50 <OSTaskNameSet+0x1b0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 20168f4:	e0bffe17 	ldw	r2,-8(fp)
 20168f8:	1004c03a 	cmpne	r2,r2,zero
 20168fc:	1000041e 	bne	r2,zero,2016910 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 2016900:	e0ffff17 	ldw	r3,-4(fp)
 2016904:	00800304 	movi	r2,12
 2016908:	18800005 	stb	r2,0(r3)
        return;
 201690c:	00005006 	br	2016a50 <OSTaskNameSet+0x1b0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 2016910:	008080b4 	movhi	r2,514
 2016914:	10b81404 	addi	r2,r2,-8112
 2016918:	10800003 	ldbu	r2,0(r2)
 201691c:	10803fcc 	andi	r2,r2,255
 2016920:	1005003a 	cmpeq	r2,r2,zero
 2016924:	1000041e 	bne	r2,zero,2016938 <OSTaskNameSet+0x98>
        *perr = OS_ERR_NAME_SET_ISR;
 2016928:	e0ffff17 	ldw	r3,-4(fp)
 201692c:	00800484 	movi	r2,18
 2016930:	18800005 	stb	r2,0(r3)
        return;
 2016934:	00004606 	br	2016a50 <OSTaskNameSet+0x1b0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016938:	0005303a 	rdctl	r2,status
 201693c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016940:	e0fff917 	ldw	r3,-28(fp)
 2016944:	00bfff84 	movi	r2,-2
 2016948:	1884703a 	and	r2,r3,r2
 201694c:	1001703a 	wrctl	status,r2
  
  return context;
 2016950:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 2016954:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 2016958:	e0bffd03 	ldbu	r2,-12(fp)
 201695c:	10803fd8 	cmpnei	r2,r2,255
 2016960:	1000051e 	bne	r2,zero,2016978 <OSTaskNameSet+0xd8>
        prio = OSTCBCur->OSTCBPrio;
 2016964:	008080b4 	movhi	r2,514
 2016968:	10b81504 	addi	r2,r2,-8108
 201696c:	10800017 	ldw	r2,0(r2)
 2016970:	10800c83 	ldbu	r2,50(r2)
 2016974:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2016978:	e0bffd03 	ldbu	r2,-12(fp)
 201697c:	00c080f4 	movhi	r3,515
 2016980:	18e66a04 	addi	r3,r3,-26200
 2016984:	1085883a 	add	r2,r2,r2
 2016988:	1085883a 	add	r2,r2,r2
 201698c:	10c5883a 	add	r2,r2,r3
 2016990:	10800017 	ldw	r2,0(r2)
 2016994:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 2016998:	e0bffb17 	ldw	r2,-20(fp)
 201699c:	1004c03a 	cmpne	r2,r2,zero
 20169a0:	1000081e 	bne	r2,zero,20169c4 <OSTaskNameSet+0x124>
 20169a4:	e0bffa17 	ldw	r2,-24(fp)
 20169a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20169ac:	e0bff817 	ldw	r2,-32(fp)
 20169b0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 20169b4:	e0ffff17 	ldw	r3,-4(fp)
 20169b8:	008010c4 	movi	r2,67
 20169bc:	18800005 	stb	r2,0(r3)
        return;
 20169c0:	00002306 	br	2016a50 <OSTaskNameSet+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 20169c4:	e0bffb17 	ldw	r2,-20(fp)
 20169c8:	10800058 	cmpnei	r2,r2,1
 20169cc:	1000081e 	bne	r2,zero,20169f0 <OSTaskNameSet+0x150>
 20169d0:	e0bffa17 	ldw	r2,-24(fp)
 20169d4:	e0bff715 	stw	r2,-36(fp)
 20169d8:	e0bff717 	ldw	r2,-36(fp)
 20169dc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 20169e0:	e0ffff17 	ldw	r3,-4(fp)
 20169e4:	008010c4 	movi	r2,67
 20169e8:	18800005 	stb	r2,0(r3)
        return;
 20169ec:	00001806 	br	2016a50 <OSTaskNameSet+0x1b0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 20169f0:	e13ffe17 	ldw	r4,-8(fp)
 20169f4:	20111300 	call	2011130 <OS_StrLen>
 20169f8:	e0bffc05 	stb	r2,-16(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 20169fc:	e0bffc03 	ldbu	r2,-16(fp)
 2016a00:	10800830 	cmpltui	r2,r2,32
 2016a04:	1000081e 	bne	r2,zero,2016a28 <OSTaskNameSet+0x188>
 2016a08:	e0bffa17 	ldw	r2,-24(fp)
 2016a0c:	e0bff615 	stw	r2,-40(fp)
 2016a10:	e0bff617 	ldw	r2,-40(fp)
 2016a14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 2016a18:	e0ffff17 	ldw	r3,-4(fp)
 2016a1c:	00801044 	movi	r2,65
 2016a20:	18800005 	stb	r2,0(r3)
        return;
 2016a24:	00000a06 	br	2016a50 <OSTaskNameSet+0x1b0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 2016a28:	e0bffb17 	ldw	r2,-20(fp)
 2016a2c:	11001304 	addi	r4,r2,76
 2016a30:	e17ffe17 	ldw	r5,-8(fp)
 2016a34:	20110b00 	call	20110b0 <OS_StrCopy>
 2016a38:	e0bffa17 	ldw	r2,-24(fp)
 2016a3c:	e0bff515 	stw	r2,-44(fp)
 2016a40:	e0bff517 	ldw	r2,-44(fp)
 2016a44:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 2016a48:	e0bfff17 	ldw	r2,-4(fp)
 2016a4c:	10000005 	stb	zero,0(r2)
}
 2016a50:	e037883a 	mov	sp,fp
 2016a54:	dfc00117 	ldw	ra,4(sp)
 2016a58:	df000017 	ldw	fp,0(sp)
 2016a5c:	dec00204 	addi	sp,sp,8
 2016a60:	f800283a 	ret

02016a64 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 2016a64:	defff304 	addi	sp,sp,-52
 2016a68:	dfc00c15 	stw	ra,48(sp)
 2016a6c:	df000b15 	stw	fp,44(sp)
 2016a70:	df000b04 	addi	fp,sp,44
 2016a74:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 2016a78:	e03ffc15 	stw	zero,-16(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 2016a7c:	e0bffe03 	ldbu	r2,-8(fp)
 2016a80:	10800530 	cmpltui	r2,r2,20
 2016a84:	1000031e 	bne	r2,zero,2016a94 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 2016a88:	00800a84 	movi	r2,42
 2016a8c:	e0bfff15 	stw	r2,-4(fp)
 2016a90:	00007406 	br	2016c64 <OSTaskResume+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016a94:	0005303a 	rdctl	r2,status
 2016a98:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016a9c:	e0fffb17 	ldw	r3,-20(fp)
 2016aa0:	00bfff84 	movi	r2,-2
 2016aa4:	1884703a 	and	r2,r3,r2
 2016aa8:	1001703a 	wrctl	status,r2
  
  return context;
 2016aac:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2016ab0:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];
 2016ab4:	e0bffe03 	ldbu	r2,-8(fp)
 2016ab8:	00c080f4 	movhi	r3,515
 2016abc:	18e66a04 	addi	r3,r3,-26200
 2016ac0:	1085883a 	add	r2,r2,r2
 2016ac4:	1085883a 	add	r2,r2,r2
 2016ac8:	10c5883a 	add	r2,r2,r3
 2016acc:	10800017 	ldw	r2,0(r2)
 2016ad0:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 2016ad4:	e0bffd17 	ldw	r2,-12(fp)
 2016ad8:	1004c03a 	cmpne	r2,r2,zero
 2016adc:	1000071e 	bne	r2,zero,2016afc <OSTaskResume+0x98>
 2016ae0:	e0bffc17 	ldw	r2,-16(fp)
 2016ae4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016ae8:	e0bffa17 	ldw	r2,-24(fp)
 2016aec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 2016af0:	00801184 	movi	r2,70
 2016af4:	e0bfff15 	stw	r2,-4(fp)
 2016af8:	00005a06 	br	2016c64 <OSTaskResume+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 2016afc:	e0bffd17 	ldw	r2,-12(fp)
 2016b00:	10800058 	cmpnei	r2,r2,1
 2016b04:	1000071e 	bne	r2,zero,2016b24 <OSTaskResume+0xc0>
 2016b08:	e0bffc17 	ldw	r2,-16(fp)
 2016b0c:	e0bff915 	stw	r2,-28(fp)
 2016b10:	e0bff917 	ldw	r2,-28(fp)
 2016b14:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2016b18:	008010c4 	movi	r2,67
 2016b1c:	e0bfff15 	stw	r2,-4(fp)
 2016b20:	00005006 	br	2016c64 <OSTaskResume+0x200>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 2016b24:	e0bffd17 	ldw	r2,-12(fp)
 2016b28:	10800c03 	ldbu	r2,48(r2)
 2016b2c:	10803fcc 	andi	r2,r2,255
 2016b30:	1080020c 	andi	r2,r2,8
 2016b34:	1005003a 	cmpeq	r2,r2,zero
 2016b38:	1000441e 	bne	r2,zero,2016c4c <OSTaskResume+0x1e8>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 2016b3c:	e0bffd17 	ldw	r2,-12(fp)
 2016b40:	10c00c03 	ldbu	r3,48(r2)
 2016b44:	00bffdc4 	movi	r2,-9
 2016b48:	1884703a 	and	r2,r3,r2
 2016b4c:	1007883a 	mov	r3,r2
 2016b50:	e0bffd17 	ldw	r2,-12(fp)
 2016b54:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 2016b58:	e0bffd17 	ldw	r2,-12(fp)
 2016b5c:	10800c03 	ldbu	r2,48(r2)
 2016b60:	10803fcc 	andi	r2,r2,255
 2016b64:	1004c03a 	cmpne	r2,r2,zero
 2016b68:	1000321e 	bne	r2,zero,2016c34 <OSTaskResume+0x1d0>
            if (ptcb->OSTCBDly == 0) {
 2016b6c:	e0bffd17 	ldw	r2,-12(fp)
 2016b70:	10800b8b 	ldhu	r2,46(r2)
 2016b74:	10bfffcc 	andi	r2,r2,65535
 2016b78:	1004c03a 	cmpne	r2,r2,zero
 2016b7c:	1000281e 	bne	r2,zero,2016c20 <OSTaskResume+0x1bc>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 2016b80:	e0bffd17 	ldw	r2,-12(fp)
 2016b84:	10c00d83 	ldbu	r3,54(r2)
 2016b88:	008080b4 	movhi	r2,514
 2016b8c:	10b81204 	addi	r2,r2,-8120
 2016b90:	10800003 	ldbu	r2,0(r2)
 2016b94:	1884b03a 	or	r2,r3,r2
 2016b98:	1007883a 	mov	r3,r2
 2016b9c:	008080b4 	movhi	r2,514
 2016ba0:	10b81204 	addi	r2,r2,-8120
 2016ba4:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 2016ba8:	e0bffd17 	ldw	r2,-12(fp)
 2016bac:	10800d03 	ldbu	r2,52(r2)
 2016bb0:	11003fcc 	andi	r4,r2,255
 2016bb4:	e0bffd17 	ldw	r2,-12(fp)
 2016bb8:	10800d03 	ldbu	r2,52(r2)
 2016bbc:	10c03fcc 	andi	r3,r2,255
 2016bc0:	008080b4 	movhi	r2,514
 2016bc4:	10b81244 	addi	r2,r2,-8119
 2016bc8:	10c5883a 	add	r2,r2,r3
 2016bcc:	10c00003 	ldbu	r3,0(r2)
 2016bd0:	e0bffd17 	ldw	r2,-12(fp)
 2016bd4:	10800d43 	ldbu	r2,53(r2)
 2016bd8:	1884b03a 	or	r2,r3,r2
 2016bdc:	1007883a 	mov	r3,r2
 2016be0:	008080b4 	movhi	r2,514
 2016be4:	10b81244 	addi	r2,r2,-8119
 2016be8:	1105883a 	add	r2,r2,r4
 2016bec:	10c00005 	stb	r3,0(r2)
 2016bf0:	e0bffc17 	ldw	r2,-16(fp)
 2016bf4:	e0bff815 	stw	r2,-32(fp)
 2016bf8:	e0bff817 	ldw	r2,-32(fp)
 2016bfc:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 2016c00:	008080b4 	movhi	r2,514
 2016c04:	10b80644 	addi	r2,r2,-8167
 2016c08:	10800003 	ldbu	r2,0(r2)
 2016c0c:	10803fcc 	andi	r2,r2,255
 2016c10:	10800058 	cmpnei	r2,r2,1
 2016c14:	10000b1e 	bne	r2,zero,2016c44 <OSTaskResume+0x1e0>
                    OS_Sched();                               /* Find new highest priority task        */
 2016c18:	2010f6c0 	call	2010f6c <OS_Sched>
 2016c1c:	00000906 	br	2016c44 <OSTaskResume+0x1e0>
 2016c20:	e0bffc17 	ldw	r2,-16(fp)
 2016c24:	e0bff715 	stw	r2,-36(fp)
 2016c28:	e0bff717 	ldw	r2,-36(fp)
 2016c2c:	1001703a 	wrctl	status,r2
 2016c30:	00000406 	br	2016c44 <OSTaskResume+0x1e0>
 2016c34:	e0bffc17 	ldw	r2,-16(fp)
 2016c38:	e0bff615 	stw	r2,-40(fp)
 2016c3c:	e0bff617 	ldw	r2,-40(fp)
 2016c40:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 2016c44:	e03fff15 	stw	zero,-4(fp)
 2016c48:	00000606 	br	2016c64 <OSTaskResume+0x200>
 2016c4c:	e0bffc17 	ldw	r2,-16(fp)
 2016c50:	e0bff515 	stw	r2,-44(fp)
 2016c54:	e0bff517 	ldw	r2,-44(fp)
 2016c58:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 2016c5c:	00801104 	movi	r2,68
 2016c60:	e0bfff15 	stw	r2,-4(fp)
 2016c64:	e0bfff17 	ldw	r2,-4(fp)
}
 2016c68:	e037883a 	mov	sp,fp
 2016c6c:	dfc00117 	ldw	ra,4(sp)
 2016c70:	df000017 	ldw	fp,0(sp)
 2016c74:	dec00204 	addi	sp,sp,8
 2016c78:	f800283a 	ret

02016c7c <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 2016c7c:	defff204 	addi	sp,sp,-56
 2016c80:	df000d15 	stw	fp,52(sp)
 2016c84:	df000d04 	addi	fp,sp,52
 2016c88:	e17ffe15 	stw	r5,-8(fp)
 2016c8c:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 2016c90:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 2016c94:	e0bffd03 	ldbu	r2,-12(fp)
 2016c98:	10800570 	cmpltui	r2,r2,21
 2016c9c:	1000061e 	bne	r2,zero,2016cb8 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 2016ca0:	e0bffd03 	ldbu	r2,-12(fp)
 2016ca4:	10803fe0 	cmpeqi	r2,r2,255
 2016ca8:	1000031e 	bne	r2,zero,2016cb8 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 2016cac:	00800a84 	movi	r2,42
 2016cb0:	e0bfff15 	stw	r2,-4(fp)
 2016cb4:	00006b06 	br	2016e64 <OSTaskStkChk+0x1e8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 2016cb8:	e0bffe17 	ldw	r2,-8(fp)
 2016cbc:	1004c03a 	cmpne	r2,r2,zero
 2016cc0:	1000031e 	bne	r2,zero,2016cd0 <OSTaskStkChk+0x54>
        return (OS_ERR_PDATA_NULL);
 2016cc4:	00800244 	movi	r2,9
 2016cc8:	e0bfff15 	stw	r2,-4(fp)
 2016ccc:	00006506 	br	2016e64 <OSTaskStkChk+0x1e8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 2016cd0:	e0bffe17 	ldw	r2,-8(fp)
 2016cd4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 2016cd8:	e0bffe17 	ldw	r2,-8(fp)
 2016cdc:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016ce0:	0005303a 	rdctl	r2,status
 2016ce4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016ce8:	e0fff717 	ldw	r3,-36(fp)
 2016cec:	00bfff84 	movi	r2,-2
 2016cf0:	1884703a 	and	r2,r3,r2
 2016cf4:	1001703a 	wrctl	status,r2
  
  return context;
 2016cf8:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 2016cfc:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 2016d00:	e0bffd03 	ldbu	r2,-12(fp)
 2016d04:	10803fd8 	cmpnei	r2,r2,255
 2016d08:	1000051e 	bne	r2,zero,2016d20 <OSTaskStkChk+0xa4>
        prio = OSTCBCur->OSTCBPrio;
 2016d0c:	008080b4 	movhi	r2,514
 2016d10:	10b81504 	addi	r2,r2,-8108
 2016d14:	10800017 	ldw	r2,0(r2)
 2016d18:	10800c83 	ldbu	r2,50(r2)
 2016d1c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2016d20:	e0bffd03 	ldbu	r2,-12(fp)
 2016d24:	00c080f4 	movhi	r3,515
 2016d28:	18e66a04 	addi	r3,r3,-26200
 2016d2c:	1085883a 	add	r2,r2,r2
 2016d30:	1085883a 	add	r2,r2,r2
 2016d34:	10c5883a 	add	r2,r2,r3
 2016d38:	10800017 	ldw	r2,0(r2)
 2016d3c:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 2016d40:	e0bffc17 	ldw	r2,-16(fp)
 2016d44:	1004c03a 	cmpne	r2,r2,zero
 2016d48:	1000071e 	bne	r2,zero,2016d68 <OSTaskStkChk+0xec>
 2016d4c:	e0bff817 	ldw	r2,-32(fp)
 2016d50:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016d54:	e0bff617 	ldw	r2,-40(fp)
 2016d58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2016d5c:	008010c4 	movi	r2,67
 2016d60:	e0bfff15 	stw	r2,-4(fp)
 2016d64:	00003f06 	br	2016e64 <OSTaskStkChk+0x1e8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 2016d68:	e0bffc17 	ldw	r2,-16(fp)
 2016d6c:	10800058 	cmpnei	r2,r2,1
 2016d70:	1000071e 	bne	r2,zero,2016d90 <OSTaskStkChk+0x114>
 2016d74:	e0bff817 	ldw	r2,-32(fp)
 2016d78:	e0bff515 	stw	r2,-44(fp)
 2016d7c:	e0bff517 	ldw	r2,-44(fp)
 2016d80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2016d84:	008010c4 	movi	r2,67
 2016d88:	e0bfff15 	stw	r2,-4(fp)
 2016d8c:	00003506 	br	2016e64 <OSTaskStkChk+0x1e8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 2016d90:	e0bffc17 	ldw	r2,-16(fp)
 2016d94:	1080040b 	ldhu	r2,16(r2)
 2016d98:	10bfffcc 	andi	r2,r2,65535
 2016d9c:	1080004c 	andi	r2,r2,1
 2016da0:	1004c03a 	cmpne	r2,r2,zero
 2016da4:	1000071e 	bne	r2,zero,2016dc4 <OSTaskStkChk+0x148>
 2016da8:	e0bff817 	ldw	r2,-32(fp)
 2016dac:	e0bff415 	stw	r2,-48(fp)
 2016db0:	e0bff417 	ldw	r2,-48(fp)
 2016db4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 2016db8:	00801144 	movi	r2,69
 2016dbc:	e0bfff15 	stw	r2,-4(fp)
 2016dc0:	00002806 	br	2016e64 <OSTaskStkChk+0x1e8>
    }
    nfree = 0;
 2016dc4:	e03ffa15 	stw	zero,-24(fp)
    size  = ptcb->OSTCBStkSize;
 2016dc8:	e0bffc17 	ldw	r2,-16(fp)
 2016dcc:	10800317 	ldw	r2,12(r2)
 2016dd0:	e0bff915 	stw	r2,-28(fp)
    pchk  = ptcb->OSTCBStkBottom;
 2016dd4:	e0bffc17 	ldw	r2,-16(fp)
 2016dd8:	10800217 	ldw	r2,8(r2)
 2016ddc:	e0bffb15 	stw	r2,-20(fp)
 2016de0:	e0bff817 	ldw	r2,-32(fp)
 2016de4:	e0bff315 	stw	r2,-52(fp)
 2016de8:	e0bff317 	ldw	r2,-52(fp)
 2016dec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 2016df0:	00000306 	br	2016e00 <OSTaskStkChk+0x184>
        nfree++;
 2016df4:	e0bffa17 	ldw	r2,-24(fp)
 2016df8:	10800044 	addi	r2,r2,1
 2016dfc:	e0bffa15 	stw	r2,-24(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 2016e00:	e0bffb17 	ldw	r2,-20(fp)
 2016e04:	10800017 	ldw	r2,0(r2)
 2016e08:	1005003a 	cmpeq	r2,r2,zero
 2016e0c:	1007883a 	mov	r3,r2
 2016e10:	e0bffb17 	ldw	r2,-20(fp)
 2016e14:	10800104 	addi	r2,r2,4
 2016e18:	e0bffb15 	stw	r2,-20(fp)
 2016e1c:	18803fcc 	andi	r2,r3,255
 2016e20:	1004c03a 	cmpne	r2,r2,zero
 2016e24:	103ff31e 	bne	r2,zero,2016df4 <OSTaskStkChk+0x178>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 2016e28:	e0bffa17 	ldw	r2,-24(fp)
 2016e2c:	1085883a 	add	r2,r2,r2
 2016e30:	1085883a 	add	r2,r2,r2
 2016e34:	1007883a 	mov	r3,r2
 2016e38:	e0bffe17 	ldw	r2,-8(fp)
 2016e3c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 2016e40:	e0fff917 	ldw	r3,-28(fp)
 2016e44:	e0bffa17 	ldw	r2,-24(fp)
 2016e48:	1885c83a 	sub	r2,r3,r2
 2016e4c:	1085883a 	add	r2,r2,r2
 2016e50:	1085883a 	add	r2,r2,r2
 2016e54:	1007883a 	mov	r3,r2
 2016e58:	e0bffe17 	ldw	r2,-8(fp)
 2016e5c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 2016e60:	e03fff15 	stw	zero,-4(fp)
 2016e64:	e0bfff17 	ldw	r2,-4(fp)
}
 2016e68:	e037883a 	mov	sp,fp
 2016e6c:	df000017 	ldw	fp,0(sp)
 2016e70:	dec00104 	addi	sp,sp,4
 2016e74:	f800283a 	ret

02016e78 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 2016e78:	defff404 	addi	sp,sp,-48
 2016e7c:	dfc00b15 	stw	ra,44(sp)
 2016e80:	df000a15 	stw	fp,40(sp)
 2016e84:	df000a04 	addi	fp,sp,40
 2016e88:	e13ffe05 	stb	r4,-8(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2016e8c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 2016e90:	e0bffe03 	ldbu	r2,-8(fp)
 2016e94:	10800518 	cmpnei	r2,r2,20
 2016e98:	1000031e 	bne	r2,zero,2016ea8 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 2016e9c:	008011c4 	movi	r2,71
 2016ea0:	e0bfff15 	stw	r2,-4(fp)
 2016ea4:	00007906 	br	201708c <OSTaskSuspend+0x214>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 2016ea8:	e0bffe03 	ldbu	r2,-8(fp)
 2016eac:	10800530 	cmpltui	r2,r2,20
 2016eb0:	1000061e 	bne	r2,zero,2016ecc <OSTaskSuspend+0x54>
        if (prio != OS_PRIO_SELF) {
 2016eb4:	e0bffe03 	ldbu	r2,-8(fp)
 2016eb8:	10803fe0 	cmpeqi	r2,r2,255
 2016ebc:	1000031e 	bne	r2,zero,2016ecc <OSTaskSuspend+0x54>
            return (OS_ERR_PRIO_INVALID);
 2016ec0:	00800a84 	movi	r2,42
 2016ec4:	e0bfff15 	stw	r2,-4(fp)
 2016ec8:	00007006 	br	201708c <OSTaskSuspend+0x214>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2016ecc:	0005303a 	rdctl	r2,status
 2016ed0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2016ed4:	e0fff917 	ldw	r3,-28(fp)
 2016ed8:	00bfff84 	movi	r2,-2
 2016edc:	1884703a 	and	r2,r3,r2
 2016ee0:	1001703a 	wrctl	status,r2
  
  return context;
 2016ee4:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 2016ee8:	e0bffa15 	stw	r2,-24(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 2016eec:	e0bffe03 	ldbu	r2,-8(fp)
 2016ef0:	10803fd8 	cmpnei	r2,r2,255
 2016ef4:	1000081e 	bne	r2,zero,2016f18 <OSTaskSuspend+0xa0>
        prio = OSTCBCur->OSTCBPrio;
 2016ef8:	008080b4 	movhi	r2,514
 2016efc:	10b81504 	addi	r2,r2,-8108
 2016f00:	10800017 	ldw	r2,0(r2)
 2016f04:	10800c83 	ldbu	r2,50(r2)
 2016f08:	e0bffe05 	stb	r2,-8(fp)
        self = OS_TRUE;
 2016f0c:	00800044 	movi	r2,1
 2016f10:	e0bffd05 	stb	r2,-12(fp)
 2016f14:	00000b06 	br	2016f44 <OSTaskSuspend+0xcc>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 2016f18:	008080b4 	movhi	r2,514
 2016f1c:	10b81504 	addi	r2,r2,-8108
 2016f20:	10800017 	ldw	r2,0(r2)
 2016f24:	10800c83 	ldbu	r2,50(r2)
 2016f28:	10c03fcc 	andi	r3,r2,255
 2016f2c:	e0bffe03 	ldbu	r2,-8(fp)
 2016f30:	1880031e 	bne	r3,r2,2016f40 <OSTaskSuspend+0xc8>
        self = OS_TRUE;
 2016f34:	00800044 	movi	r2,1
 2016f38:	e0bffd05 	stb	r2,-12(fp)
 2016f3c:	00000106 	br	2016f44 <OSTaskSuspend+0xcc>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 2016f40:	e03ffd05 	stb	zero,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 2016f44:	e0bffe03 	ldbu	r2,-8(fp)
 2016f48:	00c080f4 	movhi	r3,515
 2016f4c:	18e66a04 	addi	r3,r3,-26200
 2016f50:	1085883a 	add	r2,r2,r2
 2016f54:	1085883a 	add	r2,r2,r2
 2016f58:	10c5883a 	add	r2,r2,r3
 2016f5c:	10800017 	ldw	r2,0(r2)
 2016f60:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 2016f64:	e0bffc17 	ldw	r2,-16(fp)
 2016f68:	1004c03a 	cmpne	r2,r2,zero
 2016f6c:	1000071e 	bne	r2,zero,2016f8c <OSTaskSuspend+0x114>
 2016f70:	e0bffa17 	ldw	r2,-24(fp)
 2016f74:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2016f78:	e0bff817 	ldw	r2,-32(fp)
 2016f7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 2016f80:	00801204 	movi	r2,72
 2016f84:	e0bfff15 	stw	r2,-4(fp)
 2016f88:	00004006 	br	201708c <OSTaskSuspend+0x214>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 2016f8c:	e0bffc17 	ldw	r2,-16(fp)
 2016f90:	10800058 	cmpnei	r2,r2,1
 2016f94:	1000071e 	bne	r2,zero,2016fb4 <OSTaskSuspend+0x13c>
 2016f98:	e0bffa17 	ldw	r2,-24(fp)
 2016f9c:	e0bff715 	stw	r2,-36(fp)
 2016fa0:	e0bff717 	ldw	r2,-36(fp)
 2016fa4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 2016fa8:	008010c4 	movi	r2,67
 2016fac:	e0bfff15 	stw	r2,-4(fp)
 2016fb0:	00003606 	br	201708c <OSTaskSuspend+0x214>
    }
    y            = ptcb->OSTCBY;
 2016fb4:	e0bffc17 	ldw	r2,-16(fp)
 2016fb8:	10800d03 	ldbu	r2,52(r2)
 2016fbc:	e0bffb05 	stb	r2,-20(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 2016fc0:	e13ffb03 	ldbu	r4,-20(fp)
 2016fc4:	e0fffb03 	ldbu	r3,-20(fp)
 2016fc8:	008080b4 	movhi	r2,514
 2016fcc:	10b81244 	addi	r2,r2,-8119
 2016fd0:	10c5883a 	add	r2,r2,r3
 2016fd4:	10800003 	ldbu	r2,0(r2)
 2016fd8:	1007883a 	mov	r3,r2
 2016fdc:	e0bffc17 	ldw	r2,-16(fp)
 2016fe0:	10800d43 	ldbu	r2,53(r2)
 2016fe4:	0084303a 	nor	r2,zero,r2
 2016fe8:	1884703a 	and	r2,r3,r2
 2016fec:	1007883a 	mov	r3,r2
 2016ff0:	008080b4 	movhi	r2,514
 2016ff4:	10b81244 	addi	r2,r2,-8119
 2016ff8:	1105883a 	add	r2,r2,r4
 2016ffc:	10c00005 	stb	r3,0(r2)
    if (OSRdyTbl[y] == 0) {
 2017000:	e0fffb03 	ldbu	r3,-20(fp)
 2017004:	008080b4 	movhi	r2,514
 2017008:	10b81244 	addi	r2,r2,-8119
 201700c:	10c5883a 	add	r2,r2,r3
 2017010:	10800003 	ldbu	r2,0(r2)
 2017014:	10803fcc 	andi	r2,r2,255
 2017018:	1004c03a 	cmpne	r2,r2,zero
 201701c:	10000c1e 	bne	r2,zero,2017050 <OSTaskSuspend+0x1d8>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 2017020:	e0bffc17 	ldw	r2,-16(fp)
 2017024:	10800d83 	ldbu	r2,54(r2)
 2017028:	0084303a 	nor	r2,zero,r2
 201702c:	1007883a 	mov	r3,r2
 2017030:	008080b4 	movhi	r2,514
 2017034:	10b81204 	addi	r2,r2,-8120
 2017038:	10800003 	ldbu	r2,0(r2)
 201703c:	1884703a 	and	r2,r3,r2
 2017040:	1007883a 	mov	r3,r2
 2017044:	008080b4 	movhi	r2,514
 2017048:	10b81204 	addi	r2,r2,-8120
 201704c:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 2017050:	e0bffc17 	ldw	r2,-16(fp)
 2017054:	10800c03 	ldbu	r2,48(r2)
 2017058:	10800214 	ori	r2,r2,8
 201705c:	1007883a 	mov	r3,r2
 2017060:	e0bffc17 	ldw	r2,-16(fp)
 2017064:	10c00c05 	stb	r3,48(r2)
 2017068:	e0bffa17 	ldw	r2,-24(fp)
 201706c:	e0bff615 	stw	r2,-40(fp)
 2017070:	e0bff617 	ldw	r2,-40(fp)
 2017074:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 2017078:	e0bffd03 	ldbu	r2,-12(fp)
 201707c:	10800058 	cmpnei	r2,r2,1
 2017080:	1000011e 	bne	r2,zero,2017088 <OSTaskSuspend+0x210>
        OS_Sched();                                             /* Find new highest priority task      */
 2017084:	2010f6c0 	call	2010f6c <OS_Sched>
    }
    return (OS_ERR_NONE);
 2017088:	e03fff15 	stw	zero,-4(fp)
 201708c:	e0bfff17 	ldw	r2,-4(fp)
}
 2017090:	e037883a 	mov	sp,fp
 2017094:	dfc00117 	ldw	ra,4(sp)
 2017098:	df000017 	ldw	fp,0(sp)
 201709c:	dec00204 	addi	sp,sp,8
 20170a0:	f800283a 	ret

020170a4 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 20170a4:	defff504 	addi	sp,sp,-44
 20170a8:	dfc00a15 	stw	ra,40(sp)
 20170ac:	df000915 	stw	fp,36(sp)
 20170b0:	df000904 	addi	fp,sp,36
 20170b4:	e17ffe15 	stw	r5,-8(fp)
 20170b8:	e13ffd05 	stb	r4,-12(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20170bc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 20170c0:	e0bffd03 	ldbu	r2,-12(fp)
 20170c4:	10800570 	cmpltui	r2,r2,21
 20170c8:	1000061e 	bne	r2,zero,20170e4 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 20170cc:	e0bffd03 	ldbu	r2,-12(fp)
 20170d0:	10803fe0 	cmpeqi	r2,r2,255
 20170d4:	1000031e 	bne	r2,zero,20170e4 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 20170d8:	00800a84 	movi	r2,42
 20170dc:	e0bfff15 	stw	r2,-4(fp)
 20170e0:	00003b06 	br	20171d0 <OSTaskQuery+0x12c>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 20170e4:	e0bffe17 	ldw	r2,-8(fp)
 20170e8:	1004c03a 	cmpne	r2,r2,zero
 20170ec:	1000031e 	bne	r2,zero,20170fc <OSTaskQuery+0x58>
        return (OS_ERR_PDATA_NULL);
 20170f0:	00800244 	movi	r2,9
 20170f4:	e0bfff15 	stw	r2,-4(fp)
 20170f8:	00003506 	br	20171d0 <OSTaskQuery+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20170fc:	0005303a 	rdctl	r2,status
 2017100:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017104:	e0fffa17 	ldw	r3,-24(fp)
 2017108:	00bfff84 	movi	r2,-2
 201710c:	1884703a 	and	r2,r3,r2
 2017110:	1001703a 	wrctl	status,r2
  
  return context;
 2017114:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 2017118:	e0bffb15 	stw	r2,-20(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 201711c:	e0bffd03 	ldbu	r2,-12(fp)
 2017120:	10803fd8 	cmpnei	r2,r2,255
 2017124:	1000051e 	bne	r2,zero,201713c <OSTaskQuery+0x98>
        prio = OSTCBCur->OSTCBPrio;
 2017128:	008080b4 	movhi	r2,514
 201712c:	10b81504 	addi	r2,r2,-8108
 2017130:	10800017 	ldw	r2,0(r2)
 2017134:	10800c83 	ldbu	r2,50(r2)
 2017138:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 201713c:	e0bffd03 	ldbu	r2,-12(fp)
 2017140:	00c080f4 	movhi	r3,515
 2017144:	18e66a04 	addi	r3,r3,-26200
 2017148:	1085883a 	add	r2,r2,r2
 201714c:	1085883a 	add	r2,r2,r2
 2017150:	10c5883a 	add	r2,r2,r3
 2017154:	10800017 	ldw	r2,0(r2)
 2017158:	e0bffc15 	stw	r2,-16(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 201715c:	e0bffc17 	ldw	r2,-16(fp)
 2017160:	1004c03a 	cmpne	r2,r2,zero
 2017164:	1000071e 	bne	r2,zero,2017184 <OSTaskQuery+0xe0>
 2017168:	e0bffb17 	ldw	r2,-20(fp)
 201716c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017170:	e0bff917 	ldw	r2,-28(fp)
 2017174:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 2017178:	00800a44 	movi	r2,41
 201717c:	e0bfff15 	stw	r2,-4(fp)
 2017180:	00001306 	br	20171d0 <OSTaskQuery+0x12c>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 2017184:	e0bffc17 	ldw	r2,-16(fp)
 2017188:	10800058 	cmpnei	r2,r2,1
 201718c:	1000071e 	bne	r2,zero,20171ac <OSTaskQuery+0x108>
 2017190:	e0bffb17 	ldw	r2,-20(fp)
 2017194:	e0bff815 	stw	r2,-32(fp)
 2017198:	e0bff817 	ldw	r2,-32(fp)
 201719c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 20171a0:	008010c4 	movi	r2,67
 20171a4:	e0bfff15 	stw	r2,-4(fp)
 20171a8:	00000906 	br	20171d0 <OSTaskQuery+0x12c>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 20171ac:	e13ffe17 	ldw	r4,-8(fp)
 20171b0:	e17ffc17 	ldw	r5,-16(fp)
 20171b4:	01801b04 	movi	r6,108
 20171b8:	2010f000 	call	2010f00 <OS_MemCopy>
 20171bc:	e0bffb17 	ldw	r2,-20(fp)
 20171c0:	e0bff715 	stw	r2,-36(fp)
 20171c4:	e0bff717 	ldw	r2,-36(fp)
 20171c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 20171cc:	e03fff15 	stw	zero,-4(fp)
 20171d0:	e0bfff17 	ldw	r2,-4(fp)
}
 20171d4:	e037883a 	mov	sp,fp
 20171d8:	dfc00117 	ldw	ra,4(sp)
 20171dc:	df000017 	ldw	fp,0(sp)
 20171e0:	dec00204 	addi	sp,sp,8
 20171e4:	f800283a 	ret

020171e8 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 20171e8:	defffc04 	addi	sp,sp,-16
 20171ec:	df000315 	stw	fp,12(sp)
 20171f0:	df000304 	addi	fp,sp,12
 20171f4:	e13ffd15 	stw	r4,-12(fp)
 20171f8:	e17ffe15 	stw	r5,-8(fp)
 20171fc:	e1bfff0d 	sth	r6,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 2017200:	e0bfff0b 	ldhu	r2,-4(fp)
 2017204:	1080004c 	andi	r2,r2,1
 2017208:	10803fcc 	andi	r2,r2,255
 201720c:	1005003a 	cmpeq	r2,r2,zero
 2017210:	1000101e 	bne	r2,zero,2017254 <OS_TaskStkClr+0x6c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 2017214:	e0bfff0b 	ldhu	r2,-4(fp)
 2017218:	1080008c 	andi	r2,r2,2
 201721c:	1005003a 	cmpeq	r2,r2,zero
 2017220:	10000c1e 	bne	r2,zero,2017254 <OS_TaskStkClr+0x6c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 2017224:	00000806 	br	2017248 <OS_TaskStkClr+0x60>
                size--;
 2017228:	e0bffe17 	ldw	r2,-8(fp)
 201722c:	10bfffc4 	addi	r2,r2,-1
 2017230:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 2017234:	e0bffd17 	ldw	r2,-12(fp)
 2017238:	10000015 	stw	zero,0(r2)
 201723c:	e0bffd17 	ldw	r2,-12(fp)
 2017240:	10800104 	addi	r2,r2,4
 2017244:	e0bffd15 	stw	r2,-12(fp)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 2017248:	e0bffe17 	ldw	r2,-8(fp)
 201724c:	1004c03a 	cmpne	r2,r2,zero
 2017250:	103ff51e 	bne	r2,zero,2017228 <OS_TaskStkClr+0x40>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 2017254:	e037883a 	mov	sp,fp
 2017258:	df000017 	ldw	fp,0(sp)
 201725c:	dec00104 	addi	sp,sp,4
 2017260:	f800283a 	ret

02017264 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 2017264:	defff904 	addi	sp,sp,-28
 2017268:	dfc00615 	stw	ra,24(sp)
 201726c:	df000515 	stw	fp,20(sp)
 2017270:	df000504 	addi	fp,sp,20
 2017274:	e13fff0d 	sth	r4,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 2017278:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 201727c:	008080b4 	movhi	r2,514
 2017280:	10b81404 	addi	r2,r2,-8112
 2017284:	10800003 	ldbu	r2,0(r2)
 2017288:	10803fcc 	andi	r2,r2,255
 201728c:	1004c03a 	cmpne	r2,r2,zero
 2017290:	1000421e 	bne	r2,zero,201739c <OSTimeDly+0x138>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 2017294:	e0bfff0b 	ldhu	r2,-4(fp)
 2017298:	1005003a 	cmpeq	r2,r2,zero
 201729c:	10003f1e 	bne	r2,zero,201739c <OSTimeDly+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20172a0:	0005303a 	rdctl	r2,status
 20172a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20172a8:	e0fffc17 	ldw	r3,-16(fp)
 20172ac:	00bfff84 	movi	r2,-2
 20172b0:	1884703a 	and	r2,r3,r2
 20172b4:	1001703a 	wrctl	status,r2
  
  return context;
 20172b8:	e0bffc17 	ldw	r2,-16(fp)
        OS_ENTER_CRITICAL();
 20172bc:	e0bffd15 	stw	r2,-12(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 20172c0:	008080b4 	movhi	r2,514
 20172c4:	10b81504 	addi	r2,r2,-8108
 20172c8:	10800017 	ldw	r2,0(r2)
 20172cc:	10800d03 	ldbu	r2,52(r2)
 20172d0:	e0bffe05 	stb	r2,-8(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 20172d4:	e13ffe03 	ldbu	r4,-8(fp)
 20172d8:	e0fffe03 	ldbu	r3,-8(fp)
 20172dc:	008080b4 	movhi	r2,514
 20172e0:	10b81244 	addi	r2,r2,-8119
 20172e4:	10c5883a 	add	r2,r2,r3
 20172e8:	10800003 	ldbu	r2,0(r2)
 20172ec:	1007883a 	mov	r3,r2
 20172f0:	008080b4 	movhi	r2,514
 20172f4:	10b81504 	addi	r2,r2,-8108
 20172f8:	10800017 	ldw	r2,0(r2)
 20172fc:	10800d43 	ldbu	r2,53(r2)
 2017300:	0084303a 	nor	r2,zero,r2
 2017304:	1884703a 	and	r2,r3,r2
 2017308:	1007883a 	mov	r3,r2
 201730c:	008080b4 	movhi	r2,514
 2017310:	10b81244 	addi	r2,r2,-8119
 2017314:	1105883a 	add	r2,r2,r4
 2017318:	10c00005 	stb	r3,0(r2)
        if (OSRdyTbl[y] == 0) {
 201731c:	e0fffe03 	ldbu	r3,-8(fp)
 2017320:	008080b4 	movhi	r2,514
 2017324:	10b81244 	addi	r2,r2,-8119
 2017328:	10c5883a 	add	r2,r2,r3
 201732c:	10800003 	ldbu	r2,0(r2)
 2017330:	10803fcc 	andi	r2,r2,255
 2017334:	1004c03a 	cmpne	r2,r2,zero
 2017338:	10000e1e 	bne	r2,zero,2017374 <OSTimeDly+0x110>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 201733c:	008080b4 	movhi	r2,514
 2017340:	10b81504 	addi	r2,r2,-8108
 2017344:	10800017 	ldw	r2,0(r2)
 2017348:	10800d83 	ldbu	r2,54(r2)
 201734c:	0084303a 	nor	r2,zero,r2
 2017350:	1007883a 	mov	r3,r2
 2017354:	008080b4 	movhi	r2,514
 2017358:	10b81204 	addi	r2,r2,-8120
 201735c:	10800003 	ldbu	r2,0(r2)
 2017360:	1884703a 	and	r2,r3,r2
 2017364:	1007883a 	mov	r3,r2
 2017368:	008080b4 	movhi	r2,514
 201736c:	10b81204 	addi	r2,r2,-8120
 2017370:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 2017374:	008080b4 	movhi	r2,514
 2017378:	10b81504 	addi	r2,r2,-8108
 201737c:	10c00017 	ldw	r3,0(r2)
 2017380:	e0bfff0b 	ldhu	r2,-4(fp)
 2017384:	18800b8d 	sth	r2,46(r3)
 2017388:	e0bffd17 	ldw	r2,-12(fp)
 201738c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017390:	e0bffb17 	ldw	r2,-20(fp)
 2017394:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 2017398:	2010f6c0 	call	2010f6c <OS_Sched>
    }
}
 201739c:	e037883a 	mov	sp,fp
 20173a0:	dfc00117 	ldw	ra,4(sp)
 20173a4:	df000017 	ldw	fp,0(sp)
 20173a8:	dec00204 	addi	sp,sp,8
 20173ac:	f800283a 	ret

020173b0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 20173b0:	defff604 	addi	sp,sp,-40
 20173b4:	dfc00915 	stw	ra,36(sp)
 20173b8:	df000815 	stw	fp,32(sp)
 20173bc:	dc000715 	stw	r16,28(sp)
 20173c0:	df000704 	addi	fp,sp,28
 20173c4:	e13ffb05 	stb	r4,-20(fp)
 20173c8:	e17ffc05 	stb	r5,-16(fp)
 20173cc:	e1bffd05 	stb	r6,-12(fp)
 20173d0:	e1fffe0d 	sth	r7,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 20173d4:	008080b4 	movhi	r2,514
 20173d8:	10b81404 	addi	r2,r2,-8112
 20173dc:	10800003 	ldbu	r2,0(r2)
 20173e0:	10803fcc 	andi	r2,r2,255
 20173e4:	1005003a 	cmpeq	r2,r2,zero
 20173e8:	1000031e 	bne	r2,zero,20173f8 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 20173ec:	00801544 	movi	r2,85
 20173f0:	e0bfff15 	stw	r2,-4(fp)
 20173f4:	00004b06 	br	2017524 <OSTimeDlyHMSM+0x174>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 20173f8:	e0bffb03 	ldbu	r2,-20(fp)
 20173fc:	1004c03a 	cmpne	r2,r2,zero
 2017400:	10000c1e 	bne	r2,zero,2017434 <OSTimeDlyHMSM+0x84>
        if (minutes == 0) {
 2017404:	e0bffc03 	ldbu	r2,-16(fp)
 2017408:	1004c03a 	cmpne	r2,r2,zero
 201740c:	1000091e 	bne	r2,zero,2017434 <OSTimeDlyHMSM+0x84>
            if (seconds == 0) {
 2017410:	e0bffd03 	ldbu	r2,-12(fp)
 2017414:	1004c03a 	cmpne	r2,r2,zero
 2017418:	1000061e 	bne	r2,zero,2017434 <OSTimeDlyHMSM+0x84>
                if (ms == 0) {
 201741c:	e0bffe0b 	ldhu	r2,-8(fp)
 2017420:	1004c03a 	cmpne	r2,r2,zero
 2017424:	1000031e 	bne	r2,zero,2017434 <OSTimeDlyHMSM+0x84>
                    return (OS_ERR_TIME_ZERO_DLY);
 2017428:	00801504 	movi	r2,84
 201742c:	e0bfff15 	stw	r2,-4(fp)
 2017430:	00003c06 	br	2017524 <OSTimeDlyHMSM+0x174>
                }
            }
        }
    }
    if (minutes > 59) {
 2017434:	e0bffc03 	ldbu	r2,-16(fp)
 2017438:	10800f30 	cmpltui	r2,r2,60
 201743c:	1000031e 	bne	r2,zero,201744c <OSTimeDlyHMSM+0x9c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 2017440:	00801444 	movi	r2,81
 2017444:	e0bfff15 	stw	r2,-4(fp)
 2017448:	00003606 	br	2017524 <OSTimeDlyHMSM+0x174>
    }
    if (seconds > 59) {
 201744c:	e0bffd03 	ldbu	r2,-12(fp)
 2017450:	10800f30 	cmpltui	r2,r2,60
 2017454:	1000031e 	bne	r2,zero,2017464 <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_SECONDS);
 2017458:	00801484 	movi	r2,82
 201745c:	e0bfff15 	stw	r2,-4(fp)
 2017460:	00003006 	br	2017524 <OSTimeDlyHMSM+0x174>
    }
    if (ms > 999) {
 2017464:	e0bffe0b 	ldhu	r2,-8(fp)
 2017468:	1080fa30 	cmpltui	r2,r2,1000
 201746c:	1000031e 	bne	r2,zero,201747c <OSTimeDlyHMSM+0xcc>
        return (OS_ERR_TIME_INVALID_MS);
 2017470:	008014c4 	movi	r2,83
 2017474:	e0bfff15 	stw	r2,-4(fp)
 2017478:	00002a06 	br	2017524 <OSTimeDlyHMSM+0x174>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 201747c:	e13ffb03 	ldbu	r4,-20(fp)
 2017480:	01438404 	movi	r5,3600
 2017484:	20032ac0 	call	20032ac <__mulsi3>
 2017488:	1021883a 	mov	r16,r2
 201748c:	e13ffc03 	ldbu	r4,-16(fp)
 2017490:	01400f04 	movi	r5,60
 2017494:	20032ac0 	call	20032ac <__mulsi3>
 2017498:	8087883a 	add	r3,r16,r2
 201749c:	e0bffd03 	ldbu	r2,-12(fp)
 20174a0:	1889883a 	add	r4,r3,r2
 20174a4:	0140fa04 	movi	r5,1000
 20174a8:	20032ac0 	call	20032ac <__mulsi3>
 20174ac:	1021883a 	mov	r16,r2
 20174b0:	e13ffe0b 	ldhu	r4,-8(fp)
 20174b4:	0140fa04 	movi	r5,1000
 20174b8:	20032ac0 	call	20032ac <__mulsi3>
 20174bc:	1009883a 	mov	r4,r2
 20174c0:	0140fa04 	movi	r5,1000
 20174c4:	200329c0 	call	200329c <__udivsi3>
 20174c8:	8085883a 	add	r2,r16,r2
 20174cc:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 20174d0:	e0bffa17 	ldw	r2,-24(fp)
 20174d4:	1004d43a 	srli	r2,r2,16
 20174d8:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 20174dc:	e0bffa17 	ldw	r2,-24(fp)
 20174e0:	10bfffcc 	andi	r2,r2,65535
 20174e4:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 20174e8:	e0bffa17 	ldw	r2,-24(fp)
 20174ec:	113fffcc 	andi	r4,r2,65535
 20174f0:	20172640 	call	2017264 <OSTimeDly>
    while (loops > 0) {
 20174f4:	00000706 	br	2017514 <OSTimeDlyHMSM+0x164>
        OSTimeDly((INT16U)32768u);
 20174f8:	01200014 	movui	r4,32768
 20174fc:	20172640 	call	2017264 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 2017500:	01200014 	movui	r4,32768
 2017504:	20172640 	call	2017264 <OSTimeDly>
        loops--;
 2017508:	e0bff90b 	ldhu	r2,-28(fp)
 201750c:	10bfffc4 	addi	r2,r2,-1
 2017510:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 2017514:	e0bff90b 	ldhu	r2,-28(fp)
 2017518:	1004c03a 	cmpne	r2,r2,zero
 201751c:	103ff61e 	bne	r2,zero,20174f8 <OSTimeDlyHMSM+0x148>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 2017520:	e03fff15 	stw	zero,-4(fp)
 2017524:	e0bfff17 	ldw	r2,-4(fp)
}
 2017528:	e037883a 	mov	sp,fp
 201752c:	dfc00217 	ldw	ra,8(sp)
 2017530:	df000117 	ldw	fp,4(sp)
 2017534:	dc000017 	ldw	r16,0(sp)
 2017538:	dec00304 	addi	sp,sp,12
 201753c:	f800283a 	ret

02017540 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 2017540:	defff404 	addi	sp,sp,-48
 2017544:	dfc00b15 	stw	ra,44(sp)
 2017548:	df000a15 	stw	fp,40(sp)
 201754c:	df000a04 	addi	fp,sp,40
 2017550:	e13ffe05 	stb	r4,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 2017554:	e03ffc15 	stw	zero,-16(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 2017558:	e0bffe03 	ldbu	r2,-8(fp)
 201755c:	10800530 	cmpltui	r2,r2,20
 2017560:	1000031e 	bne	r2,zero,2017570 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 2017564:	00800a84 	movi	r2,42
 2017568:	e0bfff15 	stw	r2,-4(fp)
 201756c:	00007206 	br	2017738 <OSTimeDlyResume+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017570:	0005303a 	rdctl	r2,status
 2017574:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017578:	e0fffb17 	ldw	r3,-20(fp)
 201757c:	00bfff84 	movi	r2,-2
 2017580:	1884703a 	and	r2,r3,r2
 2017584:	1001703a 	wrctl	status,r2
  
  return context;
 2017588:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 201758c:	e0bffc15 	stw	r2,-16(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 2017590:	e0bffe03 	ldbu	r2,-8(fp)
 2017594:	00c080f4 	movhi	r3,515
 2017598:	18e66a04 	addi	r3,r3,-26200
 201759c:	1085883a 	add	r2,r2,r2
 20175a0:	1085883a 	add	r2,r2,r2
 20175a4:	10c5883a 	add	r2,r2,r3
 20175a8:	10800017 	ldw	r2,0(r2)
 20175ac:	e0bffd15 	stw	r2,-12(fp)
    if (ptcb == (OS_TCB *)0) {
 20175b0:	e0bffd17 	ldw	r2,-12(fp)
 20175b4:	1004c03a 	cmpne	r2,r2,zero
 20175b8:	1000071e 	bne	r2,zero,20175d8 <OSTimeDlyResume+0x98>
 20175bc:	e0bffc17 	ldw	r2,-16(fp)
 20175c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20175c4:	e0bffa17 	ldw	r2,-24(fp)
 20175c8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 20175cc:	008010c4 	movi	r2,67
 20175d0:	e0bfff15 	stw	r2,-4(fp)
 20175d4:	00005806 	br	2017738 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 20175d8:	e0bffd17 	ldw	r2,-12(fp)
 20175dc:	10800058 	cmpnei	r2,r2,1
 20175e0:	1000071e 	bne	r2,zero,2017600 <OSTimeDlyResume+0xc0>
 20175e4:	e0bffc17 	ldw	r2,-16(fp)
 20175e8:	e0bff915 	stw	r2,-28(fp)
 20175ec:	e0bff917 	ldw	r2,-28(fp)
 20175f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 20175f4:	008010c4 	movi	r2,67
 20175f8:	e0bfff15 	stw	r2,-4(fp)
 20175fc:	00004e06 	br	2017738 <OSTimeDlyResume+0x1f8>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 2017600:	e0bffd17 	ldw	r2,-12(fp)
 2017604:	10800b8b 	ldhu	r2,46(r2)
 2017608:	10bfffcc 	andi	r2,r2,65535
 201760c:	1004c03a 	cmpne	r2,r2,zero
 2017610:	1000071e 	bne	r2,zero,2017630 <OSTimeDlyResume+0xf0>
 2017614:	e0bffc17 	ldw	r2,-16(fp)
 2017618:	e0bff815 	stw	r2,-32(fp)
 201761c:	e0bff817 	ldw	r2,-32(fp)
 2017620:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 2017624:	00801404 	movi	r2,80
 2017628:	e0bfff15 	stw	r2,-4(fp)
 201762c:	00004206 	br	2017738 <OSTimeDlyResume+0x1f8>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 2017630:	e0bffd17 	ldw	r2,-12(fp)
 2017634:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 2017638:	e0bffd17 	ldw	r2,-12(fp)
 201763c:	10800c03 	ldbu	r2,48(r2)
 2017640:	10803fcc 	andi	r2,r2,255
 2017644:	10800dcc 	andi	r2,r2,55
 2017648:	1005003a 	cmpeq	r2,r2,zero
 201764c:	10000b1e 	bne	r2,zero,201767c <OSTimeDlyResume+0x13c>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 2017650:	e0bffd17 	ldw	r2,-12(fp)
 2017654:	10c00c03 	ldbu	r3,48(r2)
 2017658:	00bff204 	movi	r2,-56
 201765c:	1884703a 	and	r2,r3,r2
 2017660:	1007883a 	mov	r3,r2
 2017664:	e0bffd17 	ldw	r2,-12(fp)
 2017668:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 201766c:	e0fffd17 	ldw	r3,-12(fp)
 2017670:	00800044 	movi	r2,1
 2017674:	18800c45 	stb	r2,49(r3)
 2017678:	00000206 	br	2017684 <OSTimeDlyResume+0x144>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 201767c:	e0bffd17 	ldw	r2,-12(fp)
 2017680:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 2017684:	e0bffd17 	ldw	r2,-12(fp)
 2017688:	10800c03 	ldbu	r2,48(r2)
 201768c:	10803fcc 	andi	r2,r2,255
 2017690:	1080020c 	andi	r2,r2,8
 2017694:	1004c03a 	cmpne	r2,r2,zero
 2017698:	1000221e 	bne	r2,zero,2017724 <OSTimeDlyResume+0x1e4>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 201769c:	e0bffd17 	ldw	r2,-12(fp)
 20176a0:	10c00d83 	ldbu	r3,54(r2)
 20176a4:	008080b4 	movhi	r2,514
 20176a8:	10b81204 	addi	r2,r2,-8120
 20176ac:	10800003 	ldbu	r2,0(r2)
 20176b0:	1884b03a 	or	r2,r3,r2
 20176b4:	1007883a 	mov	r3,r2
 20176b8:	008080b4 	movhi	r2,514
 20176bc:	10b81204 	addi	r2,r2,-8120
 20176c0:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 20176c4:	e0bffd17 	ldw	r2,-12(fp)
 20176c8:	10800d03 	ldbu	r2,52(r2)
 20176cc:	11003fcc 	andi	r4,r2,255
 20176d0:	e0bffd17 	ldw	r2,-12(fp)
 20176d4:	10800d03 	ldbu	r2,52(r2)
 20176d8:	10c03fcc 	andi	r3,r2,255
 20176dc:	008080b4 	movhi	r2,514
 20176e0:	10b81244 	addi	r2,r2,-8119
 20176e4:	10c5883a 	add	r2,r2,r3
 20176e8:	10c00003 	ldbu	r3,0(r2)
 20176ec:	e0bffd17 	ldw	r2,-12(fp)
 20176f0:	10800d43 	ldbu	r2,53(r2)
 20176f4:	1884b03a 	or	r2,r3,r2
 20176f8:	1007883a 	mov	r3,r2
 20176fc:	008080b4 	movhi	r2,514
 2017700:	10b81244 	addi	r2,r2,-8119
 2017704:	1105883a 	add	r2,r2,r4
 2017708:	10c00005 	stb	r3,0(r2)
 201770c:	e0bffc17 	ldw	r2,-16(fp)
 2017710:	e0bff715 	stw	r2,-36(fp)
 2017714:	e0bff717 	ldw	r2,-36(fp)
 2017718:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 201771c:	2010f6c0 	call	2010f6c <OS_Sched>
 2017720:	00000406 	br	2017734 <OSTimeDlyResume+0x1f4>
 2017724:	e0bffc17 	ldw	r2,-16(fp)
 2017728:	e0bff615 	stw	r2,-40(fp)
 201772c:	e0bff617 	ldw	r2,-40(fp)
 2017730:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 2017734:	e03fff15 	stw	zero,-4(fp)
 2017738:	e0bfff17 	ldw	r2,-4(fp)
}
 201773c:	e037883a 	mov	sp,fp
 2017740:	dfc00117 	ldw	ra,4(sp)
 2017744:	df000017 	ldw	fp,0(sp)
 2017748:	dec00204 	addi	sp,sp,8
 201774c:	f800283a 	ret

02017750 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 2017750:	defffb04 	addi	sp,sp,-20
 2017754:	df000415 	stw	fp,16(sp)
 2017758:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 201775c:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2017760:	0005303a 	rdctl	r2,status
 2017764:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2017768:	e0fffd17 	ldw	r3,-12(fp)
 201776c:	00bfff84 	movi	r2,-2
 2017770:	1884703a 	and	r2,r3,r2
 2017774:	1001703a 	wrctl	status,r2
  
  return context;
 2017778:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 201777c:	e0bffe15 	stw	r2,-8(fp)
    ticks = OSTime;
 2017780:	008080b4 	movhi	r2,514
 2017784:	10b81604 	addi	r2,r2,-8104
 2017788:	10800017 	ldw	r2,0(r2)
 201778c:	e0bfff15 	stw	r2,-4(fp)
 2017790:	e0bffe17 	ldw	r2,-8(fp)
 2017794:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017798:	e0bffc17 	ldw	r2,-16(fp)
 201779c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 20177a0:	e0bfff17 	ldw	r2,-4(fp)
}
 20177a4:	e037883a 	mov	sp,fp
 20177a8:	df000017 	ldw	fp,0(sp)
 20177ac:	dec00104 	addi	sp,sp,4
 20177b0:	f800283a 	ret

020177b4 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 20177b4:	defffb04 	addi	sp,sp,-20
 20177b8:	df000415 	stw	fp,16(sp)
 20177bc:	df000404 	addi	fp,sp,16
 20177c0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 20177c4:	e03ffe15 	stw	zero,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20177c8:	0005303a 	rdctl	r2,status
 20177cc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20177d0:	e0fffd17 	ldw	r3,-12(fp)
 20177d4:	00bfff84 	movi	r2,-2
 20177d8:	1884703a 	and	r2,r3,r2
 20177dc:	1001703a 	wrctl	status,r2
  
  return context;
 20177e0:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 20177e4:	e0bffe15 	stw	r2,-8(fp)
    OSTime = ticks;
 20177e8:	00c080b4 	movhi	r3,514
 20177ec:	18f81604 	addi	r3,r3,-8104
 20177f0:	e0bfff17 	ldw	r2,-4(fp)
 20177f4:	18800015 	stw	r2,0(r3)
 20177f8:	e0bffe17 	ldw	r2,-8(fp)
 20177fc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2017800:	e0bffc17 	ldw	r2,-16(fp)
 2017804:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 2017808:	e037883a 	mov	sp,fp
 201780c:	df000017 	ldw	fp,0(sp)
 2017810:	dec00104 	addi	sp,sp,4
 2017814:	f800283a 	ret

02017818 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 2017818:	defffd04 	addi	sp,sp,-12
 201781c:	dfc00215 	stw	ra,8(sp)
 2017820:	df000115 	stw	fp,4(sp)
 2017824:	df000104 	addi	fp,sp,4
 2017828:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_0, nios2_0);
 201782c:	20194c40 	call	20194c4 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2017830:	00800044 	movi	r2,1
 2017834:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 2017838:	e037883a 	mov	sp,fp
 201783c:	dfc00117 	ldw	ra,4(sp)
 2017840:	df000017 	ldw	fp,0(sp)
 2017844:	dec00204 	addi	sp,sp,8
 2017848:	f800283a 	ret

0201784c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 201784c:	defffe04 	addi	sp,sp,-8
 2017850:	dfc00115 	stw	ra,4(sp)
 2017854:	df000015 	stw	fp,0(sp)
 2017858:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( SYS_CLK_TIMER, sys_clk_timer);
 201785c:	01010074 	movhi	r4,1025
 2017860:	21241004 	addi	r4,r4,-28608
 2017864:	000b883a 	mov	r5,zero
 2017868:	000d883a 	mov	r6,zero
 201786c:	01c0fa04 	movi	r7,1000
 2017870:	20186ec0 	call	20186ec <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
 2017874:	00c080b4 	movhi	r3,514
 2017878:	18f81a04 	addi	r3,r3,-8088
 201787c:	00810074 	movhi	r2,1025
 2017880:	10a40004 	addi	r2,r2,-28672
 2017884:	18800015 	stw	r2,0(r3)
 2017888:	00c080b4 	movhi	r3,514
 201788c:	18f81b04 	addi	r3,r3,-8084
 2017890:	0080bef4 	movhi	r2,763
 2017894:	10bc2004 	addi	r2,r2,-3968
 2017898:	18800015 	stw	r2,0(r3)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 201789c:	010080b4 	movhi	r4,514
 20178a0:	212cbc04 	addi	r4,r4,-19728
 20178a4:	000b883a 	mov	r5,zero
 20178a8:	01800044 	movi	r6,1
 20178ac:	2017a680 	call	2017a68 <altera_avalon_jtag_uart_init>
 20178b0:	010080b4 	movhi	r4,514
 20178b4:	212cb204 	addi	r4,r4,-19768
 20178b8:	20178e80 	call	20178e8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    ALTERA_UP_AVALON_DE0_NANO_ADC_INIT ( DE0_NANO_ADC_0, de0_nano_adc_0);
 20178bc:	010080b4 	movhi	r4,514
 20178c0:	2130cd04 	addi	r4,r4,-15564
 20178c4:	20178e80 	call	20178e8 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
 20178c8:	010080b4 	movhi	r4,514
 20178cc:	2130d804 	addi	r4,r4,-15520
 20178d0:	20178e80 	call	20178e8 <alt_dev_reg>
}
 20178d4:	e037883a 	mov	sp,fp
 20178d8:	dfc00117 	ldw	ra,4(sp)
 20178dc:	df000017 	ldw	fp,0(sp)
 20178e0:	dec00204 	addi	sp,sp,8
 20178e4:	f800283a 	ret

020178e8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 20178e8:	defffd04 	addi	sp,sp,-12
 20178ec:	dfc00215 	stw	ra,8(sp)
 20178f0:	df000115 	stw	fp,4(sp)
 20178f4:	df000104 	addi	fp,sp,4
 20178f8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 20178fc:	e13fff17 	ldw	r4,-4(fp)
 2017900:	014080b4 	movhi	r5,514
 2017904:	2970eb04 	addi	r5,r5,-15444
 2017908:	2018e040 	call	2018e04 <alt_dev_llist_insert>
}
 201790c:	e037883a 	mov	sp,fp
 2017910:	dfc00117 	ldw	ra,4(sp)
 2017914:	df000017 	ldw	fp,0(sp)
 2017918:	dec00204 	addi	sp,sp,8
 201791c:	f800283a 	ret

02017920 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 2017920:	defffa04 	addi	sp,sp,-24
 2017924:	dfc00515 	stw	ra,20(sp)
 2017928:	df000415 	stw	fp,16(sp)
 201792c:	df000404 	addi	fp,sp,16
 2017930:	e13ffd15 	stw	r4,-12(fp)
 2017934:	e17ffe15 	stw	r5,-8(fp)
 2017938:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 201793c:	e0bffd17 	ldw	r2,-12(fp)
 2017940:	10800017 	ldw	r2,0(r2)
 2017944:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2017948:	e0bffc17 	ldw	r2,-16(fp)
 201794c:	11000a04 	addi	r4,r2,40
 2017950:	e0bffd17 	ldw	r2,-12(fp)
 2017954:	11c00217 	ldw	r7,8(r2)
 2017958:	e17ffe17 	ldw	r5,-8(fp)
 201795c:	e1bfff17 	ldw	r6,-4(fp)
 2017960:	20180dc0 	call	20180dc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2017964:	e037883a 	mov	sp,fp
 2017968:	dfc00117 	ldw	ra,4(sp)
 201796c:	df000017 	ldw	fp,0(sp)
 2017970:	dec00204 	addi	sp,sp,8
 2017974:	f800283a 	ret

02017978 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2017978:	defffa04 	addi	sp,sp,-24
 201797c:	dfc00515 	stw	ra,20(sp)
 2017980:	df000415 	stw	fp,16(sp)
 2017984:	df000404 	addi	fp,sp,16
 2017988:	e13ffd15 	stw	r4,-12(fp)
 201798c:	e17ffe15 	stw	r5,-8(fp)
 2017990:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2017994:	e0bffd17 	ldw	r2,-12(fp)
 2017998:	10800017 	ldw	r2,0(r2)
 201799c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 20179a0:	e0bffc17 	ldw	r2,-16(fp)
 20179a4:	11000a04 	addi	r4,r2,40
 20179a8:	e0bffd17 	ldw	r2,-12(fp)
 20179ac:	11c00217 	ldw	r7,8(r2)
 20179b0:	e17ffe17 	ldw	r5,-8(fp)
 20179b4:	e1bfff17 	ldw	r6,-4(fp)
 20179b8:	201839c0 	call	201839c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 20179bc:	e037883a 	mov	sp,fp
 20179c0:	dfc00117 	ldw	ra,4(sp)
 20179c4:	df000017 	ldw	fp,0(sp)
 20179c8:	dec00204 	addi	sp,sp,8
 20179cc:	f800283a 	ret

020179d0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 20179d0:	defffc04 	addi	sp,sp,-16
 20179d4:	dfc00315 	stw	ra,12(sp)
 20179d8:	df000215 	stw	fp,8(sp)
 20179dc:	df000204 	addi	fp,sp,8
 20179e0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20179e4:	e0bfff17 	ldw	r2,-4(fp)
 20179e8:	10800017 	ldw	r2,0(r2)
 20179ec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 20179f0:	e0bffe17 	ldw	r2,-8(fp)
 20179f4:	11000a04 	addi	r4,r2,40
 20179f8:	e0bfff17 	ldw	r2,-4(fp)
 20179fc:	11400217 	ldw	r5,8(r2)
 2017a00:	2017f740 	call	2017f74 <altera_avalon_jtag_uart_close>
}
 2017a04:	e037883a 	mov	sp,fp
 2017a08:	dfc00117 	ldw	ra,4(sp)
 2017a0c:	df000017 	ldw	fp,0(sp)
 2017a10:	dec00204 	addi	sp,sp,8
 2017a14:	f800283a 	ret

02017a18 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 2017a18:	defffa04 	addi	sp,sp,-24
 2017a1c:	dfc00515 	stw	ra,20(sp)
 2017a20:	df000415 	stw	fp,16(sp)
 2017a24:	df000404 	addi	fp,sp,16
 2017a28:	e13ffd15 	stw	r4,-12(fp)
 2017a2c:	e17ffe15 	stw	r5,-8(fp)
 2017a30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2017a34:	e0bffd17 	ldw	r2,-12(fp)
 2017a38:	10800017 	ldw	r2,0(r2)
 2017a3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2017a40:	e0bffc17 	ldw	r2,-16(fp)
 2017a44:	11000a04 	addi	r4,r2,40
 2017a48:	e17ffe17 	ldw	r5,-8(fp)
 2017a4c:	e1bfff17 	ldw	r6,-4(fp)
 2017a50:	2017fe80 	call	2017fe8 <altera_avalon_jtag_uart_ioctl>
}
 2017a54:	e037883a 	mov	sp,fp
 2017a58:	dfc00117 	ldw	ra,4(sp)
 2017a5c:	df000017 	ldw	fp,0(sp)
 2017a60:	dec00204 	addi	sp,sp,8
 2017a64:	f800283a 	ret

02017a68 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 2017a68:	defff504 	addi	sp,sp,-44
 2017a6c:	dfc00a15 	stw	ra,40(sp)
 2017a70:	df000915 	stw	fp,36(sp)
 2017a74:	df000904 	addi	fp,sp,36
 2017a78:	e13ffd15 	stw	r4,-12(fp)
 2017a7c:	e17ffe15 	stw	r5,-8(fp)
 2017a80:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 2017a84:	e0bffd17 	ldw	r2,-12(fp)
 2017a88:	10800c04 	addi	r2,r2,48
 2017a8c:	e0bffb15 	stw	r2,-20(fp)
 2017a90:	e03ffc0d 	sth	zero,-16(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 2017a94:	e13ffc0b 	ldhu	r4,-16(fp)
 2017a98:	e17ffc84 	addi	r5,fp,-14
 2017a9c:	2011b140 	call	2011b14 <OSFlagCreate>
 2017aa0:	1007883a 	mov	r3,r2
 2017aa4:	e0bffb17 	ldw	r2,-20(fp)
 2017aa8:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 2017aac:	e0bffd17 	ldw	r2,-12(fp)
 2017ab0:	10800a04 	addi	r2,r2,40
 2017ab4:	e0bff915 	stw	r2,-28(fp)
 2017ab8:	00800044 	movi	r2,1
 2017abc:	e0bffa0d 	sth	r2,-24(fp)
 2017ac0:	e13ffa0b 	ldhu	r4,-24(fp)
 2017ac4:	2014d1c0 	call	2014d1c <OSSemCreate>
 2017ac8:	1007883a 	mov	r3,r2
 2017acc:	e0bff917 	ldw	r2,-28(fp)
 2017ad0:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 2017ad4:	e0bffd17 	ldw	r2,-12(fp)
 2017ad8:	10800b04 	addi	r2,r2,44
 2017adc:	e0bff715 	stw	r2,-36(fp)
 2017ae0:	00800044 	movi	r2,1
 2017ae4:	e0bff80d 	sth	r2,-32(fp)
 2017ae8:	e13ff80b 	ldhu	r4,-32(fp)
 2017aec:	2014d1c0 	call	2014d1c <OSSemCreate>
 2017af0:	1007883a 	mov	r3,r2
 2017af4:	e0bff717 	ldw	r2,-36(fp)
 2017af8:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2017afc:	e0fffd17 	ldw	r3,-12(fp)
 2017b00:	00800044 	movi	r2,1
 2017b04:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2017b08:	e0bffd17 	ldw	r2,-12(fp)
 2017b0c:	10800017 	ldw	r2,0(r2)
 2017b10:	11000104 	addi	r4,r2,4
 2017b14:	e0bffd17 	ldw	r2,-12(fp)
 2017b18:	10800817 	ldw	r2,32(r2)
 2017b1c:	1007883a 	mov	r3,r2
 2017b20:	2005883a 	mov	r2,r4
 2017b24:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 2017b28:	e13fff17 	ldw	r4,-4(fp)
 2017b2c:	e17ffd17 	ldw	r5,-12(fp)
 2017b30:	01808074 	movhi	r6,513
 2017b34:	319ee604 	addi	r6,r6,31640
 2017b38:	200e3bc0 	call	200e3bc <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 2017b3c:	e0bffd17 	ldw	r2,-12(fp)
 2017b40:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 2017b44:	e0bffd17 	ldw	r2,-12(fp)
 2017b48:	11000204 	addi	r4,r2,8
 2017b4c:	008080b4 	movhi	r2,514
 2017b50:	10b80004 	addi	r2,r2,-8192
 2017b54:	10800017 	ldw	r2,0(r2)
 2017b58:	100b883a 	mov	r5,r2
 2017b5c:	01808074 	movhi	r6,513
 2017b60:	319f9804 	addi	r6,r6,32352
 2017b64:	e1fffd17 	ldw	r7,-12(fp)
 2017b68:	200df180 	call	200df18 <alt_alarm_start>
 2017b6c:	1004403a 	cmpge	r2,r2,zero
 2017b70:	1000041e 	bne	r2,zero,2017b84 <altera_avalon_jtag_uart_init+0x11c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 2017b74:	e0fffd17 	ldw	r3,-12(fp)
 2017b78:	00a00034 	movhi	r2,32768
 2017b7c:	10bfffc4 	addi	r2,r2,-1
 2017b80:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 2017b84:	e037883a 	mov	sp,fp
 2017b88:	dfc00117 	ldw	ra,4(sp)
 2017b8c:	df000017 	ldw	fp,0(sp)
 2017b90:	dec00204 	addi	sp,sp,8
 2017b94:	f800283a 	ret

02017b98 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 2017b98:	defff104 	addi	sp,sp,-60
 2017b9c:	dfc00e15 	stw	ra,56(sp)
 2017ba0:	df000d15 	stw	fp,52(sp)
 2017ba4:	df000d04 	addi	fp,sp,52
 2017ba8:	e13ffe15 	stw	r4,-8(fp)
 2017bac:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 2017bb0:	e0bffe17 	ldw	r2,-8(fp)
 2017bb4:	e0bffc15 	stw	r2,-16(fp)
  unsigned int base = sp->base;
 2017bb8:	e0bffc17 	ldw	r2,-16(fp)
 2017bbc:	10800017 	ldw	r2,0(r2)
 2017bc0:	e0bffb15 	stw	r2,-20(fp)
 2017bc4:	00000006 	br	2017bc8 <altera_avalon_jtag_uart_irq+0x30>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2017bc8:	e0bffb17 	ldw	r2,-20(fp)
 2017bcc:	10800104 	addi	r2,r2,4
 2017bd0:	10800037 	ldwio	r2,0(r2)
 2017bd4:	e0bffa15 	stw	r2,-24(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2017bd8:	e0bffa17 	ldw	r2,-24(fp)
 2017bdc:	1080c00c 	andi	r2,r2,768
 2017be0:	1005003a 	cmpeq	r2,r2,zero
 2017be4:	1000991e 	bne	r2,zero,2017e4c <altera_avalon_jtag_uart_irq+0x2b4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2017be8:	e0bffa17 	ldw	r2,-24(fp)
 2017bec:	1080400c 	andi	r2,r2,256
 2017bf0:	1005003a 	cmpeq	r2,r2,zero
 2017bf4:	1000481e 	bne	r2,zero,2017d18 <altera_avalon_jtag_uart_irq+0x180>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2017bf8:	00800074 	movhi	r2,1
 2017bfc:	e0bff915 	stw	r2,-28(fp)
 2017c00:	00000006 	br	2017c04 <altera_avalon_jtag_uart_irq+0x6c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2017c04:	e0bffc17 	ldw	r2,-16(fp)
 2017c08:	10800d17 	ldw	r2,52(r2)
 2017c0c:	10800044 	addi	r2,r2,1
 2017c10:	1081ffcc 	andi	r2,r2,2047
 2017c14:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
 2017c18:	e0bffc17 	ldw	r2,-16(fp)
 2017c1c:	10c00e17 	ldw	r3,56(r2)
 2017c20:	e0bff817 	ldw	r2,-32(fp)
 2017c24:	18802826 	beq	r3,r2,2017cc8 <altera_avalon_jtag_uart_irq+0x130>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 2017c28:	e0bffb17 	ldw	r2,-20(fp)
 2017c2c:	10800037 	ldwio	r2,0(r2)
 2017c30:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2017c34:	e0bff917 	ldw	r2,-28(fp)
 2017c38:	10a0000c 	andi	r2,r2,32768
 2017c3c:	1005003a 	cmpeq	r2,r2,zero
 2017c40:	1000211e 	bne	r2,zero,2017cc8 <altera_avalon_jtag_uart_irq+0x130>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 2017c44:	e0bffc17 	ldw	r2,-16(fp)
 2017c48:	10c00d17 	ldw	r3,52(r2)
 2017c4c:	e0bff917 	ldw	r2,-28(fp)
 2017c50:	1009883a 	mov	r4,r2
 2017c54:	e0bffc17 	ldw	r2,-16(fp)
 2017c58:	1885883a 	add	r2,r3,r2
 2017c5c:	10801104 	addi	r2,r2,68
 2017c60:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2017c64:	e0bffc17 	ldw	r2,-16(fp)
 2017c68:	10800d17 	ldw	r2,52(r2)
 2017c6c:	10800044 	addi	r2,r2,1
 2017c70:	10c1ffcc 	andi	r3,r2,2047
 2017c74:	e0bffc17 	ldw	r2,-16(fp)
 2017c78:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 2017c7c:	e0bffc17 	ldw	r2,-16(fp)
 2017c80:	10800c17 	ldw	r2,48(r2)
 2017c84:	e0bff515 	stw	r2,-44(fp)
 2017c88:	00800044 	movi	r2,1
 2017c8c:	e0bff60d 	sth	r2,-40(fp)
 2017c90:	00800044 	movi	r2,1
 2017c94:	e0bff685 	stb	r2,-38(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 2017c98:	008080b4 	movhi	r2,514
 2017c9c:	10b80644 	addi	r2,r2,-8167
 2017ca0:	10800003 	ldbu	r2,0(r2)
 2017ca4:	10803fcc 	andi	r2,r2,255
 2017ca8:	1005003a 	cmpeq	r2,r2,zero
 2017cac:	103fd51e 	bne	r2,zero,2017c04 <altera_avalon_jtag_uart_irq+0x6c>
  {
    OSFlagPost (group, flags, opt, &err);
 2017cb0:	e17ff60b 	ldhu	r5,-40(fp)
 2017cb4:	e1bff683 	ldbu	r6,-38(fp)
 2017cb8:	e1fffd04 	addi	r7,fp,-12
 2017cbc:	e13ff517 	ldw	r4,-44(fp)
 2017cc0:	201283c0 	call	201283c <OSFlagPost>
    return err;
 2017cc4:	003fcf06 	br	2017c04 <altera_avalon_jtag_uart_irq+0x6c>
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 2017cc8:	e0bff917 	ldw	r2,-28(fp)
 2017ccc:	10bfffec 	andhi	r2,r2,65535
 2017cd0:	1005003a 	cmpeq	r2,r2,zero
 2017cd4:	1000101e 	bne	r2,zero,2017d18 <altera_avalon_jtag_uart_irq+0x180>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2017cd8:	e0bffc17 	ldw	r2,-16(fp)
 2017cdc:	10c00817 	ldw	r3,32(r2)
 2017ce0:	00bfff84 	movi	r2,-2
 2017ce4:	1886703a 	and	r3,r3,r2
 2017ce8:	e0bffc17 	ldw	r2,-16(fp)
 2017cec:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2017cf0:	e0bffb17 	ldw	r2,-20(fp)
 2017cf4:	11000104 	addi	r4,r2,4
 2017cf8:	e0bffc17 	ldw	r2,-16(fp)
 2017cfc:	10800817 	ldw	r2,32(r2)
 2017d00:	1007883a 	mov	r3,r2
 2017d04:	2005883a 	mov	r2,r4
 2017d08:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2017d0c:	e0bffb17 	ldw	r2,-20(fp)
 2017d10:	10800104 	addi	r2,r2,4
 2017d14:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2017d18:	e0bffa17 	ldw	r2,-24(fp)
 2017d1c:	1080800c 	andi	r2,r2,512
 2017d20:	1005003a 	cmpeq	r2,r2,zero
 2017d24:	103fa81e 	bne	r2,zero,2017bc8 <altera_avalon_jtag_uart_irq+0x30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2017d28:	e0bffa17 	ldw	r2,-24(fp)
 2017d2c:	10bfffec 	andhi	r2,r2,65535
 2017d30:	1004d43a 	srli	r2,r2,16
 2017d34:	e0bff715 	stw	r2,-36(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2017d38:	00002706 	br	2017dd8 <altera_avalon_jtag_uart_irq+0x240>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2017d3c:	e13ffb17 	ldw	r4,-20(fp)
 2017d40:	e0bffc17 	ldw	r2,-16(fp)
 2017d44:	10c01017 	ldw	r3,64(r2)
 2017d48:	e0bffc17 	ldw	r2,-16(fp)
 2017d4c:	1885883a 	add	r2,r3,r2
 2017d50:	10821104 	addi	r2,r2,2116
 2017d54:	10800003 	ldbu	r2,0(r2)
 2017d58:	10c03fcc 	andi	r3,r2,255
 2017d5c:	18c0201c 	xori	r3,r3,128
 2017d60:	18ffe004 	addi	r3,r3,-128
 2017d64:	2005883a 	mov	r2,r4
 2017d68:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2017d6c:	e0bffc17 	ldw	r2,-16(fp)
 2017d70:	10801017 	ldw	r2,64(r2)
 2017d74:	10800044 	addi	r2,r2,1
 2017d78:	10c1ffcc 	andi	r3,r2,2047
 2017d7c:	e0bffc17 	ldw	r2,-16(fp)
 2017d80:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 2017d84:	e0bffc17 	ldw	r2,-16(fp)
 2017d88:	10800c17 	ldw	r2,48(r2)
 2017d8c:	e0bff315 	stw	r2,-52(fp)
 2017d90:	00800084 	movi	r2,2
 2017d94:	e0bff40d 	sth	r2,-48(fp)
 2017d98:	00800044 	movi	r2,1
 2017d9c:	e0bff485 	stb	r2,-46(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 2017da0:	008080b4 	movhi	r2,514
 2017da4:	10b80644 	addi	r2,r2,-8167
 2017da8:	10800003 	ldbu	r2,0(r2)
 2017dac:	10803fcc 	andi	r2,r2,255
 2017db0:	1005003a 	cmpeq	r2,r2,zero
 2017db4:	1000051e 	bne	r2,zero,2017dcc <altera_avalon_jtag_uart_irq+0x234>
  {
    OSFlagPost (group, flags, opt, &err);
 2017db8:	e17ff40b 	ldhu	r5,-48(fp)
 2017dbc:	e1bff483 	ldbu	r6,-46(fp)
 2017dc0:	e1fffd44 	addi	r7,fp,-11
 2017dc4:	e13ff317 	ldw	r4,-52(fp)
 2017dc8:	201283c0 	call	201283c <OSFlagPost>

        space--;
 2017dcc:	e0bff717 	ldw	r2,-36(fp)
 2017dd0:	10bfffc4 	addi	r2,r2,-1
 2017dd4:	e0bff715 	stw	r2,-36(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2017dd8:	e0bff717 	ldw	r2,-36(fp)
 2017ddc:	1005003a 	cmpeq	r2,r2,zero
 2017de0:	1000051e 	bne	r2,zero,2017df8 <altera_avalon_jtag_uart_irq+0x260>
 2017de4:	e0bffc17 	ldw	r2,-16(fp)
 2017de8:	10c01017 	ldw	r3,64(r2)
 2017dec:	e0bffc17 	ldw	r2,-16(fp)
 2017df0:	10800f17 	ldw	r2,60(r2)
 2017df4:	18bfd11e 	bne	r3,r2,2017d3c <altera_avalon_jtag_uart_irq+0x1a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2017df8:	e0bff717 	ldw	r2,-36(fp)
 2017dfc:	1005003a 	cmpeq	r2,r2,zero
 2017e00:	103f711e 	bne	r2,zero,2017bc8 <altera_avalon_jtag_uart_irq+0x30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2017e04:	e0bffc17 	ldw	r2,-16(fp)
 2017e08:	10c00817 	ldw	r3,32(r2)
 2017e0c:	00bfff44 	movi	r2,-3
 2017e10:	1886703a 	and	r3,r3,r2
 2017e14:	e0bffc17 	ldw	r2,-16(fp)
 2017e18:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2017e1c:	e0bffc17 	ldw	r2,-16(fp)
 2017e20:	10800017 	ldw	r2,0(r2)
 2017e24:	11000104 	addi	r4,r2,4
 2017e28:	e0bffc17 	ldw	r2,-16(fp)
 2017e2c:	10800817 	ldw	r2,32(r2)
 2017e30:	1007883a 	mov	r3,r2
 2017e34:	2005883a 	mov	r2,r4
 2017e38:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2017e3c:	e0bffb17 	ldw	r2,-20(fp)
 2017e40:	10800104 	addi	r2,r2,4
 2017e44:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2017e48:	003f5f06 	br	2017bc8 <altera_avalon_jtag_uart_irq+0x30>
}
 2017e4c:	e037883a 	mov	sp,fp
 2017e50:	dfc00117 	ldw	ra,4(sp)
 2017e54:	df000017 	ldw	fp,0(sp)
 2017e58:	dec00204 	addi	sp,sp,8
 2017e5c:	f800283a 	ret

02017e60 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2017e60:	defff804 	addi	sp,sp,-32
 2017e64:	dfc00715 	stw	ra,28(sp)
 2017e68:	df000615 	stw	fp,24(sp)
 2017e6c:	df000604 	addi	fp,sp,24
 2017e70:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2017e74:	e0bfff17 	ldw	r2,-4(fp)
 2017e78:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2017e7c:	e0bffd17 	ldw	r2,-12(fp)
 2017e80:	10800017 	ldw	r2,0(r2)
 2017e84:	10800104 	addi	r2,r2,4
 2017e88:	10800037 	ldwio	r2,0(r2)
 2017e8c:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2017e90:	e0bffc17 	ldw	r2,-16(fp)
 2017e94:	1081000c 	andi	r2,r2,1024
 2017e98:	1005003a 	cmpeq	r2,r2,zero
 2017e9c:	10000c1e 	bne	r2,zero,2017ed0 <altera_avalon_jtag_uart_timeout+0x70>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2017ea0:	e0bffd17 	ldw	r2,-12(fp)
 2017ea4:	10800017 	ldw	r2,0(r2)
 2017ea8:	11000104 	addi	r4,r2,4
 2017eac:	e0bffd17 	ldw	r2,-12(fp)
 2017eb0:	10800817 	ldw	r2,32(r2)
 2017eb4:	10810014 	ori	r2,r2,1024
 2017eb8:	1007883a 	mov	r3,r2
 2017ebc:	2005883a 	mov	r2,r4
 2017ec0:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 2017ec4:	e0bffd17 	ldw	r2,-12(fp)
 2017ec8:	10000915 	stw	zero,36(r2)
 2017ecc:	00002106 	br	2017f54 <altera_avalon_jtag_uart_timeout+0xf4>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2017ed0:	e0bffd17 	ldw	r2,-12(fp)
 2017ed4:	10c00917 	ldw	r3,36(r2)
 2017ed8:	00a00034 	movhi	r2,32768
 2017edc:	10bfff04 	addi	r2,r2,-4
 2017ee0:	10c01c36 	bltu	r2,r3,2017f54 <altera_avalon_jtag_uart_timeout+0xf4>
    sp->host_inactive++;
 2017ee4:	e0bffd17 	ldw	r2,-12(fp)
 2017ee8:	10800917 	ldw	r2,36(r2)
 2017eec:	10c00044 	addi	r3,r2,1
 2017ef0:	e0bffd17 	ldw	r2,-12(fp)
 2017ef4:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 2017ef8:	e0bffd17 	ldw	r2,-12(fp)
 2017efc:	10c00917 	ldw	r3,36(r2)
 2017f00:	e0bffd17 	ldw	r2,-12(fp)
 2017f04:	10800117 	ldw	r2,4(r2)
 2017f08:	18801236 	bltu	r3,r2,2017f54 <altera_avalon_jtag_uart_timeout+0xf4>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 2017f0c:	e0bffd17 	ldw	r2,-12(fp)
 2017f10:	10800c17 	ldw	r2,48(r2)
 2017f14:	e0bffa15 	stw	r2,-24(fp)
 2017f18:	00800104 	movi	r2,4
 2017f1c:	e0bffb0d 	sth	r2,-20(fp)
 2017f20:	00800044 	movi	r2,1
 2017f24:	e0bffb85 	stb	r2,-18(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 2017f28:	008080b4 	movhi	r2,514
 2017f2c:	10b80644 	addi	r2,r2,-8167
 2017f30:	10800003 	ldbu	r2,0(r2)
 2017f34:	10803fcc 	andi	r2,r2,255
 2017f38:	1005003a 	cmpeq	r2,r2,zero
 2017f3c:	1000051e 	bne	r2,zero,2017f54 <altera_avalon_jtag_uart_timeout+0xf4>
  {
    OSFlagPost (group, flags, opt, &err);
 2017f40:	e17ffb0b 	ldhu	r5,-20(fp)
 2017f44:	e1bffb83 	ldbu	r6,-18(fp)
 2017f48:	e1fffe04 	addi	r7,fp,-8
 2017f4c:	e13ffa17 	ldw	r4,-24(fp)
 2017f50:	201283c0 	call	201283c <OSFlagPost>
 2017f54:	008080b4 	movhi	r2,514
 2017f58:	10b80004 	addi	r2,r2,-8192
 2017f5c:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 2017f60:	e037883a 	mov	sp,fp
 2017f64:	dfc00117 	ldw	ra,4(sp)
 2017f68:	df000017 	ldw	fp,0(sp)
 2017f6c:	dec00204 	addi	sp,sp,8
 2017f70:	f800283a 	ret

02017f74 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2017f74:	defffc04 	addi	sp,sp,-16
 2017f78:	df000315 	stw	fp,12(sp)
 2017f7c:	df000304 	addi	fp,sp,12
 2017f80:	e13ffd15 	stw	r4,-12(fp)
 2017f84:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2017f88:	00000706 	br	2017fa8 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 2017f8c:	e0bffe17 	ldw	r2,-8(fp)
 2017f90:	1090000c 	andi	r2,r2,16384
 2017f94:	1005003a 	cmpeq	r2,r2,zero
 2017f98:	1000031e 	bne	r2,zero,2017fa8 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 2017f9c:	00bffd44 	movi	r2,-11
 2017fa0:	e0bfff15 	stw	r2,-4(fp)
 2017fa4:	00000b06 	br	2017fd4 <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2017fa8:	e0bffd17 	ldw	r2,-12(fp)
 2017fac:	10c01017 	ldw	r3,64(r2)
 2017fb0:	e0bffd17 	ldw	r2,-12(fp)
 2017fb4:	10800f17 	ldw	r2,60(r2)
 2017fb8:	18800526 	beq	r3,r2,2017fd0 <altera_avalon_jtag_uart_close+0x5c>
 2017fbc:	e0bffd17 	ldw	r2,-12(fp)
 2017fc0:	10c00917 	ldw	r3,36(r2)
 2017fc4:	e0bffd17 	ldw	r2,-12(fp)
 2017fc8:	10800117 	ldw	r2,4(r2)
 2017fcc:	18bfef36 	bltu	r3,r2,2017f8c <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2017fd0:	e03fff15 	stw	zero,-4(fp)
 2017fd4:	e0bfff17 	ldw	r2,-4(fp)
}
 2017fd8:	e037883a 	mov	sp,fp
 2017fdc:	df000017 	ldw	fp,0(sp)
 2017fe0:	dec00104 	addi	sp,sp,4
 2017fe4:	f800283a 	ret

02017fe8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2017fe8:	defff804 	addi	sp,sp,-32
 2017fec:	df000715 	stw	fp,28(sp)
 2017ff0:	df000704 	addi	fp,sp,28
 2017ff4:	e13ffb15 	stw	r4,-20(fp)
 2017ff8:	e17ffc15 	stw	r5,-16(fp)
 2017ffc:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 2018000:	00bff9c4 	movi	r2,-25
 2018004:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 2018008:	e0bffc17 	ldw	r2,-16(fp)
 201800c:	e0bfff15 	stw	r2,-4(fp)
 2018010:	e0ffff17 	ldw	r3,-4(fp)
 2018014:	189a8060 	cmpeqi	r2,r3,27137
 2018018:	1000041e 	bne	r2,zero,201802c <altera_avalon_jtag_uart_ioctl+0x44>
 201801c:	e0ffff17 	ldw	r3,-4(fp)
 2018020:	189a80a0 	cmpeqi	r2,r3,27138
 2018024:	10001b1e 	bne	r2,zero,2018094 <altera_avalon_jtag_uart_ioctl+0xac>
 2018028:	00002706 	br	20180c8 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 201802c:	e0bffb17 	ldw	r2,-20(fp)
 2018030:	10c00117 	ldw	r3,4(r2)
 2018034:	00a00034 	movhi	r2,32768
 2018038:	10bfffc4 	addi	r2,r2,-1
 201803c:	18802226 	beq	r3,r2,20180c8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 2018040:	e0bffd17 	ldw	r2,-12(fp)
 2018044:	10800017 	ldw	r2,0(r2)
 2018048:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 201804c:	e0bff917 	ldw	r2,-28(fp)
 2018050:	10800090 	cmplti	r2,r2,2
 2018054:	1000071e 	bne	r2,zero,2018074 <altera_avalon_jtag_uart_ioctl+0x8c>
 2018058:	e0fff917 	ldw	r3,-28(fp)
 201805c:	00a00034 	movhi	r2,32768
 2018060:	10bfffc4 	addi	r2,r2,-1
 2018064:	18800326 	beq	r3,r2,2018074 <altera_avalon_jtag_uart_ioctl+0x8c>
 2018068:	e0bff917 	ldw	r2,-28(fp)
 201806c:	e0bffe15 	stw	r2,-8(fp)
 2018070:	00000306 	br	2018080 <altera_avalon_jtag_uart_ioctl+0x98>
 2018074:	00e00034 	movhi	r3,32768
 2018078:	18ffff84 	addi	r3,r3,-2
 201807c:	e0fffe15 	stw	r3,-8(fp)
 2018080:	e0bffb17 	ldw	r2,-20(fp)
 2018084:	e0fffe17 	ldw	r3,-8(fp)
 2018088:	10c00115 	stw	r3,4(r2)
      rc = 0;
 201808c:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 2018090:	00000d06 	br	20180c8 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2018094:	e0bffb17 	ldw	r2,-20(fp)
 2018098:	10c00117 	ldw	r3,4(r2)
 201809c:	00a00034 	movhi	r2,32768
 20180a0:	10bfffc4 	addi	r2,r2,-1
 20180a4:	18800826 	beq	r3,r2,20180c8 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 20180a8:	e13ffd17 	ldw	r4,-12(fp)
 20180ac:	e0bffb17 	ldw	r2,-20(fp)
 20180b0:	10c00917 	ldw	r3,36(r2)
 20180b4:	e0bffb17 	ldw	r2,-20(fp)
 20180b8:	10800117 	ldw	r2,4(r2)
 20180bc:	1885803a 	cmpltu	r2,r3,r2
 20180c0:	20800015 	stw	r2,0(r4)
      rc = 0;
 20180c4:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 20180c8:	e0bffa17 	ldw	r2,-24(fp)
}
 20180cc:	e037883a 	mov	sp,fp
 20180d0:	df000017 	ldw	fp,0(sp)
 20180d4:	dec00104 	addi	sp,sp,4
 20180d8:	f800283a 	ret

020180dc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 20180dc:	deffeb04 	addi	sp,sp,-84
 20180e0:	dfc01415 	stw	ra,80(sp)
 20180e4:	df001315 	stw	fp,76(sp)
 20180e8:	df001304 	addi	fp,sp,76
 20180ec:	e13ffb15 	stw	r4,-20(fp)
 20180f0:	e17ffc15 	stw	r5,-16(fp)
 20180f4:	e1bffd15 	stw	r6,-12(fp)
 20180f8:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 20180fc:	e0bffc17 	ldw	r2,-16(fp)
 2018100:	e0bff915 	stw	r2,-28(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 2018104:	e0bffb17 	ldw	r2,-20(fp)
 2018108:	10800a17 	ldw	r2,40(r2)
 201810c:	e0bff315 	stw	r2,-52(fp)
 2018110:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 2018114:	e17ff40b 	ldhu	r5,-48(fp)
 2018118:	e1bffa44 	addi	r6,fp,-23
 201811c:	e13ff317 	ldw	r4,-52(fp)
 2018120:	20150d00 	call	20150d0 <OSSemPend>

  while (space > 0)
 2018124:	00006406 	br	20182b8 <altera_avalon_jtag_uart_read+0x1dc>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2018128:	e0bffb17 	ldw	r2,-20(fp)
 201812c:	10800d17 	ldw	r2,52(r2)
 2018130:	e0bff615 	stw	r2,-40(fp)
      out = sp->rx_out;
 2018134:	e0bffb17 	ldw	r2,-20(fp)
 2018138:	10800e17 	ldw	r2,56(r2)
 201813c:	e0bff515 	stw	r2,-44(fp)

      if (in >= out)
 2018140:	e0fff617 	ldw	r3,-40(fp)
 2018144:	e0bff517 	ldw	r2,-44(fp)
 2018148:	18800536 	bltu	r3,r2,2018160 <altera_avalon_jtag_uart_read+0x84>
        n = in - out;
 201814c:	e0bff617 	ldw	r2,-40(fp)
 2018150:	e0fff517 	ldw	r3,-44(fp)
 2018154:	10c5c83a 	sub	r2,r2,r3
 2018158:	e0bff715 	stw	r2,-36(fp)
 201815c:	00000406 	br	2018170 <altera_avalon_jtag_uart_read+0x94>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2018160:	00820004 	movi	r2,2048
 2018164:	e0fff517 	ldw	r3,-44(fp)
 2018168:	10c5c83a 	sub	r2,r2,r3
 201816c:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 2018170:	e0bff717 	ldw	r2,-36(fp)
 2018174:	1005003a 	cmpeq	r2,r2,zero
 2018178:	10001f1e 	bne	r2,zero,20181f8 <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 201817c:	e0fffd17 	ldw	r3,-12(fp)
 2018180:	e0bff717 	ldw	r2,-36(fp)
 2018184:	1880022e 	bgeu	r3,r2,2018190 <altera_avalon_jtag_uart_read+0xb4>
        n = space;
 2018188:	e0bffd17 	ldw	r2,-12(fp)
 201818c:	e0bff715 	stw	r2,-36(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2018190:	e0bffb17 	ldw	r2,-20(fp)
 2018194:	10c01104 	addi	r3,r2,68
 2018198:	e0bff517 	ldw	r2,-44(fp)
 201819c:	1887883a 	add	r3,r3,r2
 20181a0:	e0bff917 	ldw	r2,-28(fp)
 20181a4:	1009883a 	mov	r4,r2
 20181a8:	180b883a 	mov	r5,r3
 20181ac:	e1bff717 	ldw	r6,-36(fp)
 20181b0:	20040440 	call	2004044 <memcpy>
      ptr   += n;
 20181b4:	e0fff717 	ldw	r3,-36(fp)
 20181b8:	e0bff917 	ldw	r2,-28(fp)
 20181bc:	10c5883a 	add	r2,r2,r3
 20181c0:	e0bff915 	stw	r2,-28(fp)
      space -= n;
 20181c4:	e0fffd17 	ldw	r3,-12(fp)
 20181c8:	e0bff717 	ldw	r2,-36(fp)
 20181cc:	1885c83a 	sub	r2,r3,r2
 20181d0:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20181d4:	e0fff517 	ldw	r3,-44(fp)
 20181d8:	e0bff717 	ldw	r2,-36(fp)
 20181dc:	1885883a 	add	r2,r3,r2
 20181e0:	10c1ffcc 	andi	r3,r2,2047
 20181e4:	e0bffb17 	ldw	r2,-20(fp)
 20181e8:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 20181ec:	e0bffd17 	ldw	r2,-12(fp)
 20181f0:	10800048 	cmpgei	r2,r2,1
 20181f4:	103fcc1e 	bne	r2,zero,2018128 <altera_avalon_jtag_uart_read+0x4c>

    /* If we read any data then return it */
    if (ptr != buffer)
 20181f8:	e0fff917 	ldw	r3,-28(fp)
 20181fc:	e0bffc17 	ldw	r2,-16(fp)
 2018200:	1880301e 	bne	r3,r2,20182c4 <altera_avalon_jtag_uart_read+0x1e8>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2018204:	e0bffe17 	ldw	r2,-8(fp)
 2018208:	1090000c 	andi	r2,r2,16384
 201820c:	1004c03a 	cmpne	r2,r2,zero
 2018210:	10002c1e 	bne	r2,zero,20182c4 <altera_avalon_jtag_uart_read+0x1e8>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 2018214:	008080b4 	movhi	r2,514
 2018218:	10b80644 	addi	r2,r2,-8167
 201821c:	10800003 	ldbu	r2,0(r2)
 2018220:	10803fcc 	andi	r2,r2,255
 2018224:	10800058 	cmpnei	r2,r2,1
 2018228:	1000161e 	bne	r2,zero,2018284 <altera_avalon_jtag_uart_read+0x1a8>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 201822c:	e0bffb17 	ldw	r2,-20(fp)
 2018230:	10800c17 	ldw	r2,48(r2)
 2018234:	e0bff015 	stw	r2,-64(fp)
 2018238:	00800144 	movi	r2,5
 201823c:	e0bff10d 	sth	r2,-60(fp)
 2018240:	00bfe0c4 	movi	r2,-125
 2018244:	e0bff185 	stb	r2,-58(fp)
 2018248:	e03ff20d 	sth	zero,-56(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 201824c:	008080b4 	movhi	r2,514
 2018250:	10b80644 	addi	r2,r2,-8167
 2018254:	10800003 	ldbu	r2,0(r2)
 2018258:	10803fcc 	andi	r2,r2,255
 201825c:	1005003a 	cmpeq	r2,r2,zero
 2018260:	1000111e 	bne	r2,zero,20182a8 <altera_avalon_jtag_uart_read+0x1cc>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 2018264:	e17ff10b 	ldhu	r5,-60(fp)
 2018268:	e1bff183 	ldbu	r6,-58(fp)
 201826c:	e1fff20b 	ldhu	r7,-56(fp)
 2018270:	e0bffa04 	addi	r2,fp,-24
 2018274:	d8800015 	stw	r2,0(sp)
 2018278:	e13ff017 	ldw	r4,-64(fp)
 201827c:	20121900 	call	2012190 <OSFlagPend>
    return err;
 2018280:	00000906 	br	20182a8 <altera_avalon_jtag_uart_read+0x1cc>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2018284:	e0bffb17 	ldw	r2,-20(fp)
 2018288:	10c00d17 	ldw	r3,52(r2)
 201828c:	e0bff617 	ldw	r2,-40(fp)
 2018290:	1880051e 	bne	r3,r2,20182a8 <altera_avalon_jtag_uart_read+0x1cc>
 2018294:	e0bffb17 	ldw	r2,-20(fp)
 2018298:	10c00917 	ldw	r3,36(r2)
 201829c:	e0bffb17 	ldw	r2,-20(fp)
 20182a0:	10800117 	ldw	r2,4(r2)
 20182a4:	18bff736 	bltu	r3,r2,2018284 <altera_avalon_jtag_uart_read+0x1a8>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 20182a8:	e0bffb17 	ldw	r2,-20(fp)
 20182ac:	10c00d17 	ldw	r3,52(r2)
 20182b0:	e0bff617 	ldw	r2,-40(fp)
 20182b4:	18800326 	beq	r3,r2,20182c4 <altera_avalon_jtag_uart_read+0x1e8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 20182b8:	e0bffd17 	ldw	r2,-12(fp)
 20182bc:	10800048 	cmpgei	r2,r2,1
 20182c0:	103f991e 	bne	r2,zero,2018128 <altera_avalon_jtag_uart_read+0x4c>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 20182c4:	e0bffb17 	ldw	r2,-20(fp)
 20182c8:	11000a17 	ldw	r4,40(r2)
 20182cc:	20154c80 	call	20154c8 <OSSemPost>

  if (ptr != buffer)
 20182d0:	e0fff917 	ldw	r3,-28(fp)
 20182d4:	e0bffc17 	ldw	r2,-16(fp)
 20182d8:	18801926 	beq	r3,r2,2018340 <altera_avalon_jtag_uart_read+0x264>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20182dc:	0005303a 	rdctl	r2,status
 20182e0:	e0bfef15 	stw	r2,-68(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20182e4:	e0ffef17 	ldw	r3,-68(fp)
 20182e8:	00bfff84 	movi	r2,-2
 20182ec:	1884703a 	and	r2,r3,r2
 20182f0:	1001703a 	wrctl	status,r2
  
  return context;
 20182f4:	e0bfef17 	ldw	r2,-68(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 20182f8:	e0bff815 	stw	r2,-32(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20182fc:	e0bffb17 	ldw	r2,-20(fp)
 2018300:	10800817 	ldw	r2,32(r2)
 2018304:	10c00054 	ori	r3,r2,1
 2018308:	e0bffb17 	ldw	r2,-20(fp)
 201830c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2018310:	e0bffb17 	ldw	r2,-20(fp)
 2018314:	10800017 	ldw	r2,0(r2)
 2018318:	11000104 	addi	r4,r2,4
 201831c:	e0bffb17 	ldw	r2,-20(fp)
 2018320:	10800817 	ldw	r2,32(r2)
 2018324:	1007883a 	mov	r3,r2
 2018328:	2005883a 	mov	r2,r4
 201832c:	10c00035 	stwio	r3,0(r2)
 2018330:	e0bff817 	ldw	r2,-32(fp)
 2018334:	e0bfee15 	stw	r2,-72(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2018338:	e0bfee17 	ldw	r2,-72(fp)
 201833c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2018340:	e0fff917 	ldw	r3,-28(fp)
 2018344:	e0bffc17 	ldw	r2,-16(fp)
 2018348:	18800526 	beq	r3,r2,2018360 <altera_avalon_jtag_uart_read+0x284>
    return ptr - buffer;
 201834c:	e0fff917 	ldw	r3,-28(fp)
 2018350:	e0bffc17 	ldw	r2,-16(fp)
 2018354:	1887c83a 	sub	r3,r3,r2
 2018358:	e0ffff15 	stw	r3,-4(fp)
 201835c:	00000906 	br	2018384 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 2018360:	e0bffe17 	ldw	r2,-8(fp)
 2018364:	1090000c 	andi	r2,r2,16384
 2018368:	1005003a 	cmpeq	r2,r2,zero
 201836c:	1000031e 	bne	r2,zero,201837c <altera_avalon_jtag_uart_read+0x2a0>
    return -EWOULDBLOCK;
 2018370:	00bffd44 	movi	r2,-11
 2018374:	e0bfff15 	stw	r2,-4(fp)
 2018378:	00000206 	br	2018384 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 201837c:	00bffec4 	movi	r2,-5
 2018380:	e0bfff15 	stw	r2,-4(fp)
 2018384:	e0bfff17 	ldw	r2,-4(fp)
}
 2018388:	e037883a 	mov	sp,fp
 201838c:	dfc00117 	ldw	ra,4(sp)
 2018390:	df000017 	ldw	fp,0(sp)
 2018394:	dec00204 	addi	sp,sp,8
 2018398:	f800283a 	ret

0201839c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 201839c:	deffeb04 	addi	sp,sp,-84
 20183a0:	dfc01415 	stw	ra,80(sp)
 20183a4:	df001315 	stw	fp,76(sp)
 20183a8:	df001304 	addi	fp,sp,76
 20183ac:	e13ffb15 	stw	r4,-20(fp)
 20183b0:	e17ffc15 	stw	r5,-16(fp)
 20183b4:	e1bffd15 	stw	r6,-12(fp)
 20183b8:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 20183bc:	e03ff815 	stw	zero,-32(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 20183c0:	e0bffc17 	ldw	r2,-16(fp)
 20183c4:	e0bff515 	stw	r2,-44(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 20183c8:	e0bffb17 	ldw	r2,-20(fp)
 20183cc:	10800b17 	ldw	r2,44(r2)
 20183d0:	e0bff315 	stw	r2,-52(fp)
 20183d4:	e03ff40d 	sth	zero,-48(fp)
 20183d8:	e17ff40b 	ldhu	r5,-48(fp)
 20183dc:	e1bffa04 	addi	r6,fp,-24
 20183e0:	e13ff317 	ldw	r4,-52(fp)
 20183e4:	20150d00 	call	20150d0 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20183e8:	00003a06 	br	20184d4 <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 20183ec:	e0bffb17 	ldw	r2,-20(fp)
 20183f0:	10800f17 	ldw	r2,60(r2)
 20183f4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 20183f8:	e0bffb17 	ldw	r2,-20(fp)
 20183fc:	10801017 	ldw	r2,64(r2)
 2018400:	e0bff815 	stw	r2,-32(fp)

      if (in < out)
 2018404:	e0fff917 	ldw	r3,-28(fp)
 2018408:	e0bff817 	ldw	r2,-32(fp)
 201840c:	1880062e 	bgeu	r3,r2,2018428 <altera_avalon_jtag_uart_write+0x8c>
        n = out - 1 - in;
 2018410:	e0fff817 	ldw	r3,-32(fp)
 2018414:	e0bff917 	ldw	r2,-28(fp)
 2018418:	1885c83a 	sub	r2,r3,r2
 201841c:	10bfffc4 	addi	r2,r2,-1
 2018420:	e0bff715 	stw	r2,-36(fp)
 2018424:	00000c06 	br	2018458 <altera_avalon_jtag_uart_write+0xbc>
      else if (out > 0)
 2018428:	e0bff817 	ldw	r2,-32(fp)
 201842c:	1005003a 	cmpeq	r2,r2,zero
 2018430:	1000051e 	bne	r2,zero,2018448 <altera_avalon_jtag_uart_write+0xac>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2018434:	00820004 	movi	r2,2048
 2018438:	e0fff917 	ldw	r3,-28(fp)
 201843c:	10c5c83a 	sub	r2,r2,r3
 2018440:	e0bff715 	stw	r2,-36(fp)
 2018444:	00000406 	br	2018458 <altera_avalon_jtag_uart_write+0xbc>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2018448:	0081ffc4 	movi	r2,2047
 201844c:	e0fff917 	ldw	r3,-28(fp)
 2018450:	10c5c83a 	sub	r2,r2,r3
 2018454:	e0bff715 	stw	r2,-36(fp)

      if (n == 0)
 2018458:	e0bff717 	ldw	r2,-36(fp)
 201845c:	1005003a 	cmpeq	r2,r2,zero
 2018460:	10001f1e 	bne	r2,zero,20184e0 <altera_avalon_jtag_uart_write+0x144>
        break;

      if (n > count)
 2018464:	e0fffd17 	ldw	r3,-12(fp)
 2018468:	e0bff717 	ldw	r2,-36(fp)
 201846c:	1880022e 	bgeu	r3,r2,2018478 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 2018470:	e0bffd17 	ldw	r2,-12(fp)
 2018474:	e0bff715 	stw	r2,-36(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2018478:	e0bffb17 	ldw	r2,-20(fp)
 201847c:	10c21104 	addi	r3,r2,2116
 2018480:	e0bff917 	ldw	r2,-28(fp)
 2018484:	1885883a 	add	r2,r3,r2
 2018488:	e0fffc17 	ldw	r3,-16(fp)
 201848c:	1009883a 	mov	r4,r2
 2018490:	180b883a 	mov	r5,r3
 2018494:	e1bff717 	ldw	r6,-36(fp)
 2018498:	20040440 	call	2004044 <memcpy>
      ptr   += n;
 201849c:	e0fff717 	ldw	r3,-36(fp)
 20184a0:	e0bffc17 	ldw	r2,-16(fp)
 20184a4:	10c5883a 	add	r2,r2,r3
 20184a8:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 20184ac:	e0fffd17 	ldw	r3,-12(fp)
 20184b0:	e0bff717 	ldw	r2,-36(fp)
 20184b4:	1885c83a 	sub	r2,r3,r2
 20184b8:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20184bc:	e0fff917 	ldw	r3,-28(fp)
 20184c0:	e0bff717 	ldw	r2,-36(fp)
 20184c4:	1885883a 	add	r2,r3,r2
 20184c8:	10c1ffcc 	andi	r3,r2,2047
 20184cc:	e0bffb17 	ldw	r2,-20(fp)
 20184d0:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 20184d4:	e0bffd17 	ldw	r2,-12(fp)
 20184d8:	10800048 	cmpgei	r2,r2,1
 20184dc:	103fc31e 	bne	r2,zero,20183ec <altera_avalon_jtag_uart_write+0x50>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20184e0:	0005303a 	rdctl	r2,status
 20184e4:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20184e8:	e0fff217 	ldw	r3,-56(fp)
 20184ec:	00bfff84 	movi	r2,-2
 20184f0:	1884703a 	and	r2,r3,r2
 20184f4:	1001703a 	wrctl	status,r2
  
  return context;
 20184f8:	e0bff217 	ldw	r2,-56(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 20184fc:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2018500:	e0bffb17 	ldw	r2,-20(fp)
 2018504:	10800817 	ldw	r2,32(r2)
 2018508:	10c00094 	ori	r3,r2,2
 201850c:	e0bffb17 	ldw	r2,-20(fp)
 2018510:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2018514:	e0bffb17 	ldw	r2,-20(fp)
 2018518:	10800017 	ldw	r2,0(r2)
 201851c:	11000104 	addi	r4,r2,4
 2018520:	e0bffb17 	ldw	r2,-20(fp)
 2018524:	10800817 	ldw	r2,32(r2)
 2018528:	1007883a 	mov	r3,r2
 201852c:	2005883a 	mov	r2,r4
 2018530:	10c00035 	stwio	r3,0(r2)
 2018534:	e0bff617 	ldw	r2,-40(fp)
 2018538:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 201853c:	e0bff117 	ldw	r2,-60(fp)
 2018540:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 2018544:	e0bffd17 	ldw	r2,-12(fp)
 2018548:	10800050 	cmplti	r2,r2,1
 201854c:	10002d1e 	bne	r2,zero,2018604 <altera_avalon_jtag_uart_write+0x268>
    {
      if (flags & O_NONBLOCK)
 2018550:	e0bffe17 	ldw	r2,-8(fp)
 2018554:	1090000c 	andi	r2,r2,16384
 2018558:	1004c03a 	cmpne	r2,r2,zero
 201855c:	10002c1e 	bne	r2,zero,2018610 <altera_avalon_jtag_uart_write+0x274>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 2018560:	008080b4 	movhi	r2,514
 2018564:	10b80644 	addi	r2,r2,-8167
 2018568:	10800003 	ldbu	r2,0(r2)
 201856c:	10803fcc 	andi	r2,r2,255
 2018570:	10800058 	cmpnei	r2,r2,1
 2018574:	1000161e 	bne	r2,zero,20185d0 <altera_avalon_jtag_uart_write+0x234>
         * When running in a multi-threaded mode, we pend on the write event
         * flag set or the timeout flag in the isr. This avoids wasting CPU
         * cycles waiting in this thread, when we could be doing something
         * more profitable elsewhere.
         */
        ALT_FLAG_PEND (sp->events,
 2018578:	e0bffb17 	ldw	r2,-20(fp)
 201857c:	10800c17 	ldw	r2,48(r2)
 2018580:	e0bfee15 	stw	r2,-72(fp)
 2018584:	00800184 	movi	r2,6
 2018588:	e0bfef0d 	sth	r2,-68(fp)
 201858c:	00bfe0c4 	movi	r2,-125
 2018590:	e0bfef85 	stb	r2,-66(fp)
 2018594:	e03ff00d 	sth	zero,-64(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 2018598:	008080b4 	movhi	r2,514
 201859c:	10b80644 	addi	r2,r2,-8167
 20185a0:	10800003 	ldbu	r2,0(r2)
 20185a4:	10803fcc 	andi	r2,r2,255
 20185a8:	1005003a 	cmpeq	r2,r2,zero
 20185ac:	1000111e 	bne	r2,zero,20185f4 <altera_avalon_jtag_uart_write+0x258>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 20185b0:	e17fef0b 	ldhu	r5,-68(fp)
 20185b4:	e1bfef83 	ldbu	r6,-66(fp)
 20185b8:	e1fff00b 	ldhu	r7,-64(fp)
 20185bc:	e0bffa44 	addi	r2,fp,-23
 20185c0:	d8800015 	stw	r2,0(sp)
 20185c4:	e13fee17 	ldw	r4,-72(fp)
 20185c8:	20121900 	call	2012190 <OSFlagPend>
    return err;
 20185cc:	00000906 	br	20185f4 <altera_avalon_jtag_uart_write+0x258>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 20185d0:	e0bffb17 	ldw	r2,-20(fp)
 20185d4:	10c01017 	ldw	r3,64(r2)
 20185d8:	e0bff817 	ldw	r2,-32(fp)
 20185dc:	1880051e 	bne	r3,r2,20185f4 <altera_avalon_jtag_uart_write+0x258>
 20185e0:	e0bffb17 	ldw	r2,-20(fp)
 20185e4:	10c00917 	ldw	r3,36(r2)
 20185e8:	e0bffb17 	ldw	r2,-20(fp)
 20185ec:	10800117 	ldw	r2,4(r2)
 20185f0:	18bff736 	bltu	r3,r2,20185d0 <altera_avalon_jtag_uart_write+0x234>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 20185f4:	e0bffb17 	ldw	r2,-20(fp)
 20185f8:	10c01017 	ldw	r3,64(r2)
 20185fc:	e0bff817 	ldw	r2,-32(fp)
 2018600:	18800326 	beq	r3,r2,2018610 <altera_avalon_jtag_uart_write+0x274>
        break;
    }
  }
  while (count > 0);
 2018604:	e0bffd17 	ldw	r2,-12(fp)
 2018608:	10800048 	cmpgei	r2,r2,1
 201860c:	103fb11e 	bne	r2,zero,20184d4 <altera_avalon_jtag_uart_write+0x138>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 2018610:	e0bffb17 	ldw	r2,-20(fp)
 2018614:	11000b17 	ldw	r4,44(r2)
 2018618:	20154c80 	call	20154c8 <OSSemPost>

  if (ptr != start)
 201861c:	e0fffc17 	ldw	r3,-16(fp)
 2018620:	e0bff517 	ldw	r2,-44(fp)
 2018624:	18800526 	beq	r3,r2,201863c <altera_avalon_jtag_uart_write+0x2a0>
    return ptr - start;
 2018628:	e0fffc17 	ldw	r3,-16(fp)
 201862c:	e0bff517 	ldw	r2,-44(fp)
 2018630:	1887c83a 	sub	r3,r3,r2
 2018634:	e0ffff15 	stw	r3,-4(fp)
 2018638:	00000906 	br	2018660 <altera_avalon_jtag_uart_write+0x2c4>
  else if (flags & O_NONBLOCK)
 201863c:	e0bffe17 	ldw	r2,-8(fp)
 2018640:	1090000c 	andi	r2,r2,16384
 2018644:	1005003a 	cmpeq	r2,r2,zero
 2018648:	1000031e 	bne	r2,zero,2018658 <altera_avalon_jtag_uart_write+0x2bc>
    return -EWOULDBLOCK;
 201864c:	00bffd44 	movi	r2,-11
 2018650:	e0bfff15 	stw	r2,-4(fp)
 2018654:	00000206 	br	2018660 <altera_avalon_jtag_uart_write+0x2c4>
  else
    return -EIO; /* Host not connected */
 2018658:	00bffec4 	movi	r2,-5
 201865c:	e0bfff15 	stw	r2,-4(fp)
 2018660:	e0bfff17 	ldw	r2,-4(fp)
}
 2018664:	e037883a 	mov	sp,fp
 2018668:	dfc00117 	ldw	ra,4(sp)
 201866c:	df000017 	ldw	fp,0(sp)
 2018670:	dec00204 	addi	sp,sp,8
 2018674:	f800283a 	ret

02018678 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 2018678:	defff904 	addi	sp,sp,-28
 201867c:	dfc00615 	stw	ra,24(sp)
 2018680:	df000515 	stw	fp,20(sp)
 2018684:	df000504 	addi	fp,sp,20
 2018688:	e13ffe15 	stw	r4,-8(fp)
 201868c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 2018690:	e0bffe17 	ldw	r2,-8(fp)
 2018694:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 2018698:	e0bffe17 	ldw	r2,-8(fp)
 201869c:	10800104 	addi	r2,r2,4
 20186a0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20186a4:	0005303a 	rdctl	r2,status
 20186a8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20186ac:	e0fffc17 	ldw	r3,-16(fp)
 20186b0:	00bfff84 	movi	r2,-2
 20186b4:	1884703a 	and	r2,r3,r2
 20186b8:	1001703a 	wrctl	status,r2
  
  return context;
 20186bc:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 20186c0:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 20186c4:	200ee980 	call	200ee98 <alt_tick>
 20186c8:	e0bffd17 	ldw	r2,-12(fp)
 20186cc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20186d0:	e0bffb17 	ldw	r2,-20(fp)
 20186d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 20186d8:	e037883a 	mov	sp,fp
 20186dc:	dfc00117 	ldw	ra,4(sp)
 20186e0:	df000017 	ldw	fp,0(sp)
 20186e4:	dec00204 	addi	sp,sp,8
 20186e8:	f800283a 	ret

020186ec <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 20186ec:	defff904 	addi	sp,sp,-28
 20186f0:	dfc00615 	stw	ra,24(sp)
 20186f4:	df000515 	stw	fp,20(sp)
 20186f8:	df000504 	addi	fp,sp,20
 20186fc:	e13ffc15 	stw	r4,-16(fp)
 2018700:	e17ffd15 	stw	r5,-12(fp)
 2018704:	e1bffe15 	stw	r6,-8(fp)
 2018708:	e1ffff15 	stw	r7,-4(fp)
 201870c:	e0bfff17 	ldw	r2,-4(fp)
 2018710:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 2018714:	008080b4 	movhi	r2,514
 2018718:	10b80004 	addi	r2,r2,-8192
 201871c:	10800017 	ldw	r2,0(r2)
 2018720:	1004c03a 	cmpne	r2,r2,zero
 2018724:	1000041e 	bne	r2,zero,2018738 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 2018728:	00c080b4 	movhi	r3,514
 201872c:	18f80004 	addi	r3,r3,-8192
 2018730:	e0bffb17 	ldw	r2,-20(fp)
 2018734:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 2018738:	e0bffc17 	ldw	r2,-16(fp)
 201873c:	10800104 	addi	r2,r2,4
 2018740:	1007883a 	mov	r3,r2
 2018744:	008001c4 	movi	r2,7
 2018748:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 201874c:	e13ffe17 	ldw	r4,-8(fp)
 2018750:	e17ffc17 	ldw	r5,-16(fp)
 2018754:	018080b4 	movhi	r6,514
 2018758:	31a19e04 	addi	r6,r6,-31112
 201875c:	200e3bc0 	call	200e3bc <alt_irq_register>
#endif  
}
 2018760:	e037883a 	mov	sp,fp
 2018764:	dfc00117 	ldw	ra,4(sp)
 2018768:	df000017 	ldw	fp,0(sp)
 201876c:	dec00204 	addi	sp,sp,8
 2018770:	f800283a 	ret

02018774 <alt_up_de0_nano_adc_open_dev>:
#define read_ch4(adc)  IORD_ALT_UP_DE0_NANO_ADC_CH_4(((adc)->base))
#define read_ch5(adc)  IORD_ALT_UP_DE0_NANO_ADC_CH_5(((adc)->base))
#define read_ch6(adc)  IORD_ALT_UP_DE0_NANO_ADC_CH_6(((adc)->base))
#define read_ch7(adc)  IORD_ALT_UP_DE0_NANO_ADC_CH_7(((adc)->base))

alt_up_de0_nano_adc_dev* alt_up_de0_nano_adc_open_dev (const char* name){
 2018774:	defffc04 	addi	sp,sp,-16
 2018778:	dfc00315 	stw	ra,12(sp)
 201877c:	df000215 	stw	fp,8(sp)
 2018780:	df000204 	addi	fp,sp,8
 2018784:	e13fff15 	stw	r4,-4(fp)

	alt_up_de0_nano_adc_dev* dev = (alt_up_de0_nano_adc_dev*) alt_find_dev(name, &alt_dev_list);
 2018788:	e13fff17 	ldw	r4,-4(fp)
 201878c:	014080b4 	movhi	r5,514
 2018790:	2970eb04 	addi	r5,r5,-15444
 2018794:	2018fe00 	call	2018fe0 <alt_find_dev>
 2018798:	e0bffe15 	stw	r2,-8(fp)
	
	return dev;
 201879c:	e0bffe17 	ldw	r2,-8(fp)
}
 20187a0:	e037883a 	mov	sp,fp
 20187a4:	dfc00117 	ldw	ra,4(sp)
 20187a8:	df000017 	ldw	fp,0(sp)
 20187ac:	dec00204 	addi	sp,sp,8
 20187b0:	f800283a 	ret

020187b4 <alt_up_de0_nano_adc_read>:

unsigned int alt_up_de0_nano_adc_read (alt_up_de0_nano_adc_dev * adc, unsigned channel){
 20187b4:	defffb04 	addi	sp,sp,-20
 20187b8:	df000415 	stw	fp,16(sp)
 20187bc:	df000404 	addi	fp,sp,16
 20187c0:	e13ffd15 	stw	r4,-12(fp)
 20187c4:	e17ffe15 	stw	r5,-8(fp)

	unsigned int ch = channel % 8;
 20187c8:	e0bffe17 	ldw	r2,-8(fp)
 20187cc:	108001cc 	andi	r2,r2,7
 20187d0:	e0bffc15 	stw	r2,-16(fp)
	
	switch (ch){
 20187d4:	e0bffc17 	ldw	r2,-16(fp)
 20187d8:	10800228 	cmpgeui	r2,r2,8
 20187dc:	10003f1e 	bne	r2,zero,20188dc <alt_up_de0_nano_adc_read+0x128>
 20187e0:	e0bffc17 	ldw	r2,-16(fp)
 20187e4:	1085883a 	add	r2,r2,r2
 20187e8:	1087883a 	add	r3,r2,r2
 20187ec:	008080b4 	movhi	r2,514
 20187f0:	10a20004 	addi	r2,r2,-30720
 20187f4:	1885883a 	add	r2,r3,r2
 20187f8:	10800017 	ldw	r2,0(r2)
 20187fc:	1000683a 	jmp	r2
 2018800:	02018820 	cmpeqi	r8,zero,1568
 2018804:	02018834 	movhi	r8,1568
 2018808:	0201884c 	andi	r8,zero,1569
 201880c:	02018864 	muli	r8,zero,1569
 2018810:	0201887c 	xorhi	r8,zero,1569
 2018814:	02018894 	movui	r8,1570
 2018818:	020188ac 	andhi	r8,zero,1570
 201881c:	020188c4 	movi	r8,1571
		case 0:
			return read_ch0(adc);
 2018820:	e0bffd17 	ldw	r2,-12(fp)
 2018824:	10800a17 	ldw	r2,40(r2)
 2018828:	10800037 	ldwio	r2,0(r2)
 201882c:	e0bfff15 	stw	r2,-4(fp)
 2018830:	00002b06 	br	20188e0 <alt_up_de0_nano_adc_read+0x12c>
		case 1:
			return read_ch1(adc);
 2018834:	e0bffd17 	ldw	r2,-12(fp)
 2018838:	10800a17 	ldw	r2,40(r2)
 201883c:	10800104 	addi	r2,r2,4
 2018840:	10800037 	ldwio	r2,0(r2)
 2018844:	e0bfff15 	stw	r2,-4(fp)
 2018848:	00002506 	br	20188e0 <alt_up_de0_nano_adc_read+0x12c>
		case 2:
			return read_ch2(adc);
 201884c:	e0bffd17 	ldw	r2,-12(fp)
 2018850:	10800a17 	ldw	r2,40(r2)
 2018854:	10800204 	addi	r2,r2,8
 2018858:	10800037 	ldwio	r2,0(r2)
 201885c:	e0bfff15 	stw	r2,-4(fp)
 2018860:	00001f06 	br	20188e0 <alt_up_de0_nano_adc_read+0x12c>
		case 3:
			return read_ch3(adc);
 2018864:	e0bffd17 	ldw	r2,-12(fp)
 2018868:	10800a17 	ldw	r2,40(r2)
 201886c:	10800304 	addi	r2,r2,12
 2018870:	10800037 	ldwio	r2,0(r2)
 2018874:	e0bfff15 	stw	r2,-4(fp)
 2018878:	00001906 	br	20188e0 <alt_up_de0_nano_adc_read+0x12c>
		case 4:
			return read_ch4(adc);
 201887c:	e0bffd17 	ldw	r2,-12(fp)
 2018880:	10800a17 	ldw	r2,40(r2)
 2018884:	10800404 	addi	r2,r2,16
 2018888:	10800037 	ldwio	r2,0(r2)
 201888c:	e0bfff15 	stw	r2,-4(fp)
 2018890:	00001306 	br	20188e0 <alt_up_de0_nano_adc_read+0x12c>
		case 5:
			return read_ch5(adc);
 2018894:	e0bffd17 	ldw	r2,-12(fp)
 2018898:	10800a17 	ldw	r2,40(r2)
 201889c:	10800504 	addi	r2,r2,20
 20188a0:	10800037 	ldwio	r2,0(r2)
 20188a4:	e0bfff15 	stw	r2,-4(fp)
 20188a8:	00000d06 	br	20188e0 <alt_up_de0_nano_adc_read+0x12c>
		case 6:
			return read_ch6(adc);
 20188ac:	e0bffd17 	ldw	r2,-12(fp)
 20188b0:	10800a17 	ldw	r2,40(r2)
 20188b4:	10800604 	addi	r2,r2,24
 20188b8:	10800037 	ldwio	r2,0(r2)
 20188bc:	e0bfff15 	stw	r2,-4(fp)
 20188c0:	00000706 	br	20188e0 <alt_up_de0_nano_adc_read+0x12c>
		case 7:
			return read_ch7(adc);
 20188c4:	e0bffd17 	ldw	r2,-12(fp)
 20188c8:	10800a17 	ldw	r2,40(r2)
 20188cc:	10800704 	addi	r2,r2,28
 20188d0:	10800037 	ldwio	r2,0(r2)
 20188d4:	e0bfff15 	stw	r2,-4(fp)
 20188d8:	00000106 	br	20188e0 <alt_up_de0_nano_adc_read+0x12c>
		default:
			return 0;
 20188dc:	e03fff15 	stw	zero,-4(fp)
 20188e0:	e0bfff17 	ldw	r2,-4(fp)
	}
}
 20188e4:	e037883a 	mov	sp,fp
 20188e8:	df000017 	ldw	fp,0(sp)
 20188ec:	dec00104 	addi	sp,sp,4
 20188f0:	f800283a 	ret

020188f4 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 20188f4:	defffd04 	addi	sp,sp,-12
 20188f8:	df000215 	stw	fp,8(sp)
 20188fc:	df000204 	addi	fp,sp,8
 2018900:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 2018904:	e0bfff17 	ldw	r2,-4(fp)
 2018908:	10800a17 	ldw	r2,40(r2)
 201890c:	10800104 	addi	r2,r2,4
 2018910:	10800037 	ldwio	r2,0(r2)
 2018914:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 2018918:	e0bffe17 	ldw	r2,-8(fp)
 201891c:	10800054 	ori	r2,r2,1
 2018920:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 2018924:	e0bfff17 	ldw	r2,-4(fp)
 2018928:	10800a17 	ldw	r2,40(r2)
 201892c:	10800104 	addi	r2,r2,4
 2018930:	e0fffe17 	ldw	r3,-8(fp)
 2018934:	10c00035 	stwio	r3,0(r2)
}
 2018938:	e037883a 	mov	sp,fp
 201893c:	df000017 	ldw	fp,0(sp)
 2018940:	dec00104 	addi	sp,sp,4
 2018944:	f800283a 	ret

02018948 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 2018948:	defffd04 	addi	sp,sp,-12
 201894c:	df000215 	stw	fp,8(sp)
 2018950:	df000204 	addi	fp,sp,8
 2018954:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 2018958:	e0bfff17 	ldw	r2,-4(fp)
 201895c:	10800a17 	ldw	r2,40(r2)
 2018960:	10800104 	addi	r2,r2,4
 2018964:	10800037 	ldwio	r2,0(r2)
 2018968:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 201896c:	e0fffe17 	ldw	r3,-8(fp)
 2018970:	00bfff84 	movi	r2,-2
 2018974:	1884703a 	and	r2,r3,r2
 2018978:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 201897c:	e0bfff17 	ldw	r2,-4(fp)
 2018980:	10800a17 	ldw	r2,40(r2)
 2018984:	10800104 	addi	r2,r2,4
 2018988:	e0fffe17 	ldw	r3,-8(fp)
 201898c:	10c00035 	stwio	r3,0(r2)
}
 2018990:	e037883a 	mov	sp,fp
 2018994:	df000017 	ldw	fp,0(sp)
 2018998:	dec00104 	addi	sp,sp,4
 201899c:	f800283a 	ret

020189a0 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 20189a0:	defffd04 	addi	sp,sp,-12
 20189a4:	df000215 	stw	fp,8(sp)
 20189a8:	df000204 	addi	fp,sp,8
 20189ac:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 20189b0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 20189b4:	e0bfff17 	ldw	r2,-4(fp)
 20189b8:	10800a17 	ldw	r2,40(r2)
 20189bc:	10800084 	addi	r2,r2,2
 20189c0:	1080002b 	ldhuio	r2,0(r2)
 20189c4:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 20189c8:	e0bffe0b 	ldhu	r2,-8(fp)
}
 20189cc:	e037883a 	mov	sp,fp
 20189d0:	df000017 	ldw	fp,0(sp)
 20189d4:	dec00104 	addi	sp,sp,4
 20189d8:	f800283a 	ret

020189dc <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 20189dc:	defffd04 	addi	sp,sp,-12
 20189e0:	df000215 	stw	fp,8(sp)
 20189e4:	df000204 	addi	fp,sp,8
 20189e8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 20189ec:	e0bfff17 	ldw	r2,-4(fp)
 20189f0:	10800a17 	ldw	r2,40(r2)
 20189f4:	10800104 	addi	r2,r2,4
 20189f8:	10800037 	ldwio	r2,0(r2)
 20189fc:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 2018a00:	e0bffe17 	ldw	r2,-8(fp)
 2018a04:	10bfffec 	andhi	r2,r2,65535
 2018a08:	1004d43a 	srli	r2,r2,16
}
 2018a0c:	e037883a 	mov	sp,fp
 2018a10:	df000017 	ldw	fp,0(sp)
 2018a14:	dec00104 	addi	sp,sp,4
 2018a18:	f800283a 	ret

02018a1c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 2018a1c:	defffc04 	addi	sp,sp,-16
 2018a20:	df000315 	stw	fp,12(sp)
 2018a24:	df000304 	addi	fp,sp,12
 2018a28:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 2018a2c:	e0bffe17 	ldw	r2,-8(fp)
 2018a30:	1080800c 	andi	r2,r2,512
 2018a34:	1004d27a 	srli	r2,r2,9
 2018a38:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 2018a3c:	e0bffd17 	ldw	r2,-12(fp)
 2018a40:	1005003a 	cmpeq	r2,r2,zero
 2018a44:	1000031e 	bne	r2,zero,2018a54 <alt_up_rs232_check_parity+0x38>
 2018a48:	00bfffc4 	movi	r2,-1
 2018a4c:	e0bfff15 	stw	r2,-4(fp)
 2018a50:	00000106 	br	2018a58 <alt_up_rs232_check_parity+0x3c>
 2018a54:	e03fff15 	stw	zero,-4(fp)
 2018a58:	e0bfff17 	ldw	r2,-4(fp)
}
 2018a5c:	e037883a 	mov	sp,fp
 2018a60:	df000017 	ldw	fp,0(sp)
 2018a64:	dec00104 	addi	sp,sp,4
 2018a68:	f800283a 	ret

02018a6c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 2018a6c:	defffc04 	addi	sp,sp,-16
 2018a70:	df000315 	stw	fp,12(sp)
 2018a74:	df000304 	addi	fp,sp,12
 2018a78:	e13ffe15 	stw	r4,-8(fp)
 2018a7c:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 2018a80:	e0bffe17 	ldw	r2,-8(fp)
 2018a84:	10800a17 	ldw	r2,40(r2)
 2018a88:	10800037 	ldwio	r2,0(r2)
 2018a8c:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 2018a90:	e0bffe17 	ldw	r2,-8(fp)
 2018a94:	10800a17 	ldw	r2,40(r2)
 2018a98:	e0ffff03 	ldbu	r3,-4(fp)
 2018a9c:	10c00035 	stwio	r3,0(r2)
	return 0;
 2018aa0:	0005883a 	mov	r2,zero
}
 2018aa4:	e037883a 	mov	sp,fp
 2018aa8:	df000017 	ldw	fp,0(sp)
 2018aac:	dec00104 	addi	sp,sp,4
 2018ab0:	f800283a 	ret

02018ab4 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 2018ab4:	defffa04 	addi	sp,sp,-24
 2018ab8:	dfc00515 	stw	ra,20(sp)
 2018abc:	df000415 	stw	fp,16(sp)
 2018ac0:	df000404 	addi	fp,sp,16
 2018ac4:	e13ffd15 	stw	r4,-12(fp)
 2018ac8:	e17ffe15 	stw	r5,-8(fp)
 2018acc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 2018ad0:	e0bffd17 	ldw	r2,-12(fp)
 2018ad4:	10800a17 	ldw	r2,40(r2)
 2018ad8:	10800037 	ldwio	r2,0(r2)
 2018adc:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 2018ae0:	e0bffc17 	ldw	r2,-16(fp)
 2018ae4:	1007883a 	mov	r3,r2
 2018ae8:	e0bffe17 	ldw	r2,-8(fp)
 2018aec:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 2018af0:	e13ffc17 	ldw	r4,-16(fp)
 2018af4:	2018a1c0 	call	2018a1c <alt_up_rs232_check_parity>
 2018af8:	1007883a 	mov	r3,r2
 2018afc:	e0bfff17 	ldw	r2,-4(fp)
 2018b00:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 2018b04:	e0bffc17 	ldw	r2,-16(fp)
 2018b08:	10a0000c 	andi	r2,r2,32768
 2018b0c:	1004d3fa 	srli	r2,r2,15
 2018b10:	10bfffc4 	addi	r2,r2,-1
}
 2018b14:	e037883a 	mov	sp,fp
 2018b18:	dfc00117 	ldw	ra,4(sp)
 2018b1c:	df000017 	ldw	fp,0(sp)
 2018b20:	dec00204 	addi	sp,sp,8
 2018b24:	f800283a 	ret

02018b28 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 2018b28:	defff804 	addi	sp,sp,-32
 2018b2c:	dfc00715 	stw	ra,28(sp)
 2018b30:	df000615 	stw	fp,24(sp)
 2018b34:	df000604 	addi	fp,sp,24
 2018b38:	e13ffd15 	stw	r4,-12(fp)
 2018b3c:	e17ffe15 	stw	r5,-8(fp)
 2018b40:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 2018b44:	e0bffd17 	ldw	r2,-12(fp)
 2018b48:	10800017 	ldw	r2,0(r2)
 2018b4c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 2018b50:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 2018b54:	00000c06 	br	2018b88 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 2018b58:	e17ffe17 	ldw	r5,-8(fp)
 2018b5c:	e0bffe17 	ldw	r2,-8(fp)
 2018b60:	10800044 	addi	r2,r2,1
 2018b64:	e0bffe15 	stw	r2,-8(fp)
 2018b68:	e1bffc04 	addi	r6,fp,-16
 2018b6c:	e13ffb17 	ldw	r4,-20(fp)
 2018b70:	2018ab40 	call	2018ab4 <alt_up_rs232_read_data>
 2018b74:	1004c03a 	cmpne	r2,r2,zero
 2018b78:	1000091e 	bne	r2,zero,2018ba0 <alt_up_rs232_read_fd+0x78>
			count++;
 2018b7c:	e0bffa17 	ldw	r2,-24(fp)
 2018b80:	10800044 	addi	r2,r2,1
 2018b84:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 2018b88:	e0bfff17 	ldw	r2,-4(fp)
 2018b8c:	10bfffc4 	addi	r2,r2,-1
 2018b90:	e0bfff15 	stw	r2,-4(fp)
 2018b94:	e0bfff17 	ldw	r2,-4(fp)
 2018b98:	10bfffd8 	cmpnei	r2,r2,-1
 2018b9c:	103fee1e 	bne	r2,zero,2018b58 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 2018ba0:	e0bffa17 	ldw	r2,-24(fp)
}
 2018ba4:	e037883a 	mov	sp,fp
 2018ba8:	dfc00117 	ldw	ra,4(sp)
 2018bac:	df000017 	ldw	fp,0(sp)
 2018bb0:	dec00204 	addi	sp,sp,8
 2018bb4:	f800283a 	ret

02018bb8 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 2018bb8:	defff904 	addi	sp,sp,-28
 2018bbc:	dfc00615 	stw	ra,24(sp)
 2018bc0:	df000515 	stw	fp,20(sp)
 2018bc4:	df000504 	addi	fp,sp,20
 2018bc8:	e13ffd15 	stw	r4,-12(fp)
 2018bcc:	e17ffe15 	stw	r5,-8(fp)
 2018bd0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 2018bd4:	e0bffd17 	ldw	r2,-12(fp)
 2018bd8:	10800017 	ldw	r2,0(r2)
 2018bdc:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 2018be0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 2018be4:	00000d06 	br	2018c1c <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 2018be8:	e0bffe17 	ldw	r2,-8(fp)
 2018bec:	10800003 	ldbu	r2,0(r2)
 2018bf0:	11403fcc 	andi	r5,r2,255
 2018bf4:	e13ffc17 	ldw	r4,-16(fp)
 2018bf8:	2018a6c0 	call	2018a6c <alt_up_rs232_write_data>
 2018bfc:	1004c03a 	cmpne	r2,r2,zero
 2018c00:	10000c1e 	bne	r2,zero,2018c34 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 2018c04:	e0bffb17 	ldw	r2,-20(fp)
 2018c08:	10800044 	addi	r2,r2,1
 2018c0c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 2018c10:	e0bffe17 	ldw	r2,-8(fp)
 2018c14:	10800044 	addi	r2,r2,1
 2018c18:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 2018c1c:	e0bfff17 	ldw	r2,-4(fp)
 2018c20:	10bfffc4 	addi	r2,r2,-1
 2018c24:	e0bfff15 	stw	r2,-4(fp)
 2018c28:	e0bfff17 	ldw	r2,-4(fp)
 2018c2c:	10bfffd8 	cmpnei	r2,r2,-1
 2018c30:	103fed1e 	bne	r2,zero,2018be8 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 2018c34:	e0bffb17 	ldw	r2,-20(fp)
}
 2018c38:	e037883a 	mov	sp,fp
 2018c3c:	dfc00117 	ldw	ra,4(sp)
 2018c40:	df000017 	ldw	fp,0(sp)
 2018c44:	dec00204 	addi	sp,sp,8
 2018c48:	f800283a 	ret

02018c4c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 2018c4c:	defffc04 	addi	sp,sp,-16
 2018c50:	dfc00315 	stw	ra,12(sp)
 2018c54:	df000215 	stw	fp,8(sp)
 2018c58:	df000204 	addi	fp,sp,8
 2018c5c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 2018c60:	e13fff17 	ldw	r4,-4(fp)
 2018c64:	014080b4 	movhi	r5,514
 2018c68:	2970eb04 	addi	r5,r5,-15444
 2018c6c:	2018fe00 	call	2018fe0 <alt_find_dev>
 2018c70:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 2018c74:	e0bffe17 	ldw	r2,-8(fp)
}
 2018c78:	e037883a 	mov	sp,fp
 2018c7c:	dfc00117 	ldw	ra,4(sp)
 2018c80:	df000017 	ldw	fp,0(sp)
 2018c84:	dec00204 	addi	sp,sp,8
 2018c88:	f800283a 	ret

02018c8c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 2018c8c:	defffa04 	addi	sp,sp,-24
 2018c90:	dfc00515 	stw	ra,20(sp)
 2018c94:	df000415 	stw	fp,16(sp)
 2018c98:	df000404 	addi	fp,sp,16
 2018c9c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 2018ca0:	00800244 	movi	r2,9
 2018ca4:	e0bffc15 	stw	r2,-16(fp)
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 2018ca8:	e13ffc17 	ldw	r4,-16(fp)
 2018cac:	014003f4 	movhi	r5,15
 2018cb0:	29509004 	addi	r5,r5,16960
 2018cb4:	20032ac0 	call	20032ac <__mulsi3>
 2018cb8:	100b883a 	mov	r5,r2
 2018cbc:	0100bef4 	movhi	r4,763
 2018cc0:	213c2004 	addi	r4,r4,-3968
 2018cc4:	200329c0 	call	200329c <__udivsi3>
 2018cc8:	100b883a 	mov	r5,r2
 2018ccc:	01200034 	movhi	r4,32768
 2018cd0:	213fffc4 	addi	r4,r4,-1
 2018cd4:	200329c0 	call	200329c <__udivsi3>
 2018cd8:	100b883a 	mov	r5,r2
 2018cdc:	e13fff17 	ldw	r4,-4(fp)
 2018ce0:	200329c0 	call	200329c <__udivsi3>
 2018ce4:	e0bffd15 	stw	r2,-12(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 2018ce8:	e0bffd17 	ldw	r2,-12(fp)
 2018cec:	1005003a 	cmpeq	r2,r2,zero
 2018cf0:	10002a1e 	bne	r2,zero,2018d9c <alt_busy_sleep+0x110>
  {
    for(i=0;i<big_loops;i++)
 2018cf4:	e03ffe15 	stw	zero,-8(fp)
 2018cf8:	00001706 	br	2018d58 <alt_busy_sleep+0xcc>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 2018cfc:	00a00034 	movhi	r2,32768
 2018d00:	10bfffc4 	addi	r2,r2,-1
 2018d04:	10bfffc4 	addi	r2,r2,-1
 2018d08:	103ffe1e 	bne	r2,zero,2018d04 <alt_busy_sleep+0x78>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 2018d0c:	e13ffc17 	ldw	r4,-16(fp)
 2018d10:	014003f4 	movhi	r5,15
 2018d14:	29509004 	addi	r5,r5,16960
 2018d18:	20032ac0 	call	20032ac <__mulsi3>
 2018d1c:	100b883a 	mov	r5,r2
 2018d20:	0100bef4 	movhi	r4,763
 2018d24:	213c2004 	addi	r4,r4,-3968
 2018d28:	200329c0 	call	200329c <__udivsi3>
 2018d2c:	100b883a 	mov	r5,r2
 2018d30:	01200034 	movhi	r4,32768
 2018d34:	213fffc4 	addi	r4,r4,-1
 2018d38:	200329c0 	call	200329c <__udivsi3>
 2018d3c:	1007883a 	mov	r3,r2
 2018d40:	e0bfff17 	ldw	r2,-4(fp)
 2018d44:	10c5c83a 	sub	r2,r2,r3
 2018d48:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 2018d4c:	e0bffe17 	ldw	r2,-8(fp)
 2018d50:	10800044 	addi	r2,r2,1
 2018d54:	e0bffe15 	stw	r2,-8(fp)
 2018d58:	e0fffe17 	ldw	r3,-8(fp)
 2018d5c:	e0bffd17 	ldw	r2,-12(fp)
 2018d60:	18bfe616 	blt	r3,r2,2018cfc <alt_busy_sleep+0x70>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2018d64:	e13ffc17 	ldw	r4,-16(fp)
 2018d68:	014003f4 	movhi	r5,15
 2018d6c:	29509004 	addi	r5,r5,16960
 2018d70:	20032ac0 	call	20032ac <__mulsi3>
 2018d74:	100b883a 	mov	r5,r2
 2018d78:	0100bef4 	movhi	r4,763
 2018d7c:	213c2004 	addi	r4,r4,-3968
 2018d80:	200329c0 	call	200329c <__udivsi3>
 2018d84:	1009883a 	mov	r4,r2
 2018d88:	e17fff17 	ldw	r5,-4(fp)
 2018d8c:	20032ac0 	call	20032ac <__mulsi3>
 2018d90:	10bfffc4 	addi	r2,r2,-1
 2018d94:	103ffe1e 	bne	r2,zero,2018d90 <alt_busy_sleep+0x104>
 2018d98:	00000d06 	br	2018dd0 <alt_busy_sleep+0x144>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 2018d9c:	e13ffc17 	ldw	r4,-16(fp)
 2018da0:	014003f4 	movhi	r5,15
 2018da4:	29509004 	addi	r5,r5,16960
 2018da8:	20032ac0 	call	20032ac <__mulsi3>
 2018dac:	100b883a 	mov	r5,r2
 2018db0:	0100bef4 	movhi	r4,763
 2018db4:	213c2004 	addi	r4,r4,-3968
 2018db8:	200329c0 	call	200329c <__udivsi3>
 2018dbc:	1009883a 	mov	r4,r2
 2018dc0:	e17fff17 	ldw	r5,-4(fp)
 2018dc4:	20032ac0 	call	20032ac <__mulsi3>
 2018dc8:	10bfffc4 	addi	r2,r2,-1
 2018dcc:	00bffe16 	blt	zero,r2,2018dc8 <alt_busy_sleep+0x13c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 2018dd0:	0005883a 	mov	r2,zero
}
 2018dd4:	e037883a 	mov	sp,fp
 2018dd8:	dfc00117 	ldw	ra,4(sp)
 2018ddc:	df000017 	ldw	fp,0(sp)
 2018de0:	dec00204 	addi	sp,sp,8
 2018de4:	f800283a 	ret

02018de8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2018de8:	deffff04 	addi	sp,sp,-4
 2018dec:	df000015 	stw	fp,0(sp)
 2018df0:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2018df4:	e037883a 	mov	sp,fp
 2018df8:	df000017 	ldw	fp,0(sp)
 2018dfc:	dec00104 	addi	sp,sp,4
 2018e00:	f800283a 	ret

02018e04 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2018e04:	defff904 	addi	sp,sp,-28
 2018e08:	dfc00615 	stw	ra,24(sp)
 2018e0c:	df000515 	stw	fp,20(sp)
 2018e10:	df000504 	addi	fp,sp,20
 2018e14:	e13ffd15 	stw	r4,-12(fp)
 2018e18:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2018e1c:	e0bffd17 	ldw	r2,-12(fp)
 2018e20:	1005003a 	cmpeq	r2,r2,zero
 2018e24:	1000041e 	bne	r2,zero,2018e38 <alt_dev_llist_insert+0x34>
 2018e28:	e0bffd17 	ldw	r2,-12(fp)
 2018e2c:	10800217 	ldw	r2,8(r2)
 2018e30:	1004c03a 	cmpne	r2,r2,zero
 2018e34:	1000071e 	bne	r2,zero,2018e54 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 2018e38:	2018eb80 	call	2018eb8 <alt_get_errno>
 2018e3c:	1007883a 	mov	r3,r2
 2018e40:	00800584 	movi	r2,22
 2018e44:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 2018e48:	00bffa84 	movi	r2,-22
 2018e4c:	e0bfff15 	stw	r2,-4(fp)
 2018e50:	00001306 	br	2018ea0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2018e54:	e0fffd17 	ldw	r3,-12(fp)
 2018e58:	e0bffe17 	ldw	r2,-8(fp)
 2018e5c:	e0bffb15 	stw	r2,-20(fp)
 2018e60:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2018e64:	e0fffc17 	ldw	r3,-16(fp)
 2018e68:	e0bffb17 	ldw	r2,-20(fp)
 2018e6c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 2018e70:	e0bffb17 	ldw	r2,-20(fp)
 2018e74:	10c00017 	ldw	r3,0(r2)
 2018e78:	e0bffc17 	ldw	r2,-16(fp)
 2018e7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2018e80:	e0bffb17 	ldw	r2,-20(fp)
 2018e84:	10c00017 	ldw	r3,0(r2)
 2018e88:	e0bffc17 	ldw	r2,-16(fp)
 2018e8c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 2018e90:	e0fffb17 	ldw	r3,-20(fp)
 2018e94:	e0bffc17 	ldw	r2,-16(fp)
 2018e98:	18800015 	stw	r2,0(r3)

  return 0;  
 2018e9c:	e03fff15 	stw	zero,-4(fp)
 2018ea0:	e0bfff17 	ldw	r2,-4(fp)
}
 2018ea4:	e037883a 	mov	sp,fp
 2018ea8:	dfc00117 	ldw	ra,4(sp)
 2018eac:	df000017 	ldw	fp,0(sp)
 2018eb0:	dec00204 	addi	sp,sp,8
 2018eb4:	f800283a 	ret

02018eb8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2018eb8:	defffd04 	addi	sp,sp,-12
 2018ebc:	dfc00215 	stw	ra,8(sp)
 2018ec0:	df000115 	stw	fp,4(sp)
 2018ec4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2018ec8:	008080b4 	movhi	r2,514
 2018ecc:	10b0ee04 	addi	r2,r2,-15432
 2018ed0:	10800017 	ldw	r2,0(r2)
 2018ed4:	1005003a 	cmpeq	r2,r2,zero
 2018ed8:	1000061e 	bne	r2,zero,2018ef4 <alt_get_errno+0x3c>
 2018edc:	008080b4 	movhi	r2,514
 2018ee0:	10b0ee04 	addi	r2,r2,-15432
 2018ee4:	10800017 	ldw	r2,0(r2)
 2018ee8:	103ee83a 	callr	r2
 2018eec:	e0bfff15 	stw	r2,-4(fp)
 2018ef0:	00000306 	br	2018f00 <alt_get_errno+0x48>
 2018ef4:	008080b4 	movhi	r2,514
 2018ef8:	10b7f704 	addi	r2,r2,-8228
 2018efc:	e0bfff15 	stw	r2,-4(fp)
 2018f00:	e0bfff17 	ldw	r2,-4(fp)
}
 2018f04:	e037883a 	mov	sp,fp
 2018f08:	dfc00117 	ldw	ra,4(sp)
 2018f0c:	df000017 	ldw	fp,0(sp)
 2018f10:	dec00204 	addi	sp,sp,8
 2018f14:	f800283a 	ret

02018f18 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2018f18:	defffd04 	addi	sp,sp,-12
 2018f1c:	dfc00215 	stw	ra,8(sp)
 2018f20:	df000115 	stw	fp,4(sp)
 2018f24:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2018f28:	00bfff04 	movi	r2,-4
 2018f2c:	00c080b4 	movhi	r3,514
 2018f30:	18e7e704 	addi	r3,r3,-24676
 2018f34:	1885883a 	add	r2,r3,r2
 2018f38:	e0bfff15 	stw	r2,-4(fp)
 2018f3c:	00000606 	br	2018f58 <_do_ctors+0x40>
        (*ctor) (); 
 2018f40:	e0bfff17 	ldw	r2,-4(fp)
 2018f44:	10800017 	ldw	r2,0(r2)
 2018f48:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2018f4c:	e0bfff17 	ldw	r2,-4(fp)
 2018f50:	10bfff04 	addi	r2,r2,-4
 2018f54:	e0bfff15 	stw	r2,-4(fp)
 2018f58:	e0ffff17 	ldw	r3,-4(fp)
 2018f5c:	008080b4 	movhi	r2,514
 2018f60:	10a7e604 	addi	r2,r2,-24680
 2018f64:	18bff62e 	bgeu	r3,r2,2018f40 <_do_ctors+0x28>
        (*ctor) (); 
}
 2018f68:	e037883a 	mov	sp,fp
 2018f6c:	dfc00117 	ldw	ra,4(sp)
 2018f70:	df000017 	ldw	fp,0(sp)
 2018f74:	dec00204 	addi	sp,sp,8
 2018f78:	f800283a 	ret

02018f7c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2018f7c:	defffd04 	addi	sp,sp,-12
 2018f80:	dfc00215 	stw	ra,8(sp)
 2018f84:	df000115 	stw	fp,4(sp)
 2018f88:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2018f8c:	00bfff04 	movi	r2,-4
 2018f90:	00c080b4 	movhi	r3,514
 2018f94:	18e7e704 	addi	r3,r3,-24676
 2018f98:	1885883a 	add	r2,r3,r2
 2018f9c:	e0bfff15 	stw	r2,-4(fp)
 2018fa0:	00000606 	br	2018fbc <_do_dtors+0x40>
        (*dtor) (); 
 2018fa4:	e0bfff17 	ldw	r2,-4(fp)
 2018fa8:	10800017 	ldw	r2,0(r2)
 2018fac:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2018fb0:	e0bfff17 	ldw	r2,-4(fp)
 2018fb4:	10bfff04 	addi	r2,r2,-4
 2018fb8:	e0bfff15 	stw	r2,-4(fp)
 2018fbc:	e0ffff17 	ldw	r3,-4(fp)
 2018fc0:	008080b4 	movhi	r2,514
 2018fc4:	10a7e704 	addi	r2,r2,-24676
 2018fc8:	18bff62e 	bgeu	r3,r2,2018fa4 <_do_dtors+0x28>
        (*dtor) (); 
}
 2018fcc:	e037883a 	mov	sp,fp
 2018fd0:	dfc00117 	ldw	ra,4(sp)
 2018fd4:	df000017 	ldw	fp,0(sp)
 2018fd8:	dec00204 	addi	sp,sp,8
 2018fdc:	f800283a 	ret

02018fe0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 2018fe0:	defff904 	addi	sp,sp,-28
 2018fe4:	dfc00615 	stw	ra,24(sp)
 2018fe8:	df000515 	stw	fp,20(sp)
 2018fec:	df000504 	addi	fp,sp,20
 2018ff0:	e13ffd15 	stw	r4,-12(fp)
 2018ff4:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 2018ff8:	e0bffe17 	ldw	r2,-8(fp)
 2018ffc:	10800017 	ldw	r2,0(r2)
 2019000:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 2019004:	e13ffd17 	ldw	r4,-12(fp)
 2019008:	2004d2c0 	call	2004d2c <strlen>
 201900c:	10800044 	addi	r2,r2,1
 2019010:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2019014:	00000d06 	br	201904c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2019018:	e0bffc17 	ldw	r2,-16(fp)
 201901c:	11000217 	ldw	r4,8(r2)
 2019020:	e1bffb17 	ldw	r6,-20(fp)
 2019024:	e17ffd17 	ldw	r5,-12(fp)
 2019028:	2019c3c0 	call	2019c3c <memcmp>
 201902c:	1004c03a 	cmpne	r2,r2,zero
 2019030:	1000031e 	bne	r2,zero,2019040 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2019034:	e0bffc17 	ldw	r2,-16(fp)
 2019038:	e0bfff15 	stw	r2,-4(fp)
 201903c:	00000706 	br	201905c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2019040:	e0bffc17 	ldw	r2,-16(fp)
 2019044:	10800017 	ldw	r2,0(r2)
 2019048:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 201904c:	e0fffe17 	ldw	r3,-8(fp)
 2019050:	e0bffc17 	ldw	r2,-16(fp)
 2019054:	10fff01e 	bne	r2,r3,2019018 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2019058:	e03fff15 	stw	zero,-4(fp)
 201905c:	e0bfff17 	ldw	r2,-4(fp)
}
 2019060:	e037883a 	mov	sp,fp
 2019064:	dfc00117 	ldw	ra,4(sp)
 2019068:	df000017 	ldw	fp,0(sp)
 201906c:	dec00204 	addi	sp,sp,8
 2019070:	f800283a 	ret

02019074 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2019074:	deffff04 	addi	sp,sp,-4
 2019078:	df000015 	stw	fp,0(sp)
 201907c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 2019080:	e037883a 	mov	sp,fp
 2019084:	df000017 	ldw	fp,0(sp)
 2019088:	dec00104 	addi	sp,sp,4
 201908c:	f800283a 	ret

02019090 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2019090:	defff804 	addi	sp,sp,-32
 2019094:	dfc00715 	stw	ra,28(sp)
 2019098:	df000615 	stw	fp,24(sp)
 201909c:	dc000515 	stw	r16,20(sp)
 20190a0:	df000504 	addi	fp,sp,20
 20190a4:	e13ffc15 	stw	r4,-16(fp)
 20190a8:	e17ffd15 	stw	r5,-12(fp)
 20190ac:	e1bffe15 	stw	r6,-8(fp)
 20190b0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 20190b4:	e13ffd17 	ldw	r4,-12(fp)
 20190b8:	e17ffe17 	ldw	r5,-8(fp)
 20190bc:	e1bfff17 	ldw	r6,-4(fp)
 20190c0:	20192d80 	call	20192d8 <open>
 20190c4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 20190c8:	e0bffb17 	ldw	r2,-20(fp)
 20190cc:	1004803a 	cmplt	r2,r2,zero
 20190d0:	10001f1e 	bne	r2,zero,2019150 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 20190d4:	e13ffb17 	ldw	r4,-20(fp)
 20190d8:	040080b4 	movhi	r16,514
 20190dc:	842c5204 	addi	r16,r16,-20152
 20190e0:	01400304 	movi	r5,12
 20190e4:	20032ac0 	call	20032ac <__mulsi3>
 20190e8:	1405883a 	add	r2,r2,r16
 20190ec:	10c00017 	ldw	r3,0(r2)
 20190f0:	e0bffc17 	ldw	r2,-16(fp)
 20190f4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 20190f8:	e13ffb17 	ldw	r4,-20(fp)
 20190fc:	040080b4 	movhi	r16,514
 2019100:	842c5204 	addi	r16,r16,-20152
 2019104:	01400304 	movi	r5,12
 2019108:	20032ac0 	call	20032ac <__mulsi3>
 201910c:	1405883a 	add	r2,r2,r16
 2019110:	10800104 	addi	r2,r2,4
 2019114:	10c00017 	ldw	r3,0(r2)
 2019118:	e0bffc17 	ldw	r2,-16(fp)
 201911c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 2019120:	e13ffb17 	ldw	r4,-20(fp)
 2019124:	040080b4 	movhi	r16,514
 2019128:	842c5204 	addi	r16,r16,-20152
 201912c:	01400304 	movi	r5,12
 2019130:	20032ac0 	call	20032ac <__mulsi3>
 2019134:	1405883a 	add	r2,r2,r16
 2019138:	10800204 	addi	r2,r2,8
 201913c:	10c00017 	ldw	r3,0(r2)
 2019140:	e0bffc17 	ldw	r2,-16(fp)
 2019144:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2019148:	e13ffb17 	ldw	r4,-20(fp)
 201914c:	200eccc0 	call	200eccc <alt_release_fd>
  }
} 
 2019150:	e037883a 	mov	sp,fp
 2019154:	dfc00217 	ldw	ra,8(sp)
 2019158:	df000117 	ldw	fp,4(sp)
 201915c:	dc000017 	ldw	r16,0(sp)
 2019160:	dec00304 	addi	sp,sp,12
 2019164:	f800283a 	ret

02019168 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2019168:	defffb04 	addi	sp,sp,-20
 201916c:	dfc00415 	stw	ra,16(sp)
 2019170:	df000315 	stw	fp,12(sp)
 2019174:	df000304 	addi	fp,sp,12
 2019178:	e13ffd15 	stw	r4,-12(fp)
 201917c:	e17ffe15 	stw	r5,-8(fp)
 2019180:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2019184:	010080b4 	movhi	r4,514
 2019188:	212c5504 	addi	r4,r4,-20140
 201918c:	e17ffd17 	ldw	r5,-12(fp)
 2019190:	01800044 	movi	r6,1
 2019194:	01c07fc4 	movi	r7,511
 2019198:	20190900 	call	2019090 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 201919c:	010080b4 	movhi	r4,514
 20191a0:	212c5204 	addi	r4,r4,-20152
 20191a4:	e17ffe17 	ldw	r5,-8(fp)
 20191a8:	000d883a 	mov	r6,zero
 20191ac:	01c07fc4 	movi	r7,511
 20191b0:	20190900 	call	2019090 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 20191b4:	010080b4 	movhi	r4,514
 20191b8:	212c5804 	addi	r4,r4,-20128
 20191bc:	e17fff17 	ldw	r5,-4(fp)
 20191c0:	01800044 	movi	r6,1
 20191c4:	01c07fc4 	movi	r7,511
 20191c8:	20190900 	call	2019090 <alt_open_fd>
}  
 20191cc:	e037883a 	mov	sp,fp
 20191d0:	dfc00117 	ldw	ra,4(sp)
 20191d4:	df000017 	ldw	fp,0(sp)
 20191d8:	dec00204 	addi	sp,sp,8
 20191dc:	f800283a 	ret

020191e0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 20191e0:	defffa04 	addi	sp,sp,-24
 20191e4:	dfc00515 	stw	ra,20(sp)
 20191e8:	df000415 	stw	fp,16(sp)
 20191ec:	dc000315 	stw	r16,12(sp)
 20191f0:	df000304 	addi	fp,sp,12
 20191f4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 20191f8:	e0bffe17 	ldw	r2,-8(fp)
 20191fc:	10800217 	ldw	r2,8(r2)
 2019200:	10d00034 	orhi	r3,r2,16384
 2019204:	e0bffe17 	ldw	r2,-8(fp)
 2019208:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 201920c:	e03ffd15 	stw	zero,-12(fp)
 2019210:	00002306 	br	20192a0 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2019214:	e13ffd17 	ldw	r4,-12(fp)
 2019218:	040080b4 	movhi	r16,514
 201921c:	842c5204 	addi	r16,r16,-20152
 2019220:	01400304 	movi	r5,12
 2019224:	20032ac0 	call	20032ac <__mulsi3>
 2019228:	1405883a 	add	r2,r2,r16
 201922c:	10c00017 	ldw	r3,0(r2)
 2019230:	e0bffe17 	ldw	r2,-8(fp)
 2019234:	10800017 	ldw	r2,0(r2)
 2019238:	1880161e 	bne	r3,r2,2019294 <alt_file_locked+0xb4>
 201923c:	e13ffd17 	ldw	r4,-12(fp)
 2019240:	040080b4 	movhi	r16,514
 2019244:	842c5204 	addi	r16,r16,-20152
 2019248:	01400304 	movi	r5,12
 201924c:	20032ac0 	call	20032ac <__mulsi3>
 2019250:	1405883a 	add	r2,r2,r16
 2019254:	10800204 	addi	r2,r2,8
 2019258:	10800017 	ldw	r2,0(r2)
 201925c:	1004403a 	cmpge	r2,r2,zero
 2019260:	10000c1e 	bne	r2,zero,2019294 <alt_file_locked+0xb4>
 2019264:	e13ffd17 	ldw	r4,-12(fp)
 2019268:	01400304 	movi	r5,12
 201926c:	20032ac0 	call	20032ac <__mulsi3>
 2019270:	1007883a 	mov	r3,r2
 2019274:	008080b4 	movhi	r2,514
 2019278:	10ac5204 	addi	r2,r2,-20152
 201927c:	1887883a 	add	r3,r3,r2
 2019280:	e0bffe17 	ldw	r2,-8(fp)
 2019284:	18800326 	beq	r3,r2,2019294 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2019288:	00bffcc4 	movi	r2,-13
 201928c:	e0bfff15 	stw	r2,-4(fp)
 2019290:	00000a06 	br	20192bc <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2019294:	e0bffd17 	ldw	r2,-12(fp)
 2019298:	10800044 	addi	r2,r2,1
 201929c:	e0bffd15 	stw	r2,-12(fp)
 20192a0:	008080b4 	movhi	r2,514
 20192a4:	10b0ed04 	addi	r2,r2,-15436
 20192a8:	10800017 	ldw	r2,0(r2)
 20192ac:	1007883a 	mov	r3,r2
 20192b0:	e0bffd17 	ldw	r2,-12(fp)
 20192b4:	18bfd72e 	bgeu	r3,r2,2019214 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 20192b8:	e03fff15 	stw	zero,-4(fp)
 20192bc:	e0bfff17 	ldw	r2,-4(fp)
}
 20192c0:	e037883a 	mov	sp,fp
 20192c4:	dfc00217 	ldw	ra,8(sp)
 20192c8:	df000117 	ldw	fp,4(sp)
 20192cc:	dc000017 	ldw	r16,0(sp)
 20192d0:	dec00304 	addi	sp,sp,12
 20192d4:	f800283a 	ret

020192d8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 20192d8:	defff404 	addi	sp,sp,-48
 20192dc:	dfc00b15 	stw	ra,44(sp)
 20192e0:	df000a15 	stw	fp,40(sp)
 20192e4:	df000a04 	addi	fp,sp,40
 20192e8:	e13ffb15 	stw	r4,-20(fp)
 20192ec:	e17ffc15 	stw	r5,-16(fp)
 20192f0:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 20192f4:	00bfffc4 	movi	r2,-1
 20192f8:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 20192fc:	00bffb44 	movi	r2,-19
 2019300:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 2019304:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 2019308:	e13ffb17 	ldw	r4,-20(fp)
 201930c:	014080b4 	movhi	r5,514
 2019310:	2970eb04 	addi	r5,r5,-15444
 2019314:	2018fe00 	call	2018fe0 <alt_find_dev>
 2019318:	e0bffa15 	stw	r2,-24(fp)
 201931c:	e0bffa17 	ldw	r2,-24(fp)
 2019320:	1004c03a 	cmpne	r2,r2,zero
 2019324:	1000051e 	bne	r2,zero,201933c <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2019328:	e13ffb17 	ldw	r4,-20(fp)
 201932c:	20199cc0 	call	20199cc <alt_find_file>
 2019330:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 2019334:	00800044 	movi	r2,1
 2019338:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 201933c:	e0bffa17 	ldw	r2,-24(fp)
 2019340:	1005003a 	cmpeq	r2,r2,zero
 2019344:	1000311e 	bne	r2,zero,201940c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2019348:	e13ffa17 	ldw	r4,-24(fp)
 201934c:	2019aec0 	call	2019aec <alt_get_fd>
 2019350:	e0bff815 	stw	r2,-32(fp)
 2019354:	e0bff817 	ldw	r2,-32(fp)
 2019358:	1004403a 	cmpge	r2,r2,zero
 201935c:	1000031e 	bne	r2,zero,201936c <open+0x94>
    {
      status = index;
 2019360:	e0bff817 	ldw	r2,-32(fp)
 2019364:	e0bff715 	stw	r2,-36(fp)
 2019368:	00002a06 	br	2019414 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 201936c:	e13ff817 	ldw	r4,-32(fp)
 2019370:	01400304 	movi	r5,12
 2019374:	20032ac0 	call	20032ac <__mulsi3>
 2019378:	1007883a 	mov	r3,r2
 201937c:	008080b4 	movhi	r2,514
 2019380:	10ac5204 	addi	r2,r2,-20152
 2019384:	1885883a 	add	r2,r3,r2
 2019388:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 201938c:	e0fffc17 	ldw	r3,-16(fp)
 2019390:	00900034 	movhi	r2,16384
 2019394:	10bfffc4 	addi	r2,r2,-1
 2019398:	1886703a 	and	r3,r3,r2
 201939c:	e0bff917 	ldw	r2,-28(fp)
 20193a0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 20193a4:	e0bff617 	ldw	r2,-40(fp)
 20193a8:	1004c03a 	cmpne	r2,r2,zero
 20193ac:	1000061e 	bne	r2,zero,20193c8 <open+0xf0>
 20193b0:	e13ff917 	ldw	r4,-28(fp)
 20193b4:	20191e00 	call	20191e0 <alt_file_locked>
 20193b8:	e0bff715 	stw	r2,-36(fp)
 20193bc:	e0bff717 	ldw	r2,-36(fp)
 20193c0:	1004803a 	cmplt	r2,r2,zero
 20193c4:	1000131e 	bne	r2,zero,2019414 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 20193c8:	e0bffa17 	ldw	r2,-24(fp)
 20193cc:	10800317 	ldw	r2,12(r2)
 20193d0:	1005003a 	cmpeq	r2,r2,zero
 20193d4:	1000091e 	bne	r2,zero,20193fc <open+0x124>
 20193d8:	e0bffa17 	ldw	r2,-24(fp)
 20193dc:	10800317 	ldw	r2,12(r2)
 20193e0:	e13ff917 	ldw	r4,-28(fp)
 20193e4:	e17ffb17 	ldw	r5,-20(fp)
 20193e8:	e1bffc17 	ldw	r6,-16(fp)
 20193ec:	e1fffd17 	ldw	r7,-12(fp)
 20193f0:	103ee83a 	callr	r2
 20193f4:	e0bfff15 	stw	r2,-4(fp)
 20193f8:	00000106 	br	2019400 <open+0x128>
 20193fc:	e03fff15 	stw	zero,-4(fp)
 2019400:	e0bfff17 	ldw	r2,-4(fp)
 2019404:	e0bff715 	stw	r2,-36(fp)
 2019408:	00000206 	br	2019414 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 201940c:	00bffb44 	movi	r2,-19
 2019410:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 2019414:	e0bff717 	ldw	r2,-36(fp)
 2019418:	1004403a 	cmpge	r2,r2,zero
 201941c:	1000091e 	bne	r2,zero,2019444 <open+0x16c>
  {
    alt_release_fd (index);  
 2019420:	e13ff817 	ldw	r4,-32(fp)
 2019424:	200eccc0 	call	200eccc <alt_release_fd>
    ALT_ERRNO = -status;
 2019428:	20194640 	call	2019464 <alt_get_errno>
 201942c:	e0fff717 	ldw	r3,-36(fp)
 2019430:	00c7c83a 	sub	r3,zero,r3
 2019434:	10c00015 	stw	r3,0(r2)
    return -1;
 2019438:	00bfffc4 	movi	r2,-1
 201943c:	e0bffe15 	stw	r2,-8(fp)
 2019440:	00000206 	br	201944c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 2019444:	e0bff817 	ldw	r2,-32(fp)
 2019448:	e0bffe15 	stw	r2,-8(fp)
 201944c:	e0bffe17 	ldw	r2,-8(fp)
}
 2019450:	e037883a 	mov	sp,fp
 2019454:	dfc00117 	ldw	ra,4(sp)
 2019458:	df000017 	ldw	fp,0(sp)
 201945c:	dec00204 	addi	sp,sp,8
 2019460:	f800283a 	ret

02019464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2019464:	defffd04 	addi	sp,sp,-12
 2019468:	dfc00215 	stw	ra,8(sp)
 201946c:	df000115 	stw	fp,4(sp)
 2019470:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 2019474:	008080b4 	movhi	r2,514
 2019478:	10b0ee04 	addi	r2,r2,-15432
 201947c:	10800017 	ldw	r2,0(r2)
 2019480:	1005003a 	cmpeq	r2,r2,zero
 2019484:	1000061e 	bne	r2,zero,20194a0 <alt_get_errno+0x3c>
 2019488:	008080b4 	movhi	r2,514
 201948c:	10b0ee04 	addi	r2,r2,-15432
 2019490:	10800017 	ldw	r2,0(r2)
 2019494:	103ee83a 	callr	r2
 2019498:	e0bfff15 	stw	r2,-4(fp)
 201949c:	00000306 	br	20194ac <alt_get_errno+0x48>
 20194a0:	008080b4 	movhi	r2,514
 20194a4:	10b7f704 	addi	r2,r2,-8228
 20194a8:	e0bfff15 	stw	r2,-4(fp)
 20194ac:	e0bfff17 	ldw	r2,-4(fp)
}
 20194b0:	e037883a 	mov	sp,fp
 20194b4:	dfc00117 	ldw	ra,4(sp)
 20194b8:	df000017 	ldw	fp,0(sp)
 20194bc:	dec00204 	addi	sp,sp,8
 20194c0:	f800283a 	ret

020194c4 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 20194c4:	deffff04 	addi	sp,sp,-4
 20194c8:	df000015 	stw	fp,0(sp)
 20194cc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 20194d0:	000170fa 	wrctl	ienable,zero
}
 20194d4:	e037883a 	mov	sp,fp
 20194d8:	df000017 	ldw	fp,0(sp)
 20194dc:	dec00104 	addi	sp,sp,4
 20194e0:	f800283a 	ret

020194e4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 20194e4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 20194e8:	d0e00017 	ldw	r3,-32768(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 20194ec:	d1273217 	ldw	r4,-25400(gp)

      stw ra,  0(sp)
 20194f0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 20194f4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 20194f8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 20194fc:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 2019500:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 2019504:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 2019508:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 201950c:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 2019510:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 2019514:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 2019518:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 201951c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 2019520:	20199040 	call	2019904 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 2019524:	d1272d17 	ldw	r4,-25420(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 2019528:	d1672507 	ldb	r5,-25452(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 201952c:	d1273215 	stw	r4,-25400(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 2019530:	d1672545 	stb	r5,-25451(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 2019534:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 2019538:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 201953c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 2019540:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 2019544:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 2019548:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 201954c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 2019550:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 2019554:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 2019558:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 201955c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 2019560:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 2019564:	d0e00015 	stw	r3,-32768(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 2019568:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 201956c:	f800283a 	ret

02019570 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 2019570:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 2019574:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 2019578:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 201957c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 2019580:	20199040 	call	2019904 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 2019584:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 2019588:	d4a72345 	stb	r18,-25459(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 201958c:	003fe506 	br	2019524 <OSCtxSw+0x40>

02019590 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 2019590:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 2019594:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 2019598:	10800054 	ori	r2,r2,1
      wrctl status, r2
 201959c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 20195a0:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 20195a4:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 20195a8:	dec00204 	addi	sp,sp,8

      callr r2
 20195ac:	103ee83a 	callr	r2

      nop
 20195b0:	0001883a 	nop

020195b4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 20195b4:	defff704 	addi	sp,sp,-36
 20195b8:	dfc00815 	stw	ra,32(sp)
 20195bc:	df000715 	stw	fp,28(sp)
 20195c0:	df000704 	addi	fp,sp,28
 20195c4:	e13ffc15 	stw	r4,-16(fp)
 20195c8:	e17ffd15 	stw	r5,-12(fp)
 20195cc:	e1bffe15 	stw	r6,-8(fp)
 20195d0:	e1ffff0d 	sth	r7,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 20195d4:	e0bffe17 	ldw	r2,-8(fp)
 20195d8:	1007883a 	mov	r3,r2
 20195dc:	00bfff04 	movi	r2,-4
 20195e0:	1884703a 	and	r2,r3,r2
 20195e4:	10bf0004 	addi	r2,r2,-1024
 20195e8:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 20195ec:	e0bff917 	ldw	r2,-28(fp)
 20195f0:	10000015 	stw	zero,0(r2)
 20195f4:	e0bff917 	ldw	r2,-28(fp)
 20195f8:	10c0bb04 	addi	r3,r2,748
 20195fc:	e0bff917 	ldw	r2,-28(fp)
 2019600:	10c00115 	stw	r3,4(r2)
 2019604:	e0bff917 	ldw	r2,-28(fp)
 2019608:	1080bb04 	addi	r2,r2,748
 201960c:	10c01704 	addi	r3,r2,92
 2019610:	e0bff917 	ldw	r2,-28(fp)
 2019614:	10c00215 	stw	r3,8(r2)
 2019618:	e0bff917 	ldw	r2,-28(fp)
 201961c:	1080bb04 	addi	r2,r2,748
 2019620:	10c02e04 	addi	r3,r2,184
 2019624:	e0bff917 	ldw	r2,-28(fp)
 2019628:	10c00315 	stw	r3,12(r2)
 201962c:	e0bff917 	ldw	r2,-28(fp)
 2019630:	10000415 	stw	zero,16(r2)
 2019634:	e0bff917 	ldw	r2,-28(fp)
 2019638:	10800504 	addi	r2,r2,20
 201963c:	1009883a 	mov	r4,r2
 2019640:	01800644 	movi	r6,25
 2019644:	000b883a 	mov	r5,zero
 2019648:	20041c40 	call	20041c4 <memset>
 201964c:	e0bff917 	ldw	r2,-28(fp)
 2019650:	10000c15 	stw	zero,48(r2)
 2019654:	e0fff917 	ldw	r3,-28(fp)
 2019658:	008080b4 	movhi	r2,514
 201965c:	10aa4204 	addi	r2,r2,-22264
 2019660:	18800d15 	stw	r2,52(r3)
 2019664:	e0bff917 	ldw	r2,-28(fp)
 2019668:	10000e15 	stw	zero,56(r2)
 201966c:	e0bff917 	ldw	r2,-28(fp)
 2019670:	10000f15 	stw	zero,60(r2)
 2019674:	e0bff917 	ldw	r2,-28(fp)
 2019678:	10001015 	stw	zero,64(r2)
 201967c:	e0bff917 	ldw	r2,-28(fp)
 2019680:	10001115 	stw	zero,68(r2)
 2019684:	e0bff917 	ldw	r2,-28(fp)
 2019688:	10001215 	stw	zero,72(r2)
 201968c:	e0bff917 	ldw	r2,-28(fp)
 2019690:	10001315 	stw	zero,76(r2)
 2019694:	e0bff917 	ldw	r2,-28(fp)
 2019698:	10001415 	stw	zero,80(r2)
 201969c:	e0bff917 	ldw	r2,-28(fp)
 20196a0:	10001515 	stw	zero,84(r2)
 20196a4:	e0bff917 	ldw	r2,-28(fp)
 20196a8:	10001615 	stw	zero,88(r2)
 20196ac:	e0bff917 	ldw	r2,-28(fp)
 20196b0:	10001715 	stw	zero,92(r2)
 20196b4:	e0bff917 	ldw	r2,-28(fp)
 20196b8:	10001805 	stb	zero,96(r2)
 20196bc:	e0bff917 	ldw	r2,-28(fp)
 20196c0:	10801f04 	addi	r2,r2,124
 20196c4:	10000015 	stw	zero,0(r2)
 20196c8:	10000115 	stw	zero,4(r2)
 20196cc:	10000215 	stw	zero,8(r2)
 20196d0:	10000315 	stw	zero,12(r2)
 20196d4:	10000415 	stw	zero,16(r2)
 20196d8:	10000515 	stw	zero,20(r2)
 20196dc:	10000615 	stw	zero,24(r2)
 20196e0:	10000715 	stw	zero,28(r2)
 20196e4:	10000815 	stw	zero,32(r2)
 20196e8:	e0bff917 	ldw	r2,-28(fp)
 20196ec:	10002815 	stw	zero,160(r2)
 20196f0:	e0fff917 	ldw	r3,-28(fp)
 20196f4:	00800044 	movi	r2,1
 20196f8:	18802915 	stw	r2,164(r3)
 20196fc:	18002a15 	stw	zero,168(r3)
 2019700:	e0fff917 	ldw	r3,-28(fp)
 2019704:	008cc384 	movi	r2,13070
 2019708:	18802b0d 	sth	r2,172(r3)
 201970c:	e0fff917 	ldw	r3,-28(fp)
 2019710:	00aaf344 	movi	r2,-21555
 2019714:	18802b8d 	sth	r2,174(r3)
 2019718:	e0fff917 	ldw	r3,-28(fp)
 201971c:	00848d04 	movi	r2,4660
 2019720:	18802c0d 	sth	r2,176(r3)
 2019724:	e0fff917 	ldw	r3,-28(fp)
 2019728:	00b99b44 	movi	r2,-6547
 201972c:	18802c8d 	sth	r2,178(r3)
 2019730:	e0fff917 	ldw	r3,-28(fp)
 2019734:	00b7bb04 	movi	r2,-8468
 2019738:	18802d0d 	sth	r2,180(r3)
 201973c:	e0fff917 	ldw	r3,-28(fp)
 2019740:	00800144 	movi	r2,5
 2019744:	18802d8d 	sth	r2,182(r3)
 2019748:	e0fff917 	ldw	r3,-28(fp)
 201974c:	008002c4 	movi	r2,11
 2019750:	18802e0d 	sth	r2,184(r3)
 2019754:	e0bff917 	ldw	r2,-28(fp)
 2019758:	10002f15 	stw	zero,188(r2)
 201975c:	e0bff917 	ldw	r2,-28(fp)
 2019760:	10003015 	stw	zero,192(r2)
 2019764:	e0bff917 	ldw	r2,-28(fp)
 2019768:	10003115 	stw	zero,196(r2)
 201976c:	e0bff917 	ldw	r2,-28(fp)
 2019770:	10003215 	stw	zero,200(r2)
 2019774:	e0bff917 	ldw	r2,-28(fp)
 2019778:	10003315 	stw	zero,204(r2)
 201977c:	e0bff917 	ldw	r2,-28(fp)
 2019780:	10003415 	stw	zero,208(r2)
 2019784:	e0bff917 	ldw	r2,-28(fp)
 2019788:	10003e15 	stw	zero,248(r2)
 201978c:	e0bff917 	ldw	r2,-28(fp)
 2019790:	10003f15 	stw	zero,252(r2)
 2019794:	e0bff917 	ldw	r2,-28(fp)
 2019798:	10004015 	stw	zero,256(r2)
 201979c:	e0bff917 	ldw	r2,-28(fp)
 20197a0:	10004115 	stw	zero,260(r2)
 20197a4:	e0bff917 	ldw	r2,-28(fp)
 20197a8:	10004215 	stw	zero,264(r2)
 20197ac:	e0bff917 	ldw	r2,-28(fp)
 20197b0:	10004315 	stw	zero,268(r2)
 20197b4:	e0bff917 	ldw	r2,-28(fp)
 20197b8:	10004415 	stw	zero,272(r2)
 20197bc:	e0bff917 	ldw	r2,-28(fp)
 20197c0:	10004515 	stw	zero,276(r2)
 20197c4:	e0bff917 	ldw	r2,-28(fp)
 20197c8:	10004615 	stw	zero,280(r2)
 20197cc:	e0bff917 	ldw	r2,-28(fp)
 20197d0:	10004715 	stw	zero,284(r2)
 20197d4:	e0bff917 	ldw	r2,-28(fp)
 20197d8:	10003505 	stb	zero,212(r2)
 20197dc:	e0bff917 	ldw	r2,-28(fp)
 20197e0:	10003705 	stb	zero,220(r2)
 20197e4:	e0bff917 	ldw	r2,-28(fp)
 20197e8:	10003d15 	stw	zero,244(r2)
 20197ec:	e0bff917 	ldw	r2,-28(fp)
 20197f0:	10005215 	stw	zero,328(r2)
 20197f4:	e0bff917 	ldw	r2,-28(fp)
 20197f8:	10005315 	stw	zero,332(r2)
 20197fc:	e0bff917 	ldw	r2,-28(fp)
 2019800:	10005415 	stw	zero,336(r2)
 2019804:	e0bff917 	ldw	r2,-28(fp)
 2019808:	10005515 	stw	zero,340(r2)
 201980c:	e0bff917 	ldw	r2,-28(fp)
 2019810:	1000b515 	stw	zero,724(r2)
 2019814:	e0bff917 	ldw	r2,-28(fp)
 2019818:	10007515 	stw	zero,468(r2)
 201981c:	e0bff917 	ldw	r2,-28(fp)
 2019820:	1000b715 	stw	zero,732(r2)
 2019824:	e0bff917 	ldw	r2,-28(fp)
 2019828:	1000b815 	stw	zero,736(r2)
 201982c:	e0bff917 	ldw	r2,-28(fp)
 2019830:	1000b915 	stw	zero,740(r2)
 2019834:	e0bff917 	ldw	r2,-28(fp)
 2019838:	1000ba15 	stw	zero,744(r2)
 201983c:	e0bff917 	ldw	r2,-28(fp)
 2019840:	1080bb04 	addi	r2,r2,748
 2019844:	1009883a 	mov	r4,r2
 2019848:	01804504 	movi	r6,276
 201984c:	000b883a 	mov	r5,zero
 2019850:	20041c40 	call	20041c4 <memset>
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 2019854:	e0bff917 	ldw	r2,-28(fp)
 2019858:	e0bffb15 	stw	r2,-20(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 201985c:	e0bffb17 	ldw	r2,-20(fp)
 2019860:	10bff304 	addi	r2,r2,-52
 2019864:	e0bffa15 	stw	r2,-24(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 2019868:	e0bffa17 	ldw	r2,-24(fp)
 201986c:	10c00c04 	addi	r3,r2,48
 2019870:	e0bffc17 	ldw	r2,-16(fp)
 2019874:	18800015 	stw	r2,0(r3)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 2019878:	e0bffa17 	ldw	r2,-24(fp)
 201987c:	10c00b04 	addi	r3,r2,44
 2019880:	e0bffd17 	ldw	r2,-12(fp)
 2019884:	18800015 	stw	r2,0(r3)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 2019888:	e0bffa17 	ldw	r2,-24(fp)
 201988c:	10c00a04 	addi	r3,r2,40
 2019890:	e0bff917 	ldw	r2,-28(fp)
 2019894:	18800015 	stw	r2,0(r3)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 2019898:	008080b4 	movhi	r2,514
 201989c:	10a56404 	addi	r2,r2,-27248
 20198a0:	10c00104 	addi	r3,r2,4
 20198a4:	e0bffa17 	ldw	r2,-24(fp)
 20198a8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 20198ac:	e0bffa17 	ldw	r2,-24(fp)
}
 20198b0:	e037883a 	mov	sp,fp
 20198b4:	dfc00117 	ldw	ra,4(sp)
 20198b8:	df000017 	ldw	fp,0(sp)
 20198bc:	dec00204 	addi	sp,sp,8
 20198c0:	f800283a 	ret

020198c4 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 20198c4:	defffe04 	addi	sp,sp,-8
 20198c8:	df000115 	stw	fp,4(sp)
 20198cc:	df000104 	addi	fp,sp,4
 20198d0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 20198d4:	e037883a 	mov	sp,fp
 20198d8:	df000017 	ldw	fp,0(sp)
 20198dc:	dec00104 	addi	sp,sp,4
 20198e0:	f800283a 	ret

020198e4 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 20198e4:	defffe04 	addi	sp,sp,-8
 20198e8:	df000115 	stw	fp,4(sp)
 20198ec:	df000104 	addi	fp,sp,4
 20198f0:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 20198f4:	e037883a 	mov	sp,fp
 20198f8:	df000017 	ldw	fp,0(sp)
 20198fc:	dec00104 	addi	sp,sp,4
 2019900:	f800283a 	ret

02019904 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 2019904:	deffff04 	addi	sp,sp,-4
 2019908:	df000015 	stw	fp,0(sp)
 201990c:	d839883a 	mov	fp,sp
}
 2019910:	e037883a 	mov	sp,fp
 2019914:	df000017 	ldw	fp,0(sp)
 2019918:	dec00104 	addi	sp,sp,4
 201991c:	f800283a 	ret

02019920 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 2019920:	deffff04 	addi	sp,sp,-4
 2019924:	df000015 	stw	fp,0(sp)
 2019928:	d839883a 	mov	fp,sp
}
 201992c:	e037883a 	mov	sp,fp
 2019930:	df000017 	ldw	fp,0(sp)
 2019934:	dec00104 	addi	sp,sp,4
 2019938:	f800283a 	ret

0201993c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 201993c:	deffff04 	addi	sp,sp,-4
 2019940:	df000015 	stw	fp,0(sp)
 2019944:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 2019948:	e037883a 	mov	sp,fp
 201994c:	df000017 	ldw	fp,0(sp)
 2019950:	dec00104 	addi	sp,sp,4
 2019954:	f800283a 	ret

02019958 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 2019958:	deffff04 	addi	sp,sp,-4
 201995c:	df000015 	stw	fp,0(sp)
 2019960:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 2019964:	e037883a 	mov	sp,fp
 2019968:	df000017 	ldw	fp,0(sp)
 201996c:	dec00104 	addi	sp,sp,4
 2019970:	f800283a 	ret

02019974 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 2019974:	deffff04 	addi	sp,sp,-4
 2019978:	df000015 	stw	fp,0(sp)
 201997c:	d839883a 	mov	fp,sp
}
 2019980:	e037883a 	mov	sp,fp
 2019984:	df000017 	ldw	fp,0(sp)
 2019988:	dec00104 	addi	sp,sp,4
 201998c:	f800283a 	ret

02019990 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 2019990:	deffff04 	addi	sp,sp,-4
 2019994:	df000015 	stw	fp,0(sp)
 2019998:	d839883a 	mov	fp,sp
}
 201999c:	e037883a 	mov	sp,fp
 20199a0:	df000017 	ldw	fp,0(sp)
 20199a4:	dec00104 	addi	sp,sp,4
 20199a8:	f800283a 	ret

020199ac <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 20199ac:	defffe04 	addi	sp,sp,-8
 20199b0:	df000115 	stw	fp,4(sp)
 20199b4:	df000104 	addi	fp,sp,4
 20199b8:	e13fff15 	stw	r4,-4(fp)
}
 20199bc:	e037883a 	mov	sp,fp
 20199c0:	df000017 	ldw	fp,0(sp)
 20199c4:	dec00104 	addi	sp,sp,4
 20199c8:	f800283a 	ret

020199cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 20199cc:	defffa04 	addi	sp,sp,-24
 20199d0:	dfc00515 	stw	ra,20(sp)
 20199d4:	df000415 	stw	fp,16(sp)
 20199d8:	df000404 	addi	fp,sp,16
 20199dc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 20199e0:	008080b4 	movhi	r2,514
 20199e4:	10b0e904 	addi	r2,r2,-15452
 20199e8:	10800017 	ldw	r2,0(r2)
 20199ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 20199f0:	00003306 	br	2019ac0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 20199f4:	e0bffd17 	ldw	r2,-12(fp)
 20199f8:	11000217 	ldw	r4,8(r2)
 20199fc:	2004d2c0 	call	2004d2c <strlen>
 2019a00:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 2019a04:	e0bffd17 	ldw	r2,-12(fp)
 2019a08:	10c00217 	ldw	r3,8(r2)
 2019a0c:	e0bffc17 	ldw	r2,-16(fp)
 2019a10:	1885883a 	add	r2,r3,r2
 2019a14:	10bfffc4 	addi	r2,r2,-1
 2019a18:	10800003 	ldbu	r2,0(r2)
 2019a1c:	10803fcc 	andi	r2,r2,255
 2019a20:	1080201c 	xori	r2,r2,128
 2019a24:	10bfe004 	addi	r2,r2,-128
 2019a28:	10800bd8 	cmpnei	r2,r2,47
 2019a2c:	1000031e 	bne	r2,zero,2019a3c <alt_find_file+0x70>
    {
      len -= 1;
 2019a30:	e0bffc17 	ldw	r2,-16(fp)
 2019a34:	10bfffc4 	addi	r2,r2,-1
 2019a38:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 2019a3c:	e0bffc17 	ldw	r2,-16(fp)
 2019a40:	1007883a 	mov	r3,r2
 2019a44:	e0bffe17 	ldw	r2,-8(fp)
 2019a48:	1885883a 	add	r2,r3,r2
 2019a4c:	10800003 	ldbu	r2,0(r2)
 2019a50:	10803fcc 	andi	r2,r2,255
 2019a54:	1080201c 	xori	r2,r2,128
 2019a58:	10bfe004 	addi	r2,r2,-128
 2019a5c:	10800be0 	cmpeqi	r2,r2,47
 2019a60:	10000a1e 	bne	r2,zero,2019a8c <alt_find_file+0xc0>
 2019a64:	e0bffc17 	ldw	r2,-16(fp)
 2019a68:	1007883a 	mov	r3,r2
 2019a6c:	e0bffe17 	ldw	r2,-8(fp)
 2019a70:	1885883a 	add	r2,r3,r2
 2019a74:	10800003 	ldbu	r2,0(r2)
 2019a78:	10803fcc 	andi	r2,r2,255
 2019a7c:	1080201c 	xori	r2,r2,128
 2019a80:	10bfe004 	addi	r2,r2,-128
 2019a84:	1004c03a 	cmpne	r2,r2,zero
 2019a88:	10000a1e 	bne	r2,zero,2019ab4 <alt_find_file+0xe8>
 2019a8c:	e0bffd17 	ldw	r2,-12(fp)
 2019a90:	11000217 	ldw	r4,8(r2)
 2019a94:	e1bffc17 	ldw	r6,-16(fp)
 2019a98:	e17ffe17 	ldw	r5,-8(fp)
 2019a9c:	2019c3c0 	call	2019c3c <memcmp>
 2019aa0:	1004c03a 	cmpne	r2,r2,zero
 2019aa4:	1000031e 	bne	r2,zero,2019ab4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2019aa8:	e0bffd17 	ldw	r2,-12(fp)
 2019aac:	e0bfff15 	stw	r2,-4(fp)
 2019ab0:	00000806 	br	2019ad4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 2019ab4:	e0bffd17 	ldw	r2,-12(fp)
 2019ab8:	10800017 	ldw	r2,0(r2)
 2019abc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2019ac0:	00c080b4 	movhi	r3,514
 2019ac4:	18f0e904 	addi	r3,r3,-15452
 2019ac8:	e0bffd17 	ldw	r2,-12(fp)
 2019acc:	10ffc91e 	bne	r2,r3,20199f4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2019ad0:	e03fff15 	stw	zero,-4(fp)
 2019ad4:	e0bfff17 	ldw	r2,-4(fp)
}
 2019ad8:	e037883a 	mov	sp,fp
 2019adc:	dfc00117 	ldw	ra,4(sp)
 2019ae0:	df000017 	ldw	fp,0(sp)
 2019ae4:	dec00204 	addi	sp,sp,8
 2019ae8:	f800283a 	ret

02019aec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 2019aec:	defff704 	addi	sp,sp,-36
 2019af0:	dfc00815 	stw	ra,32(sp)
 2019af4:	df000715 	stw	fp,28(sp)
 2019af8:	dc000615 	stw	r16,24(sp)
 2019afc:	df000604 	addi	fp,sp,24
 2019b00:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 2019b04:	00bffa04 	movi	r2,-24
 2019b08:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 2019b0c:	008080b4 	movhi	r2,514
 2019b10:	10b7fb04 	addi	r2,r2,-8212
 2019b14:	10800017 	ldw	r2,0(r2)
 2019b18:	e0bffa15 	stw	r2,-24(fp)
 2019b1c:	e03ffb0d 	sth	zero,-20(fp)
 2019b20:	e17ffb0b 	ldhu	r5,-20(fp)
 2019b24:	e1bffe04 	addi	r6,fp,-8
 2019b28:	e13ffa17 	ldw	r4,-24(fp)
 2019b2c:	20150d00 	call	20150d0 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2019b30:	e03ffd15 	stw	zero,-12(fp)
 2019b34:	00002006 	br	2019bb8 <alt_get_fd+0xcc>
  {
    if (!alt_fd_list[i].dev)
 2019b38:	e13ffd17 	ldw	r4,-12(fp)
 2019b3c:	040080b4 	movhi	r16,514
 2019b40:	842c5204 	addi	r16,r16,-20152
 2019b44:	01400304 	movi	r5,12
 2019b48:	20032ac0 	call	20032ac <__mulsi3>
 2019b4c:	1405883a 	add	r2,r2,r16
 2019b50:	10800017 	ldw	r2,0(r2)
 2019b54:	1004c03a 	cmpne	r2,r2,zero
 2019b58:	1000141e 	bne	r2,zero,2019bac <alt_get_fd+0xc0>
    {
      alt_fd_list[i].dev = dev;
 2019b5c:	e13ffd17 	ldw	r4,-12(fp)
 2019b60:	040080b4 	movhi	r16,514
 2019b64:	842c5204 	addi	r16,r16,-20152
 2019b68:	01400304 	movi	r5,12
 2019b6c:	20032ac0 	call	20032ac <__mulsi3>
 2019b70:	1407883a 	add	r3,r2,r16
 2019b74:	e0bfff17 	ldw	r2,-4(fp)
 2019b78:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 2019b7c:	008080b4 	movhi	r2,514
 2019b80:	10b0ed04 	addi	r2,r2,-15436
 2019b84:	10c00017 	ldw	r3,0(r2)
 2019b88:	e0bffd17 	ldw	r2,-12(fp)
 2019b8c:	1880040e 	bge	r3,r2,2019ba0 <alt_get_fd+0xb4>
      {
        alt_max_fd = i;
 2019b90:	00c080b4 	movhi	r3,514
 2019b94:	18f0ed04 	addi	r3,r3,-15436
 2019b98:	e0bffd17 	ldw	r2,-12(fp)
 2019b9c:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 2019ba0:	e0bffd17 	ldw	r2,-12(fp)
 2019ba4:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 2019ba8:	00000606 	br	2019bc4 <alt_get_fd+0xd8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2019bac:	e0bffd17 	ldw	r2,-12(fp)
 2019bb0:	10800044 	addi	r2,r2,1
 2019bb4:	e0bffd15 	stw	r2,-12(fp)
 2019bb8:	e0bffd17 	ldw	r2,-12(fp)
 2019bbc:	10800810 	cmplti	r2,r2,32
 2019bc0:	103fdd1e 	bne	r2,zero,2019b38 <alt_get_fd+0x4c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 2019bc4:	008080b4 	movhi	r2,514
 2019bc8:	10b7fb04 	addi	r2,r2,-8212
 2019bcc:	11000017 	ldw	r4,0(r2)
 2019bd0:	20154c80 	call	20154c8 <OSSemPost>

  return rc;
 2019bd4:	e0bffc17 	ldw	r2,-16(fp)
}
 2019bd8:	e037883a 	mov	sp,fp
 2019bdc:	dfc00217 	ldw	ra,8(sp)
 2019be0:	df000117 	ldw	fp,4(sp)
 2019be4:	dc000017 	ldw	r16,0(sp)
 2019be8:	dec00304 	addi	sp,sp,12
 2019bec:	f800283a 	ret

02019bf0 <atexit>:
 2019bf0:	200b883a 	mov	r5,r4
 2019bf4:	000d883a 	mov	r6,zero
 2019bf8:	0009883a 	mov	r4,zero
 2019bfc:	000f883a 	mov	r7,zero
 2019c00:	2019cb01 	jmpi	2019cb0 <__register_exitproc>

02019c04 <exit>:
 2019c04:	defffe04 	addi	sp,sp,-8
 2019c08:	000b883a 	mov	r5,zero
 2019c0c:	dc000015 	stw	r16,0(sp)
 2019c10:	dfc00115 	stw	ra,4(sp)
 2019c14:	2021883a 	mov	r16,r4
 2019c18:	2019de80 	call	2019de8 <__call_exitprocs>
 2019c1c:	008080b4 	movhi	r2,514
 2019c20:	10b0e404 	addi	r2,r2,-15472
 2019c24:	11000017 	ldw	r4,0(r2)
 2019c28:	20800f17 	ldw	r2,60(r4)
 2019c2c:	10000126 	beq	r2,zero,2019c34 <exit+0x30>
 2019c30:	103ee83a 	callr	r2
 2019c34:	8009883a 	mov	r4,r16
 2019c38:	200e2380 	call	200e238 <_exit>

02019c3c <memcmp>:
 2019c3c:	00c000c4 	movi	r3,3
 2019c40:	1980032e 	bgeu	r3,r6,2019c50 <memcmp+0x14>
 2019c44:	2144b03a 	or	r2,r4,r5
 2019c48:	10c4703a 	and	r2,r2,r3
 2019c4c:	10000f26 	beq	r2,zero,2019c8c <memcmp+0x50>
 2019c50:	31ffffc4 	addi	r7,r6,-1
 2019c54:	3000061e 	bne	r6,zero,2019c70 <memcmp+0x34>
 2019c58:	00000a06 	br	2019c84 <memcmp+0x48>
 2019c5c:	39ffffc4 	addi	r7,r7,-1
 2019c60:	00bfffc4 	movi	r2,-1
 2019c64:	21000044 	addi	r4,r4,1
 2019c68:	29400044 	addi	r5,r5,1
 2019c6c:	38800526 	beq	r7,r2,2019c84 <memcmp+0x48>
 2019c70:	20c00003 	ldbu	r3,0(r4)
 2019c74:	28800003 	ldbu	r2,0(r5)
 2019c78:	18bff826 	beq	r3,r2,2019c5c <memcmp+0x20>
 2019c7c:	1885c83a 	sub	r2,r3,r2
 2019c80:	f800283a 	ret
 2019c84:	0005883a 	mov	r2,zero
 2019c88:	f800283a 	ret
 2019c8c:	180f883a 	mov	r7,r3
 2019c90:	20c00017 	ldw	r3,0(r4)
 2019c94:	28800017 	ldw	r2,0(r5)
 2019c98:	18bfed1e 	bne	r3,r2,2019c50 <memcmp+0x14>
 2019c9c:	31bfff04 	addi	r6,r6,-4
 2019ca0:	21000104 	addi	r4,r4,4
 2019ca4:	29400104 	addi	r5,r5,4
 2019ca8:	39bff936 	bltu	r7,r6,2019c90 <memcmp+0x54>
 2019cac:	003fe806 	br	2019c50 <memcmp+0x14>

02019cb0 <__register_exitproc>:
 2019cb0:	defffa04 	addi	sp,sp,-24
 2019cb4:	008080b4 	movhi	r2,514
 2019cb8:	10b0e404 	addi	r2,r2,-15472
 2019cbc:	dc000015 	stw	r16,0(sp)
 2019cc0:	14000017 	ldw	r16,0(r2)
 2019cc4:	dd000415 	stw	r20,16(sp)
 2019cc8:	2829883a 	mov	r20,r5
 2019ccc:	81405217 	ldw	r5,328(r16)
 2019cd0:	dcc00315 	stw	r19,12(sp)
 2019cd4:	dc800215 	stw	r18,8(sp)
 2019cd8:	dc400115 	stw	r17,4(sp)
 2019cdc:	dfc00515 	stw	ra,20(sp)
 2019ce0:	2023883a 	mov	r17,r4
 2019ce4:	3027883a 	mov	r19,r6
 2019ce8:	3825883a 	mov	r18,r7
 2019cec:	28002526 	beq	r5,zero,2019d84 <__register_exitproc+0xd4>
 2019cf0:	29000117 	ldw	r4,4(r5)
 2019cf4:	008007c4 	movi	r2,31
 2019cf8:	11002716 	blt	r2,r4,2019d98 <__register_exitproc+0xe8>
 2019cfc:	8800101e 	bne	r17,zero,2019d40 <__register_exitproc+0x90>
 2019d00:	2105883a 	add	r2,r4,r4
 2019d04:	1085883a 	add	r2,r2,r2
 2019d08:	20c00044 	addi	r3,r4,1
 2019d0c:	1145883a 	add	r2,r2,r5
 2019d10:	0009883a 	mov	r4,zero
 2019d14:	15000215 	stw	r20,8(r2)
 2019d18:	28c00115 	stw	r3,4(r5)
 2019d1c:	2005883a 	mov	r2,r4
 2019d20:	dfc00517 	ldw	ra,20(sp)
 2019d24:	dd000417 	ldw	r20,16(sp)
 2019d28:	dcc00317 	ldw	r19,12(sp)
 2019d2c:	dc800217 	ldw	r18,8(sp)
 2019d30:	dc400117 	ldw	r17,4(sp)
 2019d34:	dc000017 	ldw	r16,0(sp)
 2019d38:	dec00604 	addi	sp,sp,24
 2019d3c:	f800283a 	ret
 2019d40:	29802204 	addi	r6,r5,136
 2019d44:	00800044 	movi	r2,1
 2019d48:	110e983a 	sll	r7,r2,r4
 2019d4c:	30c04017 	ldw	r3,256(r6)
 2019d50:	2105883a 	add	r2,r4,r4
 2019d54:	1085883a 	add	r2,r2,r2
 2019d58:	1185883a 	add	r2,r2,r6
 2019d5c:	19c6b03a 	or	r3,r3,r7
 2019d60:	14802015 	stw	r18,128(r2)
 2019d64:	14c00015 	stw	r19,0(r2)
 2019d68:	00800084 	movi	r2,2
 2019d6c:	30c04015 	stw	r3,256(r6)
 2019d70:	88bfe31e 	bne	r17,r2,2019d00 <__register_exitproc+0x50>
 2019d74:	30804117 	ldw	r2,260(r6)
 2019d78:	11c4b03a 	or	r2,r2,r7
 2019d7c:	30804115 	stw	r2,260(r6)
 2019d80:	003fdf06 	br	2019d00 <__register_exitproc+0x50>
 2019d84:	008080f4 	movhi	r2,515
 2019d88:	10a6bf04 	addi	r2,r2,-25860
 2019d8c:	100b883a 	mov	r5,r2
 2019d90:	80805215 	stw	r2,328(r16)
 2019d94:	003fd606 	br	2019cf0 <__register_exitproc+0x40>
 2019d98:	00808034 	movhi	r2,512
 2019d9c:	108e3c04 	addi	r2,r2,14576
 2019da0:	1000021e 	bne	r2,zero,2019dac <__register_exitproc+0xfc>
 2019da4:	013fffc4 	movi	r4,-1
 2019da8:	003fdc06 	br	2019d1c <__register_exitproc+0x6c>
 2019dac:	01006404 	movi	r4,400
 2019db0:	103ee83a 	callr	r2
 2019db4:	1007883a 	mov	r3,r2
 2019db8:	103ffa26 	beq	r2,zero,2019da4 <__register_exitproc+0xf4>
 2019dbc:	80805217 	ldw	r2,328(r16)
 2019dc0:	180b883a 	mov	r5,r3
 2019dc4:	18000115 	stw	zero,4(r3)
 2019dc8:	18800015 	stw	r2,0(r3)
 2019dcc:	80c05215 	stw	r3,328(r16)
 2019dd0:	18006215 	stw	zero,392(r3)
 2019dd4:	18006315 	stw	zero,396(r3)
 2019dd8:	0009883a 	mov	r4,zero
 2019ddc:	883fc826 	beq	r17,zero,2019d00 <__register_exitproc+0x50>
 2019de0:	003fd706 	br	2019d40 <__register_exitproc+0x90>

02019de4 <register_fini>:
 2019de4:	f800283a 	ret

02019de8 <__call_exitprocs>:
 2019de8:	008080b4 	movhi	r2,514
 2019dec:	10b0e404 	addi	r2,r2,-15472
 2019df0:	10800017 	ldw	r2,0(r2)
 2019df4:	defff304 	addi	sp,sp,-52
 2019df8:	df000b15 	stw	fp,44(sp)
 2019dfc:	d8800115 	stw	r2,4(sp)
 2019e00:	00808034 	movhi	r2,512
 2019e04:	108e3704 	addi	r2,r2,14556
 2019e08:	1005003a 	cmpeq	r2,r2,zero
 2019e0c:	d8800215 	stw	r2,8(sp)
 2019e10:	d8800117 	ldw	r2,4(sp)
 2019e14:	dd400815 	stw	r21,32(sp)
 2019e18:	dd000715 	stw	r20,28(sp)
 2019e1c:	10805204 	addi	r2,r2,328
 2019e20:	dfc00c15 	stw	ra,48(sp)
 2019e24:	ddc00a15 	stw	r23,40(sp)
 2019e28:	dd800915 	stw	r22,36(sp)
 2019e2c:	dcc00615 	stw	r19,24(sp)
 2019e30:	dc800515 	stw	r18,20(sp)
 2019e34:	dc400415 	stw	r17,16(sp)
 2019e38:	dc000315 	stw	r16,12(sp)
 2019e3c:	282b883a 	mov	r21,r5
 2019e40:	2039883a 	mov	fp,r4
 2019e44:	d8800015 	stw	r2,0(sp)
 2019e48:	2829003a 	cmpeq	r20,r5,zero
 2019e4c:	d8800117 	ldw	r2,4(sp)
 2019e50:	14405217 	ldw	r17,328(r2)
 2019e54:	88001026 	beq	r17,zero,2019e98 <__call_exitprocs+0xb0>
 2019e58:	ddc00017 	ldw	r23,0(sp)
 2019e5c:	88800117 	ldw	r2,4(r17)
 2019e60:	8c802204 	addi	r18,r17,136
 2019e64:	143fffc4 	addi	r16,r2,-1
 2019e68:	80000916 	blt	r16,zero,2019e90 <__call_exitprocs+0xa8>
 2019e6c:	05bfffc4 	movi	r22,-1
 2019e70:	a000151e 	bne	r20,zero,2019ec8 <__call_exitprocs+0xe0>
 2019e74:	8409883a 	add	r4,r16,r16
 2019e78:	2105883a 	add	r2,r4,r4
 2019e7c:	1485883a 	add	r2,r2,r18
 2019e80:	10c02017 	ldw	r3,128(r2)
 2019e84:	a8c01126 	beq	r21,r3,2019ecc <__call_exitprocs+0xe4>
 2019e88:	843fffc4 	addi	r16,r16,-1
 2019e8c:	85bff81e 	bne	r16,r22,2019e70 <__call_exitprocs+0x88>
 2019e90:	d8800217 	ldw	r2,8(sp)
 2019e94:	10003126 	beq	r2,zero,2019f5c <__call_exitprocs+0x174>
 2019e98:	dfc00c17 	ldw	ra,48(sp)
 2019e9c:	df000b17 	ldw	fp,44(sp)
 2019ea0:	ddc00a17 	ldw	r23,40(sp)
 2019ea4:	dd800917 	ldw	r22,36(sp)
 2019ea8:	dd400817 	ldw	r21,32(sp)
 2019eac:	dd000717 	ldw	r20,28(sp)
 2019eb0:	dcc00617 	ldw	r19,24(sp)
 2019eb4:	dc800517 	ldw	r18,20(sp)
 2019eb8:	dc400417 	ldw	r17,16(sp)
 2019ebc:	dc000317 	ldw	r16,12(sp)
 2019ec0:	dec00d04 	addi	sp,sp,52
 2019ec4:	f800283a 	ret
 2019ec8:	8409883a 	add	r4,r16,r16
 2019ecc:	88c00117 	ldw	r3,4(r17)
 2019ed0:	2105883a 	add	r2,r4,r4
 2019ed4:	1445883a 	add	r2,r2,r17
 2019ed8:	18ffffc4 	addi	r3,r3,-1
 2019edc:	11800217 	ldw	r6,8(r2)
 2019ee0:	1c001526 	beq	r3,r16,2019f38 <__call_exitprocs+0x150>
 2019ee4:	10000215 	stw	zero,8(r2)
 2019ee8:	303fe726 	beq	r6,zero,2019e88 <__call_exitprocs+0xa0>
 2019eec:	00c00044 	movi	r3,1
 2019ef0:	1c06983a 	sll	r3,r3,r16
 2019ef4:	90804017 	ldw	r2,256(r18)
 2019ef8:	8cc00117 	ldw	r19,4(r17)
 2019efc:	1884703a 	and	r2,r3,r2
 2019f00:	10001426 	beq	r2,zero,2019f54 <__call_exitprocs+0x16c>
 2019f04:	90804117 	ldw	r2,260(r18)
 2019f08:	1884703a 	and	r2,r3,r2
 2019f0c:	10000c1e 	bne	r2,zero,2019f40 <__call_exitprocs+0x158>
 2019f10:	2105883a 	add	r2,r4,r4
 2019f14:	1485883a 	add	r2,r2,r18
 2019f18:	11400017 	ldw	r5,0(r2)
 2019f1c:	e009883a 	mov	r4,fp
 2019f20:	303ee83a 	callr	r6
 2019f24:	88800117 	ldw	r2,4(r17)
 2019f28:	98bfc81e 	bne	r19,r2,2019e4c <__call_exitprocs+0x64>
 2019f2c:	b8800017 	ldw	r2,0(r23)
 2019f30:	147fd526 	beq	r2,r17,2019e88 <__call_exitprocs+0xa0>
 2019f34:	003fc506 	br	2019e4c <__call_exitprocs+0x64>
 2019f38:	8c000115 	stw	r16,4(r17)
 2019f3c:	003fea06 	br	2019ee8 <__call_exitprocs+0x100>
 2019f40:	2105883a 	add	r2,r4,r4
 2019f44:	1485883a 	add	r2,r2,r18
 2019f48:	11000017 	ldw	r4,0(r2)
 2019f4c:	303ee83a 	callr	r6
 2019f50:	003ff406 	br	2019f24 <__call_exitprocs+0x13c>
 2019f54:	303ee83a 	callr	r6
 2019f58:	003ff206 	br	2019f24 <__call_exitprocs+0x13c>
 2019f5c:	88800117 	ldw	r2,4(r17)
 2019f60:	1000081e 	bne	r2,zero,2019f84 <__call_exitprocs+0x19c>
 2019f64:	89000017 	ldw	r4,0(r17)
 2019f68:	20000726 	beq	r4,zero,2019f88 <__call_exitprocs+0x1a0>
 2019f6c:	b9000015 	stw	r4,0(r23)
 2019f70:	8809883a 	mov	r4,r17
 2019f74:	20038dc0 	call	20038dc <free>
 2019f78:	bc400017 	ldw	r17,0(r23)
 2019f7c:	883fb71e 	bne	r17,zero,2019e5c <__call_exitprocs+0x74>
 2019f80:	003fc506 	br	2019e98 <__call_exitprocs+0xb0>
 2019f84:	89000017 	ldw	r4,0(r17)
 2019f88:	882f883a 	mov	r23,r17
 2019f8c:	2023883a 	mov	r17,r4
 2019f90:	883fb21e 	bne	r17,zero,2019e5c <__call_exitprocs+0x74>
 2019f94:	003fc006 	br	2019e98 <__call_exitprocs+0xb0>
 2019f98:	02019de4 	muli	r8,zero,1655
